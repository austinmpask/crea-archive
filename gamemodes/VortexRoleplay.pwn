/*
#		crea Main Script
#
#
#	By accessing this file, you agree to the following:
#		- You will never give the script or associated files to anybody who is not on the crea SAMP development team
# 		- You will delete all development materials (script, databases, associated files, etc.) when you leave the crea SAMP development team.
#
#	Credits:
#
#		-Moving Target Gaming development team
#		-coo
*/

#define 		VERSION 	"crea v1.1.1"

native WP_Hash(buffer[], len, const str[]);
native IsValidVehicle(vehicleid);

//YSI Debug 
//#define _DEBUG	5

//#include <a_http>
#include <Pawn.RakNet>
#include <dl-compat>
#include <a_samp>
#include <a_zones>
#include <crashdetect>
#include <Dini>
#include <djson>
#include <filemanager>
#include <foreach>
#include <geoip>
//#include <gtazones>
#include <playerprogress>
#include <sscanf2>
#include <streamer>
#include <zcmd>
#include <YSI\y_inline>
#include <a_mysql>
#include <mSelection>
#include <profiler>

#define MAX_INI_ENTRY_TEXT 160
#define _YSI_NO_VERSION_CHECK

#undef MAX_PLAYERS
#define MAX_PLAYERS 450

//#define MTG_CHRISTMAS
//#define MTG_EASTER
//#define MTG_FAIR
//#define MTG_HALLOWEEN

#include <YSI\y_ini>
#include <YSI\y_timers>
#include <YSI\y_hooks>

#define WC_USE_STREAMER				true
#define WC_CUSTOM_VENDING_MACHINES	true

#include <SKY>
#include <weapon-config>

new MYSQL_MAIN, MYSQL_IP[32], MYSQL_USERNAME[32], MYSQL_DATABASE_NAME[32], MYSQL_PASSWORD[32], EmergencyShutdown;
new TaxGroup; //DB:main_db, , DB:lvpd_db, DB:group_db;
new Float: VipLounge[9], VipLoungeInterior, VipLoungeVW;

new bool:IsServerStartingUp;

// Forwards
forward RandomEx(min, max);
forward MinutesToSeconds(minutes);
forward MinutesToHours(minutes);
forward GetOwnedCarMods(playerid);
forward NearByMessage(playerid, colour, string[]);
forward NearByMessageEx(playerid, color, string[], Float: range);
forward SendBusinessMessage(color, string[], businessid);
forward SetPlayerPosEx(playerid, Float: posx, Float: posy, Float: posz, interior, virtualworld);
forward IsSeatOccupied(vehicleid, seatid);
forward SendToAdmins(colour, string[], requireduty);
forward QuizText(string[]);
forward GMXPrep(playerid, reason[]);
forward ResetPlayerWeaponsEx(playerid);
forward DoGMX();
forward RefreshMaterials(playerid);
forward UntazePlayer(playerid);
forward SavePlayerData(playerid);
forward SaveGeneralData();
forward UncuffPlayer(playerid);
forward GivePlayerWeaponEx(playerid, weapon);
forward ClearCriminalRecord(playerid);
forward RallyMessage(colour, string[]);
forward MessageToEventPlayers(colour, string[]);
forward GivePlayerSavedWeapons(playerid);
forward IsPlayerInInvalidNosVehicle(playerid);
forward SecondsToMinutes(seconds);
forward OnPlayerLoginAttempt(playerid, password[]);
forward TimerClear(playerid);
forward DeleteLicense(string[]);
forward bool:IsSQLVehicleSpawned(sql);
forward Float:GetDistanceBetweenPoints(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2);

new PlayerBar:vFuel[MAX_PLAYERS] = {INVALID_PLAYER_BAR_ID, ...};

//Utilities
#include "MTGRP\utils\Colors.pwn"
#include "MTGRP\utils\DialogIDs.pwn"

//Core MTG includes
#include "MTGRP\Core\mtg_extra.pwn"
//#include "MTGRP\Core\mtg_mapping.pwn"
#include "MTGRP\Core\mtg_mysql.pwn"
#include "MTGRP\Core\mtg_save.pwn"
#include "MTGRP\Core\mtg_storage.pwn"
#include "MTGRP\Core\mtg_loyalty.pwn"
#include "MTGRP\Core\mtg_toggles.pwn"

//Admin
#include "MTGRP\Core\Admin\AccountWhitelist.pwn"
#include "MTGRP\Core\Admin\AntiFlood.pwn"
#include "MTGRP\Core\Admin\Fireworks.pwn"
#include "MTGRP\Core\Admin\Construction.pwn"
#include "MTGRP\Core\Admin\DoorGates.pwn"
#include "MTGRP\Core\Admin\Garages.pwn"
#include "MTGRP\Core\Admin\ParkcarBanZone.pwn"
//#include "MTGRP\Core\Admin\PlayerLabels.pwn"
#include "MTGRP\Core\Admin\SpawnCar.pwn"
#include "MTGRP\Core\Admin\SideDoors.pwn"
//#include "MTGRP\Core\Admin\GPCI.pwn"

//Anticheat
#include "MTGRP\Core\Anticheat\WeaponAC.pwn"
#include "MTGRP\Core\Anticheat\AntiAFK.pwn"
#include "MTGRP\Core\Anticheat\ProxyBlock.pwn"
#include "MTGRP\Core\Anticheat\AntiCLEOSlap.pwn"

//Business
#include "MTGRP\Core\Business\Crowdfund.pwn"
#include "MTGRP\Core\Business\Hotels.pwn"

//Player
#include "MTGRP\Core\Player\Toys.pwn"
#include "MTGRP\Core\Player\Animations.pwn"
#include "MTGRP\Core\Player\YellowPages.pwn"
#include "MTGRP\Core\Player\HungerSystem.pwn"
#include "MTGRP\Core\Player\Boombox.pwn"
#include "MTGRP\Core\Player\Hotwire.pwn"
#include "MTGRP\Core\Player\Drugs.pwn"
#include "MTGRP\Core\Player\Camping.pwn"

//House
#include "MTGRP\Core\House\Furniture.pwn"

//Jobs
#include "MTGRP\Core\Jobs\Garbage.pwn"
#include "MTGRP\Core\Jobs\Trucker.pwn"
#include "MTGRP\Core\Jobs\ArmsDealer.pwn"
#include "MTGRP\Core\Jobs\CarJacker.pwn"

//Groups
#include "MTGRP\Core\Groups\Gangs.pwn"
#include "MTGRP\Core\Groups\LSPD_MDC.pwn"
#include "MTGRP\Core\Groups\Prison.pwn"
#include "MTGRP\Core\Groups\Bombs.pwn"

//Vehicles
#include "MTGRP\Core\Vehicles\LSPDSirens.pwn"

//Christmas :D
#if defined MTG_CHRISTMAS
	#include "MTGRP\Core\Misc\Christmas.pwn"
#endif

//Easter
#if defined MTG_EASTER
	#include "MTGRP\Core\Misc\Easter.pwn"
#endif


//Halloween
#if defined MTG_HALLOWEEN
	#include "MTGRP\Core\Misc\Halloween.pwn"
#endif

//Fair & 4th of July
#if defined MTG_FAIR
	#include "MTGRP\Core\Misc\Fair.pwn"
#endif

#include "MTGRP\Core\Misc\Plague.pwn"

#define chrtolower(%1) \
(((%1) > 0x40 && (%1) <= 0x5A) ? ((%1) | 0x20) : (%1))

#define chrtoupper(%1) \
(((%1) > 0x60 && (%1) <= 0x7A) ? ((%1) ^ 0x20) : (%1))

#define SpeedCheck(%0,%1,%2,%3,%4) floatround(floatsqroot(%4?(%0*%0+%1*%1+%2*%2):(%0*%0+%1*%1)) *%3/* * 1.6 */)

//#define 				CITY_HALL_OBJECTS   				30

#define 				MAX_RALLY_CHECKPOINTS				100
#define 				MAX_RALLIES 						20
#define                 MAX_RALLY_VEHICLES                  50

#define                 MAX_SPIKES                          15
#define                 MAX_SPEED_HACK_WARNINGS             3

#define                 MAX_WEAPON_HACK_WARNINGS            3
#define                 VIP_SLOTS                           50
#define 				CAR_MOD_DELAY_TIME                  61
#define 				MATRUN_INABILITY_TIME 				61
#define 				FISH_INABILITY_TIME 				3600
#define					DELIVER_INABILITY_TIME				301
#define 				IMPOUNDCOST							5000

#define                 LICENSE                             "926c4c3e41c1bd0f66ef47a0a94087d8"

#define WEAPON_CREATE_TIME 61
#define PRISON_MINUTE_PRICE 150
#define MECHANIC_RELOAD_TIME 61
#define WT_RANGE 2000

#define REDTEXT 	"{D42020}"
#define GREENTEXT 	"{26BF2B}"
#define BLUETEXT 	"{3A82B5}"

main()
{
}

#define VEHICLE_DEFAULT_RESPAWN 	600

#define MAX_TEST_CHECKPOINTS 51
new Float:EditDrivingTest[MAX_PLAYERS][MAX_TEST_CHECKPOINTS][3];
new Float:EditTruckingTest[MAX_PLAYERS][MAX_TEST_CHECKPOINTS][3];

#define MAX_RECENT_ADS 5
new RecentAds[MAX_RECENT_ADS][255], RecentAdTime[MAX_RECENT_ADS];

//Event Defines / Variables
new Text:EventTextDraw, Float:EventPos2[3];
new EventHP, EventArmour, Float: EventX, Float: EventY, Float: EventZ, EventInt, EventWorld, EventSkin, EventSkin2, CurrentEvent;
new EventWeapon1, EventWeapon2, EventWeapon3, EventWeapon4, EventWeapon5, EventVip, EventRand, MostKills, eventType, maxPlayers, Timer:UpdateEventTimer;
new TeamKills[2], AutoPickWinner, KillsToWin, maxDeaths, Iterator:EventPlayers<MAX_PLAYERS>;

#define MAX_DERBY_VEHICLES 40

new DerbyStatus, DerbyVehicle, DerbyVip, DerbyNos;

new RallyInProgress, RallyVehicle, RallyCourse, RallyVip, RallyNos, RallyPosition[MAX_RALLY_VEHICLES];
new RallyFirstCP, RallyFirstID = INVALID_PLAYER_ID, RallySecondCP, RallySecondID = INVALID_PLAYER_ID, RallyThirdCP, RallyThirdID = INVALID_PLAYER_ID;

new Iterator:EventVehicles<MAX_VEHICLES>;

enum RallySettings
{
	Vehicle,
	Course,
	Vip,
	Nos,
}
new EditRally[MAX_PLAYERS][RallySettings];

enum rally_Data
{
	Float:xPos[MAX_RALLY_CHECKPOINTS],
	Float:yPos[MAX_RALLY_CHECKPOINTS],
	Float:zPos[MAX_RALLY_CHECKPOINTS],
	StartPos,
}
new EditRallyCourse[MAX_PLAYERS][rally_Data];

enum EventProperties
{
	EventType,
	EventHp,
	EventArm,
	Skin,
	Skin2,
	Vip,
	Weapon1,
	Weapon2,
	Weapon3,
	Weapon4,
	Weapon5,
	derbyVehicle,
	derbyVip,
	derbyNos,
	MaxPlayers,
	AutoPick,
	ScoreLimit,
	NoLagShoot,
	MaxDeaths,
}
new EditEvent[MAX_PLAYERS][EventProperties];

//End of Event Defines / Variables

//Stashes related
#define MAX_STASH 20
#define STASH_MONEY 	1
#define STASH_MATSLOW	2
#define STASH_MATSMID 	3
#define STASH_MATSHIGH 	4
#define STASH_WEAPON	5
#define STASH_POT		6
#define STASH_COCAINE 	7
#define STASH_SPEED 	8
#define STASH_PHONE     9
#define STASH_ARMOUR_POOR 10
#define STASH_ARMOUR_STANDARD 11
#define STASH_ARMOUR_MILITARY 12
#define STASH_BOMB 13
enum StashData
{
	Object,
	Timer,
	StoredItem, // 0 - money, 1 - weapon, 2 - materials, 3 - pot, 4 - cocaine, 5 - phone
	ItemAmount, // amount of money/mats/pot/cocaine, phone number or the weaponid.
	Code,
	PlacedBy[25],
	Float:StashX,
	Float:StashY,
	Float:StashZ,
};
new GlobalStash[MAX_STASH][StashData];

#define MAX_LOAN 20000

//Accent related
#define MAX_ACCENT 40
new
accents[MAX_ACCENT][] =
{
	"American", "Canadian", "Irish", "Australian", "English", "Scottish", "French",
	"Russian", "Spanish", "Italian", "Gangsta", "Portuguese", "Southern", "Liberty City",
	"African", "Jamaican", "Punjabi", "Arabic", "Asian", "Korean", "Welsh", "Vice City",
	"Chinese", "Japanese", "Swedish", "Dutch", "German", "Danish", "New Zealand", "Romanian",
	"Polish", "South African", "Middle Eastern", "Norwegian", "Finnish", "Eastern European",
	"Israeli", "Turkish", "Hispanic", "Albanian"};

const Float:INF_FLOAT=Float:0x7F800000;

new bool:BlockedPM[MAX_PLAYERS][MAX_PLAYERS];

new Float: SpawnX, Float: SpawnY, SpawnedJobs, GlobalWeather, Float: SpawnZ, SpawnInt, SpawnWorld, NoobCash = 10000, AdCanBePlaced, AdVizPrice, MobilePrice, BillboardPrice, BillboardsDays, TotalMobileMoney;
new UnconfirmedSave[MAX_PLAYERS], NPCs;
new Anticheat, DiveEvent, Float: OwnedCarSpawnX, Float: OwnedCarSpawnY, Float: OwnedCarSpawnZ, Float: OwnedBoatSpawnX, Float: OwnedBoatSpawnY, Float: OwnedBoatSpawnZ;
new SpawnedHouses, SpawnedBusinesses, SpawnedGroups, Float: HospitalSpawnX, Float: HospitalSpawnY, Float: HospitalSpawnZ, HospitalInt;
new Float: ArrestPosX, Float: ArrestPosY, Float: ArrestPosZ;
new CurGMX, Float: Prison1X, Float: Prison1Y, Float: Prison1Z, Float: Prison2X, Float: Prison2Y, Float: Prison2Z;
new Prison1Int, /*Prison1World,*/ Prison2Int, Prison2World;
//new /*PrisonGate,*/
new SWATEnabled, undercoverSkinsEnabled, Float: LockerPosX, Float: LockerPosY, Float: LockerPosZ, LockerPosInt;
new Text: CellPhoneTextDrawInVehicle, Float: LockerPos2X, Float: LockerPos2Y, Float: LockerPos2Z, LockerPos2Int, Float:LockerPos3X, Float:LockerPos3Y, Float:LockerPos3Z, LockerPos3Int;
new /*[MAX_VEHICLES], PrisonGateOpen, SpawnedVehicles, */ArrestPosPickup, /*oocenabled,*/ Spotlight = -1;
new QuizQuestion[128], QuizAnswer[128], ActiveQuiz;
new Float: DropCarX, Float: DropCarY, Float: DropCarZ, NewbieEnabled = 1, VIPEnabled = 1;
//new Float: BankIntX, Float: BankIntY, Float: BankIntZ, Float: BankExtX, Float: BankExtY, Float: BankExtZ, BankIntID, BankIntVW = 1;
new /*Float:PlayerPos[MAX_PLAYERS][6]*/ PlayersOn, Tax, TotalConnections, MaxLoggedIn, MaxRegistered, MaxVisitors;
new /*CityHall,*/ ReportStatus = 0;
new /*ImpoundOpen, ImpoundGate,*/ Text: SprunkTextDraw, PlayerText: ExitTextdraw[MAX_PLAYERS];//, Text:Textdraw1;
new Text:CellPhoneTextDraw, Float: Harvest5X, Float: Harvest5Y, Float: Harvest5Z;
new Float: Harvest1X, Float: Harvest1Y, Float: Harvest1Z, Float: Harvest2X, Float: Harvest2Y, Float: Harvest2Z, Float: Harvest3X, Float: Harvest3Y, Float: Harvest3Z, Float: Harvest4X, Float: Harvest4Y, Float: Harvest4Z;
new MayorTransfer, TaxrateTimer, Candidate1[255], Candidate1Votes, Candidate2[255], Candidate2Votes, Candidate3[255], Candidate3Votes, VotingOpen;
new Float: AgencyDoorPosX, Float: AgencyDoorPosY, Float: AgencyDoorPosZ, AgencyDoorPosInt, Float:AgencyGarageEntranceX, Float:AgencyGarageEntranceY, Float:AgencyGarageEntranceZ;
new Float: AgencyIntPosX, Float: AgencyIntPosY, Float: AgencyIntPosZ, AgencyIntPosInt, Float:AgencyGarageExitX, Float:AgencyGarageExitY, Float:AgencyGarageExitZ;
new Float: AgencyHQGarageEntranceX, Float: AgencyHQGarageEntranceY, Float: AgencyHQGarageEntranceZ, AgencyHQGarageEntranceInt;
new Float: AgencyHQGarageExitX, Float: AgencyHQGarageExitY, Float: AgencyHQGarageExitZ;
new Float: MaterialDropX[5], Float: MaterialDropY[5], Float: MaterialDropZ[5], Float: OwnedCarSpawn2X, Float: OwnedCarSpawn2Y, Float: OwnedCarSpawn2Z;
new ImpoundPos, Float: UnimpoundPos[4], LoadedRadios, Float:FishDeadZone[4];
new Float:TicketPos[3], TicketPosInt, TicketPosVW, VipExtPickup, VipLockerPickup, LastServerSave[128];
new LastRestartTime[128], LastLogRotation[128], Text:RallyLB, SlotSpinner[MAX_PLAYERS][4], Text:SlotsLeave, Text:SlotsPlay, PlayerText:SlotsTD[MAX_PLAYERS], bool:SpinnerMoved, Float:zOff = 0.0005, SymbolL, SymbolM, SymbolR, PreSpinTimer[MAX_PLAYERS];
new Float:Rotations[18] = {0.0, 20.0, 40.0, 60.0, 80.0, 100.0, 120.0, 140.0, 160.0, 180.0, 200.0, 220.0, 240.0, 260.0, 280.0, 300.0, 320.0, 340.0};
new LeftSpinnerResults[18] = {2, 3, 1, 4, 6, 5, 6, 5, 4, 3, 4, 1, 6, 5, 3, 5, 4, 6};
new MiddleSpinnerResults[18] = {3, 4, 6, 5, 2, 4, 5, 6, 4, 1, 5, 3, 6, 1, 6, 3, 4, 5};
new RightSpinnerResults[18] = {5, 6, 3, 4, 5, 4, 3, 5, 6, 1, 2, 6, 4, 3, 5, 1, 4, 6};
new Float:DrivingTest[MAX_TEST_CHECKPOINTS][3], DrivingTestTime, DrivingTestCost, RegistrationCost, TotalRallyCheckpoints = -1, RallyStartPos;
new Float:TruckingTest[MAX_TEST_CHECKPOINTS][3], TruckerTestTime, TruckerTestCost;
new LSPDBonus[10], LSMDBonus[10], CouncilBonus[10], MediaBonus[10];
new /*LowerDealerCars, UpperDealerCars,*/ Float:BikeSpawn[3], Text:CarPreview[4], PlayerText:CarPreviewText[MAX_PLAYERS], ToggledAdvertisments;
new PizzaOrderTaken[MAX_HOUSES], PizzaOrder[MAX_HOUSES], ModDutyWarning, /*SpawnedVehicleCheck, AdminDutyWarning,*/ PlayerCreationDisabled, PCDWarning, Float:VanSpawn[3], /*PlayerCreationStatus,*/ LSMDDoorLock;
new HotelCheck, PNS_InUse[11], DrawTitle[64], DrawUnix, DrawVipOnly;
new Float:RallyCheckpoints[MAX_RALLY_CHECKPOINTS][3];
new FriendReferals, SAMPForumReferals, YoutubeReferals, GoogleReferals, OtherReferals, PaycheckBonus, PaycheckHours, PaycheckBonusTimeleft, Float:ModShopPos[3], ModShop_Locked, Text3D:ModShop_Label,  Float: ModShopExitPos[4];
new AnnounceExist, LastAnnounceMinute, LastAnnounceHour, LastAnnounceDay, LastAnnounceMonth, LastAnnounceYear, announcesummary[128], announcelink[128], announcemsg[256];
new bugnumber, CurrentLoyaltyDay, MaxPlayersThisHour, Text:LoadingTextdraw[2];
#if defined MTG_FAIR
new DJ_Radius, DJ_RadioStation;
#endif



#define MAX_SKIN_LISTS 8
#define SKIN_LIST_MALE_WHITE	0
#define SKIN_LIST_MALE_BLACK	1
#define SKIN_LIST_MALE_ASIAN	2
#define SKIN_LIST_MALE_HISP		3
#define SKIN_LIST_FEMALE_WHITE	4
#define SKIN_LIST_FEMALE_BLACK	5
#define SKIN_LIST_FEMALE_ASIAN	6
#define SKIN_LIST_FEMALE_HISP	7
new SkinLists[MAX_SKIN_LISTS];

// new VipVehicleGroup, VipVehicleGroup2;
new Float:VipCarSpawn[3];
/*
new VipVehicles[6][6] =
{
    {533, 506, 522, 580, 478, 469}, // 1
	{565, 415, 462, 474, 467, 487}, // 2
	{559, 451, 471, 562, 466, 469}, // 3
	{561, 411, 477, 551, 589, 469}, // 4
	{558, 587, 581, 445, 575, 469}, // 5
	{412, 541, 468, 555, 566, 487} 	// 6
};
new VipVehiclesPrice[6][6] =
{
    {40000, 175000, 100000, 80000, 12500, 115000}, 	// 1
	{70000, 200000, 5500, 25000, 40000, 350000},	// 2
	{85000, 250000, 10000, 85000, 20000, 115000}, 	// 3
	{70000, 400000, 100000, 25500, 25000, 115000}, 	// 4
	{70000, 50000, 8000, 25000, 25000, 115000}, // 5
	{22500, 400000, 12500, 100000, 25000, 350000} 	// 6
};
*/
#define GO_MENU 8290
#define GOMENU_FILE "GoMenu.cfg"
#define MAX_LOCATIONS 100
enum GoMenuData
{
	Category[64],
	Type[64],
	goName[64],
	Float:goX,
	Float:goY,
	Float:goZ,
	goInt,
};

new GoMenu[MAX_LOCATIONS][GoMenuData];

//Raffle stuff
new toggedRaffle, rafflePrice, rafflePot, raffleCD, raffleBonus;
#define DB_RAFFLE "raffle.db"
#define DEFAULT_RAFFLE_START 20000

iswheelmodel(modelid) {

    new wheelmodels[17] = {1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1096,1097,1098};

    for(new i; i < sizeof(wheelmodels); i++)
	{
        if(modelid == wheelmodels[i])
            return true;
    }

    return false;
}

illegalNitrous(vehmodel)
{
    new illegalvehs[29] =
	{
		581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472,
		473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449
	};

    for(new i; i < sizeof(illegalvehs); i++)
	{
        if(vehmodel == illegalvehs[i])
            return true;
    }
    return false;
}

stock IsLegalMod(vehicleid, componentid)
{
    new good = false;

    if ((iswheelmodel(componentid)) || (componentid == 1086) || (componentid == 1087) || ((componentid >= 1008) && (componentid <= 1010)))
	{
        new nosblocker = illegalNitrous(GetVehicleModel(vehicleid));
        if (!nosblocker)
            good = true;
        //printf("wheel mod + other:/tnosblocker = %d :: good = %d", nosblocker, good);
    }
	else
	{
		for(new i; i < sizeof(legalmods); i++) // check if the specified model CAN use this particular mod.
		{
            if(legalmods[i][0] == vehicleid)
			{
                for(new j = 1; j < 22; j++)
				{
                    if (legalmods[i][j] == componentid)
                        good = true;
					//printf("legalmod [%d]:/t%d - good = %d", i, j, good);
                }
            }
        }
    }
    return good;
}

//Prison questions
new AfkQuestions[][][128] =
{
	{"What is it called when a player RP's something impossible, or forces you to do something?", "Powergaming"},
	{"What is it called when a player uses out-of-character info in-character?", "Metagaming"},
	{"What is it called when a player kills another player with no reason?", "Deathmatching"},
	{"After you die, how many minutes of your memory do you lose?", "30"},
	{"What is 7 plus 10?", "17"},
	{"Where is the Empire State Building located?", "New York"},
	{"What year is it?", "2016"},
	{"If Tommy has 5 burgers and eats 1, how many burgers does he have left?", "4"},
	{"What is 12 times 10?", "120"},
	{"What color is the sky?", "Blue"},
	{"What is 10 minus 9?", "1"},
	{"What gun can you recieve at level one arms dealer?", "Colt"},
	{"What does IC stand for?", "In character"},
	{"What does OOC stand for?", "Out of character"},
	{"What time is noon?", "12"},
	{"What is the first letter of the alphabet?", "A"},
	{"What is the last letter of the alphabet?", "Z"},
	{"What number comes after one?", "2"},
	{"What is 5 times 2?", "10"}
};

//EVENT VARIABLES
new VipHnS;
new Float:VipHnSX;
new Float:VipHnSY;
new Float:VipHnSZ;
new VipHnSWorld;
new VipHnSInterior;
new VipLevel;

//Arrest point
//new DetainGate1, DetainGate2, DetainGateOpen;

new LastFarm = -10;
//new stock AFKTimer, WeatherTimer, OneMinuteTimer, AntiCheatTimer, GeneralDataTimer, PickupsTimer, OneSecondTimer, OneHourTimer;

// ATM Related
#define ATM_MODEL 2618
/*new Float:ATMCords[1][4] =
{
	{-2239.0403, 2356.3027, 3.9953, 313.0}
};*/


//Helper
new mRequestCount;
#define MAX_REQUESTS 30

enum ModRequests
{
	RequestID, // The ID of the request
	Requester, // Player id of the person requesting help
	RequestQuestion[128], // The question thats been asked
}
new mRequest[MAX_REQUESTS][ModRequests];

//Road block
new pdObjects[30];
new activePDObjects;

//Payphones
#define MAX_PAYPHONES	21
new Float:Payphones[MAX_PAYPHONES][4] =
{
	{1180.91565, -1332.04065, 13.22940, 90.00000},
	{2018.21533, -1408.34290, 16.64320, 0.00000},
	{1493.45667, -1022.07910, 23.51160, 0.00000},
	{604.36700, -1243.08154, 18.03870, 202.00000},
	{394.18979, -2052.87207, 7.51780, 270.00000},
	{791.76929, -1613.96106, 13.07890, 272.00000},
	{332.02390, -1531.86646, 32.89090, 50.00000},
	{939.84723, -1418.19824, 13.20380, 180.00000},
	{1539.34998, -1659.76733, 13.24250, 270.00000},
	{1928.51221, -1780.48535, 13.25150, 90.00000},
	{1672.83191, -2325.85059, 13.20520, 180.00000},
	{2331.94336, -1646.94287, 13.38900, 90.00000},
	{2713.03467, -1125.43091, 69.27810, 90.00000},
	{665.80420, -577.95471, 15.99000, 0.00000},
	{142.59250, -113.37860, 1.27840, 270.00000},
	{1310.57825, 272.87769, 19.17370, -114.00000},
	{2303.62134, 2.73220, 26.15870, -90.00000},
	{28.22310, -2643.23169, 40.11420, 184.00000},
	{-2172.18164, -2379.29834, 30.30030, -40.00000},
	{1128.0052 ,-1461.8417, 14.7969, 0.00},
	{1129.9707, -1461.8400, 14.7969, 0.00}
};

new PayphoneNumbers[MAX_PAYPHONES] =
{
	1000,
	1001,
	1002,
	1003,
	1004,
	1005,
	1006,
	1007,
	1008,
	1009,
	1010,
	1011,
	1012,
	1013,
	1014,
	1015,
	1016,
	1017,
	1018,
	1019,
	1020
	//1021,
	//1022,
};

//#define MAX_SLOT_MACHINES 1
//new LeftSpinner[MAX_SLOT_MACHINES], MiddleSpinner[MAX_SLOT_MACHINES], RightSpinner[MAX_SLOT_MACHINES], Float:ZOff = 0.0005;

// VIP RAFFLE///////////
#define MAX_VIP_RAFFLES 1 // Maybe multiple at once in the future..
enum _VipRaffleInfo
{
	rActive,
	rEntryFee,
	rMoney,
	rMaterials1,
	rMaterials2,
	rMaterials3,
	rCocaine,
	rPot,
	rSpeed,
	rTokens,
	rDrawDate
	 // Vehicles can be added later
};
new VipRaffleInfo[MAX_VIP_RAFFLES][_VipRaffleInfo];
///////////////////////

enum Spikes
{
	Float:sX,
	Float:sY,
	Float:sZ,
	Float:sXRot,
	Float:sYRot,
	Float:sZRot,
	sObjectID
};

//Random Global var
new LSPD_LastBackup;

#define MAX_BUGS 5
enum BugData
{
	Float:bx,
	Float:by,
	Float:bz,
	Active,
	BugVW,
	PlacedBy[MAX_PLAYER_NAME],
	BugObject,
}
new Bugs[MAX_BUGS][BugData];
new UnmodifiableVehicles[29] =
{
	581,523,462,521,463,522,461,448,468,586,
	509,481,510,472,473,493,595,484,430,453,
	452,446,454,590,569,537,538,570,449
};

#define MAX_GROUP_VEHICLES 40
new tGroupVID[MAX_PLAYERS][MAX_GROUP_VEHICLES];
new tGangVID[MAX_PLAYERS][MAX_GROUP_VEHICLES];

new CarRams[MAX_PLAYERS][MAX_PLAYERS];
new CarRamsTimer[MAX_PLAYERS][MAX_PLAYERS];

enum Ranks
{
	Rank1[255],
	Rank2[255],
	Rank3[255],
	Rank4[255],
	Rank5[255],
	Rank6[255],
	Rank7[255],
};

new OOCRanks[Ranks];
new SpikeStrips[MAX_SPIKES][Spikes];
//new SafeUsers[MAX_PLAYERS] = 1;
//new SafeStatus = 0;
new SavingStatus, SavingTime;

new Float:paynsprays[11][11] =
{ //EntranceX, EntranceY, EntranceZ, InsideX, InsideY, InsideZ, InsideR, ExitX, ExitY, ExitZ, ExitR
	{1960.72, 2162.37, 10.82, 1976.0, 2162.5, 11.1, 270.0, 0.00, 0.00, 0.00, 0.00}, //Las Venturas, Redsands East Pay n Spray
	{2076.65, -1831.42, 13.55, 2064.7, -1831.4, 13.5, 90.0, 0.00, 0.00, 0.00, 0.00}, //Los Santos, Idlewood Pay n Spray
	{1025.10, -1033.45, 31.80, 1025.0, -1024.2, 32.1, 0.0, 0.00, 0.00, 0.00, 0.00}, //Los Santos, Temple Pay n Spray
	{489.02, -1730.83, 11.28, 487.6, -1740.3, 11.1, 172.0, 0.00, 0.00, 0.00, 0.00}, //Los Santos, Santa Maria Beach Pay n Spray
	{-1904.20, 272.16, 41.05, -1904.5, 284.7, 41.0, 0.0, 0.00, 0.00, 0.00, 0.00}, //San Fierro, Downtown Pay n Spray
	{-2425.73, 1033.43, 50.39, -2425.6, 1021.4, 50.4, 180.0, 0.00, 0.00, 0.00, 0.00}, //San Fierro, Juniper Hollow Pay n Spray
	{-1420.82, 2596.79, 55.69, -1420.6, 2583.5, 55.8, 180.0, 0.00, 0.00, 0.00, 0.00}, //Las Venturas, El Quebrados Pay n Spray
	{-100.02, 1106.65, 19.74, -99.9, 1118.4, 19.7, 0.0, 0.00, 0.00, 0.00, 0.00}, //Las Venturas, Fort Carson Pay n Spray
	{1960.72, 2162.37, 10.82, 1976.0, 2162.5, 11.1, 270.0, 0.00, 0.00, 0.00, 0.00}, //Las Venturas, Redsands East Pay n Spray
	{2393.72, 1479.47, 10.47, 2393.63, 1491.48, 10.54, 360.0, 0.00, 0.00, 0.00, 0.00}, //Las Venturas, Pyramid Pay n Spray
	{719.84, -470.47, 16.07, 719.95, -452.67, 16.06, 0.0, 0.00, 0.00, 0.00, 0.00} //Los Santos, Dillimore
};
new Text3D:PayNSprayLabels[sizeof(paynsprays)];
new pns_loc[11][128] =
{
	"Las Venturas, Redsands East",
	"Los Santos, Idlewood",
	"Los Santos, Temple",
	"Los Santos, Santa Maria",
	"San Fierro, Downtown",
	"San Fierro, Juniper Hollow",
	"Las Venturas, El Quebrados",
	"Las Venturas, Fort Carson",
	"Las Venturas, Redsands East",
	"Las Venturas, Pyramid",
	"Los Santos, Dillimore"};

stock Float:pizzaDeliveries[MAX_PIZZA_POINTS][3];

AntiDeAMX()
{
	new a[][] =
	{
		"Unarmed (Fist)",
		"Brass K"};
	#pragma unused a
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	new good = IsLegalMod(GetVehicleModel(vehicleid), componentid);

	// printf("%s added componentid %d to vehicle model %d (%s). good = %d / %s", GetName(playerid), componentid, GetVehicleModel(vehicleid), vNames[GetVehicleModel(vehicleid)], good, good);

	if(!good) // Assuming this gets called, the return 0 will stop the crashing at least.
	{
		new warning[128], sql = GetVSQLID(vehicleid);
		format(warning, sizeof(warning), "WARNING: %s (%d) may be hacking - they have installed an illegal mod on a vehicle! (SQLID: %d)", GetName(playerid), playerid, sql);
		SendToAdmins(ADMINORANGE, warning, 0);
		WarningLog(warning);
		return 0;
	}

	if(Player[playerid][ModShop] == 1)
	{
		new sql = GetVSQLID(vehicleid), slot = GetVehicleComponentType(componentid), idx = GetVIndex(sql);

		if(componentid >= 1008 && componentid <= 1010 || componentid == 1087)
		{
			SendClientMessage(playerid, WHITE, "Hey man we can't add this here. Try finding another mechanic.");
			SetPVarInt(playerid, "REMOVE_CAR_MODS", 1);
			return 1;
		}

		switch(slot)
		{
			case 0:
			{
				Veh[idx][Mod0] = componentid;
			}
			case 1:
			{
				Veh[idx][Mod1] = componentid;
			}
			case 2:
			{
				Veh[idx][Mod2] = componentid;
			}
			case 3:
			{
				Veh[idx][Mod3] = componentid;
			}
			case 4:
			{
				Veh[idx][Mod4] = componentid;
			}
			case 5:
			{
				Veh[idx][Mod5] = componentid;
			}
			case 6:
			{
				Veh[idx][Mod6] = componentid;
			}
			case 7:
			{
				Veh[idx][Mod7] = componentid;
			}
			case 8:
			{
				Veh[idx][Mod8] = componentid;
			}
			case 9:
			{
				Veh[idx][Mod9] = componentid;
			}
			case 10:
			{
				Veh[idx][Mod10] = componentid;
			}
			case 11:
			{
				Veh[idx][Mod11] = componentid;
			}
			case 12:
			{
				Veh[idx][Mod12] = componentid;
			}
			case 13:
			{
				Veh[idx][Mod13] = componentid;
			}
		}
		SaveVMods(sql);
	}

	if(GetPlayerInterior(playerid) < 1 && GetPlayerInterior(playerid) > 3) {
		new string[128];

		format(string, sizeof(string), "WARNING: %s may possibly be hacking vehicle mods (added component %d to their car).", GetName(playerid), componentid);
		SendToAdmins(ADMINORANGE, string, 0);
		WarningLog(string);
		return 0;
	}

	else if(GetPlayerInterior(playerid) >= 1 && GetPlayerInterior(playerid) <= 3) {

		switch(componentid) { // Get the price for the vehicle component, only if they're in a mod garage.

			case 1024:												Player[playerid][Money] -= 50;
			case 1006:  											Player[playerid][Money] -= 80;
			case 1004, 1145, 1013, 1091, 1086:						Player[playerid][Money] -= 100;
			case 1005, 1143, 1022, 1035, 1088:						Player[playerid][Money] -= 150;
			case 1021, 1002, 1016, 1068, 1153:				Player[playerid][Money] -= 200;
			case 1011:												Player[playerid][Money] -= 220;
			case 1012, 1020, 1003, 1067:							Player[playerid][Money] -= 250;
			case 1019:												Player[playerid][Money] -= 300;
			case 1018, 1023, 1093:									Player[playerid][Money] -= 350;
			case 1014, 1000:										Player[playerid][Money] -= 400;
			case 1163, 1090, 1070:									Player[playerid][Money] -= 450;
			case 1007, 1017, 1015, 1044, 1043, 1036:		   	Player[playerid][Money] -= 500;
			case 1045:												Player[playerid][Money] -= 510;
			case 1001, 1158, 1069, 1164:							Player[playerid][Money] -= 550;
			case 1050, 1058, 1097:									Player[playerid][Money] -= 620;
			case 1162, 1089:										Player[playerid][Money] -= 650;
			case 1028, 1085:										Player[playerid][Money] -= 770;
			case 1122, 1106, 1108, 1118:							Player[playerid][Money] -= 780;
			case 1134:												Player[playerid][Money] -= 800;
			case 1082:												Player[playerid][Money] -= 820;
			case 1064, 1133:										Player[playerid][Money] -= 830;
			case 1165, 1167, 1065:									Player[playerid][Money] -= 850;
			case 1175, 1177, 1172, 1080:							Player[playerid][Money] -= 900;
			case 1100, 1119, 1192:									Player[playerid][Money] -= 940;
			case 1173, 1161, 1166, 1168:							Player[playerid][Money] -= 950;
			case 1149, 1176, 1042, 1136, 1025, 1096, 1174:   	Player[playerid][Money] -= 1000;
			case 1155, 1154:										Player[playerid][Money] -= 1030;
			case 1160, 1159:										Player[playerid][Money] -= 1050;
			case 1150:												Player[playerid][Money] -= 1090;
			case 1193, 1073:										Player[playerid][Money] -= 1100;
			case 1190, 1078:										Player[playerid][Money] -= 1200;
			case 1135:									Player[playerid][Money] -= 1500;
			case 1083, 1076:										Player[playerid][Money] -= 1560;
			case 1179, 1184:										Player[playerid][Money] -= 2150;
			case 1046:												Player[playerid][Money] -= 710;
			case 1152:												Player[playerid][Money] -= 910;
			case 1151:												Player[playerid][Money] -= 840;
			case 1054:												Player[playerid][Money] -= 210;
			case 1053:												Player[playerid][Money] -= 130;
			case 1049:												Player[playerid][Money] -= 810;
			case 1047:												Player[playerid][Money] -= 670;
			case 1048:												Player[playerid][Money] -= 530;
			case 1066:												Player[playerid][Money] -= 750;
			case 1034:												Player[playerid][Money] -= 790;
			case 1037:												Player[playerid][Money] -= 690;
			case 1171:												Player[playerid][Money] -= 990;
			case 1148:												Player[playerid][Money] -= 890;
			case 1038:												Player[playerid][Money] -= 190;
			case 1146:												Player[playerid][Money] -= 490;
			case 1039:												Player[playerid][Money] -= 390;
			case 1059:												Player[playerid][Money] -= 720;
			case 1157:												Player[playerid][Money] -= 930;
			case 1156:												Player[playerid][Money] -= 920;
			case 1055:												Player[playerid][Money] -= 230;
			case 1061:												Player[playerid][Money] -= 180;
			case 1060:												Player[playerid][Money] -= 530;
			case 1056:												Player[playerid][Money] -= 520;
			case 1057:												Player[playerid][Money] -= 430;
			case 1029:												Player[playerid][Money] -= 680;
			case 1169:												Player[playerid][Money] -= 970;
			case 1170:												Player[playerid][Money] -= 880;
			case 1141:												Player[playerid][Money] -= 980;
			case 1140:												Player[playerid][Money] -= 870;
			case 1032:												Player[playerid][Money] -= 170;
			case 1033:												Player[playerid][Money] -= 120;
			case 1138:												Player[playerid][Money] -= 580;
			case 1139:												Player[playerid][Money] -= 470;
			case 1026:												Player[playerid][Money] -= 480;
			case 1031:												Player[playerid][Money] -= 370;
			case 1092:												Player[playerid][Money] -= 750;
			case 1128:												Player[playerid][Money] -= 3340;
			case 1103:												Player[playerid][Money] -= 3250;
			case 1183:												Player[playerid][Money] -= 2040;
			case 1182:												Player[playerid][Money] -= 2130;
			case 1181:												Player[playerid][Money] -= 2050;
			case 1104:												Player[playerid][Money] -= 1610;
			case 1105:												Player[playerid][Money] -= 1540;
			case 1126:												Player[playerid][Money] -= 3340;
			case 1127:												Player[playerid][Money] -= 3250;
			case 1185:												Player[playerid][Money] -= 2040;
			case 1180:												Player[playerid][Money] -= 2130;
			case 1178:												Player[playerid][Money] -= 2050;
			case 1123:												Player[playerid][Money] -= 860;
			case 1125:												Player[playerid][Money] -= 1120;
			case 1130:												Player[playerid][Money] -= 3380;
			case 1131:												Player[playerid][Money] -= 3290;
			case 1189:												Player[playerid][Money] -= 2200;
			case 1188:												Player[playerid][Money] -= 2080;
			case 1187:												Player[playerid][Money] -= 2175;
			case 1186:												Player[playerid][Money] -= 2095;
			case 1129:												Player[playerid][Money] -= 1650;
			case 1132:												Player[playerid][Money] -= 1590;
			case 1113:												Player[playerid][Money] -= 3340;
			case 1114:												Player[playerid][Money] -= 3250;
			case 1117:												Player[playerid][Money] -= 2040;
			case 1115:												Player[playerid][Money] -= 2130;
			case 1116:												Player[playerid][Money] -= 2050;
			case 1109:												Player[playerid][Money] -= 1610;
			case 1110:												Player[playerid][Money] -= 1540;
			case 1191:												Player[playerid][Money] -= 1040;
			case 1079:												Player[playerid][Money] -= 1030;
			case 1075:												Player[playerid][Money] -= 980;
			case 1077:												Player[playerid][Money] -= 1620;
			case 1074:												Player[playerid][Money] -= 1030;
			case 1081:												Player[playerid][Money] -= 1230;
			case 1084:												Player[playerid][Money] -= 1350;
			case 1098:												Player[playerid][Money] -= 1140;
		}
	}
	return 1;
}

public OnGameModeInit()
{
	IsServerStartingUp = true;
	
	//mysql_log(LOG_ERROR | LOG_WARNING | LOG_DEBUG, LOG_TYPE_HTML);
	mysql_log(LOG_ERROR | LOG_WARNING, LOG_TYPE_HTML);
	mysql_option(LOG_TRUNCATE_DATA, false);

	InitMySQL();

	if(EmergencyShutdown == 1)
		return 1;

	AntiDeAMX();

	//Weapon Config Settings
	SetDamageFeed(false);
	//SetCbugAllowed(false);
	SetDamageSounds(0, 0);
	SetWeaponDamage(WEAPON_MINIGUN, DAMAGE_TYPE_STATIC, 0);
	
	//samp.ban to MYSQL
	/*new File:sampban = f_open("./samp.ban", "r"), line[128], query[255], ip[32], timestamp[22];
	while(f_read(sampban, line, sizeof(line)))
	{
		sscanf(line, "s[32]s[21]", ip, timestamp);
		mysql_format(MYSQL_MAIN, query, sizeof(query), "INSERT INTO ipbans (IP, Timestamp, Reason) VALUES ('%e', '%e', 'Initial Transfer')", ip, timestamp);
		mysql_query(MYSQL_MAIN, query, false);
	}
	f_close(sampban);*/

	//ShowNameTags(0);

	ManualVehicleEngineAndLights();

	print("[system] Please wait whilst the script initiates...");

	if(!fexist("Logs/AdminActions.log"))
		dini_Create("Logs/AdminActions.log");

	if(!fexist("Logs/PMchat.log"))
		dini_Create("Logs/PMchat.log");

	if(!fexist("Logs/OOCChat.log"))
		dini_Create("Logs/OOCChat.log");

	if(!fexist("Logs/ICChat.log"))
		dini_Create("Logs/ICChat.log");

	if(!fexist("Logs/GroupChat.log"))
		dini_Create("Logs/GroupChat.log");

	if(!fexist("Logs/Namechanges.log"))
		dini_Create("Logs/Namechanges.log");

	if(!fexist("Logs/Bans.log"))
		dini_Create("Logs/Bans.log");

	if(!fexist("Logs/Unbans.log"))
		dini_Create("Logs/Unbans.log");

	if(!fexist("Logs/Stat.log"))
		dini_Create("Logs/Stat.log");

	if(!fexist("Logs/Money.log"))
		dini_Create("Logs/Money.log");

	/*if(!fexist("Logs/GroupInvites.log"))
		dini_Create("Logs/GroupInvites.log");*/

	if(!fexist("Logs/Commands.log"))
		dini_Create("Logs/Commands.log");

	if(!fexist("Logs/Connection.log"))
		dini_Create("Logs/Connection.log");

	if(!fexist("Logs/Warnings.log"))
		dini_Create("Logs/Warnings.log");

	if(!fexist("Logs/Storage.log"))
		dini_Create("Logs/Storage.log");
	
	if(!fexist("Logs/Death.log"))
		dini_Create("Logs/Death.log");
	
	if(!fexist("Logs/Loyalty.log"))
		dini_Create("Logs/Loyalty.log");
	
	if(!dir_exists("scriptfiles/bugreports"))
		dir_create("scriptfiles/bugreports");
		
	if(!fexist("bugreports/BugReportNumber.ini"))
	{
		dini_Create("bugreports/BugReportNumber.ini");
		dini_IntSet("bugreports/BugReportNumber.ini", "bugnumber", 1);
	}
	bugnumber = dini_Int("bugreports/BugReportNumber.ini", "bugnumber");
	
	/*if(!fexist("errors.txt"))
		dini_Create("errors.txt");*/

	//file_log();

	new year, month, day, hour, minute, second, string[256];
	getdate(year, month, day);
	gettime(hour, minute, second);

//	UsePlayerPedAnims();
	EnableStuntBonusForAll(0);
	DisableInteriorEnterExits();
	LoadFilesIntoVars();

// 	SkateparkZone = CreateDynamicRectangle(1977.7115, -1451.1505, 1861.5254, -1350.6388);
	ModShop_Label = CreateDynamic3DTextLabel("Wheel Arch Angels\nUse /entermodshop to enter", GREEN, ModShopPos[0], ModShopPos[1], ModShopPos[2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);

	SkinLists[SKIN_LIST_MALE_WHITE] = LoadModelSelectionMenu("SkinList/MTG_WhiteMale.txt");
	SkinLists[SKIN_LIST_MALE_BLACK] = LoadModelSelectionMenu("SkinList/MTG_BlackMale.txt");
	SkinLists[SKIN_LIST_MALE_ASIAN] = LoadModelSelectionMenu("SkinList/MTG_AsianMale.txt");
	SkinLists[SKIN_LIST_MALE_HISP] = LoadModelSelectionMenu("SkinList/MTG_HispMale.txt");
	SkinLists[SKIN_LIST_FEMALE_WHITE] = LoadModelSelectionMenu("SkinList/MTG_WhiteFemale.txt");
	SkinLists[SKIN_LIST_FEMALE_BLACK] = LoadModelSelectionMenu("SkinList/MTG_BlackFemale.txt");
	SkinLists[SKIN_LIST_FEMALE_ASIAN] = LoadModelSelectionMenu("SkinList/MTG_AsianFemale.txt");
	SkinLists[SKIN_LIST_FEMALE_HISP] = LoadModelSelectionMenu("SkinList/MTG_HispFemale.txt");

	SetGameModeText(VERSION);

	SetWorldTime(hour + 4);

	// TRAIN
	//AddStaticVehicle(538, -1946.0692, 183.2777, 26.7534, 355.7218, 24, 77);

	// Removed, please feel free to re-add this whenever you have a web URL to set folks!
	/*Textdraw1 = TextDrawCreate(1.000000,433.000000,"www.mt-gaming.com");
	TextDrawAlignment(Textdraw1, 0);
	TextDrawBackgroundColor(Textdraw1, 0x000000ff);
	TextDrawFont(Textdraw1, 2);
	TextDrawLetterSize(Textdraw1, 0.499999,1.100000);
	TextDrawColor(Textdraw1, 0xffffffff);
	TextDrawSetOutline(Textdraw1, 1);
	TextDrawSetProportional(Textdraw1, 1);
	TextDrawSetShadow(Textdraw1, 1);*/

	// Phone Answer (inside vehicle)
	CellPhoneTextDrawInVehicle = TextDrawCreate(610.0, 400.0, "~r~ ~k~~VEHICLE_TURRETRIGHT~ ~w~to answer the call.");
	TextDrawUseBox(CellPhoneTextDrawInVehicle, 0);
	TextDrawFont(CellPhoneTextDrawInVehicle, 2);
	TextDrawSetShadow(CellPhoneTextDrawInVehicle, 0);
	TextDrawSetOutline(CellPhoneTextDrawInVehicle, 1);
	TextDrawBackgroundColor(CellPhoneTextDrawInVehicle, 0x000000FF);
	TextDrawColor(CellPhoneTextDrawInVehicle, 0xFFFFFFFF);
	TextDrawAlignment(CellPhoneTextDrawInVehicle, 3);

	// Phone Answer (out of vehicle)
	CellPhoneTextDraw = TextDrawCreate(610.0, 400.0, "~r~~k~~PED_DUCK~ ~w~to answer the call.");
	TextDrawUseBox(CellPhoneTextDraw, 0);
	TextDrawFont(CellPhoneTextDraw, 2);
	TextDrawSetShadow(CellPhoneTextDraw, 0);
	TextDrawSetOutline(CellPhoneTextDraw, 1);
	TextDrawBackgroundColor(CellPhoneTextDraw, 0x000000FF);
	TextDrawColor(CellPhoneTextDraw, 0xFFFFFFFF);
	TextDrawAlignment(CellPhoneTextDraw, 3);
	// Sprunk
	SprunkTextDraw = TextDrawCreate(610.0, 400.0, "~r~~k~~PED_FIREWEAPON~ ~w~ to drink the Sprunk ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~ to drop the Sprunk.");
	TextDrawUseBox(SprunkTextDraw, 0);
	TextDrawFont(SprunkTextDraw, 2);
	TextDrawSetShadow(SprunkTextDraw, 0);
	TextDrawSetOutline(SprunkTextDraw, 1);
	TextDrawBackgroundColor(SprunkTextDraw, 0x000000FF);
	TextDrawColor(SprunkTextDraw, 0xFFFFFFFF);
	TextDrawAlignment(SprunkTextDraw, 3);

	// Rally Leaderboard
	RallyLB = TextDrawCreate(550.0, 330.0, "~n~~r~- First -~n~~w~Nobody~n~~n~~r~- Second -~n~~w~Nobody~n~~n~~r~- Third -~n~~w~Nobody~n~");
	TextDrawAlignment(RallyLB, 2);
	TextDrawBackgroundColor(RallyLB, 255);
	TextDrawFont(RallyLB, 1);
	TextDrawLetterSize(RallyLB, 0.5, 1.0);
	TextDrawColor(RallyLB, -1);
	TextDrawSetOutline(RallyLB, 0);
	TextDrawSetProportional(RallyLB, 1);
	TextDrawSetShadow(RallyLB, 1);
	TextDrawUseBox(RallyLB, 0);
	TextDrawTextSize(RallyLB, 70.000000, 140.000000);

	//Slot machines
	SlotsPlay = TextDrawCreate(555.0, 280.0, "~w~~n~PLAY~n~");
	TextDrawAlignment(SlotsPlay, 2);
	TextDrawBackgroundColor(SlotsPlay, 255);
	TextDrawFont(SlotsPlay, 1);
	TextDrawLetterSize(SlotsPlay, 1.2, 2.4);
	TextDrawColor(SlotsPlay, -1);
	TextDrawBoxColor(SlotsPlay, 0xFFFFFF44);
	TextDrawSetOutline(SlotsPlay, 0);
	TextDrawSetProportional(SlotsPlay, 1);
	TextDrawSetShadow(SlotsPlay, 1);
	TextDrawUseBox(SlotsPlay, 1);
	TextDrawTextSize(SlotsPlay, 40.000000, 110.000000);
	TextDrawSetSelectable(SlotsPlay, 1);

	//Slot machines
	SlotsLeave = TextDrawCreate(555.0, 230.0, "~r~~n~LEAVE~n~");
	TextDrawAlignment(SlotsLeave, 2);
	TextDrawBackgroundColor(SlotsLeave, 255);
	TextDrawFont(SlotsLeave, 2);
	TextDrawLetterSize(SlotsLeave, 0.6, 1.2);
	TextDrawColor(SlotsLeave, -1);
	TextDrawBoxColor(SlotsLeave, 0xFFFFFF44);
	TextDrawSetOutline(SlotsLeave, 0);
	TextDrawSetProportional(SlotsLeave, 1);
	TextDrawSetShadow(SlotsLeave, 1);
	TextDrawUseBox(SlotsLeave, 1);
	TextDrawTextSize(SlotsLeave, 50.000000, 110.000000);
	TextDrawSetSelectable(SlotsLeave, 1);

	//Event Textdraw
	EventTextDraw = TextDrawCreate(550.0, 330.0, "~n~~r~Kills Leader: ~w~Nobody~n~~n~~r~Players Remaining: ~w~N/A~n~~n~");
	TextDrawAlignment(EventTextDraw, 2);
	TextDrawBackgroundColor(EventTextDraw, 255);
	TextDrawFont(EventTextDraw, 1);
	TextDrawLetterSize(EventTextDraw, 0.5, 1.0);
	TextDrawColor(EventTextDraw, -1);
	TextDrawSetOutline(EventTextDraw, 0);
	TextDrawSetProportional(EventTextDraw, 1);
	TextDrawSetShadow(EventTextDraw, 1);
	TextDrawUseBox(EventTextDraw, 0);
	TextDrawTextSize(EventTextDraw, 70.000000, 140.000000);

	CarPreview[0] = TextDrawCreate(224.500000, 124.880004, "LD_SPAC:white");
	TextDrawLetterSize(CarPreview[0], 0.000000, 0.000000);
	TextDrawTextSize(CarPreview[0], 175.500000, 260.959991);
	TextDrawAlignment(CarPreview[0], 1);
	TextDrawColor(CarPreview[0], -1);
	TextDrawSetShadow(CarPreview[0], 0);
	TextDrawSetOutline(CarPreview[0], 0);
	TextDrawFont(CarPreview[0], 4);

	CarPreview[1] = TextDrawCreate(396.500000, 133.099990, "_");
	TextDrawLetterSize(CarPreview[1], 0.000000, 27.185556);
	TextDrawTextSize(CarPreview[1], 228.000000, 0.000000);
	TextDrawAlignment(CarPreview[1], 1);
	TextDrawColor(CarPreview[1], 0);
	TextDrawUseBox(CarPreview[1], true);
	TextDrawBoxColor(CarPreview[1], 255);
	TextDrawSetShadow(CarPreview[1], 0);
	TextDrawSetOutline(CarPreview[1], 0);
	TextDrawFont(CarPreview[1], 0);

	CarPreview[2] = TextDrawCreate(352.000000, 361.200042, "Cancel");
	TextDrawLetterSize(CarPreview[2], 0.349999, 1.336799);
	TextDrawTextSize(CarPreview[2], 389.500000, 17.360000);
	TextDrawAlignment(CarPreview[2], 1);
	TextDrawColor(CarPreview[2], -1);
	TextDrawUseBox(CarPreview[2], true);
	TextDrawBoxColor(CarPreview[2], -16776961);
	TextDrawSetShadow(CarPreview[2], 0);
	TextDrawSetOutline(CarPreview[2], 1);
	TextDrawBackgroundColor(CarPreview[2], 51);
	TextDrawFont(CarPreview[2], 1);
	TextDrawSetProportional(CarPreview[2], 1);
	TextDrawSetSelectable(CarPreview[2], true);

	CarPreview[3] = TextDrawCreate(235.000000, 361.200042, "Confirm");
	TextDrawLetterSize(CarPreview[3], 0.350000, 1.336799);
	TextDrawTextSize(CarPreview[3], 286.500000, 22.399995);
	TextDrawAlignment(CarPreview[3], 1);
	TextDrawColor(CarPreview[3], -1);
	TextDrawUseBox(CarPreview[3], true);
	TextDrawBoxColor(CarPreview[3], 8388863);
	TextDrawSetShadow(CarPreview[3], 0);
	TextDrawSetOutline(CarPreview[3], 1);
	TextDrawBackgroundColor(CarPreview[3], 51);
	TextDrawFont(CarPreview[3], 1);
	TextDrawSetProportional(CarPreview[3], 1);
	TextDrawSetSelectable(CarPreview[3], true);
	
	//Loading data text
	LoadingTextdraw[0] = TextDrawCreate(236.714981, 222.174011, "_box");
	TextDrawLetterSize(LoadingTextdraw[0], 0.060332, 3.629647);
	TextDrawTextSize(LoadingTextdraw[0], 378.000000, 0.000000);
	TextDrawAlignment(LoadingTextdraw[0], 1);
	TextDrawColor(LoadingTextdraw[0], 0);
	TextDrawUseBox(LoadingTextdraw[0], 1);
	TextDrawBoxColor(LoadingTextdraw[0], 175);
	TextDrawSetShadow(LoadingTextdraw[0], 0);
	TextDrawSetOutline(LoadingTextdraw[0], 0);
	TextDrawBackgroundColor(LoadingTextdraw[0], 255);
	TextDrawFont(LoadingTextdraw[0], 1);
	TextDrawSetProportional(LoadingTextdraw[0], 1);
	TextDrawSetShadow(LoadingTextdraw[0], 0);

	LoadingTextdraw[1] = TextDrawCreate(259.333221, 230.237075, "Loading_data...");
	TextDrawLetterSize(LoadingTextdraw[1], 0.400000, 1.600000);
	TextDrawAlignment(LoadingTextdraw[1], 1);
	TextDrawColor(LoadingTextdraw[1], -1);
	TextDrawSetShadow(LoadingTextdraw[1], 0);
	TextDrawSetOutline(LoadingTextdraw[1], 0);
	TextDrawBackgroundColor(LoadingTextdraw[1], 255);
	TextDrawFont(LoadingTextdraw[1], 1);
	TextDrawSetProportional(LoadingTextdraw[1], 1);
	TextDrawSetShadow(LoadingTextdraw[1], 0);
		
	SideDoorsInit();
	LoadDoorGates();
	loadRaffle();
	LoadVIPRaffle();
	LoadDrivingTest();
	LoadTruckingTest();
	LoadPizzaPos();
	LoadPNSExits();
	LoadLSPDPaychecks();
	LoadLSMDPaychecks();
	LoadCouncilPaychecks();
	LoadMediaPaychecks();
	InitHouses();
	InitBusinesses();
	InitJobs();
	InitGroups();
	LoadGangs();
	InitRadios();
	LoadHotelRooms();
	LoadVehicles();
	LoadGoMenu();
	LoadLoyaltyShop();
	LoadTents();
	LoadZones();
	
	format(LastRestartTime, sizeof(LastRestartTime), "%02d/%02d/%d at %02d:%02d:%02d.", month, day, year, hour, minute, second);
	dini_Set("Assets.ini", "LastRestartTime", LastRestartTime);

	//Gas
	//InitGasStations();

	//ATM's
/*	for(new a; a < sizeof(ATMCords); a++)
	{
		CreateDynamicObject(ATM_MODEL, ATMCords[a][0], ATMCords[a][1], ATMCords[a][2], 0.0, 0.0, ATMCords[a][3]);
		CreateDynamic3DTextLabel("ATM - /useatm", 0xFFFFFFFF, ATMCords[a][0], ATMCords[a][1], ATMCords[a][2] + 0.85, 10);
	}*/

	for(new i; i < MAX_PAYPHONES; i++)
	{
		format(string, sizeof(string), "Payphone ({3CE034}%d{FFFFFF})\n/usephone", PayphoneNumbers[i]);
		if(i < 19) //Dont create objects at mall payphones
			CreateDynamicObject(1216, Payphones[i][0], Payphones[i][1], Payphones[i][2], 0.0, 0.0, Payphones[i][3]);
		CreateDynamic3DTextLabel(string, 0xFFFFFFFF, Payphones[i][0], Payphones[i][1], Payphones[i][2] + 0.85, 10);
	}

	for(new i; i < sizeof(paynsprays); i++)
	{
		PayNSprayLabels[i] = CreateDynamic3DTextLabel("Use /enterpns\nto repair your vehicle.", GREEN, paynsprays[i][0], paynsprays[i][1], paynsprays[i][2], 50, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
	}

	for(new i; i < MAX_RECENT_ADS; i++)
	{
		RecentAds[i] = "No advertisement listed.";
		RecentAdTime[i] = 0;
	}

	// LSPD garage entrance/exit labels
	
	CreateDynamic3DTextLabel("/enterpd", GREEN, 1588.4226,-1634.2216,13.3828, 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, -1, -1, 100);
 	CreateDynamic3DTextLabel("/exitpd", GREEN, 2316.4890,2446.0989,3.2734, 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, -1, -1, 100);
	
	// LSPD /checkcrimes machine thing
	CreateDynamic3DTextLabel("/checkcrimes", YELLOW, 1556.278930, -1688.036865, -91.781410, 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, -1, -1, 100);
	
	ShowPlayerMarkers(0);
	SetNameTagDrawDistance(35);


	#if defined MTG_FAIR
		DJ_Radius = CreateDynamicRectangle(362.8518, -1771.8276, 162.6942, -1928.4958, 0, 0);
	#endif

	ImpoundPos = CreateDynamicRectangle(1539.70, -1602.44, 1607.99, -1637.96, .worldid = 0);

	//LoadObjects();
	LoadDynamicMapIcons();
	djson_GameModeInit();
	loadConstObjects();
	//LoadBillboards();

	//printf("Vehicles Spawned: %d", vehCount);
	DynamicWeather();
	
	CurrentLoyaltyDay = getdate();

	//Create first player
	
	//randomStringNoZero(creationPin, 8);
	//strtolower(creationPin);
	
	//mysql_format(MYSQL_MAIN, string, sizeof(string), "INSERT INTO account_whitelist (AccountName, CreationPin) VALUES ('Clark_Gable', '12345678')");
	//mysql_query(MYSQL_MAIN, string, false);
	
	/*format(string, sizeof(string), "You have approved \'%s\' for account creation. Their pin is \'%s\'", name, creationPin);
	SendClientMessage(playerid, WHITE, string);
	format(string, sizeof(string), "%s has approved \'%s\' with creation pin \'%s\'", GetName(playerid), name, creationPin);
	AdminActionsLog(string);
	*/


	
	defer FinishServerInitilization();
	return 1;
}

timer FinishServerInitilization[2000]()
{
	print("--------------------------------------------------------------------------");
	print("[system] Script Initialized.");
	print("[system] crea Roleplay Initialized.");
	print(VERSION);
	print("--------------------------------------------------------------------------");
	IsServerStartingUp = false;
}

public OnIncomingConnection(playerid, ip_address[], port)
{
	if(IsServerStartingUp == true)
	{
		SendClientMessage(playerid, ADMINORANGE, "The server has not been initialized fully. Please reconnect!!!");
		BlockIpAddress(ip_address, 4000);
	}
	return 1;
}

//public DynamicWeather()
task DynamicWeather[7200000]()
{
	#if defined MTG_HALLOWEEN
		GlobalWeather = 9;
		SetWeather(GlobalWeather);
		return 1;

	#else
	new ValidWeatherIDs[] =
	{
		0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	};

	GlobalWeather = random(21);
	new count = 0;
	for(new i; i < sizeof(ValidWeatherIDs); i++)
	{
		if(GlobalWeather == ValidWeatherIDs[i])
			count++;
	}

	if(count > 0)
		SetWeather(GlobalWeather);
	else
	{
		GlobalWeather = 0;
		SetWeather(GlobalWeather);
	}
	return 1;
	#endif
}

stock PlayerPlaySoundEx(soundid, Float:IncX, Float:IncY, Float:IncZ)
{
	foreach(Player, i)
	{
		if (IsPlayerInRangeOfPoint(i, 10, IncX, IncY, IncZ))
			PlayerPlaySound(i, soundid, IncX, IncY, IncZ);
	}
}

stock PutPlayerInTutorial(playerid, stageid, skiptimer = 0)
{
	new string[2400];
	switch(stageid)
	{
		case 1:
		{
			TogglePlayerSpectating(playerid, true);

			Player[playerid][Tutorial] = 2;

			if(!skiptimer)
				SetPVarInt(playerid, "TUTORIAL_TIMER", gettime() + 10);

			// SetPlayerCameraPos(playerid, 739, -1399, 35);
			// SetPlayerCameraLookAt(playerid, 739, -1422, 10);
			// SetPlayerVirtualWorld(playerid, 500 + playerid);
			// SetPlayerPos(playerid, 739, -1399, 30);

			SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");

			format(string, sizeof(string), "{FFFFFF}Hello there, %s - Welcome to crea.", GetName(playerid));
			SendClientMessage(playerid, WHITE, string);
			SendClientMessage(playerid, WHITE, "This server is a roleplaying server which means there are certain rules that must be followed in order to create a better experience.");
			SendClientMessage(playerid, WHITE, "First of all, you can visit our forums at \"{F5C85F}https://crearoleplay.com{FFFFFF}\", where you can further join our community.");
			SendClientMessage(playerid, WHITE, "There are a couple things you also need to know to help get started. Let's continue..");

			SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
			ResetPlayerWeapons(playerid);

			strcat(string, "\nThis server is a roleplaying server which means there are certain rules that must be followed in order to create a better experience.\n");
			strcat(string, "First of all, you can visit our forums at \"{F5C85F}https://crearoleplay.com{FFFFFF}\", where you can further join our community.\n");
			strcat(string, "There are a couple things you also need to know to help get started. Let's continue..");
			ShowPlayerDialog(playerid, DIALOG_TUTORIAL, DIALOG_STYLE_MSGBOX, "crea Roleplay Tutorial", string, "Continue", "");
		}
		case 2:
		{
			if(!skiptimer)
				SetPVarInt(playerid, "TUTORIAL_TIMER", gettime() + 10);
			Player[playerid][Tutorial] = 3;

			// SetPlayerPos(playerid, 194, -1906, 20);
			// SetPlayerCameraPos(playerid, 194, -1906, 28);
			// SetPlayerCameraLookAt(playerid, 88, -1906, 4);

			SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
			SendClientMessage(playerid, WHITE, "{F5C85F}/map{FFFFFF}");
			SendClientMessage(playerid, WHITE, "The command \"{F5C85F}/map{FFFFFF}\" will assist you a lot in situations where you need to find a business, job or some other location.");
			SendClientMessage(playerid, WHITE, "Whatever you select, it will point you towards the closest one. Generally there is only one job type, but there are multiple businesses");
			SendClientMessage(playerid, WHITE, "of the same type so this will point you towards the one nearest to your location.");

			SendClientMessage(playerid, WHITE, "");

			SendClientMessage(playerid, WHITE, "{F5C85F}Hunger and health{FFFFFF}");
			SendClientMessage(playerid, WHITE, "Hunger won't be an issue for you until you hit 25 playing hours. You have the option of enabling it early. (/enablehunger).");
			SendClientMessage(playerid, WHITE, "Every 7.2 minutes, your hunger will decrease by 1. This means after 12 hours, you will be down to 0 hunger. As your hunger decreases,");
			SendClientMessage(playerid, WHITE, "you may get spurts of dizziness which last longer depending on your hunger. When you are really hungry, you will occasionally throw up.");
			SendClientMessage(playerid, WHITE, "You will not die if you get too hungry but your screen will continuously shake.");
			SendClientMessage(playerid, WHITE, "Your hunger bar is located in the top right of your screen as an orange bar. To fill this bar up, you can buy food from any restaurant.");
			SendClientMessage(playerid, WHITE, "Each type of food will regenerate a different amount of hunger.");
			SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");

			strcat(string, "{FFFFFF}{F5C85F}/map{FFFFFF}\n");
			strcat(string, "The command \"{F5C85F}/map{FFFFFF}\" will assist you a lot in situations where you need to find a business, job or some other location.\n");
			strcat(string, "Whatever you select, it will point you towards the closest one. Generally there is only one job type, but there are multiple businesses\n");
			strcat(string, "of the same type so this will point you towards the one nearest to your location.\n\n");
			strcat(string, "{F5C85F}Hunger and health{FFFFFF}\n");
			strcat(string, "Hunger won't be an issue for you until you hit 25 playing hours. You have the option of enabling it early. (/enablehunger).\n");
			strcat(string, "Every 7.2 minutes, your hunger will decrease by 1. This means after 12 hours, you will be down to 0 hunger. As your hunger decreases,\n");
			strcat(string, "you may get spurts of dizziness which last longer depending on your hunger. When you are really hungry, you will occasionally throw up.\n");
			strcat(string, "You will not die if you get too hungry but your screen will continuously shake.\n");
			strcat(string, "Your hunger bar is located in the top right of your screen as an orange bar. To fill this bar up, you can buy food from any restaurant.\n");
			strcat(string, "Each type of food will regenerate a different amount of hunger.");
			ShowPlayerDialog(playerid, DIALOG_TUTORIAL, DIALOG_STYLE_MSGBOX, "crea Roleplay Tutorial", string, "Continue", "");
		}
		case 3:
		{
			if(!skiptimer)
				SetPVarInt(playerid, "TUTORIAL_TIMER", gettime() + 10);
			Player[playerid][Tutorial] = 4;

			// SetPlayerPos(playerid, 2075, -1200, 30);
			// SetPlayerCameraPos(playerid, 2075, -1200, 40);
			// SetPlayerCameraLookAt(playerid, 1931, -1200, 19);

			SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
			SendClientMessage(playerid, WHITE, "{F5C85F}/newbie and /ask{FFFFFF}");
			SendClientMessage(playerid, WHITE, "The command \"{F5C85F}/newbie{FFFFFF}\", or \"{F5C85F}/n{FFFFFF}\" for short, is a global chat where you can");
			SendClientMessage(playerid, WHITE, "ask newbie and script-related questions. Please note that this channel is ONLY for questions.");
			SendClientMessage(playerid, WHITE, "The command \"{F5C85F}/ask{FFFFFF}\" is there for you to send requests to online moderators to assist you with any questions.");
			SendClientMessage(playerid, WHITE, "You can use both of these at any time (as long as you're not banned/muted from either) for any help you need.");
			SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");

			strcat(string, "{FFFFFF}{F5C85F}/newbie and /ask{FFFFFF}\n");
			strcat(string, "The command \"{F5C85F}/newbie{FFFFFF}\", or \"{F5C85F}/n{FFFFFF}\" for short, is a global chat where you can\n");
			strcat(string, "ask newbie and script-related questions. Please note that this channel is ONLY for questions.\n");
			strcat(string, "The command \"{F5C85F}/ask{FFFFFF}\" is there for you to send requests to online moderators to assist you with any questions.\n");
			strcat(string, "You can use both of these at any time (as long as you're not banned/muted from either) for any help you need.");
			ShowPlayerDialog(playerid, DIALOG_TUTORIAL, DIALOG_STYLE_MSGBOX, "crea Roleplay Tutorial", string, "Continue", "");
		}
		case 4:
		{
			if(!skiptimer)
				SetPVarInt(playerid, "TUTORIAL_TIMER", gettime() + 10);
			Player[playerid][Tutorial] = 5;

			// SetPlayerPos(playerid, 1966, -1373, 40);
			// SetPlayerCameraPos(playerid, 1966, -1373, 50);
			// SetPlayerCameraLookAt(playerid, 1896, -1426, 10);

			SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
			SendClientMessage(playerid, WHITE, "{F5C85F}In-Character (IC) & Out-Of-Character (OOC){FFFFFF}");
			SendClientMessage(playerid, WHITE, "The term \"{F5C85F}IC{FFFFFF}\" and \"{F5C85F}OOC{FFFFFF}\" are two key terms you'll come across in roleplay.");
			SendClientMessage(playerid, WHITE, "Being In-Character means you are acting as a character. That's your roleplay. The character you control is who you are roleplaying as.");
			SendClientMessage(playerid, WHITE, "Out-Of-Character, however, is stuff not related to roleplay and actually about real life issues.");
			SendClientMessage(playerid, WHITE, "Examples: Your real life computer problems, questions about the server, etc.");
			SendClientMessage(playerid, WHITE, "Speaking as your character and asking OOC questions or talking about OOC problems is regarded as metagaming. Use OOC chat channels for that.");

			SendClientMessage(playerid, WHITE, "");

			SendClientMessage(playerid, WHITE, "{F5C85F}Metagaming{FFFFFF}");
			SendClientMessage(playerid, WHITE, "Metagaming is a common mistake with players who are new to roleplay.");
			SendClientMessage(playerid, WHITE, "As explained above, mixing IC and OOC is metagaming and there are a few ways this can happen.");
			SendClientMessage(playerid, WHITE, "If you speak IC and ask questions like, \"What's the command to put money on the ground?\", you're metgaming. Commands and such are OOC"); //"
			SendClientMessage(playerid, WHITE, "and should be asked about in an OOC fashion.");
			SendClientMessage(playerid, WHITE, "Name-tags which appear above players heads are also OOC. In real life you don't see nametags, right? Right. So you don't know their name.");
			SendClientMessage(playerid, WHITE, "If you want to know a players name, you need to find out through your character and roleplay.");

			SendClientMessage(playerid, WHITE, "");

			SendClientMessage(playerid, WHITE, "For further details on In-Character, Out-Of-Character and Metagaming, visit the forums at \"{F5C85F}www.crearoleplay.com/t/rules{FFFFFF}\".");
			SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");

			strcat(string, "{FFFFFF}{F5C85F}In-Character (IC) & Out-Of-Character (OOC)\n{FFFFFF}");
			strcat(string, "The term \"{F5C85F}IC{FFFFFF}\" and \"{F5C85F}OOC{FFFFFF}\" are two key terms you'll come across in roleplay.\n");
			strcat(string, "Being In-Character means you are acting as a character. That's your roleplay. The character you control is who you are roleplaying as.\n");
			strcat(string, "Out-Of-Character, however, is stuff not related to roleplay and actually about real life issues.\n");
			strcat(string, "Examples: Your real life computer problems, questions about the server, etc.\n");
			strcat(string, "Speaking as your character and asking OOC questions or talking about OOC problems is regarded as metagaming. Use OOC chat channels for that.\n\n");
			strcat(string, "{F5C85F}Metagaming\n{FFFFFF}");
			strcat(string, "Metagaming is a common mistake with players who are new to roleplay.\n");
			strcat(string, "As explained above, mixing IC and OOC is metagaming and there are a few ways this can happen.\n");
			strcat(string, "If you speak IC and ask questions like, \"What is the command to put money on the ground?\", you are metgaming. Commands and such are OOC\n");
			strcat(string, "and should be asked about in an OOC fashion.\n");
			strcat(string, "Name-tags which appear above players heads are also OOC. In real life you don't see nametags, right? Right. So you don't know their name.\n");
			strcat(string, "If you want to know a players name, you need to find out through your character and roleplay.");
			ShowPlayerDialog(playerid, DIALOG_TUTORIAL, DIALOG_STYLE_MSGBOX, "crea Roleplay Tutorial", string, "Continue", "");
		}
		case 5:
		{
			if(!skiptimer)
				SetPVarInt(playerid, "TUTORIAL_TIMER", gettime() + 10);
			Player[playerid][Tutorial] = 6;

			// SetPlayerPos(playerid, 2187, -1732, 20);
			// SetPlayerCameraPos(playerid, 2187, -1732, 27);
			// SetPlayerCameraLookAt(playerid, 2254, -1732, 13);

			SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
			SendClientMessage(playerid, WHITE, "{F5C85F}Powergaming");
			SendClientMessage(playerid, WHITE, "Powergaming is another commonly mistake made by new players. Essentially, powergaming is roleplaying unrealistic/impossible actions.");
			SendClientMessage(playerid, WHITE, "For example: A /me command like \"/me grows wings and flies.\" is unrealistic and does not happen. This is powergaming.");
			SendClientMessage(playerid, WHITE, "Another example: Somebody has chained you against a fence. You cannot break through this unless it was specifically roleplayed that");
			SendClientMessage(playerid, WHITE, "the chain was not very strong and could not withstand pressure.");

			SendClientMessage(playerid, WHITE, "");


			SendClientMessage(playerid, WHITE, "{F5C85F}Deathmatching");
			SendClientMessage(playerid, WHITE, "Again, this is another commonly mistake new players make. As this is a roleplay server, your actions (especially those which");
			SendClientMessage(playerid, WHITE, "involve another player) must be roleplayed. If you attack a player for no reason, or without roleplay, then you are deathmatching.");
			SendClientMessage(playerid, WHITE, "This is not allowed as it is unfair on the victim.");

			SendClientMessage(playerid, WHITE, "");

			SendClientMessage(playerid, WHITE, "For further details on powergaming and deathmatching, visit the forums at \"{F5C85F}www.crearoleplay.com/t/rules{FFFFFF}\".");
			SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");

			strcat(string, "{FFFFFF}{F5C85F}Powergaming\n{FFFFFF}");
			strcat(string, "Powergaming is another commonly mistake made by new players. Essentially, powergaming is roleplaying unrealistic/impossible actions.\n");
			strcat(string, "For example: A /me command like \"/me grows wings and flies.\" is unrealistic and does not happen. This is powergaming.\n");
			strcat(string, "Another example: Somebody has chained you against a fence. You cannot break through this unless it was specifically roleplayed that\n");
			strcat(string, "the chain was not very strong and could not withstand pressure.\n\n");
			strcat(string, "{F5C85F}Deathmatching\n{FFFFFF}");
			strcat(string, "Again, this is another commonly mistake new players make. As this is a roleplay server, your actions (especially those which\n");
			strcat(string, "involve another player) must be roleplayed. If you attack a player for no reason, or without roleplay, then you are deathmatching.\n");
			strcat(string, "This is not allowed as it is unfair on the victim.\n\n");
			strcat(string, "For further details on powergaming and deathmatching, visit the forums at \"{F5C85F}www.crearoleplay.com/t/rules{FFFFFF}\".");
			ShowPlayerDialog(playerid, DIALOG_TUTORIAL, DIALOG_STYLE_MSGBOX, "crea Roleplay Tutorial", string, "Continue", "");
		}
		case 6:
		{
			DeletePVar(playerid, "TUTORIAL_TIMER");
			Player[playerid][Tutorial] = 7;

			// SetPlayerPos(playerid, 681, -568, 20);
			// SetPlayerCameraPos(playerid, 681, -568, 30);
			// SetPlayerCameraLookAt(playerid, 681, -495, 16);

			SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
			SendClientMessage(playerid, WHITE, "That's it! You've reached the end of the tutorial. Before you spawn, we'll just sort out some vital character information.");
			SendClientMessage(playerid, ORANGE, "Don't forget to visit https://crearoleplay.com to learn about VIP subscriptions and other In-Game purchases!");
			SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
			ShowPlayerDialog(playerid, 106, DIALOG_STYLE_LIST, "Please Specify Your Gender", "Male\nFemale", "Select", "Cancel");
		}
		case 99:
		{
			TogglePlayerSpectating(playerid, false);
			switch(Player[playerid][Gender])
			{
				case 1:
				{
					switch(Player[playerid][Race])
					{
						case 0:
						{
							Player[playerid][LastSkin] = 291;
						}
						case 1:
						{
							Player[playerid][LastSkin] = 4;
						}
						case 2:
						{
							Player[playerid][LastSkin] = 170;
						}
						case 3:
						{
							Player[playerid][LastSkin] = 292;
						}
					}
				}
				case 2:
				{
					switch(Player[playerid][Race])
					{
						case 0:
						{
							Player[playerid][LastSkin] = 191;
						}
						case 1:
						{
							Player[playerid][LastSkin] = 190;
						}
						case 2:
						{
							Player[playerid][LastSkin] = 169;
						}
						case 3:
						{
							Player[playerid][LastSkin] = 298;
						}
					}
				}
			}
			SetPVarInt(playerid, "FRESH_SPAWNED_NEW_ACCOUNT", 1);
			SetSpawnInfo(playerid, 0, Player[playerid][LastSkin], SpawnX, SpawnY, SpawnZ, 90, 0, 0, 0, 0, 0, 0);
			SpawnPlayer(playerid);
			SetPlayerVirtualWorld(playerid, 0);
			Player[playerid][Tutorial] = 0;
			TogglePlayerControllable(playerid, true);
			SetCameraBehindPlayer(playerid);
			ShowPlayerDialog(playerid, DIALOG_REFERAL, DIALOG_STYLE_LIST, "How did you find out about crea Roleplay?", "Friends\nSA:MP Forums Advertisment\nYoutube\nGoogle\nOther", "Select", "");
		}
	}
	return 1;
}

/*stock printEx(string[])
{
	print(string);
	logError(string);
	return 1;
}*/

/*stock logError(string[])
{
	new entry[255], year, month, day, hour, minute, second;
	gettime(hour, minute, second);
	getdate(year, month, day);
	format(entry, sizeof(entry), "[%d/%d/%d %02d:%02d:%02d] -- %s\r\n", month, day, year, hour, minute, second, string);
	new File:hFile;
	hFile = fopen("errors.txt", io_append);

	if(!hFile)
		return print("*** logError failed to open file.");

	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}*/

stock GroupChatLog(string[])
{
	new entry[255], year, month, day, hour, minute, second;
	gettime(hour, minute, second);
	getdate(year, month, day);
	format(entry, sizeof(entry), "[%d/%d/%d %02d:%02d:%02d] -- %s\r\n", month, day, year, hour, minute, second, string);
	new File:hFile;
	hFile = fopen("Logs/GroupChat.log", io_append);

	//if(!hFile)
	//	return printEx("*** GroupChatLog failed to open file.");

	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}

stock NamechangeLog(string[])
{
	new entry[255], year, month, day, hour, minute, second;
	gettime(hour, minute, second);
	getdate(year, month, day);
	format(entry, sizeof(entry), "[%d/%d/%d %02d:%02d:%02d] -- %s\r\n", month, day, year, hour, minute, second, string);
	new File:hFile;
	hFile = fopen("Logs/Namechanges.log", io_append);

	//if(!hFile)
	//	return printEx("*** NamechangeLog failed to open file.");

	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}

stock BanLog(string[])
{
	new entry[255], year, month, day, hour, minute, second;
	gettime(hour, minute, second);
	getdate(year, month, day);
	format(entry, sizeof(entry), "[%d/%d/%d %02d:%02d:%02d] -- %s\r\n", month, day, year, hour, minute, second, string);
	new File:hFile;
	hFile = fopen("Logs/Bans.log", io_append);

	//if(!hFile)
	//	return printEx("*** BanLog failed to open file.");

	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}

stock UnbanLog(string[])
{
	new entry[255], year, month, day, hour, minute, second;
	gettime(hour, minute, second);
	getdate(year, month, day);
	format(entry, sizeof(entry), "[%d/%d/%d %02d:%02d:%02d] -- %s\r\n", month, day, year, hour, minute, second, string);
	new File:hFile;
	hFile = fopen("Logs/Unbans.log", io_append);

	//if(!hFile)
	//	return printEx("*** UnbanLog failed to open file.");

	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}

stock JobLog(playerid, job[], newlevel, oldlevel, bool:purchased = false)
{
	new string[128];
	format(string, sizeof(string), "%s has leveled up %s from level %d to level %d. (Purchased: %s)", GetName(playerid), job, oldlevel, newlevel, (purchased == false)?("No"):("Yes"));
	StatLog(string);
	return 1;
}

stock StatLog(string[])
{
	new entry[255], year, month, day, hour, minute, second;
	gettime(hour, minute, second);
	getdate(year, month, day);
	format(entry, sizeof(entry), "[%d/%d/%d %02d:%02d:%02d] -- %s\r\n", month, day, year, hour, minute, second, string);
	new File:hFile;
	hFile = fopen("Logs/Stat.log", io_append);

	//if(!hFile)
	//	return printEx("*** StatLog failed to open file.");

	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}

stock PMsLog(string[])
{
	new entry[255], year, month, day, hour, minute, second;
	gettime(hour, minute, second);
	getdate(year, month, day);
	format(entry, sizeof(entry), "[%d/%d/%d %02d:%02d:%02d] -- %s\r\n", month, day, year, hour, minute, second, string);
	new File:hFile;
	hFile = fopen("Logs/PMchat.log", io_append);

	//if(!hFile)
	//	return printEx("*** PMsLog failed to open file.");

	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}

stock OOCChatLog(string[])
{
	new entry[255], year, month, day, hour, minute, second;
	gettime(hour, minute, second);
	getdate(year, month, day);
	format(entry, sizeof(entry), "[%d/%d/%d %02d:%02d:%02d] -- %s\r\n", month, day, year, hour, minute, second, string);
	new File:hFile;
	hFile = fopen("Logs/OOCChat.log", io_append);

	//if(!hFile)
	//	return printEx("*** OOCChatLog failed to open file.");

	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}

stock AdminActionsLog(string[])
{
	new entry[255], year, month, day, hour, minute, second;
	gettime(hour, minute, second);
	getdate(year, month, day);
	format(entry, sizeof(entry), "[%d/%d/%d %02d:%02d:%02d] -- %s\r\n", month, day, year, hour, minute, second, string);
	new File:hFile;
	hFile = fopen("Logs/AdminActions.log", io_append);

	//if(!hFile)
	//	return printEx("*** AdminActionsLog failed to open file.");

	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}

stock ICChatLog(string[])
{
	/*if(!fexist("Logs/ICChat.log"))
		dini_Create("Logs/ICChat.log");*/
	new entry[255], year, month, day, hour, minute, second;
	gettime(hour, minute, second);
	getdate(year, month, day);
	format(entry, sizeof(entry), "[%d/%d/%d %02d:%02d:%02d] -- %s\r\n", month, day, year, hour, minute, second, string);
	new File:hFile;
	hFile = fopen("Logs/ICChat.log", io_append);

	//if(!hFile)
	//	return printEx("*** ICChatLog failed to open file.");

	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}

stock GetPlayerPhones(i) //This stock returns the number of phones that the player owns.
{
	 new query[255];
     mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM phones WHERE owner = '%e'", Player[i][NormalName]);
     new Cache:cache = mysql_query(MYSQL_MAIN, query), count = cache_get_row_count();
     cache_delete(cache);
     return count;
}

stock MoneyLog(string[])
{
	new entry[255], year, month, day, hour, minute, second;
	gettime(hour, minute, second);
	getdate(year, month, day);
	format(entry, sizeof(entry), "[%d/%d/%d %02d:%02d:%02d] -- %s\r\n", month, day, year, hour, minute, second, string);
	new File:hFile;
	hFile = fopen("Logs/Money.log", io_append);

	//if(!hFile)
	//	return printEx("*** MoneyLog failed to open file.");

	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}

stock DeathLog(string[])
{
	new entry[255], year, month, day, hour, minute, second;
	gettime(hour, minute, second);
	getdate(year, month, day);
	format(entry, sizeof(entry), "[%d/%d/%d %02d:%02d:%02d] -- %s\r\n", month, day, year, hour, minute, second, string);
	new File:hFile;
	hFile = fopen("Logs/Death.log", io_append);

	//if(!hFile)
	//	return printEx("*** DeathLog failed to open file.");

	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}

/*stock GroupInviteLog(string[])
{
	new entry[255], year, month, day, hour, minute, second;
	gettime(hour, minute, second);
	getdate(year, month, day);
	format(entry, sizeof(entry), "[%d/%d/%d %02d:%02d:%02d] -- %s\r\n", month, day, year, hour, minute, second, string);
	new File:hFile;
	hFile = fopen("Logs/GroupInvites.log", io_append);

	//if(!hFile)
	//	return printEx("*** GroupInviteLog failed to open file.");

	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}*/

stock CommandsLog(string[])
{
	/*if(!fexist("Logs/Commands.log"))
		dini_Create("Logs/Commands.log");*/
	new entry[255], year, month, day, hour, minute, second;
	gettime(hour, minute, second);
	getdate(year, month, day);
	format(entry, sizeof(entry), "[%d/%d/%d %02d:%02d:%02d] -- %s\r\n", month, day, year, hour, minute, second, string);
	new File:hFile;
	hFile = fopen("Logs/Commands.log", io_append);

	//if(!hFile)
	//	return printEx("*** CommandsLog failed to open file.");

	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}

stock ConnectionLog(string[])
{
	new entry[255], year, month, day, hour, minute, second;
	gettime(hour, minute, second);
	getdate(year, month, day);
	format(entry, sizeof(entry), "[%d/%d/%d %02d:%02d:%02d] -- %s\r\n", month, day, year, hour, minute, second, string);
	new File:hFile;
	hFile = fopen("Logs/Connection.log", io_append);

	//if(!hFile)
	//	return printEx("*** ConnectionLog failed to open file.");

	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}

stock WarningLog(string[])
{
	new entry[255], year, month, day, hour, minute, second;
	gettime(hour, minute, second);
	getdate(year, month, day);
	format(entry, sizeof(entry), "[%d/%d/%d %02d:%02d:%02d] -- %s\r\n", month, day, year, hour, minute, second, string);
	new File:hFile;
	hFile = fopen("Logs/Warnings.log", io_append);

	//if(!hFile)
	//	return printEx("*** WarningLog failed to open file.");

	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}

stock StorageLog(string[])
{
	new entry[255], year, month, day, hour, minute, second;
	gettime(hour, minute, second);
	getdate(year, month, day);
	format(entry, sizeof(entry), "[%d/%d/%d %02d:%02d:%02d] -- %s\r\n", month, day, year, hour, minute, second, string);
	new File:hFile;
	hFile = fopen("Logs/Storage.log", io_append);

	//if(!hFile)
	//	return printEx("*** StorageLog failed to open file.");

	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}

stock LoyaltyLog(string[])
{
	new entry[255], year, month, day, hour, minute, second;
	gettime(hour, minute, second);
	getdate(year, month, day);
	format(entry, sizeof(entry), "[%d/%d/%d %02d:%02d:%02d] -- %s\r\n", month, day, year, hour, minute, second, string);
	new File:hFile;
	hFile = fopen("Logs/Loyalty.log", io_append);

	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}

stock InitGroups()
{
	if(dini_Int("Assets.ini", "ConvertedToMysql") == 0)
	{
		new FileName[128];
		for(new i = 0; i < MAX_GROUPS; i++)
		{
			format(FileName, sizeof(FileName), "Groups/Group_%d.ini", i);
			if(fexist(FileName))
			{

				INI_ParseFile(FileName, "LoadGroup", .bExtra = true, .extra = i, .bPassTag = true);

				Groups[i][HQPickupID] = CreateDynamicPickup(1239, 23, Groups[i][HQExteriorX], Groups[i][HQExteriorY], Groups[i][HQExteriorZ], -1, -1, -1, 150.0);

				Groups[i][SafePickupID] = CreateDynamicPickup(1239, 23, Groups[i][SafeX], Groups[i][SafeY], Groups[i][SafeZ],Groups[i][SafeWorld], -1, -1, 150.0);

				Groups[i][HQPickup2] = CreateDynamicPickup(1239, 23, Groups[i][HQExterior2][0], Groups[i][HQExterior2][1], Groups[i][HQExterior2][2], -1, -1, -1, 150.0);

				if(Groups[i][CommandTypes] == 7)
				{
					Groups[i][ChipexLabel] = CreateDynamic3DTextLabel("/chipex", GREEN, Groups[i][ChipPos][0], Groups[i][ChipPos][1], Groups[i][ChipPos][2], 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Groups[i][ChipsVW], -1, -1, 100);
					for(new x; x < MAX_SLOTS; x++) {
						if(Groups[i][slotsUsed][x])
							Groups[i][slots3D][x] = CreateDynamic3DTextLabel("Slot Machine\n/useslots", 0x038516FF, Groups[i][slotsX][x], Groups[i][slotsY][x], Groups[i][slotsZ][x], 10);
					}
				}

				UpdateObjectLabel(i, LABEL_TYPE_FACTION, .create = 1);
				printf("[system] Group %d spawned.", i);
				SpawnedGroups++;

				Groups[i][ORM_ID] = orm_create("factions");
				orm_setkey(Groups[i][ORM_ID], "FactionSQL");
				SetupFactionORM(i);
				orm_insert(Groups[i][ORM_ID]);
			}
		}
	}
	else
		mysql_tquery(MYSQL_MAIN, "SELECT * FROM factions", "OnFactionsLoad", "");

	return 1;
}

forward OnFactionsLoad();
public OnFactionsLoad()
{
	new total_rows = cache_num_rows();
	for(new r; r < total_rows; r++)
	{
		Groups[r + 1][ORM_ID] = orm_create("factions");

		SetupFactionORM(r + 1);
		SetupCasinoORM(r + 1);
		orm_setkey(Groups[r + 1][ORM_ID], "FactionSQL");
		orm_apply_cache(Groups[r + 1][ORM_ID], r);

		Groups[r + 1][HQPickupID] = CreateDynamicPickup(1239, 23, Groups[r + 1][HQExteriorX], Groups[r + 1][HQExteriorY], Groups[r + 1][HQExteriorZ], -1, -1, -1, 150.0);

		Groups[r + 1][SafePickupID] = CreateDynamicPickup(1239, 23, Groups[r + 1][SafeX], Groups[r + 1][SafeY], Groups[r + 1][SafeZ],Groups[r + 1][SafeWorld], -1, -1, 150.0);

		Groups[r + 1][HQPickup2] = CreateDynamicPickup(1239, 23, Groups[r + 1][HQExterior2][0], Groups[r + 1][HQExterior2][1], Groups[r + 1][HQExterior2][2], -1, -1, -1, 150.0);

		if(Groups[r + 1][CommandTypes] == 7)
		{
			Groups[r + 1][ChipexLabel] = CreateDynamic3DTextLabel("/chipex", GREEN, Groups[r + 1][ChipPos][0], Groups[r + 1][ChipPos][1], Groups[r + 1][ChipPos][2], 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Groups[r + 1][ChipsVW], -1, -1, 100);
			for(new x; x < MAX_SLOTS; x++) {
				if(Groups[r + 1][slotsUsed][x])
					Groups[r + 1][slots3D][x] = CreateDynamic3DTextLabel("Slot Machine\n/useslots", 0x038516FF, Groups[r + 1][slotsX][x], Groups[r + 1][slotsY][x], Groups[r + 1][slotsZ][x], 10);
			}
		}

		new type;
		switch(Groups[r + 1][CommandTypes])
		{
			case 1: type = 30;
			case 7: type = 25;
			case 8: type = 55;
			default: type = -1;
		}
		if(type != -1)
		{
			Groups[r + 1][mapIcon] = CreateDynamicMapIcon(Groups[r + 1][HQExteriorX], Groups[r + 1][HQExteriorY], Groups[r + 1][HQExteriorZ], type, 0);
		}


		UpdateObjectLabel(r + 1, LABEL_TYPE_FACTION, .create = 1);
		printf("[system] Group %d spawned.", r + 1);
		SpawnedGroups++;
	}
}

stock InitJobs()
{
	if(dini_Int("Assets.ini", "ConvertedToMysql") == 0)
		{
		new FileName[128];
		for(new i = 0; i < MAX_JOBS; i++)
		{
			format(FileName, sizeof(FileName), "Jobs/Job_%d.ini", i);
			if(fexist(FileName))
			{
				INI_ParseFile(FileName, "LoadJob", .bExtra = true, .extra = i, .bPassTag = true);

				Jobs[i][JobJoinPosPickupID] = CreateDynamicPickup(1239, 23, Jobs[i][JobJoinPosX], Jobs[i][JobJoinPosY], Jobs[i][JobJoinPosZ], Jobs[i][JobJoinPosWorld], -1, -1, 150.0);
				Jobs[i][JobMiscLocationOnePickupID] = CreateDynamicPickup(1239, 23, Jobs[i][JobMiscLocationOneX], Jobs[i][JobMiscLocationOneY], Jobs[i][JobMiscLocationOneZ], Jobs[i][JobMiscLocationOneWorld], -1, -1, 150.0);
				Jobs[i][JobMiscLocationTwoPickupID] = CreateDynamicPickup(1239, 23, Jobs[i][JobMiscLocationTwoX], Jobs[i][JobMiscLocationTwoY], Jobs[i][JobMiscLocationTwoZ], Jobs[i][JobMiscLocationTwoWorld], -1, -1, 150.0);

				UpdateObjectLabel(i, LABEL_TYPE_JOB, 0, .create = 1);
				UpdateObjectLabel(i, LABEL_TYPE_JOB, 1, .create = 1);
				UpdateObjectLabel(i, LABEL_TYPE_JOB, 2, .create = 1);
				printf("[system] Job %d (%s) spawned.", i, Jobs[i][JobName]);
				SpawnedJobs++;

				Jobs[i][ORM_ID] = orm_create("jobs");
				orm_setkey(Jobs[i][ORM_ID], "JobSQL");
				SetupJobORM(i);
				orm_insert(Jobs[i][ORM_ID]);
			}
		}
	}
	else
		mysql_tquery(MYSQL_MAIN, "SELECT * FROM jobs", "OnJobsLoad", "");

	LoadTrashPoints();
	return 1;
}

forward OnJobsLoad();
public OnJobsLoad()
{
	new total_rows = cache_num_rows();
	for(new r; r < total_rows; r++)
	{
		Jobs[r + 1][ORM_ID] = orm_create("jobs");

		SetupJobORM(r + 1);
		orm_setkey(Jobs[r + 1][ORM_ID], "JobSQL");
		orm_apply_cache(Jobs[r + 1][ORM_ID], r);

		Jobs[r + 1][JobJoinPosPickupID] = CreateDynamicPickup(1239, 23, Jobs[r + 1][JobJoinPosX], Jobs[r + 1][JobJoinPosY], Jobs[r + 1][JobJoinPosZ], Jobs[r + 1][JobJoinPosWorld], -1, -1, 150.0);
		Jobs[r + 1][JobMiscLocationOnePickupID] = CreateDynamicPickup(1239, 23, Jobs[r + 1][JobMiscLocationOneX], Jobs[r + 1][JobMiscLocationOneY], Jobs[r + 1][JobMiscLocationOneZ], Jobs[r + 1][JobMiscLocationOneWorld], -1, -1, 150.0);
		Jobs[r + 1][JobMiscLocationTwoPickupID] = CreateDynamicPickup(1239, 23, Jobs[r + 1][JobMiscLocationTwoX], Jobs[r + 1][JobMiscLocationTwoY], Jobs[r + 1][JobMiscLocationTwoZ], Jobs[r + 1][JobMiscLocationTwoWorld], -1, -1, 150.0);

		UpdateObjectLabel(r + 1, LABEL_TYPE_JOB, 0, .create = 1);
		UpdateObjectLabel(r + 1, LABEL_TYPE_JOB, 1, .create = 1);
		UpdateObjectLabel(r + 1, LABEL_TYPE_JOB, 2, .create = 1);
		printf("[system] Job %d (%s) spawned.", r + 1, Jobs[r + 1][JobName]);
		SpawnedJobs++;
	}
	return 1;
}

stock bool:IsSQLVehicleSpawned(sql)
{
	new idx = GetVIndex(sql);
	if(idx == -1)
		return false;
	if(Veh[idx][Link] == 0 || Veh[idx][Link] == INVALID_VEHICLE_ID)
		return false;
	return true;
}

stock bool:IsPlayerInRangeOfOwnedCar(playerid, range) // LONG NAME, Could have been done with using the above code, but this is for ease of use.
{
	new Float:x, Float:y, Float:z;

	new sql = GetNearestOwnedCarSQLID(playerid);

	if(sql == 0)
		return false;

	new idx = GetVIndex(sql);

	GetVehiclePos(Veh[idx][Link], x, y, z);

	if(IsPlayerInRangeOfPoint(playerid, range, x, y, z))
		return true;
	else
	return false;
}

forward bool:IsPlayerInRangeOfCar(playerid, range);
stock bool:IsPlayerInRangeOfCar(playerid, range)
{
	new Float:x, Float:y, Float:z;

	new sql = GetNearestCarSQL(playerid);

	if(sql == 0)
		return false;

	new idx = GetVIndex(sql);

	GetVehiclePos(Veh[idx][Link], x, y, z);

	if(IsPlayerInRangeOfPoint(playerid, range, x, y, z))
		return true;
	else
	return false;
}

/*public RefreshNewbieChatForPlayer(playerid)
{
	if(IsPlayerConnectedEx(playerid))
	{
		Player[playerid][CanUseNewbie] = 1;
	}
	return 1;
}*/

stock InitRadios()
{
	new string[128];
	for(new x = 0; x < MAX_RADIO_STATIONS; x++)
	{
		format(string, sizeof(string), "Radios/Radio_%d.ini", x);
		if(fexist(string))
		{
			RadioSettings[x][Available] = dini_Int(string, "Available");
			format(RadioSettings[x][StationName], 255, dini_Get(string, "StationName"));
			format(RadioSettings[x][URL], 255, dini_Get(string, "URL"));
			printf("[system] Radio %d loaded.", x);
		}
		else
		{
			dini_Create(string);
			dini_IntSet(string, "Available", 0);
			dini_Set(string, "StationName", "Unused");
			dini_Set(string, "URL", "Unused");
			printf("[system] Radio %d created.", x);
		}
		LoadedRadios++;
	}
}

stock InitBusinesses()
{
	if(dini_Int("Assets.ini", "ConvertedToMysql") == 0)
	{
		new FileName[128];
		for(new i = 1; i < MAX_BUSINESSES; i++)
		{
			format(FileName, sizeof(FileName), "Businesses/Business_%d.ini", i);
			if(fexist(FileName))
			{
				INI_ParseFile(FileName, "LoadBusiness", .bExtra = true, .extra = i, .bPassTag = true);

				Businesses[i][bSafePickup] = CreateDynamicPickup(1239, 23, Businesses[i][bSafeX], Businesses[i][bSafeY], Businesses[i][bSafeZ], 65000+i, Businesses[i][bInteriorID], -1, 150.0);
				Businesses[i][bPickupID] = CreateDynamicPickup(1239, 23, Businesses[i][bExteriorX], Businesses[i][bExteriorY], Businesses[i][bExteriorZ], 0, -1, -1, 150.0);
				Businesses[i][bInteractCP] = CreateDynamicPickup(1318, 1, Businesses[i][bInteractX], Businesses[i][bInteractY], Businesses[i][bInteractZ], 65000 + i, Businesses[i][bInteriorID]);

				Businesses[i][BusinessTrashCurrentPlayer] = INVALID_PLAYER_ID;

				Businesses[i][BusinessTrashBinObject] = CreateDynamicObject(910, Businesses[i][BusinessTrashPos][0], Businesses[i][BusinessTrashPos][1], Businesses[i][BusinessTrashPos][2], Businesses[i][BusinessTrashRot][0], Businesses[i][BusinessTrashRot][1], Businesses[i][BusinessTrashRot][2], -1, Businesses[i][bExteriorID]);
				OnBusinessTrashChange(i, 0, Businesses[i][BusinessTrashAmount]);

				printf("[system] Business %d spawned.", i);
				UpdateObjectLabel(i, LABEL_TYPE_BIZ, .create = 1);
				SpawnedBusinesses++;

				Businesses[i][ORM_ID] = orm_create("businesses");
				orm_setkey(Businesses[i][ORM_ID], "BusinessSQL");
				SetupBusinessORM(i);
				orm_insert(Businesses[i][ORM_ID]);
				InitGasStations();
			}
		}
	}
	else
		mysql_tquery(MYSQL_MAIN, "SELECT * FROM businesses", "OnBusinessesLoad", "");

	return 1;
}

forward OnBusinessesLoad();
public OnBusinessesLoad()
{
	new total_rows = cache_num_rows(), amount, Cache:bizCache = cache_save();
	for(new r; r < total_rows; r++)
	{
		Businesses[r + 1][ORM_ID] = orm_create("businesses");

		SetupBusinessORM(r + 1);
		orm_setkey(Businesses[r + 1][ORM_ID], "BusinessSQL");
		orm_apply_cache(Businesses[r + 1][ORM_ID], r);

		Businesses[r + 1][bSafePickup] = CreateDynamicPickup(1239, 23, Businesses[r + 1][bSafeX], Businesses[r + 1][bSafeY], Businesses[r + 1][bSafeZ], 65000+r + 1, Businesses[r + 1][bInteriorID], -1, 150.0);
		Businesses[r + 1][bPickupID] = CreateDynamicPickup(1239, 23, Businesses[r + 1][bExteriorX], Businesses[r + 1][bExteriorY], Businesses[r + 1][bExteriorZ], 0, -1, -1, 150.0);
		Businesses[r + 1][bInteractCP] = CreateDynamicPickup(1318, 1, Businesses[r + 1][bInteractX], Businesses[r + 1][bInteractY], Businesses[r + 1][bInteractZ], 65000 + r + 1, Businesses[r + 1][bInteriorID]);

		Businesses[r + 1][BusinessTrashCurrentPlayer] = INVALID_PLAYER_ID;

		Businesses[r + 1][BusinessTrashBinObject] = CreateDynamicObject(910, Businesses[r + 1][BusinessTrashPos][0], Businesses[r + 1][BusinessTrashPos][1], Businesses[r + 1][BusinessTrashPos][2], Businesses[r + 1][BusinessTrashRot][0], Businesses[r + 1][BusinessTrashRot][1], Businesses[r + 1][BusinessTrashRot][2], -1, Businesses[r + 1][bExteriorID]);
		OnBusinessTrashChange(r + 1, 0, Businesses[r + 1][BusinessTrashAmount]);

		new type;
		switch(Businesses[r + 1][bType])
		{
			case 1: type = 17;
			case 2: type = 45;
			case 3: type = 49;
			case 6: type = 55;
			case 10: type = 54;
			case 11: type = 23;
			case 12: type = 50;
			case 13: type = 9;
			case 14: type = 55;
			case 15: type = 48;
			case 16: type = 36;
			case 17: type = 22;
			case 18: type = 52;
			case 19: type = 31;
			case 23: type = 29;
			default: type = -1;
		}

		if(type != -1)
		{
			Businesses[r + 1][mapIcon] = CreateDynamicMapIcon(Businesses[r + 1][bExteriorX], Businesses[r + 1][bExteriorY], Businesses[r + 1][bExteriorZ], type, 0, .streamdistance = 150);
		}

		amount = floatround((Businesses[r + 1][bPrice] / 100000), floatround_round);
		Businesses[r + 1][bStorage] = amount * 20;
		
		//converting from old storage
		ConvertOldStorage(r + 1, CONTAINER_TYPE_BIZ);
		cache_set_active(bizCache);
			
		printf("[system] Business %d spawned.", r + 1);
		UpdateObjectLabel(r + 1, LABEL_TYPE_BIZ, .create = 1);
		SpawnedBusinesses++;
	}
	InitGasStations();
	return 1;
}

stock IsNumeric(string[])
{
	for (new i = 0, j = strlen(string); i < j; i++)
		if (string[i] > '9' || string[i] < '0')
			return 0;
	return 1;
}

public IsPlayerInInvalidNosVehicle(playerid)
{
	new carid = GetPlayerVehicleID(playerid);
	new carmodel = GetVehicleModel(carid);
	for (new i = 0; i < sizeof(UnmodifiableVehicles); i++)
	{
		if(carmodel == UnmodifiableVehicles[i]) return 1;
	}
	return 0;
}

stock IsAHelicopter(vehicleid)
{
	new model = GetVehicleModel(vehicleid);

	if(model == 548 || model == 511 || model == 553 || model == 519 || model == 469 || model == 447 || model == 563 || model == 497 || model == 488 || model == 487 || model == 417 || model == 425 || model == 548 || model == 577 || model == 573 || model == 592 /*|| model == 525*/ || model == 417 || model == 487 || model == 488 || model == 497 || model == 563 || model == 447 || model == 469)
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	new sql = GetVSQLID(vehicleid), idx = GetVIndex(sql);
	if(sql != 0 && strcmp(Veh[idx][Owner], "unowned", true))
	{
		Veh[idx][Color1] = color1;
		Veh[idx][Color2] = color2;
	}
	return 1;
}

stock IsVehicleConnected(vehicleid) //By Sacky (edited by Gabriel "Larcius" Cordes)
{
	new Float:x1,Float:y1,Float:z1;
	GetVehiclePos(vehicleid,x1,y1,z1);
	if(x1==0.0 && y1==0.0 && z1==0.0)
	{
		return 0;
	}
	return 1;
}

public Float:GetDistanceBetweenPoints(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2) //By Gabriel "Larcius" Cordes
{
	return floatadd(floatadd(floatsqroot(floatpower(floatsub(x1,x2),2)),floatsqroot(floatpower(floatsub(y1,y2),2))),floatsqroot(floatpower(floatsub(z1,z2),2)));
}

stock Float:GetDistanceToPoint(playerid,Float:x1,Float:y1,Float:z1) //By Gabriel "Larcius" Cordes
{
	if (IsPlayerConnected(playerid))
	{
		new Float:x2,Float:y2,Float:z2;
		GetPlayerPos(playerid,x2,y2,z2);
		return GetDistanceBetweenPoints(x1,y1,z1,x2,y2,z2);
	}
	return INF_FLOAT;
}

stock Float:GetDistanceToVehicle(playerid,vehicleid) //By Darkrealm (Edited by Sacky and Gabriel "Larcius" Cordes)
{
	if (IsPlayerConnected(playerid) && IsVehicleConnected(vehicleid))
	{
		new Float:x1,Float:y1,Float:z1;
		GetVehiclePos(vehicleid,x1,y1,z1);
		return GetDistanceToPoint(playerid,x1,y1,z1);
	}
	return INF_FLOAT;
}

CMD:togwarnings(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	switch(Player[playerid][OffDutyWarns])
	{
		case 1:
		{
			Player[playerid][OffDutyWarns] = 0;
			SendClientMessage(playerid, -1, "You will no longer recieve admin messages off-duty.");
		}
		default:
		{
			Player[playerid][OffDutyWarns] = 1;
			SendClientMessage(playerid, -1, "You will now recieve admin messages off-duty.");
		}
	}
	return 1;
}

public SendToAdmins(colour, string[], requireduty)
{
	foreach(Player, i)
	{
		if(Player[i][AdminLevel] >= 1)
		{
			if(requireduty == 1)
			{
				if((Player[i][AdminDuty] == 1 && Player[i][AFKStat] == 0) || (Player[i][AdminDuty] == 0 && Player[i][OffDutyWarns] == 1 && Player[i][AdminLevel] > 1))
				{
					SendClientMessage(i, colour, string);
				}
			}
			else if(requireduty == 0)
			{
				SendClientMessage(i, colour, string);
			}
		}
	}
	return 1;
}

stock RangeBan(playerid)
{
	new string[128];
	if(!IsPlayerConnected(playerid))  return 0;
	new total[32],ip[32];
	GetPlayerIp(playerid, ip, sizeof(ip));
	new cnt;
	for(new i=0;i<strlen(ip);i++)
	{
		if(ip[i] == '.') cnt++;
		if(cnt == 2)
		{
			i++;
			strdel(ip, i, strlen(ip));
			format(total,sizeof(total),"%s*.*",ip);
		}
	}
	format(string, sizeof(string),"banip %s",total);
	SendRconCommand(string);
	return 1;
}

stock GetClosestPlayer(playerid)
{
	new Float:cdist, targetid = -1;
	foreach(Player, i)
	{
		if (playerid != i && (targetid < 0 || cdist > GetDistanceBetweenPlayers(playerid, i)))
		{
			targetid = i;
			cdist = GetDistanceBetweenPlayers(playerid, i);
		}
	}
	return targetid;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}

stock GetRaceSkin(gender, race)
{
	new skin;
	switch(gender)
	{
		case 1:
		{
			switch(race)
			{
				case 0:
				{
					skin = 291;
				}
				case 1:
				{
					skin = 5;
				}
				case 2:
				{
					skin = 170;
				}
				case 3:
				{
					skin = 292;
				}
			}
		}
		case 2:
		{
			switch(race)
			{
				case 0:
				{
					skin = 191;
				}
				case 1:
				{
					skin = 190;
				}
				case 2:
				{
					skin = 169;
				}
				case 3:
				{
					skin = 298;
				}
			}
		}
	}
	return skin;
}

stock Reset(playerid)
{
	Player[playerid][pSQL_ID] = 0;
	Player[playerid][Collisions] = 0;
	DisableRemoteVehicleCollisions(playerid, 0);
	Player[playerid][PlayerParty] = 0;
	Player[playerid][PlayerPartyType] = 0;
	Player[playerid][PartyTotalMemberCount] = 0;
	Player[playerid][PartyPendingInvite] = INVALID_PLAYER_ID;
	Player[playerid][PartyMatsLoc] = -1;
	Player[playerid][InPlayerParty] = INVALID_PLAYER_ID;
	Player[playerid][PhoneN] = -1;
	Player[playerid][SleepCooldown] = 0;
	Player[playerid][CarJackerXP] = 0;
	Player[playerid][FishAgainAntiSpam] = 0;
	Player[playerid][TotalGunsMade] = 0;
	Player[playerid][TotalCarsDropped] = 0;
	Player[playerid][TotalGarbageRuns] = 0;
	Player[playerid][TotalTruckRuns] = 0;
	Player[playerid][TotalToolkitsBroken] = 0;
	Player[playerid][TotalFishingRodsBroken] = 0;
	Player[playerid][TotalDeaths] = 0;
	Player[playerid][TotalKrakensCaught] = 0;
	Player[playerid][TotalCarsFixed] = 0;
	Player[playerid][TotalMatRuns] = 0;
	Player[playerid][Materials][0] = 0;
	Player[playerid][Materials][1] = 0;
	Player[playerid][Materials][2] = 0;
	Player[playerid][MatRunning] = 0;
	Player[playerid][CompleteRun] = 0;
	Player[playerid][TotalMatRuns] = 0;
	Player[playerid][PizzaSlices] = 0;
	Player[playerid][GainedHalloweenPrize] = 0;
	Player[playerid][InHalloweenMaze] = 0;
	Player[playerid][GarbageCooldown] = 0;
	Player[playerid][JobCooldown] = 0;
	Player[playerid][Group] = 0;
	Player[playerid][GroupRank] = 0;
	Player[playerid][Gang] = 0;
	Player[playerid][InGangHQ] = 0;
	Player[playerid][GangRank] = 0;
	Player[playerid][OnTaxiCall] = -1;
	Player[playerid][CallingTaxi] = 0;
	Player[playerid][HungerEnabled] = 0;
	Player[playerid][IsSprinting] = 0;
	Player[playerid][HungerLevel] = 100;
	Player[playerid][HasBoombox] = 0;
	Player[playerid][HungerEffect] = 0;
	Player[playerid][HasBoombox] = 0;
	Player[playerid][HotelRoomID] = -1;
	Player[playerid][InHotelRoom] = -1;
	Player[playerid][InGarage] = -1;
	format(Player[playerid][Password], 255, "");
	Player[playerid][House2] = 0;
	Player[playerid][IsTabbed] = 0;
	Player[playerid][WantedLevel] = 0;
	Player[playerid][LicenseSuspended] = 0;
	Player[playerid][PotSeeds] = 0;
	Player[playerid][GrowLight] = 0;
	Player[playerid][AdminRadio] = 0;
	SetPVarInt(playerid, "seesSQLS", 1);
	Player[playerid][SpeedTimer] = 0;
	Player[playerid][Speed] = 0;
	Player[playerid][HideWeapons] = 1;
	Player[playerid][PickingBillboard] = 0;
	Player[playerid][PrisonReason] = 0;
	Player[playerid][ModStatus] = 0;
	Player[playerid][TotalEventKills] = 0;
	Player[playerid][VipRenew] = 0;
	Player[playerid][VipTime] = 0;
	Player[playerid][SystemAfkKicks] = 0;
	Player[playerid][AdminAfkKicks] = 0;
	Player[playerid][PotTimer] = 0;
	Player[playerid][CocaineTimer] = 0;
	Player[playerid][AdminFrozenHealth] = 0;
	Player[playerid][BeerCases] = 0;
	Player[playerid][BusinessKey] = 0;
	Player[playerid][VehicleRadio] = 0;
	SetPlayerTeam(playerid, NO_TEAM);
	Player[playerid][Bomb] = 0;
	Player[playerid][TruckerTestCooldown] = 0;
	Player[playerid][TruckLicense] = 0;
	Player[playerid][IsAtEvent] = 0;
	Player[playerid][eventKills] = 0;
	Player[playerid][eventTeam] = 0;
	Player[playerid][InDerby] = 0;
	Player[playerid][FishPos][0] = 0.00;
	Player[playerid][FishPos][1] = 0.00;
	Player[playerid][FishPos][2] = 0.00;
	Player[playerid][OffDutyWarns] = 1;
	Player[playerid][TruckStage] = 0;
	Player[playerid][TruckSupplies] = 0;
	Player[playerid][TruckLoadTimer] = Timer:-1;
	Player[playerid][TruckUnloadTimer] = Timer:-1;
	Player[playerid][TruckDelivery] = 0;
	Player[playerid][SuppliesDelivered] = 0;
	Player[playerid][SuppliesLoaded] = 0;
	Player[playerid][TruckBiz] = 0;
	Player[playerid][TruckSQLID] = 0;
	Player[playerid][HouseKey] = 0;
	Player[playerid][PendingPrice] = 0;
	format(Player[playerid][PendingContract], 255, "Nobody");
	format(Player[playerid][PendingReason], 255, "Nothing");
	format(Player[playerid][PendingReason2], 255, "Nothing");
	Player[playerid][EnterKey] = 2;
	Player[playerid][Deliveries] = 0;
	Player[playerid][EditDMVTest] = -1;
	Player[playerid][DoingDMVTest] = 0;
	Player[playerid][DrivingTestCP] = 0;
	Player[playerid][EditTruckerTest] = -1;
	Player[playerid][DoingTruckerTest] = 0;
	Player[playerid][TruckingTestCP] = 0;
	Player[playerid][Supplies] = 0;
	Player[playerid][OnPayphone] = 0;
	Player[playerid][CallingPayphone] = 0;
	Player[playerid][CallConnecting] = 0;
	Player[playerid][ReqChipCount] = -1;
	Player[playerid][CasinoChips] = 0;
	Player[playerid][PlayingSlots] = 0;
	Player[playerid][CantDeliverPizza] = 0;
	Player[playerid][MapTP] = 0;
	Player[playerid][PizzaPay] = 0;
	Player[playerid][PizzaRun] = 0;
	Player[playerid][PizzaDist] = 0;
	Player[playerid][PizzaCooldown] = 0;
	Player[playerid][PizzaCP] = 0;
	Player[playerid][PizzaDelivers] = 0;
	Player[playerid][EMSAccepted] = -1;
	Player[playerid][MyMedic] = -1;
	Player[playerid][MDuty] = 0;
	Player[playerid][EMSCalled] = 0;
	Player[playerid][currentVehInteriorVW] = 0;
	Player[playerid][currentVehInteriorType] = 0;
	Player[playerid][TaxiCar] = 0;
	Player[playerid][Dice] = 0;
	Player[playerid][TaxiDuty] = 0;
	Player[playerid][House] = 0;
	Player[playerid][Harvesting] = 0;
	Player[playerid][InRally] = 0;
	Player[playerid][Gagged] = 0;
	Player[playerid][Gender] = 0;
	Player[playerid][SpeedHacksWarn] = 0;
	Player[playerid][CarBeingCarried] = 0;
	//Player[playerid][ReportBanStatus] = 0;
	Player[playerid][reportBan][0] = 0;
	Player[playerid][reportBan][1] = 0;
	//Player[playerid][AskBanStatus] = 0;
	Player[playerid][askBan][0] = 0;
	Player[playerid][askBan][1] = 0;
	Player[playerid][CarPriceBeingCarried] = 0;
	Player[playerid][Authenticated] = 0;
	Player[playerid][PendingBETAInvite] = 0;
	Player[playerid][ServerTut] = 0;
	Player[playerid][CheckBalance] = 0;
	Player[playerid][GangPayment] = 0;
	Player[playerid][TearGasEffect] = 0;
	Player[playerid][IsInAnimation] = 0;
	Player[playerid][InterviewPowers] = 0;
	Player[playerid][SniperRecoilEffect] = 0;
	Player[playerid][AttendingBackupCall] = -1;
	Player[playerid][nMuted] = 0;
	Player[playerid][nMutedLevel] = 0;
	Player[playerid][nMutedTime] = 0;
	Player[playerid][vMuted] = 0;
	Player[playerid][vMutedLevel] = 0;
	Player[playerid][vMutedTime] = 0;
	Player[playerid][RPTutStep] = 0;
	Player[playerid][AdminSkin] = 0;
	Player[playerid][ActiveReport] = 0;
	Player[playerid][VipTokens] = 0;
	Player[playerid][ReportingPlayer] = -1;
	Player[playerid][SpeedHackWarnTime] = 0;
	Player[playerid][IsHacker] = 0;
	Player[playerid][AnticheatWarns] = 0;
	Player[playerid][ACWarnTime] = 0;
	Player[playerid][BeingSpyedOnBy] = -1;
	Player[playerid][Cuffed] = 0;
	Player[playerid][WeaponRefund] = 0;
	Player[playerid][Tazed] = 0;
	Player[playerid][HasJetpack] = 0;
	format(Player[playerid][Note], 128, "Nothing");
	Player[playerid][RemoteWarn] = 0;
	//Player[playerid][GuardOffer] = -1;
	Player[playerid][Accent] = 0;
	Player[playerid][RequestingBackup] = 0;
	Player[playerid][PreLoadedAnims] = 0;
	Player[playerid][Rope] = 0;
	GetPlayerName(playerid, Player[playerid][NormalName], 255);
	format(Player[playerid][AdminName], 255, "Nothing");
	Player[playerid][BeingDraggedBy] = -1;
	Player[playerid][FindingHouse] = 0;
	Player[playerid][PendingProposal] = -1;
	Player[playerid][SupplyT] = 0;
	Player[playerid][OnPhoneTime] = 0;
	Player[playerid][PINAuth] = 0;
	Player[playerid][ToggedTester] = 0;
	Player[playerid][Blindfolded] = 0;
	Player[playerid][LastKiller] = -1;
	Player[playerid][Job] = 0;
	Player[playerid][Job2] = 0;
	Player[playerid][AFKStat] = 0;
	Player[playerid][AFKKicked] = 0;
	Player[playerid][AdminPIN] = 0;
	Player[playerid][GivingSlot] = 0;
	Player[playerid][BankStatus] = 0;
	Player[playerid][PendingDivorce] = -1;
	Player[playerid][FightBox] = 0;
	Player[playerid][WalkieFrequency] = 0;
	Player[playerid][WalkieTalkie] = 0;
	Player[playerid][VipRank] = 0;
	Player[playerid][FightKungfu] = 0;
	Player[playerid][FightKneehead] = 0;
	Player[playerid][FightGrabkick] = 0;
	Player[playerid][FightElbow] = 0;
	Player[playerid][HasRadio] = 0;
	Player[playerid][PersonalRadio] = 0;
	Player[playerid][ResetTimer] = 0;
	Player[playerid][CollegeMedia] = 0;
	Player[playerid][CollegeLaw] = 0;
	Player[playerid][CollegeEng] = 0;
	format(Player[playerid][MarriedTo], 255, "Nobody");
	Player[playerid][CollegeMath] = 0;
	Player[playerid][CollegeChem] = 0;
	Player[playerid][ArmsDealerXP] = 0;
	Player[playerid][SpotlightEffect] = 0;
	Player[playerid][Rags] = 0;
	Player[playerid][Tied] = 0;
	Player[playerid][SuccessfulHits] = 0;
	Player[playerid][ToggledRadio] = 0;
	Player[playerid][FailedHits] = 0;
	Player[playerid][TiedTime] = 0;
	//Player[playerid][GuardPrice] = 0;
	Player[playerid][AdminDuty] = 0;
	//Player[playerid][Guarding] = -1;
	Player[playerid][Detecting] = 0;
	Player[playerid][MedicDuty] = 0;
	Player[playerid][DetectiveCooldown] = 0;
	Player[playerid][TrackCooldown] = 0;
	Player[playerid][Tazed] = 0;
	Player[playerid][Map] = 0;
	Player[playerid][CarModDelay] = 0;
	Player[playerid][HasSprayCans] = 0;
	Player[playerid][FindingCar] = 0;
	Player[playerid][TicketPrice] = 0;
	Player[playerid][Ticketing] = -1;
	Player[playerid][BeingTicketed] = -1;
	Player[playerid][NineOneOneStep] = 0;
	Player[playerid][AttemptingToHeal] = -1;
	Player[playerid][AdminLevel] = 0;
	Player[playerid][HasVoted] = 0;
	Player[playerid][Calling] = -1;
	Player[playerid][LastX] = 0.00;
	Player[playerid][InBusiness] = 0;
	Player[playerid][CellphoneConsole] = -1;
	Player[playerid][InHouse] = 0;
	Player[playerid][InGroupHQ] = 0;
	Player[playerid][InabilityToMatrun] = 0;
	Player[playerid][InabilityToDropCar] = 0;
	Player[playerid][HospitalTime] = 0;
	Player[playerid][MatrunInabilityDuration] = 0;
	Player[playerid][PlayingHours] = 0;
	Player[playerid][CompleteRun] = 0;
	Player[playerid][LoginAttempts] = 0;
	Player[playerid][LastY] = 0.00;
	Player[playerid][CanUseNewbie] = 1;
	Player[playerid][CanMute] = 0;
	Player[playerid][Business] = 0;
	Player[playerid][AdminActions] = 0;
	Player[playerid][BankMoney] = 0;
	Player[playerid][Materials][0] = 0;
	Player[playerid][Materials][1] = 0;
	Player[playerid][Materials][2] = 0;
	Player[playerid][MaterialPackages] = 0;
	Player[playerid][Checkpoint] = 0;
	Player[playerid][AdminDuty] = 0;
	Player[playerid][Gender] = 0;
	Player[playerid][PrisonID] = 0;
	Player[playerid][PrisonDuration] = 0;
	Player[playerid][PrisonQuestionTimer] = 0;
	Player[playerid][PrisonQuestionAnswering] = 0;
	Player[playerid][PrisonQuestionAnswerTime] = 0;
	Player[playerid][Tutorial] = 0;
	Player[playerid][Muted] = 0;
	Player[playerid][PendingInvite] = 0;
	Player[playerid][KnifeCount] = 0;
	Spectator[playerid][SpecSpectatingPlayer] = -1;
	Spectator[playerid][SpecSpectatingVehicle] = -1;
	Player[playerid][ContractPrice] = 0;
	format(Player[playerid][Contract], 255, "None");
	format(Player[playerid][Contract2], 255, "None");
	Player[playerid][BaseballBatCount] = 0;
	Player[playerid][LastZ] = 0.00;
	Player[playerid][LastWorld] = 0;
	Player[playerid][ModShop] = 0;
	Player[playerid][SpamCount] = 0;
	Player[playerid][LastInterior] = 0;
	Player[playerid][Banned] = 0;
	Player[playerid][Money] = 0;
	UnconfirmedSave[playerid] = 0;
	ResetPlayerWeaponsEx(playerid);
	//Player[playerid][LastSkin] = 299;
	//Player[playerid][LastSkin] = 0;
	ResetSkin(playerid);
	Player[playerid][LastHealth] = 100.00;
	Player[playerid][LastArmour] = 0.00;
	format(Player[playerid][Warning1], 255, "None");
	format(Player[playerid][Warning2], 255, "None");
	format(Player[playerid][Warning3], 255, "None");
	format(Player[playerid][AdminName], 255, "None");
	Player[playerid][Identity] = 0;
	Player[playerid][BeingAssasinated] = -1;
	Player[playerid][PlayerToAssasinate] = -1;
	Player[playerid][AssigningHitTo] = -1;
	Player[playerid][Age] = 0;
	Player[playerid][CriminalOffences] = 0;
	GetPlayerIp(playerid, Player[playerid][LastIP], 32);
	//ClearCriminalRecord(playerid);
	Player[playerid][Calling] = -1;
	Player[playerid][BeingCalled] = -1;
	Player[playerid][Tester] = 0;
	Player[playerid][Cocaine] = 0;
	Player[playerid][Pot] = 0;
	Player[playerid][CallConnectingTime] = -1;
	Player[playerid][FightStyle] = FIGHT_STYLE_NORMAL;
	Player[playerid][PDBadge] = 0;
	Player[playerid][HandTazer] = 0;
	Player[playerid][GunTazer] = 0;
	Player[playerid][CanTaze] = 0;
	Player[playerid][PDBadge] = 0;
	Player[playerid][CopDuty] = 0;
	Player[playerid][AdminFrozen] = 0;
	Player[playerid][CanMakeGun] = 1;
	Player[playerid][CanDeliver] = 1;
	Player[playerid][DeliverTime] = 0;
	format(Player[playerid][BannedReason], 128, "None");
	format(Player[playerid][BannedBy], 128, "None");
	Player[playerid][TempbanLevel] = 0;
	Player[playerid][TempbanTime] = 0;
	Player[playerid][MatRunning] = 0;
	Player[playerid][TempKey] = 0;
	Player[playerid][GasCans] = 0;
	Player[playerid][GasFull] = 0;
	Player[playerid][UnderCover] = 0;
	Player[playerid][Developer] = 0;
	format(Player[playerid][nTag], 32, "");
	Player[playerid][SecondsLoggedIn] = 0;
	Player[playerid][Dice] = 0;
	format(Player[playerid][Walk], 32, "");
	VehicleEdit[playerid][SQLID] = 0;
	Player[playerid][VIPPass] = 0;
	Player[playerid][VIPPassTime] = 0;
	Player[playerid][HealthInsurance] = 0;
	Player[playerid][HealthInsuranceTime] = 0;
	Player[playerid][GarbageStep] = 0;
	Player[playerid][GarbageFreeze] = 0;
	Player[playerid][GarbagePay] = 0;
	Player[playerid][LoadingTrash] = 0;
	Player[playerid][IsTabbed] = 0;
	Player[playerid][SkillCooldown] = 0;
	Player[playerid][MyMedic] = INVALID_PLAYER_ID;
	Player[playerid][NosBottle] = 0;
	Player[playerid][HydroKit] = 0;
	Player[playerid][EngineParts] = 0;
	Player[playerid][pFireworks] = 0;
	Player[playerid][PrisonTickets] = 0;
	Player[playerid][Cigarettes] = 0;
	Player[playerid][PrisonDice] = 0;
	Player[playerid][PrisonLitter] = 0;
	Player[playerid][PrisonLighter] = 0;
	Player[playerid][SirenKit] = 0;
	Player[playerid][LoyaltyPoints] = 0;
	Player[playerid][LoyaltyStreak] = 0;
	Player[playerid][LoyaltyDailyStreak] = 0;
	Player[playerid][LoyaltyPendingVip] = 0;
	Player[playerid][LoyaltyPendingVipHours] = 0;
	Player[playerid][LoyaltyVipRank] = 0;
	Player[playerid][LoyaltyVipHoursLeft] = 0;
	Player[playerid][LoyaltyPaycheckBoost] = 0;
	Player[playerid][LoyaltyPaycheckBoostTimeLeft] = 0;
	Player[playerid][LastLoyaltyDay] = 0;
	Player[playerid][LastLoyaltyMonth] = 0;
	Player[playerid][LastLoyaltyYear] = 0;
	Player[playerid][LoyaltyDailyStreakDay] = 0;
	format(Player[playerid][FakeIDString], 256, "");
	format(Player[playerid][FakeLicense], 256, "");
	format(Player[playerid][Note1], 256, "");
	format(Player[playerid][Note2], 256, "");
	format(Player[playerid][Note3], 256, "");
	Player[playerid][Notepad] = 0;
	Player[playerid][Headphones] = 0;
	Player[playerid][Loan] = 0;
	Player[playerid][LoanNotPaid] = 0;
	Player[playerid][LoanTime] = 0;
	Player[playerid][CannotLoanTime] = 0;
	Player[playerid][TruckPenalty] = 0;
	Player[playerid][Tent] = 0;
	Player[playerid][TentBan] = 0;
	Player[playerid][InterComSys] = 0;
	Player[playerid][HasArmour] = 0;
	Player[playerid][CannotArmour] = 0;
	Player[playerid][EditedWeapon][0] = 0;
	Player[playerid][EditedWeapon][1] = 0;
	Player[playerid][EditedWeapon][2] = 0;
	Player[playerid][CannotBail] = 0;
	Player[playerid][ToyCount] = 0;
	Player[playerid][Ventillation] = 0;
	//Plague related
	Player[playerid][WearingGasMask] = 0;
	Player[playerid][HasGasMask] = 0;
	Player[playerid][Infected] = 0;
	Player[playerid][VirusCount] = 0;
	
	//Fishing related
	Player[playerid][FishAttempts] = 0;
	Player[playerid][CantFish] = 0;
	Player[playerid][CollectedFish] = 0;
	Player[playerid][TotalFished] = 0;
	Player[playerid][FishingRod] = 0;
	Player[playerid][FishingBait] = 0;
	Player[playerid][TotalBass] = 0;
	Player[playerid][TotalCod] = 0;
	Player[playerid][TotalSalmon] = 0;
	Player[playerid][TotalMackerel] = 0;
	Player[playerid][TotalTuna] = 0;
	Player[playerid][TotalCarp] = 0;
	Player[playerid][TotalHerring] = 0;
	Player[playerid][TotalMarlin] = 0;
	Player[playerid][TotalMako] = 0;
	Player[playerid][TotalCrab] = 0;
	Player[playerid][TotalKraken] = 0;

	Player[playerid][InterComSys] = 0;
  	Player[playerid][Workbench] = 0;
	Player[playerid][Toolkit] = 0;

	Player[playerid][GunLicense] = 0;
	
	Player[playerid][FavoriteStationSet] = 0;
	Player[playerid][FavoriteStation] = 0;

	Player[playerid][Race] = 0;
	Player[playerid][Tickets] = 0;
	Player[playerid][CarLicense] = 0;
	Player[playerid][YiniStatus] = 0;

	Player[playerid][TotalSSDeposits] = 0;
	Player[playerid][LastDepositHours] = 0;
	Player[playerid][LastRedeemHours] = 0;
	Player[playerid][LastDeathReason] = 0;
	
	Player[playerid][PhoneGPS] = 0;

	Player[playerid][PlayerSkinSlot1] = GetRaceSkin(Player[playerid][Gender], Player[playerid][Race]);
	Player[playerid][PlayerSkinSlot2] = GetRaceSkin(Player[playerid][Gender], Player[playerid][Race]);
	Player[playerid][PlayerSkinSlot3] = GetRaceSkin(Player[playerid][Gender], Player[playerid][Race]);

	format(Player[playerid][HeadDesc], 255, "Nothing");
	format(Player[playerid][BodyDesc], 255, "Nothing");
	format(Player[playerid][ClothingDesc], 255, "Nothing");
	format(Player[playerid][AccessoryDesc], 255, "Nothing");

	format(Player[playerid][AdminNote1], 128, "None");
	format(Player[playerid][AdminNote2], 128, "None");
	format(Player[playerid][AdminNote3], 128, "None");

	Player[playerid][Refilling] = 0;
	Player[playerid][IsSleeping] = 0;

	DeletePVar(playerid, "caseTemp");
	DeletePVar(playerid, "fishTemp");
	DeletePVar(playerid, "pizzaTemp");
	DeletePVar(playerid, "deliverTemp");
	DeletePVar(playerid, "garbageTemp");
	DeletePVar(playerid, "jobTemp");

	Player[playerid][RallyCP] = 0;
	Player[playerid][CreatingRally] = -1;
	Player[playerid][RallyEditCP] = 0;
	for(new i; i < MAX_RALLY_CHECKPOINTS; i++)
	{
		EditRallyCourse[playerid][xPos][i] = 0.00;
		EditRallyCourse[playerid][yPos][i] = 0.00;
		EditRallyCourse[playerid][zPos][i] = 0.00;
	}

	for(new i; i < 20; i++)
	{
		DeleteToySlot(playerid, i);
	}

	for(new i; i < 10; i++)
	{
		Player[playerid][MaskShowTag][i] = -1;
	}
	
	EditEvent[playerid][EventType] = 0;
	EditEvent[playerid][Skin] = 287;
	EditEvent[playerid][EventHp] = 100;
	EditEvent[playerid][EventArm] = 100;
	EditEvent[playerid][Vip] = 0;
	EditEvent[playerid][Weapon1] = 24;
	EditEvent[playerid][Weapon2] = 31;
	EditEvent[playerid][Weapon3] = 29;
	EditEvent[playerid][Weapon4] = 27;
	EditEvent[playerid][Weapon5] = 34;
	EditEvent[playerid][derbyVehicle] = 400;
	EditEvent[playerid][ScoreLimit] = 25;
	EditEvent[playerid][NoLagShoot] = 0;

	for(new i; i < MAX_TEST_CHECKPOINTS; i++)
	{
		EditDrivingTest[playerid][i][0] = 0.00;
		EditDrivingTest[playerid][i][1] = 0.00;
		EditDrivingTest[playerid][i][2] = 0.00;
		EditTruckingTest[playerid][i][0] = 0.00;
		EditTruckingTest[playerid][i][1] = 0.00;
		EditTruckingTest[playerid][i][2] = 0.00;
	}

	for(new i; i < MAX_PLAYERS; i++)
	{
		BlockedPM[playerid][i] = false;
		BlockedPM[i][playerid] = false;
	}

	for(new i; i < MAX_REQUESTS; i++)
	{
		if(mRequest[i][Requester] == playerid)
		{
			ResetRequest(i);
		}
	}

	for(new i; i < MAX_PLAYERS; i++) //Just incase..
	{
		CarRamsTimer[playerid][i] = 0;
		CarRams[playerid][i] = 0;
	}

	for(new i; i < MAX_GROUP_VEHICLES; i++)
	{
		tGroupVID[playerid][i] = 0;
	}

	for(new i; i < MAX_GROUP_VEHICLES; i++)
	{
		tGangVID[playerid][i] = 0;
	}

	for(new i; i < 5; i++)
	{
		Player[playerid][SpareKeys][i] = -1;
	}

	for(new i; i < 5; i++)
	{
		Player[playerid][Cars][i] = 0;
	}

	for(new i; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
	{
		Player[playerid][HolsteredWeapon][i] = 0;
	}

	for(new i; i < MAX_PIZZA_POINTS; i++)
	{
		DestroyDynamic3DTextLabel(Player[playerid][PizzaPointLabel][i]);
	}
	SetPVarInt(playerid, "ShowPizzaPoints", 1);

	new res[128];
	format(res, sizeof(res), "~n~~n~~n~~l~Chips: %s~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~", IntToFormattedStr(Player[playerid][CasinoChips]));
	SlotsTD[playerid] = CreatePlayerTextDraw(playerid, 555.0, 140.0, res);
	PlayerTextDrawAlignment(playerid, SlotsTD[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, SlotsTD[playerid], 255);
	PlayerTextDrawFont(playerid, SlotsTD[playerid], 2);
	PlayerTextDrawLetterSize(playerid, SlotsTD[playerid], 0.7, 1.4);
	PlayerTextDrawColor(playerid, SlotsTD[playerid], GREEN);
	PlayerTextDrawBoxColor(playerid, SlotsTD[playerid], 0x2CEB1344);
	PlayerTextDrawSetProportional(playerid, SlotsTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, SlotsTD[playerid], 1);
	PlayerTextDrawUseBox(playerid, SlotsTD[playerid], 1);
	PlayerTextDrawTextSize(playerid, SlotsTD[playerid], 510.0, 120.0);

	new pizzatimer[20];
	format(pizzatimer, sizeof(pizzatimer), "Pizza timer~n~%d:%d", (Player[playerid][PizzaCooldown]-gettime()) / 60, (Player[playerid][PizzaCooldown]-gettime()) % 60);
	Player[playerid][PizzaTimer] = CreatePlayerTextDraw(playerid, 590.0, 10.0, pizzatimer);
	PlayerTextDrawAlignment(playerid, Player[playerid][PizzaTimer], 2);
	PlayerTextDrawBackgroundColor(playerid, Player[playerid][PizzaTimer], 255);
	PlayerTextDrawFont(playerid, Player[playerid][PizzaTimer], 1);
	PlayerTextDrawLetterSize(playerid, Player[playerid][PizzaTimer], 0.5, 1.0);
	PlayerTextDrawColor(playerid, Player[playerid][PizzaTimer], -1);
	PlayerTextDrawSetOutline(playerid, Player[playerid][PizzaTimer], 0);
	PlayerTextDrawSetProportional(playerid, Player[playerid][PizzaTimer], 1);
	PlayerTextDrawSetShadow(playerid, Player[playerid][PizzaTimer], 1);
	PlayerTextDrawUseBox(playerid, Player[playerid][PizzaTimer], 0);
	PlayerTextDrawTextSize(playerid, Player[playerid][PizzaTimer], 70.000000, 140.000000);

	// Exit

	ExitTextdraw[playerid] = CreatePlayerTextDraw(playerid, 610.0, 400.0, "");
	PlayerTextDrawUseBox(playerid, ExitTextdraw[playerid], 0);
	PlayerTextDrawFont(playerid, ExitTextdraw[playerid], 2);
	PlayerTextDrawSetShadow(playerid, ExitTextdraw[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ExitTextdraw[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, ExitTextdraw[playerid], 0x000000FF);
	PlayerTextDrawColor(playerid, ExitTextdraw[playerid], 0xFFFFFFFF);
	PlayerTextDrawAlignment(playerid, ExitTextdraw[playerid], 3);
	return 1;
}

stock GetDistanceBetweenPlayers(playerid, playerid2)
{
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	new Float:dis;
	GetPlayerPos(playerid,x1,y1,z1);
	GetPlayerPos(playerid2,x2,y2,z2);
	dis = floatsqroot((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1)+(z2-z1)*(z2-z1));
	return floatround(dis);
}

stock IsPrivateSkin(skin)
{
	#define	MAX_PRIVATE_SKINS   16
	new privateSkins[MAX_PRIVATE_SKINS] =
	{
		//255, 299,
		178, 244, 246, 256, 257,
	};

	for (new i = 0; i < MAX_PRIVATE_SKINS; i++)
	{
		if (skin == privateSkins[i] || skin < 0 || skin >= MAX_SKINS) return true;
	}

	return false;
}

stock ResetSkin(playerid)
{
	switch(Player[playerid][Gender])
	{
		case 1:
		{
			switch(Player[playerid][Race])
			{
				case 0:
				{
					Player[playerid][LastSkin] = 291;
					SetPlayerSkin(playerid, 291);
				}
				case 1:
				{
					Player[playerid][LastSkin] = 4;
					SetPlayerSkin(playerid, 4);
				}
				case 2:
				{
					Player[playerid][LastSkin] = 170;
					SetPlayerSkin(playerid, 170);
				}
				case 3:
				{
					Player[playerid][LastSkin] = 292;
					SetPlayerSkin(playerid, 292);
				}
			}
		}
		case 2:
		{
			switch(Player[playerid][Race])
			{
				case 0:
				{
					Player[playerid][LastSkin] = 191;
					SetPlayerSkin(playerid, 191);
				}
				case 1:
				{
					Player[playerid][LastSkin] = 190;
					SetPlayerSkin(playerid, 190);
				}
				case 2:
				{
					Player[playerid][LastSkin] = 169;
					SetPlayerSkin(playerid, 169);
				}
				case 3:
				{
					Player[playerid][LastSkin] = 298;
					SetPlayerSkin(playerid, 298);
				}
			}
		}
	}

	return 1;
}

stock IsValidWhiteSkin(skin)
{
	new skinids[] =
	{
		1, 2, 3, 12, 23, 26, 27, 29, 31, 32, 33, 34, 35,
		36, 37, 38, 39, 41, 42, 45, 46, 50, 52,
		55, 56, 61, 62, 68, 70, 72, 73, 75, 77, 78,
		81, 82, 85, 87, 88, 89, 90, 91, 92, 93,
		94, 95, 96, 97, 98, 99, 100, 101, 111, 112,
		112, 113, 119, 124, 125, 126, 127, 128, 129, 130, 131,
		132, 133, 135, 137, 138, 140, 145, 146, 147,
		150, 151, 152, 153, 154, 155, 157, 158, 159,
		160, 161, 162, 164, 165, 167, 171, 172, 177,
		178, 179, 181, 188, 189, 198, 191, 192, 193, 194,
		196, 197, 198, 199, 200, 201, 202, 204, 205,
		206, 209, 211, 212, 213, 217, 223, 230, 231, 232, 233, 234, 235,
		236, 237, 239, 240, 246, 247, 248, 250, 251,
		252, 254, 255, 257, 258, 259, 261, 264, 268,
		272, 289, 290, 291, 295, 299, 265, 266,
		267, 274, 275, 276, 277, 278, 289, 280, 281,
		282, 283, 284, 285, 286, 287, 288, 289, 300, 301, 302, 303, 304, 305,
		306, 308, 309, 310, 311
	};

	for(new i; i < sizeof(skinids); i++)
	{
		if(skin == skinids[i])
			return 1;
	}
	return 0;
}

stock IsValidBlackSkin(skin)
{
	new skinids[] =
	{
		4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15,
		16, 17, 18, 19, 20, 21, 22, 24, 25, 28,
		40, 51, 63, 64, 65, 66, 67, 69, 76, 79,
		80, 83, 86, 102, 103, 104, 105, 106, 107,
		//134, 136, 139, 142, 143, 144, 148, 149, 156,
		134, 136, 139, 142, 143, 144, 148, 149, 156,
		163, 166, 168, 176, 178, 180, 182, 183, 185, 190,
		195, 207, 215, 218, 219, 220, 221, 222, 238,
		//243, 244, 245, 249, 253, 256, 260, 262, 269,
		243, 244, 245, 249, 253, 256, 260, 262, 269, 270, 271,
		//270, 271, 293, 296, 297, 265, 266, 267,
		293, 296, 297, 265, 266, 267,
		274, 275, 276, 277, 278, 280, 281, 282,
		283, 284, 285, 286, 287, 288, 307
	};

	for(new i; i < sizeof(skinids); i++)
	{
		if(skin == skinids[i])
			return 1;
	}
	return 0;
}

stock IsValidAsianSkin(skin)
{
	new skinids[] =
	{
		49, 56, 57, 58, 59, 60, 117, 118, 120, 121, 122, 123,
		141, 169, 170, 186, 187, 203, 208, 210, 213,
		214, 216, 224, 225, 226, 227, 228, 229, 263, 294,
		265, 266, 267, 274, 275, 276, 277, 278, 289, 280,
		281, 282, 283, 284, 285, 286, 287, 288
	};

	for(new i; i < sizeof(skinids); i++)
	{
		if(skin == skinids[i])
			return 1;
	}
	return 0;
}

stock IsValidHispanicSkin(skin)
{
	new skinids[] =
	{
		8, 12, 30, 43, 44, 46, 47, 48, 53, 54, 98, 108, 109,
		110, 114, 115, 116, 173, 174, 175, 184, 223, 241, 242,
		273, 292, 298, 211, 265, 266, 267, 274, 275, 276, 277,
		278, 289, 280, 281, 282, 283, 284, 285, 286, 287, 288
	};

	for(new i; i < sizeof(skinids); i++)
	{
		if(skin == skinids[i])
			return 1;
	}
	return 0;
}

stock IsFemaleSkin(skin)
{
	new skinids[] =
	{
		12, 13, 31, 39, 40, 41, 53, 54, 55, 56, 75, 77,
		85, 87, 88, 89, 90, 91, 92, 93, 129, 130, 131,
		138, 140, 145, 150, 151, 152, 157, 172, 191,
		192, 193, 194, 196, 197, 198, 199, 201, 205, 231,
		232, 233, 237, 246, 251, 257, 298, 56, 141, 169,
		211, 214, 216, 224, 225, 226, 9, 10, 11, 13, 63,
		64, 65, 69, 76, 139, 148, 190, 195, 207, 215, 218,
		219, 238, 243, 244, 245, 256, 306, 307, 308, 309
	};

	for(new i; i < sizeof(skinids); i++)
	{
		if(skin == skinids[i])
			return 1;
	}
	return 0;
}

stock GetPlayersIP(playerid)
{
	new ip[22];
	GetPlayerIp(playerid, ip, sizeof(ip));
	return ip;
}

GetNameEx(playerid)
{
	new Name[MAX_PLAYER_NAME];
	if(IsPlayerConnected(playerid))
	{
		if(Player[playerid][Mask] == 1)
 			format(Name, sizeof(Name), "Mask %d", Player[playerid][MaskID]);
 		else
 		{
 			new i;
 			GetPlayerName(playerid, Name, MAX_PLAYER_NAME);
 			while ((i = strfind(Name, "_", false, i)) != -1)
				Name[i] = ' ';
		}
	}
	else
	Name = "Disconnected/Nothing";
	return Name;
}

GetNormalNameEx(playerid)
{
	new name[MAX_PLAYER_NAME];
	if(IsPlayerConnected(playerid))
	{
		new i;
		format(name, sizeof(name), "%s", Player[playerid][NormalName]);
		while ((i = strfind(name, "_", false, i)) != -1)
			name[i] = ' ';
	}
	else
		name = "Disconnected/Nothing";
	return name;
}
/*public PrisonGateTimer()
{
	MoveDynamicObject(PrisonGate, 1788.4801025391, -1600.1746826172, 15.320266723633, 1);
	PrisonGateOpen = 0;
	return 1;
}*/


/*public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
	if(GetPlayerAnimationIndex(playerid) == 748 && Groups[Player[playerid][Group]][CommandTypes] == 2)
	{
		SetPlayerSpecialAction(damagedid, 0);
		StopLoopingAnimation(damagedid);
		ClearAnimations(damagedid, 1);
		TogglePlayerControllable(damagedid, true);
		Player[damagedid][Cuffed] = 0;
		Player[damagedid][Tazed] = 0;
		Player[damagedid][Tied] = 0;
	}
	return 1;
}*/

public OnPlayerDamage(&playerid, &Float:amount, &issuerid, &weapon, &bodypart)
{

	if(GetPVarInt(playerid, "Rappelling") && issuerid == INVALID_PLAYER_ID)
	{
		DeletePVar(playerid, "Rappelling");
		return 0;
	}
	
	if(issuerid == INVALID_PLAYER_ID)
		return 1;
	
	if(Player[playerid][CannotArmour] < gettime())
		Player[playerid][CannotArmour] = gettime() + 30;
		
	if(GetPlayerAnimationIndex(issuerid) == 748 && Groups[Player[issuerid][Group]][CommandTypes] == 2)
	{
		SetPlayerSpecialAction(playerid, 0);
		StopLoopingAnimation(playerid);
		ClearAnimations(playerid, 1);
		TogglePlayerControllable(playerid, true);
		Player[playerid][Cuffed] = 0;
		Player[playerid][Tazed] = 0;
		Player[playerid][Tied] = 0;
	}
	
	if(GetPVarInt(issuerid, "JASON_MODE") == 1 && weapon == WEAPON_CHAINSAW)
	{
		if(GetPVarInt(playerid, "HIT_BY_JASON") == 0)
		{
			new Float:armour;
			GetPlayerArmour(playerid, armour);
			if(armour > 0)
				SetPVarFloat(playerid, "JASON_ARMOUR", armour);
			
			SetPlayerArmour(playerid, 0);
			SetPlayerHealth(playerid, 1);
			SetPVarInt(playerid, "HIT_BY_JASON", 1);
		}
	}
	
	if(Player[issuerid][IsAtEvent])
	{
		PlayerPlaySound(issuerid, 17802, 0.00, 0.00, 0.00);
	}

	if((weapon == WEAPON_VEHICLE || weapon == 50) && Player[issuerid][AdminDuty] == 0 && GetPlayerState(issuerid) == PLAYER_STATE_DRIVER && GetPVarInt(playerid, "Kicked") == 0) // Car parking is considered heli-blading (ID: 50)
	{
		if(CarRamsTimer[issuerid][playerid] == 0)
			CarRamsTimer[issuerid][playerid] = gettime() + 12;
		else if(CarRamsTimer[issuerid][playerid] > gettime())
		{
			CarRams[issuerid][playerid]++;
			if(CarRams[issuerid][playerid] > 1)
			{
				new str[128];
				format(str, sizeof(str), "Kick: %s has been auto-kicked by System. Reason: \"Car ramming/parking\"", GetName(issuerid));
				SendClientMessageToAll(LIGHTRED, str);
				CarRamsTimer[issuerid][playerid] = 0;
				CarRams[issuerid][playerid] = 0;
				SetPVarInt(playerid, "Kicked", 1);
				KickEx(issuerid);

				new Float: pX, Float: pY, Float: pZ;
				GetPlayerPos(playerid, pX, pY, pZ);
				SetPlayerPos_Update(playerid, pX, pY, pZ+2);
				SendClientMessage(playerid, YELLOW, "You have been slapped in-case you were under a vehicle.");
			}

		}
		else
		{
			CarRamsTimer[issuerid][playerid] = 0;
			CarRams[issuerid][playerid] = 0;
		}
	}

	if(Player[playerid][AdminDuty] == 1 && Player[issuerid][AdminDuty] != 1 && Spectator[playerid][SpecSpectatingPlayer] != issuerid)
	{
		new Float:pHealth;
		GetPlayerHealth(issuerid, pHealth);
		SetPlayerHealth(issuerid, pHealth - amount);
		SendClientMessage(issuerid, 0xFFEA00FF, "You have taken ricochet damage from hitting an admin.");
		return 0;
	}
	return 1;
}

public NearByMessageEx(playerid, color, string[], Float: range)
{
	new Float: PlayerX, Float: PlayerY, Float: PlayerZ;
	foreach(Player, i)
	{
		if(IsPlayerSpawned(i))
		{
			GetPlayerPos(playerid, PlayerX, PlayerY, PlayerZ);
			if(IsPlayerInRangeOfPoint(i, range, PlayerX, PlayerY, PlayerZ))
			{
				if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
				{
					SendClientMessage(i, color, string);
				}
			}
		}
	}
}

public SendBusinessMessage(color, string[], businessid)
{
	foreach(Player, i)
	{
	    if(IsPlayerSpawned(i))
		{
			 if(Player[i][InBusiness] == businessid)
			 {
                 SendClientMessage(i, color, string);
             }
        }
    }
}


public SavePlayerData(playerid)
{
	if(Player[playerid][Authenticated] == 1 && Player[playerid][pSQL_ID] != 0)
	{
		GetPlayerPos(playerid, Player[playerid][LastX], Player[playerid][LastY], Player[playerid][LastZ]);
		GetPlayerHealth(playerid, Player[playerid][LastHealth]);

		if(Player[playerid][CopDuty] == 0)
			GetPlayerArmour(playerid, Player[playerid][LastArmour]);

		Player[playerid][LastInterior] = GetPlayerInterior(playerid);
		Player[playerid][LastWorld] = GetPlayerVirtualWorld(playerid);
		Player[playerid][FightStyle] = GetPlayerFightingStyle(playerid);

		Player[playerid][JobCooldown] = (Player[playerid][JobCooldown] > gettime()) ? (Player[playerid][JobCooldown]) : (0); //If cooldown is greater than gettime() then don't do anything else set it to 0
		Player[playerid][CantFish] = (Player[playerid][CantFish] > gettime()) ? (Player[playerid][CantFish]) : (0);
		Player[playerid][GarbageCooldown] = (Player[playerid][GarbageCooldown] > gettime()) ? (Player[playerid][GarbageCooldown]) : (0);
		Player[playerid][SkillCooldown] = (Player[playerid][SkillCooldown] > gettime()) ? (Player[playerid][SkillCooldown]) : (0);
		Player[playerid][PizzaCooldown] = (Player[playerid][PizzaCooldown] > gettime()) ? (Player[playerid][PizzaCooldown]) : (0);
		Player[playerid][TruckerTestCooldown] = (Player[playerid][TruckerTestCooldown] > gettime()) ? (Player[playerid][TruckerTestCooldown]) : (0);
		Player[playerid][VipTime] = (Player[playerid][VipTime] > gettime()) ? (Player[playerid][VipTime]) : (0);


		if(Player[playerid][InRally] > 0 || Player[playerid][IsAtEvent] > 0)
		{
			Player[playerid][LastX] = SpawnX;
			Player[playerid][LastY] = SpawnY;
			Player[playerid][LastZ] = SpawnZ;
			Player[playerid][LastWorld] = 0;
			Player[playerid][LastInterior] = 0;
		}

		if(!Player[playerid][AdminDuty])
			Player[playerid][LastSkin] = GetPlayerSkin(playerid);
		
		if(Player[playerid][pORM_ID] == ORM:0)
			printf("[ORM ERROR] Attempted to save an orm id of 0. (Player: %s (%d)", GetName(playerid), playerid);

		orm_update(Player[playerid][pORM_ID]);
	}
	return 1;
}

public SetPlayerPosEx(playerid, Float: posx, Float: posy, Float: posz, interior, virtualworld)
{
	if(GetPlayerState(playerid) == 2)
	{
		SetPlayerVirtualWorld(playerid, virtualworld);
		SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), virtualworld);
		LinkVehicleToInterior(GetPlayerVehicleID(playerid), interior);
		SetPlayerInterior(playerid, interior);
		SetVehiclePos(GetPlayerVehicleID(playerid), posx, posy, posz);
		return 1;
	}
	else
	{
		SetPlayerVirtualWorld(playerid, virtualworld);
		SetPlayerInterior(playerid, interior);
		SetPlayerPos_Update(playerid, posx, posy, posz);
		return 1;
	}
}

public OnPlayerLoginAttempt(playerid, password[])
{
	new Year, Month, Day, Minute, Hour, Second, Name[MAX_PLAYER_NAME], string[128];
	GetPlayerName(playerid, Name, sizeof(Name));
	getdate(Year, Month, Day);
	gettime(Hour, Minute, Second);

	new pass[510], buff[256];
	strcat(pass, password, sizeof(pass));
	strcat(pass, Player[playerid][pSalt], sizeof(pass));
	WP_Hash(buff, sizeof(buff), pass);

	if(!strcmp(Player[playerid][Password], buff, false))
	{
		#if defined MTG_CHRISTMAS
			StopAudioStreamForPlayer(playerid);
		#endif

		MaxLoggedIn++;

		SetupORM(playerid);
		orm_select(Player[playerid][pORM_ID], "OnPlayerLoadData", "d", playerid);


		if(DrawUnix > gettime() && !isnull(DrawTitle))
		{
			format(string, sizeof(string), "If you haven't already, enter the \"%s\" draw! (/drawenter)", DrawTitle);
			SendClientMessage(playerid, YELLOW, string);
		}

		if(DrawUnix > gettime() && !isnull(DrawTitle))
		{
			format(string, sizeof(string), "If you haven't already, enter the \"%s\" draw! (/drawenter)", DrawTitle);
			SendClientMessage(playerid, YELLOW, string);
		}
	}
	else
	{
		Player[playerid][LoginAttempts]++;
		new Sum;
		Sum = 3-Player[playerid][LoginAttempts];
		SendClientMessage(playerid, ADMINORANGE, "The password you have entered does not match your account. Please try again or use the forums.");
		format(string, sizeof(string), "You have %d remaining login attempts, before you are auto-kicked.", Sum);
		SendClientMessage(playerid, WHITE, string);
		ShowPlayerDialog(playerid, 3894, DIALOG_STYLE_PASSWORD, "Authentication", "Welcome to crea\n\nYou have an account, please enter your password to authenticate.", "Login", "Help");

		if(Player[playerid][LoginAttempts] >= 3)
		{
			/*new hour, minute, second, day, year, month;
			gettime(hour, minute, second);
			getdate(year, month, day);
			#pragma unused second
			new IP[21];
			GetPlayerIp(playerid, IP, sizeof(IP));
			format(string, sizeof(string), "%d/%d/%d | %d:%d | %s | %s | THREE FAILED PASSWORD ATTEMPTS | System", day, month, year, hour, minute, IP, GetName(playerid));
			BanLog(string);*/
			SendClientMessage(playerid, ADMINORANGE, "You have used your three attempts.");
			KickEx(playerid);
		}

	}
	return 1;
}

stock GetDate()
{
	new year, month, day, hour, minute, second, date[128];
	getdate(year, month, day);
	gettime(hour, minute, second);

	format(date, sizeof(date), "%d/%d/%d - %02d:%02d:%02d", month, day, year, hour, minute, second);
	return date;
}

stock QuickSave(playerid)
{
	Player[playerid][LastWorld] = GetPlayerVirtualWorld(playerid);
	Player[playerid][LastInterior] = GetPlayerInterior(playerid);

	SavePlayerData(playerid);
	return true;
}

stock LoadFilesIntoVars()
{
	//----------------------------------------------------------------------------------------
	if(fexist("Spawn.ini"))
	{
		print("[system] Loading Spawn.ini");
		SpawnX = dini_Float("Spawn.ini", "SpawnX");
		SpawnY = dini_Float("Spawn.ini", "SpawnY");
		SpawnZ = dini_Float("Spawn.ini", "SpawnZ");
		SpawnInt = dini_Int("Spawn.ini", "SpawnInt");
		SpawnWorld = dini_Int("Spawn.ini", "SpawnWorld");
		print("[system] Loaded file Spawn.ini! Proceeding..");
	}
	else
	{
		print("Terminating server.. File 'Spawn.ini' missing.");
		SendRconCommand("exit");
	}
	//----------------------------------------------------------------------------------------
	if(fexist("Ranks.ini"))
	{
		print("[system] Loading Ranks.ini");
		OOCRanks[Rank1] = dini_Get("Ranks.ini", "Rank1");
		OOCRanks[Rank2] = dini_Get("Ranks.ini", "Rank2");
		OOCRanks[Rank3] = dini_Get("Ranks.ini", "Rank3");
		OOCRanks[Rank4] = dini_Get("Ranks.ini", "Rank4");
		OOCRanks[Rank5] = dini_Get("Ranks.ini", "Rank5");
		OOCRanks[Rank6] = dini_Get("Ranks.ini", "Rank6");
		OOCRanks[Rank7] = dini_Get("Ranks.ini", "Rank7");
		print("[system] Loaded file Ranks.ini! Proceeding..");
	}
	else
	{
		print("Terminating server.. File 'Ranks.ini' missing.");
		SendRconCommand("exit");
	}
	//----------------------------------------------------------------------------------------
	if(fexist("Configuration.ini"))
	{
		print("[system] Loading Configuration.ini");
		Anticheat = 1;
		print("[system] Loaded file Configuration.ini! Proceeding..");
	}
	else
	{
		print("Terminating server.. File 'Configuration.ini' missing.");
		SendRconCommand("exit");
	}
	//----------------------------------------------------------------------------------------
	if(fexist("VisitorAnalysis.ini"))
	{
		MaxVisitors = dini_Int("VisitorAnalysis.ini", "MaxVisitors");
		MaxRegistered = dini_Int("VisitorAnalysis.ini", "MaxRegistered");
		MaxLoggedIn = dini_Int("VisitorAnalysis.ini", "MaxLoggedIn");
		TotalConnections = dini_Int("VisitorAnalysis.ini", "TotalConnections");
		FriendReferals = dini_Int("VisitorAnalysis.ini", "FriendReferals");
		SAMPForumReferals = dini_Int("VisitorAnalysis.ini", "SAMPForumReferals");
		YoutubeReferals = dini_Int("VisitorAnalysis.ini", "YoutubeReferals");
		GoogleReferals = dini_Int("VisitorAnalysis.ini", "GoogleReferals");
		OtherReferals = dini_Int("VisitorAnalysis.ini", "OtherReferals");
	}
	else
	{
		dini_Create("VisitorAnalysis.ini");
		dini_IntSet("VisitorAnalysis.ini", "MaxVisitors", 0);
		dini_IntSet("VisitorAnalysis.ini", "MaxRegistered", 0);
		dini_IntSet("VisitorAnalysis.ini", "MaxLoggedIn", 0);
		dini_IntSet("VisitorAnalysis.ini", "TotalConnections", 0);
		dini_IntSet("VisitorAnalysis.ini", "FriendReferals", 0);
		dini_IntSet("VisitorAnalysis.ini", "SAMPForumReferals", 0);
		dini_IntSet("VisitorAnalysis.ini", "YoutubeReferals", 0);
		dini_IntSet("VisitorAnalysis.ini", "GoogleReferals", 0);
		dini_IntSet("VisitorAnalysis.ini", "OtherReferals", 0);
	}
	//----------------------------------------------------------------------------------------
	if(fexist("Assets.ini"))
	{
		print("[system] Loading Assets.ini");
		DrawUnix = dini_Int("Assets.ini", "DrawUnix");
		DrawVipOnly = dini_Int("Assets.ini", "DrawVipOnly");
		format(DrawTitle, 64, dini_Get("Assets.ini", "DrawTitle"));
		Prison1X = dini_Float("Assets.ini", "Prison1X");
		Prison1Y = dini_Float("Assets.ini", "Prison1Y");
		Prison1Z = dini_Float("Assets.ini", "Prison1Z");
		Prison1Int = dini_Int("Assets.ini", "Prison1Int");
		//Prison1World = dini_Int("Assets.ini", "Prison1World");
		Prison2X = dini_Float("Assets.ini", "Prison2X");
		Prison2Y = dini_Float("Assets.ini", "Prison2Y");
		Prison2Z = dini_Float("Assets.ini", "Prison2Z");
		Prison2Int = dini_Int("Assets.ini", "Prison2Int");
		Prison2World = dini_Int("Assets.ini", "Prison2World");
		LockerPosX = dini_Float("Assets.ini", "LockerPosX");
		LockerPosY = dini_Float("Assets.ini", "LockerPosY");
		LockerPosZ = dini_Float("Assets.ini", "LockerPosZ");
		LockerPosInt = dini_Int("Assets.ini", "LockerPosInt");
		HospitalSpawnX = dini_Float("Assets.ini", "HospitalSpawnX");
		HospitalSpawnY = dini_Float("Assets.ini", "HospitalSpawnY");
		HospitalSpawnZ = dini_Float("Assets.ini", "HospitalSpawnZ");
		HospitalInt = dini_Int("Assets.ini", "HospitalInt");
		ArrestPosX = dini_Float("Assets.ini", "ArrestPosX");
		ArrestPosY = dini_Float("Assets.ini", "ArrestPosY");
		ArrestPosZ = dini_Float("Assets.ini", "ArrestPosZ");
		// BankIntX = dini_Float("Assets.ini", "BankIntX");
		// BankIntY = dini_Float("Assets.ini", "BankIntY");
		// BankIntZ = dini_Float("Assets.ini", "BankIntZ");
		// BankIntID = dini_Int("Assets.ini", "BankIntID");
		// BankExtX = dini_Float("Assets.ini", "BankExtX");
		// BankExtY = dini_Float("Assets.ini", "BankExtY");
		// BankExtZ = dini_Float("Assets.ini", "BankExtZ");
		DropCarX = dini_Float("Assets.ini", "DropCarX");
		DropCarY = dini_Float("Assets.ini", "DropCarY");
		DropCarZ = dini_Float("Assets.ini", "DropCarZ");
		OwnedCarSpawnX = dini_Float("Assets.ini", "OwnedCarSpawnX");
		OwnedCarSpawnY = dini_Float("Assets.ini", "OwnedCarSpawnY");
		OwnedCarSpawnZ = dini_Float("Assets.ini", "OwnedCarSpawnZ");
		OwnedCarSpawn2X = dini_Float("Assets.ini", "OwnedCarSpawn2X");
		OwnedCarSpawn2Y = dini_Float("Assets.ini", "OwnedCarSpawn2Y");
		OwnedCarSpawn2Z = dini_Float("Assets.ini", "OwnedCarSpawn2Z");
		OwnedBoatSpawnX = dini_Float("Assets.ini", "OwnedBoatSpawnX");
		OwnedBoatSpawnY = dini_Float("Assets.ini", "OwnedBoatSpawnY");
		OwnedBoatSpawnZ = dini_Float("Assets.ini", "OwnedBoatSpawnZ");
		Harvest1X = dini_Float("Assets.ini", "Harvest1X");
		Harvest1Y = dini_Float("Assets.ini", "Harvest1Y");
		Harvest1Z = dini_Float("Assets.ini", "Harvest1Z");
		Harvest2X = dini_Float("Assets.ini", "Harvest2X");
		Harvest2Y = dini_Float("Assets.ini", "Harvest2Y");
		Harvest2Z = dini_Float("Assets.ini", "Harvest2Z");
		Harvest3X = dini_Float("Assets.ini", "Harvest3X");
		Harvest3Y = dini_Float("Assets.ini", "Harvest3Y");
		Harvest3Z = dini_Float("Assets.ini", "Harvest3Z");
		Harvest4X = dini_Float("Assets.ini", "Harvest4X");
		Harvest4Y = dini_Float("Assets.ini", "Harvest4Y");
		Harvest4Z = dini_Float("Assets.ini", "Harvest4Z");
		Harvest5X = dini_Float("Assets.ini", "Harvest5X");
		Harvest5Y = dini_Float("Assets.ini", "Harvest5Y");
		Harvest5Z = dini_Float("Assets.ini", "Harvest5Z");
		Tax = dini_Int("Assets.ini", "TaxRate");
		TaxGroup = dini_Int("Assets.ini", "TaxGroup");
		AdVizPrice = dini_Int("Assets.ini", "AdVizPrice");
		MobilePrice = dini_Int("Assets.ini", "MobilePrice");
		BillboardPrice = dini_Int("Assets.ini", "BillboardPrice");
		BillboardsDays = dini_Int("Assets.ini", "BillboardsDays");
		LockerPos2X = dini_Float("Assets.ini", "LockerPos2X");
		LockerPos2Y = dini_Float("Assets.ini", "LockerPos2Y");
		LockerPos2Z = dini_Float("Assets.ini", "LockerPos2Z");
		LockerPos2Int = dini_Int("Assets.ini", "LockerPos2Int");
		LockerPos3X = dini_Float("Assets.ini", "LockerPos3X");
		LockerPos3Y = dini_Float("Assets.ini", "LockerPos3Y");
		LockerPos3Z = dini_Float("Assets.ini", "LockerPos3Z");
		LockerPos3Int = dini_Int("Assets.ini", "LockerPos3Int");
		//MayorTransfer = dini_Int("Assets.ini", "MayorTransfer");
		TaxrateTimer = dini_Int("Assets.ini", "TaxrateTimer");
		Candidate1 = dini_Get("Assets.ini", "Candidate1");
		Candidate1Votes = dini_Int("Assets.ini", "Candidate1Votes");
		Candidate2 = dini_Get("Assets.ini", "Candidate2");
		Candidate2Votes = dini_Int("Assets.ini", "Candidate2Votes");
		Candidate3 = dini_Get("Assets.ini", "Candidate3");
		Candidate3Votes = dini_Int("Assets.ini", "Candidate3Votes");
		VotingOpen = dini_Int("Assets.ini", "VotingOpen");
		AgencyDoorPosX = dini_Float("Assets.ini", "AgencyDoorPosX");
		AgencyDoorPosY = dini_Float("Assets.ini", "AgencyDoorPosY");
		AgencyDoorPosZ = dini_Float("Assets.ini", "AgencyDoorPosZ");
		AgencyDoorPosInt = dini_Int("Assets.ini", "AgencyDoorPosInt");
		AgencyIntPosX = dini_Float("Assets.ini", "AgencyIntPosX");
		AgencyIntPosY = dini_Float("Assets.ini", "AgencyIntPosY");
		AgencyIntPosZ = dini_Float("Assets.ini", "AgencyIntPosZ");
		AgencyIntPosInt = dini_Int("Assets.ini", "AgencyIntPosInt");
		AgencyGarageEntranceX = dini_Float("Assets.ini", "AgencyGarageEntranceX");
		AgencyGarageEntranceY = dini_Float("Assets.ini", "AgencyGarageEntranceY");
		AgencyGarageEntranceZ = dini_Float("Assets.ini", "AgencyGarageEntranceZ");
		AgencyGarageExitX = dini_Float("Assets.ini", "AgencyGarageExitX");
		AgencyGarageExitY = dini_Float("Assets.ini", "AgencyGarageExitY");
		AgencyGarageExitZ = dini_Float("Assets.ini", "AgencyGarageExitZ");
		AgencyHQGarageEntranceX = dini_Float("Assets.ini", "AgencyHQGarageEntranceX");
		AgencyHQGarageEntranceY = dini_Float("Assets.ini", "AgencyHQGarageEntranceY");
		AgencyHQGarageEntranceZ = dini_Float("Assets.ini", "AgencyHQGarageEntranceZ");
		AgencyHQGarageEntranceInt = dini_Int("Assets.ini", "AgencyHQGarageEntranceInt");
		AgencyHQGarageExitX = dini_Float("Assets.ini", "AgencyHQGarageExitX");
		AgencyHQGarageExitY = dini_Float("Assets.ini", "AgencyHQGarageExitY");
		AgencyHQGarageExitZ = dini_Float("Assets.ini", "AgencyHQGarageExitZ");
	//	VipVehicleGroup = dini_Int("Assets.ini", "VipVehicleGroup");
	//	VipVehicleGroup2 = dini_Int("Assets.ini", "VipVehicleGroup2");
		VipCarSpawn[0] = dini_Float("Assets.ini", "VipCarSpawnX");
		VipCarSpawn[1] = dini_Float("Assets.ini", "VipCarSpawnY");
		VipCarSpawn[2] = dini_Float("Assets.ini", "VipCarSpawnZ");
		UnimpoundPos[0] = dini_Float("Assets.ini", "UnimpoundPosX");
		UnimpoundPos[1] = dini_Float("Assets.ini", "UnimpoundPosY");
		UnimpoundPos[2] = dini_Float("Assets.ini", "UnimpoundPosZ");
		UnimpoundPos[3] = dini_Float("Assets.ini", "UnimpoundPosA");
		VipLounge[0] = dini_Float("Assets.ini", "VipLoungeExtX");
		VipLounge[1] = dini_Float("Assets.ini", "VipLoungeExtY");
		VipLounge[2] = dini_Float("Assets.ini", "VipLoungeExtZ");
		VipLounge[3] = dini_Float("Assets.ini", "VipLoungeIntX");
		VipLounge[4] = dini_Float("Assets.ini", "VipLoungeIntY");
		VipLounge[5] = dini_Float("Assets.ini", "VipLoungeIntZ");
		VipLounge[6] = dini_Float("Assets.ini", "VipLoungeLockerX");
		VipLounge[7] = dini_Float("Assets.ini", "VipLoungeLockerY");
		VipLounge[8] = dini_Float("Assets.ini", "VipLoungeLockerZ");
		VipLoungeInterior = dini_Int("Assets.ini", "VipLoungeInterior");
		VipLoungeVW = dini_Int("Assets.ini", "VipLoungeVW");
		MatSafeMaterials = dini_Int("Assets.ini", "MatSafeMaterials");
		FishDeadZone[0] = dini_Float("Assets.ini", "FishDeadZoneX");
		FishDeadZone[1] = dini_Float("Assets.ini", "FishDeadZoneY");
		FishDeadZone[2] = dini_Float("Assets.ini", "FishDeadZoneZ");
		FishDeadZone[3] = dini_Int("Assets.ini", "FishDeadZoneRange");
		TicketPos[0] = dini_Float("Assets.ini", "TicketPosX");
		TicketPos[1] = dini_Float("Assets.ini", "TicketPosY");
		TicketPos[2] = dini_Float("Assets.ini", "TicketPosZ");
		TicketPosInt = dini_Int("Assets.ini", "TicketPosInt");
		TicketPosVW = dini_Int("Assets.ini", "TicketPosVW");
		TotalMobileMoney = dini_Int("Assets.ini", "TotalMobileMoney");
		DrivingTestTime = dini_Int("Assets.ini", "DrivingTestTime");
		DrivingTestCost = dini_Int("Assets.ini", "DrivingTestCost");
		TruckerTestTime = dini_Int("Assets.ini", "TruckerTestTime");
		TruckerTestCost = dini_Int("Assets.ini", "TruckerTestCost");
		RegistrationCost = dini_Int("Assets.ini", "RegistrationCost");
		TruckerPickup[0] = dini_Float("Assets.ini", "SupplyPickupX");
		TruckerPickup[1] = dini_Float("Assets.ini", "SupplyPickupY");
		TruckerPickup[2] = dini_Float("Assets.ini", "SupplyPickupZ");
		TruckerPickup[3] = dini_Float("Assets.ini", "GasPickupX");
		TruckerPickup[4] = dini_Float("Assets.ini", "GasPickupY");
		TruckerPickup[5] = dini_Float("Assets.ini", "GasPickupZ");
		DelivererSupplies = dini_Int("Assets.ini", "DelivererSupplies");
		trashPay = dini_Int("Assets.ini", "GarbagePay");
		BikeSpawn[0] = dini_Float("Assets.ini", "BikeSpawnX");
		BikeSpawn[1] = dini_Float("Assets.ini", "BikeSpawnY");
		BikeSpawn[2] = dini_Float("Assets.ini", "BikeSpawnZ");
		ToggledAdvertisments = dini_Int("Assets.ini", "AdStatus");
		VanSpawn[0] = dini_Float("Assets.ini", "VanSpawnX");
		VanSpawn[1] = dini_Float("Assets.ini", "VanSpawnY");
		VanSpawn[2] = dini_Float("Assets.ini", "VanSpawnZ");
		PaycheckBonus = dini_Int("Assets.ini", "PaycheckBonus");
		PaycheckHours = dini_Int("Assets.ini", "PaycheckHours");
		PaycheckBonusTimeleft = dini_Int("Assets.ini", "PaycheckBonusTimeleft");
		ModShopPos[0] = dini_Float("Assets.ini", "ModShopX");
		ModShopPos[1] = dini_Float("Assets.ini", "ModShopY");
		ModShopPos[2] = dini_Float("Assets.ini", "ModShopZ");
		ModShopExitPos[0] = dini_Float("Assets.ini", "ModShopExitX");
		ModShopExitPos[1] = dini_Float("Assets.ini", "ModShopExitY");
		ModShopExitPos[2] = dini_Float("Assets.ini", "ModShopExitZ");
		ModShopExitPos[3] = dini_Float("Assets.ini", "ModShopExitAng");
		DrawUnix = dini_Int("Assets.ini", "DrawUnix");
		DrawVipOnly = dini_Int("Assets.ini", "DrawVipOnly");
		format(DrawTitle, 64, dini_Get("Assets.ini", "DrawTitle"));
		DropCarStatus = dini_Int("Assets.ini", "DropCarStatus");
		CarJackStatus = dini_Int("Assets.ini", "CarJackStatus");
		AnnounceExist = dini_Int("Assets.ini", "AnnounceExist");
		announcemsg = dini_Get("Assets.ini", "announcemsg");
		LastAnnounceMinute = dini_Int("Assets.ini", "LastAnnounceMinute");
		LastAnnounceHour = dini_Int("Assets.ini", "LastAnnounceHour");
		LastAnnounceDay = dini_Int("Assets.ini", "LastAnnounceDay");
		LastAnnounceMonth = dini_Int("Assets.ini", "LastAnnounceMonth");
		LastAnnounceYear = dini_Int("Assets.ini", "LastAnnounceYear");
		PrisonItemPrice[0] = dini_Int("Assets.ini", "PrisonItemPrice0");
		PrisonItemPrice[1] = dini_Int("Assets.ini", "PrisonItemPrice1");
		PrisonItemPrice[2] = dini_Int("Assets.ini", "PrisonItemPrice2");
		PrisonItemPrice[3] = dini_Int("Assets.ini", "PrisonItemPrice3");
		PrisonItemPrice[4] = dini_Int("Assets.ini", "PrisonItemPrice4");
		PrisonItemPrice[5] = dini_Int("Assets.ini", "PrisonItemPrice5");
		PrisonItemPrice[6] = dini_Int("Assets.ini", "PrisonItemPrice6");
		PrisonItemPrice[7] = dini_Int("Assets.ini", "PrisonItemPrice7");
		PrisonItemPrice[8] = dini_Int("Assets.ini", "PrisonItemPrice8");
		PrisonItemPrice[9] = dini_Int("Assets.ini", "PrisonItemPrice9");
		PrisonItemPrice[10] = dini_Int("Assets.ini", "PrisonItemPrice10");
		PrisonItemPrice[11] = dini_Int("Assets.ini", "PrisonItemPrice11");
		PrisonItemPrice[12] = dini_Int("Assets.ini", "PrisonItemPrice12");
		PrisonItemPrice[13] = dini_Int("Assets.ini", "PrisonItemPrice13");
		PrisonPaycheck = dini_Int("Assets.ini", "PrisonPaycheck");
		TicketLimit = dini_Int("Assets.ini", "TicketLimit");

		if(dini_Isset("Assets.ini", "WAPNews"))
		{
			dini_Set("Assets.ini", "WAPNews", "There's a new application interface, enjoy!");
		}

		ArrestPosPickup = CreateDynamicPickup(1239, 23, ArrestPosX, ArrestPosY, ArrestPosZ, 0, 0, -1, 150.0);
		VipExtPickup = CreateDynamicPickup(1239, 23, VipLounge[0], VipLounge[1], VipLounge[2], 0, 0, -1, 150.0);
		VipLockerPickup = CreateDynamicPickup(1239, 23, VipLounge[6], VipLounge[7], VipLounge[8], VipLoungeVW, VipLoungeInterior, -1, 150.0);
		TruckerPickups[0] = CreateDynamicPickup(1239, 23, TruckerPickup[0], TruckerPickup[1], TruckerPickup[2], -1, -1, -1, 150.0);
		TruckerPickups[1] = CreateDynamicPickup(1239, 23, TruckerPickup[3], TruckerPickup[4], TruckerPickup[5], -1, -1, -1, 150.0);

		ArrestLocLabel = CreateDynamic3DTextLabel("Arrest {FFFFFF}Location", RED,  ArrestPosX, ArrestPosY, ArrestPosZ, 15, .testlos = 1, .worldid = 0, .interiorid = 0);
		LSPDFrontDeskLabel = CreateDynamic3DTextLabel("LSPD Front Desk\n{FFFF00}/paytickets\n/impoundlist", WHITE, TicketPos[0], TicketPos[1], TicketPos[2], 15, .worldid = TicketPosVW, .interiorid = TicketPosInt, .testlos = 1);
		VIPLoungeLabel = CreateDynamic3DTextLabel("VIP Lounge", YELLOW, VipLounge[0], VipLounge[1], VipLounge[2], 15, .testlos = 1, .worldid = 0, .interiorid = 0);
		TruckerSupplyPickupLabel = CreateDynamic3DTextLabel("Trucker Job\n{FFFFFF}Supply Pickup", RED,  TruckerPickup[0], TruckerPickup[1], TruckerPickup[2], 15, .testlos = 1);
		TruckerFuelPickupLabel = CreateDynamic3DTextLabel("Trucker Job\n{FFFFFF}Fuel Pickup", RED,  TruckerPickup[3], TruckerPickup[4], TruckerPickup[5], 15, .testlos = 1);
		print("[system] Loaded file Assets.ini! Proceeding..");
	}
	else
	{
		print("Terminating server.. File 'Assets.ini' missing.");
		SendRconCommand("exit");
	}
	//----------------------------------------------------------------------------------------
	return 1;
}

/*public IsDateInThePast(day, month, year)
{
	new curday, curmonth, curyear;
	getdate(curyear, curmonth, curday);

	if(curyear > year)
	{
		return 1;
	}
	else
	{
		if(curyear == year)
		{
			if(curmonth > month)
			{
				return 1;
			}
			else
			{
				if(curday > day)
				{
					return 1;
				}
				else
				{
					return 0;
				}
			}
		}
		else
		{
			return 1;
		}
	}
}*/

public UntazePlayer(playerid)
{
	if(IsPlayerConnectedEx(playerid))
	{
		if(Player[playerid][Tazed] == 1)
		{
			TogglePlayerControllable(playerid, true);
			Player[playerid][Tazed] = 0;
		}
	}
	return 1;
}

//forward RotateLogs();
//public RotateLogs()

forward RotateLogsRemote();
public RotateLogsRemote()
{
	RotateLogs();
	return 1;
}

task RotateLogs[3600000]()
{
	new string[128], year, month, hour, minute, sec;
	getdate(year, month);

	gettime(hour, minute, sec);
	format(LastLogRotation, sizeof(LastLogRotation), "%02d:%02d:%02d", hour, minute, sec);

	if(HotelCheck == 0)
	{
		new time = gettime();
		foreach(new h : Hotel)
		{
			if(Hotels[h][hAutoClean] == 1 && time > Hotels[h][hTimeLeft] && Hotels[h][hTimeLeft] != 0)
			{
				CleanRoom(h);
			}
		}
		HotelCheck = 1;
	}
	else HotelCheck = 0;

	SendToAdmins(LIGHTRED, "Rotating logs...", 1);
	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d", year, month);
	if(!dir_exists(string))
		dir_create(string);

	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/AdminActions_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/AdminActions.log",string);
	file_create("scriptfiles/Logs/AdminActions.log");

	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/Bans_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/Bans.log",string);
	file_create("scriptfiles/Logs/Bans.log");

	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/GroupChat_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/GroupChat.log",string);
	file_create("scriptfiles/Logs/GroupChat.log");

	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/ICChat_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/ICChat.log",string);
	file_create("scriptfiles/Logs/ICChat.log");

	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/Money_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/Money.log",string);
	file_create("scriptfiles/Logs/Money.log");

	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/Namechanges_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/Namechanges.log",string);
	file_create("scriptfiles/Logs/Namechanges.log");

	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/OOCChat_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/OOCChat.log",string);
	file_create("scriptfiles/Logs/OOCChat.log");

	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/PMchat_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/PMchat.log",string);
	file_create("scriptfiles/Logs/PMchat.log");

	/*format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/Refunds_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/Refunds.log",string);
	file_create("scriptfiles/Logs/Refunds.log");*/

	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/Stat_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/Stat.log",string);
	file_create("scriptfiles/Logs/Stat.log");

	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/Unbans_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/Unbans.log",string);
	file_create("scriptfiles/Logs/Unbans.log");

	/*format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/GroupInvites_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/GroupInvites.log",string);
	file_create("scriptfiles/Logs/GroupInvites.log");*/

	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/Commands_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/Commands.log",string);
	file_create("scriptfiles/Logs/Commands.log");

	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/Connection_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/Connection.log",string);
	file_create("scriptfiles/Logs/Connection.log");

	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/Warnings_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/Warnings.log",string);
	file_create("scriptfiles/Logs/Warnings.log");

	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/Storage_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/Storage.log",string);
	file_create("scriptfiles/Logs/Storage.log");
	
	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/Death_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/Death.log",string);
	file_create("scriptfiles/Logs/Death.log");
	
	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/Loyalty_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/Loyalty.log",string);
	file_create("scriptfiles/Logs/Loyalty.log");

	//UpdateHotelRooms();

	SendToAdmins(LIGHTRED, "Rotating logs completed.", 1);
	return 1;
}


public SaveGeneralData()
{
	new year, month, string[128];
	//new year, month, string[128], tick[2];

	SavingStatus = 1;
	format(string, sizeof(string), "Saving data now! Game will pause briefly.");
	SendClientMessageToAll(LIGHTRED, string);
	foreach(Player, i)
		TogglePlayerControllable(i, false);

	CleanYellowPages();

	if(CurGMX == 1)
	{
		SendClientMessageToAll(WHITE, "Any changes made now will not be saved until the server has fully rebooted.");

		foreach(Player, i)
			QuickSave(i);
		CurGMX = 2;
	}
	else
	{
		foreach(Player, i)
			SavePlayerData(i);
	}

	UpdateAnalysis();
	new h, m, s;
	gettime(h, m, s);
	format(LastServerSave, sizeof(LastServerSave), "%02d:%02d:%02d.", h, m, s);

	SaveGroups();
	SaveJobs();
	SaveHouses();
	SaveBusinesses();
	saveRaffle();
	
	/*tick[0] = gettime();
	SaveVehicles();
	tick[1] = gettime();
	format(string, sizeof(string), "Took %d seconds to save vehicles.", tick[1] - tick[0]);
	SendToAdmins(LIGHTRED, string, 0);*/
	//SaveBillboards();

	getdate(year, month);

	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d", year, month);
	if(!dir_exists(string))
		dir_create(string);

	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/AdminActions_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/AdminActions.log",string);
	file_create("scriptfiles/Logs/AdminActions.log");

	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/Bans_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/Bans.log",string);
	file_create("scriptfiles/Logs/Bans.log");

	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/GroupChat_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/GroupChat.log",string);
	file_create("scriptfiles/Logs/GroupChat.log");

	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/ICChat_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/ICChat.log",string);
	file_create("scriptfiles/Logs/ICChat.log");

	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/Money_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/Money.log",string);
	file_create("scriptfiles/Logs/Money.log");

	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/Namechanges_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/Namechanges.log",string);
	file_create("scriptfiles/Logs/Namechanges.log");

	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/OOCChat_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/OOCChat.log",string);
	file_create("scriptfiles/Logs/OOCChat.log");

	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/PMchat_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/PMchat.log",string);
	file_create("scriptfiles/Logs/PMchat.log");

	/*format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/Refunds_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/Refunds.log",string);
	file_create("scriptfiles/Logs/Refunds.log");*/

	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/Stat_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/Stat.log",string);
	file_create("scriptfiles/Logs/Stat.log");

	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/Unbans_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/Unbans.log",string);
	file_create("scriptfiles/Logs/Unbans.log");

	/*format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/GroupInvites_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/GroupInvites.log",string);
	file_create("scriptfiles/Logs/GroupInvites.log");*/

	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/Commands_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/Commands.log",string);
	file_create("scriptfiles/Logs/Commands.log");

	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/Connection_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/Connection.log",string);
	file_create("scriptfiles/Logs/Connection.log");

	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/Warnings_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/Warnings.log",string);
	file_create("scriptfiles/Logs/Warnings.log");

	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/Storage_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/Storage.log",string);
	file_create("scriptfiles/Logs/Storage.log");
	
	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/Death_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/Death.log",string);
	file_create("scriptfiles/Logs/Death.log");
	
	format(string, sizeof(string), "scriptfiles/Logs/View/%d_%02d/Loyalty_%d.log", year, month, gettime());
	file_move("scriptfiles/Logs/Loyalty.log",string);
	file_create("scriptfiles/Logs/Loyalty.log");
	
	SavingTime = gettime() + 5;
	return 1;
}

public DoGMX()
{
	SendRconCommand("gmx");
	return 1;
}

stock GetPlayerID(string[])
{
	foreach(Player, i)
	{
		new testname[MAX_PLAYER_NAME];
		GetPlayerName(i, testname, sizeof(testname));
		if(strcmp(testname, string, true, strlen(string))  == 0)
		{
			return i;
		}
	}
	return INVALID_PLAYER_ID;
}

public GMXPrep(playerid, reason[])
{
	new string[128];
	format(string, sizeof(string), "Admin %s has initiated a server restart, it will occur in the next 30 seconds, reason: %s", Player[playerid][AdminName], reason);
	SendClientMessageToAll(LIGHTRED, string);
	SetTimer("DoGMX", 30000, false);
	SetTimer("SaveGeneralData", 26000, false);
	CurGMX = 1;
	return 1;
}

stock CutBeforePara(string[])
{
	new str[255], res[25];
	format(str, sizeof(str), "%s", string);
	for(new i = 0; '\0' != str[i]; i++)
	{
        if('(' == str[i])
		{
            strmid(res, str, 0, i - 1);
            break;
        }
	}
	return res;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{

	if(clickedid == SlotsPlay)
	{
		if(GetPVarInt(playerid, "CantUseSlots"))
		{
			//printf("[CASINO]: %s needs to wait", playerid);
			return SendClientMessage(playerid, -1, "Wait until your current game has finished!");
		}

		if(Groups[Player[playerid][InGroupHQ]][Chips] < 1000)
		{
			//printf("[CASINO]: Less than 1000 chips in %d for %s", Player[playerid][InGroupHQ], playerid);
			SendClientMessage(playerid, -1, "There isn't enough chips in the vault to be paid out.");
			return cmd_leaveslots(playerid, "");
		}

		if(Player[playerid][CasinoChips] < 1)
		{
			//printf("[CASINO]: %s is out of chips", playerid);
			SendClientMessage(playerid, -1, "You don't have any more chips to play the game!");
			return cmd_leaveslots(playerid, "");
		}

		Player[playerid][CasinoChips]--;
		Groups[Player[playerid][InGroupHQ]][Chips]++;
		//printf("[CASINO]: %s had started a new spin in %d", playerid, Player[playerid][InGroupHQ]);
		new res[128];
		format(res, sizeof(res), "~n~~n~~n~~l~Chips: %s~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~", IntToFormattedStr(Player[playerid][CasinoChips]));
		PlayerTextDrawSetString(playerid, SlotsTD[playerid], res);
		PlayerTextDrawShow(playerid, SlotsTD[playerid]);
		PreSpinTimer[playerid] = SetTimerEx("PreSpin", 100, true, "d", playerid);
		SetTimerEx("SpinSpinners", 1500, false, "d", playerid);
		SetPVarInt(playerid, "CantUseSlots", 1);
		PlayerPlaySound(playerid, 4201, 0.0, 0.0, 0.0);
	}
	if(clickedid == SlotsLeave)
	{
		cmd_leaveslots(playerid, "");
	}
	if(clickedid == CarPreview[2])
	{
		PlayerTextDrawHide(playerid, CarPreviewText[playerid]);
		for(new i; i < 4; i++)
			TextDrawHideForPlayer(playerid, CarPreview[i]);
		CancelSelectTextDraw(playerid);
		DeletePVar(playerid, "CCV");
	}
	if(clickedid == CarPreview[3])
	{
		if(Player[playerid][HasSprayCans] < 1)
			return SendClientMessage(playerid, GREY, "You need to buy spray cans from a 24/7 to use this command.");

		new vehicleid = GetPVarInt(playerid, "CCVID");
		new colourid1 = GetPVarInt(playerid, "CCVC1");
		new colourid2 = GetPVarInt(playerid, "CCVC2");
		DeletePVar(playerid, "CCVID");
		DeletePVar(playerid, "CCVC1");
		DeletePVar(playerid, "CCVC2");
		DeletePVar(playerid, "CCV");

		new sql = GetVSQLID(vehicleid), idx = GetVIndex(sql);

		if(sql == 0)
			return 1;

		if(idx == -1)
			return 1;

		Veh[idx][Color1] = colourid1;
		Veh[idx][Color2] = colourid2;
		ChangeVehicleColor(vehicleid, colourid1, colourid2);
		Player[playerid][HasSprayCans]--;

		PlayerTextDrawHide(playerid, CarPreviewText[playerid]);
		for(new i; i < 4; i++)
			TextDrawHideForPlayer(playerid, CarPreview[i]);
		CancelSelectTextDraw(playerid);
		DeletePVar(playerid, "CCV");
	}
	return 0;
}

public OnPlayerModelSelection(playerid, response, listid, modelid)
{
	new bool:isSkinList = false;
	for(new i; i < MAX_SKIN_LISTS; i++)
	{
		if(listid == SkinLists[i])
			isSkinList = true;
	}

	if(isSkinList == true)
	{
	    if(response)
	    {
			new string[255];
			if(Player[playerid][InBusiness] == 0)
				return SendClientMessage(playerid, WHITE, "You're not in a business!");
			else if(modelid > MAX_SKINS || modelid < 0){
				SendClientMessage(playerid, -1, "Please enter a skin id from 0 to"#MAX_SKINS".");

				format(string, sizeof(string), "Please enter the ID of the skin you'd like to buy (0 -"#MAX_SKINS")\n\nIt will cost you %s for your new skin.", PrettyMoney(Businesses[Player[playerid][InBusiness]][bProductPrice1]));
				return ShowPlayerDialog(playerid, BUY_CLOTHES, DIALOG_STYLE_INPUT, "Enter skin ID", string, "Set", "Cancel");
			}
			else if(IsPrivateSkin(modelid)){
				SendClientMessage(playerid, -1, "This skin is reserved!");

				format(string, sizeof(string), "Please enter the ID of the skin you'd like to buy (0 -"#MAX_SKINS")\n\nIt will cost you %s for your new skin.", PrettyMoney(Businesses[Player[playerid][InBusiness]][bProductPrice1]));
				return ShowPlayerDialog(playerid, BUY_CLOTHES, DIALOG_STYLE_INPUT, "Enter skin ID", string, "Set", "Cancel");
			}
			else if(IsGroupSkin(modelid) != 0 && (IsGroupSkin(modelid) != Player[playerid][Group])){
				format(string, sizeof(string), "You cannot buy this skin, it is registered to '%s'", Groups[IsGroupSkin(modelid)][GroupName]);
				SendClientMessage(playerid, -1, string);

				format(string, sizeof(string), "Please enter the ID of the skin you'd like to buy (0 -"#MAX_SKINS")\n\nIt will cost you %s for your new skin.", PrettyMoney(Businesses[Player[playerid][InBusiness]][bProductPrice1]));
				return ShowPlayerDialog(playerid, BUY_CLOTHES, DIALOG_STYLE_INPUT, "Enter skin ID", string, "Set", "Cancel");
			}
			else if(IsFemaleSkin(modelid) && Player[playerid][Gender] != 2)
			{
				SendClientMessage(playerid, -1, "You need to be a female to use that skin.");

				format(string, sizeof(string), "Please enter the ID of the skin you'd like to buy (0 -"#MAX_SKINS")\n\nIt will cost you %s for your new skin.", PrettyMoney(Businesses[Player[playerid][InBusiness]][bProductPrice1]));
				return ShowPlayerDialog(playerid, BUY_CLOTHES, DIALOG_STYLE_INPUT, "Enter skin ID", string, "Set", "Cancel");
			}
			else if(!IsFemaleSkin(modelid) && Player[playerid][Gender] == 2)
			{
				SendClientMessage(playerid, -1, "You need to be a male to use that skin.");

				format(string, sizeof(string), "Please enter the ID of the skin you'd like to buy (0 -"#MAX_SKINS")\n\nIt will cost you %s for your new skin.", PrettyMoney(Businesses[Player[playerid][InBusiness]][bProductPrice1]));
				return ShowPlayerDialog(playerid, BUY_CLOTHES, DIALOG_STYLE_INPUT, "Enter skin ID", string, "Set", "Cancel");
			}

			switch(Player[playerid][Race])
			{
				case 0:
				{
					if(!IsValidWhiteSkin(modelid))
					{
						SendClientMessage(playerid, -1, "You can't use that skin as you're not that race.");
						return ShowPlayerDialog(playerid, BUY_CLOTHES, DIALOG_STYLE_INPUT, "Skin ID:", "Choose a skin id from 0 to 300.", "Set", "Cancel");
					}
				}
				case 1:
				{
					if(!IsValidBlackSkin(modelid))
					{
						SendClientMessage(playerid, -1, "You can't use that skin as you're not that race.");
						return ShowPlayerDialog(playerid, BUY_CLOTHES, DIALOG_STYLE_INPUT, "Skin ID:", "Choose a skin id from 0 to 300.", "Set", "Cancel");
					}
				}
				case 2:
				{
					if(!IsValidAsianSkin(modelid))
					{
						SendClientMessage(playerid, -1, "You can't use that skin as you're not that race.");
						return ShowPlayerDialog(playerid, BUY_CLOTHES, DIALOG_STYLE_INPUT, "Skin ID:", "Choose a skin id from 0 to 300.", "Set", "Cancel");
					}
				}
				case 3:
				{
					if(!IsValidHispanicSkin(modelid))
					{
						SendClientMessage(playerid, -1, "You can't use that skin as you're not that race.");
						return ShowPlayerDialog(playerid, BUY_CLOTHES, DIALOG_STYLE_INPUT, "Skin ID:", "Choose a skin id from 0 to 300.", "Set", "Cancel");
					}
				}
				default:
				{
					SendClientMessage(playerid, -1, "You can't use that skin as you're not that race.");
					return ShowPlayerDialog(playerid, BUY_CLOTHES, DIALOG_STYLE_INPUT, "Skin ID:", "Choose a skin id from 0 to 300.", "Set", "Cancel");
				}
			}

			switch(GetPVarInt(playerid, "ClothingSlot")){
				case 1: Player[playerid][PlayerSkinSlot1] = modelid;
				case 2: Player[playerid][PlayerSkinSlot2] = modelid;
				case 3: Player[playerid][PlayerSkinSlot3] = modelid;
			}
			SetPlayerSkin(playerid, modelid);
			Player[playerid][LastSkin] = modelid;
			Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice1];
//			Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice1];
			AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice1]);
			Businesses[Player[playerid][InBusiness]][bSupplies] -= 15;
			SendClientMessage(playerid, -1, "You have purchased a pair of clothes!");
		}
		else return SendClientMessage(playerid, WHITE, "You canceled the skin purchase.");
    	return 1;
	}
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(response)
	{
		for(new i = 0, j = strlen(inputtext); i != j; i++)
		{
			if(inputtext[i] == '%')
				inputtext[i] = ' ';
		}


		switch(dialogid)
		{
			case DIALOG_HOUSE_MOVE_TOKENS:
			{
				if(!response)
				{
					DeletePVar(playerid, "HOUSE_MOVE_SLOT");
					DeletePVar(playerid, "HOUSE_MOVE_HOUSEID");
					DeletePVar(playerid, "HOUSE_MOVE_DIFF");
					return SendClientMessage(playerid, WHITE, "You have canceled the house move.");
				}

				new tokens = strval(inputtext), string[355];
				if(tokens < 0 || tokens > (500))
				{
					ShowPlayerDialog(playerid, DIALOG_HOUSE_MOVE_TOKENS, DIALOG_STYLE_INPUT, "House Move - Tokens", "How many VIP tokens do you wish to use towards the $50,000 OOC cost? \n\n1 token = $100", "Confirm", "Cancel");
					SendClientMessage(playerid, RED, "Valid token amounts are 0 - 500.");
					return 1;
				}

				if(tokens > Player[playerid][VipTokens])
				{
					ShowPlayerDialog(playerid, DIALOG_HOUSE_MOVE_TOKENS, DIALOG_STYLE_INPUT, "House Move - Tokens", "How many VIP tokens do you wish to use towards the $50,000 OOC cost? \n\n1 token = $100", "Confirm", "Cancel");
					SendClientMessage(playerid, RED, "You don't have that money tokens.");
					return 1;
				}

				SetPVarInt(playerid, "HOUSE_MOVE_TOKENS", tokens);

				new houseid = GetPVarInt(playerid, "HOUSE_MOVE_HOUSEID"),
					slot = GetPVarInt(playerid, "HOUSE_MOVE_SLOT"),
					diff = GetPVarInt(playerid, "HOUSE_MOVE_DIFF");

				format(string, sizeof(string), "{FFFFFF}House Move Confirmation\n\nYour house cost: %s\nNew house cost: %s\n\nDifference: %s%s{FFFFFF}\nOOC Cost: $50,000\nDo you accept these terms? (Note: If the difference is negative you will not receive money back.", \
				(slot == 1) ? (PrettyMoney(Houses[Player[playerid][House]][HousePrice])) : (PrettyMoney(Houses[Player[playerid][House2]][HousePrice])), PrettyMoney(Houses[houseid][HousePrice]), (diff > 0) ? ("{AA3333}") : ("{21DD00}"), PrettyMoney(diff));
				ShowPlayerDialog(playerid, DIALOG_HOUSE_MOVE_CONFIRM, DIALOG_STYLE_MSGBOX, "House Move - Confirm", string, "Confirm", "Cancel");
				format(string, sizeof(string), "Storage size of new house: %d", Houses[houseid][HouseStorageSize]);
				SendClientMessage(playerid, RED, string);
				SendClientMessage(playerid, RED, "WARNING: If the storage size of your new house is not large enough to hold the items stored in your current house, they will not be transferred.");
				return 1;
			}
			case DIALOG_HOUSE_MOVE_CONFIRM:
			{
				if(!response)
				{
					DeletePVar(playerid, "HOUSE_MOVE_SLOT");
					DeletePVar(playerid, "HOUSE_MOVE_HOUSEID");
					DeletePVar(playerid, "HOUSE_MOVE_DIFF");
					DeletePVar(playerid, "HOUSE_MOVE_TOKENS");
					return SendClientMessage(playerid, WHITE, "You have canceled the house move.");
				}

				new tokens = GetPVarInt(playerid, "HOUSE_MOVE_TOKENS"),
					houseid = GetPVarInt(playerid, "HOUSE_MOVE_HOUSEID"),
					diff = GetPVarInt(playerid, "HOUSE_MOVE_DIFF"),
					slot = GetPVarInt(playerid, "HOUSE_MOVE_SLOT"),
					phouseid = (slot == 1) ? (Player[playerid][House]) : (Player[playerid][House2]);

				tokens = tokens * 100;

				if((tokens + Player[playerid][BankMoney]) < (50000 + diff))
				{
					DeletePVar(playerid, "HOUSE_MOVE_SLOT");
					DeletePVar(playerid, "HOUSE_MOVE_HOUSEID");
					DeletePVar(playerid, "HOUSE_MOVE_DIFF");
					DeletePVar(playerid, "HOUSE_MOVE_TOKENS");
					return SendClientMessage(playerid, RED, "You can't afford the house move and it has been canceled. Make sure you have enough money in your bank account.");
				}

				Player[playerid][VipTokens] -= (tokens / 100);
				Player[playerid][BankMoney] -= ((50000 - tokens) + diff);

				DestroyDynamicPickup(Houses[phouseid][HPickupID]);
				DestroyDynamicPickup(Houses[houseid][HPickupID]);
				Houses[houseid][HPickupID] = CreateDynamicPickup(1272, 23, Houses[houseid][hExteriorX], Houses[houseid][hExteriorY], Houses[houseid][hExteriorZ], Houses[houseid][hExteriorVW], Houses[houseid][hExteriorID], -1, 150.0);
				Houses[phouseid][HPickupID] = CreateDynamicPickup(1273, 23, Houses[phouseid][hExteriorX], Houses[phouseid][hExteriorY], Houses[phouseid][hExteriorZ], Houses[phouseid][hExteriorVW], Houses[phouseid][hExteriorID], -1, 150.0);

				format(Houses[houseid][hOwner], 25, "%s", Player[playerid][NormalName]);
				format(Houses[phouseid][hOwner], 25, "Nobody");
				format(Houses[phouseid][KeyHolder1], 24, "Nobody");
				format(Houses[phouseid][KeyHolder2], 24, "Nobody");
				Houses[phouseid][hFakeOwner] = 0;
				Houses[houseid][hFakeOwner] = 0;

				new string[128];
				format(string, sizeof(string), "UPDATE furniture SET HouseID = '%d', FurniX = '0.0', FurniY = '0.0', FurniZ = '0.0' WHERE HouseID = '%d'", houseid, (slot == 1) ? (Player[playerid][House]) : (Player[playerid][House2]));
				mysql_query(MYSQL_MAIN, string, false);
		
				if(CalculateContainerWeight(phouseid, CONTAINER_TYPE_HOUSE) <= Houses[houseid][HouseStorageSize])
				{
					format(string, sizeof(string), "UPDATE storage SET container_id = '%d' WHERE container_id = '%d'", houseid, (slot == 1) ? (Player[playerid][House]) : (Player[playerid][House2]));
					mysql_query(MYSQL_MAIN, string, false);
					
					format(string, sizeof(string), "DELETE FROM storage WHERE container_id = '%d'", (slot == 1) ? (Player[playerid][House]) : (Player[playerid][House2]));
					mysql_query(MYSQL_MAIN, string, false);
				}
				
				LoadHouseFurni(houseid);

				for(new i; i < MAX_FURNI; i++)
					DeleteFurni(phouseid, i);

				if(slot == 1)
					Player[playerid][House] = houseid;
				else Player[playerid][House2] = houseid;

				
				SaveHouse(houseid);
				SaveHouse(phouseid);
				SavePlayerData(playerid);
				UpdateObjectLabel(houseid, LABEL_TYPE_HOUSE, .create = 1);
				UpdateObjectLabel(phouseid, LABEL_TYPE_HOUSE, .create = 1);
				format(string, sizeof(string), "%s has moved their house (%d) to house %d. ", Player[playerid][NormalName], phouseid, houseid);
				StatLog(string);
				SendClientMessage(playerid, WHITE, "You have successfully moved your house! Your furniture has also been moved to the new house.");
				return 1;
			}
			case DIALOG_HOUSE_SWAP_CONFIRM:
			{
				new pid = GetPVarInt(playerid, "HOUSE_SWAP_PLAYER");
				if(!IsPlayerConnected(pid))
				{
					DeletePVar(playerid, "HOUSE_SWAP_HOUSE");
					DeletePVar(playerid, "HOUSE_SWAP_PLAYER");
					DeletePVar(playerid, "HOUSE_SWAP_CONFIRM");
					DeletePVar(playerid, "HOUSE_SWAP_DIFF");
					SendClientMessage(playerid, RED, "The player you are swapping houses with is no longer connected.");
					return 1;
				}

				if(!response)
				{
					DeletePVar(playerid, "HOUSE_SWAP_HOUSE");
					DeletePVar(playerid, "HOUSE_SWAP_PLAYER");
					DeletePVar(playerid, "HOUSE_SWAP_CONFIRM");
					DeletePVar(playerid, "HOUSE_SWAP_DIFF");
					DeletePVar(pid, "HOUSE_SWAP_HOUSE");
					DeletePVar(pid, "HOUSE_SWAP_PLAYER");
					DeletePVar(pid, "HOUSE_SWAP_CONFIRM");
					DeletePVar(pid, "HOUSE_SWAP_DIFF");
					SendClientMessage(playerid, WHITE, "You have canceled the house swap request.");
					SendClientMessage(pid, WHITE, "The other player has canceled the house swap requested.");
					return 1;
				}
				if(GetPVarInt(pid, "HOUSE_SWAP_CONFIRMED") == 0)
				{
					if(Player[playerid][BankMoney] < (GetPVarInt(playerid, "HOUSE_SWAP_DIFF") + ((Houses[GetPVarInt(pid, "HOUSE_SWAP_HOUSE")][HousePrice] * 5) / 100)))
					{
						DeletePVar(playerid, "HOUSE_SWAP_HOUSE");
						DeletePVar(playerid, "HOUSE_SWAP_PLAYER");
						DeletePVar(playerid, "HOUSE_SWAP_CONFIRM");
						DeletePVar(playerid, "HOUSE_SWAP_DIFF");
						DeletePVar(pid, "HOUSE_SWAP_HOUSE");
						DeletePVar(pid, "HOUSE_SWAP_PLAYER");
						DeletePVar(pid, "HOUSE_SWAP_CONFIRM");
						DeletePVar(pid, "HOUSE_SWAP_DIFF");
						SendClientMessage(pid, WHITE, "The other player was unable to pay for the house swap.");
						SendClientMessage(playerid, WHITE, "You don't have enough money in the bank to complete this house swap. Remember you must pay the 5% fee and the difference of house prices if your house is cheaper!");
						SendClientMessage(playerid, ORANGE, "Remember, you can visit https://crearoleplay.com to purchase additional In-Game currency!");
						return 1;
					}

					SetPVarInt(playerid, "HOUSE_SWAP_CONFIRMED", 1);
					SendClientMessage(playerid, WHITE, "Please wait for the other player to accept.");
				}
				else
				{
					new houseid2 = GetPVarInt(pid, "HOUSE_SWAP_HOUSE"), houseid = GetPVarInt(playerid, "HOUSE_SWAP_HOUSE"), string[128];

					if(Player[playerid][House] == houseid)
						Player[playerid][House] = houseid2;
					else
						Player[playerid][House2] = houseid2;

					if(Player[pid][House] == houseid2)
						Player[pid][House] = houseid;
					else
						Player[pid][House2] = houseid;

					if(Player[pid][BankMoney] < (GetPVarInt(pid, "HOUSE_SWAP_DIFF") + ((Houses[houseid][HousePrice] * 5) / 100)))
					{
						DeletePVar(playerid, "HOUSE_SWAP_HOUSE");
						DeletePVar(playerid, "HOUSE_SWAP_PLAYER");
						DeletePVar(playerid, "HOUSE_SWAP_CONFIRM");
						DeletePVar(playerid, "HOUSE_SWAP_DIFF");
						DeletePVar(pid, "HOUSE_SWAP_HOUSE");
						DeletePVar(pid, "HOUSE_SWAP_PLAYER");
						DeletePVar(pid, "HOUSE_SWAP_CONFIRM");
						DeletePVar(pid, "HOUSE_SWAP_DIFF");
						SendClientMessage(playerid, WHITE, "The other player was unable to pay for the house swap.");
						SendClientMessage(pid, WHITE, "You don't have enough money in the bank to complete this house swap. Remember you must pay the 5% fee and the difference of house prices if your house is cheaper!");
						SendClientMessage(playerid, ORANGE, "Remember, you can visit https://crearoleplay.com to purchase additional In-Game currency!");
						return 1;
					}

					format(Houses[houseid2][hOwner], 25, "%s", Player[playerid][NormalName]);
					format(Houses[houseid][hOwner], 25, "%s", Player[pid][NormalName]);
					
					Player[playerid][BankMoney] -= (GetPVarInt(playerid, "HOUSE_SWAP_DIFF") + ((Houses[houseid2][HousePrice] * 5) / 100));
					Player[pid][BankMoney] -= (GetPVarInt(pid, "HOUSE_SWAP_DIFF") + ((Houses[houseid][HousePrice] * 5) / 100));
					format(string, sizeof(string), "%s has swapped a house with %s. (House %d [%s] and House %d [%s])", Player[playerid][NormalName], Player[pid][NormalName], houseid, PrettyMoney(Houses[houseid][HousePrice]), houseid2, PrettyMoney(Houses[houseid2][HousePrice]));
					StatLog(string);
					format(string, sizeof(string), "You have been charged %s and received house %d!", PrettyMoney((GetPVarInt(playerid, "HOUSE_SWAP_DIFF") + ((Houses[houseid2][HousePrice] * 5) / 100))), houseid2);
					SendClientMessage(playerid, WHITE, string);
					format(string, sizeof(string), "You have been charged %s and received house %d!", PrettyMoney((GetPVarInt(pid, "HOUSE_SWAP_DIFF") + ((Houses[houseid][HousePrice] * 5) / 100))), houseid);
					SendClientMessage(pid, WHITE, string);
					
					AddToOwnerHistory(playerid, houseid2);
					AddToOwnerHistory(pid, houseid);
				}
				return 1;
			}
			case DIALOG_BUY_HOUSE_CONFIRM:
			{
				if(!response)
					return SendClientMessage(playerid, WHITE, "You have torn up the contract and tossed it into the trash.");
				
				if(strlen(inputtext) < 1)
					return SendClientMessage(playerid, -1, "You can't leave the contract blank!");
					
				new slot = -1;
				if(Player[playerid][House] < 1)
					slot = 1;
				else if(Player[playerid][VipRank] > 1 && Player[playerid][House] > 0 && Player[playerid][House2] < 1)
					slot = 2;
				new houseid = GetPVarInt(playerid, "BUY_HOUSE_HOUSEID");
				switch(slot)
				{
					case 1: Player[playerid][House] = houseid;
					case 2: Player[playerid][House2] = houseid;
				}

				if(slot == -1)
					return SendClientMessage(playerid, WHITE, "You don't have any more house slots.");

				Player[playerid][BankMoney] -= GetPVarInt(playerid, "BUY_HOUSE_PRICE");

				new string[128];
				format(string, sizeof(string), "Congratulations, you are now the owner for house %d!", houseid);
				SendClientMessage(playerid, WHITE, string);
				SendClientMessage(playerid, WHITE, "By purchasing a house, you've unlocked a bunch of new commands; use /help to find them out!");
				format(string, sizeof(string), "[HOUSE] %s has purchased House %d for %s.", Player[playerid][NormalName], houseid, PrettyMoney(GetPVarInt(playerid, "BUY_HOUSE_PRICE")));
				StatLog(string);

				new name[MAX_PLAYER_NAME];
				format(name, sizeof(name), "%s", CutBeforeLine(Player[playerid][FakeIDString]));
				new i;
				while ((i = strfind(inputtext, "_", false, i)) != -1)
					inputtext[i] = ' ';
				strdel(name, 0, 6);
				if(!strcmp(name, inputtext, true))
				{
					Houses[houseid][hFakeOwner] = 1;
					SendClientMessage(playerid, YELLOW, "This house will not show up under your real name when searched by the LSPD.");
				}

				format(Houses[houseid][hOwner], 255, "%s", Player[playerid][NormalName]);

				DestroyDynamicPickup(Houses[houseid][HPickupID]);
				UpdateObjectLabel(houseid, LABEL_TYPE_HOUSE, .create = 0);
				Houses[houseid][HPickupID] = CreateDynamicPickup(1272, 23, Houses[houseid][hExteriorX], Houses[houseid][hExteriorY], Houses[houseid][hExteriorZ], Houses[houseid][hExteriorVW], Houses[houseid][hExteriorID], -1, 150.0);

				SaveHouse(houseid);
				SavePlayerData(playerid);
				
				DeletePVar(playerid, "BUY_HOUSE_PRICE");
				DeletePVar(playerid, "BUY_HOUSE_HOUSEID");
				AddToOwnerHistory(playerid, houseid);
				return 1;
			}
			case 594:
			{
				if(response == 0)
				{
					SendClientMessage(playerid, WHITE, "Fine, have it your way!");
					KickEx(playerid);
				}
				else
				{
					new pname[MAX_PLAYER_NAME], illegalchar, underscore;
					strcpy(pname, inputtext, MAX_PLAYER_NAME);
					new illegalchars[] =
					{
						'`', '~', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '=', '+',
						'[', '{', ']', '}', '\\', '|', '"', ';', ':', '?', '/', '.', '>', ',',
						'<', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')'
					};

					for(new i; i < strlen(pname); i++)
					{
						if(pname[i] == '_') underscore++;
						for(new x; x < sizeof(illegalchars); x++)
						{
							if(pname[i] == illegalchars[x])
								illegalchar++;
						}
					}
					if((strlen(inputtext) >= 3 && strlen(inputtext) < 20) && underscore < 2 && illegalchar == 0)
					{
						if(IsPlayerRegistered(inputtext))
						{
							ShowPlayerDialog(playerid, 594, DIALOG_STYLE_INPUT, "Roleplay Name", "Please select a new, valid roleplaying name.", "Change", "Cancel");
							SendClientMessage(playerid, WHITE, "Sorry, that name is taken.");
						}
						else
						{
							if(strfind(inputtext, "_") != -1)
							{	
								if(!IsAccountApproved(inputtext))
								{
									SendClientMessage(playerid, ORANGE, ACCOUNT_CREATION_STRING);
									SendClientMessage(playerid, ORANGE, ACCOUNT_CREATION_STRING);
									SendClientMessage(playerid, ORANGE, ACCOUNT_CREATION_STRING);
									KickEx(playerid);
									return 1;
								}
								
								
								SetPlayerNameEx(playerid, inputtext);
								format(Player[playerid][NormalName], 25, "%s", inputtext);
								SendClientMessage(playerid, YELLOW, "Your name has been changed!");
								ShowPlayerDialog(playerid, 3895, DIALOG_STYLE_INPUT, "Registration", "Please enter your password to register your account.", "Register", "Cancel");
								SendClientMessage(playerid, ANNOUNCEMENT, "You will automatically be logged in, once you have registered.");
							}
							else
							{
								SendClientMessage(playerid, WHITE, "You must include an underscore.");
								ShowPlayerDialog(playerid, 594, DIALOG_STYLE_INPUT, "Roleplay Name", "Please select a new, valid roleplaying name.", "Change", "Cancel");
							}
						}
					}
					else
					{
						SendClientMessage(playerid, WHITE, "Sorry - that's not valid either.");
						ShowPlayerDialog(playerid, 594, DIALOG_STYLE_INPUT, "Roleplay Name", "Please select a new, valid roleplaying name.", "Change", "Cancel");
					}
				}
			}
			case 104:
			{
				switch(listitem)
				{
					case 0:
					{
						PutPlayerInTutorial(playerid, 1);
					}
					case 1:
					{
						PutPlayerInTutorial(playerid, 2);
						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					}
					case 2:
					{
						PutPlayerInTutorial(playerid, 1);
					}
				}
			}
			case 105:
			{
				switch(listitem)
				{
					case 0:
					{
						SendClientMessage(playerid, WHITE, "Alright, let's get stuck in then. ");
						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
						SendClientMessage(playerid, WHITE, "INTRODUCTION");
						SendClientMessage(playerid, WHITE, "Welcome to the server tutorial. This tutorial was created to help you around the server, so you know where things");
						SendClientMessage(playerid, WHITE, "are, and the basic parts of game play on our server - we have quite a few very unique features you may not be used to.");
						SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");

						Player[playerid][ServerTut] = 1;
					}
					case 1:
					{
						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
						ShowPlayerDialog(playerid, 106, DIALOG_STYLE_LIST, "Please Specify Your Gender", "Male\nFemale", "Select", "Cancel");
						SendClientMessage(playerid, WHITE, "Roger that, so let's get a bit of vital information before you can spawn!");
						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					}
				}
			}
			case 106:
			{
				switch(listitem)
				{
					case 0:
					{
						Player[playerid][Gender] = 1;
						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
						ShowPlayerDialog(playerid, 116, DIALOG_STYLE_LIST, "Please Specify Your Race", "White\nBlack\nAsian\nHispanic\n", "Select", "Cancel");
						//ShowPlayerDialog(playerid, 107, DIALOG_STYLE_LIST, "Please Specify Your Age", "18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40", "Select", "Cancel");
						SendClientMessage(playerid, WHITE, "Okay, so you're a dude. Let's just get your character's race!");
						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					}
					case 1:
					{
						Player[playerid][Gender] = 2;
						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
						ShowPlayerDialog(playerid, 116, DIALOG_STYLE_LIST, "Please Specify Your Race", "White\nBlack\nAsian\nHispanic\n", "Select", "Cancel");
						//ShowPlayerDialog(playerid, 107, DIALOG_STYLE_LIST, "Please Specify Your Age", "18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40", "Select", "Cancel");
						SendClientMessage(playerid, WHITE, "Okay, so you're a chick. Let's just get your character's race!");
						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					}
				}
			}
			case 116:
			{
				new string[128], end[255];
				Player[playerid][Race] = listitem;
				for(new i; i < 52; i++) //18 - 70
				{
					format(string, sizeof(string), "%d\n", i+18);
					strcat(end, string);
				}
				//"18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40"
				ShowPlayerDialog(playerid, 107, DIALOG_STYLE_LIST, "Please Specify Your Age", end, "Select", "Cancel");

				format(string, sizeof(string), "Okay, so your race is %s. Let's just get your character's age!", inputtext);
				SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
				SendClientMessage(playerid, WHITE, string);
				SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
			}
			case 107:
			{
				new string[128];
				listitem += 18;
				Player[playerid][Age] = listitem;
				Player[playerid][Tutorial] = 0;
				SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
				format(string, sizeof(string), "Okay, so your character is %d.", Player[playerid][Age]);
				SendClientMessage(playerid, WHITE, string);
				SendClientMessage(playerid, WHITE, "Now, we can let you spawn. We hope that you enjoy your experience here and play here regularly.");
				SendClientMessage(playerid, WHITE, "If you have any server-related questions, please use /newbie (or /n for short).");
				SendClientMessage(playerid, WHITE, "Other players online will get messages you send in /n, and are always willing to answer your questions.");
				SendClientMessage(playerid, WHITE, "We also have an /ask command, where our moderators and lower level admins will help answer your questions.");
				SendClientMessage(playerid, WHITE, "Use that at any time you need assistance with anything on the server. EG: \"/ask Where can I find the Transfender?\"");
				SendClientMessage(playerid, WHITE, "Another very useful command is /map. That will give you checkpoints to the nearest job, buisness or any other place");
				SendClientMessage(playerid, WHITE, "that is listed in the dialog. use this at any time that you are lost in-game, or trying to find a place.");
				SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");

				PutPlayerInTutorial(playerid, 99);
			}
			case 1195:
			{
				if(strcmp(inputtext, "yes", true) == 0)
				{
					ShowPlayerDialog(playerid, 3895, DIALOG_STYLE_INPUT, "Registration", "Please enter your password to register your account.", "Register", "Cancel");
					SendClientMessage(playerid, ANNOUNCEMENT, "You will automatically be logged in, once you have registered.");
				}
				else
				{
					SendClientMessage(playerid, WHITE, "Incorrect - You may not play.");
					KickEx(playerid);
				}
			}
			case 346: //Grotti
			{
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialog(playerid, 347, DIALOG_STYLE_LIST, "Vehicle Dealership - Sports", "Alpha ($50,000)\nBanshee ($120,000)\nComet ($60,000)\nSultan ($100,000)\nSuper GT ($175,000)\nFlash ($70,000)\nEuros ($50,000)\nBack\n", "Select", "Cancel");
					}
					case 1:
					{
						ShowPlayerDialog(playerid, 348, DIALOG_STYLE_LIST, "Vehicle Dealership - Four-Wheel Drive", "Huntley ($45,000)\nLandstalker ($25,000)\nRancher ($30,000)\nSandking ($70,000)\nBack\n", "Select", "Cancel");
					}
					case 2:
					{
						ShowPlayerDialog(playerid, 349, DIALOG_STYLE_LIST, "Vehicle Dealership - Lowriders", "Remington ($30,000)\nSavanna ($20,000)\nBack\n", "Select", "Cancel");
					}
					case 3:
					{
						ShowPlayerDialog(playerid, 350, DIALOG_STYLE_LIST, "Vehicle Dealership - Two-Door", "Buccaneer ($20,000)\nEsperanto ($15,500)\nFortune ($12,500)\nHustler ($150,000)\nSabre ($45,000)\nStallion ($15,000)\nVirgo ($12,500)\nFeltzer ($40,000)\nWindsor ($100,000)\nBack\n", "Select", "Cancel");
					}
					case 4:
					{
						ShowPlayerDialog(playerid, 310, DIALOG_STYLE_LIST, "Vehicle Dealership - Four-Door", "Greenwood ($25,000)\nPremier ($24,000)\nStretch ($80,000)\nSentinel ($40,000)\nSolair ($25,000)\nSunrise ($24,000)\nVincent ($27,250)\nWashington ($30,000)\nStafford ($80,000)\nBack\n", "Select", "Cancel");
					}
					case 5:
					{
						ShowPlayerDialog(playerid, 351, DIALOG_STYLE_LIST, "Vehicle Dealership - Bikes", "Freeway ($25,000)\nWayfarer ($10,000)\nBack\n", "Select", "Cancel");
					}
					case 6:
					{
						//ShowPlayerDialog(playerid, 352, DIALOG_STYLE_LIST, "Vehicle Dealership - VIP Models", "Cheetah ($100,000)\nBullet ($125,000)\nInfernus ($150,000)\nNRG-500 ($50,000)\nTurismo ($100,000)\nMaverick ($150,000)\nSanchez ($25,000)\nQuadbike ($25,000)\n", "Select", "Cancel");
						ShowPlayerDialog(playerid, 352, DIALOG_STYLE_LIST, "Vehicle Dealership - VIP Models", "Stafford ($100,000)\nZR 350 ($125,000)\nWalton ($50,000)\nSparrow ($125,000)\nClub ($100,000)\nFaggio ($25,000)\n", "Select", "Cancel");
					}
				}
			}
			case 8000:
			{
				if(!response)
					return 1;

				switch(listitem)
				{
					case 0: PurchaseCar(playerid, 481, 2000, 2);
					case 1: PurchaseCar(playerid, 510, 2000, 2);
					case 2: PurchaseCar(playerid, 509, 2000, 2);
				}
			}
			case 8001:
			{
				if(!response)
					return 1;

				switch(listitem)
				{
					case 0: PurchaseCar(playerid, 418, 22500, 3);
					case 1: PurchaseCar(playerid, 414, 90000, 3);
					case 2: PurchaseCar(playerid, 413, 65000, 3);
					case 3: PurchaseCar(playerid, 482, 55000, 3);
					case 4: PurchaseCar(playerid, 440, 70000, 3);
					case 5: PurchaseCar(playerid, 499, 65000, 3);
					case 6: PurchaseCar(playerid, 498, 60000, 3);
				}
			}
			case 7100: // Coutt & Schuttz
			{
			    switch(listitem)
				{
	                case 0: ShowPlayerDialog(playerid, 7101, DIALOG_STYLE_LIST, "Vehicle Dealership - Sports", "Blista ($25,000)\nBuffalo ($50,000)\nPhoenix ($40,000)\nClub ($25,000)\nBack\n", "Select", "Cancel");
					case 1: ShowPlayerDialog(playerid, 7102, DIALOG_STYLE_LIST, "Vehicle Dealership - Four-Wheel Drive", "Bobcat ($12,000)\nMesa ($20,000)\nPicador ($21,000)\nSadler ($18,000)\nYosemite ($15,000)\nJourney ($80,000)\nBack\n", "Select", "Cancel");
					case 2: ShowPlayerDialog(playerid, 7103, DIALOG_STYLE_LIST, "Vehicle Dealership - Lowriders", "Blade ($17,000)\nSlamvan ($12,500)\nTornado ($15,000)\nVoodoo ($22,500)\nBroadway ($25,000)\nBack\n", "Select", "Cancel");
					case 3: ShowPlayerDialog(playerid, 7104, DIALOG_STYLE_LIST, "Vehicle Dealership - Two-Door", "Bravura ($4,000)\nCadrona ($4,000)\nClover ($5,000)\nMajestic ($5,000)\nManana ($4,000)\nPrevion ($4,000)\nTampa ($4,500)\nWalton ($12,500)\nHermes ($25,000)\nBack\n", "Select", "Cancel");
					case 4: ShowPlayerDialog(playerid, 7105, DIALOG_STYLE_LIST, "Vehicle Dealership - Four-Door", "Elegant ($22,500)\nEmperor ($22,500)\nIntruder ($22,500)\nNebula ($22,500)\nPerennial ($17,500)\nPrimo ($22,500)\nRegina ($20,000)\nWillard ($22,500)\nTahoma ($25,000)\nGlendale ($20,000)\nStratum ($50,000)\nMerit ($25,500)\nAdmiral ($25,000)\nTaxi ($45,000)\nBack\n", "Select", "Cancel");
					case 5: ShowPlayerDialog(playerid, 7106, DIALOG_STYLE_LIST, "Vehicle Dealership - Bikes", "FCR-900 ($20,000)\nPCJ-600 ($20,000)\nBF-400 ($8,000)\nBack\n", "Select", "Cancel");
				}
			}
			case 7101: // Sports - C&S
			{
			    switch(listitem)
			    {
			    	case 0: // Blista (496) $25,000
					{
						Player[playerid][CarBeingCarried] = 496;
						Player[playerid][CarPriceBeingCarried] = 25000;
					}
			    	case 1: // Buffalo (402) $50,000
					{
						Player[playerid][CarBeingCarried] = 402;
						Player[playerid][CarPriceBeingCarried] = 50000;
					}
					case 2: //Phoenix (603) $40,000
					{
						Player[playerid][CarBeingCarried] = 603;
						Player[playerid][CarPriceBeingCarried] = 40000;
					}
					case 3: // Club (589) $25,000
					{
						Player[playerid][CarBeingCarried] = 589;
						Player[playerid][CarPriceBeingCarried] = 25000;
					}
					case 4: // Back
					{
						return ShowPlayerDialog(playerid, 7100, DIALOG_STYLE_LIST, "Vehicle Dealership", "Sports\nFour-Wheel Drive\nLowriders\nTwo-Door\nFour-Door\nBikes\n", "Select", "Cancel");
					}
			    }
				PurchaseCar(playerid, Player[playerid][CarBeingCarried], Player[playerid][CarPriceBeingCarried], 1);
			}
			case 7102: // 4WD - C&S
			{
			    switch(listitem)
			    {
			    	case 0: // Bobcat (422) $12,000
					{
						Player[playerid][CarBeingCarried] = 422;
						Player[playerid][CarPriceBeingCarried] = 12000;
					}
			    	case 1: // Mesa (500) $20,000
					{
						Player[playerid][CarBeingCarried] = 500;
						Player[playerid][CarPriceBeingCarried] = 20000;
					}
			    	case 2: // Picador (600) $21,000
					{
						Player[playerid][CarBeingCarried] = 600;
						Player[playerid][CarPriceBeingCarried] = 21000;
					}
					case 3: // Sadler (543) $18,000
					{
						Player[playerid][CarBeingCarried] = 543;
						Player[playerid][CarPriceBeingCarried] = 18000;
					}
					case 4: // Yosemite (554) $15,000
					{
						Player[playerid][CarBeingCarried] = 554;
						Player[playerid][CarPriceBeingCarried] = 15000;
					}
					case 5: // Journey (508) $80,000
					{
						Player[playerid][CarBeingCarried] = 508;
						Player[playerid][CarPriceBeingCarried] = 80000;
					}
					case 6: // Back
					{
						return ShowPlayerDialog(playerid, 7100, DIALOG_STYLE_LIST, "Vehicle Dealership", "Sports\nFour-Wheel Drive\nLowriders\nTwo-Door\nFour-Door\nBikes\n", "Select", "Cancel");
					}
			    }
				PurchaseCar(playerid, Player[playerid][CarBeingCarried], Player[playerid][CarPriceBeingCarried], 1);
			}
			case 7103: // Lowriders - C&S
			{
			    switch(listitem)
			    {
			    	case 0: // Blade (536) $17,000
					{
						Player[playerid][CarBeingCarried] = 536;
						Player[playerid][CarPriceBeingCarried] = 17000;
					}
			    	case 1: // Slamvan (535) $12,500
					{
						Player[playerid][CarBeingCarried] = 535;
						Player[playerid][CarPriceBeingCarried] = 12500;
					}
			    	case 2: // Tornado (576) $15,000
					{
						Player[playerid][CarBeingCarried] = 576;
						Player[playerid][CarPriceBeingCarried] = 15000;
					}
					case 3: // Voodoo (412) $22,500
					{
						Player[playerid][CarBeingCarried] = 412;
						Player[playerid][CarPriceBeingCarried] = 22500;
					}
					case 4: // Broadway (575) $25,000
					{
						Player[playerid][CarBeingCarried] = 575;
						Player[playerid][CarPriceBeingCarried] = 25000;
					}
					case 5: // Back
					{
						return ShowPlayerDialog(playerid, 7100, DIALOG_STYLE_LIST, "Vehicle Dealership", "Sports\nFour-Wheel Drive\nLowriders\nTwo-Door\nFour-Door\nBikes\n", "Select", "Cancel");
					}
			    }
				PurchaseCar(playerid, Player[playerid][CarBeingCarried], Player[playerid][CarPriceBeingCarried], 1);
			}
			case 7104: // Two-Door - C&S
			{
			    switch(listitem)
			    {
			    	case 0: // Bravura (401) $4,000
					{
						Player[playerid][CarBeingCarried] = 401;
						Player[playerid][CarPriceBeingCarried] = 4000;
					}
			    	case 1: // Cadrona (527) $4,000
					{
						Player[playerid][CarBeingCarried] = 527;
						Player[playerid][CarPriceBeingCarried] = 4000;
					}
			    	case 2: // Clover (542) $5,000
					{
						Player[playerid][CarBeingCarried] = 542;
						Player[playerid][CarPriceBeingCarried] = 5000;
					}
			    	case 3: // Majestic (517) $5,000
					{
						Player[playerid][CarBeingCarried] = 517;
						Player[playerid][CarPriceBeingCarried] = 5000;
					}
					case 4: // Manana (410) $4,000
					{
						Player[playerid][CarBeingCarried] = 410;
						Player[playerid][CarPriceBeingCarried] = 4000;
					}
					case 5: // Previon (436) $4,000
					{
						Player[playerid][CarBeingCarried] = 436;
						Player[playerid][CarPriceBeingCarried] = 4000;
					}
					case 6: // Tampa (549) $4,500
					{
						Player[playerid][CarBeingCarried] = 549;
						Player[playerid][CarPriceBeingCarried] = 4500;
					}
					case 7: // Walton (478) $12,500
					{
						Player[playerid][CarBeingCarried] = 478;
						Player[playerid][CarPriceBeingCarried] = 12500;
					}
					case 8: // Hermes (474) $25,000
					{
						Player[playerid][CarBeingCarried] = 474;
						Player[playerid][CarPriceBeingCarried] = 25000;
					}
					case 9: // back
					{
						return ShowPlayerDialog(playerid, 7100, DIALOG_STYLE_LIST, "Vehicle Dealership", "Sports\nFour-Wheel Drive\nLowriders\nTwo-Door\nFour-Door\nBikes\n", "Select", "Cancel");
					}
			    }
				PurchaseCar(playerid, Player[playerid][CarBeingCarried], Player[playerid][CarPriceBeingCarried], 1);
			}
			case 7105: // Four-Door - C&S
			{
			    switch(listitem)
			    {
			    	case 0: // Elegant (507) $22,500
					{
						Player[playerid][CarBeingCarried] = 507;
						Player[playerid][CarPriceBeingCarried] = 22500;
					}
			    	case 1: // Emperor (585) $22,500
					{
						Player[playerid][CarBeingCarried] = 585;
						Player[playerid][CarPriceBeingCarried] = 22500;
					}
			    	case 2: // Intruder (546) $22,500
					{
						Player[playerid][CarBeingCarried] = 546;
						Player[playerid][CarPriceBeingCarried] = 22500;
					}
			    	case 3: // Nebula (516) $22,500
					{
						Player[playerid][CarBeingCarried] = 516;
						Player[playerid][CarPriceBeingCarried] = 22500;
					}
					case 4: // Perennial (404) $17,500
					{
						Player[playerid][CarBeingCarried] = 404;
						Player[playerid][CarPriceBeingCarried] = 17500;
					}
					case 5: // Primo (547) $22,500
					{
						Player[playerid][CarBeingCarried] = 547;
						Player[playerid][CarPriceBeingCarried] = 22500;
					}
					case 6: // Regina (479) $20,000
					{
						Player[playerid][CarBeingCarried] = 479;
						Player[playerid][CarPriceBeingCarried] = 20000;
					}
					case 7: // Willard (529) $22,500
					{
						Player[playerid][CarBeingCarried] = 529;
						Player[playerid][CarPriceBeingCarried] = 22500;
					}
					case 8: // Tahoma (566) $25,000
					{
						Player[playerid][CarBeingCarried] = 566;
						Player[playerid][CarPriceBeingCarried] = 25000;
					}
					case 9: // Glendale (466) $20,000
					{
						Player[playerid][CarBeingCarried] = 466;
						Player[playerid][CarPriceBeingCarried] = 20000;
					}
					case 10: // Stratum (561) $50,000
					{
						Player[playerid][CarBeingCarried] = 561;
						Player[playerid][CarPriceBeingCarried] = 50000;
					}
					case 11: // Merit (551) $25,500
					{
						Player[playerid][CarBeingCarried] = 551;
						Player[playerid][CarPriceBeingCarried] = 25500;
					}
					case 12: // Admiral (445) $25,000
					{
						Player[playerid][CarBeingCarried] = 445;
						Player[playerid][CarPriceBeingCarried] = 25000;
					}
					case 13: // Taxi (420) $45,000
					{
						Player[playerid][CarBeingCarried] = 420;
						Player[playerid][CarPriceBeingCarried] = 45000;
					}
					case 14: // Back
					{
						return ShowPlayerDialog(playerid, 7100, DIALOG_STYLE_LIST, "Vehicle Dealership", "Sports\nFour-Wheel Drive\nLowriders\nTwo-Door\nFour-Door\nBikes\n", "Select", "Cancel");
					}
			    }
				PurchaseCar(playerid, Player[playerid][CarBeingCarried], Player[playerid][CarPriceBeingCarried], 1);
			}
			case 7106: // Bikes - C&S
			{
			    switch(listitem)
			    {
			    	case 0: // FCR-900 (521) $20,000
					{
						Player[playerid][CarBeingCarried] = 521;
						Player[playerid][CarPriceBeingCarried] = 20000;
					}
			    	case 1: // PCJ-600 (461) $20,000
					{
						Player[playerid][CarBeingCarried] = 461;
						Player[playerid][CarPriceBeingCarried] = 20000;
					}
					case 2: // BF-400 (581) $8000
					{
						Player[playerid][CarBeingCarried] = 581;
						Player[playerid][CarPriceBeingCarried] = 8000;
					}
					case 3: // Back
					{
						return ShowPlayerDialog(playerid, 7100, DIALOG_STYLE_LIST, "Vehicle Dealership", "Sports\nFour-Wheel Drive\nLowriders\nTwo-Door\nFour-Door\nBikes\n", "Select", "Cancel");
					}
			    }
				PurchaseCar(playerid, Player[playerid][CarBeingCarried], Player[playerid][CarPriceBeingCarried], 1);
			}
			case 5541:
			{
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialog(playerid, 5542, DIALOG_STYLE_LIST, "Boat List", "Dinghy ($8,500)\nMarquis ($250,000)\nSqualo ($1,000,000)", "Select", "Cancel");
					}
					case 1:
					{
						ShowPlayerDialog(playerid, 5543, DIALOG_STYLE_LIST, "VIP Boat List", "Reefer ($80,000)\nSpeeder ($250,000)\nTropic ($200,000)\nJetmax ($800,000)", "Select", "Cancel");
					}
				}
			}
			case 310: // Four-Door
			{
				switch(listitem)
				{
					case 0: // Greenwood (492) $25,000
					{
						Player[playerid][CarBeingCarried] = 492;
						Player[playerid][CarPriceBeingCarried] = 25000;
					}
					case 1: // Premier (426) $24,000
					{
						Player[playerid][CarBeingCarried] = 426;
						Player[playerid][CarPriceBeingCarried] = 24000;
					}
					case 2: // Stretch (409) $80,000
					{
						Player[playerid][CarBeingCarried] = 409;
						Player[playerid][CarPriceBeingCarried] = 80000;
					}
					case 3: // Sentinel (405) $40,000
					{
						Player[playerid][CarBeingCarried] = 405;
						Player[playerid][CarPriceBeingCarried] = 40000;
					}
					case 4: // Solair (458) $25,000
					{
						Player[playerid][CarBeingCarried] = 458;
						Player[playerid][CarPriceBeingCarried] = 25000;
					}
					case 5: // Sunrise (550) $24,000
					{
						Player[playerid][CarBeingCarried] = 550;
						Player[playerid][CarPriceBeingCarried] = 24000;
					}
					case 6: // Vincent (540) $27,250
					{
						Player[playerid][CarBeingCarried] = 540;
						Player[playerid][CarPriceBeingCarried] = 27250;
					}
					case 7: // Washington (421) $30,000
					{
						Player[playerid][CarBeingCarried] = 421;
						Player[playerid][CarPriceBeingCarried] = 30000;
					}
					case 8: // Stafford (580) $80,000
					{
						Player[playerid][CarBeingCarried] = 580;
						Player[playerid][CarPriceBeingCarried] = 80000;
					}
					case 9: // Back
					{
						return ShowPlayerDialog(playerid, 346, DIALOG_STYLE_LIST, "Vehicle Dealership", "Sports\nFour-Wheel Drive\nLowriders\nTwo-Door\nFour-Door\nBikes\n", "Select", "Cancel");
					}
				}
				PurchaseCar(playerid, Player[playerid][CarBeingCarried], Player[playerid][CarPriceBeingCarried], 0);
			}
			case 352:
			{
				switch(listitem)
				{
					case 0: // Stafford (580) ($100,000)
					{
						Player[playerid][CarBeingCarried] = 580;
						Player[playerid][CarPriceBeingCarried] = 100000;
					}
					case 1: // ZR-350 (477) ($125,000)
					{
						Player[playerid][CarBeingCarried] = 477;
						Player[playerid][CarPriceBeingCarried] = 125000;
					}
					case 2: // Walton (478) ($50,000)
					{
						Player[playerid][CarBeingCarried] = 478;
						Player[playerid][CarPriceBeingCarried] = 50000;
					}
					case 3: // Sparrow (469) ($125,000)
					{
						Player[playerid][CarBeingCarried] = 469;
						Player[playerid][CarPriceBeingCarried] = 125000;
					}
					case 4: // Club (589) ($100,000)
					{
						Player[playerid][CarBeingCarried] = 589;
						Player[playerid][CarPriceBeingCarried] = 100000;
					}
					case 5: // Faggio (462) ($25,000)
					{
						Player[playerid][CarBeingCarried] = 462;
						Player[playerid][CarPriceBeingCarried] = 25000;
					}
				}
				SetPVarInt(playerid, "BuyingVIPCar", 1);
				PurchaseCar(playerid, Player[playerid][CarBeingCarried], Player[playerid][CarPriceBeingCarried], 0);
			}
			case 5542:
			{
				switch(listitem)
				{
					case 0:
					{
						Player[playerid][CarBeingCarried] = 473; //Dinghy
						Player[playerid][CarPriceBeingCarried] = 8500;
					}
					case 1:
					{
						Player[playerid][CarBeingCarried] = 484; //Marquis
						Player[playerid][CarPriceBeingCarried] = 250000;
					}
					case 2:
					{
						Player[playerid][CarBeingCarried] = 446; //Squalo
						Player[playerid][CarPriceBeingCarried] = 1000000;
					}
				}
				PurchaseBoat(playerid, Player[playerid][CarBeingCarried], Player[playerid][CarPriceBeingCarried]);
			}
			case 5543:
			{
				switch(listitem)
				{
					case 0:
					{
						Player[playerid][CarBeingCarried] = 453; //Reefer
						Player[playerid][CarPriceBeingCarried] = 80000;
					}
					case 1:
					{
						Player[playerid][CarBeingCarried] = 452; //Speeder
						Player[playerid][CarPriceBeingCarried] = 250000;
					}
					case 2:
					{
						Player[playerid][CarBeingCarried] = 454; //Tropic
						Player[playerid][CarPriceBeingCarried] = 200000;
					}
					case 3:
					{
						Player[playerid][CarBeingCarried] = 493; //Jetmax
						Player[playerid][CarPriceBeingCarried] = 800000;
					}
				}
				SetPVarInt(playerid, "BuyingVIPCar", 1);
				PurchaseBoat(playerid, Player[playerid][CarBeingCarried], Player[playerid][CarPriceBeingCarried]);
			}

			case 347: // Sports
			{
				switch(listitem)
				{
					case 0: // Alpha (602) $50,000
					{
						Player[playerid][CarBeingCarried] = 602;
						Player[playerid][CarPriceBeingCarried] = 50000;
					}
					case 1: // Banshee (429) $120,000
					{
						Player[playerid][CarBeingCarried] = 429;
						Player[playerid][CarPriceBeingCarried] = 120000;
					}
					case 2: // Comet (480) $60,000
					{
						Player[playerid][CarBeingCarried] = 480;
						Player[playerid][CarPriceBeingCarried] = 60000;
					}
					case 3: // Sultan (560) $100,000
					{
						Player[playerid][CarBeingCarried] = 560;
						Player[playerid][CarPriceBeingCarried] = 100000;
					}
					case 4: // Super GT (506) $175,000
					{
						Player[playerid][CarBeingCarried] = 506;
						Player[playerid][CarPriceBeingCarried] = 175000;						
					}
					case 5: // Flash (565) $70,000
					{
						Player[playerid][CarBeingCarried] = 565;
						Player[playerid][CarPriceBeingCarried] = 70000;
					}
					case 6: // Euros (587) $50,000
					{
						Player[playerid][CarBeingCarried] = 587;
						Player[playerid][CarPriceBeingCarried] = 50000;
					}					
					case 7: // Back
					{
						return ShowPlayerDialog(playerid, 346, DIALOG_STYLE_LIST, "Vehicle Dealership", "Sports\nFour-Wheel Drive\nLowriders\nTwo-Door\nFour-Door\nBikes\n", "Select", "Cancel");
					}
				}
				PurchaseCar(playerid, Player[playerid][CarBeingCarried], Player[playerid][CarPriceBeingCarried], 0);
			}
			case 348: // Four-Wheel Drive
			{
				switch(listitem)
				{
					case 0: // Huntley (579) $45,000
					{
						Player[playerid][CarBeingCarried] = 579;
						Player[playerid][CarPriceBeingCarried] = 45000;
					}
					case 1: // Landstalker (400) $25,000
					{
						Player[playerid][CarBeingCarried] = 400;
						Player[playerid][CarPriceBeingCarried] = 25000;
					}
					case 2: // Rancher (489) $30,000
					{
						Player[playerid][CarBeingCarried] = 489;
						Player[playerid][CarPriceBeingCarried] = 30000;
					}
					case 3: // Sandking (495) $70,000
					{
						Player[playerid][CarBeingCarried] = 495;
						Player[playerid][CarPriceBeingCarried] = 70000;
					}
					case 4: // Back
					{
						return ShowPlayerDialog(playerid, 346, DIALOG_STYLE_LIST, "Vehicle Dealership", "Sports\nFour-Wheel Drive\nLowriders\nTwo-Door\nFour-Door\nBikes\n", "Select", "Cancel");
					}
				}
				PurchaseCar(playerid, Player[playerid][CarBeingCarried], Player[playerid][CarPriceBeingCarried], 0);
			}
			case 349: // Lowriders
			{
				switch(listitem)
				{
					case 0: // Remington (534) $30,000
					{
						Player[playerid][CarBeingCarried] = 534;
						Player[playerid][CarPriceBeingCarried] = 30000;
					}
					case 1: // Savanna (567) $20,000
					{
						Player[playerid][CarBeingCarried] = 567;
						Player[playerid][CarPriceBeingCarried] = 20000;
					}
					case 2: // Back
					{
						return ShowPlayerDialog(playerid, 346, DIALOG_STYLE_LIST, "Vehicle Dealership", "Sports\nFour-Wheel Drive\nLowriders\nTwo-Door\nFour-Door\nBikes\n", "Select", "Cancel");
					}
				}
				PurchaseCar(playerid, Player[playerid][CarBeingCarried], Player[playerid][CarPriceBeingCarried], 0);
			}
			case 350: // Two-Door
			{
				switch(listitem)
				{
					case 0: // Buccaneer (518) $20,000
					{
						Player[playerid][CarBeingCarried] = 518;
						Player[playerid][CarPriceBeingCarried] = 20000;
					}
					case 1: // Esperanto (419) $15,500
					{
						Player[playerid][CarBeingCarried] = 419;
						Player[playerid][CarPriceBeingCarried] = 15500;
					}
					case 2: // Fortune (526) $43,000
					{
						Player[playerid][CarBeingCarried] = 526;
						Player[playerid][CarPriceBeingCarried] = 12500;
					}
					case 3: // Hustler (545) $150,000
					{
						Player[playerid][CarBeingCarried] = 545;
						Player[playerid][CarPriceBeingCarried] = 150000;
					}
					case 4: // Sabre (475) $45,000
					{
						Player[playerid][CarBeingCarried] = 475;
						Player[playerid][CarPriceBeingCarried] = 45000;
					}
					case 5: // Stallion (439) $15,000
					{
						Player[playerid][CarBeingCarried] = 439;
						Player[playerid][CarPriceBeingCarried] = 15000;
					}
					case 6: // Virgo (491) $12,500
					{
						Player[playerid][CarBeingCarried] = 491;
						Player[playerid][CarPriceBeingCarried] = 12500;
					}
					case 7: // Feltzer (533) $40,000
					{
						Player[playerid][CarBeingCarried] = 533;
						Player[playerid][CarPriceBeingCarried] = 40000;
					}
					case 8: // Windsor (555) $100,000
					{
						Player[playerid][CarBeingCarried] = 555;
						Player[playerid][CarPriceBeingCarried] = 100000;
					}
					case 9: // Back
					{
						return ShowPlayerDialog(playerid, 346, DIALOG_STYLE_LIST, "Vehicle Dealership", "Sports\nFour-Wheel Drive\nLowriders\nTwo-Door\nFour-Door\nBikes\n", "Select", "Cancel");
					}
				}
				PurchaseCar(playerid, Player[playerid][CarBeingCarried], Player[playerid][CarPriceBeingCarried], 0);
			}
			case 351: // Bikes
			{
				switch(listitem)
				{
					case 0: // Freeway (463) $25,000
					{
						Player[playerid][CarBeingCarried] = 463;
						Player[playerid][CarPriceBeingCarried] = 25000;
					}
					case 1: // Wayfarer (586) $10,000
					{
						Player[playerid][CarBeingCarried] = 586;
						Player[playerid][CarPriceBeingCarried] = 10000;
					}
					case 2: // Back
					{
						return ShowPlayerDialog(playerid, 346, DIALOG_STYLE_LIST, "Vehicle Dealership", "Sports\nFour-Wheel Drive\nLowriders\nTwo-Door\nFour-Door\nBikes\n", "Select", "Cancel");
					}
				}
				PurchaseCar(playerid, Player[playerid][CarBeingCarried], Player[playerid][CarPriceBeingCarried], 0);
			}
			case 81:
			{
				if(Player[playerid][InBusiness] == 0)
					return 1;
				new string[128];
				switch(listitem)
				{
					case 0:
					{
						if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice1])
						{
							SendClientMessage(playerid, WHITE, "You have purchased a bottle of Sprunk.");
							// Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
							SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
							Player[playerid][HadSprunk] = 5;
					//		TextDrawShowForPlayer(playerid, SprunkTextDraw);
							Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice1];
//							Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice1];
							AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice1]);
							SavePlayerData(playerid);
							format(string, sizeof(string), "%s has purchased a sprunk from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice1]);
							StatLog(string);
						}
						else
						{
							SendClientMessage(playerid, WHITE, "Insufficient money available.");
						}
					}
					case 1:
					{
						if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice2])
						{
							if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
							{
//								Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice2];
								AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice2]);
								Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice2];
								Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
								GenerateTrash(Player[playerid][InBusiness], 1);
					//			TextDrawShowForPlayer(playerid, SprunkTextDraw);
								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
								SendClientMessage(playerid, WHITE, "Use your ATTACK key to drink, and your SECONDARY ATTACK key to drop the drink.");
								SavePlayerData(playerid);
								format(string, sizeof(string), "%s has purchased wine from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice2]);
								StatLog(string);
							}
							else
							{
								SendClientMessage(playerid, WHITE, "That item is out of stock.");
							}
						}
					}
					case 2:
					{
						if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice3])
						{
							if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
							{
//								Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice3];
								AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice3]);
								Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice3];
								Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
								GenerateTrash(Player[playerid][InBusiness], 1);
								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
								SendClientMessage(playerid, WHITE, "Use your ATTACK key to drink, and your SECONDARY ATTACK key to drop the drink.");
								SavePlayerData(playerid);
								format(string, sizeof(string), "%s has purchased beer from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice3]);
								StatLog(string);
							}
							else
							{
								SendClientMessage(playerid, WHITE, "That item is out of stock.");
							}
						}
					}
					case 3:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice4])
							return SendClientMessage(playerid, -1, "Insufficient funds.");

						if(Businesses[Player[playerid][InBusiness]][bSupplies] < 60)
							return SendClientMessage(playerid, -1, "That item is out of stock.");

						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice4];
						Businesses[Player[playerid][InBusiness]][bSupplies] -= 60;
						GenerateTrash(Player[playerid][InBusiness], 30);
						Player[playerid][BeerCases]++;
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice4];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice4]);

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Case of Beer Help", "{FFFFFF}You have purchased a case of beer! Cases of beer are used for houses. You can store them in a fridge and drink them later on.\nEach case of beer contains 6 beers.\n\n{009900}Commands:{FFFFFF}\n/fridge", "Okay", "");
						else SendClientMessage(playerid, WHITE, "You have purchased a case of beer. Use /fridge in a house to use them.");
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased a case of beer from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice4]);
						StatLog(string);
					}
					case 4:
					{
						if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice5])
						{
							if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 10)
							{
								format(string, sizeof(string), "You have purchased a %s.", Businesses[Player[playerid][InBusiness]][bFoodName1]);
								SendClientMessage(playerid, WHITE, string);
								Businesses[Player[playerid][InBusiness]][bSupplies] -= 10;
								GenerateTrash(Player[playerid][InBusiness], 5);
								AddHunger(playerid, 20);

								new Float:health;
								GetPlayerHealth(playerid, health);
								health = floatround(health, floatround_ceil);
								if(health > 20 && health < 100)
								{
									if(health + 15 > 100)
										SetPlayerHealth(playerid, 100);
									else
										SetPlayerHealth(playerid, health + 15);
								}

								Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice5];
//								Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice5];
								AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice5]);
								SavePlayerData(playerid);
								format(string, sizeof(string), "%s has purchased food type 1 from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice5]);
								StatLog(string);
							}
							else
							{
								SendClientMessage(playerid, WHITE, "This business is out of stock.");
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "Insufficient money available.");
						}
					}
					case 5:
					{
						if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice6])
						{
							if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 15)
							{
								format(string, sizeof(string), "You have purchased a %s.", Businesses[Player[playerid][InBusiness]][bFoodName2]);
								SendClientMessage(playerid, WHITE, string);
								Businesses[Player[playerid][InBusiness]][bSupplies] -= 15;
								GenerateTrash(Player[playerid][InBusiness], 8);
								AddHunger(playerid, 28);

								new Float:health;
								GetPlayerHealth(playerid, health);
								health = floatround(health, floatround_ceil);
								if(health > 20 && health < 100)
								{
									if(health + 25 > 100)
										SetPlayerHealth(playerid, 100);
									else
										SetPlayerHealth(playerid, health + 25);
								}

								Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice6];
//								Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice6];
								AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice6]);
								SavePlayerData(playerid);
								format(string, sizeof(string), "%s has purchased food type 2 from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice6]);
								StatLog(string);
							}
							else
							{
								SendClientMessage(playerid, WHITE, "This business is out of stock.");
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "Insufficient money available.");
						}
					}
					case 6:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice7])
							return SendClientMessage(playerid, -1, "You don't have enough money for that.");

						if(Businesses[Player[playerid][InBusiness]][bSupplies] < 15)
						{

							format(string, sizeof(string), "That business has no more stock of %s.", Businesses[Player[playerid][InBusiness]][bFoodName3]);
							return SendClientMessage(playerid, -1, string);
						}


						format(string, sizeof(string), "You have purchased a %s.", Businesses[Player[playerid][InBusiness]][bFoodName3]);
						SendClientMessage(playerid, WHITE, string);
						Businesses[Player[playerid][InBusiness]][bSupplies] -= 15;
						GenerateTrash(Player[playerid][InBusiness], 8);
						AddHunger(playerid, 28);

						new Float:health;
						GetPlayerHealth(playerid, health);
						health = floatround(health, floatround_ceil);
						if(health > 20 && health < 100)
						{
							if(health + 25 > 100)
								SetPlayerHealth(playerid, 100);
							else
								SetPlayerHealth(playerid, health + 25);
						}

						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice7];
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice7];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice7]);
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased food type 3 from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice7]);
						StatLog(string);
					}
					case 7:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice8])
							return SendClientMessage(playerid, -1, "You don't have enough money for that.");

						if(Businesses[Player[playerid][InBusiness]][bSupplies] < 15)
						{
							format(string, sizeof(string), "That business has no more stock of %s.", Businesses[Player[playerid][InBusiness]][bFoodName4]);
							return SendClientMessage(playerid, -1, string);
						}


						format(string, sizeof(string), "You have purchased a %s.", Businesses[Player[playerid][InBusiness]][bFoodName4]);
						SendClientMessage(playerid, WHITE, string);
						Businesses[Player[playerid][InBusiness]][bSupplies] -= 15;
						GenerateTrash(Player[playerid][InBusiness], 8);
						AddHunger(playerid, 35);

						new Float:health;
						GetPlayerHealth(playerid, health);
						health = floatround(health, floatround_ceil);
						if(health > 20 && health < 100)
						{
							if(health + 25 > 100)
								SetPlayerHealth(playerid, 100);
							else
								SetPlayerHealth(playerid, health + 25);
						}

						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice8];
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice8];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice8]);
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased food type 4 from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice8]);
						StatLog(string);
					}
				}
				SaveBusiness(Player[playerid][InBusiness]);
			}
			case 4541:
			{
				if(strlen(inputtext) >= 1 && strlen(inputtext) < 70)
				{
					format(QuizQuestion, 128, "%s", inputtext);
					SendClientMessage(playerid, WHITE, "You have set the question.");
					ShowPlayerDialog(playerid, 4542, DIALOG_STYLE_INPUT, "Quiz Answer", "Set a VERY specific answer.", "Done", "Cancel");
				}
			}
			case 4542:
			{
				if(strlen(inputtext) >= 1 && strlen(inputtext) < 70)
				{
					new string[128];
					format(QuizAnswer, 255, "%s", inputtext);
					SendClientMessage(playerid, WHITE, "You have set the answer.");
					ActiveQuiz = 1;
					format(string, sizeof(string), "QUIZ ROUND: %s", QuizQuestion);
					QuizText(string);
					QuizText("Type /answerq along with your answer to answer the question!");
				}
			}
			case 8561:
			{
				if(Player[playerid][InBusiness] == 0)
					return 1;

				switch(listitem)
				{
					/*case 0:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice1])
							return SendClientMessage(playerid, -1, "Insufficient money available.");

						//SendClientMessage(playerid, WHITE, "You have purchased 500 grams of Pot.");
						Player[playerid][Speed] += 500;
						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice1];
						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice1];

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Speed Help", "{FFFFFF}You have purchased 500 pills of speed! You can use this to gain better accuracy when aiming your weapon. The effects will last 1 minute per gram.", "Okay", "");
						else SendClientMessage(playerid, WHITE, "You have purchased 500 pills of Speed.");
					}
					case 1:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice2])
							return SendClientMessage(playerid, -1, "Insufficient money available.");

						//SendClientMessage(playerid, WHITE, "You have purchased 1000 grams of Pot.");
						Player[playerid][Speed] += 1000;
						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice2];
						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice2];

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Speed Help", "{FFFFFF}You have purchased 1000 pills of speed! You can use this to gain better accuracy when aiming your weapon. The effects will last 1 minute per gram.", "Okay", "");
						else SendClientMessage(playerid, WHITE, "You have purchased 1000 pills of Speed.");
					}
					case 2:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice3])
							return SendClientMessage(playerid, -1, "Insufficient money available.");

						//SendClientMessage(playerid, WHITE, "You have purchased 1500 grams of Pot.");
						Player[playerid][Speed] += 1500;
						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice3];
						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice3];

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Speed Help", "{FFFFFF}You have purchased 1500 pills of speed! You can use this to gain better accuracy when aiming your weapon. The effects will last 1 minute per gram.", "Okay", "");
						else SendClientMessage(playerid, WHITE, "You have purchased 1500 pills of Speed.");
					}
					case 3:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice4])
							return SendClientMessage(playerid, -1, "Insufficient money available.");

						//SendClientMessage(playerid, WHITE, "You have purchased 5000 grams of Pot.");
						Player[playerid][Speed] += 5000;
						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice4];
						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice4];

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Speed Help", "{FFFFFF}You have purchased 5000 pills of speed! You can use this to gain better accuracy when aiming your weapon. The effects will last 1 minute per gram.", "Okay", "");
						else SendClientMessage(playerid, WHITE, "You have purchased 5000 pills of Speed.");
					}
					case 4:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice5])
							return SendClientMessage(playerid, -1, "Insufficient money available.");

						//SendClientMessage(playerid, WHITE, "You have purchased 500 grams of Cocaine.");
						Player[playerid][Cocaine] += 500;
						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice5];
						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice5];

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Cocaine Help", "{FFFFFF}You have purchased 500 grams of cocaine! You can use this to gain armour but there are some adverse effects such as your screen swaying\nand fog. The effects will last 1 minute per gram\n\n{009900}Commands:{FFFFFF}\n/usecocaine", "Okay", "");
						else SendClientMessage(playerid, WHITE, "You have purchased 500 grams of Cocaine.");
					}
					case 5:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice6])
							return SendClientMessage(playerid, -1, "Insufficient money available.");

						//SendClientMessage(playerid, WHITE, "You have purchased 1000 grams of Cocaine.");
						Player[playerid][Cocaine] += 1000;
						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice6];
						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice6];

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Cocaine Help", "{FFFFFF}You have purchased 1000 grams of cocaine! You can use this to gain armour but there are some adverse effects such as your screen swaying\nand fog. The effects will last 1 minute per gram\n\n{009900}Commands:{FFFFFF}\n/usecocaine", "Okay", "");
						else SendClientMessage(playerid, WHITE, "You have purchased 1000 grams of Cocaine.");
					}
					case 6:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice7])
							return SendClientMessage(playerid, -1, "Insufficient money available.");

						//SendClientMessage(playerid, WHITE, "You have purchased 1500 grams of Cocaine.");
						Player[playerid][Cocaine] += 1500;
						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice7];
						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice7];

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Cocaine Help", "{FFFFFF}You have purchased 1500 grams of cocaine! You can use this to gain armour but there are some adverse effects such as your screen swaying\nand fog. The effects will last 1 minute per gram\n\n{009900}Commands:{FFFFFF}\n/usecocaine", "Okay", "");
						else SendClientMessage(playerid, WHITE, "You have purchased 1500 grams of Cocaine.");
					}
					case 7:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice8])
							return SendClientMessage(playerid, -1, "Insufficient money available.");

						//SendClientMessage(playerid, WHITE, "You have purchased 5000 grams of Cocaine.");
						Player[playerid][Cocaine] += 5000;
						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice8];
						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice8];

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Cocaine Help", "{FFFFFF}You have purchased 5000 grams of cocaine! You can use this to gain armour but there are some adverse effects such as your screen swaying\nand fog. The effects will last 1 minute per gram\n\n{009900}Commands:{FFFFFF}\n/usecocaine", "Okay", "");
						else SendClientMessage(playerid, WHITE, "You have purchased 5000 grams of Cocaine.");
					}*/
					case 0:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice9])
							return SendClientMessage(playerid, -1, "Insufficient money available.");

						if(Player[playerid][GrowLight] > 0)
							return SendClientMessage(playerid, -1, "You already have a grow light.");

						Player[playerid][GrowLight] = 1;
						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice9];
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice9];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice9]);

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Grow Light Help", "{FFFFFF}You have purchased a Fluorescent Grow Light! You can use this to grow pot in your house. It will take 1 hour for pot to grow, and then 3 hours to die.\n\n{009900}Commands:{FFFFFF}\n/installgrowlight", "Okay", "");
						else SendClientMessage(playerid, WHITE, "You have purchased a Fluorescent Grow Light.");
						new string[128];
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased a grow light from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice9]);
						StatLog(string);
					}
					case 1:
					{
						SetPVarInt(playerid, "INPUT_AMOUNT_ID", 1);
						ShowDialog(playerid, INPUT_AMOUNT, "Input the amount of seeds you wish to buy.");
					}
				}
				SaveBusiness(Player[playerid][InBusiness]);
			}
			case 3666:
			{
				new string[128];

				if(strlen(inputtext) >= 1)
				{
					new salt[32], pass[161], buff[162];
					randomString(salt, 31);
					format(Player[playerid][pSalt], 32, "%s", salt);
					strcat(pass, inputtext, sizeof(pass));
					strcat(pass, Player[playerid][pSalt], sizeof(pass));
					WP_Hash(buff, sizeof(buff), pass);
					format(Player[playerid][Password], 161, "%s", buff);
					format(string, sizeof(string), "Password changed to '%s'.", inputtext);
					SendClientMessage(playerid, WHITE, string);
				}
			}
			case 1621:
			{
				if(!response)
					return 1;

				new supplies;
				switch(Player[playerid][Deliveries])
				{
					case 0 .. 49: supplies = 5;
					case 50 .. 99: supplies = 10;
					case 100 .. 149: supplies = 15;
					case 150 .. 199: supplies = 20;
					case 200 .. 249: supplies = 25;
					case 250 .. 299: supplies = 30;
					case 300 .. 349: supplies = 35;
					case 350 .. 399: supplies = 40;
					case 400 .. 449: supplies = 45;
					case 450 .. 499: supplies = 50;
					default: supplies = 55;
				}

				if(supplies > DelivererSupplies)
					return SendClientMessage(playerid, -1, "There are not enough supplies for you to grab.");

				new string[128];
				format(string, sizeof(string), "* %s reaches towards the bag of supplies, grabbing ahold of it.", GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, string);

				Player[playerid][DeliverTime] = gettime() + 60;

				switch(listitem)
				{
					case 0:
					{
						Player[playerid][SupplyT] = 1;
						SendClientMessage(playerid, WHITE, "You have collected grocery supplies. Deliver these to a 24/7.");
						SendClientMessage(playerid, GREY, "You'll have to enter the interior of the business and /sellsupplies.");
						switch(Player[playerid][Deliveries])
						{
						    case 0 .. 49: Player[playerid][Supplies] = 5;
						    case 50 .. 99: Player[playerid][Supplies] = 10;
						    case 100 .. 149: Player[playerid][Supplies] = 15;
						    case 150 .. 199: Player[playerid][Supplies] = 20;
						    case 200 .. 249: Player[playerid][Supplies] = 25;
						    case 250 .. 299: Player[playerid][Supplies] = 30;
						    case 300 .. 349: Player[playerid][Supplies] = 35;
						    case 350 .. 399: Player[playerid][Supplies] = 40;
						    case 400 .. 449: Player[playerid][Supplies] = 45;
						    case 450 .. 499: Player[playerid][Supplies] = 50;
						    default: Player[playerid][Supplies] = 55;
						}
					}
					case 1:
					{
						Player[playerid][SupplyT] = 2;
						SendClientMessage(playerid, WHITE, "You have collected clothes supplies. Deliver these to a clothes shop.");
						SendClientMessage(playerid, GREY, "You'll have to enter the interior of the business and /sellsupplies.");
						switch(Player[playerid][Deliveries])
						{
						    case 0 .. 49: Player[playerid][Supplies] = 5;
						    case 50 .. 99: Player[playerid][Supplies] = 10;
						    case 100 .. 149: Player[playerid][Supplies] = 15;
						    case 150 .. 199: Player[playerid][Supplies] = 20;
						    case 200 .. 249: Player[playerid][Supplies] = 25;
						    case 250 .. 299: Player[playerid][Supplies] = 30;
						    case 300 .. 349: Player[playerid][Supplies] = 35;
						    case 350 .. 399: Player[playerid][Supplies] = 40;
						    case 400 .. 449: Player[playerid][Supplies] = 45;
						    case 450 .. 499: Player[playerid][Supplies] = 50;
						    default: Player[playerid][Supplies] = 55;
						}
					}
					case 2:
					{
						Player[playerid][SupplyT] = 3;
						Player[playerid][SupplyT2] = 12;
						SendClientMessage(playerid, WHITE, "You have collected alcohol & food supplies. Deliver these to a bar / club / restaurant.");
						SendClientMessage(playerid, GREY, "You'll have to enter the interior of the business and /sellsupplies.");
						switch(Player[playerid][Deliveries])
						{
						    case 0 .. 49: Player[playerid][Supplies] = 5;
						    case 50 .. 99: Player[playerid][Supplies] = 10;
						    case 100 .. 149: Player[playerid][Supplies] = 15;
						    case 150 .. 199: Player[playerid][Supplies] = 20;
						    case 200 .. 249: Player[playerid][Supplies] = 25;
						    case 250 .. 299: Player[playerid][Supplies] = 30;
						    case 300 .. 349: Player[playerid][Supplies] = 35;
						    case 350 .. 399: Player[playerid][Supplies] = 40;
						    case 400 .. 449: Player[playerid][Supplies] = 45;
						    case 450 .. 499: Player[playerid][Supplies] = 50;
						    default: Player[playerid][Supplies] = 55;
						}
					}
					case 3:
					{
						Player[playerid][SupplyT] = 15;
						SendClientMessage(playerid, WHITE, "You have collected hardware supplies. Deliver these to a hardware store!");
						SendClientMessage(playerid, GREY, "You'll have to enter the interior of the business and /sellsupplies.");
						switch(Player[playerid][Deliveries])
						{
						    case 0 .. 49: Player[playerid][Supplies] = 5;
						    case 50 .. 99: Player[playerid][Supplies] = 10;
						    case 100 .. 149: Player[playerid][Supplies] = 15;
						    case 150 .. 199: Player[playerid][Supplies] = 20;
						    case 200 .. 249: Player[playerid][Supplies] = 25;
						    case 250 .. 299: Player[playerid][Supplies] = 30;
						    case 300 .. 349: Player[playerid][Supplies] = 35;
						    case 350 .. 399: Player[playerid][Supplies] = 40;
						    case 400 .. 449: Player[playerid][Supplies] = 45;
						    case 450 .. 499: Player[playerid][Supplies] = 50;
						    default: Player[playerid][Supplies] = 55;
						}
					}
					case 4:
					{
						Player[playerid][SupplyT] = 16;
						SendClientMessage(playerid, WHITE, "You have collected gas bar supplies. Deliver these to a gas station store!");
						SendClientMessage(playerid, GREY, "You'll have to enter the interior of the business and /sellsupplies.");
						switch(Player[playerid][Deliveries])
						{
						    case 0 .. 49: Player[playerid][Supplies] = 5;
						    case 50 .. 99: Player[playerid][Supplies] = 10;
						    case 100 .. 149: Player[playerid][Supplies] = 15;
						    case 150 .. 199: Player[playerid][Supplies] = 20;
						    case 200 .. 249: Player[playerid][Supplies] = 25;
						    case 250 .. 299: Player[playerid][Supplies] = 30;
						    case 300 .. 349: Player[playerid][Supplies] = 35;
						    case 350 .. 399: Player[playerid][Supplies] = 40;
						    case 400 .. 449: Player[playerid][Supplies] = 45;
						    case 450 .. 499: Player[playerid][Supplies] = 50;
						    default: Player[playerid][Supplies] = 55;
						}
					}
					case 5:
					{
						Player[playerid][SupplyT] = 19;
						SendClientMessage(playerid, WHITE, "You have collected hotel supplies. Deliver these to a hotel!");
						SendClientMessage(playerid, GREY, "You'll have to enter the interior of the business and /sellsupplies.");
						switch(Player[playerid][Deliveries])
						{
						    case 0 .. 49: Player[playerid][Supplies] = 5;
						    case 50 .. 99: Player[playerid][Supplies] = 10;
						    case 100 .. 149: Player[playerid][Supplies] = 15;
						    case 150 .. 199: Player[playerid][Supplies] = 20;
						    case 200 .. 249: Player[playerid][Supplies] = 25;
						    case 250 .. 299: Player[playerid][Supplies] = 30;
						    case 300 .. 349: Player[playerid][Supplies] = 35;
						    case 350 .. 399: Player[playerid][Supplies] = 40;
						    case 400 .. 449: Player[playerid][Supplies] = 45;
						    case 450 .. 499: Player[playerid][Supplies] = 50;
						    default: Player[playerid][Supplies] = 55;
						}
					}
				}
				DelivererSupplies -= Player[playerid][Supplies];
			}
			case 57361:
			{
				if(strlen(inputtext) < 1 && strlen(inputtext) >= MAX_PLAYER_NAME)
				{
					SendClientMessage(playerid, WHITE, "Names must be above 1 to 23.");
					ShowPlayerDialog(playerid, 57361, DIALOG_STYLE_INPUT, "Administrators' Name", "Please set your administrators' name!", "Set Name", "Cancel");
				}
				else
				{
					new string[50];
					format(Player[playerid][AdminName], 255, "%s", inputtext);
					format(string, sizeof(string), "You have set your name to %s.", inputtext);
					SendClientMessage(playerid, WHITE, string);
				}
			}
			case 9845:
			{
				if (strlen(inputtext) == 6)
				{
					if(IsNumeric(inputtext))
					{
						new pin = strval(inputtext), string[128];

						format(string, sizeof(string), "You have set your admin PIN to %d.", pin);
						SendClientMessage(playerid, WHITE, string);
						Player[playerid][AdminPIN] = pin;
						Player[playerid][PINAuth] = 1;
					}
					else
					{
						ShowPlayerDialog(playerid, 9845, DIALOG_STYLE_INPUT, "Authentication (Admin PIN)", "Please enter your new admin PIN.", "Done", "Cancel");
						SendClientMessage(playerid, WHITE, "Admin PINs have to be numeric.");
					}
				}
				else
				{
					ShowPlayerDialog(playerid, 9845, DIALOG_STYLE_INPUT, "Authentication (Admin PIN)", "Please enter your new admin PIN.", "Done", "Cancel");
					SendClientMessage(playerid, WHITE, "Invalid Admin PIN. It has to be six (6) digits long.");
				}
			}
			case 9844:
			{
				new pin = strval(inputtext);

				if(pin == Player[playerid][AdminPIN])
				{
					SendClientMessage(playerid, WHITE, "You have successfully entered your current admin PIN.");
					ShowPlayerDialog(playerid, 9845, DIALOG_STYLE_INPUT, "Authentication (Admin PIN)", "Please enter your new admin PIN.", "Done", "Cancel");
				}

				else
				{
					ShowPlayerDialog(playerid, 9844, DIALOG_STYLE_PASSWORD, "Authentication (Admin PIN)", "Please enter your current admin PIN.", "Done", "Cancel");

					new sum, string[128];

					sum = 3-Player[playerid][LoginAttempts];
					SendClientMessage(playerid, ADMINORANGE, "The PIN you have entered does not match your account. Please try again.");
					Player[playerid][LoginAttempts]++;
					format(string, sizeof(string), "You have %d remaining login attempts before you are auto-banned.", sum);
					SendClientMessage(playerid, WHITE, string);
					ShowPlayerDialog(playerid, 9844, DIALOG_STYLE_PASSWORD, "Authentication (Admin PIN)", "Please enter your current admin PIN.", "Done", "Cancel");

					if(Player[playerid][LoginAttempts] == 3)
					{
						new IP[21];
						GetPlayerIp(playerid, IP, sizeof(IP));
						format(string, sizeof(string), "%s | %s | THREE FAILED PIN ATTEMPTS | System", IP, GetName(playerid));
						BanLog(string);
						SendClientMessage(playerid, ADMINORANGE, "You have used your three attempts and are now banned.");
						format(Player[playerid][BannedReason], 128, "Three failed PIN attempts");
						format(Player[playerid][BannedBy], 128, "System");
						Player[playerid][Banned] = 1;
						KickEx(playerid);
					}
				}
			}
			case 9843:
			{
				if(strlen(inputtext) == 6)
				{
					if(IsNumeric(inputtext))
					{
						new pin = strval(inputtext), string[128];
						format(string, sizeof(string), "You have set your admin PIN to %d.", pin);
						SendClientMessage(playerid, WHITE, string);

						Player[playerid][AdminPIN] = pin;
						Player[playerid][PINAuth] = 1;

						if(strlen(Player[playerid][AdminName]) == 0 || strcmp(Player[playerid][AdminName], "Nothing", true) == 0)
						{
							ShowPlayerDialog(playerid, 57361, DIALOG_STYLE_INPUT, "Administrators' Name", "Please set your administrators' name!", "Set Name", "Cancel");
						}
					}
					else
					{
						ShowPlayerDialog(playerid, 9843, DIALOG_STYLE_INPUT, "Authentication (Admin PIN)", "Please enter your desired PIN.", "Done", "Cancel");
						SendClientMessage(playerid, WHITE, "PINs have to be numeric.");
					}
				}
				else
				{
					ShowPlayerDialog(playerid, 9843, DIALOG_STYLE_INPUT, "Authentication (Admin PIN)", "Please enter your desired PIN.", "Done", "Cancel");
					SendClientMessage(playerid, WHITE, "Invalid PIN. It has to be 6 digits long.");
				}
			}
			case 9842:
			{
				if(strlen(inputtext) == 6)
				{
					if(IsNumeric(inputtext))
					{
						new pin = strval(inputtext);
						if(pin == Player[playerid][AdminPIN])
						{
							new string[128];
							SendClientMessage(playerid, WHITE, "You have successfully authenticated with your admin PIN!");
							Player[playerid][PINAuth] = 1;
							format(string, sizeof(string), "%s has authenticated (authenticating using their PIN).", GetName(playerid));
							SendToAdmins(ADMINORANGE, string, 0);
							stop Player[playerid][PINLoginTimer];

							if(strfind(Player[playerid][Note], "Nothing", false))
							{
								if(strlen(Player[playerid][Note]) == 0)
								{
									format(Player[playerid][Note], 128, "Nothing");
								}
								else
								{
									new temp[255];
									format(temp, sizeof(temp), "{F6970C}OFFLINE NOTE FROM AN ADMIN:\n{FFFFFF}%s\n", Player[playerid][Note]);
									if(strlen(Player[playerid][PrisonReason]) > 1 && Player[playerid][PrisonID] == 1)
										format(temp, sizeof(temp), "\n{FFFFFF}You are in prison for the reason:\n%s", Player[playerid][PrisonReason]);
									ShowPlayerDialog(playerid, 3934, DIALOG_STYLE_MSGBOX, "Note from an admin", temp, "Close", "");

									format(Player[playerid][Note], 128, "Nothing");
								}
							}
							else
							{
								format(Player[playerid][Note], 128, "Nothing");
							}
							if(Player[playerid][RemoteWarn] == 1)
							{
								SendClientMessage(playerid, RED, "You received a warn while offline. Use /playerwarns to review it.");
								SendClientMessage(playerid, RED, "Take a screenshot of your new warn to use in your appeals. This is your responsibility.");
								Player[playerid][RemoteWarn] = 0;
							}
						}
						else
						{
							ShowPlayerDialog(playerid, 9842, DIALOG_STYLE_PASSWORD, "Authentication (Admin PIN)", "Please enter your additional admin PIN to continue.", "Login", "Cancel");
							new Sum, string[128];
							Sum = 3-Player[playerid][LoginAttempts];
							SendClientMessage(playerid, ADMINORANGE, "The PIN you have entered does not match your account. Please try again or use the forums.");
							Player[playerid][LoginAttempts]++;
							format(string, sizeof(string), "You have %d remaining login attempts, before you are auto-banned.", Sum);
							SendClientMessage(playerid, WHITE, string);
							ShowPlayerDialog(playerid, 9842, DIALOG_STYLE_PASSWORD, "Authentication (Admin PIN)", "Please enter your additional admin PIN to continue.", "Login", "Cancel");

							if(Player[playerid][LoginAttempts] == 3)
							{
								new IP[21];
								GetPlayerIp(playerid, IP, sizeof(IP));
								format(string, sizeof(string), "%s | %s | THREE FAILED PIN ATTEMPTS | System", IP, GetName(playerid));
								BanLog(string);
								SendClientMessage(playerid, ADMINORANGE, "You have used your three attempts and are now banned.");
								format(Player[playerid][BannedReason], 128, "Three failed PIN attempts");
								format(Player[playerid][BannedBy], 128, "System");
								Player[playerid][Banned] = 1;
								KickEx(playerid);
							}
						}
					}
				}
				else
				{
					ShowPlayerDialog(playerid, 9842, DIALOG_STYLE_PASSWORD, "Authentication (Admin PIN)", "Please enter your additional admin PIN to continue.", "Login", "Cancel");
					new Sum, string[128];
					Sum = 3-Player[playerid][LoginAttempts];
					SendClientMessage(playerid, ADMINORANGE, "The PIN you have entered does not match your account. Please try again or use the forums.");
					Player[playerid][LoginAttempts]++;
					format(string, sizeof(string), "You have %d remaining login attempts, before you are auto-banned.", Sum);
					SendClientMessage(playerid, WHITE, string);
					ShowPlayerDialog(playerid, 9842, DIALOG_STYLE_PASSWORD, "Authentication (Admin PIN)", "Please enter your additional admin PIN to continue.", "Login", "Cancel");

					if(Player[playerid][LoginAttempts] == 3)
					{
						new IP[21];
						GetPlayerIp(playerid, IP, sizeof(IP));
						format(string, sizeof(string), "%s | %s | THREE FAILED PIN ATTEMPTS | System", IP, GetName(playerid));
						BanLog(string);
						SendClientMessage(playerid, ADMINORANGE, "You have used your three attempts and are now banned.");
						format(Player[playerid][BannedReason], 128, "Three failed PIN attempts");
						format(Player[playerid][BannedBy], 128, "System");
						Player[playerid][Banned] = 1;
						KickEx(playerid);
					}
				}
			}
			case PRISON_QUESTION:
			{
				new id = GetPVarInt(playerid, "qid");
				if(isnull(inputtext))
				{
					SendClientMessage(playerid, RED, "Incorrect, try again.");
					return ShowPlayerDialog(playerid, PRISON_QUESTION, DIALOG_STYLE_INPUT, "Prison AFK Check", AfkQuestions[id][0], "Enter", "Cancel");
				}

				if(!strcmp(inputtext, AfkQuestions[id][1], true))
				{
					SendClientMessage(playerid, GREEN, "Correct.");
					Player[playerid][PrisonQuestionTimer] = 0;
					Player[playerid][PrisonQuestionAnswering] = 0;
					Player[playerid][PrisonQuestionAnswerTime] = 0;
				}
				else
				{
					SendClientMessage(playerid, RED, "Incorrect, try again.");
					ShowPlayerDialog(playerid, PRISON_QUESTION, DIALOG_STYLE_INPUT, "Prison AFK Check", AfkQuestions[id][0], "Enter", "Cancel");
				}
			}
			case 6443:
			{
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialog(playerid, 4516, DIALOG_STYLE_INPUT, "White Pages", "Please enter the name of the person you're searching for.", "Search", "Cancel");
					}
					case 1:
					{
						ShowPlayerDialog(playerid, 4517, DIALOG_STYLE_LIST, "Yellow Pages - Type of Business?", "24/7\nClothing\nClubs\nAdvertisement\nAdult Shop\nVehicle Dealerships\nColleges\nCharities\nChurches\nGyms\nChemists\n", "Select", "Cancel");
					}
				}
			}
			case 6442:
			{
				switch(listitem)
				{
					case 0:
					{
						if(Player[playerid][BankMoney] >= 100)
						{
							new query[128];
							mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE phones SET adapp = '1' WHERE owner = '%e' AND number = '%d'", Player[playerid][NormalName], Player[playerid][PhoneN]);
							mysql_query(MYSQL_MAIN, query, false);
							Player[playerid][BankMoney] -= 100;

							SendClientMessage(playerid, WHITE, "You have now purchased the Advertisement Application.");
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have $100 in your bank account to purchase this application.");
						}
					}
					case 1:
					{
						SendClientMessage(playerid, WHITE, "You're missing out! It's $100 for permanent use!");
					}
				}
			}
			case 4515:
			{
				if(strlen(inputtext) < 1)
				{
					SendClientMessage(playerid, WHITE, "You haven't entered anything. Your WAP connection has closed.");
				}
				else
				{
					if(Player[playerid][BankMoney] >= MobilePrice)
					{
						if(gettime() >= AdCanBePlaced)
						{
							new string[128];
							format(string, sizeof(string), "[AD] %s", inputtext);
							SendAdvertisment(playerid, string, 1);
							AdCanBePlaced = gettime() + 50;
							format(string, sizeof(string), "You have placed a mobile advertisement and have been charged $%d.", MobilePrice);
							SendClientMessage(playerid, WHITE, string);
							Player[playerid][BankMoney] -= MobilePrice;
							TotalMobileMoney += MobilePrice;
							dini_IntSet("Assets.ini", "TotalMobileMoney", TotalMobileMoney);

							format(string, sizeof(string), "[AD] %s: %s", GetNameEx(playerid), inputtext);
							ICChatLog(string);
						}
						else
						{
							new string[128];
							format(string, sizeof(string), "You cannot place an advertisement right now! Please wait %d seconds and try again.", AdCanBePlaced - gettime());
							SendClientMessage(playerid, WHITE, string);
						}
					}
					else
					{
						SendClientMessage(playerid, WHITE, "You don't have enough money to place a mobile ad!");
						SendClientMessage(playerid, ORANGE, "Remember, you can visit https://crearoleplay.com to purchase more In-Game currency!");
					}
				}
			}
			case 4516:
			{
				new id;
				if(sscanf(inputtext, "u", id))
				{
					ShowPlayerDialog(playerid, 4516, DIALOG_STYLE_INPUT, "Yellow Pages", "Please enter the name of the person you're searching for.", "Search", "Cancel");
					SendClientMessage(playerid, WHITE, "Nobody with that name was found. Please try again.");
				}
				else
				{
					if(IsPlayerConnectedEx(id))
					{
						new string[128];
						SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
						SendClientMessage(playerid, WHITE, "Result(s) found!");

						if(Player[id][Gender] == 1)
						{
							format(string, sizeof(string), "Name: %s | Age: %d | Gender: Male", GetName(id), Player[id][Age]);
						}
						else
						{
							format(string, sizeof(string), "Name: %s | Age: %d | Gender: Female", GetName(id), Player[id][Age]);
						}

						SendClientMessage(playerid, GREY, string);
						SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
					}
					else
					{
						ShowPlayerDialog(playerid, 4516, DIALOG_STYLE_INPUT, "Yellow Pages", "Please enter the name of the person you're searching for.", "Search", "Cancel");
						SendClientMessage(playerid, WHITE, "Nobody with that name was found. Please try again (( Not logged in )) .");
					}
				}
			}
			case 4517:
			{
				new string[128];
				SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
				switch(listitem)
				{
					case 0:
					{
						for(new i = 1; i < MAX_BUSINESSES; i++)
						{
							if(Businesses[i][bType] == 1)
							{
								format(string, sizeof(string), "24/7 (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
								SendClientMessage(playerid, WHITE, string);
							}
						}
					}
					case 1:
					{
						for(new i = 1; i < MAX_BUSINESSES; i++)
						{
							if(Businesses[i][bType] == 2)
							{
								format(string, sizeof(string), "Clothing (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
								SendClientMessage(playerid, WHITE, string);
							}
						}
					}
					case 2:
					{
						for(new i = 1; i < MAX_BUSINESSES; i++)
						{
							if(Businesses[i][bType] == 3)
							{
								format(string, sizeof(string), "Clubs (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
								SendClientMessage(playerid, WHITE, string);
							}
						}
					}
					case 3:
					{
						for(new i = 1; i < MAX_BUSINESSES; i++)
						{
							if(Businesses[i][bType] == 4)
							{
								format(string, sizeof(string), "Advertisement (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
								SendClientMessage(playerid, WHITE, string);
							}
						}
					}
					case 4:
					{
						for(new i = 1; i < MAX_BUSINESSES; i++)
						{
							if(Businesses[i][bType] == 5)
							{
								format(string, sizeof(string), "Adult (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
								SendClientMessage(playerid, WHITE, string);
							}
						}
					}
					case 5:
					{
						for(new i = 1; i < MAX_BUSINESSES; i++)
						{
							if(Businesses[i][bType] == 6)
							{
								format(string, sizeof(string), "Vehicle Dealership (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
								SendClientMessage(playerid, WHITE, string);
							}
						}
					}
					case 6:
					{
						for(new i = 1; i < MAX_BUSINESSES; i++)
						{
							if(Businesses[i][bType] == 7)
							{
								format(string, sizeof(string), "College (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
								SendClientMessage(playerid, WHITE, string);
							}
						}
					}
					case 7:
					{
						for(new i = 1; i < MAX_BUSINESSES; i++)
						{
							if(Businesses[i][bType] == 8)
							{
								format(string, sizeof(string), "Charity (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
								SendClientMessage(playerid, WHITE, string);
							}
						}
					}
					case 8:
					{
						for(new i = 1; i < MAX_BUSINESSES; i++)
						{
							if(Businesses[i][bType] == 9)
							{
								format(string, sizeof(string), "Church (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
								SendClientMessage(playerid, WHITE, string);
							}
						}
					}
					case 9:
					{
						for(new i = 1; i < MAX_BUSINESSES; i++)
						{
							if(Businesses[i][bType] == 10)
							{
								format(string, sizeof(string), "Gym (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
								SendClientMessage(playerid, WHITE, string);
							}
						}
					}
					case 10:
					{
						for(new i = 1; i < MAX_BUSINESSES; i++)
						{
							if(Businesses[i][bType] == 11)
							{
								format(string, sizeof(string), "Chemists (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
								SendClientMessage(playerid, WHITE, string);
							}
						}
					}
				}
				SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
			}
			case HOUSE_PRICE:
			{
				new price = strval(inputtext);
				new hid = GetPVarInt(playerid, "hID"), string[128];

				if(!response)
					return cmd_edithouse(playerid, IntToFormattedStr(hid));

				if(price < 0)
				{
					cmd_edithouse(playerid, IntToFormattedStr(hid));
					return SendClientMessage(playerid, -1, "Invalid price");
				}

				format(string, sizeof(string), "%s has set the price of House %d to $%s. (was %s)", Player[playerid][AdminName], hid, IntToFormattedStr(price), PrettyMoney(Houses[hid][HousePrice]));
				AdminActionsLog(string);
				format(string, sizeof(string), "You have set the price of House %d to $%s. (was %s)", hid, IntToFormattedStr(price), PrettyMoney(Houses[hid][HousePrice]));
				SendClientMessage(playerid, -1, string);

				Houses[hid][HousePrice] = price;
				UpdateObjectLabel(hid, LABEL_TYPE_HOUSE);
				SaveHouse(hid);
				return cmd_edithouse(playerid, IntToFormattedStr(hid));
			}
			case HOUSE_BEERS:
			{
				new amount = strval(inputtext), hid = GetPVarInt(playerid, "hID"), string[128];

				if(!response)
					return cmd_edithouse(playerid, IntToFormattedStr(hid));

				if(amount < 0)
				{
					cmd_edithouse(playerid, IntToFormattedStr(hid));
					return SendClientMessage(playerid, -1, "Invalid amount");
				}

				Houses[hid][hBeers] = amount;
				format(string, sizeof(string), "%s has set the beers in House %d to %d", Player[playerid][AdminName], hid, amount);
				AdminActionsLog(string);
				SaveHouse(hid);
				return cmd_edithouse(playerid, IntToFormattedStr(hid));
			}
			case HOUSE_KPP:
			{
				new hid = GetPVarInt(playerid, "hID"), string[128];

				if(strlen(inputtext) != 4 && strval(inputtext) != -1 && strval(inputtext) != 0)
				{
					cmd_edithouse(playerid, IntToFormattedStr(hid));
					return SendClientMessage(playerid, -1, "The code must be 4 digits long.");
				}

				if(!IsNumeric(inputtext) && strval(inputtext) != -1)
				{
					cmd_edithouse(playerid, IntToFormattedStr(hid));
					return SendClientMessage(playerid, -1, "The code must be all number.");
				}

				Houses[hid][Keypad] = strval(inputtext);
				format(string, sizeof(string), "%s has set the keypad in House %d to %d", Player[playerid][AdminName], hid, strval(inputtext));
				AdminActionsLog(string);
				SaveHouse(hid);
				return cmd_edithouse(playerid, IntToFormattedStr(hid));
			}
			case HOUSE_KEY:
			{
				new hid = GetPVarInt(playerid, "hID"), string[128];

				if(strcmp(inputtext, "Nobody", true))
				{
					if(IsPlayerConnected(GetPlayerIDEx(inputtext)))
					{
						Player[GetPlayerIDEx(inputtext)][HouseKey] = hid;
					}
					else
					{
						if(!IsPlayerRegistered(inputtext))
							return SendClientMessage(playerid, WHITE, "That player doesn't exist.");

						mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE playeraccounts SET HouseKey = '%d' WHERE  NormalName = '%e'", hid, inputtext);
						mysql_tquery(MYSQL_MAIN, string, "OnQueryFinish", "dddss", THREAD_EDIT_HOUSE_KEY, playerid, hid, inputtext, "");
					}
				}
				else
				{
					switch(GetPVarInt(playerid, "hKey"))
					{
						case 1:
						{
							if(IsPlayerConnected(GetPlayerIDEx(Houses[hid][KeyHolder1])))
							{
								Player[GetPlayerIDEx(Houses[hid][KeyHolder1])][HouseKey] = 0;
							}
							else
							{
								mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE playeraccounts SET HouseKey = '0' WHERE  NormalName = '%e'", Houses[hid][KeyHolder1]);
								mysql_tquery(MYSQL_MAIN, string, "OnQueryFinish", "dddss", THREAD_EDIT_HOUSE_KEY, playerid, 0, Houses[hid][KeyHolder1], "");
							}
						}
						case 2:
						{
							if(IsPlayerConnected(GetPlayerIDEx(Houses[hid][KeyHolder2])))
							{
								Player[GetPlayerIDEx(Houses[hid][KeyHolder2])][HouseKey] = 0;
							}
							else
							{
								mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE playeraccounts SET HouseKey = '0' WHERE  NormalName = '%e'", Houses[hid][KeyHolder2]);
								mysql_tquery(MYSQL_MAIN, string, "OnQueryFinish", "dddss", THREAD_EDIT_HOUSE_KEY, playerid, 0, Houses[hid][KeyHolder2], "");
							}
						}
					}
				}

				switch(GetPVarInt(playerid, "hKey"))
				{
					case 1:
					{
						format(Houses[hid][KeyHolder1], 24, "%s", inputtext);
						format(string, sizeof(string), "%s has set the key owner one of House %d to %s.", Player[playerid][AdminName], hid, inputtext);
						AdminActionsLog(string);
						SaveHouse(hid);
						return cmd_edithouse(playerid, IntToFormattedStr(hid));
					}
					case 2:
					{
						format(Houses[hid][KeyHolder2], 24, "%s", inputtext);
						format(string, sizeof(string), "%s has set the key owner two of House %d to %s.", Player[playerid][AdminName], hid, inputtext);
						AdminActionsLog(string);
						SaveHouse(hid);
						return cmd_edithouse(playerid, IntToFormattedStr(hid));
					}
				}
			}
			case HOUSE_EDIT_STORAGE:
			{
				new hid = GetPVarInt(playerid, "hID");

				if(!response)
					return cmd_edithouse(playerid, IntToFormattedStr(hid));

				DeletePVar(playerid, "EditHouseStorage");

				switch(GetPVarInt(playerid, "EditHouseStorage"))
				{
					case 2:
					{
						new wep, amount;
						if(sscanf(inputtext, "dd", wep, amount))
							return SendClientMessage(playerid, GREY, "Invalid weaponid or amount.");

						if(wep < 1 || wep > 47 || amount < 0)
							return SendClientMessage(playerid, GREY, "Invalid weaponid or amount.");

						new pos = strfind(Houses[hid][HouseStorage], weapons[wep], true);
						if(pos != -1)
						{
							new temp2[500];
							strcpy(temp2, Houses[hid][HouseStorage], sizeof(temp2));

							for(new i = pos; i > 0; i--)
							{
								if(temp2[i] == '|')
								{
									pos = i + 1;
									break;
								}
							}

							if(Houses[hid][HouseStorage][pos - 1] != '|')
								pos = 0;

							for(new i = pos; i < strlen(temp2); i++)
							{
								if(temp2[i] == '|')
								{
									strdel(temp2, pos, i + 1);
									break;
								}
							}

							if(amount > 0)
								format(temp2, 500, "%s%d %s|", temp2, amount, weapons[wep]);

							strcpy(Houses[hid][HouseStorage], temp2, 500);
						}
						else if(amount > 0)
						{
							format(Houses[hid][HouseStorage], 500, "%s%d %s|", Houses[hid][HouseStorage], amount, weapons[wep]);
						}
						cmd_edithouse(playerid, IntToFormattedStr(hid));
					}
					case 3:
					{
						new amount = strval(inputtext);
						if(!IsNumeric(inputtext) || isnull(inputtext) || amount < 0)
							return SendClientMessage(playerid, GREY, "Invalid amount.");

						new pos = strfind(Houses[hid][HouseStorage], "Street Grade Materials", true);
						if(pos != -1)
						{
							new temp2[500];
							strcpy(temp2, Houses[hid][HouseStorage], sizeof(temp2));

							for(new i = pos; i > 0; i--)
							{
								if(temp2[i] == '|')
								{
									pos = i + 1;
									break;
								}
							}

							if(Houses[hid][HouseStorage][pos - 1] != '|')
								pos = 0;

							for(new i = pos; i < strlen(temp2); i++)
							{
								if(temp2[i] == '|')
								{
									strdel(temp2, pos, i + 1);
									break;
								}
							}

							if(amount > 0)
								format(temp2, 500, "%s%d Street Grade Materials|", temp2, amount);

							strcpy(Houses[hid][HouseStorage], temp2, 500);
						}
						else if(amount > 0)
						{
							format(Houses[hid][HouseStorage], 500, "%s%d Street Grade Materials|", Houses[hid][HouseStorage], amount);
						}
						cmd_edithouse(playerid, IntToFormattedStr(hid));
					}
					case 4:
					{
						new amount = strval(inputtext);
						if(!IsNumeric(inputtext) || isnull(inputtext) || amount < 0)
							return SendClientMessage(playerid, GREY, "Invalid amount.");

						new pos = strfind(Houses[hid][HouseStorage], "Standard Grade Materials", true);
						if(pos != -1)
						{
							new temp2[500];
							strcpy(temp2, Houses[hid][HouseStorage], sizeof(temp2));

							for(new i = pos; i > 0; i--)
							{
								if(temp2[i] == '|')
								{
									pos = i + 1;
									break;
								}
							}

							if(Houses[hid][HouseStorage][pos - 1] != '|')
								pos = 0;

							for(new i = pos; i < strlen(temp2); i++)
							{
								if(temp2[i] == '|')
								{
									strdel(temp2, pos, i + 1);
									break;
								}
							}

							if(amount > 0)
								format(temp2, 500, "%s%d Standard Grade Materials|", temp2, amount);

							strcpy(Houses[hid][HouseStorage], temp2, 500);
						}
						else if(amount > 0)
						{
							format(Houses[hid][HouseStorage], 500, "%s%d Standard Grade Materials|", Houses[hid][HouseStorage], amount);
						}
						cmd_edithouse(playerid, IntToFormattedStr(hid));
					}
					case 5:
					{
						new amount = strval(inputtext);
						if(!IsNumeric(inputtext) || isnull(inputtext) || amount < 0)
							return SendClientMessage(playerid, GREY, "Invalid amount.");

						new pos = strfind(Houses[hid][HouseStorage], "Military Grade Materials", true);
						if(pos != -1)
						{
							new temp2[255];
							strcpy(temp2, Houses[hid][HouseStorage], sizeof(temp2));

							for(new i = pos; i > 0; i--)
							{
								if(temp2[i] == '|')
								{
									pos = i + 1;
									break;
								}
							}

							if(Houses[hid][HouseStorage][pos - 1] != '|')
								pos = 0;

							for(new i = pos; i < strlen(temp2); i++)
							{
								if(temp2[i] == '|')
								{
									strdel(temp2, pos, i + 1);
									break;
								}
							}

							if(amount > 0)
								format(temp2, 255, "%s%d Military Grade Materials|", temp2, amount);

							strcpy(Houses[hid][HouseStorage], temp2, 255);
						}
						else if(amount > 0)
						{
							format(Houses[hid][HouseStorage], 500, "%s%d Military Grade Materials|", Houses[hid][HouseStorage], amount);
						}
						cmd_edithouse(playerid, IntToFormattedStr(hid));
					}
					case 6:
					{
						new amount = strval(inputtext);
						if(!IsNumeric(inputtext) || isnull(inputtext) || amount < 0)
							return SendClientMessage(playerid, GREY, "Invalid amount.");

						new pos = strfind(Houses[hid][HouseStorage], "Cocaine", true);
						if(pos != -1)
						{
							new temp2[255];
							strcpy(temp2, Houses[hid][HouseStorage], sizeof(temp2));

							for(new i = pos; i > 0; i--)
							{
								if(temp2[i] == '|')
								{
									pos = i + 1;
									break;
								}
							}

							if(Houses[hid][HouseStorage][pos - 1] != '|')
								pos = 0;

							for(new i = pos; i < strlen(temp2); i++)
							{
								if(temp2[i] == '|')
								{
									strdel(temp2, pos, i + 1);
									break;
								}
							}

							if(amount > 0)
								format(temp2, 255, "%s%d Cocaine|", temp2, amount);

							strcpy(Houses[hid][HouseStorage], temp2, 255);
						}
						else if(amount > 0)
						{
							format(Houses[hid][HouseStorage], 500, "%s%d Cocaine|", Houses[hid][HouseStorage], amount);
						}
						cmd_edithouse(playerid, IntToFormattedStr(hid));
					}
					case 7:
					{
						new amount = strval(inputtext);
						if(!IsNumeric(inputtext) || isnull(inputtext) || amount < 0)
							return SendClientMessage(playerid, GREY, "Invalid amount.");

						new pos = strfind(Houses[hid][HouseStorage], "Pot", true);
						if(pos != -1)
						{
							new temp2[255];
							strcpy(temp2, Houses[hid][HouseStorage], sizeof(temp2));

							for(new i = pos; i > 0; i--)
							{
								if(temp2[i] == '|')
								{
									pos = i + 1;
									break;
								}
							}

							if(Houses[hid][HouseStorage][pos - 1] != '|')
								pos = 0;

							for(new i = pos; i < strlen(temp2); i++)
							{
								if(temp2[i] == '|')
								{
									strdel(temp2, pos, i + 1);
									break;
								}
							}

							if(amount > 0)
								format(temp2, 255, "%s%d Pot|", temp2, amount);

							strcpy(Houses[hid][HouseStorage], temp2, 255);
						}
						else if(amount > 0)
						{
							format(Houses[hid][HouseStorage], 500, "%s%d Pot|", Houses[hid][HouseStorage], amount);
						}
						cmd_edithouse(playerid, IntToFormattedStr(hid));
					}
					case 8:
					{
						new amount = strval(inputtext);
						if(!IsNumeric(inputtext) || isnull(inputtext) || amount < 0)
							return SendClientMessage(playerid, GREY, "Invalid amount.");

						new pos = strfind(Houses[hid][HouseStorage], "Speed", true);
						if(pos != -1)
						{
							new temp2[255];
							strcpy(temp2, Houses[hid][HouseStorage], sizeof(temp2));

							for(new i = pos; i > 0; i--)
							{
								if(temp2[i] == '|')
								{
									pos = i + 1;
									break;
								}
							}

							if(Houses[hid][HouseStorage][pos - 1] != '|')
								pos = 0;

							for(new i = pos; i < strlen(temp2); i++)
							{
								if(temp2[i] == '|')
								{
									strdel(temp2, pos, i + 1);
									break;
								}
							}

							if(amount > 0)
								format(temp2, 255, "%s%d Speed|", temp2, amount);

							strcpy(Houses[hid][HouseStorage], temp2, 255);
						}
						else if(amount > 0)
						{
							format(Houses[hid][HouseStorage], 500, "%s%d Speed|", Houses[hid][HouseStorage], amount);
						}
						cmd_edithouse(playerid, IntToFormattedStr(hid));
					}
					case 9:
					{
						new amount = strval(inputtext);
						if(!IsNumeric(inputtext) || isnull(inputtext) || amount < 0)
							return SendClientMessage(playerid, GREY, "Invalid amount.");

						new pos = strfind(Houses[hid][HouseStorage], "Money", true);
						if(pos != -1)
						{
							new temp2[255];
							strcpy(temp2, Houses[hid][HouseStorage], sizeof(temp2));

							for(new i = pos; i > 0; i--)
							{
								if(temp2[i] == '|')
								{
									pos = i + 1;
									break;
								}
							}

							if(Houses[hid][HouseStorage][pos - 1] != '|')
								pos = 0;

							for(new i = pos; i < strlen(temp2); i++)
							{
								if(temp2[i] == '|')
								{
									strdel(temp2, pos, i + 1);
									break;
								}
							}

							if(amount > 0)
								format(temp2, 255, "%s%d Money|", temp2, amount);

							strcpy(Houses[hid][HouseStorage], temp2, 255);
						}
						else if(amount > 0)
						{
							format(Houses[hid][HouseStorage], 500, "%s%d Money|", Houses[hid][HouseStorage], amount);
						}
						cmd_edithouse(playerid, IntToFormattedStr(hid));
					}
					default:
					{
						if(!strcmp(inputtext, "weapons", true))
						{
							SetPVarInt(playerid, "EditHouseStorage", 2);
							ShowPlayerDialog(playerid, HOUSE_EDIT_STORAGE, DIALOG_STYLE_INPUT, "Edit House Storage", "Input the ID of the weapon, followed by the amount of the weapon\nyou wish to add to the house. (Use 0 to remove the weapon)", "Edit", "Close");
						}
						else if(!strcmp(inputtext, "streetmats", true))
						{
							SetPVarInt(playerid, "EditHouseStorage", 3);
							ShowPlayerDialog(playerid, HOUSE_EDIT_STORAGE, DIALOG_STYLE_INPUT, "Edit House Storage", "Enter the amount of street grade materials you wish to set in this house. (Use 0 to remove)", "Edit", "Close");
						}
						else if(!strcmp(inputtext, "standardmats", true))
						{
							SetPVarInt(playerid, "EditHouseStorage", 4);
							ShowPlayerDialog(playerid, HOUSE_EDIT_STORAGE, DIALOG_STYLE_INPUT, "Edit House Storage", "Enter the amount of standard grade materials you wish to set in this house. (Use 0 to remove)", "Edit", "Close");
						}
						else if(!strcmp(inputtext, "militarymats", true))
						{
							SetPVarInt(playerid, "EditHouseStorage", 5);
							ShowPlayerDialog(playerid, HOUSE_EDIT_STORAGE, DIALOG_STYLE_INPUT, "Edit House Storage", "Enter the amount of military grade materials you wish to set in this house. (Use 0 to remove)", "Edit", "Close");
						}
						else if(!strcmp(inputtext, "cocaine", true))
						{
							SetPVarInt(playerid, "EditHouseStorage", 6);
							ShowPlayerDialog(playerid, HOUSE_EDIT_STORAGE, DIALOG_STYLE_INPUT, "Edit House Storage", "Enter the amount of cocaine you wish to set in this house. (Use 0 to remove)", "Edit", "Close");
						}
						else if(!strcmp(inputtext, "pot", true))
						{
							SetPVarInt(playerid, "EditHouseStorage", 7);
							ShowPlayerDialog(playerid, HOUSE_EDIT_STORAGE, DIALOG_STYLE_INPUT, "Edit House Storage", "Enter the amount of pot you wish to set in this house. (Use 0 to remove)", "Edit", "Close");
						}
						else if(!strcmp(inputtext, "speed", true))
						{
							SetPVarInt(playerid, "EditHouseStorage", 8);
							ShowPlayerDialog(playerid, HOUSE_EDIT_STORAGE, DIALOG_STYLE_INPUT, "Edit House Storage", "Enter the amount of speed you wish to set in this house. (Use 0 to remove)", "Edit", "Close");
						}
						else if(!strcmp(inputtext, "money", true))
						{
							SetPVarInt(playerid, "EditHouseStorage", 9);
							ShowPlayerDialog(playerid, HOUSE_EDIT_STORAGE, DIALOG_STYLE_INPUT, "Edit House Storage", "Enter the amount of money you wish to set in this house. (Use 0 to remove)", "Edit", "Close");
						}
						else if(!strcmp(inputtext, "empty", true))
						{
							Houses[hid][HouseStorage] = 0;
							cmd_edithouse(playerid, IntToFormattedStr(hid));
						}
						else
						{
							cmd_edithouse(playerid, IntToFormattedStr(hid));
						}
					}
				}
			}
			case HOUSE_MAIN:
			{
				if(!response)
					return 1;

				new hid = GetPVarInt(playerid, "hID");

				switch(listitem)
				{
					case 0: return cmd_edithouse(playerid, IntToFormattedStr(hid));
					case 1: ShowPlayerDialog(playerid, HOUSE_PRICE, DIALOG_STYLE_INPUT, "House Price", "Enter the price you wish the house to be.", "Okay", "Back");
					case 2:
					{
						if(Houses[hid][LockStatus] == 0)
							Houses[hid][LockStatus] = 1;
						else Houses[hid][LockStatus] = 0;

						new string[128];
						format(string, sizeof(string), "[HOUSE EDIT] %s has set house %d lock status to %d (%s)", Player[playerid][AdminName], hid, Houses[hid][LockStatus], (Houses[hid][LockStatus]) ? ("locked") : ("unlocked"));
						AdminActionsLog(string);

						return cmd_edithouse(playerid, IntToFormattedStr(hid));
					}
					case 3: ShowPlayerDialog(playerid, HOUSE_BEERS, DIALOG_STYLE_INPUT, "House Beers", "Enter the amount of beers you wish the house to have", "Okay", "Back");
					case 4:	ShowPlayerDialog(playerid, HOUSE_KPP, DIALOG_STYLE_INPUT, "House Keypad", "Enter the keypad you wish the house to have. (0 = No keypad, -1 = No password)", "Okay", "Back");
					case 5:
					{
						if(Houses[hid][RadioInstalled] == 0)
							Houses[hid][RadioInstalled] = 1;
						else Houses[hid][RadioInstalled] = 0;

						new string[128];
						format(string, sizeof(string), "[HOUSE EDIT] %s has set house %d radio to %d (%s)", Player[playerid][AdminName], hid, Houses[hid][RadioInstalled], (Houses[hid][RadioInstalled]) ? ("installed") : ("uninstalled"));
						AdminActionsLog(string);

						return cmd_edithouse(playerid, IntToFormattedStr(hid));
					}
					case 6:
					{
						if(Houses[hid][Workbench] == 0)
							Houses[hid][Workbench] = 1;
						else Houses[hid][Workbench] = 0;

						new string[128];
						format(string, sizeof(string), "[HOUSE EDIT] %s has set house %d workbench to %d (%s)", Player[playerid][AdminName], hid, Houses[hid][Workbench], (Houses[hid][Workbench]) ? ("installed") : ("uninstalled"));
						AdminActionsLog(string);

						return cmd_edithouse(playerid, IntToFormattedStr(hid));
					}
					case 7:
					{
						ShowPlayerDialog(playerid, HOUSE_KEY, DIALOG_STYLE_INPUT, "House Key One", "Enter the name you wish to have key one (Nobody for no one)", "Okay", "Back");
						SetPVarInt(playerid, "hKey", 1);
					}
					case 8:
					{
						ShowPlayerDialog(playerid, HOUSE_KEY, DIALOG_STYLE_INPUT, "House Key Two", "Enter the name you wish to have key two (Nobody for no one)", "Okay", "Back");
						SetPVarInt(playerid, "hKey", 2);
					}
					case 9:
					{
						new contents[500], string[500], temp[128], fix;
						strcpy(contents, Houses[hid][HouseStorage], 500);
						while(!isnull(contents))
						{
							fix++;
							if(fix > 55)
								break;

							for(new i; i < strlen(contents); i++)
							{
								if(contents[i] == '|')
								{
									strmid(temp, contents, 0, i);
									strdel(contents, 0, (i + 1 > strlen(contents)) ? (i) : (i + 1));

									format(string, sizeof(string), "%s%s\n", string, temp);
									break;
								}
							}
						}

						if(isnull(string))
							format(string, sizeof(string), "There is nothing stored in this house.");

						ShowPlayerDialog(playerid, HOUSE_EDIT_STORAGE, DIALOG_STYLE_INPUT, "Edit House Storage", string, "Select", "Back");
					}
					case 10: ShowPlayerDialog(playerid, HOUSE_EDIT_STORAGESIZE, DIALOG_STYLE_INPUT, "Edit House Storage Size", "Enter the storage size for this house.", "Select", "Back");
					case 11:
					{
						if(Houses[hid][HouseType] == 0)
							Houses[hid][HouseType] = 1;
						else Houses[hid][HouseType] = 0;

						new string[128];
						format(string, sizeof(string), "You have changed the house type of House ID %d to %d.", hid, Houses[hid][HouseType]);
						SendClientMessage(playerid, -1, string);
						format(string, sizeof(string), "[HOUSE EDIT] %s has changed the house type of House ID %d to %d.", Player[playerid][AdminName], hid, Houses[hid][HouseType]);
						AdminActionsLog(string);
					}
				}
			}
			case HOUSE_EDIT_STORAGESIZE:
			{
				new amount = strval(inputtext), hid = GetPVarInt(playerid, "hID"), string[128];

				if(!response)
					return cmd_edithouse(playerid, IntToFormattedStr(hid));

				if(amount < 0)
				{
					cmd_edithouse(playerid, IntToFormattedStr(hid));
					return SendClientMessage(playerid, -1, "Invalid amount");
				}

				Houses[hid][HouseStorageSize] = amount;
				format(string, sizeof(string), "%s has set the storage amount of house %d to %d", Player[playerid][AdminName], hid, amount);
				AdminActionsLog(string);
				SaveHouse(hid);
				return cmd_edithouse(playerid, IntToFormattedStr(hid));
			}
			case EDIT_VEHICLE_MAIN:
			{
				if(response)
				{
					new string[500];
					switch(listitem)
					{
						case 0: ShowPlayerDialog(playerid, EDIT_VEHICLE_MODEL, DIALOG_STYLE_INPUT, "Edit Vehicle Model", "Enter the model ID you wish to change to", "Set", "Back");
						case 1: ShowPlayerDialog(playerid, EDIT_VEHICLE_COLOR1, DIALOG_STYLE_INPUT, "Edit Vehicle Color1", "Enter the Color ID you wish to change to", "Set", "Back");
						case 2: ShowPlayerDialog(playerid, EDIT_VEHICLE_COLOR2, DIALOG_STYLE_INPUT, "Edit Vehicle Color2", "Enter the Color ID you wish to change to", "Set", "Back");
						case 3: ShowPlayerDialog(playerid, EDIT_VEHICLE_GROUP, DIALOG_STYLE_INPUT, "Edit Vehicle Faction", "Enter the Faction ID you wish to set", "Set", "Back");
						case 4: ShowPlayerDialog(playerid, EDIT_VEHICLE_JOB, DIALOG_STYLE_INPUT, "Edit Vehicle Job", "Enter the Job ID you wish to set", "Set", "Back");
						case 6: ShowPlayerDialog(playerid, EDIT_VEHICLE_PLATE, DIALOG_STYLE_INPUT, "Edit Vehicle Plate", "Enter the Plate you want to set", "Set", "Back");
						case 7: ShowPlayerDialog(playerid, EDIT_VEHICLE_FUEL, DIALOG_STYLE_INPUT, "Edit Vehicle Fuel", "Enter the Fuel", "Set", "Back");
						case 8: ShowPlayerDialog(playerid, EDIT_VEHICLE_INT, DIALOG_STYLE_INPUT, "Edit Vehicle Interior", "Enter the Interior ID you wish to apply", "Set", "Back");
						case 9: ShowPlayerDialog(playerid, EDIT_VEHICLE_VWORLD, DIALOG_STYLE_INPUT, "Edit Vehicle Virtual World", "Enter the Virtual World ID you wish to apply", "Set", "Back");
						case 10: ShowPlayerDialog(playerid, EDIT_VEHICLE_RESPAWN, DIALOG_STYLE_INPUT, "Edit Vehicle Respawn Time", "Enter the respawn time you wish to apply", "Set", "Back");
						case 11: ShowPlayerDialog(playerid, EDIT_VEHICLE_OWNER, DIALOG_STYLE_INPUT, "Edit Vehicle Owner", "Type the new owners name", "Set", "Back");
						case 12: ShowPlayerDialog(playerid, EDIT_VEHICLE_VNAME, DIALOG_STYLE_INPUT, "Edit Vehicle Name", "Enter a name for the vehicle", "Set", "Back");
						case 13: ShowPlayerDialog(playerid, EDIT_VEHICLE_POS, DIALOG_STYLE_MSGBOX, "Edit Vehicle Position", "Press Set to save the current location", "Set", "Back");
						case 14:
						{
							new idx = GetVIndex(VehicleEdit[playerid][SQLID]);

							if(Veh[idx][Mod0] > 0)
								format(string, sizeof(string), "Mod0: %d", Veh[idx][Mod0]);
							else
							format(string, sizeof(string), "Mod0: Empty");

							if(Veh[idx][Mod1] > 0)
								format(string, sizeof(string), "%s\nMod1: %d",string,Veh[idx][Mod1]);
							else
							format(string, sizeof(string), "%s\nMod1: Empty",string);

							if(Veh[idx][Mod2] > 0)
								format(string, sizeof(string), "%s\nMod2: %d",string, Veh[idx][Mod2]);
							else
							format(string, sizeof(string), "%s\nMod2: Empty",string);

							if(Veh[idx][Mod3] > 0)
								format(string, sizeof(string), "%s\nMod3: %d", string,Veh[idx][Mod3]);
							else
							format(string, sizeof(string), "%s\nMod3: Empty",string);

							if(Veh[idx][Mod4] > 0)
								format(string, sizeof(string), "%s\nMod4: %d", string,Veh[idx][Mod4]);
							else
							format(string, sizeof(string), "%s\nMod4: Empty",string);

							if(Veh[idx][Mod5] > 0)
								format(string, sizeof(string), "%s\nMod5: %d",string, Veh[idx][Mod5]);
							else
							format(string, sizeof(string), "%s\nMod5: Empty",string);

							if(Veh[idx][Mod6] > 0)
								format(string, sizeof(string), "%s\nMod6: %d",string, Veh[idx][Mod6]);
							else
							format(string, sizeof(string), "%s\nMod6: Empty",string);

							if(Veh[idx][Mod7] > 0)
								format(string, sizeof(string), "%s\nMod7: %d", string,Veh[idx][Mod7]);
							else
							format(string, sizeof(string), "%s\nMod7: Empty",string);

							if(Veh[idx][Mod8] > 0)
								format(string, sizeof(string), "%s\nMod8: %d",string, Veh[idx][Mod8]);
							else
							format(string, sizeof(string), "%s\nMod8: Empty",string);

							if(Veh[idx][Mod9] > 0)
								format(string, sizeof(string), "%s\nMod9: %d",string, Veh[idx][Mod9]);
							else
							format(string, sizeof(string), "%s\nMod9: Empty",string);

							if(Veh[idx][Mod10] > 0)
								format(string, sizeof(string), "%s\nMod10: %d",string, Veh[idx][Mod10]);
							else
							format(string, sizeof(string), "%s\nMod10: Empty",string);

							if(Veh[idx][Mod11] > 0)
								format(string, sizeof(string), "%s\nMod11: %d", string,Veh[idx][Mod11]);
							else
							format(string, sizeof(string), "%s\nMod11: Empty",string);

							if(Veh[idx][Mod12] > 0)
								format(string, sizeof(string), "%s\nMod12: %d", string,Veh[idx][Mod12]);
							else
							format(string, sizeof(string), "%s\nMod12: Empty",string);

							if(Veh[idx][Mod13] > 0)
								format(string, sizeof(string), "%s\nMod13: %d", string,Veh[idx][Mod13]);
							else
							format(string, sizeof(string), "%s\nMod13: Empty",string);

							ShowPlayerDialog(playerid, EDIT_VEHICLE_MODS, DIALOG_STYLE_LIST, "Edit Vehicle Mods", string, "Change", "Back");
						}
						case 15:
						{
							new contents[255], temp[64];
							strcpy(contents, VehicleEdit[playerid][TrunkContents], 255);

							while(!isnull(contents))
							{
								for(new i; i < strlen(contents); i++)
								{
									if(contents[i] == '|')
									{
										strmid(temp, contents, 0, i);
										strdel(contents, 0, (i + 1 > strlen(contents)) ? (i) : (i + 1));

										format(string, sizeof(string), "%s%s\n", string, temp);\
										break;
									}

								}
							}

							if(isnull(string))
								format(string, sizeof(string), "There is nothing in the trunk of this vehicle.\n");

							format(string, sizeof(string), "%s\n------------\n\nEnter what you wish to edit below \n(\"Weapons\", \"Materials\", \"Cocaine\", \"Pot\", \"Speed\")", string);

							DeletePVar(playerid, "EditVehicle_Trunk");

							ShowPlayerDialog(playerid, EDIT_VEHICLE_TRUNK, DIALOG_STYLE_INPUT, "Vehicle Trunk", string, "Edit", "Close");
						}
						case 16:
						{
							if(VehicleEdit[playerid][spawnState] == 1)
								VehicleEdit[playerid][spawnState] = 0;
							else
							VehicleEdit[playerid][spawnState] = 1;

							ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
						}
						case 5: ShowPlayerDialog(playerid, EDIT_VEHICLE_VIP, DIALOG_STYLE_INPUT, "Edit Vehicle VIP", "Enter the VIP Level (1, 2, 3 ONLY)", "Set", "Back");
						case 17: ShowPlayerDialog(playerid, EDIT_VEHICLE_HEALTH, DIALOG_STYLE_INPUT, "Edit Vehicle Health", "Type the vehicle health (1000 is max)", "Change", "Back");
						case 18:
						{
							if(VehicleEdit[playerid][lockState] == 0)
								VehicleEdit[playerid][lockState] = 1;
							else
							VehicleEdit[playerid][lockState] = 0;

							ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
						}
						case 19:ShowPlayerDialog(playerid, EDIT_VEHICLE_PAINTJOB, DIALOG_STYLE_INPUT, "Edit Vehicle PaintJob", "Type in the PaintJob ID that you would like (0, 1, 2, 3)", "Change", "Back");
						case 20:
						{
							VehicleEdit[playerid][RadioInstalled] = (VehicleEdit[playerid][RadioInstalled]) ? (0) : (1);

							ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle", EditVehicleString(playerid), "Edit", "Exit");
						}
						case 21:
						{
							VehicleEdit[playerid][Registered] = (VehicleEdit[playerid][Registered]) ? (0) : (1);

							ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle", EditVehicleString(playerid), "Edit", "Exit");
						}
						case 22:
						{
							ShowPlayerDialog(playerid, EDIT_VEHICLE_GANG, DIALOG_STYLE_INPUT, "Edit Gang", "Enter the gang ID", "Edit", "Exit");
						}
						case 23:
						{
							ShowPlayerDialog(playerid, EDIT_VEHICLE_IMPOUNDCOUNT, DIALOG_STYLE_INPUT, "Edit Vehicle", "Enter the value you wish to set the Impound Count to.", "Edit", "Exit");
						}
						case 24:
						{
							VehicleEdit[playerid][impounded] = (VehicleEdit[playerid][impounded]) ? (0) : (1);

							ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
						}
						case 25:
						{
							new sql = VehicleEdit[playerid][SQLID], idx = GetVIndex(sql);

							if(idx != -1)
							{
								Veh[idx][vInt] = VehicleEdit[playerid][vInt];
								Veh[idx][vVWorld] = VehicleEdit[playerid][vVWorld];
								Veh[idx][Respawn] = VehicleEdit[playerid][Respawn];

								if(Veh[idx][spawnState] != VehicleEdit[playerid][spawnState])
								{
									if(VehicleEdit[playerid][impounded] == 0)
									{
										if(VehicleEdit[playerid][spawnState])
											SpawnVehicleSQL(sql);
										else
											DespawnVehicleSQL(sql);
									}
								}

								if(Veh[idx][Model] != VehicleEdit[playerid][Model])
								{
									Veh[idx][Model] = VehicleEdit[playerid][Model];
									if(VehicleEdit[playerid][spawnState])
									{
										DespawnVehicleSQL(sql);
										SpawnVehicleSQL(sql);
									}
								}

								if(Veh[idx][Color1] != VehicleEdit[playerid][Color1] || Veh[idx][Color2] != VehicleEdit[playerid][Color2])
								{
									if(VehicleEdit[playerid][spawnState])
										ChangeVehicleColor(Veh[idx][Link], VehicleEdit[playerid][Color1], VehicleEdit[playerid][Color2]);
								}

								if(Veh[idx][PaintJob] != VehicleEdit[playerid][PaintJob])
								{
									if(VehicleEdit[playerid][spawnState])
										ChangeVehiclePaintjob(Veh[idx][Link], VehicleEdit[playerid][PaintJob]);
								}

								if(Veh[idx][vHealth] != VehicleEdit[playerid][vHealth])
								{
									if(VehicleEdit[playerid][spawnState])
										SetVehicleHealth(Veh[idx][Link], VehicleEdit[playerid][vHealth]);
								}

								if(Veh[idx][lockState] != VehicleEdit[playerid][lockState])
								{
									new e, l, a, d, b,bo, o;
									GetVehicleParamsEx(Veh[idx][Link], e, l, a, d, b,bo, o);
									SetVehicleParamsEx(Veh[idx][Link], e, l, a, VehicleEdit[playerid][lockState], b,bo, o);
								}

								if(Veh[idx][impounded] != VehicleEdit[playerid][impounded])
								{
									if(VehicleEdit[playerid][spawnState] == 1)
									{
										// if(!VehicleEdit[playerid][impounded])
											// SpawnVehicleSQL(sql);
										// else
											// DespawnVehicleSQL(sql);
									}
								}

								Veh[idx][spawnState] = VehicleEdit[playerid][spawnState];
								format(Veh[idx][Owner], 24, VehicleEdit[playerid][Owner]);
								Veh[idx][Color1] = VehicleEdit[playerid][Color1];
								Veh[idx][Color2] = VehicleEdit[playerid][Color2];
								Veh[idx][Group] = VehicleEdit[playerid][Group];
								Veh[idx][Job] = VehicleEdit[playerid][Job];
								// Veh[idx][Weapons][0] = VehicleEdit[playerid][Weapons][0];
								// Veh[idx][Weapons][1] = VehicleEdit[playerid][Weapons][1];
								// Veh[idx][Weapons][2] = VehicleEdit[playerid][Weapons][2];
								Veh[idx][PaintJob] = VehicleEdit[playerid][PaintJob];
								format(Veh[idx][VName], 50, VehicleEdit[playerid][VName]);
								format(Veh[idx][Plate], 32, VehicleEdit[playerid][Plate]);
								Veh[idx][Fuel] = VehicleEdit[playerid][Fuel];
								Veh[idx][VIP] = VehicleEdit[playerid][VIP];
								Veh[idx][vHealth] = VehicleEdit[playerid][vHealth];
								Veh[idx][lockState] = VehicleEdit[playerid][lockState];
								Veh[idx][impounded] = VehicleEdit[playerid][impounded];
								Veh[idx][RadioInstalled] = VehicleEdit[playerid][RadioInstalled];
								Veh[idx][Registered] = VehicleEdit[playerid][Registered];
								Veh[idx][Mod0] = VehicleEdit[playerid][Mod0];
								Veh[idx][Mod1] = VehicleEdit[playerid][Mod1];
								Veh[idx][Mod2] = VehicleEdit[playerid][Mod2];
								Veh[idx][Mod3] = VehicleEdit[playerid][Mod3];
								Veh[idx][Mod4] = VehicleEdit[playerid][Mod4];
								Veh[idx][Mod5] = VehicleEdit[playerid][Mod5];
								Veh[idx][Mod6] = VehicleEdit[playerid][Mod6];
								Veh[idx][Mod7] = VehicleEdit[playerid][Mod7];
								Veh[idx][Mod8] = VehicleEdit[playerid][Mod8];
								Veh[idx][Mod9] = VehicleEdit[playerid][Mod9];
								Veh[idx][Mod10] = VehicleEdit[playerid][Mod10];
								Veh[idx][Mod11] = VehicleEdit[playerid][Mod11];
								Veh[idx][Mod12] = VehicleEdit[playerid][Mod12];
								Veh[idx][Mod13] = VehicleEdit[playerid][Mod13];
								Veh[idx][GangLink] = VehicleEdit[playerid][GangLink];
								Veh[idx][ImpoundCount] = VehicleEdit[playerid][ImpoundCount];
								strcpy(Veh[idx][TrunkContents], VehicleEdit[playerid][TrunkContents], 255);
							}

							SaveVehicle(sql, playerid);

							VehicleEdit[playerid][SQLID] = 0;
						}
						case 26:
						{
							if(Player[playerid][AdminLevel] < 4)
								SendClientMessage(playerid, -1, "You must be admin level 4 or higher to do this.");
							else
							ShowPlayerDialog(playerid, EDIT_VEHICLE_DELETE, DIALOG_STYLE_INPUT, "WARNING: VEHICLE DELETION", "Once you've deleted a vehicle there is no going back, please be sure you want to do this. \nEnter 'Confirm' in the box below to have the vehice delete. This is CASE-SENSITIVE. \nAny other response will return you to the main edit dialog.", "Enter", "Cancel");
						}
					}
				}
			}
			case EDIT_VEHICLE_IMPOUNDCOUNT:
			{
				if(strval(inputtext) < 0 || strval(inputtext) > 3)
					return ShowPlayerDialog(playerid, EDIT_VEHICLE_IMPOUNDCOUNT, DIALOG_STYLE_INPUT, "Edit Vehicle", "INVALID NUMBER ( 0 - 3 )\n\nEnter the value you wish to set the Impound Count to.", "Edit", "Exit");

				VehicleEdit[playerid][ImpoundCount] = strval(inputtext);

				ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
			}
			case EDIT_VEHICLE_MODEL:
			{
				if(response)
				{
					if(strval(inputtext) < 400 || strval(inputtext) > 611)
						return SendClientMessage(playerid, WHITE, "Valid car IDs start from 400, ending at 611.");

					VehicleEdit[playerid][Model] = strval(inputtext);
					VehicleEdit[playerid][Mod0] = 0;
					VehicleEdit[playerid][Mod1] = 0;
					VehicleEdit[playerid][Mod2] = 0;
					VehicleEdit[playerid][Mod3] = 0;
					VehicleEdit[playerid][Mod4] = 0;
					VehicleEdit[playerid][Mod5] = 0;
					VehicleEdit[playerid][Mod6] = 0;
					VehicleEdit[playerid][Mod7] = 0;
					VehicleEdit[playerid][Mod8] = 0;
					VehicleEdit[playerid][Mod9] = 0;
					VehicleEdit[playerid][Mod10] = 0;
					VehicleEdit[playerid][Mod11] = 0;
					VehicleEdit[playerid][Mod12] = 0;
					VehicleEdit[playerid][Mod13] = 0;

					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
				}
				else
				ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
			}
			case EDIT_VEHICLE_COLOR1:
			{
				if(response)
				{
					VehicleEdit[playerid][Color1] = strval(inputtext);
					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle", EditVehicleString(playerid), "Edit", "Exit");
				}
				else if(response == 0)
				{
					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
				}
			}
			case EDIT_VEHICLE_COLOR2:
			{

				if(response)
				{
					VehicleEdit[playerid][Color2] = strval(inputtext);
					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
				}
				else
				{
					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
				}
			}
			case EDIT_VEHICLE_GROUP:
			{
				if(response)
				{
					VehicleEdit[playerid][Group] = strval(inputtext);

					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
				}
				else
				{
					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
				}
			}
			case EDIT_VEHICLE_JOB:
			{
				if(response)
				{
					VehicleEdit[playerid][Job] = strval(inputtext);

					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
				}
				else
				{
					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
				}
			}
			case EDIT_VEHICLE_PLATE:
			{

				if(response)
				{
					new query[128], count;

					mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM vehicles WHERE plate = '%e'", inputtext);
					new Cache:cache = mysql_query(MYSQL_MAIN, query);
					count = cache_get_row_count();
					cache_delete(cache);

					if(count > 0)
					{
						SendClientMessage(playerid, -1, "That license plate already exists, choose another one.");
						return ShowPlayerDialog(playerid, EDIT_VEHICLE_PLATE, DIALOG_STYLE_INPUT, "Edit Vehicle Plate", "Enter the Plate you want to set", "Set", "Back");
					}

					if(!strcmp(inputtext, "randomplate", true))
					{
						RandomLicensePlate(inputtext);
					}

					format(VehicleEdit[playerid][Plate], 32, "%s", DB_Escape(inputtext));

					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
				}
				else
				{
					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
				}
			}
			case EDIT_VEHICLE_FUEL:
			{

				if(response)
				{
					VehicleEdit[playerid][Fuel] = strval(inputtext);

					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
				}
				else
				{
					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
				}
			}
			case EDIT_VEHICLE_INT:
			{

				if(response)
				{
					VehicleEdit[playerid][vInt] = strval(inputtext);

					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
				}
				else
				{
					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
				}
			}
			case EDIT_VEHICLE_VWORLD:
			{

				if(response)
				{
					VehicleEdit[playerid][vVWorld] = strval(inputtext);

					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
				}
				else
				{
					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
				}
			}
			case EDIT_VEHICLE_RESPAWN:
			{

				if(response)
				{
					VehicleEdit[playerid][Respawn] = strval(inputtext);

					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
				}
				else
				{
					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
				}
			}
			case EDIT_VEHICLE_OWNER:
			{

				if(response)
				{

					if(strcmp(inputtext, "unowned", false))
					{

						if(!IsPlayerRegistered(inputtext))
							return SendClientMessage(playerid, -1, "Player doesn't exist");

						if(GetPlayerVehicleCount(inputtext) >= GetPlayerMaxVehiclesByName(inputtext))
							return SendClientMessage(playerid, -1, "That player has max vehicles he can own");

						format(VehicleEdit[playerid][Owner], 24, "%s", inputtext);
					}
					else
					{
						format(VehicleEdit[playerid][Owner], 24, "unowned");
					}

					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
				}
				else
				{
					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
				}
			}
			case EDIT_VEHICLE_VNAME:
			{

				if(response)
				{
					format(VehicleEdit[playerid][VName], 50, "%s", inputtext);

					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
				}
				else
				{
					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
				}
			}
			case EDIT_VEHICLE_POS:
			{
				new sql = GetPVarInt(playerid, "Edit_Vehicle"), idx = GetVIndex(sql);

				if(idx == -1)
				{
					SendClientMessage(playerid, -1, "You cannot edit the position of a vehicles that is not loaded.");
					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
				}

				if(response)
				{
					GetVehiclePos(Veh[idx][Link], Veh[idx][vX], Veh[idx][vY], Veh[idx][vZ]);
					GetVehicleZAngle(Veh[idx][Link], Veh[idx][vAngle]);
					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
				}
				else
				{
					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
				}
			}
			case EDIT_VEHICLE_MODS:
			{
				new sql = GetPVarInt(playerid, "Edit_Vehicle"), idx = GetVIndex(sql);

				if(response)
				{
					if(!IsSQLVehicleSpawned(sql) || idx == -1)
						return SendClientMessage(playerid, -1, "You can't do this unless the vehicle is spawned");

					switch(listitem)
					{
						case 0: ShowPlayerDialog(playerid, EDIT_VEHICLE_MOD0, DIALOG_STYLE_INPUT ,"Vehicle Mod", "Type the component ID, 0 to reset it. MUST BE A VALID MOD\nOr shit will hit the fan", "Set", "Back");
						case 1: ShowPlayerDialog(playerid, EDIT_VEHICLE_MOD1, DIALOG_STYLE_INPUT ,"Vehicle Mod", "Type the component ID, 0 to reset it. MUST BE A VALID MOD\nOr shit will hit the fan", "Set", "Back");
						case 2: ShowPlayerDialog(playerid, EDIT_VEHICLE_MOD2, DIALOG_STYLE_INPUT ,"Vehicle Mod", "Type the component ID, 0 to reset it. MUST BE A VALID MOD\nOr shit will hit the fan", "Set", "Back");
						case 3: ShowPlayerDialog(playerid, EDIT_VEHICLE_MOD3, DIALOG_STYLE_INPUT ,"Vehicle Mod", "Type the component ID, 0 to reset it. MUST BE A VALID MOD\nOr shit will hit the fan", "Set", "Back");
						case 4: ShowPlayerDialog(playerid, EDIT_VEHICLE_MOD4, DIALOG_STYLE_INPUT ,"Vehicle Mod", "Type the component ID, 0 to reset it. MUST BE A VALID MOD\nOr shit will hit the fan", "Set", "Back");
						case 5: ShowPlayerDialog(playerid, EDIT_VEHICLE_MOD5, DIALOG_STYLE_INPUT ,"Vehicle Mod", "Type the component ID, 0 to reset it. MUST BE A VALID MOD\nOr shit will hit the fan", "Set", "Back");
						case 6: ShowPlayerDialog(playerid, EDIT_VEHICLE_MOD6, DIALOG_STYLE_INPUT ,"Vehicle Mod", "Type the component ID, 0 to reset it. MUST BE A VALID MOD\nOr shit will hit the fan", "Set", "Back");
						case 7: ShowPlayerDialog(playerid, EDIT_VEHICLE_MOD7, DIALOG_STYLE_INPUT ,"Vehicle Mod", "Type the component ID, 0 to reset it. MUST BE A VALID MOD\nOr shit will hit the fan", "Set", "Back");
						case 8: ShowPlayerDialog(playerid, EDIT_VEHICLE_MOD8, DIALOG_STYLE_INPUT ,"Vehicle Mod", "Type the component ID, 0 to reset it. MUST BE A VALID MOD\nOr shit will hit the fan", "Set", "Back");
						case 9: ShowPlayerDialog(playerid, EDIT_VEHICLE_MOD9, DIALOG_STYLE_INPUT ,"Vehicle Mod", "Type the component ID, 0 to reset it. MUST BE A VALID MOD\nOr shit will hit the fan", "Set", "Back");
						case 10: ShowPlayerDialog(playerid, EDIT_VEHICLE_MOD10, DIALOG_STYLE_INPUT ,"Vehicle Mod", "Type the component ID, 0 to reset it. MUST BE A VALID MOD\nOr shit will hit the fan", "Set", "Back");
						case 11: ShowPlayerDialog(playerid, EDIT_VEHICLE_MOD11, DIALOG_STYLE_INPUT ,"Vehicle Mod", "Type the component ID, 0 to reset it. MUST BE A VALID MOD\nOr shit will hit the fan", "Set", "Back");
						case 12: ShowPlayerDialog(playerid, EDIT_VEHICLE_MOD12, DIALOG_STYLE_INPUT ,"Vehicle Mod", "Type the component ID, 0 to reset it. MUST BE A VALID MOD\nOr shit will hit the fan", "Set", "Back");
						case 13: ShowPlayerDialog(playerid, EDIT_VEHICLE_MOD13, DIALOG_STYLE_INPUT ,"Vehicle Mod", "Type the component ID, 0 to reset it. MUST BE A VALID MOD\nOr shit will hit the fan", "Set", "Back");
					}

				}
				else
				{
					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
				}
			}
			case EDIT_VEHICLE_TRUNK:
			{
				switch(GetPVarInt(playerid, "EditVehicle_Trunk"))
				{
					case 2:
					{
						new wep, amount;
						if(sscanf(inputtext, "dd", wep, amount))
							return SendClientMessage(playerid, GREY, "Invalid weaponid or amount.");

						if(wep < 1 || wep > 47 || amount < 0)
							return SendClientMessage(playerid, GREY, "Invalid weaponid or amount.");

						new pos = strfind(VehicleEdit[playerid][TrunkContents], weapons[wep], true);
						if(pos != -1)
						{
							new temp2[255];
							strcpy(temp2, VehicleEdit[playerid][TrunkContents], sizeof(temp2));

							for(new i = pos; i > 0; i--)
							{
								if(temp2[i] == '|')
								{
									pos = i + 1;
									break;
								}
							}

							if(VehicleEdit[playerid][TrunkContents][pos - 1] != '|')
								pos = 0;

							for(new i = pos; i < strlen(temp2); i++)
							{
								if(temp2[i] == '|')
								{
									strdel(temp2, pos, i + 1);
									break;
								}
							}

							if(amount > 0)
								format(temp2, 255, "%s%d %s|", temp2, amount, weapons[wep]);

							strcpy(VehicleEdit[playerid][TrunkContents], temp2, 255);
						}
						else if(amount > 0)
						{
							format(VehicleEdit[playerid][TrunkContents], 255, "%s%d %s|", VehicleEdit[playerid][TrunkContents], amount, weapons[wep]);
						}
						OnDialogResponse(playerid, EDIT_VEHICLE_MAIN, 1, 15, "Edit Trunk");
					}
					case 3:
					{
						new amount = strval(inputtext);
						if(!IsNumeric(inputtext) || isnull(inputtext) || amount < 0)
							return SendClientMessage(playerid, GREY, "Invalid amount.");

						new pos = strfind(VehicleEdit[playerid][TrunkContents], "Street Grade Materials", true);
						if(pos != -1)
						{
							new temp2[255];
							strcpy(temp2, VehicleEdit[playerid][TrunkContents], sizeof(temp2));

							for(new i = pos; i > 0; i--)
							{
								if(temp2[i] == '|')
								{
									pos = i + 1;
									break;
								}
							}

							if(VehicleEdit[playerid][TrunkContents][pos - 1] != '|')
								pos = 0;

							for(new i = pos; i < strlen(temp2); i++)
							{
								if(temp2[i] == '|')
								{
									strdel(temp2, pos, i + 1);
									break;
								}
							}

							if(amount > 0)
								format(temp2, 255, "%s%d Street Grade Materials|", temp2, amount);

							strcpy(VehicleEdit[playerid][TrunkContents], temp2, 255);
						}
						else if(amount > 0)
						{
							format(VehicleEdit[playerid][TrunkContents], 255, "%s%d Street Grade Materials|", VehicleEdit[playerid][TrunkContents], amount);
						}
						OnDialogResponse(playerid, EDIT_VEHICLE_MAIN, 1, 15, "Edit Trunk");
					}
					case 4:
					{
						new amount = strval(inputtext);
						if(!IsNumeric(inputtext) || isnull(inputtext) || amount < 0)
							return SendClientMessage(playerid, GREY, "Invalid amount.");

						new pos = strfind(VehicleEdit[playerid][TrunkContents], "Standard Grade Materials", true);
						if(pos != -1)
						{
							new temp2[255];
							strcpy(temp2, VehicleEdit[playerid][TrunkContents], sizeof(temp2));

							for(new i = pos; i > 0; i--)
							{
								if(temp2[i] == '|')
								{
									pos = i + 1;
									break;
								}
							}

							if(VehicleEdit[playerid][TrunkContents][pos - 1] != '|')
								pos = 0;

							for(new i = pos; i < strlen(temp2); i++)
							{
								if(temp2[i] == '|')
								{
									strdel(temp2, pos, i + 1);
									break;
								}
							}

							if(amount > 0)
								format(temp2, 255, "%s%d Standard Grade Materials|", temp2, amount);

							strcpy(VehicleEdit[playerid][TrunkContents], temp2, 255);
						}
						else if(amount > 0)
						{
							format(VehicleEdit[playerid][TrunkContents], 255, "%s%d Standard Grade Materials|", VehicleEdit[playerid][TrunkContents], amount);
						}
						OnDialogResponse(playerid, EDIT_VEHICLE_MAIN, 1, 15, "Edit Trunk");
					}
					case 5:
					{
						new amount = strval(inputtext);
						if(!IsNumeric(inputtext) || isnull(inputtext) || amount < 0)
							return SendClientMessage(playerid, GREY, "Invalid amount.");

						new pos = strfind(VehicleEdit[playerid][TrunkContents], "Military Grade Materials", true);
						if(pos != -1)
						{
							new temp2[255];
							strcpy(temp2, VehicleEdit[playerid][TrunkContents], sizeof(temp2));

							for(new i = pos; i > 0; i--)
							{
								if(temp2[i] == '|')
								{
									pos = i + 1;
									break;
								}
							}

							if(VehicleEdit[playerid][TrunkContents][pos - 1] != '|')
								pos = 0;

							for(new i = pos; i < strlen(temp2); i++)
							{
								if(temp2[i] == '|')
								{
									strdel(temp2, pos, i + 1);
									break;
								}
							}

							if(amount > 0)
								format(temp2, 255, "%s%d Military Grade Materials|", temp2, amount);

							strcpy(VehicleEdit[playerid][TrunkContents], temp2, 255);
						}
						else if(amount > 0)
						{
							format(VehicleEdit[playerid][TrunkContents], 255, "%s%d Military Grade Materials|", VehicleEdit[playerid][TrunkContents], amount);
						}
						OnDialogResponse(playerid, EDIT_VEHICLE_MAIN, 1, 15, "Edit Trunk");
					}
					case 6:
					{
						new amount = strval(inputtext);
						if(!IsNumeric(inputtext) || isnull(inputtext) || amount < 0)
							return SendClientMessage(playerid, GREY, "Invalid amount.");

						new pos = strfind(VehicleEdit[playerid][TrunkContents], "Cocaine", true);
						if(pos != -1)
						{
							new temp2[255];
							strcpy(temp2, VehicleEdit[playerid][TrunkContents], sizeof(temp2));

							for(new i = pos; i > 0; i--)
							{
								if(temp2[i] == '|')
								{
									pos = i + 1;
									break;
								}
							}

							if(VehicleEdit[playerid][TrunkContents][pos - 1] != '|')
								pos = 0;

							for(new i = pos; i < strlen(temp2); i++)
							{
								if(temp2[i] == '|')
								{
									strdel(temp2, pos, i + 1);
									break;
								}
							}

							if(amount > 0)
								format(temp2, 255, "%s%d Cocaine|", temp2, amount);

							strcpy(VehicleEdit[playerid][TrunkContents], temp2, 255);
						}
						else if(amount > 0)
						{
							format(VehicleEdit[playerid][TrunkContents], 255, "%s%d Cocaine|", VehicleEdit[playerid][TrunkContents], amount);
						}
						OnDialogResponse(playerid, EDIT_VEHICLE_MAIN, 1, 15, "Edit Trunk");
					}
					case 7:
					{
						new amount = strval(inputtext);
						if(!IsNumeric(inputtext) || isnull(inputtext) || amount < 0)
							return SendClientMessage(playerid, GREY, "Invalid amount.");

						new pos = strfind(VehicleEdit[playerid][TrunkContents], "Pot", true);
						if(pos != -1)
						{
							new temp2[255];
							strcpy(temp2, VehicleEdit[playerid][TrunkContents], sizeof(temp2));

							for(new i = pos; i > 0; i--)
							{
								if(temp2[i] == '|')
								{
									pos = i + 1;
									break;
								}
							}

							if(VehicleEdit[playerid][TrunkContents][pos - 1] != '|')
								pos = 0;

							for(new i = pos; i < strlen(temp2); i++)
							{
								if(temp2[i] == '|')
								{
									strdel(temp2, pos, i + 1);
									break;
								}
							}

							if(amount > 0)
								format(temp2, 255, "%s%d Pot|", temp2, amount);

							strcpy(VehicleEdit[playerid][TrunkContents], temp2, 255);
						}
						else if(amount > 0)
						{
							format(VehicleEdit[playerid][TrunkContents], 255, "%s%d Pot|", VehicleEdit[playerid][TrunkContents], amount);
						}
						OnDialogResponse(playerid, EDIT_VEHICLE_MAIN, 1, 15, "Edit Trunk");
					}
					case 8:
					{
						new amount = strval(inputtext);
						if(!IsNumeric(inputtext) || isnull(inputtext) || amount < 0)
							return SendClientMessage(playerid, GREY, "Invalid amount.");

						new pos = strfind(VehicleEdit[playerid][TrunkContents], "Speed", true);
						if(pos != -1)
						{
							new temp2[255];
							strcpy(temp2, VehicleEdit[playerid][TrunkContents], sizeof(temp2));

							for(new i = pos; i > 0; i--)
							{
								if(temp2[i] == '|')
								{
									pos = i + 1;
									break;
								}
							}

							if(VehicleEdit[playerid][TrunkContents][pos - 1] != '|')
								pos = 0;

							for(new i = pos; i < strlen(temp2); i++)
							{
								if(temp2[i] == '|')
								{
									strdel(temp2, pos, i + 1);
									break;
								}
							}

							if(amount > 0)
								format(temp2, 255, "%s%d Speed|", temp2, amount);

							strcpy(VehicleEdit[playerid][TrunkContents], temp2, 255);
						}
						else if(amount > 0)
						{
							format(VehicleEdit[playerid][TrunkContents], 255, "%s%d Speed|", VehicleEdit[playerid][TrunkContents], amount);
						}
						OnDialogResponse(playerid, EDIT_VEHICLE_MAIN, 1, 15, "Edit Trunk");
					}
					case 9:
					{
						new amount = strval(inputtext);
						if(!IsNumeric(inputtext) || isnull(inputtext) || amount < 0)
							return SendClientMessage(playerid, GREY, "Invalid amount.");

						new pos = strfind(VehicleEdit[playerid][TrunkContents], "money", true);
						if(pos != -1)
						{
							new temp2[255];
							strcpy(temp2, VehicleEdit[playerid][TrunkContents], sizeof(temp2));

							for(new i = pos; i > 0; i--)
							{
								if(temp2[i] == '|')
								{
									pos = i + 1;
									break;
								}
							}

							if(VehicleEdit[playerid][TrunkContents][pos - 1] != '|')
								pos = 0;

							for(new i = pos; i < strlen(temp2); i++)
							{
								if(temp2[i] == '|')
								{
									strdel(temp2, pos, i + 1);
									break;
								}
							}

							if(amount > 0)
								format(temp2, 255, "%s%d Money|", temp2, amount);

							strcpy(VehicleEdit[playerid][TrunkContents], temp2, 255);
						}
						else if(amount > 0)
						{
							format(VehicleEdit[playerid][TrunkContents], 255, "%s%d Money|", VehicleEdit[playerid][TrunkContents], amount);
						}
						OnDialogResponse(playerid, EDIT_VEHICLE_MAIN, 1, 15, "Edit Trunk");
					}
					default:
					{
						if(!strcmp(inputtext, "weapons", true))
						{
							SetPVarInt(playerid, "EditVehicle_Trunk", 2);
							ShowPlayerDialog(playerid, EDIT_VEHICLE_TRUNK, DIALOG_STYLE_INPUT, "Edit Vehicle Trunk", "Input the ID of the weapon, followed by the amount of the weapon\nyou wish to add to the vehicle. (Use 0 to remove the weapon)", "Edit", "Close");
						}
						else if(!strcmp(inputtext, "streetmats", true))
						{
							SetPVarInt(playerid, "EditVehicle_Trunk", 3);
							ShowPlayerDialog(playerid, EDIT_VEHICLE_TRUNK, DIALOG_STYLE_INPUT, "Edit Vehicle Trunk", "Enter the amount of street grade materials you wish to set in this vehicle. (Use 0 to remove)", "Edit", "Close");
						}
						else if(!strcmp(inputtext, "standardmats", true))
						{
							SetPVarInt(playerid, "EditVehicle_Trunk", 4);
							ShowPlayerDialog(playerid, EDIT_VEHICLE_TRUNK, DIALOG_STYLE_INPUT, "Edit Vehicle Trunk", "Enter the amount of standard grade materials you wish to set in this vehicle. (Use 0 to remove)", "Edit", "Close");
						}
						else if(!strcmp(inputtext, "militarymats", true))
						{
							SetPVarInt(playerid, "EditVehicle_Trunk", 5);
							ShowPlayerDialog(playerid, EDIT_VEHICLE_TRUNK, DIALOG_STYLE_INPUT, "Edit Vehicle Trunk", "Enter the amount of military grade materials you wish to set in this vehicle. (Use 0 to remove)", "Edit", "Close");
						}
						else if(!strcmp(inputtext, "cocaine", true))
						{
							SetPVarInt(playerid, "EditVehicle_Trunk", 6);
							ShowPlayerDialog(playerid, EDIT_VEHICLE_TRUNK, DIALOG_STYLE_INPUT, "Edit Vehicle Trunk", "Enter the amount of cocaine you wish to set in this vehicle. (Use 0 to remove)", "Edit", "Close");
						}
						else if(!strcmp(inputtext, "pot", true))
						{
							SetPVarInt(playerid, "EditVehicle_Trunk", 7);
							ShowPlayerDialog(playerid, EDIT_VEHICLE_TRUNK, DIALOG_STYLE_INPUT, "Edit Vehicle Trunk", "Enter the amount of pot you wish to set in this vehicle. (Use 0 to remove)", "Edit", "Close");
						}
						else if(!strcmp(inputtext, "speed", true))
						{
							SetPVarInt(playerid, "EditVehicle_Trunk", 8);
							ShowPlayerDialog(playerid, EDIT_VEHICLE_TRUNK, DIALOG_STYLE_INPUT, "Edit Vehicle Trunk", "Enter the amount of speed you wish to set in this vehicle. (Use 0 to remove)", "Edit", "Close");
						}
						else if(!strcmp(inputtext, "money", true))
						{
							SetPVarInt(playerid, "EditVehicle_Trunk", 9);
							ShowPlayerDialog(playerid, EDIT_VEHICLE_TRUNK, DIALOG_STYLE_INPUT, "Edit Vehicle Trunk", "Enter the amount of money you wish to set in this vehicle. (Use 0 to remove)", "Edit", "Close");
						}
						else if(!strcmp(inputtext, "empty", true))
						{
							VehicleEdit[playerid][TrunkContents] = 0;
							OnDialogResponse(playerid, EDIT_VEHICLE_MAIN, 1, 15, "Edit Trunk");
						}
						else
						{
							OnDialogResponse(playerid, EDIT_VEHICLE_MAIN, 1, 15, "Edit Trunk");
						}
					}
				}
			}
			case EDIT_VEHICLE_VIP:
			{

				if(response)
				{
					VehicleEdit[playerid][VIP] = strval(inputtext);

					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
				}
			}
			case EDIT_VEHICLE_HEALTH:
			{

				if(response)
				{
					VehicleEdit[playerid][vHealth] = strval(inputtext);

					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
				}
			}

			case EDIT_VEHICLE_PAINTJOB:
			{

				if(response)
				{
					VehicleEdit[playerid][PaintJob] = strval(inputtext);

					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle",EditVehicleString(playerid), "Edit", "Exit");
				}
			}

			//Mod list related, this sucks hard ugly tedious SUCKAGE
			case EDIT_VEHICLE_MOD0:
			{
				new sql = GetPVarInt(playerid, "Edit_Vehicle");
				if(response)
				{
					new idx = GetVIndex(sql), good_mod;
					good_mod = IsLegalMod(Veh[idx][Link], strval(inputtext));
					if(!good_mod && strval(inputtext) != 0)
						return SendClientMessage(playerid, -1, "That modification does not fit this vehicle.");

					VehicleEdit[playerid][Mod0] = strval(inputtext);
					SetVehicleMod(sql, 0, strval(inputtext));
					SaveVehicle(sql);

					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST, "Edit Vehicle", EditVehicleString(playerid), "Edit", "Exit");
				}
			}
			case EDIT_VEHICLE_MOD1:
			{
				new sql = GetPVarInt(playerid, "Edit_Vehicle");
				if(response)
				{
					new idx = GetVIndex(sql), good_mod;
					good_mod = IsLegalMod(Veh[idx][Link], strval(inputtext));
					if(!good_mod && strval(inputtext) != 0)
						return SendClientMessage(playerid, -1, "That modification does not fit this vehicle.");

					VehicleEdit[playerid][Mod1] = strval(inputtext);
					SetVehicleMod(sql, 1, strval(inputtext));
					SaveVehicle(sql);

					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST, "Edit Vehicle", EditVehicleString(playerid), "Edit", "Exit");
				}
			}
			case EDIT_VEHICLE_MOD2:
			{
				new sql = GetPVarInt(playerid, "Edit_Vehicle");
				if(response)
				{
					new idx = GetVIndex(sql), good_mod;
					good_mod = IsLegalMod(Veh[idx][Link], strval(inputtext));
					if(!good_mod && strval(inputtext) != 0)
						return SendClientMessage(playerid, -1, "That modification does not fit this vehicle.");

					VehicleEdit[playerid][Mod2] = strval(inputtext);
					SetVehicleMod(sql, 2, strval(inputtext));
					SaveVehicle(sql);

					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST, "Edit Vehicle", EditVehicleString(playerid), "Edit", "Exit");
				}
			}
			case EDIT_VEHICLE_MOD3:
			{
				new sql = GetPVarInt(playerid, "Edit_Vehicle");
				if(response)
				{
					new idx = GetVIndex(sql), good_mod;
					good_mod = IsLegalMod(Veh[idx][Link], strval(inputtext));
					if(!good_mod && strval(inputtext) != 0)
						return SendClientMessage(playerid, -1, "That modification does not fit this vehicle.");

					VehicleEdit[playerid][Mod3] = strval(inputtext);
					SetVehicleMod(sql, 3, strval(inputtext));
					SaveVehicle(sql);

					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST, "Edit Vehicle", EditVehicleString(playerid), "Edit", "Exit");
				}
			}
			case EDIT_VEHICLE_MOD4:
			{
				new sql = GetPVarInt(playerid, "Edit_Vehicle");
				if(response)
				{
					new idx = GetVIndex(sql), good_mod;
					good_mod = IsLegalMod(Veh[idx][Link], strval(inputtext));
					if(!good_mod && strval(inputtext) != 0)
						return SendClientMessage(playerid, -1, "That modification does not fit this vehicle.");

					VehicleEdit[playerid][Mod4] = strval(inputtext);
					SetVehicleMod(sql, 4, strval(inputtext));
					SaveVehicle(sql);

					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST, "Edit Vehicle", EditVehicleString(playerid), "Edit", "Exit");
				}
			}
			case EDIT_VEHICLE_MOD5:
			{
				new sql = GetPVarInt(playerid, "Edit_Vehicle");
				if(response)
				{
					new idx = GetVIndex(sql), good_mod;
					good_mod = IsLegalMod(Veh[idx][Link], strval(inputtext));
					if(!good_mod && strval(inputtext) != 0)
						return SendClientMessage(playerid, -1, "That modification does not fit this vehicle.");

					VehicleEdit[playerid][Mod5] = strval(inputtext);
					SetVehicleMod(sql, 5, strval(inputtext));
					SaveVehicle(sql);

					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST, "Edit Vehicle", EditVehicleString(playerid), "Edit", "Exit");
				}
			}
			case EDIT_VEHICLE_MOD6:
			{
				new sql = GetPVarInt(playerid, "Edit_Vehicle");
				if(response)
				{
					new idx = GetVIndex(sql), good_mod;
					good_mod = IsLegalMod(Veh[idx][Link], strval(inputtext));
					if(!good_mod && strval(inputtext) != 0)
						return SendClientMessage(playerid, -1, "That modification does not fit this vehicle.");

					VehicleEdit[playerid][Mod6] = strval(inputtext);
					SetVehicleMod(sql, 6, strval(inputtext));
					SaveVehicle(sql);

					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST, "Edit Vehicle", EditVehicleString(playerid), "Edit", "Exit");
				}
			}
			case EDIT_VEHICLE_MOD7:
			{
				new sql = GetPVarInt(playerid, "Edit_Vehicle");
				if(response)
				{
					new idx = GetVIndex(sql), good_mod;
					good_mod = IsLegalMod(Veh[idx][Link], strval(inputtext));
					if(!good_mod && strval(inputtext) != 0)
						return SendClientMessage(playerid, -1, "That modification does not fit this vehicle.");

					VehicleEdit[playerid][Mod7] = strval(inputtext);
					SetVehicleMod(sql, 7, strval(inputtext));
					SaveVehicle(sql);

					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST, "Edit Vehicle", EditVehicleString(playerid), "Edit", "Exit");
				}
			}
			case EDIT_VEHICLE_MOD8:
			{
				new sql = GetPVarInt(playerid, "Edit_Vehicle");
				if(response)
				{
					new idx = GetVIndex(sql), good_mod;
					good_mod = IsLegalMod(Veh[idx][Link], strval(inputtext));
					if(!good_mod && strval(inputtext) != 0)
						return SendClientMessage(playerid, -1, "That modification does not fit this vehicle.");

					VehicleEdit[playerid][Mod8] = strval(inputtext);
					SetVehicleMod(sql, 8, strval(inputtext));
					SaveVehicle(sql);

					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST, "Edit Vehicle", EditVehicleString(playerid), "Edit", "Exit");
				}
			}
			case EDIT_VEHICLE_MOD9:
			{
				new sql = GetPVarInt(playerid, "Edit_Vehicle");
				if(response)
				{
					new idx = GetVIndex(sql), good_mod;
					good_mod = IsLegalMod(Veh[idx][Link], strval(inputtext));
					if(!good_mod && strval(inputtext) != 0)
						return SendClientMessage(playerid, -1, "That modification does not fit this vehicle.");

					VehicleEdit[playerid][Mod9] = strval(inputtext);
					SetVehicleMod(sql, 9, strval(inputtext));
					SaveVehicle(sql);

					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST, "Edit Vehicle", EditVehicleString(playerid), "Edit", "Exit");
				}
			}
			case EDIT_VEHICLE_MOD10:
			{
				new sql = GetPVarInt(playerid, "Edit_Vehicle");
				if(response)
				{
					new idx = GetVIndex(sql), good_mod;
					good_mod = IsLegalMod(Veh[idx][Link], strval(inputtext));
					if(!good_mod && strval(inputtext) != 0)
						return SendClientMessage(playerid, -1, "That modification does not fit this vehicle.");

					VehicleEdit[playerid][Mod10] = strval(inputtext);
					SetVehicleMod(sql, 10, strval(inputtext));
					SaveVehicle(sql);

					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST, "Edit Vehicle", EditVehicleString(playerid), "Edit", "Exit");
				}
			}
			case EDIT_VEHICLE_MOD11:
			{
				new sql = GetPVarInt(playerid, "Edit_Vehicle");
				if(response)
				{
					new idx = GetVIndex(sql), good_mod;
					good_mod = IsLegalMod(Veh[idx][Link], strval(inputtext));
					if(!good_mod && strval(inputtext) != 0)
						return SendClientMessage(playerid, -1, "That modification does not fit this vehicle.");

					VehicleEdit[playerid][Mod11] = strval(inputtext);
					SetVehicleMod(sql, 11, strval(inputtext));
					SaveVehicle(sql);

					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST, "Edit Vehicle", EditVehicleString(playerid), "Edit", "Exit");
				}
			}
			case EDIT_VEHICLE_MOD12:
			{
				new sql = GetPVarInt(playerid, "Edit_Vehicle");
				if(response)
				{
					new idx = GetVIndex(sql), good_mod;
					good_mod = IsLegalMod(Veh[idx][Link], strval(inputtext));
					if(!good_mod && strval(inputtext) != 0)
						return SendClientMessage(playerid, -1, "That modification does not fit this vehicle.");

					VehicleEdit[playerid][Mod12] = strval(inputtext);
					SetVehicleMod(sql, 12, strval(inputtext));
					SaveVehicle(sql);

					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST, "Edit Vehicle", EditVehicleString(playerid), "Edit", "Exit");
				}
			}
			case EDIT_VEHICLE_MOD13:
			{
				new sql = GetPVarInt(playerid, "Edit_Vehicle");
				if(response)
				{
					new idx = GetVIndex(sql), good_mod;
					good_mod = IsLegalMod(Veh[idx][Link], strval(inputtext));
					if(!good_mod && strval(inputtext) != 0)
						return SendClientMessage(playerid, -1, "That modification does not fit this vehicle.");

					VehicleEdit[playerid][Mod13] = strval(inputtext);
					SetVehicleMod(sql, 13, strval(inputtext));
					SaveVehicle(sql);

					ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST, "Edit Vehicle", EditVehicleString(playerid), "Edit", "Exit");
				}
			}
			case EDIT_VEHICLE_DELETE:
			{
				if(!strcmp("Confirm", inputtext))
				{
					new string[255], idx = GetVIndex(VehicleEdit[playerid][SQLID]);

					if(idx != -1)
					{
						new id = GetPlayerIDEx(VehicleEdit[playerid][Owner]);
						if(IsSQLVehicleSpawned(VehicleEdit[playerid][SQLID]))
							DespawnVehicleSQL(VehicleEdit[playerid][SQLID]);

						if(id != INVALID_PLAYER_ID)
						{
							for(new i; i < 5; i++)
							{
								if(Player[id][Cars][i] == VehicleEdit[playerid][SQLID])
								{
									Player[id][Cars][i] = 0;
									break;
								}
							}
						}

						ResetVCell(idx);
					}

					format(string, sizeof(string), "DELETE FROM vehicles WHERE sqlid = '%d'", VehicleEdit[playerid][SQLID]);
					mysql_query(MYSQL_MAIN, string, false);

					format(string, sizeof(string), "[CAR] %s has deleted the car with SQLID %d.", GetName(playerid), VehicleEdit[playerid][SQLID]);
					StatLog(string);

					format(string, sizeof(string), "WARNING: %s has deleted vehicle SQLID: %d!", GetName(playerid), VehicleEdit[playerid][SQLID]);
					SendToAdmins(ADMINORANGE, string, 0);
					WarningLog(string);
					VehicleEdit[playerid][SQLID] = 0;
				}
				else
				ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST, "Edit Vehicle", EditVehicleString(playerid), "Edit", "Exit");

			}
			case EDIT_VEHICLE_SESSION:
			{
				if(response)
					ShowPlayerDialog(playerid, EDIT_VEHICLE_CONFIRM, DIALOG_STYLE_LIST, "Continue Previous Session?", "Yes\nNo\n", "Edit", "Cancel");
			}
			case EDIT_VEHICLE_CONFIRM:
			{
				if(response)
				{
					new string[128];

					if(listitem)
					{
						VehicleEdit[playerid][SQLID] = 0;
						format(string, sizeof(string), "%d", GetPVarInt(playerid, "Edit_Vehicle"));
						cmd_editvehicle(playerid, string);
					}
					else
					{
						format(string, sizeof(string), "%d", VehicleEdit[playerid][SQLID]);
						ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle", EditVehicleString(playerid), "Edit", "Exit");
					}

				}
			}
			case EDIT_VEHICLE_GANG:
			{
				if(!response)
					return 1;

				new id = strval(inputtext);
				if(!DoesGangExist(id) && id != 0)
				{
					SendClientMessage(playerid, RED, "Invalid gang ID.");
					return ShowPlayerDialog(playerid, EDIT_VEHICLE_GANG, DIALOG_STYLE_INPUT, "Edit Gang", "Enter gang ID.", "Edit", "Exit");
				}
				VehicleEdit[playerid][GangLink] = id;
				ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST ,"Edit Vehicle", EditVehicleString(playerid), "Edit", "Exit");
			}
			case VEHICLE_SELLCAR:
			{
				new target = GetPVarInt(playerid, "SellCar_Target") - 1, string[128];

				if(!IsPlayerConnectedEx(target))
					return SendClientMessage(playerid, -1, "That player is no longer online");

				if(!strcmp("Empty", inputtext))
					return SendClientMessage(playerid, -1, "That slot is empty");

				if(GetPlayerVehCount(target) >= GetPlayerMaxVehicles(target))
					return SendClientMessage(playerid, -1, "That player can't own anymore vehicles!");

				if(Player[target][PlayingHours] < 2)
					return SendClientMessage(playerid, WHITE, "You can't sell a vehicle to a player with less than two playing hours.");

				new sql = Player[playerid][Cars][listitem], idx = GetVIndex(sql);

				if(Veh[idx][VIP] == 5 && Player[target][VipRank] == 0)
					return SendClientMessage(playerid, -1, "That player must be VIP to receive this vehicle");

				if(Veh[idx][impounded])
					return SendClientMessage(playerid, WHITE, "You cannot sell a vehicle that is in the impound.");

				format(string, sizeof(string), "%s has offered to sell you their %s for $%d type /accept vehicle", GetNameEx(playerid), vNames[Veh[idx][Model] - 400], GetPVarInt(playerid,"SellCar_Price"));
				SendClientMessage(target, -1, string);
				format(string, sizeof(string), "You offer to sell %s your vehicle for $%d", GetNameEx(target), GetPVarInt(playerid, "SellCar_Price"));
				SendClientMessage(playerid, -1, string);
				SetPVarInt(target, "SellCar_SellerSQL", Player[playerid][Cars][listitem]);
				SetPVarInt(target, "SellCar_Timeout", gettime() + 15);
			}
			case VEHICLE_GIVEKEYS:
			{
				new target = GetPVarInt(playerid, "GiveKey_Target") - 1, string[128];
			    if(!IsPlayerConnectedEx(target))
					return SendClientMessage(playerid, -1, "That player is no longer online");

				if(!strcmp("Empty", inputtext))
					return SendClientMessage(playerid, -1, "That slot is empty");

				new sql = Player[playerid][Cars][listitem], slot;
    			for(new i; i < 5; i++)
				{
					if(Player[playerid][Cars][i] == sql)
					{
						slot = i;
					}
				}

				if(Player[playerid][SpareKeys][slot] != -1)
					return SendClientMessage(playerid, -1, "You have already given someone your spare key to this car");

				Player[target][TempKey] = sql;
				Player[playerid][SpareKeys][slot] = target;
				format(string, sizeof(string), "* %s hands %s a set of keys for their vehicle", GetNameEx(playerid), GetNameEx(target));
				NearByMessage(playerid, NICESKY, string);
			}
			case VEHICLE_ABANDON:
			{
				if(response)
				{
					if(!strcmp(inputtext, "Empty"))
						return SendClientMessage(playerid, -1, "That vehicle slot is empty");

					new sql = Player[playerid][Cars][listitem], idx = GetVIndex(sql);

					Player[playerid][Cars][listitem] = 0;
					if(IsSQLVehicleSpawned(sql))
						DespawnVehicleSQL(sql);

					new string[255];
					format(string, sizeof(string), "DELETE FROM vehicles WHERE sqlid = '%d'", sql);
					mysql_query(MYSQL_MAIN, string, false);

					ResetVCell(idx);

					format(string, sizeof(string), "[CAR] %s has abandoned their car with SQLID %d.", GetName(playerid), sql);
					StatLog(string);

					SendClientMessage(playerid, -1, "You've abandoned your vehicle");
				}
			}
			case VEHICLE_CALLCAR:
			{
				if(response)
				{
					if(!strcmp(inputtext, "Empty"))
						return SendClientMessage(playerid, -1, "That vehicle slot is empty");

					new Float:x, Float:y, Float:z;
					new idx = GetVIndex(Player[playerid][Cars][listitem]);

					if(Veh[idx][impounded] == 1)
						return SendClientMessage(playerid, -1, "That vehicle has been impounded!");

					if(!IsSQLVehicleSpawned(Player[playerid][Cars][listitem]))
						return SendClientMessage(playerid, -1, "That vehicle isn't spawned");

					GetVehiclePos(Veh[idx][Link], x, y, z);
					SetPlayerCheckpoint(playerid, x, y, z, 10.0);
					Player[playerid][Checkpoint] = 1;
					Player[playerid][FindingCar] = 1;
					SendClientMessage(playerid, WHITE, "A checkpoint has been set.");
				}
			}
			case VEHICLE_VLIST:
			{
				if(response)
				{
					if(!strcmp(inputtext, "Empty"))
						return SendClientMessage(playerid, -1, "That vehicle slot is empty");

					new sql = Player[playerid][Cars][listitem], idx = GetVIndex(sql);

					if(IsSQLVehicleSpawned(sql))
					{
						//print("Vlist Despawn");
						if(IsVehicleEmpty(Veh[idx][Link]) == 1)
							return SendClientMessage(playerid, -1, "There must be no one in your vehicle to despawn it");
						DespawnVehicleSQL(sql);
					}
					else
					{
						//print("Vlist Spawn");
						if(GetActivePlayerVehicles(playerid) == 2)
							return SendClientMessage(playerid, -1, "You have max active vehicles");
						SpawnVehicleSQL(sql);
					}

				}
			}
			case RADIO_STATIONS:
			{
				if(response)
				{
					new radioid = -1;
					for(new i; i < MAX_RADIO_STATIONS; i++)
					{
						if(!strcmp(inputtext, RadioSettings[i][StationName], true))
						{
							radioid = i;
						}
					}

					if(radioid == -1)
						return SendClientMessage(playerid, -1, "Unable to find radioid station.");

					foreach(Player, i)
					{
						if(IsPlayerInVehicle(i, GetPlayerVehicleID(playerid)))
						{
							StopAudioStreamForPlayer(i);
							PlayAudioStreamForPlayer(i, RadioSettings[radioid][URL]);
							if(GetPVarInt(i, "PlayingBoombox"))
								DeletePVar(i, "PlayingBoombox");
						}
					}
					new sql = GetVSQLID(GetPlayerVehicleID(playerid)), idx = GetVIndex(sql);

					if(sql != 0)
						format(Veh[idx][radioUrl], 100, "%s", RadioSettings[radioid][URL]);

					new string[128];
					format(string, sizeof(string), "* %s changes their radio station to '%s'", GetNameEx(playerid), RadioSettings[radioid][StationName]);
					NearByMessage(playerid, NICESKY, string);
				}
			}

			case FAVE_RADIO_STATION:
			{
				if(!strcmp(inputtext, "Remove", true))
				{
					Player[playerid][FavoriteStationSet] = 0;
					format(Player[playerid][FavoriteStation], 255, " ");
					return SendClientMessage(playerid, -1, "You have removed your favourite station.");
				}

				new found = -1;
				for(new i; i < MAX_RADIO_STATIONS; i++)
				{
					if(!strcmp(inputtext, RadioSettings[i][StationName], true))
					{
						Player[playerid][FavoriteStationSet] = 1;
						format(Player[playerid][FavoriteStation], 255, RadioSettings[i][URL]);
						new string[128];
						format(string, sizeof(string), "You have set your favorite radio station to '%s'", inputtext);
						return SendClientMessage(playerid, -1, string);
					}
				}

				if(found == -1)
					return SendClientMessage(playerid, -1, "Unable to find radio station.");
			}
			case TUNE_RADIO_STATION:
			{
				foreach(Player, i)
				{
					if(IsPlayerInVehicle(i, GetPlayerVehicleID(playerid)))
					{
						StopAudioStreamForPlayer(i);
						PlayAudioStreamForPlayer(i, inputtext);
						if(GetPVarInt(i, "PlayingBoombox"))
							DeletePVar(i, "PlayingBoombox");
					}
				}
				new sql = GetVSQLID(GetPlayerVehicleID(playerid)), idx = GetVIndex(sql);

				if(sql != 0)
					format(Veh[idx][radioUrl], 100, "%s", inputtext);

				new string[128];
				format(string, sizeof(string), "* %s tunes their radio station.", GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, string);
			}
			case H_RADIO_STATIONS:
			{
				if(response)
				{
					new radioid = -1;
					for(new i; i < MAX_RADIO_STATIONS; i++)
					{
						if(!strcmp(inputtext, RadioSettings[i][StationName], true))
						{
							radioid = i;
						}
					}

					if(radioid == -1)
						return SendClientMessage(playerid, -1, "Unable to find radioid station.");

					format(Houses[Player[playerid][InHouse]][RadioURL], 100, "%s", RadioSettings[radioid][URL]);
					foreach(Player, i)
					{
						if(Player[i][InHouse] != Player[playerid][InHouse])
							continue;

						StopAudioStreamForPlayer(i);
						PlayAudioStreamForPlayer(i, Houses[Player[i][InHouse]][RadioURL]);
						if(GetPVarInt(i, "PlayingBoombox"))
							DeletePVar(i, "PlayingBoombox");
					}
				}
			}
			case H_RADIO_TUNE:
			{
				if(!response)
					return 1;
					
				format(Houses[Player[playerid][InHouse]][RadioURL], 100, "%s", inputtext);
				foreach(Player, i)
				{
					if(Player[i][InHouse] != Player[playerid][InHouse])
						continue;
						
					StopAudioStreamForPlayer(i);
					PlayAudioStreamForPlayer(i, inputtext);
					if(GetPVarInt(i, "PlayingBoombox"))
						DeletePVar(i, "PlayingBoombox");
				}
			}
			case B_RADIO_TUNE:
			{
				if(!response)
					return 1;
				
				format(Businesses[Player[playerid][InBusiness]][RadioURL], 100, "%s", inputtext);
				foreach(Player, i)
				{
					if(Player[i][InBusiness] != Player[playerid][InBusiness])
						continue;
						
					StopAudioStreamForPlayer(i);
					PlayAudioStreamForPlayer(i, inputtext);
					if(GetPVarInt(i, "PlayingBoombox"))
						DeletePVar(i, "PlayingBoombox");
				}
			}
			case B_RADIO_STATIONS:
			{
				if(response)
				{
					new radioid = -1;
					for(new i; i < MAX_RADIO_STATIONS; i++)
					{
						if(!strcmp(inputtext, RadioSettings[i][StationName], true))
						{
							radioid = i;
						}
					}

					if(radioid == -1)
						return SendClientMessage(playerid, -1, "Unable to find radioid station.");

					format(Businesses[Player[playerid][InBusiness]][RadioURL], 100, "%s", RadioSettings[radioid][URL]);
					foreach(Player, i)
					{
						if(Player[i][InBusiness] != Player[playerid][InBusiness])
							continue;

						StopAudioStreamForPlayer(i);
						PlayAudioStreamForPlayer(i, Businesses[Player[i][InBusiness]][RadioURL]);
						if(GetPVarInt(i, "PlayingBoombox"))
							DeletePVar(i, "PlayingBoombox");
					}
				}
			}
			#if defined MTG_FAIR
			case DJ_RADIO:
			{
				if(response)
				{
					new radioid = -1;
					for(new i; i < MAX_RADIO_STATIONS; i++)
					{
						if(!strcmp(inputtext, RadioSettings[i][StationName], true))
						{
							radioid = i;
						}
					}

					if(radioid == -1)
						return SendClientMessage(playerid, -1, "Unable to find radioid station.");

					DJ_RadioStation = radioid;
					foreach(Player, i)
					{
						if(IsPlayerInDynamicArea(i, DJ_Radius))
						{
							StopAudioStreamForPlayer(i);
							PlayAudioStreamForPlayer(i, RadioSettings[DJ_RadioStation][URL]);
							if(GetPVarInt(i, "PlayingBoombox"))
								DeletePVar(i, "PlayingBoombox");
						}
					}
				}
			}
			#endif
			case ADMIN_RADIO:
			{
				if(response)
				{
					new radioid = -1;
					for(new i; i < MAX_RADIO_STATIONS; i++)
					{
						if(!strcmp(inputtext, RadioSettings[i][StationName], true))
						{
							radioid = i;
						}
					}

					if(radioid == -1)
						return SendClientMessage(playerid, -1, "Unable to find radioid station.");

					Player[playerid][AdminRadio] = 1;
					StopAudioStreamForPlayer(playerid);
					PlayAudioStreamForPlayer(playerid, RadioSettings[radioid][URL]);
					if(GetPVarInt(playerid, "PlayingBoombox"))
						DeletePVar(playerid, "PlayingBoombox");
				}
			}
			case IMPOUND_LIST:
			{
				if(!response)
					return 1;

				new idx = GetVIndex(Player[playerid][Cars][listitem]);

				if(Player[playerid][Identity] == 0)
					return SendClientMessage(playerid, WHITE, "You need identification to get your vehicle from the impound!");

				if(Veh[idx][impounded] == 0)
					return SendClientMessage(playerid, -1, "Error Vehicle not impounded");

				if(Veh[idx][ImpoundCount] >= 3)
					return SendClientMessage(playerid, WHITE, "You cannot get this vehicle out of the impound.");

				new cost = GetVehicleBasePrice(Veh[idx][Model]) / 10;

				if(Player[playerid][Money] < cost + (cost * Veh[idx][ImpoundCount]))
					return SendClientMessage(playerid, -1, "You can't afford to pay the fine!");

				if(Player[playerid][Identity] == 0)
					return SendClientMessage(playerid, WHITE, "You need identification to get your vehicle from the impound!");

				if(Player[playerid][CarLicense] == 0)
					return SendClientMessage(playerid, WHITE, "You need a standard license to get your vehicle from the impound!");

				if(Veh[idx][Registered] == 0)
					return SendClientMessage(playerid, WHITE, "You can't get that vehicle out unless it is registered.");

				Veh[idx][impounded] = 0;

				if(GetActivePlayerVehicles(playerid) < GetPlayerMaxVehicles(playerid))
					SpawnVehicleSQL(Player[playerid][Cars][listitem]);
				else
				SendClientMessage(playerid, -1, "Your vehicle has failed to respawn due to max vehicles being spawned");

				if(Veh[idx][spawnState])
				{
					Veh[idx][impounded] = 0;
					Veh[idx][vX] = UnimpoundPos[0];
					Veh[idx][vY] = UnimpoundPos[1];
					Veh[idx][vZ] = UnimpoundPos[2];
					Veh[idx][vAngle] = UnimpoundPos[3];
					Veh[idx][vInt] = 0;
					Veh[idx][vVWorld] = 0;
					Veh[idx][ImpoundTime] = 0;
					SaveVehicle(Veh[idx][SQLID]);
					SetVehicleZAngle(Veh[idx][Link], UnimpoundPos[3]);
					SetVehiclePos(Veh[idx][Link], UnimpoundPos[0], UnimpoundPos[1], UnimpoundPos[2]);
				}

				Player[playerid][Money] -= cost + (cost * Veh[idx][ImpoundCount]);
				SendClientMessage(playerid, -1, "You've paid to retrieve your vehicle");
				Groups[1][SafeMoney] += cost + (cost * Veh[idx][ImpoundCount]);
				SaveGroup(1);
				SavePlayerData(playerid);
			}
			case F_IMPOUND_LIST:
			{
				if(!response)
					return 1;
				else
				{
					new sql = tGroupVID[playerid][listitem];
					if(sql == 0)
						return 1;

					new idx = GetVIndex(sql);

					if(Veh[idx][impounded] == 0)
						return SendClientMessage(playerid, -1, "Error Vehicle not impounded");

					if(Veh[idx][ImpoundCount] >= 3)
						return SendClientMessage(playerid, WHITE, "You cannot get this vehicle out of the impound.");

					new cost = GetVehicleBasePrice(Veh[idx][Model]) / 10;
					
					if(Groups[Player[playerid][Group]][SafeMoney] < cost + (cost * Veh[idx][ImpoundCount]))
						return SendClientMessage(playerid, -1, "Your group safe doesn't have enough money");

					if(Player[playerid][Identity] == 0)
						return SendClientMessage(playerid, WHITE, "You need identification to get your vehicle from the impound!");

					if(Player[playerid][CarLicense] == 0)
						return SendClientMessage(playerid, WHITE, "You need a standard license to get your vehicle from the impound!");

					if(Veh[idx][Registered] == 0)
						return SendClientMessage(playerid, WHITE, "You can't get that vehicle out unless it is registered.");

					Groups[Player[playerid][Group]][SafeMoney] -= cost + (cost * Veh[idx][ImpoundCount]);
					SendClientMessage(playerid, -1, "You've paid from your faction safe to retrieve your faction vehicle");

					if(Veh[idx][spawnState])
					{
						Veh[idx][impounded] = 0;
						Veh[idx][vX] = UnimpoundPos[0];
						Veh[idx][vY] = UnimpoundPos[1];
						Veh[idx][vZ] = UnimpoundPos[2];
						Veh[idx][vAngle] = UnimpoundPos[3];
						Veh[idx][vInt] = 0;
						Veh[idx][vVWorld] = 0;
						Veh[idx][ImpoundTime] = 0;
						SaveVehicle(Veh[idx][SQLID]);
						SetVehiclePos(Veh[idx][Link], UnimpoundPos[0], UnimpoundPos[1], UnimpoundPos[2]);
						SetVehicleZAngle(Veh[idx][Link], UnimpoundPos[3]);
					}
					Groups[1][SafeMoney] += cost + (cost * Veh[idx][ImpoundCount]);
					SaveGroup(Player[playerid][Group]);
					SaveGroup(1);
				}
			}
			case G_IMPOUND_LIST:
			{
				if(!response)
					return 1;
				else
				{
					new sql = tGangVID[playerid][listitem];
					if(sql == 0)
						return 1;

					new idx = GetVIndex(sql);

					if(Veh[idx][impounded] == 0)
						return SendClientMessage(playerid, -1, "Error Vehicle not impounded");

					if(Veh[idx][ImpoundCount] >= 3)
						return SendClientMessage(playerid, WHITE, "You cannot get this vehicle out of the impound.");

					new cost = GetVehicleBasePrice(Veh[idx][Model]) / 10;
					
					if(Gangs[Player[playerid][Gang]][GangSafe][GANGSAFE_CASH] < cost + (cost * Veh[idx][ImpoundCount]))
						return SendClientMessage(playerid, -1, "Your faction safe doesn't have enough money");

					if(Player[playerid][Identity] == 0)
						return SendClientMessage(playerid, WHITE, "You need identification to get your vehicle from the impound!");

					if(Player[playerid][CarLicense] == 0)
						return SendClientMessage(playerid, WHITE, "You need a standard license to get your vehicle from the impound!");

					if(Veh[idx][Registered] == 0)
						return SendClientMessage(playerid, WHITE, "You can't get that vehicle out unless it is registered.");

					Gangs[Player[playerid][Gang]][GangSafe][GANGSAFE_CASH] -= cost + (cost * Veh[idx][ImpoundCount]);
					SendClientMessage(playerid, -1, "You've paid from your faction safe to retrieve your gang vehicle");

					if(Veh[idx][spawnState])
					{
						Veh[idx][impounded] = 0;
						Veh[idx][vX] = UnimpoundPos[0];
						Veh[idx][vY] = UnimpoundPos[1];
						Veh[idx][vZ] = UnimpoundPos[2];
						Veh[idx][vAngle] = UnimpoundPos[3];
						Veh[idx][vInt] = 0;
						Veh[idx][vVWorld] = 0;
						Veh[idx][ImpoundTime] = 0;
						SaveVehicle(Veh[idx][SQLID]);
						SetVehiclePos(Veh[idx][Link], UnimpoundPos[0], UnimpoundPos[1], UnimpoundPos[2]);
						SetVehicleZAngle(Veh[idx][Link], UnimpoundPos[3]);
					}
					Groups[1][SafeMoney] += cost + (cost * Veh[idx][ImpoundCount]);
					SaveGang(Player[playerid][Gang]);
					SaveGroup(1);
				}
			}
			case G_CALL_CAR:
			{
				if(!response)
					return 1;
				else
				{
					new sql = tGroupVID[playerid][listitem];
					if(sql == 0)
						return 1;

					new idx = GetVIndex(sql), Float:x, Float:y, Float:z;

					GetVehiclePos(Veh[idx][Link], x, y, z);
					SetPlayerCheckpoint(playerid, x, y, z, 10.0);
					Player[playerid][Checkpoint] = 1;
					Player[playerid][FindingCar] = 1;
					SendClientMessage(playerid, WHITE, "A checkpoint has been set.");
				}
			}
			case NEWBIE_TAGS:
			{
				if(!response)
					return 1;

				format(Player[playerid][nTag], 32, "%s", inputtext);

				SendClientMessage(playerid, -1, "Your Newbie tag was updated");
			}
			case 4592:
			{
				switch(listitem)
				{
					case 0:
					{
						if(Player[playerid][FightBox] == 1)
							SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
						else
						SendClientMessage(playerid, WHITE, "Please purchase this style from a gym first.");
					}
					case 1:
					{
						if(Player[playerid][FightKungfu] == 1)
							SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
						else
						SendClientMessage(playerid, WHITE, "Please purchase this style from a gym first.");
					}
					case 2:
					{
						if(Player[playerid][FightKneehead] == 1)
							SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);
						else
						SendClientMessage(playerid, WHITE, "Please purchase this style from a gym first.");
					}
					case 3:
					{
						if(Player[playerid][FightGrabkick] == 1)
							SetPlayerFightingStyle(playerid, FIGHT_STYLE_GRABKICK);
						else
						SendClientMessage(playerid, WHITE, "Please purchase this style from a gym first.");
					}
					case 4:
					{
						if(Player[playerid][FightElbow] == 1)
							SetPlayerFightingStyle(playerid, FIGHT_STYLE_ELBOW);
						else
						SendClientMessage(playerid, WHITE, "Please purchase this style from a gym first.");
					}
					case 5:
					SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);
				}
			}
			case 4591:
			{
				switch(listitem)
				{
					case 0:
					{
						new str[255];
						new p1 = Businesses[Player[playerid][InBusiness]][bProductPrice1],
						p2 = Businesses[Player[playerid][InBusiness]][bProductPrice2],
						p3 = Businesses[Player[playerid][InBusiness]][bProductPrice3],
						p4 = Businesses[Player[playerid][InBusiness]][bProductPrice4],
						p5 = Businesses[Player[playerid][InBusiness]][bProductPrice5];
						format(str, sizeof(str), "Boxing ($%d)\nKung Fu ($%d)\nKneehead ($%d)\nGrabkick ($%d)\nElbow ($%d)\n", p1, p2, p3, p4, p5);
						ShowPlayerDialog(playerid, GYM_FIGHTSTYLES, DIALOG_STYLE_LIST, "[Gym] Fightstyles", str, "Buy", "Exit");
					}
					case 1:
					{
						new str[255];
						new p6 = Businesses[Player[playerid][InBusiness]][bProductPrice6],
						p7 = Businesses[Player[playerid][InBusiness]][bProductPrice7],
						p8 = Businesses[Player[playerid][InBusiness]][bProductPrice8],
						p9 = Businesses[Player[playerid][InBusiness]][bProductPrice9],
						p10 = Businesses[Player[playerid][InBusiness]][bProductPrice10],
						p11 = p6 + p6 / 4;
						format(str, sizeof(str), "Default (FREE)\nGang 1 ($%d)\nGang 2 ($%d)\nDrunk ($%d)\nSexy ($%d)\nFatty ($%d)\nBad Back ($%d)", p6, p11, p7, p8, p9, p10);
						ShowPlayerDialog(playerid, GYM_WALKSTYLES, DIALOG_STYLE_LIST, "[Gym] Walktstyles", str, "Buy", "Exit");
					}
				}
			}
			case GYM_FIGHTSTYLES:
			{
				if(!response)
					return 1;

				switch(listitem)
				{
					case 0:
					{
						if(Player[playerid][FightBox] == 0)
						{
							if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice1])
							{
								Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice1];
								Player[playerid][FightBox] = 1;
//								Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice1];
								AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice1]);
								SendClientMessage(playerid, WHITE, "You have purchased the Boxing Fighting Style (type /usefightstyle).");
							}
							else
							{
								SendClientMessage(playerid, WHITE, "You do not have enough money.");
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You already have this style.");
						}
					}
					case 1:
					{
						if(Player[playerid][FightKungfu] == 0)
						{
							if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice2])
							{
								Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice2];
								Player[playerid][FightKungfu] = 1;
//								Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice2];
								AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice2]);
								SendClientMessage(playerid, WHITE, "You have purchased the Kungfu Fighting Style (type /usefightstyle).");
							}
							else
							{
								SendClientMessage(playerid, WHITE, "You do not have enough money.");
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You already have this style.");
						}
					}
					case 2:
					{
						if(Player[playerid][FightKneehead] == 0)
						{
							if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice3])
							{
								Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice3];
								Player[playerid][FightKneehead] = 1;
//								Businesses[Player[playerid][InBusiness]][bVault] +=Businesses[Player[playerid][InBusiness]][bProductPrice3];
								AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice3]);
								SendClientMessage(playerid, WHITE, "You have purchased the Kneehead Fighting Style (type /usefightstyle).");
							}
							else
							{
								SendClientMessage(playerid, WHITE, "You do not have enough money.");
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You already have this style.");
						}
					}
					case 3:
					{
						if(Player[playerid][FightGrabkick] == 0)
						{
							if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice4])
							{
								Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice4];
								Player[playerid][FightGrabkick] = 1;
//								Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice4];
								AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice4]);
								SendClientMessage(playerid, WHITE, "You have purchased the Grabkick Fighting Style (type /usefightstyle).");
							}
							else
							{
								SendClientMessage(playerid, WHITE, "You do not have enough money.");
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You already have this style.");
						}
					}
					case 4:
					{
						if(Player[playerid][FightElbow] == 0)
						{
							if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice5])
							{
								Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice5];
								Player[playerid][FightElbow] = 1;
//								Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice5];
								AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice5]);
								SendClientMessage(playerid, WHITE, "You have purchased the Elbow Fighting Style (type /usefightstyle).");
							}
							else
							{
								SendClientMessage(playerid, WHITE, "You do not have enough money.");
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You already have this style.");
						}
					}
				}
			}
			case GYM_WALKSTYLES:
			{
				if(!response)
					return 1;

				switch(listitem)
				{
					case 0:
					{
						format(Player[playerid][Walk], 32, "");
						SendClientMessage(playerid, -1, "You've been reverted back to the default walk animation");
					}
					case 1:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice6])
							return SendClientMessage(playerid, -1, "You can't afford this");
						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice6];
						format(Player[playerid][Walk], 32, "WALK_gang1");
						SendClientMessage(playerid, -1, "You've been set to the Gang 1 walk animation");
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice6];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice6]);

					}
					case 2:
					{
						new price = Businesses[Player[playerid][InBusiness]][bProductPrice6] + Businesses[Player[playerid][InBusiness]][bProductPrice6] / 4;

						if(Player[playerid][Money] < price)
							return SendClientMessage(playerid, -1, "You can't afford this");
						Player[playerid][Money] -= price;
						format(Player[playerid][Walk], 32, "WALK_gang2");
						SendClientMessage(playerid, -1, "You've been set to the Gang 2 walk animation");
//						Businesses[Player[playerid][InBusiness]][bVault] += price;
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, price);
					}
					case 3:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice7])
							return SendClientMessage(playerid, -1, "You can't afford this");
						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice7];
						format(Player[playerid][Walk], 32, "WALK_drunk");
						SendClientMessage(playerid, -1, "You've been set to the drunk walk animation");
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice7];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice7]);

					}
					case 4:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice8])
							return SendClientMessage(playerid, -1, "You can't afford this");
						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice8];
						format(Player[playerid][Walk], 32, "WOMAN_walksexy");
						SendClientMessage(playerid, -1, "You've been set to the Sexy walk animation");
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice8];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice8]);

					}
					case 5:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice9])
							return SendClientMessage(playerid, -1, "You can't afford this");
						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice9];
						format(Player[playerid][Walk], 32, "WALK_fat");
						SendClientMessage(playerid, -1, "You've been set to the Fatty walk animation");
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice9];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice9]);
					}
					case 6:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice10])
							return SendClientMessage(playerid, -1, "You can't afford this");
						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice10];
						format(Player[playerid][Walk], 32, "WALK_shuffle");
						SendClientMessage(playerid, -1, "You've been set to the Bad back walk animation");
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice10];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice10]);
					}
				}
			}
			case 1230:
			{
				switch(listitem)
				{
					case 0:
					{
						if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice1])
						{
							if(Player[playerid][CollegeMedia] == 0)
							{
								Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice1];
								Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice1];
								Player[playerid][CollegeMedia] = 1;
								SendClientMessage(playerid, WHITE, "You are now qualified in Media Studies.");
							}
							else
							{
								SendClientMessage(playerid, WHITE, "You already have a degree in Media Studies.");
							}
						}
					}
					case 1:
					{
						if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice2])
						{
							if(Player[playerid][CollegeLaw] == 0)
							{
								Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice2];
								Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice2];
								Player[playerid][CollegeLaw] = 1;
								SendClientMessage(playerid, WHITE, "You are now qualified in Civil Law Studies.");
							}
							else
							{
								SendClientMessage(playerid, WHITE, "You already have a degree in Civil Law Studies.");
							}
						}
					}
					case 2:
					{
						if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice3])
						{
							if(Player[playerid][CollegeEng] == 0)
							{
								Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice3];
								Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice3];
								Player[playerid][CollegeEng] = 1;
								SendClientMessage(playerid, WHITE, "You are now qualified in Intermediate English.");
							}
							else
							{
								SendClientMessage(playerid, WHITE, "You already have a degree in Intermediate English.");
							}
						}
					}
					case 3:
					{
						if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice4])
						{
							if(Player[playerid][CollegeMath] == 0)
							{
								Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice4];
								Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice4];
								Player[playerid][CollegeMath] = 1;
								SendClientMessage(playerid, WHITE, "You are now qualified in Intermediate Mathematics.");
							}
							else
							{
								SendClientMessage(playerid, WHITE, "You already have a degree in Intermediate Mathematics.");
							}
						}
					}
					case 4:
					{
						if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice5])
						{
							if(Player[playerid][CollegeChem] == 0)
							{
								Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice5];
								Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice5];
								Player[playerid][CollegeChem] = 1;
								SendClientMessage(playerid, WHITE, "You are now qualified in Intermediate Chemistry.");
							}
							else
							{
								SendClientMessage(playerid, WHITE, "You already have a degree in Intermediate Chemistry.");
							}
						}
					}
				}
			}
			case PHONE_DROP:
			{
				if(!response)
					return 1;

				new query[128];
				mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM phones WHERE owner = '%e'", Player[playerid][NormalName]);
				new Cache:cache = mysql_query(MYSQL_MAIN, query), count = cache_get_row_count();

				if(count < listitem)
					return SendClientMessage(playerid, WHITE, "It seems you don't have that number any more (or you lost another phone).");

				new number, label[32];
				number = cache_get_field_content_int(listitem, "number");
				cache_get_field_content(listitem, "label", label);

				cache_delete(cache);

				format(query, sizeof(query), "You have dropped your phone! (%s - %d)", label, number);
				SendClientMessage(playerid, WHITE, query);

				mysql_format(MYSQL_MAIN, query, sizeof(query), "DELETE FROM phones WHERE number = '%d' AND owner = '%e'", number, Player[playerid][NormalName]);
				mysql_query(MYSQL_MAIN, query, false);

				format(query, sizeof(query), "* %s has dropped their phone.", GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, query);

				mysql_format(MYSQL_MAIN, query, sizeof(query), "DELETE FROM phonecontacts WHERE number = '%d'", number);
				mysql_query(MYSQL_MAIN, query, false);
				
				mysql_format(MYSQL_MAIN, query, sizeof(query), "DELETE FROM yellowpages WHERE phone = '%d'", number);
				
				Player[playerid][PhoneN] = -1;
			}
			case 4621:
			{
				new string[128];

				switch(listitem)
				{
					case 0:
					{
					    if(!Player[playerid][Pot])
					        return SendClientMessage(playerid, -1, "You don't have that!");
						format(string, sizeof(string), "* %s has dropped their Pot.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						Player[playerid][Pot] = 0;
						SendClientMessage(playerid, WHITE, "You have dropped your Pot.");
					}
					case 1:
					{
					    if(!Player[playerid][Cocaine])
					        return SendClientMessage(playerid, -1, "You don't have that!");
						format(string, sizeof(string), "* %s has dropped their Cocaine.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						Player[playerid][Cocaine] = 0;
						SendClientMessage(playerid, WHITE, "You have dropped your Cocaine.");
					}
					case 2:
					{
						if(Player[playerid][GunTazer] == 1)
							return SendClientMessage(playerid, -1, "Put your tazer away first.");
						format(string, sizeof(string), "* %s has dropped their Weapons.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						ResetPlayerWeaponsEx(playerid);
						SendClientMessage(playerid, WHITE, "You have dropped your Weapons.");
					}
					case 3:
					{
					    if(PlayerOwnsPhone(playerid) == 0)
					        return SendClientMessage(playerid, WHITE, "You don't have that!");

						new query[128];
						mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM phones WHERE owner = '%e'", Player[playerid][NormalName]);
						new Cache:cache = mysql_query(MYSQL_MAIN, query), count = cache_get_row_count(), idx;

						if(count == 0)
						{
							cache_delete(cache);
					        return SendClientMessage(playerid, WHITE, "You don't have that!");
						}

						new label[32], number;
						while(idx < count)
						{
							cache_set_active(cache);
							cache_get_field_content(idx, "label", label);
							number = cache_get_field_content_int(idx, "number");

							format(string, sizeof(string), "%s%s (%d)\n", string, label, number);
							idx ++;
						}

						cache_delete(cache);
						ShowPlayerDialog(playerid, PHONE_DROP, DIALOG_STYLE_LIST, "Which phone do you want to drop?", string, "Drop", "Close");
					}
					case 4:
					{
					    if(!Player[playerid][WalkieTalkie])
					        return SendClientMessage(playerid, -1, "You don't have that!");
						Player[playerid][WalkieTalkie] = 0;
						Player[playerid][WalkieFrequency] = 0;
						format(string, sizeof(string), "* %s has dropped their Walkie Talkie.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your Walkie Talkie.");
					}
					case 5:
					{
					    if(!Player[playerid][CasinoChips])
					        return SendClientMessage(playerid, -1, "You don't have any casino chips!");
						Player[playerid][CasinoChips] = 0;
						format(string, sizeof(string), "* %s has dropped their casino chips.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your casino chips.");
					}
					case 6:
					{
					    if(!Player[playerid][GasCans])
					        return SendClientMessage(playerid, -1, "You don't have that!");
						Player[playerid][GasCans] = 0;
						Player[playerid][GasFull] = 0;
						format(string, sizeof(string), "* %s has dropped their gas can.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your gas can.");
					}
					case 7:
					{
					    if(!Player[playerid][Workbench])
					        return SendClientMessage(playerid, -1, "You don't have that!");
						Player[playerid][Workbench] = 0;
						format(string, sizeof(string), "* %s has dropped their workbench.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your workbench.");
					}
					case 8:
					{
					    if(!Player[playerid][Toolkit])
					        return SendClientMessage(playerid, -1, "You don't have that!");
						Player[playerid][Toolkit] = 0;
						format(string, sizeof(string), "* %s has dropped their toolkit.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your toolkit.");
					}
					case 9:
					{
						new totalfish = Player[playerid][TotalBass] + Player[playerid][TotalCod] + Player[playerid][TotalSalmon] + Player[playerid][TotalMackerel];
						totalfish += Player[playerid][TotalTuna] + Player[playerid][TotalCarp] + Player[playerid][TotalHerring] + Player[playerid][TotalMarlin];
						totalfish += Player[playerid][TotalMako] + Player[playerid][TotalCrab] + Player[playerid][TotalKraken];

						if(totalfish < 1)
						    return SendClientMessage(playerid, -1, "You don't have any fish to drop!");

						Player[playerid][TotalBass] = 0;
						Player[playerid][TotalCod] = 0;
						Player[playerid][TotalSalmon] = 0;
						Player[playerid][TotalMackerel] = 0;
						Player[playerid][TotalTuna] = 0;
						Player[playerid][TotalCarp] = 0;
						Player[playerid][TotalHerring] = 0;
						Player[playerid][TotalMarlin] = 0;
						Player[playerid][TotalMako] = 0;
						Player[playerid][TotalCrab] = 0;
						Player[playerid][TotalKraken] = 0;

						format(string, sizeof(string), "* %s has dropped all of their fish.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, -1, "You dropped all of your fish!");
					}
					case 10:
					{
					    if(!Player[playerid][FishingRod])
					        return SendClientMessage(playerid, -1, "You don't have that!");
						Player[playerid][FishingRod] = 0;
						format(string, sizeof(string), "* %s has dropped their fishing rod.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your fishing rod.");
					}
					case 11:
					{
					    if(!Player[playerid][HydroKit])
					        return SendClientMessage(playerid, -1, "You don't have that!");
						Player[playerid][HydroKit] = 0;
						format(string, sizeof(string), "* %s has dropped their hydraulics kit.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your hydraulics kit.");
                    }
					case 12:
					{
					    if(!Player[playerid][NosBottle])
					        return SendClientMessage(playerid, -1, "You don't have that!");
						Player[playerid][NosBottle] = 0;
						format(string, sizeof(string), "* %s has dropped their NOS bottle.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your NOS bottle.");
					}
					case 13:
					{
						if(!Player[playerid][FishingBait])
							return SendClientMessage(playerid, -1, "You don't have any fishing bait.");
						Player[playerid][FishingBait] = 0;
						format(string, sizeof(string), "* %s has dropped their fishing bait.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your fishing bait.");
					}
					case 14:
					{
						if(!Player[playerid][BeerCases])
							return SendClientMessage(playerid, -1, "You don't have any beer cases.");
						Player[playerid][BeerCases] = 0;
						format(string, sizeof(string), "* %s has dropped their beer cases.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your beer cases.");
					}
					case 15:
					{
						if(!Player[playerid][Rope])
							return SendClientMessage(playerid, -1, "You don't have any rope.");
						Player[playerid][Rope] = 0;
						format(string, sizeof(string), "* %s had dropped their rope.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your rope.");
					}
					case 16:
					{
						if(!Player[playerid][Rags])
							return SendClientMessage(playerid, -1, "You don't have any rags.");
						Player[playerid][Rags] = 0;
						format(string, sizeof(string), "* %s had dropped their rags.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your rags.");
					}
					case 17:
					{
						if(!Player[playerid][PotSeeds])
							return SendClientMessage(playerid, -1, "You don't have any pot seeds.");
						Player[playerid][PotSeeds] = 0;
						format(string, sizeof(string), "* %s has dropped their pot seeds.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your pot seeds.");
					}
					case 18:
					{
						if(!Player[playerid][Materials][0])
							return SendClientMessage(playerid, -1, "You don't have any street grade materials.");
						Player[playerid][Materials][0] = 0;
						format(string, sizeof(string), "* %s has dropped their materials.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your street grade materials.");
					}
					case 19:
					{
						if(!Player[playerid][Materials][1])
							return SendClientMessage(playerid, -1, "You don't have any standard grade materials.");
						Player[playerid][Materials][1] = 0;
						format(string, sizeof(string), "* %s has dropped their materials.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your standard grade materials.");
					}
					case 20:
					{
						if(!Player[playerid][Materials][2])
							return SendClientMessage(playerid, -1, "You don't have any military grade materials.");
						Player[playerid][Materials][2] = 0;
						format(string, sizeof(string), "* %s has dropped their materials.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your military grade materials.");
					}
					case 21:
					{
						if(!Player[playerid][pFireworks])
							return SendClientMessage(playerid, WHITE, "You don't have any fireworks.");
						Player[playerid][pFireworks] = 0;
						format(string, sizeof(string), "* %s has dropped their fireworks.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your fireworks.");
					}
					case 22:
					{
						if(!Player[playerid][VehicleRadio])
							return SendClientMessage(playerid, WHITE, "You don't have a vehicle radio.");
						Player[playerid][VehicleRadio] = 0;
						format(string, sizeof(string), "* %s has dropped their vehicle radio.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your vehicle radio.");
					}
					case 23:
					{
						if(!Player[playerid][PersonalRadio])
							return SendClientMessage(playerid, WHITE, "You don't have a personal radio.");
						Player[playerid][PersonalRadio] = 0;
						format(string, sizeof(string), "* %s has dropped their personal radio.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your personal radio.");
					}
					case 24:
					{
						if(!Player[playerid][PizzaSlices])
							return SendClientMessage(playerid, WHITE, "You don't have any pizza slices.");
						Player[playerid][PizzaSlices] = 0;
						format(string, sizeof(string), "* %s has dropped their pizza slices.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your pizza slices.");
					}
					case 25:
					{
						if(!Player[playerid][HasSprayCans])
							return SendClientMessage(playerid, WHITE, "You don't have any spray cans.");
						Player[playerid][HasSprayCans] = 0;
						format(string, sizeof(string), "* %s has dropped their spray cans.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your spray cans.");
					}
					case 26:
					{
						if(!Player[playerid][EngineParts])
							return SendClientMessage(playerid, WHITE, "You don't have any engine parts.");
						Player[playerid][EngineParts] = 0;
						format(string, sizeof(string), "* %s has dropped their engine parts.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your engine parts.");
					}
					case 27:
					{
						if(!Player[playerid][Speed])
							return SendClientMessage(playerid, WHITE, "You don't have any speed.");
						Player[playerid][Speed] = 0;
						format(string, sizeof(string), "* %s has dropped their speed.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your speed.");
					}
					case 28:
					{
						if(!Player[playerid][SirenKit])
							return SendClientMessage(playerid, WHITE, "You don't have a siren kit.");
						Player[playerid][SirenKit] = 0;
						format(string, sizeof(string), "* %s has dropped their siren kit.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your siren kit.");
					}
					case 29:
					{
						if(!Player[playerid][PrisonTickets])
							return SendClientMessage(playerid, WHITE, "You don't have any prison tickets.");
						Player[playerid][PrisonTickets] = 0;
						format(string, sizeof(string), "* %s has dropped their prison tickets.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your prison tickets.");
					}
					case 30:
					{
						if(!Player[playerid][PrisonScrewdriver])
							return SendClientMessage(playerid, WHITE, "You don't have a screwdriver.");
						Player[playerid][PrisonScrewdriver] = 0;
						format(string, sizeof(string), "* %s has dropped their screwdriver.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your screwdriver.");
					}
					case 31:
					{
						if(!Player[playerid][PrisonShank])
							return SendClientMessage(playerid, WHITE, "You don't have a shank.");
						Player[playerid][PrisonShank] = 0;
						format(string, sizeof(string), "* %s has dropped their shank.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your shank.");
					}
					case 32:
					{
						if(!Player[playerid][PrisonRazor])
							return SendClientMessage(playerid, WHITE, "You don't have a razor.");
						Player[playerid][PrisonRazor] = 0;
						format(string, sizeof(string), "* %s has dropped their razor.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your razor.");
					}
					case 33:
					{
						if(!Player[playerid][Cigarettes])
							return SendClientMessage(playerid, WHITE, "You don't have any cigarettes.");
						Player[playerid][Cigarettes] = 0;
						format(string, sizeof(string), "* %s has dropped their cigarettes.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your cigarettes.");
					}
					case 34:
					{
						if(!Player[playerid][PrisonDice])
							return SendClientMessage(playerid, WHITE, "You don't have dice.");
						Player[playerid][PrisonDice] = 0;
						format(string, sizeof(string), "* %s has dropped their dice.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your dice.");
					}
					case 35:
					{
						if(!Player[playerid][PrisonLighter])
							return SendClientMessage(playerid, WHITE, "You don't have a lighter.");
						Player[playerid][PrisonLighter] = 0;
						format(string, sizeof(string), "* %s has dropped their lighter.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your lighter.");
					}
					case 36:
					{
					    if(!Player[playerid][InterComSys])
					        return SendClientMessage(playerid, -1, "You don't have that!");
						Player[playerid][InterComSys] = 0;
						format(string, sizeof(string), "* %s has dropped their business intercom system.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your business intercom system.");
					}
					case 37:
					{
						if(strlen(Player[playerid][FakeIDString]) < 3)
							return SendClientMessage(playerid, -1, "You don't have a fake ID.");
						
						format(Player[playerid][FakeIDString], 256, "");
						format(string, sizeof(string), "* %s has dropped their ID.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your fake ID.");
					}
					case 38:
					{
						if(strlen(Player[playerid][FakeLicense]) < 3)
							return SendClientMessage(playerid, -1, "You don't have a fake registration.");
						
						format(Player[playerid][FakeLicense], 256, "");
						format(string, sizeof(string), "* %s has dropped their registration.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your fake registration.");
					}
					case 39:
					{
						if(!Player[playerid][Notepad])
							return SendClientMessage(playerid, WHITE, "You don't have a notepad.");	
						
						Player[playerid][Notepad] = 0;
						format(string, sizeof(string), "* %s has dropped their notepad.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your notepad.");				
					}
					case 40:
					{
						if(strlen(Player[playerid][Note1]) < 1 && strlen(Player[playerid][Note2]) < 1 && strlen(Player[playerid][Note3]) < 1)
							return SendClientMessage(playerid, WHITE, "You don't have any notes.");	
						
						format(Player[playerid][Note1], 256, "");
						format(Player[playerid][Note2], 256, "");
						format(Player[playerid][Note3], 256, "");
						format(string, sizeof(string), "* %s has dropped some paper.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);	
						SendClientMessage(playerid, WHITE, "You have dropped your notes.");						
					}
					case 41:
					{
						if(!Player[playerid][Tent])
							return SendClientMessage(playerid, WHITE, "You don't have a tent.");
						Player[playerid][Tent] = 0;
						format(string, sizeof(string), "* %s has dropped their tent.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your tent.");
					}
					case 42:
					{
						if(Player[playerid][HasArmour] < 1)
							return SendClientMessage(playerid, WHITE, "You don't have any armour.");
							
						Player[playerid][HasArmour] = 0;
						format(string, sizeof(string), "* %s has dropped their kevlar vest.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your armour.");
					}
					case 43:
					{
						if(Player[playerid][Ventillation] < 1)
							return SendClientMessage(playerid, WHITE, "You don't have a ventillation upgrade.");
						
						Player[playerid][Ventillation] = 0;
						format(string, sizeof(string), "* %s has dropped their ventillation.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your ventillation upgrade.");
					}
					case 44:
					{
						if(Player[playerid][Identity] < 1)
							return SendClientMessage(playerid, WHITE, "You don't have an ID card.");
						
						Player[playerid][Identity] = 0;
						format(string, sizeof(string), "* %s has dropped their ID.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your ID card.");
					}
					case 45:
					{
						if(Player[playerid][Bomb] < 1)
							return SendClientMessage(playerid, WHITE, "You don't have a bomb.");
							
						Player[playerid][Bomb] = 0;
						format(string, sizeof(string), "* %s has dropped a bomb.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your bomb.");
					}
					case 46:
					{
						if(Player[playerid][GunLicense] < 1)
							return SendClientMessage(playerid, WHITE, "You don't have a gun license.");
							
						Player[playerid][GunLicense] = 0;
						format(string, sizeof(string), "* %s has dropped a gun license.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have dropped your gun license.");
					}
					
				}
			}
			case DIALOG_CREATION_PIN:
			{
				if(isnull(inputtext))
				{
					ShowPlayerDialog(playerid, DIALOG_CREATION_PIN, DIALOG_STYLE_INPUT, "Creation Pin", "Please enter the creation pin given to you by an admin.", "Enter", "Cancel");
					SendClientMessage(playerid, RED, "Invalid creation pin, you didn't input anything!");
					return 1;
				}
				
				if(IsPlayerRegistered(GetName(playerid)))
				{
					SendClientMessage(playerid, ORANGE, "An error occured! You are already registered! Please contact a dev.");
					KickEx(playerid);
					return 1;
				}
				
				new string[128];
				mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT CreationPin FROM account_whitelist WHERE AccountName = '%e'", GetName(playerid));
				new Cache:cache = mysql_query(MYSQL_MAIN, string), row_count = cache_get_row_count();
				
				if(!row_count)
				{
					cache_delete(cache);
					SendClientMessage(playerid, RED, "Incorrect pin. Please note the pin is NOT case-sensitive and will contain NO zeros.");
					return 1;
				}
				
				new creationPin[9];
				cache_get_field_content(0, "CreationPin", creationPin);
				
				/*if(!strcmp(inputtext, creationPin, true))
				{
					ShowPlayerDialog(playerid, 3895, DIALOG_STYLE_INPUT, "Registration", "Please enter your password to register your new account.", "Register", "Cancel");
				}*/
				if(true)
				{
					ShowPlayerDialog(playerid, 3895, DIALOG_STYLE_INPUT, "Registration", "Please enter your password to register your new account.", "Register", "Cancel");
				}
				else 
				{
					ShowPlayerDialog(playerid, DIALOG_CREATION_PIN, DIALOG_STYLE_INPUT, "Creation Pin", "Please enter the creation pin given to you by an admin.", "Enter", "Cancel");
					SendClientMessage(playerid, RED, "Incorrect pin. Please note the pin is NOT case-sensitive and will contain NO zeros.");
					return 1;
				}
				
				return 1;
			}
			case 3895:
			{
				if(Player[playerid][Authenticated] == 0)
				{
					if(strlen(inputtext) >= 1)
					{
						if(PlayerCreationDisabled == 1)
						{
							SendClientMessage(playerid, RED, "New accounts can not be created at this time.");
							KickEx(playerid);
						}
						
						if(IsPlayerRegistered(GetName(playerid)))
						{
							SendClientMessage(playerid, ORANGE, "An error occured while registering: You are already registered. Please contact a developer.");
							KickEx(playerid);
							return 1;
						}
						
						new salt[32], pass[161], buff[162];
						randomString(salt, 31);
						format(Player[playerid][pSalt], 32, "%s", salt);
						strcat(pass, inputtext, sizeof(pass));
						strcat(pass, Player[playerid][pSalt], sizeof(pass));
						WP_Hash(buff, sizeof(buff), pass);
						format(Player[playerid][Password], 161, "%s", buff);

						MaxRegistered++;

						Player[playerid][BankMoney] = NoobCash;
						Player[playerid][Money] = NoobCash / 100;
						ResetPlayerMoney(playerid);
						GivePlayerMoney(playerid, Player[playerid][Money]);
						format(Player[playerid][nTag], 32, "%s", OOCRanks[Rank1]);

						Player[playerid][Authenticated] = 1;
						Player[playerid][Tutorial] = 1;

						PutPlayerInTutorial(playerid, 1);

						new name[25];
						if(Player[playerid][AdminDuty])
							format(name, sizeof(name), "%s", Player[playerid][NormalName]);
						else format(name, sizeof(name), "%s", GetName(playerid));

						new query[150];
						mysql_format(MYSQL_MAIN, query, sizeof(query), "INSERT INTO connections (name, ip, date) VALUES ('%e', '%e', '%e')", name, GetPlayersIP(playerid), GetDate());
						mysql_query(MYSQL_MAIN, query, false);
						
						new ORM:ormid = Player[playerid][pORM_ID] = orm_create("playeraccounts");

						orm_addvar_int(ormid, Player[playerid][pSQL_ID], "SQLID");
						orm_setkey(ormid, "SQLID");
						
						orm_addvar_string(ormid, Player[playerid][Password], 161, "Password");
						orm_addvar_string(ormid, Player[playerid][pSalt], 32, "pSalt");
						orm_addvar_string(ormid, Player[playerid][NormalName], 25, "NormalName");
						
						SetupORM(playerid);

						orm_insert(Player[playerid][pORM_ID], "OnPlayerRegister", "d", playerid);
					}
					else
					{
						SendClientMessage(playerid, WHITE, "Must be longer than 1 char.");
					}
				}
				else
				{
					SendClientMessage(playerid, GREY, "You must logout to create a new account.");
				}
			}
			case 3894:
			{
				new count = 0;
				foreach(Player, i)
				{
					if(Player[i][AdminLevel] > 1)
						count++;
				}

				if(PlayerCreationDisabled == 1 && Player[playerid][PlayingHours] < 5 && count == 0)
				{
					SendClientMessage(playerid, -1, "You cannot login at this time, try again later or contact an admin on Teamspeak/forums.");
					KickEx(playerid);
					return 1;
				}
				if(strlen(inputtext) > 128 || strlen(inputtext) < 1)
				{
					Player[playerid][LoginAttempts]++;
					new Sum, string[128];
					Sum = 3-Player[playerid][LoginAttempts];
					SendClientMessage(playerid, ADMINORANGE, "The password you have entered does not match your account. Please try again or use the forums.");
					format(string, sizeof(string), "You have %d remaining login attempts, before you are auto-kicked.", Sum);
					SendClientMessage(playerid, WHITE, string);

					if(Player[playerid][LoginAttempts] >= 3)
					{
						SendClientMessage(playerid, ADMINORANGE, "You have used your three attempts.");
						KickEx(playerid);
					}

					ShowPlayerDialog(playerid, 3894, DIALOG_STYLE_PASSWORD, "Authentication", "Welcome to crea\n\nYou have an account, please enter your password to authenticate.", "Login", "Exit");
				}
				else
				{
					if(Player[playerid][Authenticated] == 0)
					{
						OnPlayerLoginAttempt(playerid, inputtext);
					}
					else
					{
						SendClientMessage(playerid, GREY, "You're already authenticated.");
					}
				}
			}
			case 1529:
			{
				switch(listitem)
				{
					case 0: ShowPlayerDialog(playerid, 1530, DIALOG_STYLE_LIST, "House Interiors", "Madd Doggs'\nCJ's House\nRyder's House\nTiger Skin\nColonel Furhbergers\nCrack Den\nDenises' Room\nKaties' Room", "Select", "Cancel");
					case 1: ShowPlayerDialog(playerid, 1531, DIALOG_STYLE_LIST, "Race-track Interiors", "Dirt Track\nVice Stadium\nBloodbowl Stadium\n8-Track Stadium\nKickstart Stadium", "Select", "Cancel");
					case 2: ShowPlayerDialog(playerid, 1532, DIALOG_STYLE_LIST, "City Locations", "Los Santos\nSan Fierro\nLas Venturas", "Select", "Cancel");
					case 3: ShowPlayerDialog(playerid, 1533, DIALOG_STYLE_LIST, "Popular Locations", "Bank (exterior)\nGym (exterior)\nHospital (exterior)\nNewbie Spawn\nVerona Beach pier\nSan Fierro Tunnel\nLas Venturas Highway\n", "Select", "Cancel");
					case 4: ShowPlayerDialog(playerid, 1535, DIALOG_STYLE_LIST, "Gym Interiors", "Ganton Gym (LS)\nCobra Martial Arts (SF)\nBelow the Belt Gym (LV)", "Select", "Cancel");
					case 5: ShowPlayerDialog(playerid, 1534, DIALOG_STYLE_LIST, "Other Locations", "RC Battlefield\nArea 69\nWarehouse 1\nWarehouse 2\nMeat Factory\nSherman Dam\n", "Select", "Cancel");
				}
			}
			case 3928:
			{
				switch(listitem)
				{
					case 0: // Rooftop
					{
						SetPlayerInterior(playerid, 0);
						Player[playerid][InGroupHQ] = 0;
						SetPlayerPos_Update(playerid, 1564.9611, -1666.4128, 28.3956);
						SetPlayerVirtualWorld(playerid, 0);
						PlayerTextDrawHide(playerid, ExitTextdraw[playerid]);
					}
					case 1: // DB floor
					{
						Player[playerid][InGroupHQ] = 1;
						SetPlayerInterior(playerid, 10);
						SetPlayerVirtualWorld(playerid, 45001);
						SetPlayerPos_Update(playerid, 1569.7266, -1667.9274, -60.4563);
						if(Player[playerid][PlayingHours] < 20 && GetPlayerToggle(playerid, TOGGLE_EXIT_HELP) == false)
							PlayerTextDrawShow(playerid, ExitTextdraw[playerid]);
					}
					case 2: // Floor 3
					{
						Player[playerid][InGroupHQ] = 1;
						SetPlayerInterior(playerid, 10);
						SetPlayerVirtualWorld(playerid, 45107);
						SetPlayerPos_Update(playerid, 1579.15283, -1679.86157, -87.23490);
						if(Player[playerid][PlayingHours] < 20 && GetPlayerToggle(playerid, TOGGLE_EXIT_HELP) == false)
							PlayerTextDrawShow(playerid, ExitTextdraw[playerid]);
					}
					case 3: // Floor 2
					{
						Player[playerid][InGroupHQ] = 1;
						SetPlayerInterior(playerid, 10);
						SetPlayerVirtualWorld(playerid, 45106);
						SetPlayerPos_Update(playerid, 1537.38184, -1684.82300, -80.74860);
						if(Player[playerid][PlayingHours] < 20 && GetPlayerToggle(playerid, TOGGLE_EXIT_HELP) == false)
							PlayerTextDrawShow(playerid, ExitTextdraw[playerid]);
					}
					case 4: // Floor 1
					{
						Player[playerid][InGroupHQ] = 1;
						SetPlayerInterior(playerid, 10);
						SetPlayerVirtualWorld(playerid, 45001);
						SetPlayerPos_Update(playerid, 1562.84814, -1711.01404, -90.75160);
						if(Player[playerid][PlayingHours] < 20 && GetPlayerToggle(playerid, TOGGLE_EXIT_HELP) == false)
							PlayerTextDrawShow(playerid, ExitTextdraw[playerid]);
					}
					case 5: // Garage Level 1
					{
						Player[playerid][InGroupHQ] = 0;
						SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerPos_Update(playerid, 2267.8208,2448.8154,3.5313);
						SetPlayerWeather(playerid, GlobalWeather);
						PlayerTextDrawHide(playerid, ExitTextdraw[playerid]);
					}
					case 6: // Garage Level 2
					{
						Player[playerid][InGroupHQ] = 0;
						SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerPos_Update(playerid, 2268.0039,2448.0969,-7.1953);
						SetPlayerWeather(playerid, GlobalWeather);
						PlayerTextDrawHide(playerid, ExitTextdraw[playerid]);
					}
				}
			}
			case 3929:
			{
				switch(listitem)
				{
					case 0:
					{
						SetPlayerInterior(playerid, 0);
						Player[playerid][InBusiness] = 0;
						SetPlayerPos_Update(playerid, 1615.0090, 1786.4961, 30.4688);
						SetPlayerVirtualWorld(playerid, 0);
						PlayerTextDrawHide(playerid, ExitTextdraw[playerid]);
					}
					case 1:
					{
						Player[playerid][InBusiness] = 6;
						SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid, 65006);
						SetPlayerPos_Update(playerid, 1610.2673, 1788.6671, -34.8955);
						if(Player[playerid][PlayingHours] < 20 && GetPlayerToggle(playerid, TOGGLE_EXIT_HELP) == false)
							PlayerTextDrawShow(playerid, ExitTextdraw[playerid]);
					}
					case 2:
					{
						Player[playerid][InBusiness] = 6;
						SetPlayerVirtualWorld(playerid, 65006);
						SetPlayerInterior(playerid, 0);
						SetPlayerPos_Update(playerid, 1613.1486, 1785.7460, -38.6058);
						if(Player[playerid][PlayingHours] < 20 && GetPlayerToggle(playerid, TOGGLE_EXIT_HELP) == false)
							PlayerTextDrawShow(playerid, ExitTextdraw[playerid]);
					}
				}
			}
			case 3930:
			{
				switch(listitem)
				{
					case 0:
					{
						SetPlayerPos_Update(playerid, 669.8990,-587.7369,-40.5621);
					}
					case 1:
					{
						SetPlayerPos_Update(playerid, 596, -558, -53);
					}
					case 2:
					{
						SetPlayerPos_Update(playerid, 584, -618, -38);
					}
					case 3:
					{
						SetPlayerPos_Update(playerid, 609.1933,-591.8193,-53.9141);
					}
				}
			}
			case 3931:
			{
				switch(listitem)
				{
					case 0: SetPlayerPos_Update(playerid, 1625.8468, 2712.8865, -54.0761);
					case 1: SetPlayerPos_Update(playerid, 1629.1836, 2713.2869, -42.1141);
					case 2: SetPlayerPos_Update(playerid, 1626.4205, 2713.1292, -48.9141);
					case 3: SetPlayerPos_Update(playerid, 1626.3002, 2713.0774, -45.4590);
				}
			}
			case 9864:
			{
				switch(listitem)
				{
					case 0:
						ShowPlayerDialog(playerid, 9866, DIALOG_STYLE_LIST, "LSMD Menu", "Black Paramedic (with white shirt)\nHispanic Paramedic (with blue shirt)\nWhite Paramedic (with green shirt)", "Select", "Cancel");
				}
			}
			case 9866:
			{
				switch(listitem)
				{
					case 0:
					{
						SetPlayerSkin(playerid, 274);
						Player[playerid][LastSkin] = 274;
					}
					case 1:
					{
						SetPlayerSkin(playerid, 275);
						Player[playerid][LastSkin] = 275;
					}
					case 2:
					{
						SetPlayerSkin(playerid, 276);
						Player[playerid][LastSkin] = 276;
					}
				}
			}
			case MAP_MAIN:
			{
				if(Player[playerid][Checkpoint] > 0)
					return SendClientMessage(playerid, YELLOW, "You already have a checkpoint. (/killcheckpoint)");

				switch(listitem)
				{
					case 0:
					{
						// ShowPlayerDialog(playerid, MAP_BIZ, DIALOG_STYLE_LIST, "Choose a business", "24/7\nClothing\nClub/Bar\nAdvertisement\nExpensive Dealership\nNormal Dealership\nChurch\nGym\nPharmacy\nRestaurant\nMarina\nHardware\nGas Station\nHospital\nBank\nCasino\nHotel\nBack\n", "Select", "Cancel");
						ShowPlayerDialog(playerid, MAP_BIZ, DIALOG_STYLE_LIST, "Choose a business", "24/7\nAdvertisement\nBank\nBike Dealership\nCasino\nChurch\nClothing\nClub/Bar\nCrowdfunding\nExpensive Dealership\nFurniture Store\nGas Station\nGym\nHardware\nHospital\nHotel\nMarina\nNormal Dealership\nPharmacy\nReal Estate Office\nRestaurant\nVan Dealership\nBack\n", "Select", "Cancel");
					}
					case 1:
					{
						//ShowPlayerDialog(playerid, MAP_JOBS, DIALOG_STYLE_LIST, "Choose a job", "Arms Dealer\nArms Dealer Matruns (/getmats)\nCar Jacker\nDeliverer\nDeliverer Supplies (/getsupplies)\nFisherman\nFisherman Sellfish (/sellfish)\nGarbage Man\nMechanic\nPizza boy\nTrucker\nBack\n", "Select", "Cancel");
						ShowPlayerDialog(playerid, MAP_JOBS, DIALOG_STYLE_LIST, "Choose a job", "Arms Dealer\nArms Dealer Matruns (/getmats)\nCar Jacker\nDeliverer\nDeliverer Supplies (/getsupplies)\nFisherman\nFisherman Sellfish (/sellfish)\n---\nMechanic\n---\n---\nBack\n", "Select", "Cancel");
					}
					case 2:
					{
						// ShowPlayerDialog(playerid, MAP_OTHER, DIALOG_STYLE_LIST, "Choose a public service", "Las Venturas Police Department\nLas Venturas Medical Department\nCity Hall\nDMV\nBack\n", "Select", "Cancel");
						//ShowPlayerDialog(playerid, MAP_OTHER, DIALOG_STYLE_LIST, "Choose a public service", "City Hall\nDMV\nMedical Department\nPolice Department\nSan Andreas Media Headquarters\nBack\n", "Select", "Cancel");
						ShowPlayerDialog(playerid, MAP_OTHER, DIALOG_STYLE_LIST, "Choose a public service", "City Hall\nDMV\nPolice Department\nLos Santos News Network\nBack\n", "Select", "Cancel");
					}
					case 3:
					{
						// ShowPlayerDialog(playerid, MAP_OTHER+1, DIALOG_STYLE_LIST, "Choose a public service", "Pay N Spray\nTransfender\nLoco Low Co\nWheel Arch Angels\nExpensive Dealership\nNormal Dealership\nBack\n", "Select", "Cancel");
						ShowPlayerDialog(playerid, MAP_OTHER+1, DIALOG_STYLE_LIST, "Choose a vehicle related service", "DMV\nExpensive Dealership\nLoco Low Co\nMarina\nNormal Dealership\nPay N Spray\nTransfender\nWheel Arch Angels\nVan Dealership\nBack\n", "Select", "Cancel");
					}
					case 4:
					{
						SetPlayerCheckpoint(playerid, VipLounge[0], VipLounge[1], VipLounge[2], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the VIP Lounge.");
					}
					case 5:
					{
						if(LoyaltyShopPos[0] == 0.0 && LoyaltyShopPos[1] == 0.0 && LoyaltyShopPos[2] == 0.0)
							return SendClientMessage(playerid, WHITE, "The loyalty shop has not been placed yet.");
							
						SetPlayerCheckpoint(playerid, LoyaltyShopPos[0], LoyaltyShopPos[1], LoyaltyShopPos[2], 10);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, WHITE, "A checkpoint has been placed at the Loyalty Shop.");
					}
				}
			}
			case MAP_BIZ:
			{
				switch(listitem)
				{
					case 0:
					{
						new b = GetClosestBusiness(playerid, 1);
						SetPlayerCheckpoint(playerid, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the closest 24/7.");
					}
					case 1:
					{
						new b = GetClosestBusiness(playerid, 4);
						SetPlayerCheckpoint(playerid, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the closest Advertisement Agency.");
					}
					case 2:
					{
						new b = GetClosestBusiness(playerid, 18);
						SetPlayerCheckpoint(playerid, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the closest Bank.");
					}
					case 3:
					{
						new b = GetClosestBusiness(playerid, 20);
						SetPlayerCheckpoint(playerid, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the closest Bike Dealership.");
					}
					case 4:
					{
						new g = GetClosestGroup(playerid, 7);
						SetPlayerCheckpoint(playerid, Groups[g][HQExteriorX], Groups[g][HQExteriorY], Groups[g][HQExteriorZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the closest Casino.");
					}
					case 5:
					{
						new b = GetClosestBusiness(playerid, 9);
						SetPlayerCheckpoint(playerid, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the closest Church.");
					}
					case 6:
					{
						new b = GetClosestBusiness(playerid, 2);
						SetPlayerCheckpoint(playerid, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the closest Clothing Store.");
					}
					case 7:
					{
						new b = GetClosestBusiness(playerid, 3);
						SetPlayerCheckpoint(playerid, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the closest Club/Bar.");
					}
					case 8:
					{
						new b = GetClosestBusiness(playerid, 25);
						SetPlayerCheckpoint(playerid, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the closest Crowdfunding business.");
					}
					case 9:
					{
						new b = GetClosestBusiness(playerid, 6);
						SetPlayerCheckpoint(playerid, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the closest Expensive Car Dealership.");
					}
					case 10:
					{
						new b = GetClosestBusiness(playerid, 22);
						SetPlayerCheckpoint(playerid, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the closest Furniture Store.");
					}
					case 11:
					{
						new b = GetClosestBusiness(playerid, 16);
						SetPlayerCheckpoint(playerid, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the closest Gas Station.");
					}
					case 12:
					{
						new b = GetClosestBusiness(playerid, 10);
						SetPlayerCheckpoint(playerid, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the closest Gym.");
					}
					case 13:
					{
						new b = GetClosestBusiness(playerid, 15);
						SetPlayerCheckpoint(playerid, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the closest Hardware Store.");
					}
					case 14:
					{
						new b = GetClosestBusiness(playerid, 17);
						SetPlayerCheckpoint(playerid, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the closest Hospital.");
					}
					case 15:
					{
						new b = GetClosestBusiness(playerid, 19);
						SetPlayerCheckpoint(playerid, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the closest Hotel.");
					}
					case 16:
					{
						new b = GetClosestBusiness(playerid, 13);
						SetPlayerCheckpoint(playerid, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the closest Marina.");
					}
					case 17:
					{
						new b = GetClosestBusiness(playerid, 14);
						SetPlayerCheckpoint(playerid, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the closest Normal Car Dealership.");
					}
					case 18:
					{
						new b = GetClosestBusiness(playerid, 11);
						SetPlayerCheckpoint(playerid, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the closest Pharmacy.");
					}
					case 19:
					{
						new b = GetClosestBusiness(playerid, 24);
						SetPlayerCheckpoint(playerid, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the closest Real Estate Office.");
					}
					case 20:
					{
						new b = GetClosestBusiness(playerid, 12);
						SetPlayerCheckpoint(playerid, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the closest Restaurant.");
					}
					case 21:
					{
						new b = GetClosestBusiness(playerid, 21);
						SetPlayerCheckpoint(playerid, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the closest Van Dealership.");
					}
					case 22:
					{
						ShowPlayerDialog(playerid, MAP_MAIN, DIALOG_STYLE_LIST, "Choose an option", "Businesses\nJobs\nPublic Services\nVehicle Related\nVIP Lounge\nLoyalty Shop", "Select", "Cancel");
					}
				}
			}
			case MAP_JOBS:
			{
				switch(listitem)
				{
					case 0:
					{
						new j = GetClosestJob(playerid, 1, 0);
						SetPlayerCheckpoint(playerid, Jobs[j][JobJoinPosX], Jobs[j][JobJoinPosY], Jobs[j][JobJoinPosZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the Arms Dealer job.");
					}
					case 1:
					{
						new j = GetClosestJob(playerid, 1, 1);
						SetPlayerCheckpoint(playerid, Jobs[j][JobMiscLocationOneX], Jobs[j][JobMiscLocationOneY], Jobs[j][JobMiscLocationOneZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the Arms Dealer Matruns (/getmats) pos.");
					}
					case 2:
					{
						new j = GetClosestJob(playerid, 9, 0);
						SetPlayerCheckpoint(playerid, Jobs[j][JobJoinPosX], Jobs[j][JobJoinPosY], Jobs[j][JobJoinPosZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the Car Jacker job.");
					}
					case 3:
					{
						new j = GetClosestJob(playerid, 5, 0);
						SetPlayerCheckpoint(playerid, Jobs[j][JobJoinPosX], Jobs[j][JobJoinPosY], Jobs[j][JobJoinPosZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the Deliverer job.");
					}
					case 4:
					{
						new j = GetClosestJob(playerid, 5, 1);
						SetPlayerCheckpoint(playerid, Jobs[j][JobMiscLocationOneX], Jobs[j][JobMiscLocationOneY], Jobs[j][JobMiscLocationOneZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the Deliverer Supplies (/getsupplies) job.");
					}
					case 5:
					{
						new j = GetClosestJob(playerid, 8, 0);
						SetPlayerCheckpoint(playerid, Jobs[j][JobJoinPosX], Jobs[j][JobJoinPosY], Jobs[j][JobJoinPosZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the Fisherman job.");
					}
					case 6:
					{
						new j = GetClosestJob(playerid, 8, 1);
						SetPlayerCheckpoint(playerid, Jobs[j][JobMiscLocationOneX], Jobs[j][JobMiscLocationOneY], Jobs[j][JobMiscLocationOneZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the Fisherman Sellfish (/sellfish) job.");
					}
					case 7:
					{
						new j = GetClosestJob(playerid, 12, 0);
						SetPlayerCheckpoint(playerid, Jobs[j][JobJoinPosX], Jobs[j][JobJoinPosY], Jobs[j][JobJoinPosZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the Garbage Man job.");
					}
					case 8:
					{
						new j = GetClosestJob(playerid, 2, 0);
						SetPlayerCheckpoint(playerid, Jobs[j][JobJoinPosX], Jobs[j][JobJoinPosY], Jobs[j][JobJoinPosZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the Mechanic job.");
					}
					case 9:
					{
						new j = GetClosestJob(playerid, 10, 0);
						SetPlayerCheckpoint(playerid, Jobs[j][JobJoinPosX], Jobs[j][JobJoinPosY], Jobs[j][JobJoinPosZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the Pizza Boy job.");
					}
					case 10:
					{
						new j = GetClosestJob(playerid, 11, 0);
						SetPlayerCheckpoint(playerid, Jobs[j][JobJoinPosX], Jobs[j][JobJoinPosY], Jobs[j][JobJoinPosZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the Trucker job.");
					}
					case 11:
					{
						ShowPlayerDialog(playerid, MAP_MAIN, DIALOG_STYLE_LIST, "Choose an option", "Businesses\nJobs\nPublic Services\nVehicle Related\nVIP Lounge\nLoyalty Shop", "Select", "Cancel");
					}
				}
			}
			case MAP_OTHER:
			{
				switch(listitem)
				{
					case 0:
					{
						new g = GetClosestGroup(playerid, 4);
						SetPlayerCheckpoint(playerid, Groups[g][HQExteriorX], Groups[g][HQExteriorY], Groups[g][HQExteriorZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the City Hall.");
					}
					case 1:
					{
						new g = GetClosestGroup(playerid, 8);
						SetPlayerCheckpoint(playerid, Groups[g][HQExteriorX], Groups[g][HQExteriorY], Groups[g][HQExteriorZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the closest DMV.");
					}
					/*case 2:
					{
						new g = GetClosestGroup(playerid, 3);
						SetPlayerCheckpoint(playerid, Groups[g][HQExteriorX], Groups[g][HQExteriorY], Groups[g][HQExteriorZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the closest hospital!");
					}*/
					case 2:
					{
						new g = GetClosestGroup(playerid, 1);
						SetPlayerCheckpoint(playerid, Groups[g][HQExteriorX], Groups[g][HQExteriorY], Groups[g][HQExteriorZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at closest police station!");
					}
					case 3:
					{
						new g = GetClosestGroup(playerid, 5);
						SetPlayerCheckpoint(playerid, Groups[g][HQExteriorX], Groups[g][HQExteriorY], Groups[g][HQExteriorZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the Los Santos News Network.");
					}
					case 4:
					{
						ShowPlayerDialog(playerid, MAP_MAIN, DIALOG_STYLE_LIST, "Choose an option", "Businesses\nJobs\nPublic Services\nVehicle Related\nVIP Lounge\nLoyalty Shop", "Select", "Cancel");
					}
				}
			}
			case MAP_OTHER+1:
			{
				switch(listitem)
				{
					case 0: //DMV
					{
						new g = GetClosestGroup(playerid, 8);
						SetPlayerCheckpoint(playerid, Groups[g][HQExteriorX], Groups[g][HQExteriorY], Groups[g][HQExteriorZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the closest DMV.");
					}
					case 1: //Upper class dealership
					{
						new b = GetClosestBusiness(playerid, 6);
						SetPlayerCheckpoint(playerid, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the closest Expensive Car Dealership.");
					}
					case 2: //Loco Low Co
					{
						SetPlayerCheckpoint(playerid, 2644.9060, -2035.5815, 13.5540, 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the Loco Low Co.");
					}
					case 3: //Marina
					{
						new b = GetClosestBusiness(playerid, 13);
						SetPlayerCheckpoint(playerid, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the closest Marina.");
					}
					case 4: //Lower class dealership
					{
						new b = GetClosestBusiness(playerid, 14);
						SetPlayerCheckpoint(playerid, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the closest Normal Car Dealership.");
					}
					case 5: //Pay n Sprays
					{
						new pns = GetClosestPNS(playerid);
						SetPlayerCheckpoint(playerid, paynsprays[pns][0], paynsprays[pns][1], paynsprays[pns][2], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the closest Pay n Spray.");
					}
					case 6: //Transfender
					{
						SetPlayerCheckpoint(playerid, 1044.6791, -1025.6438, 31.0974, 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the Transfender.");
					}
					case 7: //Wheel Arch Angels
					{
						SetPlayerCheckpoint(playerid, ModShopPos[0], ModShopPos[1], ModShopPos[2], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the Wheel Arch Angels.");
					}
					case 8:
					{
						new b = GetClosestBusiness(playerid, 21);
						SetPlayerCheckpoint(playerid, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ], 10.0);
						Player[playerid][Checkpoint] = 1;
						Player[playerid][Map] = 1;
						SendClientMessage(playerid, -1, "A checkpoint has been placed at the closest Van Dealership.");
					}
					case 9:
					{
						ShowPlayerDialog(playerid, MAP_MAIN, DIALOG_STYLE_LIST, "Choose an option", "Businesses\nJobs\nPublic Services\nVehicle Related\nVIP Lounge\nLoyalty Shop", "Select", "Cancel");
					}
				}
			}
			case 1535:
			{
				switch(listitem)
				{
					case 0:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 5);
						SetPlayerPos_Update(playerid, 772.111999, -3.898649, 1000.728820);
					}
					case 1:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 6);
						SetPlayerPos_Update(playerid, 774.213989, -48.924297, 1000.585937);
					}
					case 2:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 7);
						SetPlayerPos_Update(playerid, 773.579956, -77.096694, 1000.655029);
					}
				}
			}
			case 1534:
			{
				switch(listitem)
				{
					case 0:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 10);
						SetPlayerPos_Update(playerid, -975.975708, 1060.983032, 1345.671875);
					}
					case 1:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
						SetPlayerPos_Update(playerid, 223.431976, 1872.400268, 13.734375);
					}
					case 2:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 1);
						SetPlayerPos_Update(playerid, 1412.639892, -1.787510, 1000.924377);
					}
					case 3:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 18);
						SetPlayerPos_Update(playerid, 1302.519897, -1.787510, 1001.028259);
					}
					case 4:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 1);
						SetPlayerPos_Update(playerid, 963.418762, 2108.292480, 1011.030273);
					}
					case 5:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 17);
						SetPlayerPos_Update(playerid, -959.564392, 1848.576782, 9.000000);
					}
				}
			}
			case 1533:
			{
				switch(listitem)
				{
					case 0:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
						new b = GetClosestBusiness(playerid, 18);
						SetPlayerPos_Update(playerid, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ]);
					}
					case 1:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
						SetPlayerPos_Update(playerid, 2222.6714, -1724.8436, 13.5625);
					}
					case 2:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
						new b = GetClosestBusiness(playerid, 17);
						SetPlayerPos_Update(playerid, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ]);
					}
					case 3:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
						SetPlayerPos_Update(playerid, SpawnX, SpawnY, SpawnZ);
					}
					case 4:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
						SetPlayerPos_Update(playerid, 835.486328, -2053.454345, 12.867187);
					}
					case 5:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
						SetPlayerPos_Update(playerid, -2289.7708, 1065.3448, 55.8089);
					}
					case 6:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
						SetPlayerPos_Update(playerid, 1788.8431, 2195.1028, 4.1182);
					}
				}
			}
			case 1532:
			{
				switch(listitem)
				{
					case 0:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
						SetPlayerPos_Update(playerid, 1550.2311, -1675.4509, 15.3155);
					}
					case 1:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
						SetPlayerPos_Update(playerid, -1641.9742, 431.1623, 7.1102);
					}
					case 2:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
						SetPlayerPos_Update(playerid, 1699.2, 1435.1, 10.7);
					}
				}
			}
			case 1531:
			{
				switch(listitem)
				{
					case 0:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 4);
						SetPlayerPos_Update(playerid, -1444.645507, -664.526000, 1053.572998);
					}
					case 1:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 1);
						SetPlayerPos_Update(playerid, -1401.829956, 107.051300, 1032.273437);
					}
					case 2:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 15);
						SetPlayerPos_Update(playerid, -1398.103515, 937.631164, 1036.479125);
					}
					case 3:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 7);
						SetPlayerPos_Update(playerid, -1398.065307, -217.028900, 1051.115844);
					}
					case 4:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 14);
						SetPlayerPos_Update(playerid, -1465.268676, 1557.868286, 1052.531250);
					}
				}
			}
			case 1530:
			{
				switch(listitem)
				{
					case 0:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 5);
						SetPlayerPos_Update(playerid, 1267.663208, -781.323242, 1091.906250);
					}
					case 1:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 3);
						SetPlayerPos_Update(playerid, 2496.049804, -1695.238159, 1014.742187);
					}
					case 2:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 2);
						SetPlayerPos_Update(playerid, 2454.717041, -1700.871582, 1013.515197);
					}
					case 3:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 3);
						SetPlayerPos_Update(playerid, 964.106994, -53.205497, 1001.124572);
					}
					case 4:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 8);
						SetPlayerPos_Update(playerid, 2807.619873, -1171.899902, 1025.570312);
					}
					case 5:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 5);
						SetPlayerPos_Update(playerid, 318.564971, 1118.209960, 1083.882812);
					}
					case 6:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 1);
						SetPlayerPos_Update(playerid, 244.411987, 305.032989, 999.148437);
					}
					case 7:
					{
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 2);
						SetPlayerPos_Update(playerid, 271.884979, 306.631988, 999.148437);
					}
				}
			}
			case 3260:
			{
				switch(listitem)
				{
					case 0:
					{
						/*if(Player[playerid][Tester] >= 1)
						{
							ShowPlayerDialog(playerid, 322, DIALOG_STYLE_LIST, "Commands", "General\nAnimations\nBank\nBusinesses\nHouses\nHotels\nOwned Vehicles\nJobs\nFactions\nGangs\nPhone\nWalkie Talkie\nVIP\nBETA\n", "Select", "Cancel");
						}
						else
						{
							ShowPlayerDialog(playerid, 322, DIALOG_STYLE_LIST, "Commands", "General\nAnimations\nBank\nBusinesses\nHouses\nHotels\nOwned Vehicles\nJobs\nFactions\nGangs\nPhone\nWalkie Talkie\nVIP\n", "Select", "Cancel");
						}*/
						ShowPlayerDialog(playerid, 322, DIALOG_STYLE_LIST, "Commands", "General\nAnimations\nBank\nBusinesses\nHouses\nHotels\nOwned Vehicles\nJobs\nFactions\nGangs\nPhone\nWalkie Talkie\nVIP\nPlayer Party\nCasino\nLoyalty System", "Select", "Cancel");
					}
					case 1:
					{
						SendClientMessage(playerid, WHITE, "--------------------------------------------------------------------------------------------------------------------------------");
						SendClientMessage(playerid, WHITE, "Administrators");
						SendClientMessage(playerid, GREY, "crea is managed by a small but effective dedicated team.");
						SendClientMessage(playerid, GREY, "You can apply for an administrative postion on our forums at www.crearoleplay.com");
						SendClientMessage(playerid, WHITE, "--------------------------------------------------------------------------------------------------------------------------------");
					}
					case 2:
					{
						SendClientMessage(playerid, WHITE, "--------------------------------------------------------------------------------------------------------------------------------");
						SendClientMessage(playerid, WHITE, "Our rules change on a regular basis, we suggest you visit our forum to check them (www.crearoleplay.com/t/rules).");
						SendClientMessage(playerid, WHITE, "--------------------------------------------------------------------------------------------------------------------------------");
					}
					case 3:
					{
						ShowPlayerDialog(playerid, 3261, DIALOG_STYLE_LIST, "Frequently Asked Questions", "Where is the bank?\nWhere do I find X job?\nWhere do I find X business?\nHow do I change my skin?\nWhere do I buy a car?\nWhat's the best job?\nHow do I apply for the LSPD?\nHow do I buy VIP?\nHow do I hotwire?\n", "Select", "Exit");
					}
					case 4:
					{
						SendClientMessage(playerid, WHITE, "--------------------------------------------------------------------------------------------------------------------------------");
						SendClientMessage(playerid, WHITE, "Commands allocated for this business.");

						switch(Businesses[Player[playerid][InBusiness]][bType])
						{
							case 1: SendClientMessage(playerid, WHITE, "/buy");
							case 2: SendClientMessage(playerid, WHITE, "/buyclothes, /buytoys");
							case 3: SendClientMessage(playerid, WHITE, "/buy");
							case 4: SendClientMessage(playerid, WHITE, "/(ad)vertisement, /rentbillboard (VIP Only)");
							case 5: SendClientMessage(playerid, WHITE, "/buy");
							case 6, 21: SendClientMessage(playerid, WHITE, "/buyvehicle");
							case 7: SendClientMessage(playerid, WHITE, "/takecourse");
							case 8: SendClientMessage(playerid, WHITE, "/donate");
							case 9: SendClientMessage(playerid, WHITE, "/propose");
							case 10: SendClientMessage(playerid, WHITE, "/gymshop");
							case 11: SendClientMessage(playerid, WHITE, "/buy");
							case 12: SendClientMessage(playerid, WHITE, "/buy");
							case 13: SendClientMessage(playerid, WHITE, "/buyboat, /buy");
							case 14: SendClientMessage(playerid, WHITE, "/buyvehicle");
							case 15: SendClientMessage(playerid, WHITE, "/buy");
							case 16: SendClientMessage(playerid, WHITE, "/buy");
							case 17: SendClientMessage(playerid, WHITE, "/buymedkit");
							case 18: SendClientMessage(playerid, WHITE, "/bwithdraw, /bdeposit, /redeemcheck, /wiretransfer");
							case 19: SendClientMessage(playerid, WHITE, "/rentroom, /renewrent");
							case 20: SendClientMessage(playerid, WHITE, "/buybike");
							case 22: SendClientMessage(playerid, WHITE, "/buyfurni");
							case 23: SendClientMessage(playerid, WHITE, "/buypizza");
							case 24: SendClientMessage(playerid, WHITE, "/buyhouse, /sellhouse, /swaphouse, /housemove, /viewhouse");
							case 25: SendClientMessage(playerid, WHITE, "/viewprojects, /manageprojects, /createproject");
						}

						SendClientMessage(playerid, WHITE, "--------------------------------------------------------------------------------------------------------------------------------");
					}
				}
			}
			case 3261:
			{
				switch(listitem)
				{
					case 0: {
						ShowPlayerDialog(playerid, 3262, DIALOG_STYLE_MSGBOX, "Where is the bank?", "{FFFFFF}If you need to find the bank you can use the command /map and go into the \"Businesses\" option.\nThen just select \"Bank\" and a checkpoint will be placed the closest bank to you.", "Okay", "");
					}
					case 1: {
						ShowPlayerDialog(playerid, 3262, DIALOG_STYLE_MSGBOX, "Where do I find X job?", "{FFFFFF}If you are looking for any of the jobs that we have on the server you can use the command /map and go into the \"Jobs\" option.\nThen simply select the job you are looking for and a checkpoint will be placed on your map.", "Okay", "");
					}
					case 2: {
						ShowPlayerDialog(playerid, 3262, DIALOG_STYLE_MSGBOX, "Where do I find X business?", "{FFFFFF}If you are looking for a business you can use the command /map and go into the \"Businesses\" option.\nThen simply select the type of business you are looking for and a checkpoint will be placed on your map.", "Okay", "");
					}
					case 3: {
						ShowPlayerDialog(playerid, 3262, DIALOG_STYLE_MSGBOX, "How do I change my skin?", "{FFFFFF}You can change your skin at any clothes store using the command \"/buyclothes\" inside.\nIf you need to find a clothes store use the command /map.", "Okay", "");
					}
					case 4: {
						ShowPlayerDialog(playerid, 3262, DIALOG_STYLE_MSGBOX, "Where do I buy a car?", "{FFFFFF}You can purchase a car at either the Upper Class Dealership or at the Lower Class Dealership.\nSimply head inside and use the command \"/buyvehicle\" inside.", "Okay", "");
					}
					case 5: {
						ShowPlayerDialog(playerid, 3262, DIALOG_STYLE_MSGBOX, "What's the best job?", "{FFFFFF}All the jobs can be the \"best job\" if done properly.\nGenerally though the jobs which people consider the best are Arms Dealer, Fisherman, and Pizza Boy.\nYou can find any of these jobs using the /map command.", "Okay", "");
					}
					case 6: {
						ShowPlayerDialog(playerid, 3262, DIALOG_STYLE_MSGBOX, "How do I apply for the LSPD?", "{FFFFFF}You can apply for the LSPD on the forums at www.crearoleplay.com. Simply make a forum account and head into the \"Law Enforcement\" section.\nThen make your way to the \"Recruitment\" section and make sure you meet the requirements. Finally, use the format and apply!", "Okay", "");
					}
					case 7: {
						ShowPlayerDialog(playerid, 3262, DIALOG_STYLE_MSGBOX, "How do I buy VIP?", "{FFFFFF}You can go to our forum (www.crearoleplay.com) and buy VIP there.\nSelect the pink\"VIP\" category and you can see the perks and price of each VIP tier.\n", "Okay", "");
					}
					case 8: {
						ShowPlayerDialog(playerid, 3262, DIALOG_STYLE_MSGBOX, "How do I hotwire?", "{FFFFFF}When you get in a vehicle, type /hotwire. You will then see a dialog with some arrows. \nYou have to get 5 patterns correct before the timer runs out by matching the arrows in sequence. You do this by clicking with your mouse on\nthe arrow from the selection underneath that you think best matches the pattern and completes the sequence.\neg: UP DOWN UP ? - The answer would be DOWN.", "Okay", "");
					}
				}
			}
			case 6676:
			{
				if(strlen(inputtext) >= 1 && strlen(inputtext) < 60)
				{
					new string[100];
					format(Player[playerid][ReportText], 128, inputtext);
					if(GetPVarInt(playerid, "MaskReport") == 2)
					{
						format(string, sizeof(string), "%s (ID: %d) has reported masked player %s (ID: %d): %s", GetName(playerid), playerid, GetName(Player[playerid][ReportingPlayer]), Player[playerid][ReportingPlayer], inputtext);
						SendToAdmins(ADMINORANGE, string, 1);
						OOCChatLog(string);
						format(string, sizeof(string), "You have reported mask %d for: %s", Player[Player[playerid][ReportingPlayer]][MaskID], inputtext);
						SendClientMessage(playerid, WHITE, string);
						format(Player[playerid][ReportText], 128, "PLAYER REPORT: %s reported masked player %s, for %s.", GetName(playerid), GetName(Player[playerid][ReportingPlayer]), inputtext);
						DeletePVar(playerid, "MaskReport");
					}
					else
					{
						format(string, sizeof(string), "%s (ID: %d) has reported %s (ID: %d): %s", GetName(playerid), playerid, GetName(Player[playerid][ReportingPlayer]), Player[playerid][ReportingPlayer], inputtext);
						SendToAdmins(ADMINORANGE, string, 1);
						OOCChatLog(string);
						format(string, sizeof(string), "You have reported %s (ID: %d): %s", GetName(Player[playerid][ReportingPlayer]), Player[playerid][ReportingPlayer], inputtext);
						SendClientMessage(playerid, WHITE, string);
						format(Player[playerid][ReportText], 128, "PLAYER REPORT: %s reported %s, for %s.", GetName(playerid), GetName(Player[playerid][ReportingPlayer]), inputtext);
					}
					Player[playerid][ActiveReport] = 1;
					Player[playerid][ReportTime] = gettime();
				}
				else
				{
					ShowPlayerDialog(playerid, 6676, DIALOG_STYLE_INPUT, "Player Report", "Enter a valid reason for why you're reporting that player.", "Report", "Cancel");
					SendClientMessage(playerid, WHITE, "Strings over 60 are ignored.");
				}
			}
			case 7766:
			{
				if(!response)
				{
					DeletePVar(playerid, "MaskReport");
					return 1;
				}
				if(GetPVarInt(playerid, "MaskReport") == 1)
				{
					foreach(Player, i)
					{
						if(Player[i][MaskID] == strval(inputtext))
						{
							Player[playerid][ReportingPlayer] = i;
							SetPVarInt(playerid, "MaskReport", 2);
							ShowPlayerDialog(playerid, 6676, DIALOG_STYLE_INPUT, "Player Report", "Enter a valid reason for why you're reporting that player.", "Report", "Cancel");
							return 1;
						}
					}
					SetPVarInt(playerid, "MaskReport", 1);
					SendClientMessage(playerid, -1, "Enter the ID of the masked player only. (E.g: 4351)");
					ShowPlayerDialog(playerid, 7766, DIALOG_STYLE_INPUT, "Player Report", "Enter the mask ID of the player you wish to report.", "Report", "Cancel");
				}
				if(strlen(inputtext) > MAX_PLAYER_NAME || strlen(inputtext) < 1)
				{
					SendClientMessage(playerid, WHITE, "That string is longer than the SA-MP name limit or is below the allocated string limit of 1.");
				}
				else
				{
					new id;
					if(sscanf(inputtext, "u", id))
					{
						ShowPlayerDialog(playerid, 7766, DIALOG_STYLE_INPUT, "Player Report", "Enter the name of the player you wish to report.", "Report", "Cancel");
						SendClientMessage(playerid, WHITE, "Invalid character name / ID, please use a valid name to report.");
					}
					else
					{
						if(!IsPlayerConnectedEx(id))
						{
							ShowPlayerDialog(playerid, 7766, DIALOG_STYLE_INPUT, "Player Report", "Enter the name of the player you wish to report.", "Report", "Cancel");
							SendClientMessage(playerid, WHITE, "Invalid character name / ID, please use a valid name to report.");
						}
						else
						{
							if(IsPlayerConnectedEx(id))
							{
								Player[playerid][ReportingPlayer] = id;
								ShowPlayerDialog(playerid, 6676, DIALOG_STYLE_INPUT, "Player Report", "Enter a valid reason for why you're reporting that player.", "Report", "Cancel");
							}
						}
					}
				}
			}
			case 6897:
			{
				switch(listitem)
				{
					case 0:
					{
						SendClientMessage(playerid, RED, "Please remember that we're experiencing a high volume of reports. Please only report, if this is a hacker.");
						ShowPlayerDialog(playerid, 7766, DIALOG_STYLE_INPUT, "Player Report", "Enter the name of the player you wish to report.", "Report", "Cancel");
					}
					case 1:
					{
						SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------");
						SendClientMessage(playerid, WHITE, "You are requesting to speak to an administrator.");
						SendClientMessage(playerid, ADMINORANGE, "We're experiencing an extremely high volume of reports. Please continue with your message if it's urgent.");
						SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------");
						ShowPlayerDialog(playerid, 9722, DIALOG_STYLE_INPUT, "Regarding?", "Please read above before submitting any messages and please keep your messages below 50 characters.", "Report", "Cancel");
					}
					case 3:
					{
						SendClientMessage(playerid, ADMINORANGE, "We're experiencing an extremely high volume of reports. Please continue with your message if it's urgent.");
						SetPVarInt(playerid, "MaskReport", 1);
						ShowPlayerDialog(playerid, 7766, DIALOG_STYLE_INPUT, "Player Report", "Enter the mask ID of the player you wish to report.", "Report", "Cancel");
					}
				}
			}
			case 6677:
			{
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialog(playerid, 7766, DIALOG_STYLE_INPUT, "Player Report", "Enter the name of the player you wish to report.", "Report", "Cancel");
					}
					case 1:
					{
						ShowPlayerDialog(playerid, 6391, DIALOG_STYLE_LIST, "House / Business Related", "House Exterior / Interior Change\nBusiness Exterior / Interior Change\nOther\n", "Select", "Cancel");
					}
					case 2:
					{
						SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------");
						SendClientMessage(playerid, WHITE, "You are requesting to speak to an administrator.");
						SendClientMessage(playerid, ADMINORANGE, "Please ONLY use this feature, if what you're speaking about is important. Do NOT use this to chat or you risk being fined.");
						SendClientMessage(playerid, WHITE, "If you are requesting something, please check each other report section BEFORE using this tool.");
						SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------");
						ShowPlayerDialog(playerid, 9722, DIALOG_STYLE_INPUT, "Regarding?", "Please read above before submitting any messages and please keep your messages below 80 characters.", "Report", "Cancel");
					}
					case 3:
					{
						SetPVarInt(playerid, "MaskReport", 1);
						ShowPlayerDialog(playerid, 7766, DIALOG_STYLE_INPUT, "Player Report", "Enter the mask ID of the player you wish to report.", "Report", "Cancel");
					}
				}
			}
			case 6391:
			{
				new string[128];
				switch(listitem)
				{
					case 0:
					{
						if(Player[playerid][House] >= 1)
						{
							new Count;
							foreach(Player, i)
							{
								if(Player[i][AdminLevel] >= 1 && Player[i][AdminDuty] >= 1)
								{
									Count++;
								}
							}

							if(Count >= 1)
							{
								format(string, sizeof(string), "%s [ID: %d] is requesting an house interior / exterior change.", GetName(playerid), playerid);
								SendToAdmins(ADMINORANGE, string, 1);
								OOCChatLog(string);
								SendClientMessage(playerid, WHITE, "You have request a house interior / exterior change.");
								Player[playerid][ActiveReport] = 1;
								Player[playerid][ReportTime] = gettime();
								format(Player[playerid][ReportText], 128, "HOUSE INTERIOR/EXTERIOR CHANGE");
							}
							else
							{
								SendClientMessage(playerid, WHITE, "Sorry, there are no administrators available who have the power to alter houses.");
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You don't own a house to request an interior / exterior change.");
						}
					}
					case 1:
					{
						if(Player[playerid][Business] >= 1)
						{
							new Count;
							foreach(Player, i)
							{
								if(Player[i][AdminLevel] >= 1 && Player[i][AdminDuty] >= 1)
								{
									Count++;
								}
							}

							if(Count >= 1)
							{
								format(string, sizeof(string), "%s [ID: %d] is requesting an business interior / exterior change.", GetName(playerid), playerid);
								SendToAdmins(ADMINORANGE, string, 1);
								SendClientMessage(playerid, WHITE, "You have request a business interior / exterior change.");
								Player[playerid][ActiveReport] = 1;
								Player[playerid][ReportTime] = gettime();
								format(Player[playerid][ReportText], 128, "BUSINESS INTERIOR/EXTERIOR CHANGE");
							}
							else
							{
								SendClientMessage(playerid, WHITE, "Sorry, there are no administrators available who have the power to alter businesses.");
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You don't own a business to request an interior / exterior change.");
						}
					}
					case 2:
					{
						if(Player[playerid][Business] >= 1 || Player[playerid][House] >= 1)
						{
							new Count;
							foreach(Player, i)
							{
								if(Player[i][AdminLevel] >= 1 && Player[i][AdminDuty] >= 1)
								{
									Count++;
								}
							}

							if(Count >= 1)
							{
								ShowPlayerDialog(playerid, 9721, DIALOG_STYLE_INPUT, "Other", "Please enter what it is you wish changed/executed.", "Report", "Cancel");
							}
							else
							{
								SendClientMessage(playerid, WHITE, "Sorry, there are no administrators available who have the power to alter businesses/houses.");
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You don't own a house or a business to request an interior / exterior change.");
						}
					}
				}
			}
			case 9721:
			{
				new string[128];
				if(strlen(inputtext) >= 1 && strlen(inputtext) < 80)
				{
					format(string, sizeof(string), "%s [ID: %d] is requesting a house/business change: %s", GetName(playerid), playerid, inputtext);
					SendToAdmins(ADMINORANGE, string, 1);
					format(string, sizeof(string), "You have sent: %s", inputtext);
					SendClientMessage(playerid, WHITE, string);
					Player[playerid][ActiveReport] = 1;
					Player[playerid][ReportTime] = gettime();
					format(Player[playerid][ReportText], 128, "House/Business: %s", inputtext);
				}
				else
				{
					ShowPlayerDialog(playerid, 9721, DIALOG_STYLE_INPUT, "Other", "Please enter what it is you wish changed/executed.", "Report", "Cancel");
					SendClientMessage(playerid, WHITE, "Over 80 characters, or not even one.");
				}
			}
			case 9722:
			{
				new string[128];
				if(strlen(inputtext) >= 1 && strlen(inputtext) < 80)
				{
					Player[playerid][ActiveReport] = 1;
					Player[playerid][ReportTime] = gettime();
					format(Player[playerid][ReportText], 128, "SPEAK REQUEST: %s", inputtext);
					format(string, sizeof(string), "%s [ID: %d] is requesting to speak to an Admin: %s", GetName(playerid), playerid, inputtext);
					SendToAdmins(ADMINORANGE, string, 1);
					OOCChatLog(string);

					SendClientMessage(playerid, WHITE, "You have requested to speak to an Administrator.");
				}
				else
				{
					ShowPlayerDialog(playerid, 9722, DIALOG_STYLE_INPUT, "Regarding?", "Enter what you would like to speak about. Remember, this is for administrative help. Keep your messages below 80 characters.", "Report", "Cancel");
					SendClientMessage(playerid, WHITE, "Over 80 characters, or not even one.");
				}
			}
			case 631:
			{
				if(Player[playerid][InBusiness] == 0)
					return 1;

				switch(listitem)
				{
					case 0:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice1])
							return SendClientMessage(playerid, -1, "Insufficient funds.");

						if(Businesses[Player[playerid][InBusiness]][bSupplies] < 2)
							return SendClientMessage(playerid, -1, "That item is out of stock.");

						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice1];
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice1];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice1]);
						Player[playerid][Rope]++;
						Businesses[Player[playerid][InBusiness]][bSupplies] -= 2;
						GenerateTrash(Player[playerid][InBusiness], 1);
						//SendClientMessage(playerid, WHITE, "You have purchased some rope. Use /tie [playerid] to use the rope (in a car as the driver).");

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Rope Help", "{FFFFFF}You have purchased some rope! You can use this to tie up people who\n have their hands up, or who are inside your car.\n\n{009900}Commands:{FFFFFF}\n /tie [playerid]", "Okay", "");
						else SendClientMessage(playerid, WHITE, "You have purchased some rope. Use /tie [playerid] to use the rope (in a car as the driver).");
						new string[128];
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased rope from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice1]);
						StatLog(string);
					}
					case 1:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice2])
							return SendClientMessage(playerid, -1, "Insufficient funds.");

						if(Businesses[Player[playerid][InBusiness]][bSupplies] < 1)
							return SendClientMessage(playerid, -1, "That item is out of stock.");

						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice2];
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice2];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice2]);
						Player[playerid][Rags]++;
						Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						GenerateTrash(Player[playerid][InBusiness], 1);
						//SendClientMessage(playerid, WHITE, "You have purchased some rags. Use /blindfold [playerid] to use the rags, to a tied person.");

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Blindfold Help", "{FFFFFF}You have purchased some rags! You can use this to blindfold or gag someone\nwhom you have tied up. They must be tied up and as always you must roleplay it!\n\n{009900}Commands:{FFFFFF}\n /blindfold [playerid] \n /gag [playerid]", "Okay", "");
						else SendClientMessage(playerid, WHITE, "You have purchased some rags. Use /blindfold [playerid] to use the rags, to a tied person.");
						new string[128];
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased rags from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice2]);
						StatLog(string);
					}
					case 2:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice3])
							return SendClientMessage(playerid, -1, "Insufficient funds.");

						if(Businesses[Player[playerid][InBusiness]][bSupplies] < 50)
							return SendClientMessage(playerid, -1, "That item is out of stock.");

						// if(Player[playerid][PhoneN] >= 0)
							// return SendClientMessage(playerid, -1, "You can only have one phone at a time.");

						if(PlayerOwnsPhone(playerid) > 4)
							return SendClientMessage(playerid, WHITE, "You cannot buy any more phones!");

						new string[324];
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice3];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice3]);

						new number, temp;
						while(number == 0)
						{
							temp = 20000+random(9998);
							if(!IsExistingPhoneNumber(temp))
								number = temp;
						}

						new query[128];
						mysql_format(MYSQL_MAIN, query, sizeof(query), "INSERT INTO phones (owner, number, status) VALUES ('%e', '%d', '1')", Player[playerid][NormalName], number);
						mysql_query(MYSQL_MAIN, query, false);
					
						//resetting contacts+smshistory.
						mysql_format(MYSQL_MAIN, query, sizeof(query), "DELETE FROM phonecontacts WHERE number = '%d'", number);
						mysql_query(MYSQL_MAIN, query, false);
					   
						mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE phonesmshistory SET deleted = '1' WHERE phone = '%d'", number);
						mysql_query(MYSQL_MAIN, query, false);

						Businesses[Player[playerid][InBusiness]][bSupplies] -= 50;
						GenerateTrash(Player[playerid][InBusiness], 25);
						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice3];
						Player[playerid][PhoneN] = number;

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
						{
							format(string, sizeof(string), "{FFFFFF}You have purchased a cellphone! The number is %d. You can use your new phone to call people,\nsend text messages, and even place advertisments!\nYou can also save up to 20 contacts.\n\n{009900}Commands:{FFFFFF}\n/call [phone number]\n/sms [phone number]\n/phone", number);
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Cellphone Help", string, "Okay", "");
						}
						else
						{
							format(string, sizeof(string), "You have purchased a cellphone. The number is %d.", number);
							SendClientMessage(playerid, WHITE, string);
						}
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased a phone(%d) from business %d for %d.", GetName(playerid), number, Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice3]);
						StatLog(string);
					}
					case 3:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice4])
							return SendClientMessage(playerid, -1, "Insufficient funds.");

						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice4];
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
						Player[playerid][HadSprunk] = 5;
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice4];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice5]);
						// Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						TextDrawShowForPlayer(playerid, SprunkTextDraw);

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Sprunk Help", "{FFFFFF}You have purchased a sprunk bottle! You can use this to restore\nyour health by hitting the {009900}LMB (Left Clicking){FFFFFF}\nOnce you are done refilling your health you can get rid of it by hitting {009900}ENTER{FFFFFF}.\n\n{009900}Commands:{FFFFFF}\nNone", "Okay", "");

						new string[128];
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased sprunk from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice4]);
						StatLog(string);
					}
					case 4:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice5])
							return SendClientMessage(playerid, -1, "Insufficient funds.");

						if(Businesses[Player[playerid][InBusiness]][bSupplies] < 5)
							return SendClientMessage(playerid, -1, "That item is out of stock.");

						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice5];
						Businesses[Player[playerid][InBusiness]][bSupplies] -= 5;
						GenerateTrash(Player[playerid][InBusiness], 3);
						Player[playerid][HasSprayCans]++;
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice5];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice5]);
						//SendClientMessage(playerid, WHITE, "These are only for owned vehicles, use the command /colourcar. ((Mechanic job required))");

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Spray Can Help", "{FFFFFF}You have purchased a spray can! You can use this to change the color of a car, boat, or bike\nif you are in the driver seat. {FF0000}You must be a mechanic to use this!\n\n{009900}Commands:{FFFFFF}\n/colourcar [colour id] [colour id]\n\nYou can find color ids by googling \"SAMP car color IDs\"", "Okay", "");
						else SendClientMessage(playerid, WHITE, "These are only for owned vehicles, use the command /colourcar. ((Mechanic job required))");
						new string[128];
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased a spraycan from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice5]);
						StatLog(string);
					}
					case 5:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice6])
							return SendClientMessage(playerid, -1, "Insufficient funds.");

						if(Businesses[Player[playerid][InBusiness]][bSupplies] < 50)
							return SendClientMessage(playerid, -1, "That item is out of stock.");

						if(Player[playerid][WalkieTalkie] > 0)
							return SendClientMessage(playerid, -1, "You can only have one walkie talkie at a time.");

						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice6];
						Player[playerid][WalkieTalkie]++;
						Businesses[Player[playerid][InBusiness]][bSupplies] -= 50;
						GenerateTrash(Player[playerid][InBusiness], 25);
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice6];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice6]);
						//

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Walkie Talkie Help", "{FFFFFF}You have purchased a walkie talkie! You can use this to talk In-Character between a group of people.\nEveryone who is on the same frequency as you will be able to hear what you say!\n\n{009900}Commands:{FFFFFF}\n/setfrequency [id]\n/wt [text]\n/toggles", "Okay", "");
						else SendClientMessage(playerid, WHITE, "You have purchased a Walkie Talkie. Use /wt [message], but set your frequency by using /setfrequency [id].");
						new string[128];
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased a walkie talkie from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice6]);
						StatLog(string);
					}
					case 6:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice7])
							return SendClientMessage(playerid, -1, "Insufficient funds.");

						if(Businesses[Player[playerid][InBusiness]][bSupplies] < 500)
							return SendClientMessage(playerid, -1, "That item is out of stock.");

						if(Player[playerid][PersonalRadio] > 0)
							return SendClientMessage(playerid, -1, "You can only have one personal radio at a time.");

						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice7];
						Businesses[Player[playerid][InBusiness]][bSupplies] -= 500;
						GenerateTrash(Player[playerid][InBusiness], 100);
						Player[playerid][PersonalRadio]++;
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice7];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice7]);
						//SendClientMessage(playerid, WHITE, "You have purchased a personal radio. Use /installradio in a house or business.");

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Personal Radio Help", "{FFFFFF}You have purchased a personal radio! This item is installed inside a house or business so\nthat you can stream music inside it.\nThe music streams are the same as the ones you can use in your car.\n\n{009900}Commands:{FFFFFF}\n/installradio (Inside a house or business.)", "Okay", "");
						else SendClientMessage(playerid, WHITE, "You have purchased a personal radio. Use /installradio in a house or business.");

						new string[128];
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased a personal radio from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice7]);
						StatLog(string);
					}
					case 7:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice8])
							return SendClientMessage(playerid, -1, "Insufficient funds.");

						if(Businesses[Player[playerid][InBusiness]][bSupplies] < 50)
							return SendClientMessage(playerid, -1, "That item is out of stock.");

						if(Player[playerid][Toolkit] > 0)
							return SendClientMessage(playerid, -1, "You can only have one toolkit at a time.");

						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice8];
						Businesses[Player[playerid][InBusiness]][bSupplies] -= 50;
						GenerateTrash(Player[playerid][InBusiness], 25);
						Player[playerid][Toolkit]++;
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice8];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice8]);
						//SendClientMessage(playerid, WHITE, "You have purchased a toolkit. Use this to create guns on the go.");

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Toolkit Help", "{FFFFFF}You have purchased a toolkit! This is used to fix cars as a mechanic\nor create weapons as an arms dealer!\n\n{009900}Commands:{FFFFFF}\n/fixcar (Mechanic)\n/creategun (Arms Dealer)", "Okay", "");
						else SendClientMessage(playerid, WHITE, "You have purchased a toolkit. Use this to create guns on the go.");
						new string[128];
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased a toolkit from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice8]);
						StatLog(string);
					}
					case 8:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice9])
							return SendClientMessage(playerid, -1, "Insufficient funds.");

						if(Businesses[Player[playerid][InBusiness]][bSupplies] < 5)
							return SendClientMessage(playerid, -1, "That item is out of stock.");

						if(Player[playerid][GasCans] >= 1)
							return SendClientMessage(playerid, -1, "You can only have one gas can at a time.");

						for(new i; i < 5; i++)
						{
							if(Player[playerid][Cars][i] == 0) continue;

							// if(VehicleHasGasCan(Player[playerid][Cars][i]))
								// return SendClientMessage(playerid, -1, "You can only have one gas can at a time.");
						}

						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice9];
						Businesses[Player[playerid][InBusiness]][bSupplies] -= 5;
						GenerateTrash(Player[playerid][InBusiness], 3);
						Player[playerid][GasCans] = 1;
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice9];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice9]);
						//SendClientMessage(playerid, WHITE, "You have purchased a gas can. Use /refill in a vehicle to fill the tank.");

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Gas Can Help", "{FFFFFF}You have purchased a gas can! This is used to refill vehicles which are out of fuel\nwith no gas stations in sight!\n\n{009900}Commands:{FFFFFF}\n/refillgascan (Must be near a gas station fuel point)\n/refill (Must be in the driver seat of a car)", "Okay", "");
						else SendClientMessage(playerid, WHITE, "You have purchased a gas can. Use /refill in a vehicle to fill the tank.");
						new string[128];
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased a gas can from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice9]);
						StatLog(string);
					}
					case 9:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice10])
							return SendClientMessage(playerid, -1, "Insufficient funds.");

						if(Businesses[Player[playerid][InBusiness]][bSupplies] < 50)
							return SendClientMessage(playerid, -1, "That item is out of stock.");

						if(Player[playerid][VehicleRadio] >= 1)
							return SendClientMessage(playerid, -1, "You can only have one vehicle radio at a time.");

						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice10];
						Businesses[Player[playerid][InBusiness]][bSupplies] -= 50;
						GenerateTrash(Player[playerid][InBusiness], 25);
						Player[playerid][VehicleRadio] = 1;
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice10];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice10]);

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Vehicle Radio Help", "{FFFFFF}You have purchased a vehicle radio! This is used to listen to the radio in a vehicle,\nsuch as the /cradio and SAM broadcasts!\n\n{009900}Commands:{FFFFFF}\n/installvehicleradio", "Okay", "");
						else SendClientMessage(playerid, WHITE, "You have purchased a vehicle radio. Use /installvehicleradio in a vehicle to install it.");
						new string[128];
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased a vehicle radio from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice10]);
						StatLog(string);
					}
					case 10:
					{
						if(Businesses[Player[playerid][InBusiness]][bProductPrice11] == 0)
							return SendClientMessage(playerid, -1, "Sorry mate, there are no Cameras in stock.");

						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice11])
							return SendClientMessage(playerid, -1, "Insufficient funds.");

						if(Businesses[Player[playerid][InBusiness]][bSupplies] < 500)
							return SendClientMessage(playerid, -1, "That item is out of stock.");

						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice11];
						Businesses[Player[playerid][InBusiness]][bSupplies] -= 500;
						GenerateTrash(Player[playerid][InBusiness], 100);
						GivePlayerWeaponEx(playerid, 43);
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice11];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice11]);

						SendClientMessage(playerid, WHITE, "You have purchased a camera. You can use this to take pictures!");
						new string[128];
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased a camera from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice11]);
						StatLog(string);
					}
					case 11:
					{
						if(Businesses[Player[playerid][InBusiness]][bProductPrice12] == 0)
							return SendClientMessage(playerid, -1, "Sorry mate, there are no Boomboxes in stock.");

						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice12])
							return SendClientMessage(playerid, -1, "Insufficient funds.");

						if(Businesses[Player[playerid][InBusiness]][bSupplies] < 100)
							return SendClientMessage(playerid, -1, "That item is out of stock.");

						if(Player[playerid][PlayingHours] < 10 && GetPVarInt(playerid, "BOOMBOXBUY") != 1)
						{
							SendClientMessage(playerid, GREY, "You cannot use boomboxes until you have 10+ playing hours!");
							SendClientMessage(playerid, GREY, "Type /buy and choose Boombox again if you wish to buy it still.");
							return SetPVarInt(playerid, "BOOMBOXBUY", 1);
						}

						if(Player[playerid][HasBoombox])
							return SendClientMessage(playerid, WHITE, "You already have a boombox.");

						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice12];
						Businesses[Player[playerid][InBusiness]][bSupplies] -= 100;
						GenerateTrash(Player[playerid][InBusiness], 30);
						Player[playerid][HasBoombox] = 100;
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice12];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice12]);

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Boombox Help", "{FFFFFF}You have purchased a boombox! Boomboxes are used to play music in a radius.\n\n{009900}Commands:{FFFFFF}\n/placeboombox\n/takeboombox\n/boombox\n/fixboombox", "Okay", "");
						else SendClientMessage(playerid, WHITE, "You have purchased a boombox. You can use this to play music in a small radius.");
						new string[128];
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased a boombox from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice12]);
						StatLog(string);
					}
					case 12:
					{
						if(Businesses[Player[playerid][InBusiness]][bProductPrice13] == 0)
							return SendClientMessage(playerid, -1, "Sorry mate, there are no notepads in stock.");
							
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice13])
							return SendClientMessage(playerid, -1, "Insufficient funds.");

						if(Businesses[Player[playerid][InBusiness]][bSupplies] < 100)
							return SendClientMessage(playerid, -1, "That item is out of stock.");

						if(Player[playerid][Notepad] > 0)
							return SendClientMessage(playerid, WHITE, "You already have a notepad.");

						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice13];
						Businesses[Player[playerid][InBusiness]][bSupplies] -= 100;
						GenerateTrash(Player[playerid][InBusiness], 30);
						Player[playerid][Notepad] = 30;
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice13];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice13]);						
						SendClientMessage(playerid, WHITE, "You have purchased a notepad. You can write notes and give them to other people!");
						SendClientMessage(playerid, WHITE, "Commands: /writenote, /readnote");
						new string[128];
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased a notepad from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice13]);
						StatLog(string);						
					}
					case 13:
					{
						if(GetTicketMax(playerid) <= GetNumberOfTickets(playerid))
							return SendClientMessage(playerid, -1, "You currently have the maximum amount of lottery tickets you may purchase.");

						if(Player[playerid][Money] < rafflePrice)
							return SendClientMessage(playerid, -1, "You do not have enough money to purchase a lottery ticket.");

						ShowPlayerDialog(playerid, RAFFLE_TICKET_NUMBER, DIALOG_STYLE_INPUT, "Lottery Ticket Number", "Enter the number you wish to enter the lotto with!", "Done", "Exit");
					}
				}
				SaveBusiness(Player[playerid][InBusiness]);
			}
			case RAFFLE_TICKET_NUMBER:
			{
				if(!response)
					return 1;

				if(strval(inputtext) < 1 || strval(inputtext) > 99 || !IsNumeric(inputtext) || isnull(inputtext))
				{
					SendClientMessage(playerid, -1, "You must choose a number between 1 and 99.");
					return ShowPlayerDialog(playerid, RAFFLE_TICKET_NUMBER, DIALOG_STYLE_INPUT, "Lottery Ticket Number", "Enter the number you wish to enter the lotto with!", "Done", "Exit");
				}

				if(GetTicketMax(playerid) <= GetNumberOfTickets(playerid))
					return SendClientMessage(playerid, -1, "You currently have the maximum amount of lottery tickets you may purchase.");

				if(Player[playerid][Money] < rafflePrice)
					return SendClientMessage(playerid, -1, "You do not have enough money to purchase a lottery ticket.");

				new query[128];
				if(Player[playerid][AdminDuty] > 0 || Player[playerid][UnderCover] > 0)
					mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM Raffle WHERE name = '%e' AND number = '%d'", Player[playerid][NormalName], strval(inputtext));
				else
					mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM Raffle WHERE name = '%e' AND number = '%d'", GetName(playerid), strval(inputtext));
				new Cache:cache = mysql_query(MYSQL_MAIN, query);
				new count = cache_get_row_count();
				cache_delete(cache);
				if(count > 0)
					return SendClientMessage(playerid, WHITE, "You already bought a ticket with that number!");

				if(Player[playerid][AdminDuty] > 0 || Player[playerid][UnderCover] > 0)
					mysql_format(MYSQL_MAIN, query, sizeof(query), "INSERT INTO Raffle (name, number) VALUES ('%e', '%d')", Player[playerid][NormalName], strval(inputtext));
				else
					mysql_format(MYSQL_MAIN, query, sizeof(query), "INSERT INTO Raffle (name, number) VALUES ('%e', '%d')", GetName(playerid), strval(inputtext));
				mysql_query(MYSQL_MAIN, query, false);

				Player[playerid][Money] -= rafflePrice;
				rafflePot += rafflePrice;
				raffleBonus += rafflePrice / 2;

				if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
					ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Lottery Ticket Help", "You have purchased a ticket for the lotto! The lotto is drawn every Thursday\n at 12:00 AM Server Time (GMT 0)\nYou can only purchase one ticket unless you are a VIP.\n\n{009900}Commands:{FFFFFF}\nNone", "Okay", "");
				else 
				{
					SendClientMessage(playerid, -1 , "You have purchased a ticket for the lotto!");
					Player[playerid][LottoTicket]++;
				}
			}
			case 257:
			{
				new string[128];

				if(Player[playerid][InBusiness] == 0)
					return 1;

				switch(listitem)
				{
					case 0:
					{
						if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice1])
						{
							if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 2)
							{
								Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice1];
								Businesses[Player[playerid][InBusiness]][bSupplies] -= 2;
//								Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice1];
								AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice1]);
								Player[playerid][Rope]++;
								SendClientMessage(playerid, WHITE, "You have purchased some rope. Use /tie [playerid] to use the rope (in a car as the driver).");
							}
							else
							{
								SendClientMessage(playerid, WHITE, "That item is out of stock.");
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "Insufficient funds.");
						}
					}
					case 1:
					{
						if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice2])
						{
							if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
							{
//								Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice2];
								AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice2]);
								Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice2];
								Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
								SendClientMessage(playerid, WHITE, "You have purchased a Small White Vibrator.");
								GivePlayerWeaponEx(playerid, 11);
							}
							else
							{
								SendClientMessage(playerid, WHITE, "That item is out of stock.");
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "Insufficient funds.");
						}
					}
					case 2:
					{
						if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice3])
						{
							if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
							{
//								Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice3];
								AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice3]);
								Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice3];
								SendClientMessage(playerid, WHITE, "You have purchased a Silver Vibrator.");
								GivePlayerWeaponEx(playerid, 13);
								Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
							}
							else
							{
								SendClientMessage(playerid, WHITE, "That item is out of stock.");
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "Insufficient funds.");
						}
					}
					case 3:
					{
						if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice4])
						{
							if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
							{
//								Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice4];
								AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice4]);
								Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice4];
								Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
								SendClientMessage(playerid, WHITE, "You have purchased a Large White Vibrator.");
								GivePlayerWeaponEx(playerid, 12);
							}
							else
							{
								SendClientMessage(playerid, WHITE, "That item is out of stock.");
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "Insufficient funds.");
						}
					}
					case 4:
					{
						if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice5])
						{
							if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
							{
								Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
//								Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice5];
								AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice5]);
								Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice5];
								SendClientMessage(playerid, WHITE, "You have purchased some Priest Clothing.");
								format(string, sizeof(string), "* %s takes the clothes, rapidly changing between the clothes.", GetNameEx(playerid));
								NearByMessage(playerid, NICESKY, string);
								SetPlayerSkin(playerid, 68);
							}
							else
							{
								SendClientMessage(playerid, WHITE, "That item is out of stock.");
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "Insufficient funds.");
						}
					}
					case 5:
					{
						if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice6])
						{
							if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
							{
								Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
//								Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice6];
								AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice6]);
								Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice6];
								SendClientMessage(playerid, WHITE, "You have purchased a Naughty Police Girl Costume.");
								format(string, sizeof(string), "* %s takes the clothes, rapidly changing between the clothes.", GetNameEx(playerid));
								NearByMessage(playerid, NICESKY, string);
								SetPlayerSkin(playerid, 246);
							}
							else
							{
								SendClientMessage(playerid, WHITE, "That item is out of stock.");
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "Insufficient funds.");
						}
					}
					case 6:
					{
						if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice7])
						{
							if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
							{
								Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
//								Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice7];
								AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice7]);
								Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice7];
								SendClientMessage(playerid, WHITE, "You have purchased a Cat Woman Costume.");
								format(string, sizeof(string), "* %s takes the clothes, rapidly changing between the clothes.", GetNameEx(playerid));
								NearByMessage(playerid, NICESKY, string);
								SetPlayerSkin(playerid, 178);
							}
							else
							{
								SendClientMessage(playerid, WHITE, "That item is out of stock.");
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "Insufficient funds.");
						}
					}
				}
			}
			case 322: {
				SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");

				switch(listitem)
				{
					case 0:
					{
						SendClientMessage(playerid, WHITE, "You have selected General. We have a wide array of general commands for the server, these are specificly useful for gameplay:");
						SendClientMessage(playerid, GREY, "/changepass, /stats, /inv(entory), /(sk)ills, /playerwarns, /checkmutes, /admins, /rules, /getid, /time, /calculate");
						SendClientMessage(playerid, GREY, "/me, /do, /attempt, /n(ewbie), /b, /rp, /s(hout), /low, /w(hisper), /pm, /setntag, /accent, /buyid, /showid, /pay, /accept");
						SendClientMessage(playerid, GREY, "/(un)blindfold, /(un)tie, /(un)gag, /detain, /eject, /drag, /stopdrag, /dice, /flipcoin, /knock, /drop, /give, /giveweapon");
						SendClientMessage(playerid, GREY, "/joinevent, /ask, /cancelask, /map, /refuel, /call, /sms, /phone, /(h)angup, /lowwt, /wt, /setfrequency, /usepot, /usecocaine, /usespeed");
						SendClientMessage(playerid, GREY, "/buyhouse, /buybusiness, /usefightstyle, /killcheckpoint (/kc), /describe, /description, /enablehunger");
                        SendClientMessage(playerid, GREY, "/shortcmds, /hparm, /tempbanrecord, /pmblock, /refill, /refillgascan, /gate, /re(port), /mask, /showclosemasks (/scm), /removebug");
						SendClientMessage(playerid, GREY, "/deploytent, /removetent, /tentstore, /tenttake, /interior, /passdrink, /takedrink, /showreg, /showgunlicense");
						SendClientMessage(playerid, GREY, "/bugreport, /passjoint, /takejoint, /shownametag, /toggles, /quicktoggle");
					}
					case 1:
					{
						SendClientMessage(playerid, WHITE, "You have selected Animations. Here are a various amount of animations.");

						new string[128], found;

						for(new i; i < MAX_ANIMATIONS; i++)
						{
							if(isnull(Animations[i][AnimCommand]))
								continue;

							if(!strcmp(Animations[i][AnimCommand], "NOT_A_COMMAND", true))
								continue;

							found = 0;
							for(new x; x < MAX_ANIMATIONS && found == 0; x++)
							{
								if(x < i && !strcmp(Animations[i][AnimCommand], Animations[x][AnimCommand]))
									found = 1;
							}

							if(found)
								continue;

							format(string, sizeof(string), "%s/%s, ", string, Animations[i][AnimCommand]);
							if(strlen(string) > 110)
								SendClientMessage(playerid, GREY, string), string[0] = '\0';
						}

						if(strlen(string) <= 110)
							SendClientMessage(playerid, GREY, string);
					}
					case 2:
					{
						SendClientMessage(playerid, WHITE, "You have selected Bank. There are a few commands linked to the bank, they are:");
						SendClientMessage(playerid, GREY, "/bwithdraw, /bdeposit, /wiretransfer, /givecheck, /redeemcheck");
					}
					case 3:
					{
						SendClientMessage(playerid, WHITE, "You have selected Businesses. We have an array of useful commands for Businesses, so review the following:");
						SendClientMessage(playerid, GREY, "/bstore, /btake, /setprice, /supplystatus, /businessname, /bbalance, /lockbusiness, /abandonbusiness, /setsupplyprice, /setproductname");
						SendClientMessage(playerid, GREY, "/givebusinesskey, /dropbusinesskey, /buynewbusinesslock, /edittrashcan, /movetrashcan, /trashstatus, /sellbusiness, /bradio");
						SendClientMessage(playerid, GREY, "/installintercom, /intercom");
						if(Businesses[Player[playerid][Business]][bType] == 19) SendClientMessage(playerid, GREY, "/placehotelroom, /listtenants, /evicttenant, /edithotelroom, /inspectroom, /cleanroom");
					}
					case 4:
					{
						SendClientMessage(playerid, WHITE, "You have selected Houses. We have an array of useful commands for Houses, so review the following:");
						SendClientMessage(playerid, GREY, "/hbalance, /hsleep, /home, /hstore, /htake, /lockhouse, /installworkbench, /uninstallworkbench, /growpot");
						SendClientMessage(playerid, GREY, "/changeclothes, /abandonhouse, /givehousekey, /buynewdoorlock, /kpp, /setkp, /buykp, /installradio");
						SendClientMessage(playerid, GREY, "/editfurni, /interiordesign, /orderpizza, /sellhouse, /harvestpot, /(un)installgrowlight, /hradio, /buyhouse");
						SendClientMessage(playerid, GREY, "/sellbackhouse, /housebaseprice, /installventillation");
					}
					case 5:
					{
						SendClientMessage(playerid, WHITE, "You have selected Hotels. We have an array of useful commands for Hotels, so review the following:");
						SendClientMessage(playerid, GREY, "/hrwithdraw, /hrdeposit, /hrbalance, /rentroom, /renewrent, /abandonhotelroom");
						SendClientMessage(playerid, GREY, "/lockhotelroom, /hotelinfo");
					}
					case 6:
					{
						SendClientMessage(playerid, WHITE, "You have selected Cars. We have an array of useful commands for Cars, so review the following:");
						SendClientMessage(playerid, GREY, "/car, /lock, /sellcar, /unmodcar, /parkcar, /callcar, /buyvehicle, /givekey, /dropkey, /hotwire, /vdetails, /vstore, /vtake");
					}
					case 7:
					{
						SendClientMessage(playerid, WHITE, "You have selected Jobs. We have an array of useful commands for Jobs, so review the following:");

						if(Player[playerid][Job] >= 1)
						{
							switch(Jobs[Player[playerid][Job]][JobType])
							{
								case JOB_ARMSDEALER:
								{
									SendClientMessage(playerid, GREY, "/creategun, /getmats, /quitjob, /takebox");
								}
								case JOB_MECHANIC:
								{
									SendClientMessage(playerid, GREY, "/fixcar, /quitjob, /colourcar, /hydcar, /noscar, /uninstallnos, /uninstallhyd, /removepaintjob");
								}
								case JOB_DELIVERER:
								{
									SendClientMessage(playerid, GREY, "/getsupplies, /sellsupplies, /quitjob");
								}
								case JOB_FISHERMAN:
								{
									SendClientMessage(playerid, WHITE, "/fish, /sellfish");
								}
								case JOB_CARJACKER:
								{
									SendClientMessage(playerid, -1, "/delivercar, /togpicture");
								}
								case JOB_PIZZABOY:
								{
									SendClientMessage(playerid, -1, "/deliverpizza");
								}
								case JOB_TRUCKER:
								{
									SendClientMessage(playerid, -1, "/checkorders, /findsupplypickup, /findgaspickup, /startdelivery, /quitdelivery, /finishdelivery, /loadtruck, /deliver");
								}
								case JOB_GARBAGEMAN:
								{
									SendClientMessage(playerid, -1, "/endtrash");
								}
							}
						}
						if(Player[playerid][Job2] >= 1)
						{
							switch(Jobs[Player[playerid][Job2]][JobType])
							{
								case JOB_ARMSDEALER:
								{
									SendClientMessage(playerid, GREY, "/creategun, /getmats, /quitjob");
								}
								case JOB_MECHANIC:
								{
									SendClientMessage(playerid, GREY, "/fixcar, /quitjob, /colourcar, /hydcar, /noscar, /uninstallnos, /uninstallhyd, /removepaintjob");
								}
								case JOB_DELIVERER:
								{
									SendClientMessage(playerid, GREY, "/getsupplies, /sellsupplies, /quitjob");
								}
								case JOB_FISHERMAN:
								{
									SendClientMessage(playerid, WHITE, "/fish, /sellfish");
								}
								case JOB_CARJACKER:
								{
									SendClientMessage(playerid, -1, "/dropcar");
								}
								case JOB_PIZZABOY:
								{
									SendClientMessage(playerid, -1, "/deliverpizza");
								}
								case JOB_TRUCKER:
								{
									SendClientMessage(playerid, -1, "/checkorders, /findsupplypickup, /findgaspickup, /startdelivery, /quitdelivery, /finishdelivery, /loadtruck, /deliver");
								}
								case JOB_GARBAGEMAN:
								{
									SendClientMessage(playerid, -1, "/endtrash");
								}
							}
						}
					}
					case 8:
					{
						SendClientMessage(playerid, WHITE, "You have selected Factions. We have an array of useful commands for Groups, so review the following:");

						if(Player[playerid][Group] >= 1)
						{
							switch(Groups[Player[playerid][Group]][CommandTypes])
							{
								case 0, 9:
								{
									SendClientMessage(playerid, GREY, "/(f)action, /quitfaction, /listranks, /listskins, /listmyfaction");
								}
								case 1:
								{
									SendClientMessage(playerid, GREY, "/stun, /arrest, /frisk, /uncuff, /detain, /recordcrime, /gate, /r(adio), /lspd, /m(egaphone), /recordcheck, /elevator, /door");
									SendClientMessage(playerid, GREY, "/cuff, /ticket, /confiscate, /listmyfaction, /fingerprint, /backup, /acceptbackup, /cancelbackup, /removeobject, /deploy, /breakin");
									SendClientMessage(playerid, GREY, "/dep, /wanted, /quitfaction, /listranks, /listskins, /mdc, /enterenf, /exitenf, /lockenf, /oocuncuff, /removeplayer, /checkreg, /rappel");
									SendClientMessage(playerid, GREY, "/headphones, /plantbug, /removebug, /tunein, /ptazer, /houseinfo");

									if(Player[playerid][GroupRank] >= 4)
									{
										SendClientMessage(playerid, GREY, "/swatinv, /givebadge, /undercoverskins");
									}
									if(Player[playerid][GroupRank] >= 5)
									{
										SendClientMessage(playerid, GREY, "/togglefactionchat, /gov");
									}
									if(Player[playerid][GroupRank] >= 7)
									{
										SendClientMessage(playerid, GREY, "/listbugs, /removeallbugs");
									}
									if(Player[playerid][GroupRank] == 10)
									{
										SendClientMessage(playerid, GREY, "/editpaychecks");
									}
								}
								case 2:
								{
									SendClientMessage(playerid, GREY, "/(g)roup, /pda, /listmyfaction, /quitfaction, /listranks, /listskins");
								}
								case 3:
								{
									SendClientMessage(playerid, GREY, "/(r)adio, /heal, /(d)epartments, /listmyfaction, /quitfaction, /listranks, /listskins, /mduty, /lvmd");
								}
								case 4:
								{
									SendClientMessage(playerid, GREY, "/gov, /freezebank, /unfreezebank, /settax, /cashtransfer");
									SendClientMessage(playerid, GREY, "/listmyfaction, /listranks, /listskins, /quitfaction");
									//SendClientMessage(playerid, GREY, "/cuff, /stun, /frisk, /(d)epartments, /uncuff, /gov, /lspd, /door, /elevator, /breakin, /gate");
									//SendClientMessage(playerid, GREY, "/(r)adio, /confiscate, /freezebank, /unfreezebank, /listmygroup, /fingerprint, /gate, /ss, /quitgroup");
									//SendClientMessage(playerid, GREY, "/listranks, /listskins");
								}
								case 5:
								{
									SendClientMessage(playerid, GREY, "/(g)roup, /(r)adio, /news, /weather, /rm, /listmyfaction, /quitfaction, /listranks, /listskins");
									SendClientMessage(playerid, GREY, "/samlocker, /elevator, /grantinterviewpowers, /showpressid");
								}
								case 7:
								{
									SendClientMessage(playerid, GREY, "/door, /movechipexchange, /placeslots, /removeslots, /buychips, /sellchips");
									SendClientMessage(playerid, GREY, "/countchips, /lockchipexchange");
								}
								case 11:
								{
									SendClientMessage(playerid, GREY, "/route, /(r)adio, /travelannouncement, /gate, /quitfaction, /listranks, /listskins");
								}
							}

							if(Player[playerid][GroupRank] >= 5)
							{
								SendClientMessage(playerid, GREY, "/invite, /uninvite, /motd, /safelocation, /changeranks, /factionsafewithdraw, /factionsafedeposit, /factionsafebalance, /changerank");

								if(Groups[Player[playerid][Group]][CommandTypes] == 0)
								{
									SendClientMessage(playerid, GREY, "/togglefactionchat");
								}
							}

							if(Player[playerid][GroupRank] >= 6)
							{
								SendClientMessage(playerid, GREY, "/disbandfaction, /remotewiretransfer, /remoteuninvite");
							}
						}
						else
						{
							SendClientMessage(playerid, GREY, "/accept factioninvite");
						}
					}
					case 9:
					{
						SendClientMessage(playerid, WHITE, "You have selected Gangs. We have an array of useful commands for Gangs, so review the following:");
						if(Player[playerid][Gang] > 0)
						{
							SendClientMessage(playerid, GREY, "/quitgang, /(g)ang, /gangsafebalance, /gangsafedeposit, /gradio, /gangcallcar, /listmygang");
							SendClientMessage(playerid, GREY, "/ginvite, /guninvite, /togglegangchat, /lockganghq, /gangsafelocation, /gangsafewithdraw, /gchangerank, /gangcontrolpanel (/gcp)");
							SendClientMessage(playerid, GREY, "/createid, /createreg");
						}
						else SendClientMessage(playerid, GREY, "/ganginvite");
					}
					case 10:
					{
						SendClientMessage(playerid, WHITE, "You have selected Phone. The phone is an easy to use in-game device, here are the commands to use it:");
						SendClientMessage(playerid, GREY, "/call, /phone, /hangup, /togphone, /plow, /togspeaker, /sms, /choosephone, /pshout, /usephone");
					}
					case 11:
					{
						SendClientMessage(playerid, WHITE, "You have selected Walkie Talkie. The Walkie Talkie is an easy to use in-game device, here are the commands to use it:");
						SendClientMessage(playerid, GREY, "/wt, /setfrequency, /lowwt, /toggles");
					}
					case 12:
					{
						if(Player[playerid][VipRank] >= 1)
						{
							SendClientMessage(playerid, WHITE, "You have selected VIP. The VIP commands are only for you VIPs (donators, etc)");
							SendClientMessage(playerid, GREY, "/(v)ip, /toggles, /locker, /tokens");
							SendClientMessage(playerid, GREY, "VIP vehicles can be found in the VIP locker.");

						}
						else
						{
							SendClientMessage(playerid, WHITE, "You're not a VIP. Become one via www.crearoleplay.com");
						}
					}
					case 13:
					{
						SendClientMessage(playerid, WHITE, "You have selected Player Party! Player parties are a great feature which allows you to create a party with a group of friends!");
						SendClientMessage(playerid, WHITE, "While in this party you will be able to perform certain things such as mat runs together!");
						SendClientMessage(playerid, WHITE, "Commands: /partycreate, /partytype, /partyinvite, /partyjoin, /partyleave, /partykick, /partydisband, /partylist");
					}
					case 14:
					{
						SendClientMessage(playerid, WHITE, "You have selected Casino. The Casino is a good place to earn extra cash and make a fortune, here are the commands to use it:");
						SendClientMessage(playerid, GREY, "/useslots, /chipexchange");
					}
					case 15:
					{
						SendClientMessage(playerid, WHITE, "You have selected crea loyalty program! The loyalty program provides rewards for our most loyal players!");
						SendClientMessage(playerid, WHITE, "For more information, visit \'www.crearoleplay.com\'");
						SendClientMessage(playerid, WHITE, "Commands: /loyaltyinfo, /loyaltyshop");
					}
				}

				SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
			}
			case 8081:
			{
				// Healing Kit (FREE)\nBody Armour ($8,000)\nCombat Shotgun ($20,000)\nSilenced Pistol ($2,000)\nM4A1 ($17,000)
				switch(listitem)
				{
					case 0:
					{
						if(Player[playerid][VipTokens] < 40)
							return SendClientMessage(playerid, -1, "Golf Clubs cost 40 VIP tokens.");

						Player[playerid][VipTokens] -= 40;
						GivePlayerWeaponEx(playerid, 2);
						SendClientMessage(playerid, YELLOW, "Enjoy your new Golf Club!");
					}
					case 1:
					{
						if(Player[playerid][VipRank] < 3)
							return SendClientMessage(playerid, -1, "This is a Gold VIP perk.");

						if(Player[playerid][VipTokens] < 80)
							return SendClientMessage(playerid, -1, "This costs 80 VIP tokens.");

						new string[255];
						for(new i; i < MAX_JOBS; i++)
						{
							if(Jobs[i][JobType] != JOB_MECHANIC && Jobs[i][JobType] != JOB_CARJACKER && Jobs[i][JobType] != 0 && Jobs[i][JobType] != JOB_TRUCKER && Jobs[i][JobType] != JOB_GARBAGEMAN && Jobs[i][JobType] != JOB_DETECTIVE && Jobs[i][JobType] != JOB_LAWYER)
								format(string, sizeof(string), "%s%s\n", string, Jobs[i][JobName]);
						}
						ShowPlayerDialog(playerid, VIP_SKILLS, DIALOG_STYLE_LIST, "Skills", string, "Select", "Back");
					}
					case 2:
					{
						if(VipRaffleInfo[0][rActive] == 0)
							return SendClientMessage(playerid, -1, "The raffle is currently not active.");

						new entries = GetVIPRaffleEntriesCount(playerid),
							str[128];


						if(Player[playerid][VipRank] == 1)
						{
							if(entries > 0)
								return SendClientMessage(playerid, -1, "You're at the max entries for the raffle.");

							format(str, sizeof(str), "You can buy 1 ticket\nThe price is %d tokens\nDo you want to purchase one?", VipRaffleInfo[0][rEntryFee]);
							ShowPlayerDialog(playerid, DIALOG_VIPTICKET_BUY, DIALOG_STYLE_MSGBOX, "VIP Raffle Buy Ticket", str, "Buy", "Close");
						}
						else
						{
							if(entries >= Player[playerid][VipRank]) // if vip level doesnt match up like bronze 1, silver 2, gold 3, gold+ 4 properly.. well this wont work properly.
								return SendClientMessage(playerid, -1, "You're at the max entries for the raffle.");

							format(str, sizeof(str), "You can buy %d tickets\nThe price is %d tokens per ticket\nHow many do you want?", Player[playerid][VipRank] - GetVIPRaffleEntriesCount(playerid), VipRaffleInfo[0][rEntryFee]);
							ShowPlayerDialog(playerid, DIALOG_VIPTICKET_BUY, DIALOG_STYLE_INPUT, "VIP Raffle Buy Tickets", str, "Buy", "Close");
						}

					}
					case 3:
					{
						if(Player[playerid][VipRank] < 1)
							return 1;

						if(Player[playerid][PhoneN] == -1)
							return SendClientMessage(playerid, GREY, "Error, you need a phone to do this. (/choosephone if you have a phone)");

						new string[255];
						format(string, sizeof(string), "Enter the custom number you want below to replace your current number %d on your %s.\nIt must be from 5 - 9 numbers in length.\n\n-------------\n\nCustom numbers cost 150 VIP tokens.", Player[playerid][PhoneN], GetPhoneInfo(Player[playerid][PhoneN], "label"));

						ShowPlayerDialog(playerid, DIALOG_VIPCUSTOMNUM, DIALOG_STYLE_INPUT, "VIP Custom Numbers", string, "Buy", "Close");
					}
					case 4: 
					{
						new string[400];
						format(string, 400, "Faggio ($5,500)\nQuad ($10,000)\nSanchez ($12,500)\nOceanic ($40,000)\nCamper ($40,000)\nCabbie ($60,000)\nUranus ($70,000)\nElegy ($85,000)\nJester ($85,000)\nYankee ($100,000)\nNRG-500 ($100,000)\nZR-350 ($100,000)\nSparrow ($115,000)\nCheetah ($200,000)\nTurismo ($250,000)\nInfernus ($400,000)\nBullet ($400,000)");
						ShowPlayerDialog(playerid, 9800, DIALOG_STYLE_LIST, "VIP Vehicles", string, "Buy", "Cancel");
					}
				}
			}
			case VIP_LICENSE:
			{
				if(!response)
					return 1;

				if(isnull(inputtext))
				{
					new string[128], price;
					switch(Player[playerid][VipRank])
					{
						case 0: return SendClientMessage(playerid, -1, "This is for VIP only.");
						// case 1: price = 10;
						// case 2: price = 8;
						default: price = 30;
					}
					format(string, sizeof(string), "{FFFFFF}Enter the custom license plate you would like below.\nIt will cost you {E0C91B}%d{FFFFFF} VIP tokens.", price);
					return ShowPlayerDialog(playerid, VIP_LICENSE, DIALOG_STYLE_INPUT, "Custom License Plate", string, "Done", "Cancel");
				}

				if(strlen(inputtext) > 12)
				{
					SendClientMessage(playerid, -1, "License plate has too many characters.");
					new string[128], price;
					switch(Player[playerid][VipRank])
					{
						case 0: return SendClientMessage(playerid, -1, "This is for VIP only.");
						// case 1: price = 10;
						// case 2: price = 8;
						default: price = 30;
					}
					format(string, sizeof(string), "{FFFFFF}Enter the custom license plate you would like below.\nIt will cost you {E0C91B}%d{FFFFFF} VIP tokens.", price);
					return ShowPlayerDialog(playerid, VIP_LICENSE, DIALOG_STYLE_INPUT, "Custom License Plate", string, "Done", "Cancel");
				}

				for(new i, j = strlen(inputtext); i < j; i++)
				{
					if(inputtext[i] == '{' || inputtext[i] == '}' || inputtext[i] == '\'') //'
					{
						SendClientMessage(playerid, -1, "That plate contains an illegal character.");
						new string[128], price;
						switch(Player[playerid][VipRank])
						{
							case 0: return SendClientMessage(playerid, -1, "This is for VIP only.");
							default: price = 30;
						}
						format(string, sizeof(string), "{FFFFFF}Enter the custom license plate you would like below.\nIt will cost you {E0C91B}%d{FFFFFF} VIP tokens.", price);
						return ShowPlayerDialog(playerid, VIP_LICENSE, DIALOG_STYLE_INPUT, "Custom License Plate", string, "Done", "Cancel");
					}
				}

				new query[128], Cache:result, count;
				format(query, sizeof(query), "SELECT * FROM vehicles WHERE plate = '%s'", inputtext);
				result = mysql_query(MYSQL_MAIN, query);
				count = cache_get_row_count();
				cache_delete(result);

				if(count > 0)
				{
					SendClientMessage(playerid, -1, "That license plate already exists, choose another one.");
					new string[128], price = 30;
					switch(Player[playerid][VipRank])
					{
						case 0: return SendClientMessage(playerid, -1, "This is for VIP only.");
						default: price = 30;
					}
					format(string, sizeof(string), "{FFFFFF}Enter the custom license plate you would like below.\nIt will cost you {E0C91B}%d{FFFFFF} VIP tokens.", price);
					return ShowPlayerDialog(playerid, VIP_LICENSE, DIALOG_STYLE_INPUT, "Custom License Plate", string, "Done", "Cancel");
				}

				new price = 30;
				switch(Player[playerid][VipRank])
				{
					case 0: return SendClientMessage(playerid, -1, "This is for VIP only.");
					default: price = 30;
				}

				if(Player[playerid][VipTokens] < price)
					return SendClientMessage(playerid, -1, "You don't have enough VIP tokens for this.");

				new res[128], idx;
				for(new i; i < 5; i++)
				{
					if(Player[playerid][Cars][i] > 0)
					{
						idx = GetVIndex(Player[playerid][Cars][i]);
						format(res, sizeof(res), "%s[ %s ] %s\n", res, vNames[Veh[idx][Model] - 400], Veh[idx][VName]);
					}
					else
					{
						format(res, sizeof(res), "%sEmpty\n", res);
					}
				}

				SetPVarString(playerid, "CustomLicensePlate", DB_Escape(inputtext));
				ShowPlayerDialog(playerid, VIP_LICENSE+1, DIALOG_STYLE_LIST, "Custom License Plate", res, "Select", "Cancel");
			}
			case VIP_LICENSE+1:
			{
				if(!response)
					return 1;

				if(!strcmp(inputtext, "Empty", true))
				{
					new res[128], idx;
					for(new i; i < 5; i++)
					{
						if(Player[playerid][Cars][i] > 0)
						{
							idx = GetVIndex(Player[playerid][Cars][i]);
							format(res, sizeof(res), "%s[ %s ] %s\n", res, vNames[Veh[idx][Model] - 400], Veh[idx][VName]);
						}
						else
						{
							format(res, sizeof(res), "%sEmpty\n", res);
						}
					}
					return ShowPlayerDialog(playerid, VIP_LICENSE+1, DIALOG_STYLE_LIST, "Custom License Plate", res, "Select", "Cancel");
				}

				new sql = Player[playerid][Cars][listitem], idx = GetVIndex(sql), res[128], price = 30;
				if(sql != 0)
				{
					switch(Player[playerid][VipRank])
					{
						case 0: return SendClientMessage(playerid, -1, "This is for VIP only.");
						default: price = 30;
					}
					GetPVarString(playerid, "CustomlicensePlate", Veh[idx][Plate], 32);
					format(res, sizeof(res), "You have set the plate of your %s to \"%s\".", vNames[Veh[idx][Model] - 400], Veh[idx][Plate]);
					SendClientMessage(playerid, -1, res);
					Player[playerid][VipTokens] -= price;
					DeletePVar(playerid, "CustomlicensePlate");
					DeletePVar(playerid, "BuyPlateVal");

					if(IsSQLVehicleSpawned(Player[playerid][Cars][listitem]))
					{
						new vehicleid = Veh[idx][Link], Float:x, Float:y, Float:z, Float:a;
						GetVehiclePos(vehicleid, x, y, z);
						GetVehicleZAngle(vehicleid, a);
						SetVehicleToRespawn(vehicleid);
						vehicleid = Veh[idx][Link];
						SetVehiclePos(vehicleid, x, y, z);
						SetVehicleZAngle(vehicleid, a);
					}
				}
				else
				{
					SendClientMessage(playerid, -1, "This is not a saved vehicle. Report this bug.");
				}
			}
			case 8082:
			{
				SendClientMessage(playerid, WHITE, "This option is not yet complete. ");
			}
			case 9800: //VIP Vehicle
			{
			    if(!response)
			        return 1;

				switch(listitem)
				{
					case 0: // Faggio
					{
						Player[playerid][CarBeingCarried] = 462;
						Player[playerid][CarPriceBeingCarried] = 5500;
					}
					case 1: // Quad
					{
						Player[playerid][CarBeingCarried] = 471;
						Player[playerid][CarPriceBeingCarried] = 10000;
					}
					case 2: // Sanchez
					{
						Player[playerid][CarBeingCarried] = 468;
						Player[playerid][CarPriceBeingCarried] = 12500;
					}
					case 3: // Oceanic
					{
						Player[playerid][CarBeingCarried] = 467;
						Player[playerid][CarPriceBeingCarried] = 40000;
					}
					case 4: // Camper
					{
						Player[playerid][CarBeingCarried] = 483;
						Player[playerid][CarPriceBeingCarried] = 40000;
					}
					case 5: // Cabbie
					{
						Player[playerid][CarBeingCarried] = 438;
						Player[playerid][CarPriceBeingCarried] = 60000;
					}
					case 6: // Uranus
					{
						Player[playerid][CarBeingCarried] = 558;
						Player[playerid][CarPriceBeingCarried] = 70000;
					}
					case 7: // Elegy
					{
						Player[playerid][CarBeingCarried] = 562;
						Player[playerid][CarPriceBeingCarried] = 85000;
					}
					case 8: // Jester
					{
						Player[playerid][CarBeingCarried] = 559;
						Player[playerid][CarPriceBeingCarried] = 85000;
					}
					case 9: // Yankee
					{
					    Player[playerid][CarBeingCarried] = 456;
						Player[playerid][CarPriceBeingCarried] = 100000;
					}
					case 10: // NRG
					{
						Player[playerid][CarBeingCarried] = 522;
						Player[playerid][CarPriceBeingCarried] = 100000;
					}
					case 11: // ZR
					{
						Player[playerid][CarBeingCarried] = 477;
						Player[playerid][CarPriceBeingCarried] = 100000;
					}
					case 12: // Sparrow
					{
						Player[playerid][CarBeingCarried] = 469;
						Player[playerid][CarPriceBeingCarried] = 115000;
					}
					case 13: // Cheetah
					{
						Player[playerid][CarBeingCarried] = 415;
						Player[playerid][CarPriceBeingCarried] = 200000;
					}
					case 14: // Turismo
					{
						Player[playerid][CarBeingCarried] = 451;
						Player[playerid][CarPriceBeingCarried] = 250000;
					}
					case 15: // Infernus
					{
						Player[playerid][CarBeingCarried] = 411;
						Player[playerid][CarPriceBeingCarried] = 400000;
					}
					case 16: // Bullet
					{
						Player[playerid][CarBeingCarried] = 541;
						Player[playerid][CarPriceBeingCarried] = 400000;
					}
				}
				/*
				new group = VipVehicleGroup - 1, group2 = VipVehicleGroup2 - 1;
				switch(listitem)
				{
					case 0:
					{
						Player[playerid][CarBeingCarried] = VipVehicles[group][0];
						Player[playerid][CarPriceBeingCarried] = VipVehiclesPrice[group][0];
					}
					case 1:
					{
						Player[playerid][CarBeingCarried] = VipVehicles[group][1];
						Player[playerid][CarPriceBeingCarried] = VipVehiclesPrice[group][1];
					}
					case 2:
					{
						Player[playerid][CarBeingCarried] = VipVehicles[group][2];
						Player[playerid][CarPriceBeingCarried] = VipVehiclesPrice[group][2];
					}
					case 3:
					{
						Player[playerid][CarBeingCarried] = VipVehicles[group][3];
						Player[playerid][CarPriceBeingCarried] = VipVehiclesPrice[group][3];
					}
					case 4:
					{
						Player[playerid][CarBeingCarried] = VipVehicles[group][4];
						Player[playerid][CarPriceBeingCarried] = VipVehiclesPrice[group][4];
					}
					case 5:
					{
						Player[playerid][CarBeingCarried] = VipVehicles[group][5];
						Player[playerid][CarPriceBeingCarried] = VipVehiclesPrice[group][5];
					}
					case 6:
					{
						Player[playerid][CarBeingCarried] = VipVehicles[group2][0];
						Player[playerid][CarPriceBeingCarried] = VipVehiclesPrice[group2][0];
					}
					case 7:
					{
						Player[playerid][CarBeingCarried] = VipVehicles[group2][1];
						Player[playerid][CarPriceBeingCarried] = VipVehiclesPrice[group2][1];
					}
					case 8:
					{
						Player[playerid][CarBeingCarried] = VipVehicles[group2][2];
						Player[playerid][CarPriceBeingCarried] = VipVehiclesPrice[group2][2];
					}
					case 9:
					{
						Player[playerid][CarBeingCarried] = VipVehicles[group2][3];
						Player[playerid][CarPriceBeingCarried] = VipVehiclesPrice[group2][3];
					}
					case 10:
					{
						Player[playerid][CarBeingCarried] = VipVehicles[group2][4];
						Player[playerid][CarPriceBeingCarried] = VipVehiclesPrice[group2][4];
					}
					case 11:
					{
						Player[playerid][CarBeingCarried] = VipVehicles[group2][5];
						Player[playerid][CarPriceBeingCarried] = VipVehiclesPrice[group2][5];
					}
				}
				*/
				PurchaseVipCar(playerid, Player[playerid][CarBeingCarried], Player[playerid][CarPriceBeingCarried]);
			}
			case 2365:
			{
				switch(listitem)
				{
					case 0:
					{
						if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice1])
						{
							if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
							{
//								Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice1];
								AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice1]);
								Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice1];
								Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
								GenerateTrash(Player[playerid][InBusiness], 1);
								TextDrawShowForPlayer(playerid, SprunkTextDraw);
								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
								SendClientMessage(playerid, WHITE, "Use your ATTACK key to drink, and your SECONDARY ATTACK key to drop the drink.");
							}
							else
							{
								SendClientMessage(playerid, WHITE, "That item is out of stock.");
							}
						}
					}
					case 1:
					{
						if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice2])
						{
							if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
							{
//								Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice2];
								AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice2]);
								Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice2];
								Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
								GenerateTrash(Player[playerid][InBusiness], 1);
								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
								SendClientMessage(playerid, WHITE, "Use your ATTACK key to drink, and your SECONDARY ATTACK key to drop the drink.");
							}
							else
							{
								SendClientMessage(playerid, WHITE, "That item is out of stock.");
							}
						}
					}
					case 2:
					{
						if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice3])
						{
//							Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice3];
							AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice3]);
							Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice3];
							// Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
							SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
							Player[playerid][HadSprunk] = 5;
					//		TextDrawShowForPlayer(playerid, SprunkTextDraw);
						}
					}
				}
			}
			/*case 9699:
			{
				if(IsPlayerInAnyVehicle(playerid))
					return SendClientMessage(playerid, -1, "You cannot do this while in a vehicle!");

				new oldlevel;
				switch(Player[playerid][ArmsDealerXP])
				{
					case 0 .. 249: oldlevel = 0;
					case 250 .. 1749: oldlevel = 1;
					case 1750 .. 3749: oldlevel = 2;
					case 3750 .. 6249: oldlevel = 3;
					case 6250 .. 11249: oldlevel = 4;
					case 11250 .. 16249: oldlevel = 5;
					case 16250 .. 23749: oldlevel = 6;
					case 23750 .. 31249: oldlevel = 7;
					case 31250 .. 43749: oldlevel = 8;
					case 43750 .. 57499: oldlevel = 9;
					default: oldlevel = 10;
				}

				switch(listitem)
				{
					case 0:
					{
						if(Player[playerid][Toolkit] < 1 && (Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1))
							return SendClientMessage(playerid, -1, "You need a toolkit or to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 5) //Katana
						{
							if(Player[playerid][InHouse] > 0 && Houses[Player[playerid][InHouse]][Workbench] > 0)
							{
								new WeaponID = 8, string[128], WeaponName[128];
								GivePlayerWeaponEx(playerid, WeaponID);
								Player[playerid][Materials] -= 5;
								Player[playerid][ArmsDealerXP] += 5;
								GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
								format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
								SendClientMessage(playerid, WHITE, string);
								format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
								NearByMessage(playerid, NICESKY, string);
								Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
								Player[playerid][CanMakeGun] = 0;
								Player[playerid][TotalGunsMade] ++;
							}
							else
							{
								switch(random(100))
								{
									case 0 .. 98:
									{
										new WeaponID = 8, string[128], WeaponName[128];
										GivePlayerWeaponEx(playerid, WeaponID);
										Player[playerid][Materials] -= 5;
										Player[playerid][ArmsDealerXP] += 5;
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
										SendClientMessage(playerid, WHITE, string);
										format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
										Player[playerid][CanMakeGun] = 0;
										Player[playerid][TotalGunsMade] ++;
									}
									default:
									{
										new string[128], WeaponID = 8, WeaponName[128];
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "* %s tried to create a %s, but broke their toolkit.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][Toolkit]--;
										Player[playerid][TotalToolkitsBroken] ++;
									}
								}
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}
					case 1:
					{
					    if(Player[playerid][Toolkit] < 1 && (Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1))
					        return SendClientMessage(playerid, -1, "You need a toolkit or to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 5) //Cane
						{
							if(Player[playerid][InHouse] > 0 && Houses[Player[playerid][InHouse]][Workbench] > 0)
							{
								new WeaponID = 15, string[128], WeaponName[128];
								GivePlayerWeaponEx(playerid, WeaponID);
								Player[playerid][Materials] -= 5;
								Player[playerid][ArmsDealerXP] += 5;
								GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
								format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
								SendClientMessage(playerid, WHITE, string);
								format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
								NearByMessage(playerid, NICESKY, string);
								Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
								Player[playerid][CanMakeGun] = 0;
								Player[playerid][TotalGunsMade] ++;
							}
							else
							{
								switch(random(100))
								{
									case 0 .. 98:
									{
										new WeaponID = 15, string[128], WeaponName[128];
										GivePlayerWeaponEx(playerid, WeaponID);
										Player[playerid][Materials] -= 5;
										Player[playerid][ArmsDealerXP] += 5;
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
										SendClientMessage(playerid, WHITE, string);
										format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
										Player[playerid][CanMakeGun] = 0;
										Player[playerid][TotalGunsMade] ++;
									}
									default:
									{
										new string[128], WeaponID = 15, WeaponName[128];
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "* %s tried to create a %s, but broke their toolkit.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][Toolkit]--;
										Player[playerid][TotalToolkitsBroken] ++;
									}
								}
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}
					case 2:
					{
					    if(Player[playerid][Toolkit] < 1 && (Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1))
					        return SendClientMessage(playerid, -1, "You need a toolkit or to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 7) //Cue
						{
							if(Player[playerid][InHouse] > 0 && Houses[Player[playerid][InHouse]][Workbench] > 0)
							{
								new WeaponID = 7, string[128], WeaponName[128];
								GivePlayerWeaponEx(playerid, WeaponID);
								Player[playerid][Materials] -= 7;
								Player[playerid][ArmsDealerXP] += 7;
								GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
								format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
								SendClientMessage(playerid, WHITE, string);
								format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
								NearByMessage(playerid, NICESKY, string);
								Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
								Player[playerid][CanMakeGun] = 0;
								Player[playerid][TotalGunsMade] ++;
							}
							else
							{
								switch(random(100))
								{
									case 0 .. 98:
									{
										new WeaponID = 7, string[128], WeaponName[128];
										GivePlayerWeaponEx(playerid, WeaponID);
										Player[playerid][Materials] -= 7;
										Player[playerid][ArmsDealerXP] += 7;
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
										SendClientMessage(playerid, WHITE, string);
										format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
										Player[playerid][CanMakeGun] = 0;
										Player[playerid][TotalGunsMade] ++;
									}
									default:
									{
										new string[128], WeaponID = 7, WeaponName[128];
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "* %s tried to create a %s, but broke their toolkit.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][Toolkit]--;
										Player[playerid][TotalToolkitsBroken] ++;
									}
								}
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}
					case 3:
					{
					    if(Player[playerid][Toolkit] < 1 && (Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1))
					        return SendClientMessage(playerid, -1, "You need a toolkit or to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 7) //Bat
						{
							if(Player[playerid][InHouse] > 0 && Houses[Player[playerid][InHouse]][Workbench] > 0)
							{
								new WeaponID = 5, string[128], WeaponName[128];
								GivePlayerWeaponEx(playerid, WeaponID);
								Player[playerid][Materials] -= 7;
								Player[playerid][ArmsDealerXP] += 7;
								GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
								format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
								SendClientMessage(playerid, WHITE, string);
								format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
								NearByMessage(playerid, NICESKY, string);
								Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
								Player[playerid][CanMakeGun] = 0;
								Player[playerid][TotalGunsMade] ++;
							}
							else
							{
								switch(random(100))
								{
									case 0 .. 98:
									{
										new WeaponID = 5, string[128], WeaponName[128];
										GivePlayerWeaponEx(playerid, WeaponID);
										Player[playerid][Materials] -= 7;
										Player[playerid][ArmsDealerXP] += 7;
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
										SendClientMessage(playerid, WHITE, string);
										format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
										Player[playerid][CanMakeGun] = 0;
										Player[playerid][TotalGunsMade] ++;
									}
									default:
									{
										new string[128], WeaponID = 5, WeaponName[128];
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "* %s tried to create a %s, but broke their toolkit.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][Toolkit]--;
										Player[playerid][TotalToolkitsBroken] ++;
									}
								}
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}
					case 4:
					{
					    if(Player[playerid][Toolkit] < 1 && (Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1))
					        return SendClientMessage(playerid, -1, "You need a toolkit or to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 7) //Shovel
						{
							if(Player[playerid][InHouse] > 0 && Houses[Player[playerid][InHouse]][Workbench] > 0)
							{
								new WeaponID = 6, string[128], WeaponName[128];
								GivePlayerWeaponEx(playerid, WeaponID);
								Player[playerid][Materials] -= 7;
								Player[playerid][ArmsDealerXP] += 7;
								GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
								format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
								SendClientMessage(playerid, WHITE, string);
								format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
								NearByMessage(playerid, NICESKY, string);
								Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
								Player[playerid][CanMakeGun] = 0;
								Player[playerid][TotalGunsMade] ++;
							}
							else
							{
								switch(random(100))
								{
									case 0 .. 98:
									{
										new WeaponID = 6, string[128], WeaponName[128];
										GivePlayerWeaponEx(playerid, WeaponID);
										Player[playerid][Materials] -= 7;
										Player[playerid][ArmsDealerXP] += 7;
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
										SendClientMessage(playerid, WHITE, string);
										format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
										Player[playerid][CanMakeGun] = 0;
										Player[playerid][TotalGunsMade] ++;
									}
									default:
									{
										new string[128], WeaponID = 6, WeaponName[128];
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "* %s tried to create a %s, but broke their toolkit.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][Toolkit]--;
										Player[playerid][TotalToolkitsBroken] ++;
									}
								}
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}
					case 5:
					{
					    if(Player[playerid][Toolkit] < 1 && (Houses[Player[playerid][InHouse]][Workbench] < 1 || Player[playerid][InHouse] == 0))
					        return SendClientMessage(playerid, -1, "You need a toolkit or to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 5) //Brass Knuckles
						{
							if(Player[playerid][InHouse] > 0 && Houses[Player[playerid][InHouse]][Workbench] > 0)
							{
								new WeaponID = 1, string[128], WeaponName[128];
								GivePlayerWeaponEx(playerid, WeaponID);
								Player[playerid][Materials] -= 5;
								Player[playerid][ArmsDealerXP] += 5;
								GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
								format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
								SendClientMessage(playerid, WHITE, string);
								format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
								NearByMessage(playerid, NICESKY, string);
								Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
								Player[playerid][CanMakeGun] = 0;
								Player[playerid][TotalGunsMade] ++;
							}
							else
							{
								switch(random(100))
								{
									case 0 .. 98:
									{
										new WeaponID = 1, string[128], WeaponName[128];
										GivePlayerWeaponEx(playerid, WeaponID);
										Player[playerid][Materials] -= 5;
										Player[playerid][ArmsDealerXP] += 5;
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
										SendClientMessage(playerid, WHITE, string);
										format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
										Player[playerid][CanMakeGun] = 0;
										Player[playerid][TotalGunsMade] ++;
									}
									default:
									{
										new string[128], WeaponID = 1, WeaponName[128];
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "* %s tried to create a %s, but broke their toolkit.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][Toolkit]--;
										Player[playerid][TotalToolkitsBroken] ++;
									}
								}
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}

					case 6:
					{
					    if(Player[playerid][Toolkit] < 1 && (Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1))
					        return SendClientMessage(playerid, -1, "You need a toolkit or to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 30) //9mm Pistol
						{
							if(Player[playerid][InHouse] > 0 && Houses[Player[playerid][InHouse]][Workbench] > 0)
							{
								new WeaponID = 22, string[128], WeaponName[128];
								GivePlayerWeaponEx(playerid, WeaponID);
								Player[playerid][Materials] -= 30;
								Player[playerid][ArmsDealerXP] += 30;
								GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
								format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
								SendClientMessage(playerid, WHITE, string);
								format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
								NearByMessage(playerid, NICESKY, string);
								Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
								Player[playerid][CanMakeGun] = 0;
								Player[playerid][TotalGunsMade] ++;
							}
							else
							{
								switch(random(100))
								{
									case 0 .. 98:
									{
										new WeaponID = 22, string[128], WeaponName[128];
										GivePlayerWeaponEx(playerid, WeaponID);
										Player[playerid][Materials] -= 30;
										Player[playerid][ArmsDealerXP] += 30;
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
										SendClientMessage(playerid, WHITE, string);
										format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
										Player[playerid][CanMakeGun] = 0;
										Player[playerid][TotalGunsMade] ++;
									}
									default:
									{
										new string[128], WeaponID = 22, WeaponName[128];
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "* %s tried to create a %s, but broke their toolkit.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][Toolkit]--;
										Player[playerid][TotalToolkitsBroken] ++;
									}
								}
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}

					case 7:
					{
					    if(Player[playerid][Toolkit] < 1 && (Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1))
					        return SendClientMessage(playerid, -1, "You need a toolkit or to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 40)//Silenced Pistol
						{
							if(Player[playerid][InHouse] > 0 && Houses[Player[playerid][InHouse]][Workbench] > 0)
							{
								new WeaponID = 23, string[128], WeaponName[128];
								GivePlayerWeaponEx(playerid, WeaponID);
								Player[playerid][Materials] -= 40;
								Player[playerid][ArmsDealerXP] += 40;
								GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
								format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
								SendClientMessage(playerid, WHITE, string);
								format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
								NearByMessage(playerid, NICESKY, string);
								Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
								Player[playerid][CanMakeGun] = 0;
								Player[playerid][TotalGunsMade] ++;
							}
							else
							{
								switch(random(100))
								{
									case 0 .. 98:
									{
										new WeaponID = 23, string[128], WeaponName[128];
										GivePlayerWeaponEx(playerid, WeaponID);
										Player[playerid][Materials] -= 40;
										Player[playerid][ArmsDealerXP] += 40;
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
										SendClientMessage(playerid, WHITE, string);
										format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
										Player[playerid][CanMakeGun] = 0;
										Player[playerid][TotalGunsMade] ++;
									}
									default:
									{
										new string[128], WeaponID = 23, WeaponName[128];
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "* %s tried to create a %s, but broke their toolkit.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][Toolkit]--;
										Player[playerid][TotalToolkitsBroken] ++;
									}
								}
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}

					case 8:
					{
					    if(Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1)
					        return SendClientMessage(playerid, -1, "You need to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 50) //Pump-Action Shotgun
						{
							new WeaponID = 25, string[128], WeaponName[128];
							GivePlayerWeaponEx(playerid, WeaponID);
							Player[playerid][Materials] -= 50;
							Player[playerid][ArmsDealerXP] += 50;
							GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
							format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
							SendClientMessage(playerid, WHITE, string);
							format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
							NearByMessage(playerid, NICESKY, string);
							Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
							Player[playerid][CanMakeGun] = 0;
							Player[playerid][TotalGunsMade] ++;
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}

					case 9:
					{
					    if(Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1)
					        return SendClientMessage(playerid, -1, "You need to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 60) //Country Rifle
						{
							new WeaponID = 33, string[128], WeaponName[128];
							GivePlayerWeaponEx(playerid, WeaponID);
							Player[playerid][Materials] -= 60;
							Player[playerid][ArmsDealerXP] += 60;
							GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
							format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
							SendClientMessage(playerid, WHITE, string);
							format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
							NearByMessage(playerid, NICESKY, string);
							Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
							Player[playerid][CanMakeGun] = 0;
							Player[playerid][TotalGunsMade] ++;
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}

					case 10:
					{
					    if(Player[playerid][Toolkit] < 1 && (Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1))
					        return SendClientMessage(playerid, -1, "You need a toolkit or to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 100) //Desert Eagle
						{
							if(Player[playerid][InHouse] > 0 && Houses[Player[playerid][InHouse]][Workbench] > 0)
							{
								new WeaponID = 24, string[128], WeaponName[128];
								GivePlayerWeaponEx(playerid, WeaponID);
								Player[playerid][Materials] -= 100;
								Player[playerid][ArmsDealerXP] += 100;
								GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
								format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
								SendClientMessage(playerid, WHITE, string);
								format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
								NearByMessage(playerid, NICESKY, string);
								Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
								Player[playerid][CanMakeGun] = 0;
								Player[playerid][TotalGunsMade] ++;
							}
							else
							{
								switch(random(100))
								{
									case 0 .. 98:
									{
										new WeaponID = 24, string[128], WeaponName[128];
										GivePlayerWeaponEx(playerid, WeaponID);
										Player[playerid][Materials] -= 100;
										Player[playerid][ArmsDealerXP] += 100;
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
										SendClientMessage(playerid, WHITE, string);
										format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
										Player[playerid][CanMakeGun] = 0;
									}
									default:
									{
										new string[128], WeaponID = 24, WeaponName[128];
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "* %s tried to create a %s, but broke their toolkit.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][Toolkit]--;
										Player[playerid][TotalToolkitsBroken] ++;
									}
								}
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}

					case 11:
					{
					    if(Player[playerid][Toolkit] < 1 && (Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1))
					        return SendClientMessage(playerid, -1, "You need a toolkit or to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 85) //Tec-9
						{
							if(Player[playerid][InHouse] > 0 && Houses[Player[playerid][InHouse]][Workbench] > 0)
							{
								new WeaponID = 32, string[128], WeaponName[128];
								GivePlayerWeaponEx(playerid, WeaponID);
								Player[playerid][Materials] -= 85;
								Player[playerid][ArmsDealerXP] += 85;
								GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
								format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
								SendClientMessage(playerid, WHITE, string);
								format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
								NearByMessage(playerid, NICESKY, string);
								Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
								Player[playerid][CanMakeGun] = 0;
								Player[playerid][TotalGunsMade] ++;
							}
							else
							{
								switch(random(100))
								{
									case 0 .. 98:
									{
										new WeaponID = 32, string[128], WeaponName[128];
										GivePlayerWeaponEx(playerid, WeaponID);
										Player[playerid][Materials] -= 85;
										Player[playerid][ArmsDealerXP] += 85;
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
										SendClientMessage(playerid, WHITE, string);
										format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
										Player[playerid][CanMakeGun] = 0;
										Player[playerid][TotalGunsMade] ++;
									}
									default:
									{
										new string[128], WeaponID = 32, WeaponName[128];
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "* %s tried to create a %s, but broke their toolkit.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][Toolkit]--;
										Player[playerid][TotalToolkitsBroken] ++;
									}
								}
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}

					case 12:
					{
					    if(Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1)
					        return SendClientMessage(playerid, -1, "You need to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 100) //MP5
						{
							new WeaponID = 29, string[128], WeaponName[128];
							GivePlayerWeaponEx(playerid, WeaponID);
							Player[playerid][Materials] -= 100;
							Player[playerid][ArmsDealerXP] += 100;
							GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
							format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
							SendClientMessage(playerid, WHITE, string);
							format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
							NearByMessage(playerid, NICESKY, string);
							Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
							Player[playerid][CanMakeGun] = 0;
							Player[playerid][TotalGunsMade] ++;
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}

					case 13:
					{
					    if(Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1)
					        return SendClientMessage(playerid, -1, "You need to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 95) //Uzi
						{
							new WeaponID = 28, string[128], WeaponName[128];
							GivePlayerWeaponEx(playerid, WeaponID);
							Player[playerid][Materials] -= 95;
							Player[playerid][ArmsDealerXP] += 95;
							GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
							format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
							SendClientMessage(playerid, WHITE, string);
							format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
							NearByMessage(playerid, NICESKY, string);
							Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
							Player[playerid][CanMakeGun] = 0;
							Player[playerid][TotalGunsMade] ++;
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}

					case 14:
					{
					    if(Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1)
					        return SendClientMessage(playerid, -1, "You need to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 150) //AK47
						{
							new WeaponID = 30, string[128], WeaponName[128];
							GivePlayerWeaponEx(playerid, WeaponID);
							Player[playerid][Materials] -= 150;
							Player[playerid][ArmsDealerXP] += 150;
							GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
							format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
							SendClientMessage(playerid, WHITE, string);
							format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
							NearByMessage(playerid, NICESKY, string);
							Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
							Player[playerid][CanMakeGun] = 0;
							Player[playerid][TotalGunsMade] ++;
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}
					case 15:
					{
					    if(Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1)
					        return SendClientMessage(playerid, -1, "You need to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 150) //Sawn-Off Shotgun
						{
							new WeaponID = 26, string[128], WeaponName[128];
							GivePlayerWeaponEx(playerid, WeaponID);
							Player[playerid][Materials] -= 150;
							Player[playerid][ArmsDealerXP] += 150;
							GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
							format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
							SendClientMessage(playerid, WHITE, string);
							format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
							NearByMessage(playerid, NICESKY, string);
							Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
							Player[playerid][CanMakeGun] = 0;
							Player[playerid][TotalGunsMade] ++;
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}
					case 16:
					{
					    if(Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1)
					        return SendClientMessage(playerid, -1, "You need to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 250) //M4
						{
							new WeaponID = 31, string[128], WeaponName[128];
							GivePlayerWeaponEx(playerid, WeaponID);
							Player[playerid][Materials] -= 250;
							Player[playerid][ArmsDealerXP] += 250;
							GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
							format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
							SendClientMessage(playerid, WHITE, string);
							format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
							NearByMessage(playerid, NICESKY, string);
							Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
							Player[playerid][CanMakeGun] = 0;
							Player[playerid][TotalGunsMade] ++;
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}
					case 17:
					{
					    if(Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1)
					        return SendClientMessage(playerid, -1, "You need to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 275) //Sniper
						{
							new WeaponID = 34, string[128], WeaponName[128];
							GivePlayerWeaponEx(playerid, WeaponID);
							Player[playerid][Materials] -= 275;
							Player[playerid][ArmsDealerXP] += 275;
							GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
							format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
							SendClientMessage(playerid, WHITE, string);
							format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
							NearByMessage(playerid, NICESKY, string);
							Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
							Player[playerid][CanMakeGun] = 0;
							Player[playerid][TotalGunsMade] ++;
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}
					case 18:
					{
					    if(Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1)
					        return SendClientMessage(playerid, -1, "You need to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 300) //Combat Shotgun
						{
							new WeaponID = 27, string[128], WeaponName[128];
							GivePlayerWeaponEx(playerid, WeaponID);
							Player[playerid][Materials] -= 300;
							Player[playerid][ArmsDealerXP] += 300;
							GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
							format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
							SendClientMessage(playerid, WHITE, string);
							format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
							NearByMessage(playerid, NICESKY, string);
							Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
							Player[playerid][CanMakeGun] = 0;
							Player[playerid][TotalGunsMade] ++;
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}
					case 19:
					{
						if(Player[playerid][Materials] >= 150)
							SendClientMessage(playerid, WHITE, "Use /givearmour instead!");
						else
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
					}
				}
				new newlevel;
				switch(Player[playerid][ArmsDealerXP])
				{
					case 0 .. 249: newlevel = 0;
					case 250 .. 1749: newlevel = 1;
					case 1750 .. 3749: newlevel = 2;
					case 3750 .. 6249: newlevel = 3;
					case 6250 .. 11249: newlevel = 4;
					case 11250 .. 16249: newlevel = 5;
					case 16250 .. 23749: newlevel = 6;
					case 23750 .. 31249: newlevel = 7;
					case 31250 .. 43749: newlevel = 8;
					case 43750 .. 57499: newlevel = 9;
					default: newlevel = 10;
				}

				if(newlevel > oldlevel)
				{
					new string[128];
					format(string, sizeof(string), "You have leveled up in Arms Dealer! You are now level %d.", newlevel);
					SendClientMessage(playerid, YELLOW, "======================================================================================");
					SendClientMessage(playerid, YELLOW, string);
					SendClientMessage(playerid, YELLOW, "======================================================================================");
					JobLog(playerid, "Arms dealer", newlevel, oldlevel);
				}
			}
			case 969:
			{
				if(IsPlayerInAnyVehicle(playerid))
					return SendClientMessage(playerid, -1, "You cannot do this while in a vehicle!");

				new oldlevel;
				switch(Player[playerid][ArmsDealerXP])
				{
					case 0 .. 249: oldlevel = 0;
					case 250 .. 1749: oldlevel = 1;
					case 1750 .. 3749: oldlevel = 2;
					case 3750 .. 6249: oldlevel = 3;
					case 6250 .. 11249: oldlevel = 4;
					case 11250 .. 16249: oldlevel = 5;
					case 16250 .. 23749: oldlevel = 6;
					case 23750 .. 31249: oldlevel = 7;
					case 31250 .. 43749: oldlevel = 8;
					case 43750 .. 57499: oldlevel = 9;
					default: oldlevel = 10;
				}

				switch(listitem)
				{
					case 0:
					{
					    if(Player[playerid][Toolkit] < 1 && (Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1))
					        return SendClientMessage(playerid, -1, "You need a toolkit or to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 5) // Katana
						{
							if(Player[playerid][InHouse] > 0 && Houses[Player[playerid][InHouse]][Workbench] > 0)
							{
								new WeaponID = 8, string[128], WeaponName[128];
								GivePlayerWeaponEx(playerid, WeaponID);
								Player[playerid][Materials] -= 5;
								Player[playerid][ArmsDealerXP] += 5;
								GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
								format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
								SendClientMessage(playerid, WHITE, string);
								format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
								NearByMessage(playerid, NICESKY, string);
								Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
								Player[playerid][CanMakeGun] = 0;
								Player[playerid][TotalGunsMade] ++;
							}
							else
							{
								switch(random(100))
								{
									case 0 .. 98:
									{
										new WeaponID = 8, string[128], WeaponName[128];
										GivePlayerWeaponEx(playerid, WeaponID);
										Player[playerid][Materials] -= 5;
										Player[playerid][ArmsDealerXP] += 5;
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
										SendClientMessage(playerid, WHITE, string);
										format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
										Player[playerid][CanMakeGun] = 0;
										Player[playerid][TotalGunsMade] ++;
									}
									default:
									{
										new string[128], WeaponID = 8, WeaponName[128];
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "* %s tried to create a %s, but broke their toolkit.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][Toolkit]--;
										Player[playerid][TotalToolkitsBroken] ++;
									}
								}
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}

					case 1:
					{
					    if(Player[playerid][Toolkit] < 1 && (Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1))
					        return SendClientMessage(playerid, -1, "You need a toolkit or to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 5) // Cane
						{
							if(Player[playerid][InHouse] > 0 && Houses[Player[playerid][InHouse]][Workbench] > 0)
							{
								new WeaponID = 15, string[128], WeaponName[128];
								GivePlayerWeaponEx(playerid, WeaponID);
								Player[playerid][Materials] -= 5;
								Player[playerid][ArmsDealerXP] += 5;
								GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
								format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
								SendClientMessage(playerid, WHITE, string);
								format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
								NearByMessage(playerid, NICESKY, string);
								Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
								Player[playerid][CanMakeGun] = 0;
								Player[playerid][TotalGunsMade] ++;
							}
							else
							{
								switch(random(100))
								{
									case 0 .. 98:
									{
										new WeaponID = 15, string[128], WeaponName[128];
										GivePlayerWeaponEx(playerid, WeaponID);
										Player[playerid][Materials] -= 5;
										Player[playerid][ArmsDealerXP] += 5;
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
										SendClientMessage(playerid, WHITE, string);
										format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
										Player[playerid][CanMakeGun] = 0;
										Player[playerid][TotalGunsMade] ++;
									}
									default:
									{
										new string[128], WeaponID = 15, WeaponName[128];
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "* %s tried to create a %s, but broke their toolkit.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][Toolkit]--;
										Player[playerid][TotalToolkitsBroken] ++;
									}
								}
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}

					case 2:
					{
					    if(Player[playerid][Toolkit] < 1 && (Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1))
					        return SendClientMessage(playerid, -1, "You need a toolkit or to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 7) // Cue
						{
							if(Player[playerid][InHouse] > 0 && Houses[Player[playerid][InHouse]][Workbench] > 0)
							{
								new WeaponID = 7, string[128], WeaponName[128];
								GivePlayerWeaponEx(playerid, WeaponID);
								Player[playerid][Materials] -= 7;
								Player[playerid][ArmsDealerXP] += 7;
								GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
								format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
								SendClientMessage(playerid, WHITE, string);
								format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
								NearByMessage(playerid, NICESKY, string);
								Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
								Player[playerid][CanMakeGun] = 0;
								Player[playerid][TotalGunsMade] ++;
							}
							else
							{
								switch(random(100))
								{
									case 0 .. 98:
									{
										new WeaponID = 7, string[128], WeaponName[128];
										GivePlayerWeaponEx(playerid, WeaponID);
										Player[playerid][Materials] -= 7;
										Player[playerid][ArmsDealerXP] += 7;
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
										SendClientMessage(playerid, WHITE, string);
										format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
										Player[playerid][CanMakeGun] = 0;
										Player[playerid][TotalGunsMade] ++;
									}
									default:
									{
										new string[128], WeaponID = 7, WeaponName[128];
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "* %s tried to create a %s, but broke their toolkit.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][Toolkit]--;
										Player[playerid][TotalToolkitsBroken] ++;
									}
								}
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}

					case 3:
					{
					    if(Player[playerid][Toolkit] < 1 && (Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1))
					        return SendClientMessage(playerid, -1, "You need a toolkit or to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 7) // Bat
						{
							if(Player[playerid][InHouse] > 0 && Houses[Player[playerid][InHouse]][Workbench] > 0)
							{
								new WeaponID = 5, string[128], WeaponName[128];
								GivePlayerWeaponEx(playerid, WeaponID);
								Player[playerid][Materials] -= 7;
								Player[playerid][ArmsDealerXP] += 7;
								GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
								format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
								SendClientMessage(playerid, WHITE, string);
								format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
								NearByMessage(playerid, NICESKY, string);
								Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
								Player[playerid][CanMakeGun] = 0;
								Player[playerid][TotalGunsMade] ++;
							}
							else
							{
								switch(random(100))
								{
									case 0 .. 98:
									{
										new WeaponID = 5, string[128], WeaponName[128];
										GivePlayerWeaponEx(playerid, WeaponID);
										Player[playerid][Materials] -= 7;
										Player[playerid][ArmsDealerXP] += 7;
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
										SendClientMessage(playerid, WHITE, string);
										format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
										Player[playerid][CanMakeGun] = 0;
										Player[playerid][TotalGunsMade] ++;
									}
									default:
									{
										new string[128], WeaponID = 5, WeaponName[128];
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "* %s tried to create a %s, but broke their toolkit.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][Toolkit]--;
										Player[playerid][TotalToolkitsBroken] ++;
									}
								}
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}

					case 4:
					{
					    if(Player[playerid][Toolkit] < 1 && (Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1))
					        return SendClientMessage(playerid, -1, "You need a toolkit or to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 7) // Shovel
						{
							if(Player[playerid][InHouse] > 0 && Houses[Player[playerid][InHouse]][Workbench] > 0)
							{
								new WeaponID = 6, string[128], WeaponName[128];
								GivePlayerWeaponEx(playerid, WeaponID);
								Player[playerid][Materials] -= 7;
								Player[playerid][ArmsDealerXP] += 7;
								GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
								format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
								SendClientMessage(playerid, WHITE, string);
								format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
								NearByMessage(playerid, NICESKY, string);
								Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
								Player[playerid][CanMakeGun] = 0;
								Player[playerid][TotalGunsMade] ++;
							}
							else
							{
								switch(random(100))
								{
									case 0 .. 98:
									{
										new WeaponID = 6, string[128], WeaponName[128];
										GivePlayerWeaponEx(playerid, WeaponID);
										Player[playerid][Materials] -= 7;
										Player[playerid][ArmsDealerXP] += 7;
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
										SendClientMessage(playerid, WHITE, string);
										format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
										Player[playerid][CanMakeGun] = 0;
										Player[playerid][TotalGunsMade] ++;
									}
									default:
									{
										new string[128], WeaponID = 6, WeaponName[128];
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "* %s tried to create a %s, but broke their toolkit.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][Toolkit]--;
										Player[playerid][TotalToolkitsBroken] ++;
									}
								}
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}

					case 5:
					{
					    if(Player[playerid][Toolkit] < 1 && (Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1))
					        return SendClientMessage(playerid, -1, "You need a toolkit or to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 30) // 9mm Pistol
						{
							if(Player[playerid][InHouse] > 0 && Houses[Player[playerid][InHouse]][Workbench] > 0)
							{
								new WeaponID = 22, string[128], WeaponName[128];
								GivePlayerWeaponEx(playerid, WeaponID);
								Player[playerid][Materials] -= 30;
								Player[playerid][ArmsDealerXP] += 30;
								GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
								format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
								SendClientMessage(playerid, WHITE, string);
								format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
								NearByMessage(playerid, NICESKY, string);
								Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
								Player[playerid][CanMakeGun] = 0;
								Player[playerid][TotalGunsMade] ++;
							}
							else
							{
								switch(random(100))
								{
									case 0 .. 98:
									{
										new WeaponID = 22, string[128], WeaponName[128];
										GivePlayerWeaponEx(playerid, WeaponID);
										Player[playerid][Materials] -= 30;
										Player[playerid][ArmsDealerXP] += 30;
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
										SendClientMessage(playerid, WHITE, string);
										format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
										Player[playerid][CanMakeGun] = 0;
										Player[playerid][TotalGunsMade] ++;
									}
									default:
									{
										new string[128], WeaponID = 22, WeaponName[128];
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "* %s tried to create a %s, but broke their toolkit.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][Toolkit]--;
										Player[playerid][TotalToolkitsBroken] ++;
									}
								}
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}

					case 6:
					{
					    if(Player[playerid][Toolkit] < 1 && (Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1))
					        return SendClientMessage(playerid, -1, "You need a toolkit or to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 40) // Silenced Pistol
						{
							new WeaponID = 23, string[128], WeaponName[128];
							GivePlayerWeaponEx(playerid, WeaponID);
							Player[playerid][Materials] -= 40;
							Player[playerid][ArmsDealerXP] += 40;
							GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
							format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
							SendClientMessage(playerid, WHITE, string);
							format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
							NearByMessage(playerid, NICESKY, string);
							Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
							Player[playerid][CanMakeGun] = 0;
							Player[playerid][TotalGunsMade] ++;

						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}

					case 7:
					{
					    if(Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1)
					        return SendClientMessage(playerid, -1, "You need to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 50) // Pump-Action Shotgun
						{
							new WeaponID = 25, string[128], WeaponName[128];
							GivePlayerWeaponEx(playerid, WeaponID);
							Player[playerid][Materials] -= 50;
							Player[playerid][ArmsDealerXP] += 50;
							GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
							format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
							SendClientMessage(playerid, WHITE, string);
							format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
							NearByMessage(playerid, NICESKY, string);
							Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
							Player[playerid][CanMakeGun] = 0;
							Player[playerid][TotalGunsMade] ++;
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}

					case 8:
					{
					    if(Player[playerid][Toolkit] < 1 && (Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1))
					        return SendClientMessage(playerid, -1, "You need a toolkit or to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 100) // Desert Eagle
						{
							if(Player[playerid][InHouse] > 0 && Houses[Player[playerid][InHouse]][Workbench] > 0)
							{
								new WeaponID = 24, string[128], WeaponName[128];
								GivePlayerWeaponEx(playerid, WeaponID);
								Player[playerid][Materials] -= 100;
								Player[playerid][ArmsDealerXP] += 100;
								GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
								format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
								SendClientMessage(playerid, WHITE, string);
								format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
								NearByMessage(playerid, NICESKY, string);
								Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
								Player[playerid][CanMakeGun] = 0;
								Player[playerid][TotalGunsMade] ++;
							}
							else
							{
								switch(random(100))
								{
									case 0 .. 98:
									{
										new WeaponID = 24, string[128], WeaponName[128];
										GivePlayerWeaponEx(playerid, WeaponID);
										Player[playerid][Materials] -= 100;
										Player[playerid][ArmsDealerXP] += 100;
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
										SendClientMessage(playerid, WHITE, string);
										format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
										Player[playerid][CanMakeGun] = 0;
										Player[playerid][TotalGunsMade] ++;
									}
									default:
									{
										new string[128], WeaponID = 24, WeaponName[128];
										GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
										format(string, sizeof(string), "* %s tried to create a %s, but broke their toolkit.", GetNameEx(playerid), WeaponName);
										NearByMessage(playerid, NICESKY, string);
										Player[playerid][Toolkit]--;
										Player[playerid][TotalToolkitsBroken] ++;
									}
								}
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}

					case 9:
					{
					    if(Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1)
					        return SendClientMessage(playerid, -1, "You need to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 100) // MP5
						{
							new WeaponID = 29, string[128], WeaponName[128];
							GivePlayerWeaponEx(playerid, WeaponID);
							Player[playerid][Materials] -= 100;
							Player[playerid][ArmsDealerXP] += 100;
							GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
							format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
							SendClientMessage(playerid, WHITE, string);
							format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
							NearByMessage(playerid, NICESKY, string);
							Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
							Player[playerid][CanMakeGun] = 0;
							Player[playerid][TotalGunsMade] ++;
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}

					case 10:
					{
					    if(Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1)
					        return SendClientMessage(playerid, -1, "You need to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 95) // Uzi
						{
							new WeaponID = 28, string[128], WeaponName[128];
							GivePlayerWeaponEx(playerid, WeaponID);
							Player[playerid][Materials] -= 95;
							Player[playerid][ArmsDealerXP] += 95;
							GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
							format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
							SendClientMessage(playerid, WHITE, string);
							format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
							NearByMessage(playerid, NICESKY, string);
							Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
							Player[playerid][CanMakeGun] = 0;
							Player[playerid][TotalGunsMade] ++;
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}

					case 11:
					{
					    if(Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1)
					        return SendClientMessage(playerid, -1, "You need to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 150) // AK47
						{
							new WeaponID = 30, string[128], WeaponName[128];
							GivePlayerWeaponEx(playerid, WeaponID);
							Player[playerid][Materials] -= 150;
							Player[playerid][ArmsDealerXP] += 150;
							GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
							format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
							SendClientMessage(playerid, WHITE, string);
							format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
							NearByMessage(playerid, NICESKY, string);
							Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
							Player[playerid][CanMakeGun] = 0;
							Player[playerid][TotalGunsMade] ++;
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}

					case 12:
					{
					    if(Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1)
					        return SendClientMessage(playerid, -1, "You need to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 250) // M4
						{
							new WeaponID = 31, string[128], WeaponName[128];
							GivePlayerWeaponEx(playerid, WeaponID);
							Player[playerid][Materials] -= 250;
							Player[playerid][ArmsDealerXP] += 250;
							GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
							format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
							SendClientMessage(playerid, WHITE, string);
							format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
							NearByMessage(playerid, NICESKY, string);
							Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
							Player[playerid][CanMakeGun] = 0;
							Player[playerid][TotalGunsMade] ++;
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}

					case 13:
					{
					    if(Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1)
					        return SendClientMessage(playerid, -1, "You need to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 275) // Sniper
						{
							new WeaponID = 34, string[128], WeaponName[128];
							GivePlayerWeaponEx(playerid, WeaponID);
							Player[playerid][Materials] -= 275;
							Player[playerid][ArmsDealerXP] += 275;
							GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
							format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
							SendClientMessage(playerid, WHITE, string);
							format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
							NearByMessage(playerid, NICESKY, string);
							Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
							Player[playerid][CanMakeGun] = 0;
							Player[playerid][TotalGunsMade] ++;
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}

					case 14:
					{
					    if(Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1)
					        return SendClientMessage(playerid, -1, "You need to be in a house with a workbench to create this!");

						if(Player[playerid][Materials] >= 300) // Combat Shotgun
						{
							new WeaponID = 27, string[128], WeaponName[128];
							GivePlayerWeaponEx(playerid, WeaponID);
							Player[playerid][Materials] -= 300;
							Player[playerid][ArmsDealerXP] += 300;
							GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
							format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] to pass the weapon on.", WeaponName);
							SendClientMessage(playerid, WHITE, string);
							format(string, sizeof(string), "* %s has created a %s from their materials.", GetNameEx(playerid), WeaponName);
							NearByMessage(playerid, NICESKY, string);
							Player[playerid][GunTime] = gettime() + WEAPON_CREATE_TIME;
							Player[playerid][CanMakeGun] = 0;
							Player[playerid][TotalGunsMade] ++;
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
						}
					}
					case 15:
					{
						if(Player[playerid][Materials] >= 150)
							SendClientMessage(playerid, WHITE, "Use /givearmour instead!");
						else
							SendClientMessage(playerid, WHITE, "You do not have enough materials.");
					}
				}

				new newlevel;
				switch(Player[playerid][ArmsDealerXP])
				{
					case 0 .. 249: newlevel = 0;
					case 250 .. 1749: newlevel = 1;
					case 1750 .. 3749: newlevel = 2;
					case 3750 .. 6249: newlevel = 3;
					case 6250 .. 11249: newlevel = 4;
					case 11250 .. 16249: newlevel = 5;
					case 16250 .. 23749: newlevel = 6;
					case 23750 .. 31249: newlevel = 7;
					case 31250 .. 43749: newlevel = 8;
					case 43750 .. 57499: newlevel = 9;
					default: newlevel = 10;
				}

				if(newlevel > oldlevel)
				{
					new string[128];
					format(string, sizeof(string), "You have leveled up in Arms Dealer! You are now level %d.", newlevel);
					SendClientMessage(playerid, YELLOW, "======================================================================================");
					SendClientMessage(playerid, YELLOW, string);
					SendClientMessage(playerid, YELLOW, "======================================================================================");
					JobLog(playerid, "Arms dealer", newlevel, oldlevel);
				}
			}*/
			case 3426:
			{
				if(!IsPlayerConnectedEx(GetPlayerID(inputtext)))
				{
					ShowPlayerDialog(playerid, 3426, DIALOG_STYLE_INPUT, "Contract Assignment", "Please insert the name of the person you want the hitman to hit (must be an existing contract).", "Proceed", "Cancel");
					SendClientMessage(playerid, WHITE, "Invalid character name, please use a valid name to release.");
				}
				else
				{
					if(IsPlayerConnectedEx(GetPlayerID(inputtext)))
					{
						if(Player[GetPlayerID(inputtext)][ContractPrice] >= 1)
						{
							new string[128];
							format(string, sizeof(string), "You have been assigned to kill %s.", GetName(GetPlayerID(inputtext)));
							SendClientMessage(Player[playerid][AssigningHitTo], ANNOUNCEMENT, string);
							format(string, sizeof(string), "You have successfully assigned %s to assasinate %s.", GetNameEx(Player[playerid][AssigningHitTo]), GetNameEx(GetPlayerID(inputtext)));
							SendClientMessage(playerid, WHITE, string);
							Player[Player[playerid][AssigningHitTo]][PlayerToAssasinate] = GetPlayerID(inputtext);
							Player[GetPlayerID(inputtext)][BeingAssasinated] = Player[playerid][AssigningHitTo];

							format(string, sizeof(string), "%s has been assigned to kill %s, by %s.", GetNameEx(Player[playerid][AssigningHitTo]), GetNameEx(GetPlayerID(inputtext)), GetNameEx(playerid));
							GroupMessage(playerid, ANNOUNCEMENT, string);
						}
					}
				}
			}
			case 3427:
			{
				if(!IsPlayerConnectedEx(GetPlayerID(inputtext)))
				{
					SendClientMessage(playerid, WHITE, "Invalid character name, please use a valid name to release.");
				}
				else
				{
					if(IsPlayerConnectedEx(GetPlayerID(inputtext)))
					{
						if(Player[GetPlayerID(inputtext)][Group] == Player[playerid][Group])
						{
							if(Player[playerid][BeingAssasinated] == -1)
							{
								new string[128];
								Player[playerid][AssigningHitTo] = GetPlayerID(inputtext);
								format(string, sizeof(string), "You are in the process of assigning %s to assasinate a hit.", GetName(GetPlayerID(inputtext)));
								SendClientMessage(playerid, WHITE, string);
								ShowPlayerDialog(playerid, 3426, DIALOG_STYLE_INPUT, "Contract Assignment", "Please insert the name of the person you want the hitman to hit (must be an existing contract).", "Proceed", "Cancel");
							}
							else
							{
								SendClientMessage(playerid, WHITE, "That person is already on a contract.");
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "That person isn't in your faction.");
						}
					}
				}
			}
			case 3428:
			{
				switch(listitem)
				{
					//case 0: ShowPlayerDialog(playerid, 6921, DIALOG_STYLE_LIST, "Undercover Clothing", "Drug Dealer\nSuit\nAverage Guy\nCab Driver\nSuit 2\nMexican", "Select", "Cancel");
					case 0:
					{
						if(undercoverSkinsEnabled != 1)
							return SendClientMessage(playerid, -1, "The undercover clothes locker is locked.");

						ShowPlayerDialog(playerid, 6921, DIALOG_STYLE_INPUT, "Undercover Clothing", "Enter the skin ID of the clothing you wish to use.", "Select", "Cancel");
					}
					case 1: ShowPlayerDialog(playerid, 6922, DIALOG_STYLE_LIST, "Official Clothing", "LSPD Male Cadet\nLSPD Female Cadet\nLSPD Male Officer\nSFPD Male Officer\nLSPD Female Officer\nSFPD Female Officer\nLVPD Female Officer\nCounty Sheriff (Without hat)\nDesert Sheriff (Without hat)\nMotorcycle Officer\nTenpenny\nPulaski\nHernandez\nSergeant\nCommander\nChief\n", "Select", "Cancel");
					case 2: ShowPlayerDialog(playerid, 6952, DIALOG_STYLE_LIST, "Miscellaneous", "SWAT (with Vest)\n", "Select", "Cancel");
					case 3:
					{
						new string[512], query[128];

						mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM toys WHERE type = '%d'", TOY_TYPE_POLICE);
						new Cache:cache = mysql_query(MYSQL_MAIN, query), count = cache_get_row_count(), idx;

						if(count == 0)
						{
							cache_delete(cache);
							return SendClientMessage(playerid, GREY, "There seems to be no toys of that type!");
						}

						new name[128];
						while(idx < count)
						{
							cache_set_active(cache);

							cache_get_field_content(idx, "name", name);
							format(string, sizeof(string), "%s%s\n", string, name);

							idx++;
						}
						cache_delete(cache);

						SetPVarInt(playerid, "ToyList", 6);
						ShowPlayerDialog(playerid, LIST_TOYS, DIALOG_STYLE_LIST, "Police Accessories", string, "Select", "Cancel");
					}
				}
			}
			case 6922:
			{
				switch(listitem)
				{
					case 0:
					{
						SetPlayerSkin(playerid, 71);
						Player[playerid][LastSkin] = 71;
					}
					case 1:
					{
						SetPlayerSkin(playerid, 308);
						Player[playerid][LastSkin] = 308;
					}
					case 2:
					{
						SetPlayerSkin(playerid, 280);
						Player[playerid][LastSkin] = 280;
					}
					case 3:
					{
						SetPlayerSkin(playerid, 281);
						Player[playerid][LastSkin] = 281;
					}
					case 4:
					{
						SetPlayerSkin(playerid, 306);
						Player[playerid][LastSkin] = 306;
					}
					case 5:
					{
						SetPlayerSkin(playerid, 307);
						Player[playerid][LastSkin] = 307;
					}
					case 6:
					{
						SetPlayerSkin(playerid, 309);
						Player[playerid][LastSkin] = 309;
					}
					case 7:
					{
						SetPlayerSkin(playerid, 310);
						Player[playerid][LastSkin] = 310;
					}
					case 8:
					{
						SetPlayerSkin(playerid, 311);
						Player[playerid][LastSkin] = 311;
					}
					case 9:
					{
						SetPlayerSkin(playerid, 284);
						Player[playerid][LastSkin] = 284;
					}
					case 10:
					{
						SetPlayerSkin(playerid, 265);
						Player[playerid][LastSkin] = 265;
					}
					case 11:
					{
						SetPlayerSkin(playerid, 266);
						Player[playerid][LastSkin] = 266;
					}
					case 12:
					{
						SetPlayerSkin(playerid, 267);
						Player[playerid][LastSkin] = 267;
					}
					case 13:
					{
						SetPlayerSkin(playerid, 282);
						Player[playerid][LastSkin] = 282;
					}
					case 14:
					{
						SetPlayerSkin(playerid, 283);
						Player[playerid][LastSkin] = 283;
					}
					case 15:
					{
						SetPlayerSkin(playerid, 288);
						Player[playerid][LastSkin] = 288;
					}
				}
			}
			case 6952:
			{
				switch(listitem)
				{
					case 0:
					{
						SetPlayerSkin(playerid, 285);
						Player[playerid][LastSkin] = 285;
						SetPlayerArmour(playerid, 200);
					}
				}
			}
			case 6921:
			{
				new skinID = strval(inputtext);

				if(skinID < 0 || skinID > MAX_SKINS)
				{
					SendClientMessage(playerid, -1, "Select a valid skin ID between 0 and"#MAX_SKINS"!");
					return ShowPlayerDialog(playerid, 6921, DIALOG_STYLE_INPUT, "Undercover Clothing", "Enter the skin ID of the clothing you wish to use.", "Select", "Cancel");
				}

				if(IsFemaleSkin(skinID) && Player[playerid][Gender] != 2)
				{
					SendClientMessage(playerid, -1, "You need to be a female to use that skin.");
					return ShowPlayerDialog(playerid, 6921, DIALOG_STYLE_INPUT, "Undercover Clothing", "Enter the skin ID of the clothing you wish to use.", "Select", "Cancel");
				}
				else if(!IsFemaleSkin(skinID) && Player[playerid][Gender] == 2)
				{
					SendClientMessage(playerid, -1, "You need to be a male to use that skin.");
					return ShowPlayerDialog(playerid, 6921, DIALOG_STYLE_INPUT, "Undercover Clothing", "Enter the skin ID of the clothing you wish to use.", "Select", "Cancel");
				}
				else if(IsGroupSkin(skinID) != 0 && (IsGroupSkin(skinID) != Player[playerid][Group]))
				{
					SendClientMessage(playerid, -1, "This skin is locked to another faction.");
					return ShowPlayerDialog(playerid, 6921, DIALOG_STYLE_INPUT, "Undercover Clothing", "Enter the skin ID of the clothing you wish to use.", "Select", "Cancel");
				}

				switch(Player[playerid][Race])
				{
					case 0:
					{
						if(!IsValidWhiteSkin(skinID))
						{
							SendClientMessage(playerid, -1, "You can't use that skin as you're not that race.");
							return ShowPlayerDialog(playerid, 6921, DIALOG_STYLE_INPUT, "Undercover Clothing", "Enter the skin ID of the clothing you wish to use.", "Select", "Cancel");
						}
					}
					case 1:
					{
						if(!IsValidBlackSkin(skinID))
						{
							SendClientMessage(playerid, -1, "You can't use that skin as you're not that race.");
							return ShowPlayerDialog(playerid, 6921, DIALOG_STYLE_INPUT, "Undercover Clothing", "Enter the skin ID of the clothing you wish to use.", "Select", "Cancel");
						}
					}
					case 2:
					{
						if(!IsValidAsianSkin(skinID))
						{
							SendClientMessage(playerid, -1, "You can't use that skin as you're not that race.");
							return ShowPlayerDialog(playerid, 6921, DIALOG_STYLE_INPUT, "Undercover Clothing", "Enter the skin ID of the clothing you wish to use.", "Select", "Cancel");
						}
					}
					case 3:
					{
						if(!IsValidHispanicSkin(skinID))
						{
							SendClientMessage(playerid, -1, "You can't use that skin as you're not that race.");
							return ShowPlayerDialog(playerid, 6921, DIALOG_STYLE_INPUT, "Undercover Clothing", "Enter the skin ID of the clothing you wish to use.", "Select", "Cancel");
						}
					}
					default:
					{
						SendClientMessage(playerid, -1, "You can't use that skin as you're not that race.");
						return ShowPlayerDialog(playerid, 6921, DIALOG_STYLE_INPUT, "Undercover Clothing", "Enter the skin ID of the clothing you wish to use.", "Select", "Cancel");
					}
				}
				Player[playerid][LastSkin] = skinID;
				SetPlayerSkin(playerid, skinID);
			}
			case 3430:
			{
				if(! IsPlayerConnectedEx(GetPlayerID(inputtext)))
				{
					SendClientMessage(playerid, WHITE, "Invalid character name, please use a valid name to release.");
				}
				else
				{
					if(IsPlayerConnectedEx(GetPlayerID(inputtext)))
					{
						if(Player[GetPlayerID(inputtext)][PrisonID] == 2)
						{
							new string[128];
							Player[GetPlayerID(inputtext)][PrisonDuration] = 0;
							SendClientMessage(GetPlayerID(inputtext), WHITE, "You have been released from prison early by the LSPD.");
							format(string, sizeof(string), "You have successfully released %s.", GetName(GetPlayerID(inputtext)));
							SendClientMessage(playerid, WHITE, string);
						}
						else
						{
							SendClientMessage(playerid, WHITE, "That player is either not jailed, or was by an admin.");
						}
					}
				}
			}
			case 6437:
			{
				if(! IsPlayerConnectedEx(GetPlayerID(inputtext)))
				{
					SendClientMessage(playerid, WHITE, "Invalid character name, please use a valid name to release.");
				}
				else
				{
					if(IsPlayerConnectedEx(GetPlayerID(inputtext)))
					{
						new string[128];
						ClearCriminalRecord(GetPlayerID(inputtext));
						format(string, sizeof(string), "%s from the %s has cleared your criminal record.", GetName(playerid), Groups[Player[playerid][Group]][GroupName]);
						SendClientMessage(GetPlayerID(inputtext), WHITE, string);
						format(string, sizeof(string), "%s has cleared %s's criminal record.", GetName(playerid), GetName(GetPlayerID(inputtext)));
						GroupMessage(playerid, ANNOUNCEMENT, string, 1);
						Player[GetPlayerID(inputtext)][CriminalOffences] = 0;
					}
					else
					{
						SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
					}
				}
			}
			case 9922:
			{
				switch(listitem)
				{
					case 0: ShowPlayerDialog(playerid, 3431, DIALOG_STYLE_LIST, "Equipment", "Nitestick - FREE\nMace - FREE\nDeagle - FREE\nMP5 - FREE\nShotgun - FREE\n", "Select", "Cancel");
					case 1:
					{
						if(SWATEnabled == 1)
						{
							ShowPlayerDialog(playerid, 2299, DIALOG_STYLE_LIST, "SWAT Equipment", "Tear Gas\nM4A1\nCombat Shotgun\nSniper Rifle\nCamera", "Select", "Cancel");
						}
						else
						{
							SendClientMessage(playerid, WHITE, "The SWAT inventory is currently unavailable.");
						}
					}
					case 2: ShowPlayerDialog(playerid, 2992, DIALOG_STYLE_LIST, "Vehicle Equipment", "Lightbar Kit\nRoof Light Kit", "Select", "Cancel");
				}
			}
			case 2992:
			{
				if(!response)
					return 1;
					
				if(Player[playerid][SirenKit] != 0)
					return SendClientMessage(playerid, WHITE, "You already have a siren kit.");
					
				Player[playerid][SirenKit] = listitem + 1;
				new string[128];
				format(string, sizeof(string), "You grab a %s from the locker.", inputtext);
				SendClientMessage(playerid, WHITE, string);
			}
			case 2299:
			{
				new string[128];
				switch(listitem)
				{
					case 0:
					{
						SendClientMessage(playerid, WHITE, "You have withdrawn Tear Gas. Use it properly!");
						GivePlayerWeaponEx(playerid, 17);
						format(string, sizeof(string), "%s has taken a %s (17) from the LSPD SWAT locker.", GetName(playerid), GetWeaponNameEx(17));
						StatLog(string);
					}
					case 1:
					{
						SendClientMessage(playerid, WHITE, "You have withdrawn an M4A1. Use it properly!");
						GivePlayerWeaponEx(playerid, 31);
						format(string, sizeof(string), "%s has taken a %s (31) from the LSPD SWAT locker.", GetName(playerid), GetWeaponNameEx(31));
						StatLog(string);
					}
					case 2:
					{
						SendClientMessage(playerid, WHITE, "You have withdrawn an Combat Shotgun. Use it properly!");
						GivePlayerWeaponEx(playerid, 27);
						format(string, sizeof(string), "%s has taken a %s (27) from the LSPD SWAT locker.", GetName(playerid), GetWeaponNameEx(27));
						StatLog(string);
					}
					case 3:
					{
						SendClientMessage(playerid, WHITE, "You have withdrawn an Sniper Rifle. Use it properly!");
						GivePlayerWeaponEx(playerid, 34);
						format(string, sizeof(string), "%s has taken a %s (34) from the LSPD SWAT locker.", GetName(playerid), GetWeaponNameEx(34));
						StatLog(string);
					}
					case 4:
					{
						SendClientMessage(playerid, WHITE, "You have withdrawn a Camera. Use it properly!");
						GivePlayerWeaponEx(playerid, 43);
						format(string, sizeof(string), "%s has taken a %s (43) from the LSPD SWAT locker.", GetName(playerid), GetWeaponNameEx(43));
						StatLog(string);
					}
				}
			}
			case 3431:
			{
				new string[128];
				switch(listitem)
				{
					case 0:
					{
						GivePlayerWeaponEx(playerid, 3);
						format(string, sizeof(string), "%s has taken a %s (3) from the LSPD locker.", GetName(playerid), GetWeaponNameEx(3));
						StatLog(string);
					}
					case 1:
					{
						GivePlayerWeaponEx(playerid, 41);
						format(string, sizeof(string), "%s has taken a %s (41) from the LSPD locker.", GetName(playerid), GetWeaponNameEx(41));
						StatLog(string);
					}
					case 2:
					{
						GivePlayerWeaponEx(playerid, 24);
						format(string, sizeof(string), "%s has taken a %s (24) from the LSPD locker.", GetName(playerid), GetWeaponNameEx(24));
						StatLog(string);
					}
					case 3:
					{
						GivePlayerWeaponEx(playerid, 29);
						format(string, sizeof(string), "%s has taken a %s (29) from the LSPD locker.", GetName(playerid), GetWeaponNameEx(29));
						StatLog(string);
					}
					case 4:
					{
						GivePlayerWeaponEx(playerid, 25);
						format(string, sizeof(string), "%s has taken a %s (25) from the LSPD locker.", GetName(playerid), GetWeaponNameEx(25));
						StatLog(string);
					}
				}
			}
			case 3432:
			{
				switch(listitem)
				{
					case 0:
					{
						if(Player[playerid][CopDuty] == 1)
						{
							SendClientMessage(playerid, WHITE, "You are now off cop duty.");
							Player[playerid][CopDuty] = 0;
							SetPlayerArmour(playerid, 0);

						}
						else
						{
							SendClientMessage(playerid, WHITE, "You are now on cop duty.");
							Player[playerid][CopDuty] = 1;
							SetPlayerArmour(playerid, 100);
							Player[playerid][LastArmour] = 100;

						}
						UpdatePlayerNameColour(playerid);
					}
					case 1: ShowPlayerDialog(playerid, 9922, DIALOG_STYLE_LIST, "Equipment", "Normal Equipment\nSWAT Equipment\nVehicle Equipment", "Select", "Cancel");
					case 2:
					{
						if(Player[playerid][GroupRank] < 7)
							return SendClientMessage(playerid, -1, "You are not authorized to use this!");

						ShowPlayerDialog(playerid, 3430, DIALOG_STYLE_INPUT, "Release a Suspect", "Please insert the suspect's name.", "Proceed", "Cancel");
					}
					case 3: ShowPlayerDialog(playerid, 3428, DIALOG_STYLE_LIST, "Official Clothing", "Undercover Clothing\nOfficial Clothing\nMiscellaneous\nAccessories", "Select", "Cancel");
					case 4:
					{
						if(Player[playerid][GroupRank] > 6)
							ShowPlayerDialog(playerid, 6437, DIALOG_STYLE_INPUT, "Clear a Suspect", "Please insert the suspect's name.", "Proceed", "Cancel");
						else
						SendClientMessage(playerid, -1, "You must be a rank 7 or higher to use this option.");
					}
				}
			}
			case 3433:
			{
				switch(listitem)
				{
					case 0:
					{
						new string[128], Count;

						SendClientMessage(playerid, WHITE, "-------------------------------------------------------------------");

						foreach(Player, i)
						{
							if(Player[i][ContractPrice] >= 1 && Player[i][BeingAssasinated] == -1)
							{
								Count++;
								format(string, sizeof(string), "TARGET: %s | REASON: %s | PRICE: $%s.", GetName(i), Player[i][Contract], IntToFormattedStr(Player[i][ContractPrice]));
								SendClientMessage(playerid, GREY, string);
							}
						}

						if(Count == 0)
						{
							SendClientMessage(playerid, GREY, "No contracts are currently available.");
						}

						SendClientMessage(playerid, WHITE, "-------------------------------------------------------------------");
					}
					case 1:
					{
						new string[128];
						SendClientMessage(playerid, WHITE, "-------------------------------------------------------------------");
						foreach(Player, i)
						{
							if(Player[playerid][Group] == Player[i][Group])
							{
								switch(Player[i][GroupRank])
								{
									case 0:
									{
										format(string, sizeof(string), "%s (0): %s | Failed Hits: %d | Successful Hits: %d | Total Hits: %d", Groups[Player[i][Group]][RankName0], GetName(i), Player[i][FailedHits], Player[i][SuccessfulHits], Player[i][FailedHits]+Player[i][SuccessfulHits]);
									}
									case 1:
									{
										format(string, sizeof(string), "%s (1): %s | Failed Hits: %d | Successful Hits: %d | Total Hits: %d", Groups[Player[i][Group]][RankName1], GetName(i), Player[i][FailedHits], Player[i][SuccessfulHits], Player[i][FailedHits]+Player[i][SuccessfulHits]);
									}
									case 2:
									{
										format(string, sizeof(string), "%s (2): %s | Failed Hits: %d | Successful Hits: %d | Total Hits: %d", Groups[Player[i][Group]][RankName2], GetName(i), Player[i][FailedHits], Player[i][SuccessfulHits], Player[i][FailedHits]+Player[i][SuccessfulHits]);
									}
									case 3:
									{
										format(string, sizeof(string), "%s (3): %s | Failed Hits: %d | Successful Hits: %d | Total Hits: %d", Groups[Player[i][Group]][RankName3], GetName(i), Player[i][FailedHits], Player[i][SuccessfulHits], Player[i][FailedHits]+Player[i][SuccessfulHits]);
									}
									case 4:
									{
										format(string, sizeof(string), "%s (4): %s | Failed Hits: %d | Successful Hits: %d | Total Hits: %d", Groups[Player[i][Group]][RankName4], GetName(i), Player[i][FailedHits], Player[i][SuccessfulHits], Player[i][FailedHits]+Player[i][SuccessfulHits]);
									}
									case 5:
									{
										format(string, sizeof(string), "%s (5): %s | Failed Hits: %d | Successful Hits: %d | Total Hits: %d", Groups[Player[i][Group]][RankName5], GetName(i), Player[i][FailedHits], Player[i][SuccessfulHits], Player[i][FailedHits]+Player[i][SuccessfulHits]);
									}
									case 6:
									{
										format(string, sizeof(string), "%s (6): %s | Failed Hits: %d | Successful Hits: %d | Total Hits: %d", Groups[Player[i][Group]][RankName6], GetName(i), Player[i][FailedHits], Player[i][SuccessfulHits], Player[i][FailedHits]+Player[i][SuccessfulHits]);
									}
								}

								SendClientMessage(playerid, GREY, string);
							}
						}
						SendClientMessage(playerid, WHITE, "-------------------------------------------------------------------");
					}
					case 2:
					{
						new string[128], Count;

						SendClientMessage(playerid, WHITE, "-------------------------------------------------------------------");

						foreach(Player, i)
						{
							if(Player[i][ContractPrice] >= 25000 && Player[i][BeingAssasinated] == -1)
							{
								Count++;
								format(string, sizeof(string), "TARGET: %s | REASON: %s | PRICE: $%s.", GetName(i), Player[i][Contract],  IntToFormattedStr(Player[i][ContractPrice]));
								SendClientMessage(playerid, GREY, string);
							}
						}

						if(Count == 0)
						{
							SendClientMessage(playerid, GREY, "No contracts are currently available.");
						}

						SendClientMessage(playerid, WHITE, "-------------------------------------------------------------------");
					}
					case 3:
					{
						ShowPlayerDialog(playerid, 3434, DIALOG_STYLE_LIST, "Hitman Weapons", "Knife - FREE\nCamera - $500\nSilenced Pistol - $400\nDesert Eagle - $1,000\nMP5 - $1,000\nPump Action Shotgun - $500\nSniper Rifle - $2,750\nM4A1 - $2,500\nCombat Shotgun - $3,000\nBody Armour - $1,500\nFull Health - FREE", "Select", "Cancel");
					}
					case 4:
					{
						ShowPlayerDialog(playerid, 3435, DIALOG_STYLE_LIST, "Hitman Undercover", "LSPD Uniform\nCustom Skin\nCustom Name\nRandom skin", "Proceed", "Cancel");
					}
					/*case 6:
					{
						new string[255], end[1024], list;
						foreach(Player, i)
						{
							if(list == 10)
								continue;

							if(Player[i][PendingContract] >= 0)
							{
								format(string, sizeof(string), "%s | %s | %s\n", GetName(i), GetName(Player[i][PendingContract]), PrettyMoney(Player[i][PendingPrice]));
								strcat(end, string);
								list++;
							}
						}
						ShowPlayerDialog(playerid, AGENCY_PENDINGLIST, DIALOG_STYLE_LIST, "Pending Contracts", end, "Select", "Cancel");
					}*/
					case 5:
					{
						if(Player[playerid][GroupRank] >= 3)
						{
							ShowPlayerDialog(playerid, 3427, DIALOG_STYLE_INPUT, "Contract Assignment", "Please insert the Contractors name that you wish to assign a hit to.", "Proceed", "Cancel");
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You must be a rank 4+ to assign contracts.");
						}
					}
				}
			}
			case AGENCY_PENDINGLIST:
			{
				new string[255], id, name[24];
				format(string, sizeof(string), "%s", inputtext);
				format(name, sizeof(name), "%s", CutBeforeLine(string));
				id = GetPlayerID(name);
				SendClientMessage(playerid, -1, string);
				SetPVarInt(playerid, "Contractor", id);
				format(string, sizeof(string), "%s is requesting a hit on %s, for %s with the reason:\n%s", GetName(id), GetName(Player[id][PendingContract]), PrettyMoney(Player[id][PendingPrice]), Player[id][PendingReason]);
				ShowPlayerDialog(playerid, AGENCY_PEND, DIALOG_STYLE_MSGBOX, "Pending Contract - Accept or Decline?", string, "Accept", "Decline");
			}
			case 3434:
			{
				switch(listitem)
				{
					case 0:
					{
						if(IsPlayerInRangeOfPoint(playerid, 15, AgencyIntPosX, AgencyIntPosY, AgencyIntPosZ) && GetPlayerVirtualWorld(playerid) == 45004)
						//if(IsPlayerInRangeOfPoint(playerid, 1500, Groups[Player[playerid][Group]][HQInteriorX], Groups[Player[playerid][Group]][HQInteriorY], Groups[Player[playerid][Group]][HQInteriorZ]) && GetPlayerVirtualWorld(playerid) == 45002)
						{
							GivePlayerWeaponEx(playerid, 4);
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You're not at your HQ.");
						}
					}
					case 1:
					{
						if(IsPlayerInRangeOfPoint(playerid, 15, AgencyIntPosX, AgencyIntPosY, AgencyIntPosZ) && GetPlayerVirtualWorld(playerid) == 45004)
						//if(IsPlayerInRangeOfPoint(playerid, 1500, Groups[Player[playerid][Group]][HQInteriorX], Groups[Player[playerid][Group]][HQInteriorY], Groups[Player[playerid][Group]][HQInteriorZ]) && GetPlayerVirtualWorld(playerid) == 45002)
						{
							if(Player[playerid][Money] >= 500)
							{
								Player[playerid][Money] -= 500;
								GivePlayerWeaponEx(playerid, WEAPON_CAMERA);
							}
							else
							{
								SendClientMessage(playerid, WHITE, "You can't afford this weapon.");
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You're not at your HQ.");
						}
					}
					case 2:
					{
						if(IsPlayerInRangeOfPoint(playerid, 15, AgencyIntPosX, AgencyIntPosY, AgencyIntPosZ) && GetPlayerVirtualWorld(playerid) == 45004)
						//if(IsPlayerInRangeOfPoint(playerid, 1500, Groups[Player[playerid][Group]][HQInteriorX], Groups[Player[playerid][Group]][HQInteriorY], Groups[Player[playerid][Group]][HQInteriorZ]) && GetPlayerVirtualWorld(playerid) == 45002)
						{
							if(Player[playerid][Money] >= 400)
							{
								Player[playerid][Money] -= 400;
								GivePlayerWeaponEx(playerid, 23);
							}
							else
							{
								SendClientMessage(playerid, WHITE, "You can't afford this weapon.");
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You're not at your HQ.");
						}
					}
					case 3:
					{
						if(IsPlayerInRangeOfPoint(playerid, 15, AgencyIntPosX, AgencyIntPosY, AgencyIntPosZ) && GetPlayerVirtualWorld(playerid) == 45004)
						//if(IsPlayerInRangeOfPoint(playerid, 1500, Groups[Player[playerid][Group]][HQInteriorX], Groups[Player[playerid][Group]][HQInteriorY], Groups[Player[playerid][Group]][HQInteriorZ]) && GetPlayerVirtualWorld(playerid) == 45002)
						{
							if(Player[playerid][Money] >= 1000)
							{
								Player[playerid][Money] -= 1000;
								GivePlayerWeaponEx(playerid, 24);
							}
							else
							{
								SendClientMessage(playerid, WHITE, "You can't afford this weapon.");
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You're not at your HQ.");
						}
					}
					case 4:
					{
						if(IsPlayerInRangeOfPoint(playerid, 15, AgencyIntPosX, AgencyIntPosY, AgencyIntPosZ) && GetPlayerVirtualWorld(playerid) == 45004)
						//if(IsPlayerInRangeOfPoint(playerid, 1500, Groups[Player[playerid][Group]][HQInteriorX], Groups[Player[playerid][Group]][HQInteriorY], Groups[Player[playerid][Group]][HQInteriorZ]) && GetPlayerVirtualWorld(playerid) == 45002)
						{
							if(Player[playerid][Money] >= 1000)
							{
								Player[playerid][Money] -= 1000;
								GivePlayerWeaponEx(playerid, 29);
							}
							else
							{
								SendClientMessage(playerid, WHITE, "You can't afford this weapon.");
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You're not at your HQ.");
						}
					}
					case 5:
					{
						if(IsPlayerInRangeOfPoint(playerid, 15, AgencyIntPosX, AgencyIntPosY, AgencyIntPosZ) && GetPlayerVirtualWorld(playerid) == 45004)
						//if(IsPlayerInRangeOfPoint(playerid, 1500, Groups[Player[playerid][Group]][HQInteriorX], Groups[Player[playerid][Group]][HQInteriorY], Groups[Player[playerid][Group]][HQInteriorZ]) && GetPlayerVirtualWorld(playerid) == 45002)
						{
							if(Player[playerid][Money] >= 500)
							{
								Player[playerid][Money] -= 500;
								GivePlayerWeaponEx(playerid, 25);
							}
							else
							{
								SendClientMessage(playerid, WHITE, "You can't afford this weapon.");
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You're not at your HQ.");
						}
					}
					case 6:
					{
						if(IsPlayerInRangeOfPoint(playerid, 15, AgencyIntPosX, AgencyIntPosY, AgencyIntPosZ) && GetPlayerVirtualWorld(playerid) == 45004)
						//if(IsPlayerInRangeOfPoint(playerid, 1500, Groups[Player[playerid][Group]][HQInteriorX], Groups[Player[playerid][Group]][HQInteriorY], Groups[Player[playerid][Group]][HQInteriorZ]) && GetPlayerVirtualWorld(playerid) == 45002)
						{
							if(Player[playerid][Money] >= 2750)
							{
								Player[playerid][Money] -= 2750;
								GivePlayerWeaponEx(playerid, 34);
							}
							else
							{
								SendClientMessage(playerid, WHITE, "You can't afford this weapon.");
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You're not at your HQ.");
						}
					}
					case 7:
					{
						if(IsPlayerInRangeOfPoint(playerid, 15, AgencyIntPosX, AgencyIntPosY, AgencyIntPosZ) && GetPlayerVirtualWorld(playerid) == 45004)
						//if(IsPlayerInRangeOfPoint(playerid, 1500, Groups[Player[playerid][Group]][HQInteriorX], Groups[Player[playerid][Group]][HQInteriorY], Groups[Player[playerid][Group]][HQInteriorZ]) && GetPlayerVirtualWorld(playerid) == 45002)
						{
							if(Player[playerid][Money] >= 2500)
							{
								Player[playerid][Money] -= 2500;
								GivePlayerWeaponEx(playerid, 31);
							}
							else
							{
								SendClientMessage(playerid, WHITE, "You can't afford this weapon.");
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You're not at your HQ.");
						}
					}
					case 8:
					{
						if(IsPlayerInRangeOfPoint(playerid, 15, AgencyIntPosX, AgencyIntPosY, AgencyIntPosZ) && GetPlayerVirtualWorld(playerid) == 45004)
						//if(IsPlayerInRangeOfPoint(playerid, 1500, Groups[Player[playerid][Group]][HQInteriorX], Groups[Player[playerid][Group]][HQInteriorY], Groups[Player[playerid][Group]][HQInteriorZ]) && GetPlayerVirtualWorld(playerid) == 45002)
						{
							if(Player[playerid][Money] >= 3000)
							{
								Player[playerid][Money] -= 3000;
								GivePlayerWeaponEx(playerid, 27);
							}
							else
							{
								SendClientMessage(playerid, WHITE, "You can't afford this weapon.");
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You're not at your HQ.");
						}
					}
					case 9:
					{
						if(IsPlayerInRangeOfPoint(playerid, 15, AgencyIntPosX, AgencyIntPosY, AgencyIntPosZ) && GetPlayerVirtualWorld(playerid) == 45004)
						{
							ShowDialog(playerid, AGENCY_ARMOUR);
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You're not at your HQ.");
						}
					}
					case 10:
					{
						if(IsPlayerInRangeOfPoint(playerid, 15, AgencyIntPosX, AgencyIntPosY, AgencyIntPosZ) && GetPlayerVirtualWorld(playerid) == 45004)
						{
							SetPlayerHealth(playerid, 100);
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You're not at your HQ.");
						}
					}
				}
			}
			case AGENCY_ARMOUR:
			{
				if(Groups[Player[playerid][Group]][CommandTypes] != 2)
					return 1;

				if(isnull(inputtext) || !IsNumeric(inputtext) || strval(inputtext) < 0 || strval(inputtext) > 100)
					return ShowDialog(playerid, AGENCY_ARMOUR, "{E04646}Invalid amount!{FFFFFF}");

				new cost = strval(inputtext) * 15;
				if(Player[playerid][Money] < cost)
					return SendClientMessage(playerid, -1, "You don't have enough cash on hand to buy that much armour."), ShowDialog(playerid, AGENCY_ARMOUR);

				Player[playerid][Money] -= cost;
				SetPlayerArmour(playerid, strval(inputtext));
			}
			case 3435:
			{
				switch(listitem)
				{
					case 0:
					{
						SetPlayerSkin(playerid, 280);
						Player[playerid][LastSkin] = 280;
					}
					case 1: ShowPlayerDialog(playerid, 3436, DIALOG_STYLE_INPUT, "Skin Select", "Please insert the desired skin", "Proceed", "Cancel");
					case 2: ShowPlayerDialog(playerid, 3437, DIALOG_STYLE_INPUT, "Name Select", "Please insert the desired undercover name", "Proceed", "Cancel");
					case 3:
					{
						new RandomInt = random(100);
						SetPlayerSkin(playerid, RandomInt);
					}
				}
			}
			case 3436:
			{
				if(isnull(inputtext))
					return 1;

				new SkinID = strval(inputtext);

				if(SkinID > 300 || 0 > SkinID)
					return 1;

				SetPlayerSkin(playerid, SkinID);
				Player[playerid][LastSkin] = SkinID;
			}
			case 3437:
			{
				if(Player[playerid][UnderCover] == 0 && Player[playerid][AdminDuty] < 1)
					format(Player[playerid][NormalName], 255, "%s", GetName(playerid));

				if(isnull(inputtext)){
					Player[playerid][UnderCover] = 0;
					SendClientMessage(playerid, 0x00FF00FF, "You are no longer undercover.");
					return SetPlayerNameEx(playerid, Player[playerid][NormalName]);
				}

				switch(SetPlayerNameEx(playerid, inputtext))
				{
					case -1: SendClientMessage(playerid, RED, "Unable to change, someone is already known as this.");
					case 0: SendClientMessage(playerid, 0xFF0000FF, "You are already called this name.");
					case 1:
					{
						if(!strcmp(GetName(playerid), Player[playerid][NormalName], false))
						{
							Player[playerid][UnderCover] = 0;
							SendClientMessage(playerid, 0x00FF00FF, "You are no longer undercover.");
						}
						else
						{
							new string[128];
							format(string, sizeof(string), "%s (%s) has disguised themself as %s", GetName(playerid), Player[playerid][AdminName], inputtext);
							AdminActionsLog(string);

							Player[playerid][UnderCover] = 1;
							SendClientMessage(playerid, 0x00FF00FF, "You are now undercover with this name.");
						}
					}
				}

			}
			case BUY_CLOTHES_HOUSE:
			{
				if(!response)
					return 1;

				SetPVarInt(playerid, "ClothingSlot", listitem + 1);
				if(GetPVarInt(playerid, "BUY_CLOTHES_NO_TD") == 1)
				{
					new string[255];
					format(string, sizeof(string), "Please enter the ID of the skin you'd like to buy (0 -"#MAX_SKINS")\n\nIt will cost you %s for your new skin.", PrettyMoney(Businesses[Player[playerid][InBusiness]][bProductPrice1]));
					ShowPlayerDialog(playerid, BUY_CLOTHES, DIALOG_STYLE_INPUT, "Enter skin ID", string, "Set", "Cancel");
				}
				else
				{
					if(Player[playerid][Gender] == 1)
						ShowModelSelectionMenu(playerid, SkinLists[Player[playerid][Race]], "Select Skin to Purchase");
					else ShowModelSelectionMenu(playerid, SkinLists[Player[playerid][Race]] + 4, "Select Skin to Purchase");
					return 1;
				}
			}

			case BUY_CLOTHES:
			{
				new string[255], skinid;
				skinid = strval(inputtext);
				if(Player[playerid][InBusiness] == 0)
					return SendClientMessage(playerid, WHITE, "You're not in a business!");
				else if(skinid > MAX_SKINS || skinid < 0){
					SendClientMessage(playerid, -1, "Please enter a skin id from 0 to"#MAX_SKINS);

					format(string, sizeof(string), "Please enter the ID of the skin you'd like to buy (0 -"#MAX_SKINS")\n\nIt will cost you %s for your new skin.", PrettyMoney(Businesses[Player[playerid][InBusiness]][bProductPrice1]));
					return ShowPlayerDialog(playerid, BUY_CLOTHES, DIALOG_STYLE_INPUT, "Enter skin ID", string, "Set", "Cancel");
				}
				else if(IsPrivateSkin(skinid)){
					SendClientMessage(playerid, -1, "This skin is reserved!");

					format(string, sizeof(string), "Please enter the ID of the skin you'd like to buy (0 -"#MAX_SKINS")\n\nIt will cost you %s for your new skin.", PrettyMoney(Businesses[Player[playerid][InBusiness]][bProductPrice1]));
					return ShowPlayerDialog(playerid, BUY_CLOTHES, DIALOG_STYLE_INPUT, "Enter skin ID", string, "Set", "Cancel");
				}
				else if(IsGroupSkin(skinid) != 0 && (IsGroupSkin(skinid) != Player[playerid][Group])){
					format(string, sizeof(string), "You cannot buy this skin, it is registered to '%s'", Groups[IsGroupSkin(skinid)][GroupName]);
					SendClientMessage(playerid, -1, string);

					format(string, sizeof(string), "Please enter the ID of the skin you'd like to buy (0 -"#MAX_SKINS")\n\nIt will cost you %s for your new skin.", PrettyMoney(Businesses[Player[playerid][InBusiness]][bProductPrice1]));
					return ShowPlayerDialog(playerid, BUY_CLOTHES, DIALOG_STYLE_INPUT, "Enter skin ID", string, "Set", "Cancel");
				}
				else if(IsFemaleSkin(skinid) && Player[playerid][Gender] != 2)
				{
					SendClientMessage(playerid, -1, "You need to be a female to use that skin.");

					format(string, sizeof(string), "Please enter the ID of the skin you'd like to buy (0 -"#MAX_SKINS")\n\nIt will cost you %s for your new skin.", PrettyMoney(Businesses[Player[playerid][InBusiness]][bProductPrice1]));
					return ShowPlayerDialog(playerid, BUY_CLOTHES, DIALOG_STYLE_INPUT, "Enter skin ID", string, "Set", "Cancel");
				}
				else if(!IsFemaleSkin(skinid) && Player[playerid][Gender] == 2)
				{
					SendClientMessage(playerid, -1, "You need to be a male to use that skin.");

					format(string, sizeof(string), "Please enter the ID of the skin you'd like to buy (0 -"#MAX_SKINS")\n\nIt will cost you %s for your new skin.", PrettyMoney(Businesses[Player[playerid][InBusiness]][bProductPrice1]));
					return ShowPlayerDialog(playerid, BUY_CLOTHES, DIALOG_STYLE_INPUT, "Enter skin ID", string, "Set", "Cancel");
				}

				switch(Player[playerid][Race])
				{
					case 0:
					{
						if(!IsValidWhiteSkin(skinid))
						{
							SendClientMessage(playerid, -1, "You can't use that skin as you're not that race.");
							return ShowPlayerDialog(playerid, BUY_CLOTHES, DIALOG_STYLE_INPUT, "Skin ID:", "Choose a skin id from 0 to 300.", "Set", "Cancel");
						}
					}
					case 1:
					{
						if(!IsValidBlackSkin(skinid))
						{
							SendClientMessage(playerid, -1, "You can't use that skin as you're not that race.");
							return ShowPlayerDialog(playerid, BUY_CLOTHES, DIALOG_STYLE_INPUT, "Skin ID:", "Choose a skin id from 0 to 300.", "Set", "Cancel");
						}
					}
					case 2:
					{
						if(!IsValidAsianSkin(skinid))
						{
							SendClientMessage(playerid, -1, "You can't use that skin as you're not that race.");
							return ShowPlayerDialog(playerid, BUY_CLOTHES, DIALOG_STYLE_INPUT, "Skin ID:", "Choose a skin id from 0 to 300.", "Set", "Cancel");
						}
					}
					case 3:
					{
						if(!IsValidHispanicSkin(skinid))
						{
							SendClientMessage(playerid, -1, "You can't use that skin as you're not that race.");
							return ShowPlayerDialog(playerid, BUY_CLOTHES, DIALOG_STYLE_INPUT, "Skin ID:", "Choose a skin id from 0 to 300.", "Set", "Cancel");
						}
					}
					default:
					{
						SendClientMessage(playerid, -1, "You can't use that skin as you're not that race.");
						return ShowPlayerDialog(playerid, BUY_CLOTHES, DIALOG_STYLE_INPUT, "Skin ID:", "Choose a skin id from 0 to 300.", "Set", "Cancel");
					}
				}
				switch(GetPVarInt(playerid, "ClothingSlot")){
					case 1: Player[playerid][PlayerSkinSlot1] = skinid;
					case 2: Player[playerid][PlayerSkinSlot2] = skinid;
					case 3: Player[playerid][PlayerSkinSlot3] = skinid;
				}
				DeletePVar(playerid, "BUY_CLOTHES_NO_TD");
				SetPlayerSkin(playerid, skinid);
				Player[playerid][LastSkin] = skinid;
				Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice1];
//				Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice1];
				AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice1]);
				Businesses[Player[playerid][InBusiness]][bSupplies] -= 15;
				SendClientMessage(playerid, -1, "You have purchased a pair of clothes!");
			}
			case HARDWARE_BUY:
			{

				if(Player[playerid][InBusiness] == 0)
					return 1;
				new string[128];
			    switch(listitem)
				{
					case 0:
				    {
				        if(Player[playerid][EngineParts] >= 5)
				            return SendClientMessage(playerid, WHITE, "You can only hold onto 5 engine parts at a time!");

						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice1])
						    return SendClientMessage(playerid, WHITE, "Insufficient funds.");

						if(Businesses[Player[playerid][InBusiness]][bSupplies] < 3)
						    return SendClientMessage(playerid, WHITE, "That item is out of stock.");

						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice1];
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice1];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice1]);
						Player[playerid][EngineParts]++;
						Businesses[Player[playerid][InBusiness]][bSupplies] -= 3;
						GenerateTrash(Player[playerid][InBusiness], 2);
						//SendClientMessage(playerid, WHITE, "You have purchased some engine parts. Use these to fix your vehicles.");

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Engine Part Help", "{FFFFFF}You have purchased some engine parts! These are used to fix vehicles and require a toolkit and the mechanic job.\n\n{009900}Commands:{FFFFFF}\n/fixcar (Requires mechanic job and a toolkit)", "Okay", "");
						else SendClientMessage(playerid, WHITE, "You have purchased some engine parts. Use these to fix your vehicles.");
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased engine parts from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice1]);
						StatLog(string);
				    }
				    case 1:
				    {
				        if(Player[playerid][NosBottle] > 0)
				            return SendClientMessage(playerid, WHITE, "You already have a NOS bottle!");

						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice2])
						    return SendClientMessage(playerid, WHITE, "Insufficient funds.");

						if(Businesses[Player[playerid][InBusiness]][bSupplies] < 100)
						    return SendClientMessage(playerid, WHITE, "That item is out of stock.");

						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice2];
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice2];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice2]);
						Player[playerid][NosBottle]++;
						Businesses[Player[playerid][InBusiness]][bSupplies] -= 100;
						GenerateTrash(Player[playerid][InBusiness], 50);
						//SendClientMessage(playerid, WHITE, "You have purchased a NOS bottle. Use this to add NOS to your vehicle.");

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Nos Bottle Help", "{FFFFFF}You have purchased a nos bottle! This is used to add nos to a vehicle as a mechanic.\n\n{009900}Commands:{FFFFFF}\n/noscar (Requires mechanic job and a toolkit)", "Okay", "");
						else SendClientMessage(playerid, WHITE, "You have purchased a NOS bottle. Use this to add NOS to your vehicle.");
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased a nos bottle from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice2]);
						StatLog(string);
				    }
				    case 2:
				    {
				        if(Player[playerid][HydroKit] > 0)
				            return SendClientMessage(playerid, WHITE, "You already have a Hydraulics Kit!");

						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice3])
						    return SendClientMessage(playerid, WHITE, "Insufficient funds.");

						if(Businesses[Player[playerid][InBusiness]][bSupplies] < 100)
						    return SendClientMessage(playerid, WHITE, "That item is out of stock.");

						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice3];
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice3];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice3]);
						Player[playerid][HydroKit]++;
						Businesses[Player[playerid][InBusiness]][bSupplies] -= 100;
						GenerateTrash(Player[playerid][InBusiness], 50);
						//SendClientMessage(playerid, WHITE, "You have purchased a Hydraulics Kit. Use this to add hydraulics to your vehicle.");

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Hydraulics Kit Help", "{FFFFFF}You have purchased a hydraulics kit! This is used to add hydraulics to a vehicle as a mechanic.\n\n{009900}Commands:{FFFFFF}\n/hydcar (Requires mechanic job and a toolkit)", "Okay", "");
						else SendClientMessage(playerid, WHITE, "You have purchased a Hydraulics Kit. Use this to add hydraulics to your vehicle.");
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased a hydraulics kit from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice3]);
						StatLog(string);
				    }
				    case 3:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice4])
							return SendClientMessage(playerid, -1, "Insufficient funds.");

						if(Businesses[Player[playerid][InBusiness]][bSupplies] < 2)
							return SendClientMessage(playerid, -1, "That item is out of stock.");

						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice4];
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice4];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice4]);
						Player[playerid][Rope]++;
						Businesses[Player[playerid][InBusiness]][bSupplies] -= 2;
						GenerateTrash(Player[playerid][InBusiness], 1);
						//SendClientMessage(playerid, WHITE, "You have purchased some rope. Use /tie [playerid] to use the rope (in a car as the driver).");

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Rope Help", "{FFFFFF}You have purchased some rope! You can use this to tie up people who\nhave their hands up, or who are inside your car.\n\n{009900}Commands:{FFFFFF}\n/tie [playerid]", "Okay", "");
						else SendClientMessage(playerid, WHITE, "You have purchased some rope. Use /tie [playerid] to use the rope (in a car as the driver).");
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased a rope from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice4]);
						StatLog(string);
					}
					case 4:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice5])
							return SendClientMessage(playerid, -1, "Insufficient funds.");

						if(Businesses[Player[playerid][InBusiness]][bSupplies] < 1)
							return SendClientMessage(playerid, -1, "That item is out of stock.");

						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice5];
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice5];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice5]);
						Player[playerid][Rags]++;
						Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						GenerateTrash(Player[playerid][InBusiness], 1);
						//SendClientMessage(playerid, WHITE, "You have purchased some rags. Use /blindfold [playerid] to use the rags, to a tied person.");

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Blindfold Help", "{FFFFFF}You have purchased some rags! You can use this to blindfold or gag someone\nwhom you have tied up. They must be tied up and as always you must roleplay it!\n\n{009900}Commands:{FFFFFF}\n/blindfold [playerid]\n/gag [playerid]", "Okay", "");
						else SendClientMessage(playerid, WHITE, "You have purchased some rags. Use /blindfold [playerid] to use the rags, to a tied person.");
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased a rag from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice5]);
						StatLog(string);
					}
				    case 5:
				    {
				        if(Player[playerid][GasCans] > 0)
				            return SendClientMessage(playerid, WHITE, "You already have a Gas Can!");

						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice6])
						    return SendClientMessage(playerid, WHITE, "Insufficient funds.");

						if(Businesses[Player[playerid][InBusiness]][bSupplies] < 50)
						    return SendClientMessage(playerid, WHITE, "That item is out of stock.");

						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice6];
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice6];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice6]);
						Player[playerid][GasCans] = 1;
						Player[playerid][GasFull] = 0;
						Businesses[Player[playerid][InBusiness]][bSupplies] -= 50;
						GenerateTrash(Player[playerid][InBusiness], 25);
						//SendClientMessage(playerid, WHITE, "You have purchased a Gas Can. Use this to refill your vehicles.");
						//SendClientMessage(playerid, WHITE, "You can use /refillgascan at a gas station to refill your gas can.");

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Gas Can Help", "{FFFFFF}You have purchased a gas can! This is used to refill vehicles which are out of fuel\nwith no gas stations in sight!\n\n{009900}Commands:{FFFFFF}\n/refillgascan (Must be near a gas station fuel point)\n/refill (Must be in the driver seat of a car)", "Okay", "");
						else SendClientMessage(playerid, WHITE, "You have purchased a gas can. Use /refill in a vehicle to fill the tank.");
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased a gas can from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice6]);
						StatLog(string);
				    }
				    case 6:
				    {
				        if(Player[playerid][Workbench] > 0)
				            return SendClientMessage(playerid, WHITE, "You already have a Workbench on you!");

						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice7])
						    return SendClientMessage(playerid, WHITE, "Insufficient funds.");

						if(Businesses[Player[playerid][InBusiness]][bSupplies] < 750)
						    return SendClientMessage(playerid, WHITE, "That item is out of stock.");

						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice7];
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice7];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice7]);
						Player[playerid][Workbench]++;
						Businesses[Player[playerid][InBusiness]][bSupplies] -= 750;
						GenerateTrash(Player[playerid][InBusiness], 100);
						//SendClientMessage(playerid, WHITE, "You have purchased a Workbench. Use this to create weapons in your house (/installworkbench).");

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX,"Workbench Help", "{FFFFFF}You have purchased a workbench! This is installed inside a house/business to create certain weapons.\nMost of the weapons need to be created at a work bench and there are a few\nthat you only need a toolkit to make.\n\n{009900}Commands:{FFFFFF}\n/installworkbench (Must be inside YOUR house)", "Okay", "");
						else SendClientMessage(playerid, WHITE, "You have purchased a Workbench. Use this to create weapons in your house/business (/installworkbench).");
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased a workbench from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice7]);
						StatLog(string);
				    }
				    case 7:
				    {
				        if(Player[playerid][Toolkit] > 0)
				            return SendClientMessage(playerid, WHITE, "You already have a Toolkit!");

						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice8])
						    return SendClientMessage(playerid, WHITE, "Insufficient funds.");

						if(Businesses[Player[playerid][InBusiness]][bSupplies] < 50)
						    return SendClientMessage(playerid, WHITE, "That item is out of stock.");

						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice8];
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice8];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice8]);
						Player[playerid][Toolkit]++;
						Businesses[Player[playerid][InBusiness]][bSupplies] -= 50;
						GenerateTrash(Player[playerid][InBusiness], 50);
						//SendClientMessage(playerid, WHITE, "You have purchased a Toolkit. Use this to create weapons anywhere.");

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Toolkit Help", "{FFFFFF}You have purchased a toolkit! This is used to fix cars as a mechanic or create weapons as an arms dealer!\n\n{009900}Commands:{FFFFFF}\n/fixcar (Mechanic)\n/creategun (Arms Dealer)", "Okay", "");
						else SendClientMessage(playerid, WHITE, "You have purchased a toolkit. Use this to fix vehicles, create armour and make small guns.");
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased a toolkit from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice8]);
						StatLog(string);
				    }
				    case 8:
				    {
				        if(Player[playerid][InterComSys] > 0)
				            return SendClientMessage(playerid, WHITE, "You already have an intercom system");

						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice9])
						    return SendClientMessage(playerid, WHITE, "Insufficient funds.");

						if(Businesses[Player[playerid][InBusiness]][bSupplies] < 50)
						    return SendClientMessage(playerid, WHITE, "That item is out of stock.");

						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice9];
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice9];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice9]);

						Player[playerid][InterComSys]++;
						Businesses[Player[playerid][InBusiness]][bSupplies] -= 50;
						GenerateTrash(Player[playerid][InBusiness], 50);

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Intercom System Help", "{FFFFFF}You have purchased a business intercom system! This is used to broadcast a message to the interior of your business!\n\n{009900}Commands:{FFFFFF}\n/installintercom \n/intercom", "Okay", "");
						else SendClientMessage(playerid, WHITE, "You have purchased a business intercom system. Use this to broadcast a message to the interior of your business.");
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased a business intercom system from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice9]);
						StatLog(string);
				    }
					case 9:
					{
						if(Player[playerid][PlayingHours] < 20 && Player[playerid][VipRank] < 1)
							return SendClientMessage(playerid, WHITE, "You need at least 20 playing hours to purchase this.");
							
				        if(Player[playerid][Tent] > 0)
				            return SendClientMessage(playerid, WHITE, "You already have a tent!");
						
						if(Businesses[Player[playerid][InBusiness]][bSupplies] < 200 || Businesses[Player[playerid][InBusiness]][bProductPrice10] == 0)
							return SendClientMessage(playerid, WHITE, "That item is out of stock.");

						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice10])
						    return SendClientMessage(playerid, WHITE, "Insufficient funds.");
							
						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice10];
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice10];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice10]);
						
						Player[playerid][Tent] = 1;
						Businesses[Player[playerid][InBusiness]][bSupplies] -= 200;
						GenerateTrash(Player[playerid][InBusiness], 200);
						SendClientMessage(playerid, WHITE, "You have purchased a tent. (( /deploytent /removetent /tentstore /tenttake))");
	
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased a tent from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice10]);
						StatLog(string);
					}
					case 10:
					{
				        if(Player[playerid][Ventillation] > 0)
				            return SendClientMessage(playerid, WHITE, "You already have a ventillation upgrade!");
						
						if(Businesses[Player[playerid][InBusiness]][bSupplies] < 300 || Businesses[Player[playerid][InBusiness]][bProductPrice11] == 0)
							return SendClientMessage(playerid, WHITE, "That item is out of stock.");
				
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice11])
						    return SendClientMessage(playerid, WHITE, "Insufficient funds.");
							
						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice11];
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice11];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice11]);
						
						Player[playerid][Ventillation] = 1;
						Businesses[Player[playerid][InBusiness]][bSupplies] -= 200;
						GenerateTrash(Player[playerid][InBusiness], 200);
						SendClientMessage(playerid, WHITE, "You have purchased the first ventillation upgrade. (( /installventillation ))");
	
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased a vent upgrade 1 from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice11]);
						StatLog(string);
					}
					case 11:
					{
				        if(Player[playerid][Ventillation] > 0)
				            return SendClientMessage(playerid, WHITE, "You already have a ventillation upgrade!");
						
						if(Businesses[Player[playerid][InBusiness]][bSupplies] < 300 || Businesses[Player[playerid][InBusiness]][bProductPrice12] == 0)
							return SendClientMessage(playerid, WHITE, "That item is out of stock.");

						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice12])
						    return SendClientMessage(playerid, WHITE, "Insufficient funds.");
							
						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice12];
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice12];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice12]);
						
						Player[playerid][Ventillation] = 2;
						Businesses[Player[playerid][InBusiness]][bSupplies] -= 200;
						GenerateTrash(Player[playerid][InBusiness], 200);
						SendClientMessage(playerid, WHITE, "You have purchased the second ventillation upgrade. (( /installventillation ))");
	
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased a vent upgrade 2 from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice12]);
						StatLog(string);
					}
				}
				SaveBusiness(Player[playerid][InBusiness]);
			}
			case 4471:
			{
			    if(!response)
			        return 1;

				if(!IsNumeric(inputtext))
				{
					ShowPlayerDialog(playerid, 4471, DIALOG_STYLE_INPUT, "Fish bait", "How much fish bait would you like to buy? (MAX = 30)", "Buy", "Cancel");
				    return SendClientMessage(playerid, WHITE, "Invalid amount!");
				}
				new input = strval(inputtext);
				if(input > 30 || input < 1)
				{
					ShowPlayerDialog(playerid, 4471, DIALOG_STYLE_INPUT, "Fish bait", "How much fish bait would you like to buy? (MAX = 30)", "Buy", "Cancel");
				    return SendClientMessage(playerid, WHITE, "Choose an amount from 1 to 30!");
	    		}

				if(Player[playerid][InBusiness] == 0)
					return SendClientMessage(playerid, WHITE, "You aren't in a business.");
				new string[128];
				new amount = Player[playerid][FishingBait] + input;
				if(amount < 30)
				{
		    		new price = input * Businesses[Player[playerid][InBusiness]][bProductPrice2];

		    		if(Player[playerid][Money] < price)
		    		    return SendClientMessage(playerid, WHITE, "Insufficient funds.");

					Player[playerid][Money] -= price;
//					Businesses[Player[playerid][InBusiness]][bVault] += price;
					AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, price);
				    Player[playerid][FishingBait] += input;

					if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
						ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Fishing Bait Help", "{FFFFFF}You have purchased some fishing bait! Use this with your fishing rod and boat\nto go fishing with the fisherman job!\n\n{009900}Commands:{FFFFFF}\n/fish (Requires Fisherman Job, Fishing Rod, and a boat)", "Okay", "");
					else SendClientMessage(playerid, WHITE, "You have purchased some Fish Bait. Use this to go fishing.");
					SavePlayerData(playerid);
					format(string, sizeof(string), "%s has purchased some fish bait from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], price);
					StatLog(string);
				}
				else
				{
				    new tmp = 30 - Player[playerid][FishingBait];
					new price = tmp * Businesses[Player[playerid][InBusiness]][bProductPrice2];

		    		if(Player[playerid][Money] < price)
		    		    return SendClientMessage(playerid, WHITE, "Insufficient funds.");

					Player[playerid][Money] -= price;
//					Businesses[Player[playerid][InBusiness]][bVault] += price;
					AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, price);
				    Player[playerid][FishingBait] = 30;

					if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
						ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Fishing Bait Help", "{FFFFFF}You have purchased some fishing bait! Use this with your fishing rod and boat\nto go fishing with the fisherman job!\n\n{009900}Commands:{FFFFFF}\n/fish (Requires Fisherman Job, Fishing Rod, and a boat)", "Okay", "");
					else SendClientMessage(playerid, WHITE, "You have purchased some Fish Bait. Use this to go fishing.");
					SavePlayerData(playerid);
					format(string, sizeof(string), "%s has purchased some fish bait from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], price);
					StatLog(string);
				}
			}
			case RADIO_MENU_A:
			{
				new string[500];
				format(string, sizeof(string), "Name - %s\nURL - %s\nAvailable - %s\nBack\n", RadioSettings[listitem][StationName], RadioSettings[listitem][URL], (RadioSettings[listitem][Available]) ? ("Yes") : ("No"));
				ShowPlayerDialog(playerid, RADIO_MENU_B, DIALOG_STYLE_LIST, "Radio Options", string, "Edit", "Cancel");
				SetPVarInt(playerid, "RadioChoice", listitem);
			}
			case RADIO_MENU_B:
			{
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialog(playerid, RADIO_NAME, DIALOG_STYLE_INPUT, "Radio Options", "Enter the name of the station here", "Save", "Cancel");
					}
					case 1:
					{
						ShowPlayerDialog(playerid, RADIO_URL, DIALOG_STYLE_INPUT, "Radio Options", "Enter the radio station stream (URL)", "Save", "Cancel");
					}
					case 2:
					{
						new string[500], choice = GetPVarInt(playerid, "RadioChoice");
						if(RadioSettings[choice][Available] > 0)
							RadioSettings[choice][Available] = 0;
						else
							RadioSettings[choice][Available] = 1;
						format(string, sizeof(string), "Name - %s\nURL - %s\nAvailable - %s\nBack\n", RadioSettings[choice][StationName], RadioSettings[choice][URL], (RadioSettings[choice][Available]) ? ("Yes") : ("No"));
						ShowPlayerDialog(playerid, RADIO_MENU_B, DIALOG_STYLE_LIST, "Radio Options", string, "Edit", "Cancel");
					}
					case 3:
					{
						new string[128], end[500];
						for(new x; x < MAX_RADIO_STATIONS; x++)
						{
							format(string, sizeof(string), "%d) %s\n", x+1, RadioSettings[x][StationName]);
							strcat(end, string);
						}
						ShowPlayerDialog(playerid, RADIO_MENU_A, DIALOG_STYLE_LIST, "Radio Options", end, "Select", "Cancel");
					}
				}
			}
			case RADIO_NAME:
			{
				new choice = GetPVarInt(playerid, "RadioChoice"), string[500];
				if(!response)
				{
					format(string, sizeof(string), "Name - %s\nURL - %s\nAvailable - %s\nBack\n", RadioSettings[choice][StationName], RadioSettings[choice][URL], (RadioSettings[choice][Available]) ? ("Yes") : ("No"));
					ShowPlayerDialog(playerid, RADIO_MENU_B, DIALOG_STYLE_LIST, "Radio Options", string, "Edit", "Cancel");
				}

				if(strlen(inputtext) < 1 || strlen(inputtext) > 50)
				{
					ShowPlayerDialog(playerid, RADIO_NAME, DIALOG_STYLE_INPUT, "Radio Options", "Enter the name of the station here", "Save", "Back");
					return SendClientMessage(playerid, -1, "That name is too short or too long!");
				}

				format(RadioSettings[choice][StationName], 255, inputtext);
				format(string, sizeof(string), "You have changed the name of radio to '%s'!", RadioSettings[choice][StationName]);
				SendClientMessage(playerid, -1, string);
				format(string, sizeof(string), "Name - %s\nURL - %s\nAvailable - %s\nBack\n", RadioSettings[choice][StationName], RadioSettings[choice][URL], (RadioSettings[choice][Available]) ? ("Yes") : ("No"));
				ShowPlayerDialog(playerid, RADIO_MENU_B, DIALOG_STYLE_LIST, "Radio Options", string, "Edit", "Cancel");
				SaveRadio(choice);
			}
			case RADIO_URL:
			{
				new choice = GetPVarInt(playerid, "RadioChoice"), string[500];
				if(!response)
				{
					format(string, sizeof(string), "Name - %s\nURL - %s\nAvailable - %s\nBack\n", RadioSettings[choice][StationName], RadioSettings[choice][URL], (RadioSettings[choice][Available]) ? ("Yes") : ("No"));
					ShowPlayerDialog(playerid, RADIO_MENU_B, DIALOG_STYLE_LIST, "Radio Options", string, "Edit", "Cancel");
				}

				if(strlen(inputtext) < 1 || strlen(inputtext) > 255)
				{
					ShowPlayerDialog(playerid, RADIO_URL, DIALOG_STYLE_INPUT, "Radio Options", "Enter the radio station stream (URL)", "Save", "Back");
					return SendClientMessage(playerid, -1, "That URL is too short or too long!");
				}

				format(RadioSettings[choice][URL], 255, inputtext);
				format(string, sizeof(string), "You have changed the URL to '%s'!", RadioSettings[choice][URL]);
				SendClientMessage(playerid, -1, string);
				format(string, sizeof(string), "Name - %s\nURL - %s\nAvailable - %s\nBack\n", RadioSettings[choice][StationName], RadioSettings[choice][URL], (RadioSettings[choice][Available]) ? ("Yes") : ("No"));
				ShowPlayerDialog(playerid, RADIO_MENU_B, DIALOG_STYLE_LIST, "Radio Options", string, "Edit", "Cancel");
				SaveRadio(choice);
			}
			case GASBAR_BIZ:
			{

				if(Player[playerid][InBusiness] == 0)
					return 1;
				new string[128];
				switch(listitem)
				{
					case 0:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice1])
							return SendClientMessage(playerid, -1, "Insufficient funds.");

						if(Businesses[Player[playerid][InBusiness]][bSupplies] < 2)
							return SendClientMessage(playerid, -1, "That item is out of stock.");

						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice1];
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice1];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice1]);
						Player[playerid][Rope]++;
						Businesses[Player[playerid][InBusiness]][bSupplies] -= 2;
						GenerateTrash(Player[playerid][InBusiness], 1);
						//SendClientMessage(playerid, WHITE, "You have purchased some rope. Use /tie [playerid] to use the rope (in a car as the driver).");

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Rope Help", "{FFFFFF}You have purchased some rope! You can use this to tie up people who\nhave their hands up, or who are inside your car.\n\n{009900}Commands:{FFFFFF}\n/tie [playerid]", "Okay", "");
						else SendClientMessage(playerid, WHITE, "You have purchased some rope. Use /tie [playerid] to use the rope (in a car as the driver).");
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased rope from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice1]);
						StatLog(string);
					}
					case 1:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice2])
							return SendClientMessage(playerid, -1, "Insufficient funds.");

						if(Businesses[Player[playerid][InBusiness]][bSupplies] < 1)
							return SendClientMessage(playerid, -1, "That item is out of stock.");

						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice2];
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice2];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice2]);
						Player[playerid][Rags]++;
						Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						GenerateTrash(Player[playerid][InBusiness], 1);
						//SendClientMessage(playerid, WHITE, "You have purchased some rags. Use /blindfold [playerid] to use the rags, to a tied person.");

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Blindfold Help", "{FFFFFF}You have purchased some rags! You can use this to blindfold or gag someone\nwhom you have tied up. They must be tied up and as always you must roleplay it!\n\n{009900}Commands:{FFFFFF}\n/blindfold [playerid]\n/gag [playerid]", "Okay", "");
						else SendClientMessage(playerid, WHITE, "You have purchased some rags. Use /blindfold [playerid] to use the rags, to a tied person.");
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased a rag from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice2]);
						StatLog(string);
					}
					case 2:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice3])
							return SendClientMessage(playerid, -1, "Insufficient funds.");

						if(Businesses[Player[playerid][InBusiness]][bSupplies] < 5)
							return SendClientMessage(playerid, -1, "That item is out of stock.");

						if(Player[playerid][GasCans] > 0)
							return SendClientMessage(playerid, -1, "You can only have one gas can at a time.");

						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice3];
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice3];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice3]);
						Player[playerid][GasCans] = 1;
						Businesses[Player[playerid][InBusiness]][bSupplies] -= 5;
						GenerateTrash(Player[playerid][InBusiness], 3);
						//SendClientMessage(playerid, WHITE, "You have purchased a gas can. Use /refill in a vehicle to fill the tank.");

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Gas Can Help", "{FFFFFF}You have purchased a gas can! This is used to refill vehicles which are out of fuel\n with no gas stations in sight!\n\n{009900}Commands:{FFFFFF}\n/refillgascan (Must be near a gas station fuel point)\n/refill (Must be in the driver seat of a car)", "Okay", "");
						else SendClientMessage(playerid, WHITE, "You have purchased a gas can. Use /refill in a vehicle to fill the tank.");
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased a gas can from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice3]);
						StatLog(string);
					}
					case 3:
					{
						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice4])
							return SendClientMessage(playerid, -1, "Insufficient funds.");

						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice4];
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
						Player[playerid][HadSprunk] = 5;
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice4];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice4]);
						// Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
			//			TextDrawShowForPlayer(playerid, SprunkTextDraw);

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Sprunk Help", "{FFFFFF}You have purchased a sprunk bottle! You can use this to restore your health by hitting the {009900}LMB (Left Clicking){FFFFFF}\nOnce you are done refilling your health you can get rid of it by hitting {009900}ENTER{FFFFFF}.\n\n{009900}Commands:{FFFFFF}\nNone", "Okay", "");
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased a sprunk from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice4]);
						StatLog(string);
					}
				}
				SaveBusiness(Player[playerid][InBusiness]);
			}
			case 11211:
			{

				if(Player[playerid][InBusiness] == 0)
					return 1;
				new string[128];
				switch(listitem)
				{
				    case 0:
				    {
				        if(Player[playerid][FishingRod] > 0)
				            return SendClientMessage(playerid, WHITE, "You already have a Fishing Rod!");

						if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice1])
						    return SendClientMessage(playerid, WHITE, "Insufficient funds.");

						Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice1];
//						Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice1];
						AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice1]);
						Player[playerid][FishingRod]++;
						//SendClientMessage(playerid, WHITE, "You have purchased a Fishing Rod. Use this to go fishing.");

						if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
							ShowPlayerDialog(playerid, BUSINESS_HELP,DIALOG_STYLE_MSGBOX, "Fishing Rod Help", "{FFFFFF}You have purchased a fishing rod! Use this to go fishing with your bait and boat as a fisherman!\n\n{009900}Commands:{FFFFFF}\n/fish (Requires Fisherman Job, Fishing Bait, and a Boat)", "Okay", "");
						else SendClientMessage(playerid, WHITE, "You have purchased a Fishing Rod. Use this to go fishing.");
						SavePlayerData(playerid);
						format(string, sizeof(string), "%s has purchased a fishing rod from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice1]);
						StatLog(string);
				    }
				    case 1:
				    {
				        if(Player[playerid][FishingBait] >= 30)
				            return SendClientMessage(playerid, WHITE, "You already have enough bait on you!");

						ShowPlayerDialog(playerid, 4471, DIALOG_STYLE_INPUT, "Fish bait", "How much fish bait would you like to buy? (MAX = 30)", "Buy", "Cancel");
				    }
				}			
				SaveBusiness(Player[playerid][InBusiness]);
			}
			case EVENT_CHOOSE:
			{
				if(!response)
					return 1;

				new string[550];

				if(IsAnyEventHappening())
				{
					SendClientMessage(playerid, -1, "There is already an active event.");
					return cmd_setupevent(playerid, "");
				}

				switch(listitem)
				{
					case 0: //DM
					{
						new max_players[10];
						strcpy(max_players, IntToFormattedStr(EditEvent[playerid][MaxPlayers]), sizeof(max_players));
						EditEvent[playerid][EventType] = 1;
						format(string, sizeof(string), "Health		{33A10B}%d{FFFFFF}\nArmour		{33A10B}%d{FFFFFF}\nSkin		{33A10B}%d{FFFFFF}\nVIP		%s{FFFFFF}\n", EditEvent[playerid][EventHp], EditEvent[playerid][EventArm], EditEvent[playerid][Skin], (EditEvent[playerid][Vip]) ? ("{33A10B}Yes") : ("{FF0000}No"));
						format(string, sizeof(string), "%sWeapon 1  {33A10B}%s{FFFFFF}\nWeapon 2  {33A10B}%s{FFFFFF}\nWeapon 3  {33A10B}%s{FFFFFF}\nWeapon 4  {33A10B}%s{FFFFFF}\nWeapon 5  {33A10B}%s{FFFFFF}\n", string, weapons[EditEvent[playerid][Weapon1]], weapons[EditEvent[playerid][Weapon2]], weapons[EditEvent[playerid][Weapon3]], weapons[EditEvent[playerid][Weapon4]], weapons[EditEvent[playerid][Weapon5]]);
						format(string, sizeof(string), "%sMax Players  {33A10B}%s{FFFFFF}\nAutoPick Winner  %s{FFFFFF}\nSave\n",string, (EditEvent[playerid][MaxPlayers] == 0) ? ("{FF0000}No") : (max_players), (EditEvent[playerid][AutoPick] == 1) ? ("{33A10B}Yes (Not recommended for use with large events!)") : ("{FF0000}No"));
						ShowPlayerDialog(playerid, EVENT_MAIN, DIALOG_STYLE_LIST, "Event properties", string, "Select", "Cancel");
					}
					case 1: //TDM
					{
						new max_players[10], max_deaths[10];
						strcpy(max_players, IntToFormattedStr(EditEvent[playerid][MaxPlayers]), sizeof(max_players));
						strcpy(max_deaths, IntToFormattedStr(EditEvent[playerid][MaxDeaths]), sizeof(max_deaths));
						EditEvent[playerid][EventType] = 2;
						format(string, sizeof(string), "Team 1 Spawn\nTeam 2 Spawn\nHealth  {33A10B}%d{FFFFFF}\nArmour  {33A10B}%d{FFFFFF}\nTeam 1 Skin  {33A10B}%d{FFFFFF}\nTeam 2 Skin  {33A10B}%d{FFFFFF}\nVIP  %s{FFFFFF}\n", EditEvent[playerid][EventHp], EditEvent[playerid][EventArm], EditEvent[playerid][Skin], EditEvent[playerid][Skin2], (EditEvent[playerid][Vip]) ? ("{33A10B}Yes") : ("{FF0000}No"));
						format(string, sizeof(string), "%sWeapon 1  {33A10B}%s{FFFFFF}\nWeapon 2  {33A10B}%s{FFFFFF}\nWeapon 3  {33A10B}%s{FFFFFF}\nWeapon 4  {33A10B}%s{FFFFFF}\nWeapon 5  {33A10B}%s{FFFFFF}\n", string, weapons[EditEvent[playerid][Weapon1]], weapons[EditEvent[playerid][Weapon2]], weapons[EditEvent[playerid][Weapon3]], weapons[EditEvent[playerid][Weapon4]], weapons[EditEvent[playerid][Weapon5]]);
						format(string, sizeof(string), "%sMax Players  {33A10B}%s{FFFFFF}\nScore Limit  {33A10B}%d{FFFFFF}\nMax Deaths:  {33A10B}%s{FFFFFF}\nSave\n", string, (EditEvent[playerid][MaxPlayers] == 0) ? ("{FF0000}No") : (max_players), EditEvent[playerid][ScoreLimit], (EditEvent[playerid][MaxDeaths] == 0) ? ("Unlimited") : (max_deaths));
						ShowPlayerDialog(playerid, EVENT_TDM, DIALOG_STYLE_LIST, "Event properties", string, "Select", "Cancel");
					}
					case 2: //Rally
					{
						EditEvent[playerid][EventType] = 3;

						if(RallyInProgress > 0)
						{
							SendClientMessage(playerid, WHITE, "A rally has already been setup or started!");
							return cmd_setupevent(playerid, "");
						}

						if(EditRally[playerid][Vehicle] < 400 || EditRally[playerid][Vehicle] > 611)
							EditRally[playerid][Vehicle] = 400;

						if(EditRally[playerid][Course] < 1 || EditRally[playerid][Course] > MAX_RALLIES)
							EditRally[playerid][Course] = 1;

						format(string, sizeof(string), "Vehicle:		{33A10B}%s{FFFFFF}\nRace:		{33A10B}%d{FFFFFF}\nVIP:		%s{FFFFFF}\nNOS:		%s{FFFFFF}\nStart rally\n", vNames[EditRally[playerid][Vehicle]-400], EditRally[playerid][Course], (EditRally[playerid][Vip]) ? ("{33A10B}YES") : ("{FF0000}NO"), (EditRally[playerid][Nos]) ? ("{33A10B}YES") : ("{FF0000}NO"));
						ShowPlayerDialog(playerid, RALLY_MAIN, DIALOG_STYLE_LIST, "Rally settings", string, "Select", "Cancel");
					}
					case 3: //Derby
					{
						EditEvent[playerid][EventType] = 4;

						if(DerbyStatus > 0)
						{
							SendClientMessage(playerid, WHITE, "A derby has already been setup or started!");
							return cmd_setupevent(playerid, "");
						}

						if(EditEvent[playerid][derbyVehicle] < 400 || EditEvent[playerid][derbyVehicle] > 611)
							EditEvent[playerid][derbyVehicle] = 400;

						format(string, sizeof(string), "Vehicle:  {33A10B}%s{FFFFFF}\nVIP:  %s{FFFFFF}\nNOS: %s{FFFFFF}\nStart Derby\n", vNames[EditEvent[playerid][derbyVehicle]-400],  (EditEvent[playerid][derbyVip]) ? ("{33A10B}Yes") : ("{FF0000}No"), (EditEvent[playerid][derbyNos]) ? ("{33A10B}Yes") : ("{FF0000}No"));
						ShowPlayerDialog(playerid, DERBY_MAIN, DIALOG_STYLE_LIST, "Derby Settings", string, "Select", "Cancel");
					}
				}
			}
			case EVENT_TDM:
			{
				if(!response)
					return cmd_setupevent(playerid, "");

				switch(listitem)
				{
					case 0: //Team One Spawn
					{
						GetPlayerPos(playerid, EventX, EventY, EventZ);
						EventWorld = GetPlayerVirtualWorld(playerid);
						EventInt = GetPlayerInterior(playerid);
						SendClientMessage(playerid, -1, "You have set the spawn position for team one. Use /continue to continue making the event.");
					}
					case 1:
					{
						GetPlayerPos(playerid, EventPos2[0], EventPos2[1], EventPos2[2]);
						SendClientMessage(playerid, -1, "You have set the spawn position for team two. Use /continue to continue making the event.");
					}
					case 2: //Health
					{
						ShowPlayerDialog(playerid, EVENT_HEALTH, DIALOG_STYLE_INPUT, "Event properties - health", "Select the health value for the event.", "Okay", "Cancel");
					}
					case 3: //Armour
					{
						ShowPlayerDialog(playerid, EVENT_ARMOUR, DIALOG_STYLE_INPUT, "Event properties - armour", "Select the armour value for the event.", "Okay", "Cancel");
					}
					case 4: //Skin
					{
						SetPVarInt(playerid, "teamSkin", 1);
						ShowPlayerDialog(playerid, EVENT_SKIN, DIALOG_STYLE_INPUT, "Event properties - skin", "Set the skin for the event.", "Okay", "Cancel");
					}
					case 5:
					{
						SetPVarInt(playerid, "teamSkin", 2);
						ShowPlayerDialog(playerid, EVENT_SKIN, DIALOG_STYLE_INPUT, "Event properties - skin", "Set the skin for the event.", "Okay", "Cancel");
					}
					case 6: //Vip
					{
						if(EditEvent[playerid][Vip] == 0)
							EditEvent[playerid][Vip] = 1;
						else
							EditEvent[playerid][Vip] = 0;

						return cmd_continue(playerid, "");
					}
					case 7: //Weapon 1
					{
						SetPVarInt(playerid, "EventWeapon", 1);
						ShowPlayerDialog(playerid, EVENT_WEAPONS, DIALOG_STYLE_LIST, "Event properties - weapons", "Input weapon ID\nSelect weapon from list\nBack\n", "Select", "Cancel");
					}
					case 8: //Weapon 2
					{
						SetPVarInt(playerid, "EventWeapon", 2);
						ShowPlayerDialog(playerid, EVENT_WEAPONS, DIALOG_STYLE_LIST, "Event properties - weapons", "Input weapon ID\nSelect weapon from list\nBack\n", "Select", "Cancel");
					}
					case 9: //Weapon 3
					{
						SetPVarInt(playerid, "EventWeapon", 3);
						ShowPlayerDialog(playerid, EVENT_WEAPONS, DIALOG_STYLE_LIST, "Event properties - weapons", "Input weapon ID\nSelect weapon from list\nBack\n", "Select", "Cancel");
					}
					case 10: //Weapon 4
					{
						SetPVarInt(playerid, "EventWeapon", 4);
						ShowPlayerDialog(playerid, EVENT_WEAPONS, DIALOG_STYLE_LIST, "Event properties - weapons", "Input weapon ID\nSelect weapon from list\nBack\n", "Select", "Cancel");
					}
					case 11: //Weapon 5
					{
						SetPVarInt(playerid, "EventWeapon", 5);
						ShowPlayerDialog(playerid, EVENT_WEAPONS, DIALOG_STYLE_LIST, "Event properties - weapons", "Input weapon ID\nSelect weapon from list\nBack\n", "Select", "Cancel");
					}
					case 12:
					{
						ShowPlayerDialog(playerid, EVENT_MAXPLAYERS, DIALOG_STYLE_INPUT, "Event properties - Max Players", "What would you like the max players to be? (Input 0 for none)", "Okay", "Cancel");
					}
					case 13:
					{
						ShowPlayerDialog(playerid, EVENT_SCORELIMIT, DIALOG_STYLE_INPUT, "Event properties - Score Limit", "What would you like the score limit to be? (Default = 25)", "Okay", "Cancel");
					}
					case 14:
					{
						ShowPlayerDialog(playerid, EVENT_MAXDEATHS, DIALOG_STYLE_INPUT, "Event properties - Max Deaths", "What would you like the max amount of deaths to be? (0 = unlimited)", "Okay", "Cancel");
					}
					case 15:
					{
						if(IsAnyEventHappening(2))
							return SendClientMessage(playerid, -1, "You can't start an event while another event is in progress.");

						EventSkin = EditEvent[playerid][Skin];
						EventSkin2 = EditEvent[playerid][Skin2];
						EventHP = EditEvent[playerid][EventHp];
						EventArmour = EditEvent[playerid][EventArm];
						EventVip = EditEvent[playerid][Vip];
						EventWeapon1 = EditEvent[playerid][Weapon1];
						EventWeapon2 = EditEvent[playerid][Weapon2];
						EventWeapon3 = EditEvent[playerid][Weapon3];
						EventWeapon4 = EditEvent[playerid][Weapon4];
						EventWeapon5 = EditEvent[playerid][Weapon5];
						KillsToWin = EditEvent[playerid][ScoreLimit];
						eventType = 2;
						maxPlayers = EditEvent[playerid][MaxPlayers];
						maxDeaths = EditEvent[playerid][MaxDeaths];
						EditEvent[playerid][MaxDeaths] = 0;
						EditEvent[playerid][ScoreLimit] = 25;
						EditEvent[playerid][MaxPlayers] = 0;
						EditEvent[playerid][EventType] = 0;
						EditEvent[playerid][NoLagShoot] = 0;

						SendClientMessage(playerid, -1, "You have saved your current event properties. Use /startevent to start the event.");
					}
				}
			}
			case EVENT_MAIN:
			{
				if(!response)
					return cmd_setupevent(playerid, "");

				switch(listitem)
				{
					case 0: //Health
					{
						ShowPlayerDialog(playerid, EVENT_HEALTH, DIALOG_STYLE_INPUT, "Event properties - health", "Select the health value for the event.", "Okay", "Cancel");
					}
					case 1: //Armour
					{
						ShowPlayerDialog(playerid, EVENT_ARMOUR, DIALOG_STYLE_INPUT, "Event properties - armour", "Select the armour value for the event.", "Okay", "Cancel");
					}
					case 2: //Skin
					{
						SetPVarInt(playerid, "teamSkin", 1);
						ShowPlayerDialog(playerid, EVENT_SKIN, DIALOG_STYLE_INPUT, "Event properties - skin", "Set the skin for the event.", "Okay", "Cancel");
					}
					case 3: //Vip
					{
						if(EditEvent[playerid][Vip] == 0)
							EditEvent[playerid][Vip] = 1;
						else
							EditEvent[playerid][Vip] = 0;

						return cmd_continue(playerid, "");
					}
					case 4: //Weapon 1
					{
						SetPVarInt(playerid, "EventWeapon", 1);
						ShowPlayerDialog(playerid, EVENT_WEAPONS, DIALOG_STYLE_LIST, "Event properties - weapons", "Input weapon ID\nSelect weapon from list\nBack\n", "Select", "Cancel");
					}
					case 5: //Weapon 2
					{
						SetPVarInt(playerid, "EventWeapon", 2);
						ShowPlayerDialog(playerid, EVENT_WEAPONS, DIALOG_STYLE_LIST, "Event properties - weapons", "Input weapon ID\nSelect weapon from list\nBack\n", "Select", "Cancel");
					}
					case 6: //Weapon 3
					{
						SetPVarInt(playerid, "EventWeapon", 3);
						ShowPlayerDialog(playerid, EVENT_WEAPONS, DIALOG_STYLE_LIST, "Event properties - weapons", "Input weapon ID\nSelect weapon from list\nBack\n", "Select", "Cancel");
					}
					case 7: //Weapon 4
					{
						SetPVarInt(playerid, "EventWeapon", 4);
						ShowPlayerDialog(playerid, EVENT_WEAPONS, DIALOG_STYLE_LIST, "Event properties - weapons", "Input weapon ID\nSelect weapon from list\nBack\n", "Select", "Cancel");
					}
					case 8: //Weapon 5
					{
						SetPVarInt(playerid, "EventWeapon", 5);
						ShowPlayerDialog(playerid, EVENT_WEAPONS, DIALOG_STYLE_LIST, "Event properties - weapons", "Input weapon ID\nSelect weapon from list\nBack\n", "Select", "Cancel");
					}
					case 9:
					{
						ShowPlayerDialog(playerid, EVENT_MAXPLAYERS, DIALOG_STYLE_INPUT, "Event properties - Max Players", "What would you like the max players to be? (Input 0 for none)", "Okay", "Cancel");
					}
					case 10:
					{
						if(EditEvent[playerid][AutoPick] == 0)
							EditEvent[playerid][AutoPick] = 1;
						else EditEvent[playerid][AutoPick] = 0;

						return cmd_continue(playerid, "");
					}
					case 11: //Save
					{
						if(IsAnyEventHappening(1))
							return SendClientMessage(playerid, -1, "You can't start an event while another event is in progress.");

						GetPlayerPos(playerid, EventX, EventY, EventZ);
						EventWorld = GetPlayerVirtualWorld(playerid);
						EventInt = GetPlayerInterior(playerid);

						EventSkin = EditEvent[playerid][Skin];
						EventHP = EditEvent[playerid][EventHp];
						EventArmour = EditEvent[playerid][EventArm];
						EventVip = EditEvent[playerid][Vip];
						EventWeapon1 = EditEvent[playerid][Weapon1];
						EventWeapon2 = EditEvent[playerid][Weapon2];
						EventWeapon3 = EditEvent[playerid][Weapon3];
						EventWeapon4 = EditEvent[playerid][Weapon4];
						EventWeapon5 = EditEvent[playerid][Weapon5];
						AutoPickWinner = EditEvent[playerid][AutoPick];
						eventType = 1;
						maxPlayers = EditEvent[playerid][MaxPlayers];
						EditEvent[playerid][AutoPick] = 0;
						EditEvent[playerid][MaxPlayers] = 0;
						EditEvent[playerid][EventType] = 0;
						EditEvent[playerid][NoLagShoot] = 0;
						SendClientMessage(playerid, -1, "You have saved your current event properties. Use /startevent to start the event.");
					}
				}
			}
			case EVENT_MAXDEATHS:
			{
				if(isnull(inputtext) || !IsNumeric(inputtext) || strval(inputtext) < 0)
				{
					ShowPlayerDialog(playerid, EVENT_MAXDEATHS, DIALOG_STYLE_INPUT, "Event properties - Max Deaths", "What would you like the max amount of deaths to be? (0 = unlimited)", "Okay", "Cancel");
					return SendClientMessage(playerid, -1, "Error, try again.");
				}

				new value = strval(inputtext);

				new string[64];
				EditEvent[playerid][MaxDeaths] = value;
				format(string, sizeof(string), "You have set the max deaths to %d", value);
				SendClientMessage(playerid, -1, string);
				return cmd_continue(playerid, "");
			}
			case EVENT_MAXPLAYERS:
			{
				if(isnull(inputtext) || !IsNumeric(inputtext) || strval(inputtext) < 0)
				{
					ShowPlayerDialog(playerid, EVENT_MAXPLAYERS, DIALOG_STYLE_INPUT, "Event properties - Max Players", "What would you like the max players to be? (Input 0 for none)", "Okay", "Cancel");
					return SendClientMessage(playerid, -1, "Error, try again.");
				}

				new value = strval(inputtext);

				new string[64];
				EditEvent[playerid][MaxPlayers] = value;
				format(string, sizeof(string), "You have set the player limit to %d.", value);
				SendClientMessage(playerid, -1, string);
				return cmd_continue(playerid, "");
			}
			case EVENT_SCORELIMIT:
			{
				if(isnull(inputtext) || !IsNumeric(inputtext) || strval(inputtext) < 1)
				{
					ShowPlayerDialog(playerid, EVENT_SCORELIMIT, DIALOG_STYLE_INPUT, "Event properties - Score Limit", "What would you like the score limit to be? (Default = 25)", "Okay", "Cancel");
					return SendClientMessage(playerid, -1, "Error, try again.");
				}

				new value = strval(inputtext);

				new string[128];
				if(value < 25)
					return SendClientMessage(playerid, -1, "The score limit must be at least 25.");

				EditEvent[playerid][ScoreLimit] = value;
				format(string, sizeof(string), "You have set the score limit to %d.", value);
				SendClientMessage(playerid, -1, string);
				return cmd_continue(playerid, "");
			}
			case EVENT_HEALTH:
			{
				if(isnull(inputtext) || !IsNumeric(inputtext) || strval(inputtext) < 1)
				{
					ShowPlayerDialog(playerid, EVENT_HEALTH, DIALOG_STYLE_INPUT, "Event properties - health", "Select the health value for the event.", "Okay", "Cancel");
					return SendClientMessage(playerid, -1, "Error, try again.");
				}

				new string[500], value = strval(inputtext);
				EditEvent[playerid][EventHp] = value;
				format(string, sizeof(string), "You've set the health value to %d.", value);
				SendClientMessage(playerid, -1, string);

				switch(EditEvent[playerid][EventType])
				{
					case 1: //DM
					{
						new max_players[10];
						strcpy(max_players, IntToFormattedStr(EditEvent[playerid][MaxPlayers]), sizeof(max_players));
						format(string, sizeof(string), "Health		{33A10B}%d{FFFFFF}\nArmour		{33A10B}%d{FFFFFF}\nSkin		{33A10B}%d{FFFFFF}\nVIP		%s{FFFFFF}\n", EditEvent[playerid][EventHp], EditEvent[playerid][EventArm], EditEvent[playerid][Skin], (EditEvent[playerid][Vip]) ? ("{33A10B}Yes") : ("{FF0000}No"));
						format(string, sizeof(string), "%sWeapon 1  {33A10B}%s{FFFFFF}\nWeapon 2  {33A10B}%s{FFFFFF}\nWeapon 3  {33A10B}%s{FFFFFF}\nWeapon 4  {33A10B}%s{FFFFFF}\nWeapon 5  {33A10B}%s{FFFFFF}\n", string, weapons[EditEvent[playerid][Weapon1]], weapons[EditEvent[playerid][Weapon2]], weapons[EditEvent[playerid][Weapon3]], weapons[EditEvent[playerid][Weapon4]], weapons[EditEvent[playerid][Weapon5]]);
						format(string, sizeof(string), "%sMax Players  {33A10B}%s{FFFFFF}\nAutoPick Winner  %s{FFFFFF}\nSave\n",string, (EditEvent[playerid][MaxPlayers] == 0) ? ("{FF0000}No") : (max_players), (EditEvent[playerid][AutoPick] == 1) ? ("{33A10B}Yes") : ("{FF0000}No"));
						ShowPlayerDialog(playerid, EVENT_MAIN, DIALOG_STYLE_LIST, "Event properties", string, "Select", "Cancel");
					}
					default: //TDM
					{
						new max_players[10];
						strcpy(max_players, IntToFormattedStr(EditEvent[playerid][MaxPlayers]), sizeof(max_players));
						format(string, sizeof(string), "Team 1 Spawn\nTeam 2 Spawn\nHealth  {33A10B}%d{FFFFFF}\nArmour  {33A10B}%d{FFFFFF}\nTeam 1 Skin  {33A10B}%d{FFFFFF}\nTeam 2 Skin  {33A10B}%d{FFFFFF}\nVIP  %s{FFFFFF}\n", EditEvent[playerid][EventHp], EditEvent[playerid][EventArm], EditEvent[playerid][Skin], EditEvent[playerid][Skin2], (EditEvent[playerid][Vip]) ? ("{33A10B}Yes") : ("{FF0000}No"));
						format(string, sizeof(string), "%sWeapon 1  {33A10B}%s{FFFFFF}\nWeapon 2  {33A10B}%s{FFFFFF}\nWeapon 3  {33A10B}%s{FFFFFF}\nWeapon 4  {33A10B}%s{FFFFFF}\nWeapon 5  {33A10B}%s{FFFFFF}\n", string, weapons[EditEvent[playerid][Weapon1]], weapons[EditEvent[playerid][Weapon2]], weapons[EditEvent[playerid][Weapon3]], weapons[EditEvent[playerid][Weapon4]], weapons[EditEvent[playerid][Weapon5]]);
						format(string, sizeof(string), "%sMax Players  {33A10B}%s{FFFFFF}\nScore Limit  {33A10B}%d{FFFFFF}\nSave\n", string, (EditEvent[playerid][MaxPlayers] == 0) ? ("{FF0000}No") : (max_players), EditEvent[playerid][ScoreLimit]);
						ShowPlayerDialog(playerid, EVENT_TDM, DIALOG_STYLE_LIST, "Event properties", string, "Select", "Cancel");
					}
				}
			}
			case EVENT_ARMOUR:
			{
				if(isnull(inputtext) || !IsNumeric(inputtext) || strval(inputtext) < 1)
				{
					ShowPlayerDialog(playerid, EVENT_ARMOUR, DIALOG_STYLE_INPUT, "Event properties - armour", "Select the armour value for the event.", "Okay", "Cancel");
					return SendClientMessage(playerid, -1, "Error, try again.");
				}

				new string[500], value = strval(inputtext);
				EditEvent[playerid][EventArm] = value;
				format(string, sizeof(string), "You've set the armour value to %d.", value);
				SendClientMessage(playerid, -1, string);

				switch(EditEvent[playerid][EventType])
				{
					case 1: //DM
					{
						new max_players[10];
						strcpy(max_players, IntToFormattedStr(EditEvent[playerid][MaxPlayers]), sizeof(max_players));
						format(string, sizeof(string), "Health		{33A10B}%d{FFFFFF}\nArmour		{33A10B}%d{FFFFFF}\nSkin		{33A10B}%d{FFFFFF}\nVIP		%s{FFFFFF}\n", EditEvent[playerid][EventHp], EditEvent[playerid][EventArm], EditEvent[playerid][Skin], (EditEvent[playerid][Vip]) ? ("{33A10B}Yes") : ("{FF0000}No"));
						format(string, sizeof(string), "%sWeapon 1  {33A10B}%s{FFFFFF}\nWeapon 2  {33A10B}%s{FFFFFF}\nWeapon 3  {33A10B}%s{FFFFFF}\nWeapon 4  {33A10B}%s{FFFFFF}\nWeapon 5  {33A10B}%s{FFFFFF}\n", string, weapons[EditEvent[playerid][Weapon1]], weapons[EditEvent[playerid][Weapon2]], weapons[EditEvent[playerid][Weapon3]], weapons[EditEvent[playerid][Weapon4]], weapons[EditEvent[playerid][Weapon5]]);
						format(string, sizeof(string), "%sMax Players  {33A10B}%s{FFFFFF}\nAutoPick Winner  %s{FFFFFF}\nSave\n",string, (EditEvent[playerid][MaxPlayers] == 0) ? ("{FF0000}No") : (max_players), (EditEvent[playerid][AutoPick] == 1) ? ("{33A10B}Yes") : ("{FF0000}No"));
						ShowPlayerDialog(playerid, EVENT_MAIN, DIALOG_STYLE_LIST, "Event properties", string, "Select", "Cancel");
					}
					default: //TDM
					{
						new max_players[10];
						strcpy(max_players, IntToFormattedStr(EditEvent[playerid][MaxPlayers]), sizeof(max_players));
						format(string, sizeof(string), "Team 1 Spawn\nTeam 2 Spawn\nHealth  {33A10B}%d{FFFFFF}\nArmour  {33A10B}%d{FFFFFF}\nTeam 1 Skin  {33A10B}%d{FFFFFF}\nTeam 2 Skin  {33A10B}%d{FFFFFF}\nVIP  %s{FFFFFF}\n", EditEvent[playerid][EventHp], EditEvent[playerid][EventArm], EditEvent[playerid][Skin], EditEvent[playerid][Skin2], (EditEvent[playerid][Vip]) ? ("{33A10B}Yes") : ("{FF0000}No"));
						format(string, sizeof(string), "%sWeapon 1  {33A10B}%s{FFFFFF}\nWeapon 2  {33A10B}%s{FFFFFF}\nWeapon 3  {33A10B}%s{FFFFFF}\nWeapon 4  {33A10B}%s{FFFFFF}\nWeapon 5  {33A10B}%s{FFFFFF}\n", string, weapons[EditEvent[playerid][Weapon1]], weapons[EditEvent[playerid][Weapon2]], weapons[EditEvent[playerid][Weapon3]], weapons[EditEvent[playerid][Weapon4]], weapons[EditEvent[playerid][Weapon5]]);
						format(string, sizeof(string), "%sMax Players  {33A10B}%s{FFFFFF}\nScore Limit  {33A10B}%d{FFFFFF}\nSave\n", string, (EditEvent[playerid][MaxPlayers] == 0) ? ("{FF0000}No") : (max_players), EditEvent[playerid][ScoreLimit]);
						ShowPlayerDialog(playerid, EVENT_TDM, DIALOG_STYLE_LIST, "Event properties", string, "Select", "Cancel");
					}
				}
			}
			case EVENT_SKIN:
			{
				if(isnull(inputtext) || !IsNumeric(inputtext) || strval(inputtext) < 0 || strval(inputtext) > MAX_SKINS)
				{
					ShowPlayerDialog(playerid, EVENT_SKIN, DIALOG_STYLE_INPUT, "Event properties - skin", "Set the skin for the event.", "Okay", "Cancel");
					return SendClientMessage(playerid, -1, "Error, try again.");
				}

				new string[500], value = strval(inputtext);

				switch(GetPVarInt(playerid, "teamSkin"))
				{
					case 1: EditEvent[playerid][Skin] = value;
					case 2: EditEvent[playerid][Skin2] = value;
					default: SendClientMessage(playerid, -1, "Error: Var value didn't set properly. Blame Chenko. (Line: 15757)");
				}

				format(string, sizeof(string), "You've set the skin to %d.", value);
				SendClientMessage(playerid, -1, string);


				switch(EditEvent[playerid][EventType])
				{
					case 1: //DM
					{
						new max_players[10];
						strcpy(max_players, IntToFormattedStr(EditEvent[playerid][MaxPlayers]), sizeof(max_players));
						format(string, sizeof(string), "Health		{33A10B}%d{FFFFFF}\nArmour		{33A10B}%d{FFFFFF}\nSkin		{33A10B}%d{FFFFFF}\nVIP		%s{FFFFFF}\n", EditEvent[playerid][EventHp], EditEvent[playerid][EventArm], EditEvent[playerid][Skin], (EditEvent[playerid][Vip]) ? ("{33A10B}Yes") : ("{FF0000}No"));
						format(string, sizeof(string), "%sWeapon 1  {33A10B}%s{FFFFFF}\nWeapon 2  {33A10B}%s{FFFFFF}\nWeapon 3  {33A10B}%s{FFFFFF}\nWeapon 4  {33A10B}%s{FFFFFF}\nWeapon 5  {33A10B}%s{FFFFFF}\n", string, weapons[EditEvent[playerid][Weapon1]], weapons[EditEvent[playerid][Weapon2]], weapons[EditEvent[playerid][Weapon3]], weapons[EditEvent[playerid][Weapon4]], weapons[EditEvent[playerid][Weapon5]]);
						format(string, sizeof(string), "%sMax Players  {33A10B}%s{FFFFFF}\nAutoPick Winner  %s{FFFFFF}\nSave\n",string, (EditEvent[playerid][MaxPlayers] == 0) ? ("{FF0000}No") : (max_players), (EditEvent[playerid][AutoPick] == 1) ? ("{33A10B}Yes") : ("{FF0000}No"));
						ShowPlayerDialog(playerid, EVENT_MAIN, DIALOG_STYLE_LIST, "Event properties", string, "Select", "Cancel");
					}
					default: //TDM
					{
						new max_players[10];
						strcpy(max_players, IntToFormattedStr(EditEvent[playerid][MaxPlayers]), sizeof(max_players));
						format(string, sizeof(string), "Team 1 Spawn\nTeam 2 Spawn\nHealth  {33A10B}%d{FFFFFF}\nArmour  {33A10B}%d{FFFFFF}\nTeam 1 Skin  {33A10B}%d{FFFFFF}\nTeam 2 Skin  {33A10B}%d{FFFFFF}\nVIP  %s{FFFFFF}\n", EditEvent[playerid][EventHp], EditEvent[playerid][EventArm], EditEvent[playerid][Skin], EditEvent[playerid][Skin2], (EditEvent[playerid][Vip]) ? ("{33A10B}Yes") : ("{FF0000}No"));
						format(string, sizeof(string), "%sWeapon 1  {33A10B}%s{FFFFFF}\nWeapon 2  {33A10B}%s{FFFFFF}\nWeapon 3  {33A10B}%s{FFFFFF}\nWeapon 4  {33A10B}%s{FFFFFF}\nWeapon 5  {33A10B}%s{FFFFFF}\n", string, weapons[EditEvent[playerid][Weapon1]], weapons[EditEvent[playerid][Weapon2]], weapons[EditEvent[playerid][Weapon3]], weapons[EditEvent[playerid][Weapon4]], weapons[EditEvent[playerid][Weapon5]]);
						format(string, sizeof(string), "%sMax Players  {33A10B}%s{FFFFFF}\nScore Limit  {33A10B}%d{FFFFFF}\nSave\n", string, (EditEvent[playerid][MaxPlayers] == 0) ? ("{FF0000}No") : (max_players), EditEvent[playerid][ScoreLimit]);
						ShowPlayerDialog(playerid, EVENT_TDM, DIALOG_STYLE_LIST, "Event properties", string, "Select", "Cancel");
					}
				}
			}
			case EVENT_WEAPONS:
			{
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialog(playerid, EVENT_WEAPONS_ID, DIALOG_STYLE_INPUT, "Event properties - weapon id", "Set the weapon ID for the event", "Okay", "Cancel");
					}
					case 1:
					{
						new string[128], end[550];
						for(new i; i < sizeof(weapons); i++)
						{
							format(string, sizeof(string), "%s\n", weapons[i]);
							strcat(end, string);
						}
						ShowPlayerDialog(playerid, EVENT_WEAPONS_LIST, DIALOG_STYLE_LIST, "Event properties - weapon list", end, "Okay", "Cancel");
					}
					case 2:
					{
						new string[500];
						switch(EditEvent[playerid][EventType])
						{
					case 1: //DM
					{
						new max_players[10];
						strcpy(max_players, IntToFormattedStr(EditEvent[playerid][MaxPlayers]), sizeof(max_players));
						format(string, sizeof(string), "Health		{33A10B}%d{FFFFFF}\nArmour		{33A10B}%d{FFFFFF}\nSkin		{33A10B}%d{FFFFFF}\nVIP		%s{FFFFFF}\n", EditEvent[playerid][EventHp], EditEvent[playerid][EventArm], EditEvent[playerid][Skin], (EditEvent[playerid][Vip]) ? ("{33A10B}Yes") : ("{FF0000}No"));
						format(string, sizeof(string), "%sWeapon 1  {33A10B}%s{FFFFFF}\nWeapon 2  {33A10B}%s{FFFFFF}\nWeapon 3  {33A10B}%s{FFFFFF}\nWeapon 4  {33A10B}%s{FFFFFF}\nWeapon 5  {33A10B}%s{FFFFFF}\n", string, weapons[EditEvent[playerid][Weapon1]], weapons[EditEvent[playerid][Weapon2]], weapons[EditEvent[playerid][Weapon3]], weapons[EditEvent[playerid][Weapon4]], weapons[EditEvent[playerid][Weapon5]]);
						format(string, sizeof(string), "%sMax Players  {33A10B}%s{FFFFFF}\nAutoPick Winner  %s{FFFFFF}\nSave\n",string, (EditEvent[playerid][MaxPlayers] == 0) ? ("{FF0000}No") : (max_players), (EditEvent[playerid][AutoPick] == 1) ? ("{33A10B}Yes") : ("{FF0000}No"));
						ShowPlayerDialog(playerid, EVENT_MAIN, DIALOG_STYLE_LIST, "Event properties", string, "Select", "Cancel");
					}
					default: //TDM
					{
						new max_players[10];
						strcpy(max_players, IntToFormattedStr(EditEvent[playerid][MaxPlayers]), sizeof(max_players));
						format(string, sizeof(string), "Team 1 Spawn\nTeam 2 Spawn\nHealth  {33A10B}%d{FFFFFF}\nArmour  {33A10B}%d{FFFFFF}\nTeam 1 Skin  {33A10B}%d{FFFFFF}\nTeam 2 Skin  {33A10B}%d{FFFFFF}\nVIP  %s{FFFFFF}\n", EditEvent[playerid][EventHp], EditEvent[playerid][EventArm], EditEvent[playerid][Skin], EditEvent[playerid][Skin2], (EditEvent[playerid][Vip]) ? ("{33A10B}Yes") : ("{FF0000}No"));
						format(string, sizeof(string), "%sWeapon 1  {33A10B}%s{FFFFFF}\nWeapon 2  {33A10B}%s{FFFFFF}\nWeapon 3  {33A10B}%s{FFFFFF}\nWeapon 4  {33A10B}%s{FFFFFF}\nWeapon 5  {33A10B}%s{FFFFFF}\n", string, weapons[EditEvent[playerid][Weapon1]], weapons[EditEvent[playerid][Weapon2]], weapons[EditEvent[playerid][Weapon3]], weapons[EditEvent[playerid][Weapon4]], weapons[EditEvent[playerid][Weapon5]]);
						format(string, sizeof(string), "%sMax Players  {33A10B}%s{FFFFFF}\nScore Limit  {33A10B}%d{FFFFFF}\nSave\n", string, (EditEvent[playerid][MaxPlayers] == 0) ? ("{FF0000}No") : (max_players), EditEvent[playerid][ScoreLimit]);
						ShowPlayerDialog(playerid, EVENT_TDM, DIALOG_STYLE_LIST, "Event properties", string, "Select", "Cancel");
					}
						}
					}
				}
			}
			case EVENT_WEAPONS_ID:
			{
				if(isnull(inputtext) || !IsNumeric(inputtext) || strval(inputtext) < 0 || strval(inputtext) > 47)
				{
					ShowPlayerDialog(playerid, EVENT_WEAPONS_ID, DIALOG_STYLE_INPUT, "Event properties - weapon id", "Set the weapon ID for the event", "Okay", "Cancel");
					return SendClientMessage(playerid, -1, "Error, try again.");
				}

				new string[500], value = strval(inputtext);
				switch(GetPVarInt(playerid, "EventWeapon"))
				{
					case 1:
					{
						format(string, sizeof(string), "You have set weapon 1 to %s", weapons[value]);
						SendClientMessage(playerid, -1, string);
						EditEvent[playerid][Weapon1] = value;
					}
					case 2:
					{
						format(string, sizeof(string), "You have set weapon 2 to %s", weapons[value]);
						SendClientMessage(playerid, -1, string);
						EditEvent[playerid][Weapon2] = value;
					}
					case 3:
					{
						format(string, sizeof(string), "You have set weapon 3 to %s", weapons[value]);
						SendClientMessage(playerid, -1, string);
						EditEvent[playerid][Weapon3] = value;
					}
					case 4:
					{
						format(string, sizeof(string), "You have set weapon 4 to %s", weapons[value]);
						SendClientMessage(playerid, -1, string);
						EditEvent[playerid][Weapon4] = value;
					}
					case 5:
					{
						format(string, sizeof(string), "You have set weapon 5 to %s", weapons[value]);
						SendClientMessage(playerid, -1, string);
						EditEvent[playerid][Weapon5] = value;
					}
					default:
					{
						format(string, sizeof(string), "Health		{33A10B}%d{FFFFFF}\nArmour		{33A10B}%d{FFFFFF}\nSkin		{33A10B}%d{FFFFFF}\nVIP		%s{FFFFFF}\n", EditEvent[playerid][EventHp], EditEvent[playerid][EventArm], EditEvent[playerid][Skin], (EditEvent[playerid][Vip]) ? ("{33A10B}Yes") : ("{FF0000}No"));
						format(string, sizeof(string), "%sWeapon 1	{33A10B}%s{FFFFFF}\nWeapon 2	{33A10B}%s{FFFFFF}\nWeapon 3	{33A10B}%s{FFFFFF}\nWeapon 4	{33A10B}%s{FFFFFF}\nWeapon 5	{33A10B}%s{FFFFFF}\nSave\n", string, weapons[EditEvent[playerid][Weapon1]], weapons[EditEvent[playerid][Weapon2]], weapons[EditEvent[playerid][Weapon3]], weapons[EditEvent[playerid][Weapon4]], weapons[EditEvent[playerid][Weapon5]]);
						ShowPlayerDialog(playerid, EVENT_MAIN, DIALOG_STYLE_LIST, "Event properties", string, "Select", "Cancel");
					}
				}

				switch(EditEvent[playerid][EventType])
				{
					case 1: //DM
					{
						new max_players[10];
						strcpy(max_players, IntToFormattedStr(EditEvent[playerid][MaxPlayers]), sizeof(max_players));
						format(string, sizeof(string), "Health		{33A10B}%d{FFFFFF}\nArmour		{33A10B}%d{FFFFFF}\nSkin		{33A10B}%d{FFFFFF}\nVIP		%s{FFFFFF}\n", EditEvent[playerid][EventHp], EditEvent[playerid][EventArm], EditEvent[playerid][Skin], (EditEvent[playerid][Vip]) ? ("{33A10B}Yes") : ("{FF0000}No"));
						format(string, sizeof(string), "%sWeapon 1  {33A10B}%s{FFFFFF}\nWeapon 2  {33A10B}%s{FFFFFF}\nWeapon 3  {33A10B}%s{FFFFFF}\nWeapon 4  {33A10B}%s{FFFFFF}\nWeapon 5  {33A10B}%s{FFFFFF}\n", string, weapons[EditEvent[playerid][Weapon1]], weapons[EditEvent[playerid][Weapon2]], weapons[EditEvent[playerid][Weapon3]], weapons[EditEvent[playerid][Weapon4]], weapons[EditEvent[playerid][Weapon5]]);
						format(string, sizeof(string), "%sMax Players  {33A10B}%s{FFFFFF}\nAutoPick Winner  %s{FFFFFF}\nSave\n",string, (EditEvent[playerid][MaxPlayers] == 0) ? ("{FF0000}No") : (max_players), (EditEvent[playerid][AutoPick] == 1) ? ("{33A10B}Yes") : ("{FF0000}No"));
						ShowPlayerDialog(playerid, EVENT_MAIN, DIALOG_STYLE_LIST, "Event properties", string, "Select", "Cancel");
					}
					default: //TDM
					{
						new max_players[10];
						strcpy(max_players, IntToFormattedStr(EditEvent[playerid][MaxPlayers]), sizeof(max_players));
						format(string, sizeof(string), "Team 1 Spawn\nTeam 2 Spawn\nHealth  {33A10B}%d{FFFFFF}\nArmour  {33A10B}%d{FFFFFF}\nTeam 1 Skin  {33A10B}%d{FFFFFF}\nTeam 2 Skin  {33A10B}%d{FFFFFF}\nVIP  %s{FFFFFF}\n", EditEvent[playerid][EventHp], EditEvent[playerid][EventArm], EditEvent[playerid][Skin], EditEvent[playerid][Skin2], (EditEvent[playerid][Vip]) ? ("{33A10B}Yes") : ("{FF0000}No"));
						format(string, sizeof(string), "%sWeapon 1  {33A10B}%s{FFFFFF}\nWeapon 2  {33A10B}%s{FFFFFF}\nWeapon 3  {33A10B}%s{FFFFFF}\nWeapon 4  {33A10B}%s{FFFFFF}\nWeapon 5  {33A10B}%s{FFFFFF}\n", string, weapons[EditEvent[playerid][Weapon1]], weapons[EditEvent[playerid][Weapon2]], weapons[EditEvent[playerid][Weapon3]], weapons[EditEvent[playerid][Weapon4]], weapons[EditEvent[playerid][Weapon5]]);
						format(string, sizeof(string), "%sMax Players  {33A10B}%s{FFFFFF}\nScore Limit  {33A10B}%d{FFFFFF}\nSave\n", string, (EditEvent[playerid][MaxPlayers] == 0) ? ("{FF0000}No") : (max_players), EditEvent[playerid][ScoreLimit]);
						ShowPlayerDialog(playerid, EVENT_TDM, DIALOG_STYLE_LIST, "Event properties", string, "Select", "Cancel");
					}
				}
			}
			case EVENT_WEAPONS_LIST:
			{
				new string[500];
				switch(GetPVarInt(playerid, "EventWeapon"))
				{
					case 1:
					{
						format(string, sizeof(string), "You have set weapon 1 to %s", inputtext);
						SendClientMessage(playerid, -1, string);
						EditEvent[playerid][Weapon1] = listitem;
					}
					case 2:
					{
						format(string, sizeof(string), "You have set weapon 2 to %s", inputtext);
						SendClientMessage(playerid, -1, string);
						EditEvent[playerid][Weapon2] = listitem;
					}
					case 3:
					{
						format(string, sizeof(string), "You have set weapon 3 to %s", inputtext);
						SendClientMessage(playerid, -1, string);
						EditEvent[playerid][Weapon3] = listitem;
					}
					case 4:
					{
						format(string, sizeof(string), "You have set weapon 4 to %s", inputtext);
						SendClientMessage(playerid, -1, string);
						EditEvent[playerid][Weapon4] = listitem;
					}
					case 5:
					{
						format(string, sizeof(string), "You have set weapon 5 to %s", inputtext);
						SendClientMessage(playerid, -1, string);
						EditEvent[playerid][Weapon5] = listitem;
					}
				}

				switch(EditEvent[playerid][EventType])
				{
					case 1: //DM
					{
						new max_players[10];
						strcpy(max_players, IntToFormattedStr(EditEvent[playerid][MaxPlayers]), sizeof(max_players));
						format(string, sizeof(string), "Health		{33A10B}%d{FFFFFF}\nArmour		{33A10B}%d{FFFFFF}\nSkin		{33A10B}%d{FFFFFF}\nVIP		%s{FFFFFF}\n", EditEvent[playerid][EventHp], EditEvent[playerid][EventArm], EditEvent[playerid][Skin], (EditEvent[playerid][Vip]) ? ("{33A10B}Yes") : ("{FF0000}No"));
						format(string, sizeof(string), "%sWeapon 1  {33A10B}%s{FFFFFF}\nWeapon 2  {33A10B}%s{FFFFFF}\nWeapon 3  {33A10B}%s{FFFFFF}\nWeapon 4  {33A10B}%s{FFFFFF}\nWeapon 5  {33A10B}%s{FFFFFF}\n", string, weapons[EditEvent[playerid][Weapon1]], weapons[EditEvent[playerid][Weapon2]], weapons[EditEvent[playerid][Weapon3]], weapons[EditEvent[playerid][Weapon4]], weapons[EditEvent[playerid][Weapon5]]);
						format(string, sizeof(string), "%sMax Players  {33A10B}%s{FFFFFF}\nAutoPick Winner  %s{FFFFFF}\nSave\n",string, (EditEvent[playerid][MaxPlayers] == 0) ? ("{FF0000}No") : (max_players), (EditEvent[playerid][AutoPick] == 1) ? ("{33A10B}Yes") : ("{FF0000}No"));
						ShowPlayerDialog(playerid, EVENT_MAIN, DIALOG_STYLE_LIST, "Event properties", string, "Select", "Cancel");
					}
					default: //TDM
					{
						new max_players[10];
						strcpy(max_players, IntToFormattedStr(EditEvent[playerid][MaxPlayers]), sizeof(max_players));
						format(string, sizeof(string), "Team 1 Spawn\nTeam 2 Spawn\nHealth  {33A10B}%d{FFFFFF}\nArmour  {33A10B}%d{FFFFFF}\nTeam 1 Skin  {33A10B}%d{FFFFFF}\nTeam 2 Skin  {33A10B}%d{FFFFFF}\nVIP  %s{FFFFFF}\n", EditEvent[playerid][EventHp], EditEvent[playerid][EventArm], EditEvent[playerid][Skin], EditEvent[playerid][Skin2], (EditEvent[playerid][Vip]) ? ("{33A10B}Yes") : ("{FF0000}No"));
						format(string, sizeof(string), "%sWeapon 1  {33A10B}%s{FFFFFF}\nWeapon 2  {33A10B}%s{FFFFFF}\nWeapon 3  {33A10B}%s{FFFFFF}\nWeapon 4  {33A10B}%s{FFFFFF}\nWeapon 5  {33A10B}%s{FFFFFF}\n", string, weapons[EditEvent[playerid][Weapon1]], weapons[EditEvent[playerid][Weapon2]], weapons[EditEvent[playerid][Weapon3]], weapons[EditEvent[playerid][Weapon4]], weapons[EditEvent[playerid][Weapon5]]);
						format(string, sizeof(string), "%sMax Players  {33A10B}%s{FFFFFF}\nScore Limit  {33A10B}%d{FFFFFF}\nSave\n", string, (EditEvent[playerid][MaxPlayers] == 0) ? ("{FF0000}No") : (max_players), EditEvent[playerid][ScoreLimit]);
						ShowPlayerDialog(playerid, EVENT_TDM, DIALOG_STYLE_LIST, "Event properties", string, "Select", "Cancel");
					}
				}
			}
			case DERBY_MAIN:
			{
				if(!response)
					return cmd_setupevent(playerid, "");

				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialog(playerid, DERBY_VEHICLE, DIALOG_STYLE_INPUT, "Derby Vehicle Selection", "Choose a vehicle ID", "Select", "Cancel");
					}
					case 1:
					{
						if(EditEvent[playerid][derbyVip] == 0)
							EditEvent[playerid][derbyVip] = 1;
						else
							EditEvent[playerid][derbyVip] = 0;

						return cmd_continue(playerid, "");
					}
					case 2:
					{
						if(EditEvent[playerid][derbyNos] == 0)
							EditEvent[playerid][derbyNos] = 1;
						else
							EditEvent[playerid][derbyNos] = 0;

						return cmd_continue(playerid, "");
					}
					case 3:
					{
						if(DerbyStatus > 0)
							return SendClientMessage(playerid, -1, "There is already a derby in progress.");

						if(IsAnyEventHappening(4))
							return SendClientMessage(playerid, -1, "You can't start an event while another event is in progress.");

						new string[128];

						DerbyStatus = 1;
						DerbyVehicle = EditEvent[playerid][derbyVehicle];
						DerbyVip = EditEvent[playerid][derbyVip];
						DerbyNos = EditEvent[playerid][derbyNos];

						format(string, sizeof(string), "Admin %s has set up a derby. Type /enterderby to join!", GetName(playerid));

						if(DerbyVip > 0)
						{
							SendMessageToVip(LIGHTRED, string);
							SendMessageToVip(LIGHTRED, "STORE YOUR WEAPONS!! Weapons, money and skins will not be refunded if lost! THIS IS YOUR WARNING!");
							SendMessageToVip(LIGHTRED, "STORE YOUR WEAPONS!! Weapons, money and skins will not be refunded if lost! THIS IS YOUR WARNING!");
							SendMessageToVip(LIGHTRED, "STORE YOUR WEAPONS!! Weapons, money and skins will not be refunded if lost! THIS IS YOUR WARNING!");
						}
						else
						{
							SendClientMessageToAll(LIGHTRED, string);
							SendClientMessageToAll(LIGHTRED, "STORE YOUR WEAPONS!! Weapons, money and skins will not be refunded if lost! THIS IS YOUR WARNING!");
							SendClientMessageToAll(LIGHTRED, "STORE YOUR WEAPONS!! Weapons, money and skins will not be refunded if lost! THIS IS YOUR WARNING!");
							SendClientMessageToAll(LIGHTRED, "STORE YOUR WEAPONS!! Weapons, money and skins will not be refunded if lost! THIS IS YOUR WARNING!");
						}

						EditEvent[playerid][derbyVehicle] = 400;
						EditEvent[playerid][derbyVip] = 0;
						EditEvent[playerid][derbyNos] = 0;
						eventType = 4;
						EditEvent[playerid][EventType] = 0;
					}
				}
			}
			case DERBY_VEHICLE:
			{
				if(!response)
					return cmd_continue(playerid, "");

				if(strlen(inputtext) < 1)
					return cmd_continue(playerid, "");

				new id = strval(inputtext);

				if(id < 400 || id > 611)
				{
					SendClientMessage(playerid, -1, "Invald vehicle ID.");
					return cmd_continue(playerid, "");
				}

				EditEvent[playerid][derbyVehicle] = id;
				return cmd_continue(playerid, "");
			}
			case RALLY_MAIN:
			{
				if(!response)
					return 1;

				switch(listitem)
				{
					case 0: //Vehicle
					{
						ShowPlayerDialog(playerid, RALLY_VEHICLE_INPUT, DIALOG_STYLE_INPUT, "Input a vehicle ID", "Input the vehicle ID you wish to use", "Select", "Cancel");
						// ShowPlayerDialog(playerid, RALLY_VEHICLE, DIALOG_STYLE_LIST, "Choose the rally vehicle", "Input a vehicle ID\nBack\n", "Select", "Cancel");
					}
					case 1: //Course
					{
						ShowPlayerDialog(playerid, RALLY_RACE, DIALOG_STYLE_INPUT, "Choose a rally race", "Input the vehicle ID you wish to use", "Select", "Cancel");
					}
					case 2: //Vip
					{
						if(EditRally[playerid][Vip] == 0)
							EditRally[playerid][Vip] = 1;
						else
							EditRally[playerid][Vip] = 0;

						new string[150];
						format(string, sizeof(string), "Vehicle:		{33A10B}%s{FFFFFF}\nRace:		{33A10B}%d{FFFFFF}\nVIP:		%s{FFFFFF}\nNOS:		%s{FFFFFF}\nStart rally\n", vNames[EditRally[playerid][Vehicle]-400], EditRally[playerid][Course], (EditRally[playerid][Vip]) ? ("{33A10B}YES") : ("{FF0000}NO"), (EditRally[playerid][Nos]) ? ("{33A10B}YES") : ("{FF0000}NO"));
						ShowPlayerDialog(playerid, RALLY_MAIN, DIALOG_STYLE_LIST, "Rally settings", string, "Select", "Cancel");
					}
					case 3: //Nos
					{
						if(!EditRally[playerid][Nos])
							EditRally[playerid][Nos] = 1;
						else
							EditRally[playerid][Nos] = 0;

						new string[150];
						format(string, sizeof(string), "Vehicle:		{33A10B}%s{FFFFFF}\nRace:		{33A10B}%d{FFFFFF}\nVIP:		%s{FFFFFF}\nNOS:		%s{FFFFFF}\nStart rally\n", vNames[EditRally[playerid][Vehicle]-400], EditRally[playerid][Course], (EditRally[playerid][Vip]) ? ("{33A10B}YES") : ("{FF0000}NO"), (EditRally[playerid][Nos]) ? ("{33A10B}YES") : ("{FF0000}NO"));
						ShowPlayerDialog(playerid, RALLY_MAIN, DIALOG_STYLE_LIST, "Rally settings", string, "Select", "Cancel");
					}
					case 4: //Start
					{
						if(RallyInProgress > 0)
							return SendClientMessage(playerid, -1, "There is already a rally in progress.");

						if(IsAnyEventHappening(3))
							return SendClientMessage(playerid, -1, "You can't start an event while another event is in progress.");

						new str[128];
						RallyInProgress = 1;
						RallyVehicle = EditRally[playerid][Vehicle];
						RallyCourse = EditRally[playerid][Course];
						RallyVip = EditRally[playerid][Vip];
						RallyNos = EditRally[playerid][Nos];
						if(RallyCheckpoints[0][2] == 0.00)
							LoadRally(playerid, RallyCourse);

						RallyFirstID = INVALID_PLAYER_ID;
						RallySecondID = INVALID_PLAYER_ID;
						RallyThirdID = INVALID_PLAYER_ID;
						RallyFirstCP = 0;
						RallySecondCP = 0;
						RallyThirdCP = 0;
						TextDrawSetString(RallyLB, "~n~~r~- First -~n~~w~Nobody~n~~n~~r~- Second -~n~~w~Nobody~n~~n~~r~- Third -~n~~w~Nobody~n~");

						format(str, sizeof(str), "Admin %s has set up a rally! Type /enterrally to join!", Player[playerid][AdminName]);
						if(RallyVip > 0)
						{
							SendMessageToVip(LIGHTRED, str);
							SendMessageToVip(LIGHTRED, "STORE YOUR WEAPONS!! Weapons, money and skins will not be refunded if lost! THIS IS YOUR WARNING!");
							SendMessageToVip(LIGHTRED, "STORE YOUR WEAPONS!! Weapons, money and skins will not be refunded if lost! THIS IS YOUR WARNING!");
							SendMessageToVip(LIGHTRED, "STORE YOUR WEAPONS!! Weapons, money and skins will not be refunded if lost! THIS IS YOUR WARNING!");
						}
						else
						{
							SendClientMessageToAll(LIGHTRED, str);
							SendClientMessageToAll(LIGHTRED, "STORE YOUR WEAPONS!! Weapons, money and skins will not be refunded if lost! THIS IS YOUR WARNING!");
							SendClientMessageToAll(LIGHTRED, "STORE YOUR WEAPONS!! Weapons, money and skins will not be refunded if lost! THIS IS YOUR WARNING!");
							SendClientMessageToAll(LIGHTRED, "STORE YOUR WEAPONS!! Weapons, money and skins will not be refunded if lost! THIS IS YOUR WARNING!");
						}

						EditRally[playerid][Vehicle] = 400;
						EditRally[playerid][Course] = 1;
						EditRally[playerid][Vip] = 0;
						EditRally[playerid][Nos] = 0;
						eventType = 3;
						EditEvent[playerid][EventType] = 0;
					}
				}
			}
			case RALLY_VEHICLE:
			{
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialog(playerid, RALLY_VEHICLE_INPUT, DIALOG_STYLE_INPUT, "Input a vehicle ID", "Input the vehicle ID you wish to use", "Select", "Cancel");
					}
					/*case 1:
					{
						new string[128], end[3072];
						for(new i; i < sizeof(VehicleNames); i++)
						{
							format(string, sizeof(string), "%s\n", VehicleNames[i]);
							strcat(end, string);
						}
						ShowPlayerDialog(playerid, RALLY_VEHICLE_LIST, DIALOG_STYLE_LIST, "Choose a vehicle", end, "Select", "Cancel");
					}*/
					case 1:
					{
						new string[150];
						format(string, sizeof(string), "Vehicle:		{33A10B}%s{FFFFFF}\nRace:		{33A10B}%d{FFFFFF}\nVIP:		%s{FFFFFF}\nNOS:		%s{FFFFFF}\nStart rally\n", vNames[EditRally[playerid][Vehicle]-400], EditRally[playerid][Course], (EditRally[playerid][Vip]) ? ("{33A10B}YES") : ("{FF0000}NO"), (EditRally[playerid][Nos]) ? ("{33A10B}YES") : ("{FF0000}NO"));
						ShowPlayerDialog(playerid, RALLY_MAIN, DIALOG_STYLE_LIST, "Rally settings", string, "Select", "Cancel");
					}
				}
			}
			case RALLY_VEHICLE_INPUT:
			{
				if(isnull(inputtext) || !IsNumeric(inputtext))
					return ShowPlayerDialog(playerid, RALLY_VEHICLE_INPUT, DIALOG_STYLE_INPUT, "Input a vehicle ID", "Input the vehicle ID you wish to use", "Select", "Cancel");

				new id = strval(inputtext);
				if(id < 400 || id > 611)
					return ShowPlayerDialog(playerid, RALLY_VEHICLE_INPUT, DIALOG_STYLE_INPUT, "Input a vehicle ID", "Input the vehicle ID you wish to use", "Select", "Cancel");

				EditRally[playerid][Vehicle] = id;
				new string[150];
				format(string, sizeof(string), "Vehicle:		{33A10B}%s{FFFFFF}\nRace:		{33A10B}%d{FFFFFF}\nVIP:		%s{FFFFFF}\nNOS:		%s{FFFFFF}\nStart rally\n", vNames[EditRally[playerid][Vehicle]-400], EditRally[playerid][Course], (EditRally[playerid][Vip]) ? ("{33A10B}YES") : ("{FF0000}NO"), (EditRally[playerid][Nos]) ? ("{33A10B}YES") : ("{FF0000}NO"));
				ShowPlayerDialog(playerid, RALLY_MAIN, DIALOG_STYLE_LIST, "Rally settings", string, "Select", "Cancel");
			}
			case RALLY_VEHICLE_LIST:
			{
				EditRally[playerid][Vehicle] = listitem+400;
				new string[150];
				format(string, sizeof(string), "Vehicle:		{33A10B}%s{FFFFFF}\nRace:		{33A10B}%d{FFFFFF}\nVIP:		%s{FFFFFF}\nNOS:		%s{FFFFFF}\nStart rally\n", vNames[EditRally[playerid][Vehicle]-400], EditRally[playerid][Course], (EditRally[playerid][Vip]) ? ("{33A10B}YES") : ("{FF0000}NO"), (EditRally[playerid][Nos]) ? ("{33A10B}YES") : ("{FF0000}NO"));
				ShowPlayerDialog(playerid, RALLY_MAIN, DIALOG_STYLE_LIST, "Rally settings", string, "Select", "Cancel");
			}
			case RALLY_RACE:
			{
				if(isnull(inputtext) || !IsNumeric(inputtext))
					return ShowPlayerDialog(playerid, RALLY_RACE, DIALOG_STYLE_INPUT, "Choose a rally race", "Choose the rally race you wish to use", "Select", "Cancel");

				new id = strval(inputtext);
				if(id < 1 || id > MAX_RALLIES)
					return ShowPlayerDialog(playerid, RALLY_RACE, DIALOG_STYLE_INPUT, "Choose a rally race", "Choose the rally race you wish to use", "Select", "Cancel");

				LoadRally(playerid, id);
			}
			case DESC_EDIT:
			{
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialog(playerid, DESC_EDIT, DIALOG_STYLE_LIST, "Edit description", EditDescString(playerid), "Edit", "Cancel");
					}
					case 1:
					{
						ShowPlayerDialog(playerid, DESC_EDITHEAD, DIALOG_STYLE_INPUT, "Edit head description", "Input your new head description", "Ok", "Cancel");
					}
					case 2:
					{
						ShowPlayerDialog(playerid, DESC_EDIT, DIALOG_STYLE_LIST, "Edit description", EditDescString(playerid), "Edit", "Cancel");
					}
					case 3:
					{
						ShowPlayerDialog(playerid, DESC_EDITBODY, DIALOG_STYLE_INPUT, "Edit body description", "Input your new body description", "Ok", "Cancel");
					}
					case 4:
					{
						ShowPlayerDialog(playerid, DESC_EDIT, DIALOG_STYLE_LIST, "Edit description", EditDescString(playerid), "Edit", "Cancel");
					}
					case 5:
					{
						ShowPlayerDialog(playerid, DESC_EDITCLOTHING, DIALOG_STYLE_INPUT, "Edit clothing description", "Input your new clothing description", "Ok", "Cancel");
					}
					case 6:
					{
						ShowPlayerDialog(playerid, DESC_EDIT, DIALOG_STYLE_LIST, "Edit description", EditDescString(playerid), "Edit", "Cancel");
					}
					case 7:
					{
						ShowPlayerDialog(playerid, DESC_EDITACCESSORY, DIALOG_STYLE_INPUT, "Edit accessory description", "Input your new accessories description", "Ok", "Cancel");
					}
				}
			}
			case CHIPSHOP_MAIN:
			{
				switch(listitem)
				{
					case 1:
					{
						new str[128], str2[128], groupid = Player[playerid][InGroupHQ];
						format(str, sizeof(str), "%s chip exchange", Groups[groupid][GroupName]);
						format(str2, sizeof(str2), "{FFFFFF}Enter the amount of chips you want to buy.\nSelling at {EAED82}$10{FFFFFF} per chip.");
						ShowPlayerDialog(playerid, CHIPSHOP_BUY, DIALOG_STYLE_INPUT, str, str2, "Buy", "Back");
					}
					case 2:
					{
						new str[128], str2[128], groupid = Player[playerid][InGroupHQ];
						format(str, sizeof(str), "%s chip exchange", Groups[groupid][GroupName]);
						format(str2, sizeof(str2), "{FFFFFF}Enter the amount of chips you wish to sell.\nBuying at {EAED82}$10{FFFFFF} per chip.");
						ShowPlayerDialog(playerid, CHIPSHOP_SELL, DIALOG_STYLE_INPUT, str, str2, "Sell", "Back");
					}
					default:
					{
						if(Groups[Player[playerid][InGroupHQ]][CommandTypes] != 7)
							return 1;
						new str[128], str2[128], groupid = Player[playerid][InGroupHQ];
						format(str, sizeof(str), "%s chip exchange", Groups[groupid][GroupName]);
						format(str2, sizeof(str2), "In stock - %s\nBuy chips - $10\nSell chips - $10\n", IntToFormattedStr(Groups[groupid][Chips]));
						ShowPlayerDialog(playerid, CHIPSHOP_MAIN, DIALOG_STYLE_LIST, str, str2, "Select", "Cancel");
					}
				}
			}
			case DELIVER_SUPPLIES:
			{
				if(!response)
					return 1;
					
				cmd_sellsupplies(playerid, "confirm");
			}
			case 5277:
			{
				new stashid, string[128];
				strcpy(string, inputtext, sizeof(string));
				for(new i; i < strlen(string); i++)
				{
					if(string[i] == ')')
					{
						string[i] = '\0';
						stashid = strval(string);
						break;
					}
				}
				SetPlayerPos_Update(playerid, GlobalStash[stashid][StashX], GlobalStash[stashid][StashY], GlobalStash[stashid][StashZ] + 0.5);
			}
			case TRUCKER_DELIVERPOINT:
			{
				if(Jobs[Player[playerid][Job]][JobType] != JOB_TRUCKER && Jobs[Player[playerid][Job2]][JobType] != JOB_TRUCKER)
					return 1;

				if(Player[playerid][TruckSupplies] > 0)
					return SendClientMessage(playerid, -1, "You already have supplies/fuel to deliver.");

				if(listitem == 0)
				{
					if(DelivererSupplies > 9700)
						return SendClientMessage(playerid, -1, "RS Haul are not requesting any supply deliveries right now.");

					Player[playerid][Checkpoint] = 1;
					Player[playerid][TruckStage] = 1;
					SetPlayerCheckpoint(playerid, TruckerPickup[0], TruckerPickup[1], TruckerPickup[2], 10.0);
				}
				else if(listitem == 1)
				{

					new accepting;
					for(new i = 1; i < MAX_BUSINESSES; i++)
					{
						if(Businesses[i][bType] != 16)
							continue;

						if(IsItemInStorage(i, CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, 4000))
							accepting++;
					}

					if(accepting == 0)
						return SendClientMessage(playerid, -1, "There are no gas stations requesting fuel deliveries.");

					Player[playerid][Checkpoint] = 1;
					Player[playerid][TruckStage] = 1;
					SetPlayerCheckpoint(playerid, TruckerPickup[3], TruckerPickup[4], TruckerPickup[5], 10.0);
				}
				Player[playerid][TruckDelivery] = listitem+1;
				SendClientMessage(playerid, -1, (listitem == 0) ? ("Get into a Linerunner and take your truck to SmoovAir to collect a load of supplies.") : ("Get into a Tanker truck and take it to the gas refinery to fill the trailer."));
			}
			case TRUCKER_DELIVERPOINT+1:
			{
				if(strlen(inputtext) > 0)
				{
					new id = strval(CutBeforeLine(inputtext));
					SetPlayerCheckpoint(playerid, Businesses[id][FuelPointX], Businesses[id][FuelPointY], Businesses[id][FuelPointZ], 10.0);
				}
			}
		}
	}

	switch(dialogid)
	{
		case BILLBOARD_CREATE:
		{
			if(!response)
			{
				for(new i; i < MAX_BILLBOARDS; i++)
				{
					if(IsValidDynamicMapIcon(Billboards[i][Checkpoint][playerid]))
						DestroyDynamicMapIcon(Billboards[i][Checkpoint][playerid]);
				}
				Streamer_Update(playerid);
				return 1;
			}

			if(isnull(inputtext))
				return ShowDialog(playerid, BILLBOARD_CREATE);

			if(Player[playerid][Money] < BillboardPrice)
				return SendClientMessage(playerid, -1, "You do not have enough money to rent this billboard.");

			new id = GetPVarInt(playerid, "PickedBillboard") - 1;
			if(strcmp(Billboards[id][Creator], "Nobody", true))
				return SendClientMessage(playerid, -1, "It appears that that billboard gas already been taken.");

			format(Billboards[id][Creator], 25, GetName(playerid));
			format(Billboards[id][AdText], 128, inputtext);
			Billboards[id][TimeLeft] = gettime() + (BillboardsDays * 86400);
			Billboards[id][BackgroundColour] = 0xFF000000;
			Billboards[id][TextColour] = 0xFFFFFFFF;
			Player[playerid][Money] -= BillboardPrice;

			new string[128];
			format(string, sizeof(string), BillboardSplit(Billboards[id][AdText]));
			SetObjectMaterialText(Billboards[id][Object], string, 0, OBJECT_MATERIAL_SIZE_256x128, "Arial", 15, 1, Billboards[id][TextColour], Billboards[id][BackgroundColour], 1);

			ShowDialog(playerid, BILLBOARD_COLOUR);
		}
		case BILLBOARD_COLOUR:
		{
			if(!response)
				return ShowDialog(playerid, BILLBOARD_CREATE);

			if(isnull(inputtext))
				return ShowDialog(playerid, BILLBOARD_COLOUR);

			new bgcol[20], textcol[20];
			if(sscanf(inputtext, "s[20]s[20]", bgcol, textcol))
				return ShowDialog(playerid, BILLBOARD_COLOUR), SendClientMessage(playerid, GREY, "Invalid syntax! \"backgroudncolour textcolour\"");

			new colours[11][] = { "red", "blue", "lightblue", "black", "white", "green", "darkgreen", "yellow", "orange", "purple", "pink" };

			new colourcodes[11] = { 0xFFE03434, 0xFF1900FF, 0xFF1EBBD4, 0xFF171717, 0xFFFFFFFF, 0xFF23D94D, 0xFF004D12, 0xFFD0D62B, 0xFFE67F12, 0xFF861BDE, 0xFFED11ED };

			new validbg = -1, validtext = -1;
			for(new i; i < sizeof(colours); i++)
			{
				if(!strcmp(bgcol, colours[i], true))
					validbg++;

				if(!strcmp(textcol, colours[i], true))
					validtext++;
			}

			if(validbg == -1 || validtext == -1)
				return ShowDialog(playerid, BILLBOARD_COLOUR), SendClientMessage(playerid, GREY, "Invalid colour, type it exactly shown in the list.");

			if(!strcmp(bgcol, textcol, true))
				return ShowDialog(playerid, BILLBOARD_COLOUR), SendClientMessage(playerid, GREY, "You can't have the background and text the same colour.");

			new id = GetPVarInt(playerid, "PickedBillboard") - 1;
			for(new i; i < sizeof(colours); i++)
			{
				if(!strcmp(bgcol, colours[i], true))
					Billboards[id][BackgroundColour] = colourcodes[i];

				if(!strcmp(textcol, colours[i], true))
					Billboards[id][TextColour] = colourcodes[i];
			}

			new string[128];
			format(string, sizeof(string), BillboardSplit(Billboards[id][AdText]));
			SetObjectMaterialText(Billboards[id][Object], string, 0, OBJECT_MATERIAL_SIZE_256x128, "Arial", 15, 1, Billboards[id][TextColour], Billboards[id][BackgroundColour], 1);
			SaveBillboard(id);

			format(string, sizeof(string), "You have successfully rented out billboard %d for %d days!", id, BillboardsDays);
			SendClientMessage(playerid, -1, string);

			format(string, sizeof(string), "[BILLBOARD] %s created a billboard: %s", GetName(playerid), Billboards[id][AdText]);
			ICChatLog(string);
		}
		case CONTRACT_MAIN:
		{
			if(!response)
				return 1;

			if(!strcmp(inputtext, "Contract", true))
			{
				if(!strcmp(Player[playerid][PendingContract], "Nobody", true))
					return SendClientMessage(playerid, -1, "You have not placed a contract on anybody.");

				if(!IsPlayerRegistered(Player[playerid][PendingContract]))
					return SendClientMessage(playerid, -1, "The player you are trying to contract does not exist.");

				if(Player[playerid][Money] < Player[playerid][PendingPrice])
					return SendClientMessage(playerid, -1, "You don't have enough money on-hand to do this.");

				if(strlen(Player[playerid][PendingReason]) < 1)
					return SendClientMessage(playerid, -1, "You didn't enter a reason for this contract.");

				new id = -1;
				foreach(Player, i)
				{
					if(!strcmp(GetName(i), Player[playerid][PendingContract], true) || !strcmp(Player[i][NormalName], Player[playerid][PendingContract], true))
					{
						id = i;
						break;
					}
				}

				new string[128];
				if(id == -1) // Contract target is not connected
				{
					if(!strcmp(Player[playerid][PendingContract], Player[playerid][NormalName], true) || !strcmp(Player[playerid][PendingContract], GetName(playerid), true))
						return SendClientMessage(playerid, -1, "You can't contract yourself.");

					if(!IsPlayerRegistered(Player[playerid][PendingContract]))
						return SendClientMessage(playerid, WHITE, "That player doesn't exist.");

					mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT Contract FROM playeraccounts WHERE NormalName = '%e'", Player[playerid][PendingContract]);
					mysql_tquery(MYSQL_MAIN, string, "OnQueryFinish", "dddss", THREAD_CONTRACT_PLAYER_CHECK, playerid, 0, "", "");
				}
				else
				{
					if(id == playerid)
						return SendClientMessage(playerid, -1, "You can't contract yourself!");

					if(strcmp(Player[id][Contract], "None", true) && strcmp(Player[id][Contract], "", true))
						return SendClientMessage(playerid, -1, "You can't place that right now.");

					new reason[255];
					format(reason, sizeof(reason), "%s (from %s)", Player[playerid][PendingReason], GetName(playerid));
					strcpy(Player[id][Contract], reason, 255);
					strcpy(Player[id][Contract2], Player[playerid][PendingReason2], 255);
					Player[id][ContractPrice] = Player[playerid][PendingPrice];
					format(string, sizeof(string), "You have placed a contract on %s for %s.", Player[playerid][PendingContract], PrettyMoney(Player[playerid][PendingPrice]));
					SendClientMessage(playerid, -1, string);
					format(string, sizeof(string), "Reason: %s", Player[playerid][PendingReason]);
					SendClientMessage(playerid, -1, string);

					format(string, sizeof(string), "[CONTRACT] %s has placed a contract on %s for %s.", GetName(playerid), Player[playerid][PendingContract], PrettyMoney(Player[playerid][PendingPrice]));
					StatLog(string);

					format(string, sizeof(string), "%s has requested a hit on %s for %s.", GetName(playerid), Player[playerid][PendingContract], PrettyMoney(Player[playerid][PendingPrice]));
					foreach(Player, i)
					{
						if(Groups[Player[i][Group]][CommandTypes] == 2)
							SendClientMessage(i, ANNOUNCEMENT, string);
					}

					Player[playerid][Money] -= Player[playerid][PendingPrice];
					Player[playerid][PendingPrice] = 5000;
					format(Player[playerid][PendingContract], 255, "Nobody");
					format(Player[playerid][PendingReason], 255, "Nothing");
					format(Player[playerid][PendingReason2], 255, "Nothing");
				}
				return 1;
			}

			switch(listitem)
			{
				case 0: ShowPlayerDialog(playerid, CONTRACT_NAME, DIALOG_STYLE_INPUT, "Place a contract - Name", "{FFFFFF}Enter the name of the player you want to place a contract on.\nIt must be their full name!", "Done", "Back");
				case 1: ShowPlayerDialog(playerid, CONTRACT_PRICE, DIALOG_STYLE_INPUT, "Place a contract - Price", "{FFFFFF}Enter the amount of money you want to place on %s.\nIt must be over $5,000!", "Done", "Back");
				case 2: ShowPlayerDialog(playerid, CONTRACT_REASON, DIALOG_STYLE_INPUT, "Place a contract - Reason", "{FFFFFF}Enter the reason for the contract.", "Done", "Back");
				case 3: ShowPlayerDialog(playerid, CONTRACT_NOTE, DIALOG_STYLE_INPUT, "Place a contract - Additional Notes", "{FFFFFF}Enter any additional notes for the contract.", "Done", "Back");
				default: return cmd_contract(playerid, "");
			}
		}
		case CONTRACT_NAME:
		{
			if(!response)
				return cmd_contract(playerid, "");

			if(!strcmp(GetName(playerid), inputtext, true))
			{
				ShowPlayerDialog(playerid, CONTRACT_NAME, DIALOG_STYLE_INPUT, "Place a contract - Name", "{FFFFFF}Enter the name of the player you want to place a contract on.\nIt must be their full name!", "Done", "Back");
				return SendClientMessage(playerid, -1, "You can't contract yourself.");
			}

			if(!IsPlayerRegistered(inputtext) || isnull(inputtext))
			{
				ShowPlayerDialog(playerid, CONTRACT_NAME, DIALOG_STYLE_INPUT, "Place a contract - Name", "{FFFFFF}Enter the name of the player you want to place a contract on.\nIt must be their full name!", "Done", "Back");
				return SendClientMessage(playerid, -1, "That player does not exist.");
			}

			strcpy(Player[playerid][PendingContract], inputtext, 128);
			cmd_contract(playerid, "");
		}
		case CONTRACT_PRICE:
		{
			if(!response)
				return cmd_contract(playerid, "");

			new price = strval(inputtext);
			if(isnull(inputtext) || !IsNumeric(inputtext) || price < 5000 || price > 10000000)
			{
				ShowPlayerDialog(playerid, CONTRACT_PRICE, DIALOG_STYLE_INPUT, "Place a contract - Price", "{FFFFFF}Enter the amount of money you want to place on %s.\nIt must be over $5,000!", "Done", "Back");
				return SendClientMessage(playerid, -1, "The contract price must be between $5,000 and $10,000,000.");
			}

			Player[playerid][PendingPrice] = price;
			cmd_contract(playerid, "");
		}
		case CONTRACT_REASON:
		{
			if(!response)
				return cmd_contract(playerid, "");

			if(isnull(inputtext))
			{
				ShowPlayerDialog(playerid, CONTRACT_REASON, DIALOG_STYLE_INPUT, "Place a contract - Reason", "{FFFFFF}Enter the reason for the contract.", "Done", "Back");
				return SendClientMessage(playerid, -1, "Enter a reason for the contract.");
			}

			strcpy(Player[playerid][PendingReason], inputtext, 255);
			cmd_contract(playerid, "");
		}
		case CONTRACT_NOTE:
		{
			if(!response || isnull(inputtext))
				return cmd_contract(playerid, "");

			strcpy(Player[playerid][PendingReason2], inputtext, 255);
			cmd_contract(playerid, "");
		}
		case GO_MENU:
		{
			if(!response)
				return 1;

			SetPVarString(playerid, "GoMenu_Category", inputtext);
			new title[64];
			format(title, sizeof(title), "Teleports > %s", inputtext);
			new string[500], type[128] = "boobies";
			for(new i; i < sizeof(GoMenu); i++)
			{
				if(!strcmp(GoMenu[i][Category], inputtext, true))
				{
					if(!strcmp(GoMenu[i][Type], "Nothing", true) && strcmp(GoMenu[i][goName], "Nothing", true))
					{
						format(string, sizeof(string), "%s%s\n", string, GoMenu[i][goName]);
					}
					else if(strcmp(GoMenu[i][Type], type, true))
					{
						format(type, sizeof(type), GoMenu[i][Type]);
						format(string, sizeof(string), "%s%s\n", string, type);
					}
				}
			}
			ShowPlayerDialog(playerid, GO_MENU+1, DIALOG_STYLE_LIST, title, string, "Select", "Back");
		}
		case GO_MENU+1:
		{
			new title[64], string[500], category[128];
			GetPVarString(playerid, "GoMenu_Category", category, 128);
			if(!response)
			{
				new cat[128] = "boobies";
				for(new i; i < sizeof(GoMenu); i++)
				{
					if(!strcmp(GoMenu[i][Category], "Nothing", true))
						continue;

					if(strcmp(GoMenu[i][Category], cat, true))
					{
						format(cat, sizeof(cat), GoMenu[i][Category]);

						if(strfind(string, cat, true, 0) != -1)
							continue;

						format(string, sizeof(string), "%s%s\n", string, cat);
					}
				}
				return ShowPlayerDialog(playerid, GO_MENU, DIALOG_STYLE_LIST, "Teleports", string, "Select", "Cancel");
			}

			new name[128] = "boobies";
			GetPVarString(playerid, "GoMenu_Category", category, 128);
			for(new i; i < sizeof(GoMenu); i++)
			{
				if(!strcmp(GoMenu[i][goName], inputtext, true) && !strcmp(GoMenu[i][Type], "Nothing", true) && !strcmp(GoMenu[i][Category], category, true))
				{
					SetPlayerPos_Update(playerid, GoMenu[i][goX], GoMenu[i][goY], GoMenu[i][goZ]);
					SetPlayerInterior(playerid, GoMenu[i][goInt]);
					return 1;
				}
				else if(!strcmp(GoMenu[i][Type], inputtext, true))
				{
					if(strcmp(GoMenu[i][goName], name, true))
					{
						format(name, sizeof(name), GoMenu[i][goName]);
						format(string, sizeof(string), "%s%s\n", string, name);
					}
				}
			}
			SetPVarString(playerid, "GoMenu_Type", inputtext);
			format(title, sizeof(title), "Teleports > %s > %s", category, inputtext);
			ShowPlayerDialog(playerid, GO_MENU+2, DIALOG_STYLE_LIST, title, string, "Select", "Back");
		}
		case GO_MENU+2:
		{
			new title[64], string[500], category[128], type[128] = "boobies";
			if(!response)
			{
				GetPVarString(playerid, "GoMenu_Category", category, 128);
				GetPVarString(playerid, "GoMenu_Type", type, 128);
				format(title, sizeof(title), "Teleports > %s", category);
				for(new i; i < sizeof(GoMenu); i++)
				{
					if(!strcmp(GoMenu[i][Category], category, true))
					{
						if(!strcmp(GoMenu[i][Type], "Nothing", true) && strcmp(GoMenu[i][goName], "Nothing", true))
						{
							format(string, sizeof(string), "%s%s\n", string, GoMenu[i][goName]);
						}
						else if(strcmp(GoMenu[i][Type], type, true))
						{
							format(type, sizeof(type), GoMenu[i][Type]);
							format(string, sizeof(string), "%s%s\n", string, type);
						}
					}
				}
				return ShowPlayerDialog(playerid, GO_MENU+1, DIALOG_STYLE_LIST, title, string, "Select", "Back");
			}

			for(new i; i < sizeof(GoMenu); i++)
			{
				GetPVarString(playerid, "GoMenu_Category", category, 128);
				GetPVarString(playerid, "GoMenu_Type", type, 128);
				if(!strcmp(GoMenu[i][goName], inputtext, true) && !strcmp(GoMenu[i][Type], type, true) && !strcmp(GoMenu[i][Category], category, true))
				{
					SetPlayerPos_Update(playerid, GoMenu[i][goX], GoMenu[i][goY], GoMenu[i][goZ]);
					SetPlayerInterior(playerid, GoMenu[i][goInt]);
					return 1;
				}
			}
		}
		case GANG_REGISTER_VEHICLE:
		{
			if(!response)
				return 1;

			new sqlid = tGangVID[playerid][listitem], idx = GetVIndex(sqlid);

			if(!IsValidSQL(sqlid) || idx == -1)
				return SendClientMessage(playerid, WHITE, "That vehicle is no longer valid.");

			if(Veh[idx][GangLink] != Player[playerid][Gang])
				return SendClientMessage(playerid, WHITE, "This vehicle no longer belongs to your faction.");

			if(Veh[idx][Registered])
				return SendClientMessage(playerid, -1, "That vehicle is already registered!");

			for(new i; i < MAX_GROUP_VEHICLES; i++)
				tGangVID[playerid][i] = 0;

			SetPVarInt(playerid, "RegisterVeh_SQL", sqlid);
			new str[128];
			format(str, sizeof(str), "{FFFFFF}Are you sure you wish to buy registration for this vehicle?\nThis will cost %s.", PrettyMoney(RegistrationCost));
			ShowPlayerDialog(playerid, GANG_REGISTER_VEHICLE + 1, DIALOG_STYLE_MSGBOX, "Vehicle Registration", str, "Yes", "No");
		}
		case GANG_REGISTER_VEHICLE+1:
		{
			if(!response)
				return SendClientMessage(playerid, -1, "You cancelled the registration.");

			if(Player[playerid][Money] < RegistrationCost)
				return SendClientMessage(playerid, -1, "You do not have enough money to pay for the vehicle registration.");

			new sql = GetPVarInt(playerid, "RegisterVeh_SQL"), idx = GetVIndex(sql);
			if(sql == 0)
				return SendClientMessage(playerid, -1, "An error occurred, it seems that vehicle is not saved.");

			Veh[idx][Registered] = 1;
			Player[playerid][Money] -= RegistrationCost;
			Groups[Player[playerid][InGroupHQ]][SafeMoney] += RegistrationCost;

			SendClientMessage(playerid, -1, "You have successfully registered your vehicle.");
		}
		case FACTION_REGISTER_VEHICLE:
		{
			if(!response)
				return 1;

			new sqlid = tGroupVID[playerid][listitem], idx = GetVIndex(sqlid);

			if(!IsValidSQL(sqlid) || idx == -1)
				return SendClientMessage(playerid, WHITE, "That vehicle is no longer valid.");

			if(Veh[idx][Group] != Player[playerid][Group])
				return SendClientMessage(playerid, WHITE, "This vehicle no longer belongs to your faction.");

			if(Veh[idx][Registered])
				return SendClientMessage(playerid, -1, "That vehicle is already registered!");

			for(new i; i < MAX_GROUP_VEHICLES; i++)
				tGroupVID[playerid][i] = 0;

			SetPVarInt(playerid, "RegisterVeh_SQL", sqlid);
			new str[128];
			format(str, sizeof(str), "{FFFFFF}Are you sure you wish to buy registration for this vehicle?\nThis will cost %s.", PrettyMoney(RegistrationCost));
			ShowPlayerDialog(playerid, FACTION_REGISTER_VEHICLE + 1, DIALOG_STYLE_MSGBOX, "Vehicle Registration", str, "Yes", "No");
		}
		case FACTION_REGISTER_VEHICLE+1:
		{
			if(!response)
				return SendClientMessage(playerid, -1, "You cancelled the registration.");

			if(Player[playerid][Money] < RegistrationCost)
				return SendClientMessage(playerid, -1, "You do not have enough money to pay for the vehicle registration.");

			new sql = GetPVarInt(playerid, "RegisterVeh_SQL"), idx = GetVIndex(sql);
			if(sql == 0)
				return SendClientMessage(playerid, -1, "An error occurred, it seems that vehicle is not saved.");

			Veh[idx][Registered] = 1;
			Player[playerid][Money] -= RegistrationCost;
			Groups[Player[playerid][InGroupHQ]][SafeMoney] += RegistrationCost;

			SendClientMessage(playerid, -1, "You have successfully registered your vehicle.");
		}
		case REGISTER_VEHICLE:
		{
			if(!response)
				return 1;

			if(!strcmp(inputtext, "Empty", true))
			{
				SendClientMessage(playerid, -1, "Invalid car.");
				new res[255], tmp = -1;
				for(new i; i < 5; i++)
				{
					if(Player[playerid][Cars][i] > 0)
					{
						tmp = i;
						new idx = GetVIndex(Player[playerid][Cars][i]);
						if(Veh[idx][Link] == 0 || Veh[idx][Link] == INVALID_VEHICLE_ID)
							format(res, sizeof(res), "%s{F55858}[ %s ] %s\n", res, vNames[Veh[idx][Model] - 400] ,Veh[idx][VName]);
						else
							format(res, sizeof(res), "%s{87E359}[ %s ] %s\n", res, vNames[Veh[idx][Model] - 400] ,Veh[idx][VName]);
					}
					else
					{
						format(res, sizeof(res), "%sEmpty\n", res);
					}
				}

				if(tmp == -1)
					return SendClientMessage(playerid, -1, "You don't have a vehicle that you can register.");

				return ShowPlayerDialog(playerid, REGISTER_VEHICLE, DIALOG_STYLE_LIST, "Vehicle Registration", res, "Register", "Cancel");
			}

			new idx = GetVIndex(Player[playerid][Cars][listitem]);
			if(idx == -1)
				return SendClientMessage(playerid, -1, "An error occured, that vehicle seems to be bugged or not spawned.");

			if(Veh[idx][Registered])
				return SendClientMessage(playerid, -1, "That vehicle is already registered!");

			SetPVarInt(playerid, "RegisterVeh_SQL", Player[playerid][Cars][listitem]);
			SetPVarInt(playerid, "RegisterVeh_Slot", listitem);
			new str[128];
			format(str, sizeof(str), "{FFFFFF}Are you sure you wish to buy registration for this vehicle?\nThis will cost %s.", PrettyMoney(RegistrationCost));
			ShowPlayerDialog(playerid, REGISTER_VEHICLE+1, DIALOG_STYLE_MSGBOX, "Vehicle Registration", str, "Yes", "No");
		}
		case REGISTER_VEHICLE+1:
		{
			if(!response)
				return SendClientMessage(playerid, -1, "You cancelled the registration.");

			if(Player[playerid][Money] < RegistrationCost)
				return SendClientMessage(playerid, -1, "You do not have enough money to pay for the vehicle registration.");

			new sql = GetPVarInt(playerid, "RegisterVeh_SQL"), idx = GetVIndex(sql);
			if(sql == 0)
				return SendClientMessage(playerid, -1, "An error occurred, it seems that vehicle is not saved.");

			Veh[idx][Registered] = 1;
			Player[playerid][Money] -= RegistrationCost;
			Groups[Player[playerid][InGroupHQ]][SafeMoney] += RegistrationCost;

			SendClientMessage(playerid, -1, "You have successfully registered your vehicle.");
		}
		case NEWPLATE_VEHICLE:
		{
			if(!response)
				return 1;

			if(!strcmp(inputtext, "Empty", true))
			{
				SendClientMessage(playerid, -1, "Invalid car.");
				new res[255], tmp = -1;
				for(new i; i < 5; i++)
				{
					if(Player[playerid][Cars][i] > 0)
					{
						tmp = i;
						new idx = GetVIndex(Player[playerid][Cars][i]);
						if(Veh[idx][Link] == 0 || Veh[idx][Link] == INVALID_VEHICLE_ID)
							format(res, sizeof(res), "%s{F55858}[ %s ] %s\n", res, vNames[Veh[idx][Model] - 400] ,Veh[idx][VName]);
						else
							format(res, sizeof(res), "%s{87E359}[ %s ] %s\n", res, vNames[Veh[idx][Model] - 400] ,Veh[idx][VName]);
					}
					else
					{
						format(res, sizeof(res), "%sEmpty\n", res);
					}
				}

				if(tmp == -1)
					return SendClientMessage(playerid, -1, "You don't have a vehicle that you can register.");

				return ShowPlayerDialog(playerid, NEWPLATE_VEHICLE, DIALOG_STYLE_LIST, "New Vehicle License Plate", res, "Select", "Cancel");
			}
			new idx = GetVIndex(Player[playerid][Cars][listitem]);
			if(idx == -1)
				return SendClientMessage(playerid, -1, "An error occured, that vehicle seems to be bugged or not spawned.");

			if(!Veh[idx][Registered])
				return SendClientMessage(playerid, -1, "That vehicle is not registered!");

			if(Player[playerid][Money] < 500)
				return SendClientMessage(playerid, -1, "You need $500 to buy a new license plate.");

			Player[playerid][Money] -= 500;
			RandomLicensePlate(Veh[idx][Plate]);
			if(IsSQLVehicleSpawned(Player[playerid][Cars][listitem]))
			{
				new vehicleid = Veh[idx][Link], Float:x, Float:y, Float:z, Float:a;
				GetVehiclePos(vehicleid, x, y, z);
				GetVehicleZAngle(vehicleid, a);
				SetVehicleToRespawn(vehicleid);
				vehicleid = Veh[idx][Link];
				SetVehiclePos(vehicleid, x, y, z);
				SetVehicleZAngle(vehicleid, a);
			}

			DeletePVar(playerid, "BuyPlateVal");

			new str[128];
			format(str, sizeof(str), "You have successfully bought a new license plate for your vehicle.");
			SendClientMessage(playerid, -1, str);
		}
		case CHIPSHOP_BUY:
		{
			if(!response)
			{
				if(Groups[Player[playerid][InGroupHQ]][CommandTypes] != 7)
					return 1;
				new str[128], str2[128], groupid = Player[playerid][InGroupHQ];
				format(str, sizeof(str), "%s chip exchange", Groups[groupid][GroupName]);
				format(str2, sizeof(str2), "In stock - %s\nBuy chips - $10\nSell chips - $10\n", IntToFormattedStr(Groups[groupid][Chips]));
				return ShowPlayerDialog(playerid, CHIPSHOP_MAIN, DIALOG_STYLE_LIST, str, str2, "Select", "Cancel");
			}
			else if(!IsNumeric(inputtext) || strval(inputtext) < 1)
			{
				new str[128], str2[128], groupid = Player[playerid][InGroupHQ];
				format(str, sizeof(str), "%s chip exchange", Groups[groupid][GroupName]);
				format(str2, sizeof(str2), "{FFFFFF}Enter the amount of chips you want to buy.\nSelling at {EAED82}$10{FFFFFF} per chip.");
				SendClientMessage(playerid, WHITE, "You need to enter an amount of chips to buy.");
				return ShowPlayerDialog(playerid, CHIPSHOP_BUY, DIALOG_STYLE_INPUT, str, str2, "Buy", "Back");
			}

			if(Groups[Player[playerid][InGroupHQ]][CommandTypes] != 7)
				return 1;
			new amount = strval(inputtext), groupid = Player[playerid][InGroupHQ];
			if(amount > Groups[groupid][Chips])
				return SendClientMessage(playerid, -1, "There are not enough chips in stock!");

			new price = amount * 10;
			if(Player[playerid][Money] < price)
				return SendClientMessage(playerid, -1, "You don't have enough money for that.");

			if(Player[playerid][CasinoChips] + amount > 500)
				return SendClientMessage(playerid, -1, "You can only carry 500 casino chips at a time.");

			Player[playerid][CasinoChips] += amount;
			Player[playerid][Money] -= price;
			Groups[groupid][Chips] -= amount;
			Groups[groupid][SafeMoney] += price;
			new res[128];
			format(res, sizeof(res), "You have bought %d chips for %s.", amount, PrettyMoney(price));
			SendClientMessage(playerid, -1, res);
			format(res, sizeof(res), "%s has purchased %d chips for %s. Group: %d", GetName(playerid), amount, PrettyMoney(price), groupid);
			StatLog(res);
		}
		case CHIPSHOP_SELL:
		{
			if(!response)
			{
				if(Groups[Player[playerid][InGroupHQ]][CommandTypes] != 7)
					return 1;
				new str[128], str2[128], groupid = Player[playerid][InGroupHQ];
				format(str, sizeof(str), "%s chip exchange", Groups[groupid][GroupName]);
				format(str2, sizeof(str2), "In stock - %s\nBuy chips - $10\nSell chips - $10\n", IntToFormattedStr(Groups[groupid][Chips]));
				return ShowPlayerDialog(playerid, CHIPSHOP_MAIN, DIALOG_STYLE_LIST, str, str2, "Select", "Cancel");
			}
			else if(!IsNumeric(inputtext) || strval(inputtext) < 1)
			{
				new str[128], str2[128], groupid = Player[playerid][InGroupHQ];
				format(str, sizeof(str), "%s chip exchange", Groups[groupid][GroupName]);
				format(str2, sizeof(str2), "{FFFFFF}Enter the amount of chips you want to buy.\nBuying at {EAED82}$10{FFFFFF} per chip.");
				SendClientMessage(playerid, WHITE, "You need to enter an amount of chips to sell.");
				return ShowPlayerDialog(playerid, CHIPSHOP_SELL, DIALOG_STYLE_INPUT, str, str2, "Sell", "Back");
			}

			if(Groups[Player[playerid][InGroupHQ]][CommandTypes] != 7)
				return 1;
			new amount = strval(inputtext), groupid = Player[playerid][InGroupHQ];
			if(amount > Player[playerid][CasinoChips])
				return SendClientMessage(playerid, -1, "You do not have enough casino chips!");

			new price = amount * 10;
			if(price > Groups[groupid][SafeMoney])
				return SendClientMessage(playerid, -1, "There is not enough money in the casino's vault.");

			Player[playerid][CasinoChips] -= amount;
			Player[playerid][Money] += price;
			Groups[groupid][Chips] += amount;
			Groups[groupid][SafeMoney] -= price;
			new res[128];
			format(res, sizeof(res), "You have sold %d chips for %s.", amount, PrettyMoney(price));
			SendClientMessage(playerid, -1, res);
			format(res, sizeof(res), "%s has sold %d chips for %s. Group: %d", GetName(playerid), amount, PrettyMoney(price), groupid);
			StatLog(res);
		}

		case VIP_SKILLS:
		{
			if(!response)
			{
				return ShowPlayerDialog(playerid, 8081, DIALOG_STYLE_LIST, "VIP Locker", "Golf Club (40 tokens)\nSkills\nEnter Raffle\nCustom Number\nVIP Vehicles\n", "Select", "Cancel");
			}

			new jobtype, jobid;
			for(new i = 1; i < MAX_JOBS; i++)
			{
				if(!strcmp(inputtext, Jobs[i][JobName], true))
				{
					jobtype = Jobs[i][JobType];
					jobid = i;
					break;
				}
			}

			if(Player[playerid][SkillCooldown] > gettime())
			{
				new string[128], timeLeft;
				timeLeft = Player[playerid][SkillCooldown] - gettime();
				format(string, sizeof(string), "You must wait %d hours and %d minutes before you can purchase another skill level.", timeLeft / 3600, (timeLeft % 3600) / 60);
				return SendClientMessage(playerid, -1, string);
			}

			switch(jobtype) // 1 arms dealer, 5 deliverer, 8 fisherman, 10 pizza boy
			{

				case 1:
				{
					if(Player[playerid][VipTokens] < 200)
						return SendClientMessage(playerid, -1, "You need 200 tokens for this job!");

					if(Player[playerid][ArmsDealerXP] > 57500)
						return SendClientMessage(playerid, -1, "You are already level 10 in that skill!");

					new xp = Player[playerid][ArmsDealerXP];

					switch(xp)
					{
						case 0 .. 249: xp = 250;
						case 250 .. 1749: xp = 1750;
						case 1750 .. 3749: xp = 3750;
						case 3750 .. 6249: xp = 6250;
						case 6250 .. 11249: xp = 11250;
						case 11250 .. 16249: xp = 16250;
						case 16250 .. 23749: xp = 23750;
						case 23750 .. 31249: xp = 31250;
						case 31250 .. 43749: xp = 43750;
						case 43750 .. 57499: xp = 57500;
						default: xp = 0;
					}
					Player[playerid][ArmsDealerXP] = xp;
					Player[playerid][VipTokens] -= 200;
					JobLog(playerid, "Arms dealer", Player[playerid][ArmsDealerXP], Player[playerid][ArmsDealerXP] - xp, true);
					//Player[playerid][ArmsDealerXP] += 250;
				}
				case 5:
				{
					if(Player[playerid][Deliveries] > 500)
						return SendClientMessage(playerid, -1, "You are already level 10 in that skill!");
					Player[playerid][Deliveries] += 50;
					Player[playerid][VipTokens] -= 80;
					JobLog(playerid, "Deliverer", Player[playerid][Deliveries] / 50, (Player[playerid][Deliveries] - 1) / 50, true);
				}
				case 8:
				{
					if(Player[playerid][TotalFished] > 1000)
						return SendClientMessage(playerid, -1, "You are already level 10 in that skill!");
					Player[playerid][TotalFished] += 100;
					Player[playerid][VipTokens] -= 80;
					JobLog(playerid, "Fisherman", Player[playerid][TotalFished] / 100, (Player[playerid][TotalFished] - 1) / 100, true);
				}
				case 10:
				{
					if(Player[playerid][PizzaDelivers] > 600)
						return SendClientMessage(playerid, -1, "You are already level 10 in that skill!");
					Player[playerid][PizzaDelivers] += 200;
					Player[playerid][VipTokens] -= 80;
					JobLog(playerid, "Pizzaman", Player[playerid][PizzaDelivers] / 200, (Player[playerid][PizzaDelivers] - 1) / 200, true);
				}
			}

			Player[playerid][SkillCooldown] = gettime() + 86400;
			new string[128];
			format(string, sizeof(string), "You have leveled up your %s skill.", Jobs[jobid][JobName]);
			SendClientMessage(playerid, -1, string);
		}

		// == ATM START == //
		case ATM_MAIN_DIALOG:
		{
			new string[128];
			if(!response)
			{
				format(string, sizeof(string), "* %s takes their card from the machine", GetName(playerid));
				NearByMessage(playerid, NICESKY, string);
				return 1;
			}

			switch(listitem)
			{
				case 0:
				{
					format(string, sizeof(string), "{FFFFFF}Balance: {00C711}%s{FFFFFF}\nDeposit\nWithdraw", PrettyMoney(Player[playerid][BankMoney]));
					ShowPlayerDialog(playerid, ATM_MAIN_DIALOG, DIALOG_STYLE_LIST, "Los Santos ATM", string, "Next", "Close");
					return 1;
				}
				case 1:
					return ShowPlayerDialog(playerid, ATM_DEPOSIT_DIALOG, DIALOG_STYLE_INPUT, "Los Santos ATM - Deposit", "Enter in how much you'd like to deposit, you are charged a fee of 15 percent of the deposit.",
					"Confirm", "Back");
				case 2:
				{
					format(string, sizeof(string), "Enter how much you wish to withdraw, you will be charged 15 percent of the amount. Your current balance is: {00C711}%s", PrettyMoney(Player[playerid][BankMoney]));
					ShowPlayerDialog(playerid, ATM_WITHDRAW_DIALOG, DIALOG_STYLE_INPUT, "Los Santos ATM - Withdraw", string, "Confirm", "Back");
					return 1;
				}
			}

		}
		case ATM_DEPOSIT_DIALOG:
		{
			new string[128];
			if(!response)
			{
				format(string, sizeof(string), "{FFFFFF}Balance: {00C711}%s{FFFFFF}\nDeposit\nWithdraw", PrettyMoney(Player[playerid][BankMoney]));
				ShowPlayerDialog(playerid, ATM_MAIN_DIALOG, DIALOG_STYLE_LIST, "Los Santos ATM", string, "Next", "Close");
				return 1;
			}


			new amount = strval(inputtext);
			if(amount < 1 || !IsNumeric(inputtext))
			{
				ShowPlayerDialog(playerid, ATM_DEPOSIT_DIALOG, DIALOG_STYLE_INPUT, "Los Santos ATM - Deposit", "Enter in how much you'd like to deposit, you are charged a fee of 15 percent of the deposit.",
				"Confirm", "Back");
				SendClientMessage(playerid, -1, "You must deposit a valid amount.");
				return 1;
			}

			if(amount > Player[playerid][Money])
			{
				ShowPlayerDialog(playerid, ATM_DEPOSIT_DIALOG, DIALOG_STYLE_INPUT, "Los Santos ATM - Deposit", "Enter in how much you'd like to deposit, you are charged a fee of 15 percent of the deposit.",
				"Confirm", "Back");
				SendClientMessage(playerid, -1, "You don't have that much money.");
				return 1;
			}

			new fee = floatround((amount * 0.15), floatround_ceil);

			if((Player[playerid][BankMoney] + amount) < fee)
			{
				ShowPlayerDialog(playerid, ATM_DEPOSIT_DIALOG, DIALOG_STYLE_INPUT, "Los Santos ATM - Deposit", "Enter in how much you'd like to deposit, you are charged a fee of 15 percent of the deposit.",
				"Confirm", "Back");
				SendClientMessage(playerid, -1, "You can't afford to pay the fee.");
				return 1;
			}

			Player[playerid][BankMoney] += (amount - fee);
			Player[playerid][Money] -= amount;
			Groups[TaxGroup][SafeMoney] += fee;

			new ip[25];
			GetPlayerIp(playerid, ip, sizeof(ip));
			format(string, sizeof(string), "[ATM] %s (%s) has deposited $%s ($%s) into their bank account ($%s).", GetName(playerid), ip, IntToFormattedStr(amount), IntToFormattedStr(Player[playerid][Money] - amount), IntToFormattedStr(Player[playerid][BankMoney] + amount));
			MoneyLog(string);

			format(string, sizeof(string), "{FFFFFF}Balance: {00C711}%s{FFFFFF}\nDeposit\nWithdraw", PrettyMoney(Player[playerid][BankMoney]));
			ShowPlayerDialog(playerid, ATM_MAIN_DIALOG, DIALOG_STYLE_LIST, "Los Santos ATM", string, "Next", "Close");
			format(string, sizeof(string), "You have successfully deposited %s into your bank account. You were charged %s", PrettyMoney(amount), PrettyMoney(fee));
			SendClientMessage(playerid, -1, string);
		}
		case ATM_WITHDRAW_DIALOG:
		{
			new string[128];
			if(!response)
			{
				format(string, sizeof(string), "{FFFFFF}Balance: {00C711}%s{FFFFFF}\nDeposit\nWithdraw", PrettyMoney(Player[playerid][BankMoney]));
				ShowPlayerDialog(playerid, ATM_MAIN_DIALOG, DIALOG_STYLE_LIST, "Los Santos ATM", string, "Next", "Close");
				return 1;
			}

			new amount = strval(inputtext);
			if(amount < 1 || !IsNumeric(inputtext))
			{
				format(string, sizeof(string), "Enter how much you wish to withdraw, you will be charged 15 percent of the amount. Your current balance is: {00C711}%s", PrettyMoney(Player[playerid][BankMoney]));
				ShowPlayerDialog(playerid, ATM_WITHDRAW_DIALOG, DIALOG_STYLE_INPUT, "Los Santos ATM - Withdraw", string, "Confirm", "Back");
				SendClientMessage(playerid, -1, "You must withdraw a valid amount.");
				return 1;
			}

			if(amount > Player[playerid][BankMoney])
			{
				format(string, sizeof(string), "Enter how much you wish to withdraw, you will be charged 15 percent of the amount. Your current balance is: {00C711}%s", PrettyMoney(Player[playerid][BankMoney]));
				ShowPlayerDialog(playerid, ATM_WITHDRAW_DIALOG, DIALOG_STYLE_INPUT, "Los Santos ATM - Withdraw", string, "Confirm", "Back");
				SendClientMessage(playerid, -1, "You don't have that much money in your bank.");
				return 1;
			}

			new fee = floatround((amount * 0.15), floatround_ceil);

			if((Player[playerid][BankMoney] - amount) < fee)
			{
				format(string, sizeof(string), "Enter how much you wish to withdraw, you will be charged 15 percent of the amount. Your current balance is: {00C711}%s", PrettyMoney(Player[playerid][BankMoney]));
				ShowPlayerDialog(playerid, ATM_WITHDRAW_DIALOG, DIALOG_STYLE_INPUT, "Los Santos ATM - Withdraw", string, "Confirm", "Back");
				SendClientMessage(playerid, -1, "You can't afford to pay the fee.");
				return 1;
			}


			Player[playerid][BankMoney] -= (amount + fee);
			Player[playerid][Money] += amount;
			Groups[TaxGroup][SafeMoney] += fee;

			new ip[25];
			GetPlayerIp(playerid, ip, sizeof(ip));
			format(string, sizeof(string), "[ATM] %s (%s) has withdrawn $%s ($%s) from their bank account ($%s).", GetName(playerid), ip, IntToFormattedStr(amount), IntToFormattedStr(Player[playerid][Money] - amount), IntToFormattedStr(Player[playerid][BankMoney] + amount));
			MoneyLog(string);

			format(string, sizeof(string), "{FFFFFF}Balance: {00C711}%s{FFFFFF}\nDeposit\nWithdraw", PrettyMoney(Player[playerid][BankMoney]));
			ShowPlayerDialog(playerid, ATM_MAIN_DIALOG, DIALOG_STYLE_LIST, "Los Santos ATM", string, "Next", "Close");
			format(string, sizeof(string), "You have successfully withdrawn %s from your bank account. You were charged %s", PrettyMoney(amount), PrettyMoney(fee));
			SendClientMessage(playerid, -1, string);
		}
		// == ATM END == //

		case AGENCY_PEND:
		{
			new id = GetPVarInt(playerid, "Contractor"), string[128];
			if(!response)
			{
				if(Player[id][PendingContract] >= 0)
				{
					format(string, sizeof(string), "%s has declined the contract by %s.", GetName(playerid), GetName(id));
					foreach(Player, i)
					{
						if(Groups[Player[i][Group]][CommandTypes] == 2)
							SendClientMessage(i, ANNOUNCEMENT, string);
					}
					Player[id][PendingContract] = -1;
					Player[id][PendingPrice] = 0;
					format(Player[id][PendingReason], 255, "Nothing");
				}
			}
			else
			{
				if(Player[id][PendingContract] >= 0)
				{
					format(string, sizeof(string), "%s has accepted the contract by %s.", GetName(playerid), GetName(id));
					foreach(Player, i)
					{
						if(Groups[Player[i][Group]][CommandTypes] == 2)
							SendClientMessage(i, ANNOUNCEMENT, string);
					}
					Player[Player[id][PendingContract]][ContractPrice] = Player[id][PendingPrice];
					format(Player[Player[id][PendingContract]][Contract], 255, "%s", Player[id][PendingReason]);

					Player[id][Money] -= Player[id][PendingPrice];

					Player[id][PendingContract] = -1;
					Player[id][PendingPrice] = 0;
					format(Player[id][PendingReason], 255, "Nothing");
				}
			}
		}
		case DESC_EDITHEAD:
		{
			if(!response)
				return ShowPlayerDialog(playerid, DESC_EDIT, DIALOG_STYLE_LIST, "Edit description", EditDescString(playerid), "Edit", "Cancel");

			format(Player[playerid][HeadDesc], 255, inputtext);
			SendClientMessage(playerid, -1, "You successfully changed your head description.");
			ShowPlayerDialog(playerid, DESC_EDIT, DIALOG_STYLE_LIST, "Edit description", EditDescString(playerid), "Edit", "Cancel");
		}
		case DESC_EDITBODY:
		{
			if(!response)
				return ShowPlayerDialog(playerid, DESC_EDIT, DIALOG_STYLE_LIST, "Edit description", EditDescString(playerid), "Edit", "Cancel");

			format(Player[playerid][BodyDesc], 255, inputtext);
			SendClientMessage(playerid, -1, "You successfully changed your body description.");
			ShowPlayerDialog(playerid, DESC_EDIT, DIALOG_STYLE_LIST, "Edit description", EditDescString(playerid), "Edit", "Cancel");
		}
		case DESC_EDITCLOTHING:
		{
			if(!response)
				return ShowPlayerDialog(playerid, DESC_EDIT, DIALOG_STYLE_LIST, "Edit description", EditDescString(playerid), "Edit", "Cancel");

			format(Player[playerid][ClothingDesc], 255, inputtext);
			SendClientMessage(playerid, -1, "You successfully changed your clothing description.");
			ShowPlayerDialog(playerid, DESC_EDIT, DIALOG_STYLE_LIST, "Edit description", EditDescString(playerid), "Edit", "Cancel");
		}
		case DESC_EDITACCESSORY:
		{
			if(!response)
				return ShowPlayerDialog(playerid, DESC_EDIT, DIALOG_STYLE_LIST, "Edit description", EditDescString(playerid), "Edit", "Cancel");

			format(Player[playerid][AccessoryDesc], 255, inputtext);
			SendClientMessage(playerid, -1, "You successfully changed your accessory description.");
			ShowPlayerDialog(playerid, DESC_EDIT, DIALOG_STYLE_LIST, "Edit description", EditDescString(playerid), "Edit", "Cancel");
		}

		case 2489:
		{
			if(!response)
				return 1;

			switch(listitem)
			{
				case 0:
				{
					if(strval(GetPhoneInfo(Player[playerid][PhoneN], "adapp")) >= 1)
					{
						if(ToggledAdvertisments == 1)
							return SendClientMessage(playerid, WHITE, "Mobile Advertisments are currently unavailable.");

						new string[128];
						SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
						SendClientMessage(playerid, WHITE, "Advertisement");
						SendClientMessage(playerid, GREY, "You can place a public advertisement via your WAP connection. Please note that placing an ad");
						format(string, sizeof(string), "will cost you $%d, out of your bank account. This is an expensive service.", MobilePrice);
						SendClientMessage(playerid, GREY, string);
						SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
						ShowPlayerDialog(playerid, 4515, DIALOG_STYLE_INPUT, "Advertisement", "Please enter your advertisement dialog.", "Submit", "Cancel");
					}
					else
					{
						SendClientMessage(playerid, WHITE, "You do not currently own the advertisement application. Do you wish to buy it? It costs $100.");
						ShowPlayerDialog(playerid, 6442, DIALOG_STYLE_LIST, "Application Purchase", "Yes - I wish to purchase this!\nNo - I do not wish to purchase this!\n", "Proceed", "Cancel");
					}
				}
				case 1:
				{
					ShowYP_MAIN(playerid);
				}
				case 2:
				{
					if(strval(GetPhoneInfo(Player[playerid][PhoneN], "trackapp")) >= 1)
					{
						ShowPlayerDialog(playerid, PHONE_TRACK, DIALOG_STYLE_INPUT, "uTrack", "Welcome to the uTrack phone number tracking app.\nPlease note each track costs $150!\n\nPlease enter the phone number you wish to track!", "Track!", "Cancel");
					}
					else
					{
						ShowPlayerDialog(playerid, PHONE_TRACK_PURCHASE, DIALOG_STYLE_MSGBOX, "uTrack", "You do not currently own this application.\n\nWould you like to purchase it?\nIt will cost $2,000.", "Purchase", "Cancel");
					}
				}
				case 3:
				{
					if(strval(GetPhoneInfo(Player[playerid][PhoneN], "blockapp")) >= 1)
					{
						SetPVarInt(playerid, "BlockOffListPage", 0);
						ShowPlayerDialog(playerid, PHONE_BLOCKMAIN, DIALOG_STYLE_LIST, "BlockOff App", "List blocked numbers\nBlock a number\nUnblock a number\n", "Select", "Cancel");
					}
					else
					{
						ShowPlayerDialog(playerid, PHONE_BLOCKMAIN, DIALOG_STYLE_MSGBOX, "BlockOff App", "The BlockOff application is an application which allows\nyou to block phone numbers from texting and calling your number.\n\nThis application costs $1,500.", "Purchase", "Cancel");
					}
				}
				case 4:
 				{
 					if(strval(GetPhoneInfo(Player[playerid][PhoneN], "gpsapp")) >= 1)
 					{
 						ShowPlayerDialog(playerid, PHONE_GPS, DIALOG_STYLE_LIST, "GPS App", "Get coordinates\nInput coordinates", "Select", "Cancel");
 					}
 					else
 					{
 						ShowPlayerDialog(playerid, PHONE_GPS, DIALOG_STYLE_MSGBOX, "GPS App", "The GPS applications allows you to get coordinates of locations and also input coordinates for locations.\nThis application will cost $2,200", "Purchase", "Cancel");
 					}
 				}
 			}
 		}
 		case PHONE_GPS:
 		{
 			if(!response)
 				return 1;
 			
 			if(strval(GetPhoneInfo(Player[playerid][PhoneN], "gpsapp")) < 1)
 			{
 				if(Player[playerid][BankMoney] < 2200)
 					return SendClientMessage(playerid, WHITE, "You don't have enough money in the bank to purchase this app! ($2,200)");
 
 				Player[playerid][BankMoney] -= 2200;
 
 				new query[128];
 				mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE phones SET gpsapp = '1' WHERE owner = '%e' AND number = '%d'", Player[playerid][NormalName], Player[playerid][PhoneN]);
 				mysql_query(MYSQL_MAIN, query, false);
				
				SendClientMessage(playerid, WHITE, "You have purchased the GPS app!");
 				return ShowPlayerDialog(playerid, PHONE_GPS, DIALOG_STYLE_LIST, "GPS app", "Get coordinates\nInput coordinates", "Select", "Cancel");
 			}
 			
 			switch(listitem)
 			{
 				case 0: //get coords
 				{
 					Player[playerid][PhoneGPS] = 1;
 					SendClientMessage(playerid, WHITE, "Go to your map and mark a location for the coordinates");
 				}
 				case 1:
 				{
 					ShowPlayerDialog(playerid, PHONE_GPS_INPUT, DIALOG_STYLE_INPUT, "GPS app > input coordinates", "Enter the coordinates\nFormat: x.xx y.yy z.zz", "Done", "Cancel");
 				}
  			}
  		}
 		case PHONE_GPS_INPUT:
 		{
 			if(!response)
 				return ShowPlayerDialog(playerid, PHONE_GPS, DIALOG_STYLE_LIST, "GPS app", "Get coordinates\nInput coordinates", "Select", "Cancel");
 
 			if(Player[playerid][Checkpoint] > 0)
 				return SendClientMessage(playerid, WHITE, "You already have an active checkpoint");
 				
 			new Float:x, Float:y, Float:z;
 			if(sscanf(inputtext, "fff", x, y, z))
 				return ShowPlayerDialog(playerid, PHONE_GPS_INPUT, DIALOG_STYLE_INPUT, "GPS app > input coordinates", "Enter the coordinates\nFormat: x.xx y.yy z.zz", "Done", "Cancel");
 				
 			SetPlayerCheckpoint(playerid, x, y, z, 10.0);
 			Player[playerid][Checkpoint] = 1;
 			Player[playerid][Map] = 1;
 			SendClientMessage(playerid, WHITE, "A marker has been set at those coordinates.");
		}
		case PHONE_BLOCKMAIN:
		{
			if(!response)
				return 1;

			if(strval(GetPhoneInfo(Player[playerid][PhoneN], "blockapp")) < 1)
			{
				if(Player[playerid][BankMoney] < 1500)
					return SendClientMessage(playerid, WHITE, "You don't have enough money in the bank to purchase this app! ($1,500)");

				Player[playerid][BankMoney] -= 1500;

				new query[128];
				mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE phones SET blockapp = '1' WHERE owner = '%e' AND number = '%d'", Player[playerid][NormalName], Player[playerid][PhoneN]);
				mysql_query(MYSQL_MAIN, query, false);

				return ShowPlayerDialog(playerid, PHONE_BLOCKMAIN, DIALOG_STYLE_LIST, "WELCOME TO BlockOff", "List blocked numbers\nBlock a number\nUnblock a number\n", "Select", "Cancel");
			}

			switch(listitem)
			{
				case 0: // list
				{
					ShowDialog(playerid, PHONE_BLOCKLIST);
				}
				case 1: // block
				{
					SetPVarInt(playerid, "BlockOffEdit", 1);
					ShowPlayerDialog(playerid, PHONE_BLOCKEDIT, DIALOG_STYLE_INPUT, "BlockOff - Block a number", "Enter a number you want to block.\n\nBlocking a number will cost $500.", "Done", "Back");
				}
				case 2: // unblock
				{
					SetPVarInt(playerid, "BlockOffEdit", 2);
					ShowPlayerDialog(playerid, PHONE_BLOCKEDIT, DIALOG_STYLE_INPUT, "BlockOff - Unblock a number", "Enter a number you want to unblock.", "Done", "Back");
				}
			}
		}
		case PHONE_BLOCKLIST:
		{
			if(!response)
			{
				if(GetPVarInt(playerid, "BlockOffListPage") == 0)
				{
					SetPVarInt(playerid, "BlockOffListPage", 0);
					return ShowPlayerDialog(playerid, PHONE_BLOCKMAIN, DIALOG_STYLE_LIST, "BlockOff App", "List blocked numbers\nBlock a number\nUnblock a number\n", "Select", "Cancel");
				}

				SetPVarInt(playerid, "BlockOffListPage", GetPVarInt(playerid, "BlockOffListPage") - 1);
				return ShowDialog(playerid, PHONE_BLOCKLIST);
			}

			if(GetPVarInt(playerid, "BlockOffListMorePages") == 0 && GetPVarInt(playerid, "BlockOffListPage") == 0)
			{
				SetPVarInt(playerid, "BlockOffListPage", 0);
				return ShowPlayerDialog(playerid, PHONE_BLOCKMAIN, DIALOG_STYLE_LIST, "BlockOff App", "List blocked numbers\nBlock a number\nUnblock a number\n", "Select", "Cancel");
			}

			if(GetPVarInt(playerid, "BlockOffListPage") > 0 && GetPVarInt(playerid, "BlockOffListMorePages") == 0)
			{
				SetPVarInt(playerid, "BlockOffListPage", GetPVarInt(playerid, "BlockOffListPage") - 1);
				return ShowDialog(playerid, PHONE_BLOCKLIST);
			}

			SetPVarInt(playerid, "BlockOffListPage", GetPVarInt(playerid, "BlockOffListPage") + 1);
			return ShowDialog(playerid, PHONE_BLOCKLIST);
		}
		case PHONE_BLOCKEDIT:
		{
			if(!response)
				return ShowPlayerDialog(playerid, PHONE_BLOCKMAIN, DIALOG_STYLE_LIST, "BlockOff App", "List blocked numbers\nBlock a number\nUnblock a number\n", "Select", "Cancel");

			switch(GetPVarInt(playerid, "BlockOffEdit"))
			{
				case 1: // block
				{
					if(isnull(inputtext) || !IsNumeric(inputtext))
					{
						SendClientMessage(playerid, WHITE, "Input a proper number.");
						return ShowPlayerDialog(playerid, PHONE_BLOCKEDIT, DIALOG_STYLE_INPUT, "BlockOff - Block a number", "Enter a number you want to block.\n\nBlocking a number will cost $500.", "Done", "Back");
					}

					if(IsNumberBlocked(Player[playerid][PhoneN], strval(inputtext)))
					{
						SendClientMessage(playerid, WHITE, "You already have that number blocked!");
						return ShowPlayerDialog(playerid, PHONE_BLOCKEDIT, DIALOG_STYLE_INPUT, "BlockOff - Block a number", "Enter a number you want to block.\n\nBlocking a number will cost $500.", "Done", "Back");
					}

					if(Player[playerid][BankMoney] < 500)
					{
						SendClientMessage(playerid, WHITE, "You don't have enough money in the bank to block this number.");
						return ShowPlayerDialog(playerid, PHONE_BLOCKEDIT, DIALOG_STYLE_INPUT, "BlockOff - Block a number", "Enter a number you want to block.\n\nBlocking a number will cost $500.", "Done", "Back");
					}

					new string[128];
					Player[playerid][BankMoney] -= 500;
					mysql_format(MYSQL_MAIN, string, sizeof(string), "INSERT INTO blockednumbers (phone, blocked) VALUES ('%d', '%d')", Player[playerid][PhoneN], strval(inputtext));
					mysql_query(MYSQL_MAIN, string, false);
					return ShowPlayerDialog(playerid, PHONE_BLOCKMAIN, DIALOG_STYLE_LIST, "BlockOff App", "List blocked numbers\nBlock a number\nUnblock a number\n", "Select", "Cancel");
				}
				case 2: // unblock
				{
					if(isnull(inputtext) || !IsNumeric(inputtext))
					{
						SendClientMessage(playerid, WHITE, "Input a proper number.");
						return ShowPlayerDialog(playerid, PHONE_BLOCKEDIT, DIALOG_STYLE_INPUT, "BlockOff - Unblock a number", "Enter a number you want to unblock.", "Done", "Back");
					}

					if(!IsNumberBlocked(Player[playerid][PhoneN], strval(inputtext)))
					{
						SendClientMessage(playerid, WHITE, "That number is not blocked!");
						return ShowPlayerDialog(playerid, PHONE_BLOCKEDIT, DIALOG_STYLE_INPUT, "BlockOff - Unblock a number", "Enter a number you want to unblock.", "Done", "Back");
					}

					new string[128];
					mysql_format(MYSQL_MAIN, string, sizeof(string), "DELETE FROM blockednumbers WHERE phone = '%d' AND blocked = '%d'", Player[playerid][PhoneN], strval(inputtext));
					mysql_query(MYSQL_MAIN, string, false);
					return ShowPlayerDialog(playerid, PHONE_BLOCKMAIN, DIALOG_STYLE_LIST, "BlockOff App", "List blocked numbers\nBlock a number\nUnblock a number\n", "Select", "Cancel");
				}
			}
		}
		case PHONE_TRACK:
		{
			if(!response)
				return 1;

			new number = strval(inputtext);

			if(number < 1 || !IsExistingPhoneNumber(number) || strval(GetPhoneInfo(number, "status")) == 0)
						return SendClientMessage(playerid, -1, "uTrack cannot locate that number.");

			if(Player[playerid][BankMoney] < 150 && Groups[Player[playerid][Group]][CommandTypes] != 1 && Groups[Player[playerid][Group]][CommandTypes] != 2)
				return SendClientMessage(playerid, -1, "You do not have the required funds in your bank account.");

			new string[128], name[MAX_PLAYER_NAME];
			
			format(name, sizeof(name), "%s", GetPhoneInfo(number, "owner"));
			if(!strcmp(name, "Stashed_Phone", true))
			{
				if(Player[playerid][TrackCooldown] > gettime())
				{
					format(string, sizeof(string), "You must wait %d seconds before you can track another number.", Player[playerid][TrackCooldown] - gettime());
					return SendClientMessage(playerid, WHITE, string);
				}

				if(Player[playerid][Checkpoint] > 0)
					return SendClientMessage(playerid, WHITE, "You already have an existing checkpoint. Reach it first.");
					
				new Float:pos[3];
				for(new i; i < MAX_STASH; i++)
				{
					if(GlobalStash[i][ItemAmount] == number)
					{
						pos[0] = GlobalStash[i][StashX];
						pos[1] = GlobalStash[i][StashY];
						pos[2] = GlobalStash[i][StashZ];
						break;
					}
				}
				SetPlayerCheckpoint(playerid, pos[0], pos[1], pos[2], 6.0);
				SendClientMessage(playerid, WHITE, "A checkpoint has been set, the phone was traced in at the marked area.");
				if(Groups[Player[playerid][Group]][CommandTypes] != 2)
					Player[playerid][BankMoney] -= 150;

				format(string, sizeof(string), "[Track] %s has tracked a stashed phone (%d)", GetName(playerid), number);
				CommandsLog(string);
				Player[playerid][TrackCooldown] = gettime() + 60;
				Player[playerid][Checkpoint] = 1;
				Player[playerid][Detecting] = 1;
				return 1;
			}
			else
			{
				new id = GetPlayerIDEx(GetPhoneInfo(number, "owner"));

				if(!IsPlayerConnectedEx(id) || Player[id][AdminDuty] > 0 || Player[id][PrisonDuration] > 0 || Player[id][PrisonID] > 0 || Spectator[id][SpecSpectatingPlayer] != -1 || Spectator[id][SpecSpectatingVehicle] != -1)
					return SendClientMessage(playerid, -1, "uTrack cannot locate that number.");

				if(Player[playerid][TrackCooldown] > gettime())
				{
					format(string, sizeof(string), "You must wait %d seconds before you can track another number.", Player[playerid][TrackCooldown] - gettime());
					return SendClientMessage(playerid, WHITE, string);
				}

				if(Player[playerid][Checkpoint] > 0)
					return SendClientMessage(playerid, WHITE, "You already have an existing checkpoint. Reach it first.");

				new world = GetPlayerVirtualWorld(id);

				if(world > 0)
				{
					if(world == VipLoungeVW)
						SetPlayerCheckpoint(playerid, VipLounge[0], VipLounge[1], VipLounge[2], 6.0);
					else if(Player[id][InBusiness] != 0)
						SetPlayerCheckpoint(playerid, Businesses[Player[id][InBusiness]][bExteriorX], Businesses[Player[id][InBusiness]][bExteriorY], Businesses[Player[id][InBusiness]][bExteriorZ], 6.0);
					else if(Player[id][InHouse] != 0)
						SetPlayerCheckpoint(playerid, Houses[Player[id][InHouse]][hExteriorX], Houses[Player[id][InHouse]][hExteriorY], Houses[Player[id][InHouse]][hExteriorZ], 6.0);
					else if(Player[id][InGroupHQ] != 0)
						SetPlayerCheckpoint(playerid, Groups[Player[id][InGroupHQ]][HQExteriorX], Groups[Player[id][InGroupHQ]][HQExteriorY], Groups[Player[id][InGroupHQ]][HQExteriorZ], 6.0);
					else
						return SendClientMessage(playerid, -1, "Unable to locate the targets current building.");
					SendClientMessage(playerid, WHITE, "A checkpoint has been set, the phone was traced inside the marked building.");
				}
				else
				{
					new Float:pPos[3];
					GetPlayerPos(id, pPos[0], pPos[1], pPos[2]);
					SetPlayerCheckpoint(playerid, pPos[0], pPos[1], pPos[2], 6.0);
					SendClientMessage(playerid, WHITE, "A checkpoint has been set, the phone was traced in at the marked area.");
				}

				if(Groups[Player[playerid][Group]][CommandTypes] != 2)
					Player[playerid][BankMoney] -= 150;

				format(string, sizeof(string), "[Track] %s has tracked %s. (%d)", GetName(playerid), GetName(id), number);
				CommandsLog(string);
				Player[playerid][TrackCooldown] = gettime() + 60;
				Player[playerid][Checkpoint] = 1;
				Player[playerid][Detecting] = 1;
			}
		}
		case PHONE_TRACK_PURCHASE:
		{
			if(!response)
				return 1;

			if(Player[playerid][BankMoney] < 2000)
				return SendClientMessage(playerid, -1, "You don't have $2,000 in your bank account at this time.");

			Player[playerid][BankMoney] -= 2000;

			new query[128];
			mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE phones SET trackapp = '1' WHERE owner = '%e' AND number = '%d'", Player[playerid][NormalName], Player[playerid][PhoneN]);
			mysql_query(MYSQL_MAIN, query, false);

			SendClientMessage(playerid, -1, "Congratulations on purchasing uTrack and good luck tracking!");
		}

		/* ### PHONE DIALOGS ### */
		case PHONE_MAIN:
		{
			new string[1024];
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialog(playerid, 2489, DIALOG_STYLE_LIST, "Phone Menu - Applications", "Advertisements\nYellow Pages\nuTrack\nBlockOff\nGPS", "Select", "Cancel");
					}
					case 1:
					{
						ShowPlayerDialog(playerid, PHONE_CONTACTS, DIALOG_STYLE_LIST, "Phone Menu - Contacts", "List Contacts\nCreate new contact\n", "Select", "Back");
					}
					case 2:
					{
						//ShowPlayerDialog(playerid, PHONE_INBOX, DIALOG_STYLE_LIST, "Phone Menu - Inbox", GetSMSHistory(Player[playerid][PhoneN], 0), "Select", "Close");
						GetSMSHistory(playerid, Player[playerid][PhoneN], 0);
						SetPVarInt(playerid, "SMSHistoryPage", 0);
					}
					case 3:
					{
						ShowPlayerDialog(playerid, PHONE_HISTORY, DIALOG_STYLE_LIST, "Phone Menu - Call History", GetCallHistory(Player[playerid][PhoneN], 0), "Select", "Back");
						SetPVarInt(playerid, "CallHistoryPage", 0);
					}
					case 4:
					{
						format(string, sizeof(string), "Change ringtone\nEdit phone name\nVibration: %s\n", (strval(GetPhoneInfo(Player[playerid][PhoneN], "vibrate")) == 1) ? ("ON") : ("OFF"));
						ShowPlayerDialog(playerid, PHONE_EDIT, DIALOG_STYLE_LIST, "Phone Menu - Edit", string, "Select", "Back");
					}
					case 5:
					{
						ShowDialog(playerid, PHONE_RECENTADS);
					}
				}
			}
		}
		case PHONE_EDIT:
		{
			if(!response)
				return ShowPlayerDialog(playerid, PHONE_MAIN, DIALOG_STYLE_LIST, "Phone Menu", "Applications\nContacts\nInbox\nCall History\nEdit Phone\nRecent Advertisments", "Select", "Cancel");

			switch(listitem)
			{
				case 0: ShowPlayerDialog(playerid, PHONE_RINGTONE, DIALOG_STYLE_LIST, "Ringtones", "Silent\nRingtone 1\nRingtone 2\nRingtone 3\nRingtone 4\nRingtone 5\nRingtone 6\nRingtone 7\n", "Select", "Cancel");
				case 1: ShowPlayerDialog(playerid, PHONE_EDITNAME, DIALOG_STYLE_INPUT, "Edit Phone Name", "Enter the new name for your phone.", "Done", "Cancel");
				case 2:
				{
					new string[128];
					mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE phones SET vibrate = '%d' WHERE number = '%d' AND owner = '%e'", !strval(GetPhoneInfo(Player[playerid][PhoneN], "vibrate")), Player[playerid][PhoneN], Player[playerid][NormalName]);
					mysql_query(MYSQL_MAIN, string, false);
					ShowPlayerDialog(playerid, PHONE_MAIN, DIALOG_STYLE_LIST, "Phone Menu", "Applications\nContacts\nInbox\nCall History\nEdit Phone\nRecent Advertisments", "Select", "Cancel");
				}
			}
		}
		case PHONE_EDITNAME:
		{
			if(!response)
				return ShowPlayerDialog(playerid, PHONE_MAIN, DIALOG_STYLE_LIST, "Phone Menu", "Applications\nContacts\nInbox\nCall History\nEdit Phone\nRecent Advertisments", "Select", "Cancel");

			if(strlen(inputtext) < 1 || strlen(inputtext) > 31)
				return SendClientMessage(playerid, GREY, "Error, that name is invalid. (too long or too short)");

			new string[128];
			mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE phones SET label = '%e' WHERE owner = '%e' AND number = '%d'", inputtext, Player[playerid][NormalName], Player[playerid][PhoneN]);
			mysql_query(MYSQL_MAIN, string, false);
		}
		case PHONE_CONTACTS:
		{
			if(!response)
			 return ShowPlayerDialog(playerid, PHONE_MAIN, DIALOG_STYLE_LIST, "Phone Menu", "Applications\nContacts\nInbox\nCall History\nEdit Phone\nRecent Advertisments", "Select", "Cancel");

			switch(listitem)
			{
				case 0:
				{
					new string[128];
					mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT * FROM phonecontacts WHERE number = '%d'", Player[playerid][PhoneN]);
					new Cache:cache = mysql_query(MYSQL_MAIN, string), count = cache_get_row_count(), idx;

					if(count == 0)
					{
						format(string, sizeof(string), "No contacts!");
						return ShowPlayerDialog(playerid, PHONE_VIEWCONTACTS, DIALOG_STYLE_MSGBOX, "List Contacts", string, "Select", "Back");
					}

					DeletePVar(playerid, "ContactPage");

					new end, name[32], number, result[45 * 15];
					while(idx < count && end < 15)
					{
						cache_set_active(cache);
						number = cache_get_field_content_int(idx, "contactnumber");
						cache_get_field_content(idx, "contactname", name);

						format(result, sizeof(result), "%s%s - %d\n", result, name, number);

						end ++;
						idx ++;
					}

					cache_delete(cache);

					if(idx < count)
						strins(result, BLUETEXT"Next\n", strlen(result));

					if(GetPVarInt(playerid, "ContactPage") > 0)
						strins(result, BLUETEXT"Back\n", strlen(result));

					ShowPlayerDialog(playerid, PHONE_VIEWCONTACTS, DIALOG_STYLE_LIST, "List Contacts", result, "Select", "Back");
				}
				case 1:
				{
					ShowPlayerDialog(playerid, PHONE_ADDNAME, DIALOG_STYLE_INPUT, "Create a new contact", "Enter your new contacts name", "Done", "Back");
				}
			}
		}
		case PHONE_VIEWCONTACTS:
		{
			if(!response)
				return ShowPlayerDialog(playerid, PHONE_CONTACTS, DIALOG_STYLE_LIST, "Phone Menu - Contacts", "List Contacts\nCreate new contact\n", "Select", "Back");

			new string[128];
			mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT * FROM phonecontacts WHERE number = '%d'", Player[playerid][PhoneN]);
			new Cache:cache = mysql_query(MYSQL_MAIN, string), count = cache_get_row_count(), idx = (GetPVarInt(playerid, "ContactPage") * 15) + listitem;

			if(count == 0)
				return ShowPlayerDialog(playerid, PHONE_CONTACTS, DIALOG_STYLE_LIST, "Phone Menu - Contacts", "List Contacts\nCreate new contact\n", "Select", "Back");

			if(!strcmp(inputtext, "Next", true))
			{
				SetPVarInt(playerid, "ContactPage", GetPVarInt(playerid, "ContactPage") + 1);
				idx = GetPVarInt(playerid, "ContactPage") * 15;

				new end, name[32], number, result[45 * 15];
				while(idx < count && end < 15)
				{
					cache_set_active(cache);
					number = cache_get_field_content_int(idx, "contactnumber");
					cache_get_field_content(idx, "contactname", name);

					format(result, sizeof(result), "%s%s - %d\n", result, name, number);

					end ++;
					idx ++;
				}

				cache_delete(cache);

				if(idx < count)
					strins(result, BLUETEXT"Next\n", strlen(result));

				if(GetPVarInt(playerid, "ContactPage") > 0)
					strins(result, BLUETEXT"Back\n", strlen(result));

				return ShowPlayerDialog(playerid, PHONE_VIEWCONTACTS, DIALOG_STYLE_LIST, "List Contacts", result, "Select", "Back");
			}
			else if(!strcmp(inputtext, "Back", true))
			{
				SetPVarInt(playerid, "ContactPage", GetPVarInt(playerid, "ContactPage") - 1);
				idx = GetPVarInt(playerid, "ContactPage") * 15;

				new end, name[32], number, result[45 * 15];
				while(idx < count && end < 15)
				{
					cache_set_active(cache);
					number = cache_get_field_content_int(idx, "contactnumber");
					cache_get_field_content(idx, "contactname", name);

					format(result, sizeof(result), "%s%s - %d\n", result, name, number);

					end ++;
					idx ++;
				}

				cache_delete(cache);

				if(idx < count)
					strins(result, BLUETEXT"Next\n", strlen(result));

				if(GetPVarInt(playerid, "ContactPage") > 0)
					strins(result, BLUETEXT"Back\n", strlen(result));

				return ShowPlayerDialog(playerid, PHONE_VIEWCONTACTS, DIALOG_STYLE_LIST, "List Contacts", result, "Select", "Back");
			}
			else
			{
				SetPVarInt(playerid, "ContactNumber", cache_get_field_content_int(idx, "contactnumber"));

				if(strval(GetPhoneInfo(Player[playerid][PhoneN], "trackapp")) >= 1)
					ShowPlayerDialog(playerid, PHONE_CONTACT, DIALOG_STYLE_LIST, "What would you like to do?", "SMS\nCall\nEdit Contact Name\nEdit Contact Number\nDelete from contacts\nuTrack\n", "Select", "Cancel");
				else
					ShowPlayerDialog(playerid, PHONE_CONTACT, DIALOG_STYLE_LIST, "What would you like to do?", "SMS\nCall\nEdit Contact Name\nEdit Contact Number\nDelete from contacts\n", "Select", "Cancel");
			}
		}
		case PHONE_CONTACT:
		{
			if(!response)
			{
				new string[128];
				mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT * FROM phonecontacts WHERE number = '%d'", Player[playerid][PhoneN]);
				new Cache:cache = mysql_query(MYSQL_MAIN, string), count = cache_get_row_count(), idx = GetPVarInt(playerid, "ContactPage") * 15;

				if(count == 0)
				{
					format(string, sizeof(string), "No contacts!");
					return ShowPlayerDialog(playerid, PHONE_VIEWCONTACTS, DIALOG_STYLE_MSGBOX, "List Contacts", string, "Select", "Back");
				}

				new end, name[32], number, result[45 * 15];
				while(idx < count && end < 15)
				{
					cache_set_active(cache);
					number = cache_get_field_content_int(idx, "contactnumber");
					cache_get_field_content(idx, "contactname", name);

					format(result, sizeof(result), "%s%s - %d\n", result, name, number);

					end ++;
					idx ++;
				}

				cache_delete(cache);

				if(idx < count)
					strins(result, BLUETEXT"Next\n", strlen(result));

				if(GetPVarInt(playerid, "ContactPage") > 0)
					strins(result, BLUETEXT"Back\n", strlen(result));

				return ShowPlayerDialog(playerid, PHONE_VIEWCONTACTS, DIALOG_STYLE_LIST, "List Contacts", result, "Select", "Back");
			}

			new number = GetPVarInt(playerid, "ContactNumber"), string[128];

			switch(listitem)
			{
				case 0: // sms
				{
					format(string, sizeof(string), "Enter the message you want to send to %s.", GetContactName(Player[playerid][PhoneN], number));
					ShowPlayerDialog(playerid, PHONE_SMS, DIALOG_STYLE_INPUT, "Enter your message to send", string, "Send", "Cancel");
				}
				case 1: // call
				{
					new param[32];
					format(param, sizeof(param), "%d", number);
					cmd_call(playerid, param);
				}
				case 2: //edit contact name
				{
					SetPVarInt(playerid, "EditContact", 1);
					format(string, sizeof(string), "Enter a new name for this contact\n\nContact: %s\nNumber: %d\n", GetContactName(Player[playerid][PhoneN], number), number);
					ShowPlayerDialog(playerid, PHONE_EDITCONTACT, DIALOG_STYLE_INPUT, "Edit Contact", string, "Done", "Cancel");
				}
				case 3: //edit contact number
				{
					SetPVarInt(playerid, "EditContact", 2);
					format(string, sizeof(string), "Enter a new number for this contact\n\nContact: %s\nNumber: %d\n", GetContactName(Player[playerid][PhoneN], number), number);
					ShowPlayerDialog(playerid, PHONE_EDITCONTACT, DIALOG_STYLE_INPUT, "Edit Contact", string, "Done", "Cancel");
				}
				case 4: //delete contact
				{
					format(string, sizeof(string), "You have deleted contact %s.", GetContactName(Player[playerid][PhoneN], number));
					SendClientMessage(playerid, WHITE, string);

					mysql_format(MYSQL_MAIN, string, sizeof(string), "DELETE FROM phonecontacts WHERE number = '%d' AND contactnumber = '%d'", Player[playerid][PhoneN], number);
					mysql_query(MYSQL_MAIN, string, false);

					mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT * FROM phonecontacts WHERE number = '%d'", Player[playerid][PhoneN]);
					new Cache:cache = mysql_query(MYSQL_MAIN, string), count = cache_get_row_count(), idx;

					if(count == 0)
					{
						format(string, sizeof(string), "No contacts!");
						return ShowPlayerDialog(playerid, PHONE_VIEWCONTACTS, DIALOG_STYLE_MSGBOX, "List Contacts", string, "Select", "Back");
					}

					new end, name[32], result[45 * 15];
					while(idx < count && end < 15)
					{
						cache_set_active(cache);
						number = cache_get_field_content_int(idx, "contactnumber");
						cache_get_field_content(idx, "contactname", name);

						format(result, sizeof(result), "%s%s - %d\n", result, name, number);

						end ++;
						idx ++;
					}

					cache_delete(cache);

					if(idx < count)
						strins(result, BLUETEXT"Next\n", strlen(result));

					if(GetPVarInt(playerid, "ContactPage") > 0)
						strins(result, BLUETEXT"Back\n", strlen(result));

					return ShowPlayerDialog(playerid, PHONE_VIEWCONTACTS, DIALOG_STYLE_LIST, "List Contacts", result, "Select", "Back");
				}
				case 5: // utrack
				{
					if(number < 1 || !IsExistingPhoneNumber(number) || strval(GetPhoneInfo(number, "status")) == 0)
						return SendClientMessage(playerid, -1, "uTrack cannot locate that number.");

					if(Player[playerid][BankMoney] < 150 && Groups[Player[playerid][Group]][CommandTypes] != 1 && Groups[Player[playerid][Group]][CommandTypes] != 2)
						return SendClientMessage(playerid, -1, "You do not have the required funds in your bank account.");

					new id = GetPlayerIDEx(GetPhoneInfo(number, "owner"));

					if(!IsPlayerConnectedEx(id) || Player[id][AdminDuty] > 0 || Player[id][PrisonDuration] > 0 || Player[id][PrisonID] > 0 || Spectator[id][SpecSpectatingPlayer] != -1 || Spectator[id][SpecSpectatingVehicle] != -1)
						return SendClientMessage(playerid, -1, "uTrack cannot locate that number.");

					if(Player[playerid][TrackCooldown] > gettime())
					{
						format(string, sizeof(string), "You must wait %d seconds before you can track another number.", Player[playerid][TrackCooldown] - gettime());
						return SendClientMessage(playerid, WHITE, string);
					}

					if(Player[playerid][Checkpoint] > 0)
						return SendClientMessage(playerid, WHITE, "You already have an existing checkpoint. Reach it first.");

					new world = GetPlayerVirtualWorld(id);

					if(world > 0)
					{
						if(world == VipLoungeVW)
							SetPlayerCheckpoint(playerid, VipLounge[0], VipLounge[1], VipLounge[2], 6.0);
						else if(Player[id][InBusiness] != 0)
							SetPlayerCheckpoint(playerid, Businesses[Player[id][InBusiness]][bExteriorX], Businesses[Player[id][InBusiness]][bExteriorY], Businesses[Player[id][InBusiness]][bExteriorZ], 6.0);
						else if(Player[id][InHouse] != 0)
							SetPlayerCheckpoint(playerid, Houses[Player[id][InHouse]][hExteriorX], Houses[Player[id][InHouse]][hExteriorY], Houses[Player[id][InHouse]][hExteriorZ], 6.0);
						else if(Player[id][InGroupHQ] != 0)
							SetPlayerCheckpoint(playerid, Groups[Player[id][InGroupHQ]][HQExteriorX], Groups[Player[id][InGroupHQ]][HQExteriorY], Groups[Player[id][InGroupHQ]][HQExteriorZ], 6.0);
						else
							return SendClientMessage(playerid, -1, "Unable to locate the targets current building.");
						SendClientMessage(playerid, WHITE, "A checkpoint has been set, the phone was traced inside the marked building.");
					}
					else
					{
						new Float:pPos[3];
						GetPlayerPos(id, pPos[0], pPos[1], pPos[2]);
						SetPlayerCheckpoint(playerid, pPos[0], pPos[1], pPos[2], 6.0);
						SendClientMessage(playerid, WHITE, "A checkpoint has been set, the phone was traced in at the marked area.");
					}

					if(Groups[Player[playerid][Group]][CommandTypes] != 2)
						Player[playerid][BankMoney] -= 150;

					format(string, sizeof(string), "[Track] %s has tracked %s. (%d)", GetName(playerid), GetName(id), number);
					CommandsLog(string);
					Player[playerid][TrackCooldown] = gettime() + 60;
					Player[playerid][Checkpoint] = 1;
					Player[playerid][Detecting] = 1;
				}
			}
		}
		case PHONE_EDITCONTACT:
		{
			if(!response)
				return 1;

			if(isnull(inputtext))
				return ShowDialog(playerid, PHONE_CONTACT);

			new number = GetPVarInt(playerid, "ContactNumber");

			switch(GetPVarInt(playerid, "EditContact"))
			{
				case 1: // name
				{
					if(strlen(inputtext) < 1 || strlen(inputtext) > 31)
					{
						SendClientMessage(playerid, -1, "Their name must be between 1 and 31 characters in length.");
						new string[128];
						format(string, sizeof(string), "Enter a new name for this contact\n\nContact: %s\nNumber: %d\n", GetContactName(Player[playerid][PhoneN], number), number);
						return ShowPlayerDialog(playerid, PHONE_EDITCONTACT, DIALOG_STYLE_INPUT, "Edit Contact", string, "Done", "Cancel");
					}

					for(new i; i < strlen(inputtext); i++)
					{
						if(inputtext[i] == '{')
						{
							SendClientMessage(playerid, -1, "You can't use that name, bro.");
							new string[128];
							format(string, sizeof(string), "Enter a new name for this contact\n\nContact: %s\nNumber: %d\n", GetContactName(Player[playerid][PhoneN], number), number);
							return ShowPlayerDialog(playerid, PHONE_EDITCONTACT, DIALOG_STYLE_INPUT, "Edit Contact", string, "Done", "Cancel");
						}
					}

					new string[128];
					mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT * FROM phonecontacts WHERE number = '%d' AND contactname = '%e'", Player[playerid][PhoneN], inputtext);
					new Cache:cache = mysql_query(MYSQL_MAIN, string), count = cache_get_row_count();
					cache_delete(cache);

					if(count > 0)
					{
						SendClientMessage(playerid, -1, "You already have a contact with that name. Choose another one!");
						format(string, sizeof(string), "Enter a new name for this contact\n\nContact: %s\nNumber: %d\n", GetContactName(Player[playerid][PhoneN], number), number);
						return ShowPlayerDialog(playerid, PHONE_EDITCONTACT, DIALOG_STYLE_INPUT, "Edit Contact", string, "Done", "Cancel");
					}

					mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT * FROM phonecontacts WHERE number = '%d' AND contactnumber = '%d'", Player[playerid][PhoneN], number);
					cache = mysql_query(MYSQL_MAIN, string);

					new prevname[32];
					cache_get_field_content(0, "contactname", prevname);

					format(string, sizeof(string), "You renamed contact \"%s\" to \"%s\".", prevname, inputtext);
					SendClientMessage(playerid, WHITE, string);

					cache_delete(cache);

					mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE phonecontacts SET contactname = '%s' WHERE number = '%d' AND contactnumber = '%d'", inputtext, Player[playerid][PhoneN], number);
					mysql_query(MYSQL_MAIN, string, false);
				}
				case 2: // number
				{
					if(strlen(inputtext) < 1 || strlen(inputtext) > 15 || !IsNumeric(inputtext))
					{
						SendClientMessage(playerid, -1, "The number must be numeric to be considered valid or is too long (16+ characters).");
						new string[128];
						format(string, sizeof(string), "Enter a new number for this contact\n\nContact: %s\nNumber: %d\n", GetContactName(Player[playerid][PhoneN], number), number);
						return ShowPlayerDialog(playerid, PHONE_EDITCONTACT, DIALOG_STYLE_INPUT, "Edit Contact", string, "Done", "Cancel");
					}

					new string[128];
					mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT * FROM phonecontacts WHERE number = '%d' AND contactnumber = '%d'", Player[playerid][PhoneN], strval(inputtext));
					new Cache:cache = mysql_query(MYSQL_MAIN, string), count = cache_get_row_count();
					cache_delete(cache);

					if(count > 0)
					{
						SendClientMessage(playerid, -1, "You already have a contact with that number. Choose another one!");
						format(string, sizeof(string), "Enter a new number for this contact\n\nContact: %s\nNumber: %d\n", GetContactName(Player[playerid][PhoneN], number), number);
						return ShowPlayerDialog(playerid, PHONE_EDITCONTACT, DIALOG_STYLE_INPUT, "Edit Contact", string, "Done", "Cancel");
					}

					mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT * FROM phonecontacts WHERE number = '%d' AND contactnumber = '%d'", Player[playerid][PhoneN], number);
					cache = mysql_query(MYSQL_MAIN, string);

					new prevnum[32], contact[32];
					cache_get_field_content(0, "contactname", contact);
					cache_get_field_content(0, "contactnumber", prevnum);

					format(string, sizeof(string), "You changed %s's number from %d to %d.", contact, strval(prevnum), strval(inputtext));
					SendClientMessage(playerid, WHITE, string);

					cache_delete(cache);

					mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE phonecontacts SET contactnumber = '%d' WHERE number = '%d' AND contactnumber = '%d'", strval(inputtext), Player[playerid][PhoneN], number);
					mysql_query(MYSQL_MAIN, string, false);
				}
			}
		}
		case PHONE_SMS:
		{
			if(!response)
				return 1;

			if(isnull(inputtext))
			{
				new string[128];
				format(string, sizeof(string), "Enter the message you want to send to %s.", GetContactName(Player[playerid][PhoneN], GetPVarInt(playerid, "ContactNumber")));
				return ShowPlayerDialog(playerid, PHONE_SMS, DIALOG_STYLE_INPUT, "Enter your message to send", string, "Send", "Cancel");
			}

			for(new i, j = strlen(inputtext); i != j; i++)
			{
				if(inputtext[i] == '{' || inputtext[i] == '}')
					inputtext[i] = ' ';
			}

			new string[128];
			format(string, sizeof(string), "%d %s", GetPVarInt(playerid, "ContactNumber"), inputtext);
			cmd_sms(playerid, string);
		}
		case PHONE_ADDNAME:
		{
			if(!response)
			{
				ShowPlayerDialog(playerid, PHONE_CONTACTS, DIALOG_STYLE_LIST, "Phone Menu - Contacts", "List Contacts\nCreate new contact\n", "Select", "Back");
			}
			else
			{
				if(strlen(inputtext) < 1 || strlen(inputtext) > 31)
				{
					SendClientMessage(playerid, -1, "Their name must be between 1 and 31 characters in length.");
					return ShowPlayerDialog(playerid, PHONE_ADDNAME, DIALOG_STYLE_INPUT, "Create a new contact", "Enter your new contacts name", "Done", "Back");
				}

				for(new i; i < strlen(inputtext); i++)
				{
					if(inputtext[i] == '{')
					{
						SendClientMessage(playerid, -1, "You can't use that name, bro.");
						return ShowPlayerDialog(playerid, PHONE_ADDNAME, DIALOG_STYLE_INPUT, "Create a new contact", "Enter your new contacts name", "Done", "Back");
					}
				}

				new string[128];
				mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT * FROM phonecontacts WHERE number = '%d' AND contactname = '%e'", Player[playerid][PhoneN], inputtext);
				new Cache:cache = mysql_query(MYSQL_MAIN, string), count = cache_get_row_count();
				cache_delete(cache);

				if(count > 0)
				{
					SendClientMessage(playerid, -1, "You already have a contact with that name. Choose another one!");
					return ShowPlayerDialog(playerid, PHONE_ADDNAME, DIALOG_STYLE_INPUT, "Create a new contact", "Enter your new contacts name", "Done", "Back");
				}
				else
				{
					SetPVarString(playerid, "NewContactName", inputtext);
					return ShowPlayerDialog(playerid, PHONE_ADDNUMBER, DIALOG_STYLE_INPUT, "Create a new contact", "Enter your new contacts number", "Done", "Back");
				}
			}
		}
		case PHONE_ADDNUMBER:
		{
			if(!response)
				return ShowPlayerDialog(playerid, PHONE_ADDNAME, DIALOG_STYLE_INPUT, "Create a new contact", "Enter your new contacts name", "Done", "Back");

			if(strlen(inputtext) < 1 || strlen(inputtext) > 15 || !IsNumeric(inputtext))
			{
				SendClientMessage(playerid, -1, "The number must be numeric to be considered valid or is too long (16+ characters).");
				return ShowPlayerDialog(playerid, PHONE_ADDNUMBER, DIALOG_STYLE_INPUT, "Create a new contact", "Enter your new contacts number", "Done", "Back");
			}

			new string[128];
			mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT * FROM phonecontacts WHERE number = '%d' AND contactnumber = '%d'", Player[playerid][PhoneN], strval(inputtext));
			new Cache:cache = mysql_query(MYSQL_MAIN, string), count = cache_get_row_count();
			cache_delete(cache);

			if(count > 0)
			{
				SendClientMessage(playerid, -1, "The number must be numeric to be considered valid or is too long (16+ characters).");
				return ShowPlayerDialog(playerid, PHONE_ADDNUMBER, DIALOG_STYLE_INPUT, "Create a new contact", "Enter your new contacts number", "Done", "Back");
			}

			GetPVarString(playerid, "NewContactName", string, 24);
			DeletePVar(playerid, "NewContactName");
			mysql_format(MYSQL_MAIN, string, sizeof(string), "INSERT INTO phonecontacts (number, contactname, contactnumber) values ('%d', '%s', '%d')", Player[playerid][PhoneN], string, strval(inputtext));
			mysql_query(MYSQL_MAIN, string, false);

			return ShowPlayerDialog(playerid, PHONE_CONTACTS, DIALOG_STYLE_LIST, "Phone Menu - Contacts", "List Contacts\nCreate new contact\n", "Select", "Back");
		}
		case PHONE_INBOX:
		{
			if(!response)
				return ShowPlayerDialog(playerid, PHONE_MAIN, DIALOG_STYLE_LIST, "Phone Menu", "Applications\nContacts\nInbox\nCall History\nEdit Phone\nRecent Advertisments", "Select", "Cancel");

			if(!strcmp(inputtext, "Next", true))
			{
				SetPVarInt(playerid, "SMSHistoryPage", GetPVarInt(playerid, "SMSHistoryPage") + 1);
				GetSMSHistory(playerid, Player[playerid][PhoneN], GetPVarInt(playerid, "SMSHistoryPage"));
				//ShowPlayerDialog(playerid, PHONE_INBOX, DIALOG_STYLE_LIST, "Phone Menu - Inbox", GetSMSHistory(Player[playerid][PhoneN], GetPVarInt(playerid, "SMSHistoryPage")), "Select", "Close");
			}
			else if(!strcmp(inputtext, "Back", true))
			{
				SetPVarInt(playerid, "SMSHistoryPage", GetPVarInt(playerid, "SMSHistoryPage") - 1);
				GetSMSHistory(playerid, Player[playerid][PhoneN], GetPVarInt(playerid, "SMSHistoryPage"));
				//ShowPlayerDialog(playerid, PHONE_INBOX, DIALOG_STYLE_LIST, "Phone Menu - Inbox", GetSMSHistory(Player[playerid][PhoneN], GetPVarInt(playerid, "SMSHistoryPage")), "Select", "Close");
			}
			else if(!strcmp(inputtext, "Clear History", true))
			{
				new string[128];
				mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE phonesmshistory SET deleted = '1' WHERE phone = '%d'", Player[playerid][PhoneN]);
				mysql_query(MYSQL_MAIN, string, false);
			}
			else
			{
				new row = (GetPVarInt(playerid, "SMSHistoryPage") * 8) + listitem;
				new string[255];
				mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT max(id) AS \"recent\" FROM phonesmshistory WHERE phone = '%d' AND deleted = '0' GROUP BY otherphone ORDER BY max(id) DESC", Player[playerid][PhoneN]);
				new Cache:cache = mysql_query(MYSQL_MAIN, string);

				if(cache_get_row_count() == 0)
				{
					cache_delete(cache);
					return ShowPlayerDialog(playerid, PHONE_MAIN, DIALOG_STYLE_LIST, "Phone Menu", "Applications\nContacts\nInbox\nCall History\nEdit Phone\nRecent Advertisments", "Select", "Cancel");
				}

				new id = cache_get_field_content_int(row, "recent");
				cache_delete(cache);

				mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT * FROM phonesmshistory WHERE id = '%d'", id);
				cache = mysql_query(MYSQL_MAIN, string);

				new number = cache_get_field_content_int(0, "otherphone");

				cache_delete(cache);

				SetPVarInt(playerid, "SMSHistoryPhone", number);

				mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE phonesmshistory SET seen = '1' WHERE phone = '%d' AND otherphone = '%d'", Player[playerid][PhoneN], number);
				mysql_query(MYSQL_MAIN, string, false);

				mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT * FROM phonesmshistory WHERE phone = '%d' AND otherphone = '%d' AND deleted = '0' ORDER BY id DESC", Player[playerid][PhoneN], number);
				cache = mysql_query(MYSQL_MAIN, string);
				new count = cache_get_row_count(), idx, result[1500], end;
				while(idx < count && end < 10)
				{
					cache_set_active(cache);
					new message[255];
					cache_get_field_content(idx, "message", message);

					new newline;
					if(strlen(message) > 100)
					{
						for(new i = 50; i < strlen(message); i++)
						{
							if(message[i] == ' ')
							{
								message[i] = '\n';
								newline = 1;
								break;
							}
						}

						if(newline == 0)
							message[60] = '\n';
					}

					if(cache_get_field_content_int(idx, "received") == 0)
						format(result, sizeof(result), "%s"GREENTEXT"%s\n\n", result, message);
					else
						format(result, sizeof(result), "%s{FFFFFF}%s\n\n", result, message);
					idx ++;
					end ++;
				}
				cache_delete(cache);

				new title[64];
				format(title, sizeof(title), "Conversation with %s", GetContactName(Player[playerid][PhoneN], number));

				DeletePVar(playerid, "SMSConvoNoHistory");
				DeletePVar(playerid, "SMSConvoGoNext");
				DeletePVar(playerid, "SMSConvoGoBack");
				DeletePVar(playerid, "SMSConvoPage");

				if(isnull(result))
				{
					format(result, sizeof(result), "{FFFFFF}No history with %s.", GetContactName(Player[playerid][PhoneN], number));
					SetPVarInt(playerid, "SMSConvoNoHistory", 1);
					return ShowPlayerDialog(playerid, PHONE_INBOX_VIEW, DIALOG_STYLE_MSGBOX, title, result, "Ok", "");
				}
				else
				{
					strins(result, "\n{FFFFFF}Type {3A82B5}Clear {FFFFFF}to clear history with this contact.", strlen(result));
					strins(result, "\n{FFFFFF}Type {3A82B5}Reply {FFFFFF}to message this contact.", strlen(result));
					strins(result, "\n{FFFFFF}Type {3A82B5}Call {FFFFFF}to call this contact.", strlen(result));
				}
				if(idx < count)
					strins(result, "\n{FFFFFF}Type {3A82B5}Next {FFFFFF}to go to the next page.", strlen(result)), SetPVarInt(playerid, "SMSConvoGoNext", 1);

				if(GetPVarInt(playerid, "SMSConvoPage") > 0)
					strins(result, "\n{FFFFFF}Type {3A82B5}Back {FFFFFF}to go to back a page.", strlen(result)), SetPVarInt(playerid, "SMSConvoGoBack", 1);

				ShowPlayerDialog(playerid, PHONE_INBOX_VIEW, DIALOG_STYLE_INPUT, title, result, "Enter", "Back");
			}
		}
		case PHONE_INBOX_VIEW:
		{
			if(!response || (response && GetPVarInt(playerid, "SMSConvoNoHistory") == 1))
			{
				DeletePVar(playerid, "SMSConvoNoHistory");
				DeletePVar(playerid, "SMSConvoGoNext");
				DeletePVar(playerid, "SMSConvoGoBack");
				DeletePVar(playerid, "SMSHistoryPhone");

				//return ShowPlayerDialog(playerid, PHONE_INBOX, DIALOG_STYLE_LIST, "Phone Menu - Inbox", GetSMSHistory(Player[playerid][PhoneN], GetPVarInt(playerid, "SMSHistoryPage")), "Select", "Close");
				return GetSMSHistory(playerid, Player[playerid][PhoneN], GetPVarInt(playerid, "SMSHistoryPage"));
			}

			if(!strcmp(inputtext, "Reply", true))
			{
				new string[128];
				SetPVarInt(playerid, "ContactNumber", GetPVarInt(playerid, "SMSHistoryPhone"));
				format(string, sizeof(string), "Enter the message you want to send to %s.", GetContactName(Player[playerid][PhoneN], GetPVarInt(playerid, "ContactNumber")));
				ShowPlayerDialog(playerid, PHONE_SMS, DIALOG_STYLE_INPUT, "Enter your message to send", string, "Send", "Cancel");

				DeletePVar(playerid, "SMSConvoNoHistory");
				DeletePVar(playerid, "SMSConvoGoNext");
				DeletePVar(playerid, "SMSConvoGoBack");
				DeletePVar(playerid, "SMSHistoryPhone");
				return 1;
			}
			else if(!strcmp(inputtext, "Clear", true))
			{
				new string[128];
				mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE phonesmshistory SET deleted = '1' WHERE phone = '%d' && otherphone = '%d'", Player[playerid][PhoneN], GetPVarInt(playerid, "SMSHistoryPhone"));
				mysql_query(MYSQL_MAIN, string, false);
				//ShowPlayerDialog(playerid, PHONE_INBOX, DIALOG_STYLE_LIST, "Phone Menu - Inbox", GetSMSHistory(Player[playerid][PhoneN], GetPVarInt(playerid, "SMSHistoryPage")), "Select", "Close");

				DeletePVar(playerid, "SMSConvoNoHistory");
				DeletePVar(playerid, "SMSConvoGoNext");
				DeletePVar(playerid, "SMSConvoGoBack");
				DeletePVar(playerid, "SMSHistoryPhone");

				return GetSMSHistory(playerid, Player[playerid][PhoneN], GetPVarInt(playerid, "SMSHistoryPage"));
			}
			else if(!strcmp(inputtext, "Call", true))
			{
				new string[128];
				format(string, sizeof(string), "%d", GetPVarInt(playerid, "SMSHistoryPhone"));
				cmd_call(playerid, string);

				DeletePVar(playerid, "SMSConvoNoHistory");
				DeletePVar(playerid, "SMSConvoGoNext");
				DeletePVar(playerid, "SMSConvoGoBack");
				DeletePVar(playerid, "SMSHistoryPhone");
				return 1;
			}
			else if(!strcmp(inputtext, "Next", true) && GetPVarInt(playerid, "SMSConvoGoNext") > 0)
			{
				SetPVarInt(playerid, "SMSConvoPage", GetPVarInt(playerid, "SMSConvoPage") + 1);

				new string[128];
				mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT * FROM phonesmshistory WHERE phone = '%d' AND otherphone = '%d' AND deleted = '0' ORDER BY id DESC", Player[playerid][PhoneN], GetPVarInt(playerid, "SMSHistoryPhone"));
				new Cache:cache = mysql_query(MYSQL_MAIN, string);
				new count = cache_get_row_count(), idx = (GetPVarInt(playerid, "SMSConvoPage") * 10), result[1500], end;
				while(idx < count && end < 10)
				{
					cache_set_active(cache);
					new message[255];
					cache_get_field_content(idx, "message", message);

					new newline;
					if(strlen(message) > 80)
					{
						for(new i = 58; i < strlen(message); i++)
						{
							if(message[i] == ' ')
							{
								message[i] = '\n';
								newline = 1;
								break;
							}
						}

						if(newline == 0)
							message[58] = '\n';
					}

					if(cache_get_field_content_int(idx, "received") == 0)
						format(result, sizeof(result), "%s"GREENTEXT"%s\n\n", result, message);
					else
						format(result, sizeof(result), "%s{FFFFFF}%s\n\n", result, message);
					idx ++;
					end ++;
				}
				cache_delete(cache);

				new title[64];
				format(title, sizeof(title), "Conversation with %s", GetContactName(Player[playerid][PhoneN], GetPVarInt(playerid, "SMSHistoryPhone")));

				if(isnull(result))
				{
					format(result, sizeof(result), "{FFFFFF}No history with %s.", GetContactName(Player[playerid][PhoneN], GetPVarInt(playerid, "SMSHistoryPhone")));
					SetPVarInt(playerid, "SMSConvoNoHistory", 1);
					DeletePVar(playerid, "SMSConvoGoNext");
					DeletePVar(playerid, "SMSConvoGoBack");
					return ShowPlayerDialog(playerid, PHONE_INBOX_VIEW, DIALOG_STYLE_MSGBOX, title, result, "Ok", "");
				}
				else
					strins(result, "\n{FFFFFF}Type {3A82B5}Clear {FFFFFF}to clear history with this contact.", strlen(result));

				DeletePVar(playerid, "SMSConvoGoNext");
				DeletePVar(playerid, "SMSConvoGoBack");
				if(idx < count)
					strins(result, "\n{FFFFFF}Type {3A82B5}Next {FFFFFF}to go to the next page.", strlen(result)), SetPVarInt(playerid, "SMSConvoGoNext", 1);

				if(GetPVarInt(playerid, "SMSConvoPage") > 0)
					strins(result, "\n{FFFFFF}Type {3A82B5}Back {FFFFFF}to go to back a page.", strlen(result)), SetPVarInt(playerid, "SMSConvoGoBack", 1);

				return ShowPlayerDialog(playerid, PHONE_INBOX_VIEW, DIALOG_STYLE_INPUT, title, result, "Enter", "Back");
			}
			else if(!strcmp(inputtext, "Back", true) && GetPVarInt(playerid, "SMSConvoGoBack") > 0)
			{
				SetPVarInt(playerid, "SMSConvoPage", GetPVarInt(playerid, "SMSConvoPage") - 1);

				new string[128];
				mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT * FROM phonesmshistory WHERE phone = '%d' AND otherphone = '%d' AND deleted = '0' ORDER BY id DESC", Player[playerid][PhoneN], GetPVarInt(playerid, "SMSHistoryPhone"));
				new Cache:cache = mysql_query(MYSQL_MAIN, string);
				new count = cache_get_row_count(), idx = (GetPVarInt(playerid, "SMSConvoPage") * 10), result[1500], end;
				while(idx < count && end < 10)
				{
					cache_set_active(cache);
					new message[255];
					cache_get_field_content(idx, "message", message);

					new newline;
					if(strlen(message) > 100)
					{
						for(new i = 50; i < strlen(message); i++)
						{
							if(message[i] == ' ')
							{
								message[i] = '\n';
								newline = 1;
								break;
							}
						}

						if(newline == 0)
							message[60] = '\n';
					}

					if(cache_get_field_content_int(idx, "received") == 0)
						format(result, sizeof(result), "%s"GREENTEXT"%s\n\n", result, message);
					else
						format(result, sizeof(result), "%s{FFFFFF}%s\n\n", result, message);
					idx ++;
					end ++;
				}
				cache_delete(cache);

				new title[64];
				format(title, sizeof(title), "Conversation with %s", GetContactName(Player[playerid][PhoneN], GetPVarInt(playerid, "SMSHistoryPhone")));

				if(isnull(result))
				{
					format(result, sizeof(result), "{FFFFFF}No history with %s.", GetContactName(Player[playerid][PhoneN], GetPVarInt(playerid, "SMSHistoryPhone")));
					SetPVarInt(playerid, "SMSConvoNoHistory", 1);
					DeletePVar(playerid, "SMSConvoGoNext");
					DeletePVar(playerid, "SMSConvoGoBack");
					return ShowPlayerDialog(playerid, PHONE_INBOX_VIEW, DIALOG_STYLE_MSGBOX, title, result, "Ok", "");
				}
				else
					strins(result, "\n{FFFFFF}Type {3A82B5}Clear {FFFFFF}to clear history with this contact.", strlen(result));

				DeletePVar(playerid, "SMSConvoGoNext");
				DeletePVar(playerid, "SMSConvoGoBack");
				if(idx < count)
					strins(result, "\n{FFFFFF}Type {3A82B5}Next {FFFFFF}to go to the next page.", strlen(result)), SetPVarInt(playerid, "SMSConvoGoNext", 1);

				if(GetPVarInt(playerid, "SMSConvoPage") > 0)
					strins(result, "\n{FFFFFF}Type {3A82B5}Back {FFFFFF}to go to back a page.", strlen(result)), SetPVarInt(playerid, "SMSConvoGoBack", 1);

				return ShowPlayerDialog(playerid, PHONE_INBOX_VIEW, DIALOG_STYLE_INPUT, title, result, "Enter", "Back");
			}

			DeletePVar(playerid, "SMSConvoNoHistory");
			DeletePVar(playerid, "SMSConvoGoNext");
			DeletePVar(playerid, "SMSConvoGoBack");
			DeletePVar(playerid, "SMSHistoryPhone");
			//return ShowPlayerDialog(playerid, PHONE_INBOX, DIALOG_STYLE_LIST, "Phone Menu - Inbox", GetSMSHistory(Player[playerid][PhoneN], GetPVarInt(playerid, "SMSHistoryPage")), "Select", "Close");
			return GetSMSHistory(playerid, Player[playerid][PhoneN], GetPVarInt(playerid, "SMSHistoryPage"));
		}
		case PHONE_HISTORY:
		{
			if(!response)
				return ShowPlayerDialog(playerid, PHONE_MAIN, DIALOG_STYLE_LIST, "Phone Menu", "Applications\nContacts\nInbox\nCall History\nEdit Phone\nRecent Advertisments", "Select", "Cancel");

			if(!strcmp(inputtext, "Next", true))
			{
				SetPVarInt(playerid, "CallHistoryPage", GetPVarInt(playerid, "CallHistoryPage") + 1);
				ShowPlayerDialog(playerid, PHONE_HISTORY, DIALOG_STYLE_LIST, "Phone Menu - Call History", GetCallHistory(Player[playerid][PhoneN], GetPVarInt(playerid, "CallHistoryPage")), "Select", "Close");
			}
			else if(!strcmp(inputtext, "Back", true))
			{
				SetPVarInt(playerid, "CallHistoryPage", GetPVarInt(playerid, "CallHistoryPage") - 1);
				ShowPlayerDialog(playerid, PHONE_HISTORY, DIALOG_STYLE_LIST, "Phone Menu - Call History", GetCallHistory(Player[playerid][PhoneN], GetPVarInt(playerid, "CallHistoryPage")), "Select", "Close");
			}
			else if(!strcmp(inputtext, "Clear History", true))
			{
				new string[128];
				mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE phonecallhistory SET deleted = '1' WHERE phone = '%d'", Player[playerid][PhoneN]);
				mysql_query(MYSQL_MAIN, string, false);
			}
			else
			{
				new row = (GetPVarInt(playerid, "CallHistoryPage") * 8) + listitem;
				new string[255];
				mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT * FROM phonecallhistory WHERE phone = '%d' AND deleted = '0' ORDER BY id DESC", Player[playerid][PhoneN]);
				new Cache:cache = mysql_query(MYSQL_MAIN, string);

				if(cache_get_row_count() == 0)
				{
					cache_delete(cache);
					return ShowPlayerDialog(playerid, PHONE_MAIN, DIALOG_STYLE_LIST, "Phone Menu", "Applications\nContacts\nInbox\nCall History\nEdit Phone\nRecent Advertisments", "Select", "Cancel");
				}

				new number = cache_get_field_content_int(row, "otherphone");
				new id = cache_get_field_content_int(row, "id");

				cache_delete(cache);

				SetPVarInt(playerid, "CallHistoryPhone", number);
				SetPVarInt(playerid, "CallHistoryPhoneID", id);

				ShowPlayerDialog(playerid, PHONE_HISTORY_VIEW, DIALOG_STYLE_LIST, "Call History", "Call\nMessage\nRemove call from history\n", "Enter", "Back");
			}
		}
		case PHONE_HISTORY_VIEW:
		{
			if(!response)
				return ShowPlayerDialog(playerid, PHONE_HISTORY, DIALOG_STYLE_LIST, "Phone Menu - Call History", GetCallHistory(Player[playerid][PhoneN], GetPVarInt(playerid, "CallHistoryPage")), "Select", "Back");

			new string[128];
			switch(listitem)
			{
				case 0:
				{
					format(string, sizeof(string), "%d", GetPVarInt(playerid, "CallHistoryPhone"));
					cmd_call(playerid, string);
				}
				case 1:
				{
					SetPVarInt(playerid, "ContactNumber", GetPVarInt(playerid, "CallHistoryPhone"));
					format(string, sizeof(string), "Enter the message you want to send to %s.", GetContactName(Player[playerid][PhoneN], GetPVarInt(playerid, "CallHistoryPhone")));
					ShowPlayerDialog(playerid, PHONE_SMS, DIALOG_STYLE_INPUT, "Enter your message to send", string, "Send", "Cancel");
				}
				case 2:
				{
					new id = GetPVarInt(playerid, "CallHistoryPhoneID");
					mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE phonecallhistory SET deleted = '1' WHERE id = '%d'", id);
					mysql_query(MYSQL_MAIN, string, false);
					ShowPlayerDialog(playerid, PHONE_HISTORY, DIALOG_STYLE_LIST, "Phone Menu - Call History", GetCallHistory(Player[playerid][PhoneN], 0), "Select", "Back");
					SetPVarInt(playerid, "CallHistoryPage", 0);
				}
			}
		}
		case PHONE_RINGTONE:
		{
			if(!response)
				return 1;

			new string[128];

			if(listitem != 0)
				format(string, sizeof(string), "You have changed your ringtone to ringtone %d.", listitem);
			else format(string, sizeof(string), "You have silenced your phone.");
			SendClientMessage(playerid, WHITE, string);

			mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE phones SET ringtone = '%d' WHERE number = '%d' AND owner = '%e'", listitem, Player[playerid][PhoneN], Player[playerid][NormalName]);
			mysql_query(MYSQL_MAIN, string, false);
		}
		/* ### END PHONE DIALOGS ### */
		case BUSINESS_LIST_DIALOG:
		{
			if(!response)
				return 1;
			
			if(!strcmp(inputtext, "Next Page", true))
			{
				return ShowPlayerDialog(playerid, BUSINESS_LIST_DIALOG, DIALOG_STYLE_LIST, "Business List", GetBusinessList(playerid, GetPVarInt(playerid, "LIST_BIZ_LAST_TYPE"), GetPVarInt(playerid, "LIST_BIZ_LAST_ID")), "Teleport", "Exit");
			}
			
			new bID, string[128];
			bID = strval(CutBeforeLine(inputtext));
			//printf("%i", bID);
			format(string, sizeof(string), "You have teleported to business ID: %i (%s).", bID, Businesses[bID][bName]);
			SendClientMessage(playerid, -1, string);
			SetPlayerPos_Update(playerid, Businesses[bID][bExteriorX], Businesses[bID][bExteriorY], Businesses[bID][bExteriorZ]);
		}

		case LSPD_RECORD_CHECK:
		{
			if(!response)
				return 1;

			new name[MAX_PLAYER_NAME];
			GetPVarString(playerid, "checkName", name, sizeof(name));

			switch(listitem)
			{
				case 0: {
					SetPVarInt(playerid, "watchaChecking", 1);
					ShowPlayerDialog(playerid, LSPD_RECORD_CHECK+1, DIALOG_STYLE_LIST, "Tickets on Record", GetPlayerTickets(name, 0, 0, playerid), "More Info", "Exit");
				}
				case 1: {
					SetPVarInt(playerid, "watchaChecking", 2);
					ShowPlayerDialog(playerid, LSPD_RECORD_CHECK+1, DIALOG_STYLE_LIST, "Active Tickets on Record", GetPlayerTickets(name, 0, 1, playerid), "More Info", "Exit");
				}
				case 2: {
					SetPVarInt(playerid, "watchaChecking", 3);
					ShowPlayerDialog(playerid, LSPD_RECORD_CHECK+1, DIALOG_STYLE_LIST, "Crimes on Record", GetPlayerCrimes(name, 0, 0, playerid), "More Info", "Exit");
				}
				case 3: {
					SetPVarInt(playerid, "watchaChecking", 4);
					ShowPlayerDialog(playerid, LSPD_RECORD_CHECK+1, DIALOG_STYLE_LIST, "Active Crimes on Record", GetPlayerCrimes(name, 0, 1, playerid), "More Info", "Exit");
				}
			}
		}
		case LSPD_RECORD_CHECK+1:
		{
			if(!response)
				return 1;

			new startposition = GetPVarInt(playerid, "startPosition");
			if(!strcmp(inputtext, "Next", true))
			{
				new name[MAX_PLAYER_NAME];
				GetPVarString(playerid, "checkName", name, sizeof(name));
				switch(GetPVarInt(playerid, "watchaChecking"))
				{
					case 1: ShowPlayerDialog(playerid, LSPD_RECORD_CHECK+1, DIALOG_STYLE_LIST, "Tickets on Record", GetPlayerTickets(name, startposition, 0, playerid), "More Info", "Exit");
					case 2: ShowPlayerDialog(playerid, LSPD_RECORD_CHECK+1, DIALOG_STYLE_LIST, "Active Tickets on Record", GetPlayerTickets(name, startposition, 1, playerid), "More Info", "Exit");
					case 3: ShowPlayerDialog(playerid, LSPD_RECORD_CHECK+1, DIALOG_STYLE_LIST, "Crimes on Record", GetPlayerCrimes(name, startposition, 0, playerid), "More Info", "Exit");
					case 4: ShowPlayerDialog(playerid, LSPD_RECORD_CHECK+1, DIALOG_STYLE_LIST, "Active Crimes on Record", GetPlayerCrimes(name, startposition, 1, playerid), "More Info", "Exit");
				}
			}
			else
			{
				new sql = strval(CutBeforeLine(inputtext)), query[128];

				switch(GetPVarInt(playerid, "watchaChecking"))
				{
					case 1..2:
					{
						new offense[128], offender[MAX_PLAYER_NAME + 1], officer[MAX_PLAYER_NAME + 1], amount, strikes, time[128], string[350];

						format(query, sizeof(query), "SELECT * FROM PoliceTickets WHERE SQLID = \'%d\'", sql);
						new Cache:cache = mysql_query(MYSQL_MAIN, query);
						new count = cache_get_row_count();

						if(count == 0 || count > 1)
							return 1;

						cache_get_field_content(0, "Offense", offense);
						cache_get_field_content(0, "offenderName", offender);
						cache_get_field_content(0, "officerName", officer);
						cache_get_field_content(0, "timeGiven", time);
						amount = cache_get_field_content_int(0, "ticketAmount");
						strikes = cache_get_field_content_int(0, "strikesIssued");
						cache_delete(cache);

						format(string, sizeof(string), "{FFFFFF}Details for Ticket #%d\n\nName:    {AFAFAF}%s{FFFFFF}\nOffense:     {AFAFAF}%s{FFFFFF}\nGiven by:    {AFAFAF}%s{FFFFFF}\nTime and Date Recorded:    {AFAFAF}%s{FFFFFF}\nTicket Amount:    {AFAFAF}%s{FFFFFF}\nStrikes Issued:    {AFAFAF}%d{FFFFFF}", sql, offender, offense, officer, time, PrettyMoney(amount), strikes);

						if(Player[playerid][GroupRank] < 7)
							ShowPlayerDialog(playerid, LSPD_RECORD_CHECK+2, DIALOG_STYLE_MSGBOX, "Ticket Information", string, "Okay", "");
						else
						{
							SetPVarInt(playerid, "deleteSQL", sql);
							ShowPlayerDialog(playerid, LSPD_RECORD_CHECK+2, DIALOG_STYLE_MSGBOX, "Ticket Information", string, "Delete", "Cancel");
						}
					}
					case 3..4:
					{
						new offense[128], offender[MAX_PLAYER_NAME + 1], officer[MAX_PLAYER_NAME + 1], time[128], string[350];

						format(query, sizeof(query), "SELECT * FROM PoliceCrimes WHERE SQLID = \'%d\'", sql);
						new Cache:cache = mysql_query(MYSQL_MAIN, query), count = cache_get_row_count();

						if(count == 0 || count > 1)
							return 1;

						cache_get_field_content(0, "Crime", offense);
						cache_get_field_content(0, "criminalName", offender);
						cache_get_field_content(0, "arrestingOfficer", officer);
						cache_get_field_content(0, "timeGiven", time);
						cache_delete(cache);

						format(string, sizeof(string), "{FFFFFF}Details for Crime #%d\n\nName:    {AFAFAF}%s{FFFFFF}\nOffense:    {AFAFAF}%s{FFFFFF}\nGiven by:    {AFAFAF}%s{FFFFFF}\nTime and Date Recorded:    {AFAFAF}%s{FFFFFF}", sql, offender, offense, officer, time);
						if(Player[playerid][GroupRank] < 7)
							ShowPlayerDialog(playerid, LSPD_RECORD_CHECK+2, DIALOG_STYLE_MSGBOX, "Crime Information", string, "Okay", "");
						else
						{
							SetPVarInt(playerid, "deleteSQL", sql);
							ShowPlayerDialog(playerid, LSPD_RECORD_CHECK+2, DIALOG_STYLE_MSGBOX, "Crime Information", string, "Delete", "Cancel");
						}
					}
				}
			}
		}
		case LSPD_RECORD_CHECK+2:
		{
			if(Player[playerid][GroupRank] < 7)
				return 1;

			if(response)
			{
				new sql = GetPVarInt(playerid, "deleteSQL"), query[128];

				if(sql == 0)
					return 1;

				switch(GetPVarInt(playerid, "watchaChecking"))
				{
					case 1..2:
					{
						format(query, sizeof(query), "DELETE FROM PoliceTickets WHERE SQLID = \'%d\'", sql);
						mysql_query(MYSQL_MAIN, query, false);

						format(query, sizeof(query), "You have successfully deleted ticket #%d.", sql);
						SendClientMessage(playerid, -1, query);
					}
					case 3..4:
					{
						format(query, sizeof(query), "DELETE FROM PoliceCrimes WHERE SQLID = \'%d\'", sql);
						mysql_query(MYSQL_MAIN, query, false);

						format(query, sizeof(query), "You have successfully deleted crime #%d.", sql);
						SendClientMessage(playerid, -1, query);
					}
				}
			}
		}
		case INPUT_AMOUNT:
		{
			if(!response)
				return 1;

			switch(GetPVarInt(playerid, "INPUT_AMOUNT_ID")) // Pot Seeds
			{
				case 1:
				{
					if(Businesses[Player[playerid][InBusiness]][bType] != 11)
						return SendClientMessage(playerid, -1, "You are not in a drug business.");

					if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice10])
						return SendClientMessage(playerid, -1, "Insufficient money available.");

					new amount = strval(inputtext);
					if(isnull(inputtext) || !IsNumeric(inputtext) || amount < 1 || amount > 50)
						return ShowDialog(playerid, INPUT_AMOUNT, "Invalid amount, it must be from 1 - 50.\n\nInput the amount of seeds you wish to buy.");

					if(amount + Player[playerid][PotSeeds] > 50)
						return ShowDialog(playerid, INPUT_AMOUNT, "You can not have over 50 seeds on you at any time.\n\nInput the amount of seeds you wish to buy.");

					if(amount * Businesses[Player[playerid][InBusiness]][bProductPrice10] > Player[playerid][Money])
						return ShowDialog(playerid, INPUT_AMOUNT, "You do not have enough money for that many seeds.\n\nInput the amount of seeds you wish to buy.");

					Player[playerid][PotSeeds] += amount;
					Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice10] * amount;
//					Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice10] * amount;
					AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, (Businesses[Player[playerid][InBusiness]][bProductPrice10] * amount));

					if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
						ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Pot Seeds Help", "{FFFFFF}You have purchased some Pot Seeds! You can use this to grow pot in your house. You require a Grow Light to grow pot in your house,\nwhich will take 1 hour to grow and 3 hours to die.\n\n{009900}Commands:{FFFFFF}\n/growpot\n/harvestpot", "Okay", "");
					else SendClientMessage(playerid, WHITE, "You have purchased some seeds.");
					new string[128];
					SavePlayerData(playerid);
					format(string, sizeof(string), "%s has purchased pot seeds from business %d for %d.", GetName(playerid), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bProductPrice10]);
					StatLog(string);
				}
				default: SendClientMessage(playerid, RED, "INPUT_AMOUNT: (ERROR#1) switch default - Screenshot and create a bug report!");
			}
		}
		case UNSAVED_VEHICLES:
		{
			if(!response)
				return 1;

			new vehicleid = strval(CutBeforeLine(inputtext)), Float:x, Float:y, Float:z;
			GetVehiclePos(vehicleid, x, y, z);
			SetPlayerPos_Update(playerid, x, y, z);
			PutPlayerInVehicle(playerid, vehicleid, 0);
		}
		case DIALOG_REFERAL:
		{
			if(!response)
				return ShowPlayerDialog(playerid, DIALOG_REFERAL, DIALOG_STYLE_LIST, "How did you find out about crea SA:MP Roleplay?", "Friends\nSA:MP Forums Advertisment\nYoutube\nGoogle\nOther", "Select", "");

			switch(listitem)
			{
				case 0: FriendReferals++;
				case 1: SAMPForumReferals++;
				case 2: YoutubeReferals++;
				case 3: GoogleReferals++;
				case 4: OtherReferals++;
			}

			SendClientMessage(playerid, -1, "Thank you for answering and helping to improve crea SA:MP Roleplay.");
			SendClientMessage(playerid, PINK, "----------------------------------------------------------------------------------------");
			SendClientMessage(playerid, YELLOW, "Have you checked out our forums yet? Go to https://crearoleplay.com");
			SendClientMessage(playerid, YELLOW, "Also, join our Discord! You can find the link on the forums.");
			SendClientMessage(playerid, PINK, "----------------------------------------------------------------------------------------");
		}

		case DIALOG_CHARACTER_KILL_1:
		{
			if(response)
			{
				return ShowPlayerDialog(playerid, DIALOG_CHARACTER_KILL_2, DIALOG_STYLE_INPUT, "{FF0000}Character Kill - Final Confirmation", "{FFFFFF}Please enter your password to finalize the Character Kill", "Enter", "Cancel");
			}
			else
				return 1;
		}

		case DIALOG_CHARACTER_KILL_2:
		{
			if(!response)
				return 1;

			new pass[512], buff[162];
			strcat(pass, inputtext, sizeof(pass));
			strcat(pass, Player[playerid][pSalt], sizeof(pass));
			WP_Hash(buff, sizeof(buff), pass);

			if(!strcmp(buff, Player[playerid][Password], true))
			{
				new IP[32];
				GetPlayerIp(playerid, IP, sizeof(IP));
				format(buff, sizeof(buff), "%s | %s | Banned for \"Character Kill\", | System", GetName(playerid), IP);
				BanLog(buff);
				Player[playerid][Banned] = 1;
				format(Player[playerid][BannedReason], 128, "Character Kill");
				format(Player[playerid][BannedBy], 128, "System");

				if(Player[playerid][House] > 0)
				{
					format(Houses[Player[playerid][House]][hOwner], 255, "Nobody");
					Houses[Player[playerid][House]][Keypad] = -1;
					DestroyDynamicPickup(Houses[Player[playerid][House]][HPickupID]);
					Houses[Player[playerid][House]][HPickupID] = CreateDynamicPickup(1273, 23, Houses[Player[playerid][House]][hExteriorX], Houses[Player[playerid][House]][hExteriorY], Houses[Player[playerid][House]][hExteriorZ], Houses[Player[playerid][House]][hExteriorVW], Houses[Player[playerid][House]][hExteriorID], -1, 150.0);
					RemovePlayerHouseKeys(Player[playerid][House]);
					Player[playerid][House] = 0;
					Houses[Player[playerid][House]][hFakeOwner] = 0;
					SaveHouse(Player[playerid][House]);
				}

				if(Player[playerid][House2] > 0)
				{
					format(Houses[Player[playerid][House2]][hOwner], 255, "Nobody");
					Houses[Player[playerid][House2]][Keypad] = -1;
					SaveHouse(Player[playerid][House2]);
					DestroyDynamicPickup(Houses[Player[playerid][House2]][HPickupID]);
					Houses[Player[playerid][House2]][HPickupID] = CreateDynamicPickup(1273, 23, Houses[Player[playerid][House2]][hExteriorX], Houses[Player[playerid][House2]][hExteriorY], Houses[Player[playerid][House2]][hExteriorZ], Houses[Player[playerid][House2]][hExteriorVW], Houses[Player[playerid][House2]][hExteriorID], -1, 150.0);
					RemovePlayerHouseKeys(Player[playerid][House2]);
					Player[playerid][House2] = 0;
					Houses[Player[playerid][House2]][hFakeOwner] = 0;
					SaveHouse(Player[playerid][House2]);
				}

				if(Player[playerid][Business] > 0)
				{
					format(Businesses[Player[playerid][Business]][bOwner], 255, "Nobody");
					Businesses[Player[playerid][Business]][bLockStatus] = 1;
					RemovePlayerBusinessKeys(Player[playerid][Business]);
					Player[playerid][Business] = 0;
					SaveBusiness(Player[playerid][Business]);
				}

				format(buff, sizeof(buff), "Ban: %s has been auto-banned. Defined reason: \"Character Kill\".", GetName(playerid));
				NearByMessage(playerid, LIGHTRED, buff);
				SendToAdmins(LIGHTRED, buff, 1);

				new string[128];
				SendClientMessage(playerid, BLACK, "------------------------------------------------------------------------------------------------");
				format(string, sizeof(string), "You have character killed your character \"%s\"!", GetNameEx(playerid));
				SendClientMessage(playerid, ORANGE, string);
				SendClientMessage(playerid, ORANGE, "This account is now banned and you cannot appeal it. Create a new character and continue playing!");
				SendClientMessage(playerid, BLACK, "------------------------------------------------------------------------------------------------");

				KickEx(playerid);
			}
			else
				return SendClientMessage(playerid, -1, "The password you have entered is incorrect, canceling character kill.");
		}
		case DIALOG_EDITVIP_MAIN:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: // Token Fee
					{
						SetPVarInt(playerid, "VIPRaffle_EditField", 1);
						return ShowPlayerDialog(playerid, DIALOG_EDITVIP_VALUE, DIALOG_STYLE_INPUT, "VIP Raffle Token Cost", "Set the raffles token entry fee.", "Set", "Back");
					}
					case 2: // Money
					{
						SetPVarInt(playerid, "VIPRaffle_EditField", 2);
						return ShowPlayerDialog(playerid, DIALOG_EDITVIP_VALUE, DIALOG_STYLE_INPUT, "VIP Raffle Money Prize", "Set the raffles Mney prize.", "Set", "Back");
					}
					case 3: // Materials 1
					{
						SetPVarInt(playerid, "VIPRaffle_EditField", 3);
						return ShowPlayerDialog(playerid, DIALOG_EDITVIP_VALUE, DIALOG_STYLE_INPUT, "VIP Raffle Material Prize", "Set the raffles Material prize.", "Set", "Back");
					}
					case 4: // Materials 2
					{
						SetPVarInt(playerid, "VIPRaffle_EditField", 4);
						return ShowPlayerDialog(playerid, DIALOG_EDITVIP_VALUE, DIALOG_STYLE_INPUT, "VIP Raffle Material Prize", "Set the raffles Material prize.", "Set", "Back");
					}
					case 5: // Materials 3
					{
						SetPVarInt(playerid, "VIPRaffle_EditField", 5);
						return ShowPlayerDialog(playerid, DIALOG_EDITVIP_VALUE, DIALOG_STYLE_INPUT, "VIP Raffle Material Prize", "Set the raffles Material prize.", "Set", "Back");
					}
					case 6: // Cocaine
					{
						SetPVarInt(playerid, "VIPRaffle_EditField", 6);
						return ShowPlayerDialog(playerid, DIALOG_EDITVIP_VALUE, DIALOG_STYLE_INPUT, "VIP Raffle Cocaine Prize", "Set the raffles Cocaine prize.", "Set", "Back");
					}
					case 7: // Pot
					{
						SetPVarInt(playerid, "VIPRaffle_EditField", 7);
						return ShowPlayerDialog(playerid, DIALOG_EDITVIP_VALUE, DIALOG_STYLE_INPUT, "VIP Raffle Pot Prize", "Set the raffles Pot prize.", "Set", "Back");
					}
					case 8: // Speed
					{
						SetPVarInt(playerid, "VIPRaffle_EditField", 8);
						return ShowPlayerDialog(playerid, DIALOG_EDITVIP_VALUE, DIALOG_STYLE_INPUT, "VIP Raffle Speed Prize", "Set the raffles Speed prize.", "Set", "Back");
					}
					case 9: // Tokens
					{
						SetPVarInt(playerid, "VIPRaffle_EditField", 9);
						return ShowPlayerDialog(playerid, DIALOG_EDITVIP_VALUE, DIALOG_STYLE_INPUT, "VIP Raffle Token Prize", "Set the raffles Token prize.", "Set", "Back");
					}
					case 11: // Active
					{
						new tmp = VipRaffleInfo[0][rActive];
						VipRaffleInfo[0][rActive] = !tmp;
						SaveVIPRaffle();
					}
					case 12: // Date
					{
						SetPVarInt(playerid, "VIPRaffle_EditField", 10);
						return ShowPlayerDialog(playerid, DIALOG_EDITVIP_VALUE, DIALOG_STYLE_INPUT, "VIP Raffle Draw Date", "Set the days until the raffle ends.", "Set", "Back");
					}
				}
				ShowPlayerDialog(playerid, DIALOG_EDITVIP_MAIN, DIALOG_STYLE_LIST, "VIP Raffle Setup", VipRaffleInformation(), "Edit", "Close");
			}
			else return 1;
		}
		case DIALOG_EDITVIP_VALUE:
		{
			new fieldId = GetPVarInt(playerid, "VIPRaffle_EditField"),
				value = strval(inputtext);
			if(value < 0)
				value = 0;
			switch(fieldId)
			{
				case 1:
				{
					VipRaffleInfo[0][rEntryFee] = value;
				}
				case 2:
				{
					VipRaffleInfo[0][rMoney] = value;
				}
				case 3:
				{
					VipRaffleInfo[0][rMaterials1] = value;
				}
				case 4:
				{
					VipRaffleInfo[0][rMaterials2] = value;
				}
				case 5:
				{
					VipRaffleInfo[0][rMaterials3] = value;
				}
				case 6:
				{
					VipRaffleInfo[0][rCocaine] = value;
				}
				case 7:
				{
					VipRaffleInfo[0][rPot] = value;
				}
				case 8:
				{
					VipRaffleInfo[0][rSpeed] = value;
				}
				case 9:
				{
					VipRaffleInfo[0][rTokens] = value;
				}
				case 10:
				{
					VipRaffleInfo[0][rDrawDate] = gettime() + (value * 86400);
				}
			}
			SaveVIPRaffle();
			ShowPlayerDialog(playerid, DIALOG_EDITVIP_MAIN, DIALOG_STYLE_LIST, "VIP Raffle Setup", VipRaffleInformation(), "Edit", "Close");
		}
		case DIALOG_VIPTICKET_BUY:
		{
			if(response)
			{
				new str[128],
					amount = strval(inputtext);

				if(Player[playerid][VipRank] == 1)
				{
					if(VipRaffleInfo[0][rEntryFee] > Player[playerid][VipTokens])
					{
						SendClientMessage(playerid, -1, "You don't have enough tokens to enter.");
					    return VIPLockerDialog(playerid);
					}
					format(str, sizeof(str), "You've purchased a VIP Raffle ticket for %d tokens.", VipRaffleInfo[0][rEntryFee]);
					SendClientMessage(playerid, -1, str);
					Player[playerid][VipTokens] -= VipRaffleInfo[0][rEntryFee];
					AddVIPRaffleEntry(playerid);
				}
				else
				{
					if(amount < 1)
					{
						SendClientMessage(playerid, -1, "Invalid amount of tickets.");
					    return VIPLockerDialog(playerid);
					}
					if(amount > (Player[playerid][VipRank] - GetVIPRaffleEntriesCount(playerid)))
					{
						SendClientMessage(playerid, -1, "You don't have that many entries available.");
						return VIPLockerDialog(playerid);
					}
					if(VipRaffleInfo[0][rEntryFee] * amount > Player[playerid][VipTokens])
					{
						SendClientMessage(playerid, -1, "You don't have enough tokens to enter.");
						return VIPLockerDialog(playerid);
					}
					format(str, sizeof(str), "You've purchased %d VIP Raffle ticket(s) for %d tokens.", amount, amount * VipRaffleInfo[0][rEntryFee]);
					SendClientMessage(playerid, -1, str);
					Player[playerid][VipTokens] -= amount * VipRaffleInfo[0][rEntryFee];
					for(new i; i < amount; i++)
						AddVIPRaffleEntry(playerid);
				}
			}
			else return 1;
		}
		case DIALOG_VIPCUSTOMNUM:
		{
			if(!response)
				return 1;

			if(Player[playerid][VipRank] < 1)
				return SendClientMessage(playerid, WHITE, "You're not VIP.");

			if(Player[playerid][VipTokens] < 150)
				return SendClientMessage(playerid, WHITE, "Custom numbers cost 150 VIP tokens. You do not have enough.");

			if(strlen(inputtext) < 5 || strlen(inputtext) > 9 || inputtext[0] == '0' || !IsNumeric(inputtext) || isnull(inputtext))
				return SendClientMessage(playerid, WHITE, "Invalid number!");

			if(strval(inputtext) < 9999 || strval(inputtext) > 999999999)
				return SendClientMessage(playerid, WHITE, "Invalid number!");

			if(IsExistingPhoneNumber(strval(inputtext)))
				return SendClientMessage(playerid, WHITE, "That number is already owned by somebody.");

			new string[128];
			format(string, sizeof(string), "[VIPLOCKER] %s a got a new custom number, %d, from the VIP locker. Previous number: %d", GetName(playerid), strval(inputtext), Player[playerid][PhoneN]);
			StatLog(string);

			mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE phones SET number = '%d' WHERE owner = '%e' AND number = '%d'", strval(inputtext), Player[playerid][NormalName], Player[playerid][PhoneN]);
			mysql_query(MYSQL_MAIN, string, false);

			Player[playerid][PhoneN] = strval(inputtext);
			Player[playerid][VipTokens] -= 150;


			format(string, sizeof(string), "You successfully received a new custom number, %d.", strval(inputtext));
			return SendClientMessage(playerid, WHITE, string);
		}
		case TRUNK_TAKE:
		{
			if(!response)
				return 1;

			new sql = GetNearestCarSQL(playerid), idx = GetVIndex(sql), engine, lights, alarm, doors, bonnet, boot, objective;

			if(sql == 0 || idx == -1)
				return 1;

			GetVehicleParamsEx(Veh[idx][Link], engine, lights, alarm, doors, bonnet, boot, objective);

			if(!IsPlayerInRangeOfCar(playerid, 5))
				return SendClientMessage(playerid, -1, "You're too far from any vehicle");

			if(GetPlayerVehicleID(playerid) != 0)
				return SendClientMessage(playerid, -1, "You cannot store a weapon while in a vehicle");

			if(!HasVehicleAccess(playerid, sql) && Player[playerid][CopDuty] != 1)
				return SendClientMessage(playerid, -1, "You don't have the keys to this vehicle");

			new selected[64];
			// strcpy(selected, inputtext, sizeof(selected));

			// if(sscanf(inputtext, "ds[64]", number, selected))
				// return SendClientMessage(playerid, -1, "That does not seem to be in the trunk anymore.");

			for(new i; i < strlen(inputtext); i++)
			{
				if(inputtext[i] == ' ')
				{
					strmid(selected, inputtext, i + 1, strlen(inputtext));
					break;
				}
			}

			new amount = GetStoredAmountOf(Veh[idx][TrunkContents], selected), valid;

			if(amount == 0 && strcmp(selected, "Gas Can", true))
				return SendClientMessage(playerid, -1, "That does not seem to be in the trunk anymore.");

			for(new i; i < sizeof(weapons); i++)
			{
				if(!strcmp(selected, weapons[i], true))
				{
					if(amount > 1)
					{
						if(PlayerHasWeaponInSlot(playerid, GetWeaponType(i)))
							return SendClientMessage(playerid, WHITE, "You already have a weapon in this slot.");

						new new_amount = amount - 1;
						new pos = strfind(Veh[idx][TrunkContents], selected, true);
						if(pos != -1)
						{
							for(new x = pos; x > 0; x--)
							{
								if(Veh[idx][TrunkContents][x] == '|')
								{
									pos = x + 1;
									break;
								}
							}

							if(Veh[idx][TrunkContents][pos - 1] != '|')
								pos = 0;

							for(new x = pos; x < strlen(Veh[idx][TrunkContents]); x++)
							{
								if(Veh[idx][TrunkContents][x] == '|')
								{
									strdel(Veh[idx][TrunkContents], pos, x + 1);
									break;
								}
							}

							format(Veh[idx][TrunkContents], 255, "%s%d %s|", Veh[idx][TrunkContents], new_amount, selected);
							GivePlayerWeaponEx(playerid, i);

							new string[128];
							format(string, sizeof(string), "* %s has taken a weapon from the vehicles trunk.", GetNameEx(playerid));
							NearByMessage(playerid, NICESKY, string);
							valid = 1;
						}
						else
						{
							new string[128];
							format(string, sizeof(string), "ERROR: Could not find \"%s\" in the vehicles trunk.", selected);
							return SendClientMessage(playerid, GREY, string);
						}
					}
					else
					{
						if(PlayerHasWeaponInSlot(playerid, GetWeaponType(i)))
							return SendClientMessage(playerid, WHITE, "You already have a weapon in this slot.");

						new pos = strfind(Veh[idx][TrunkContents], selected, true);
						if(pos != -1)
						{
							for(new x = pos; x > 0; x--)
							{
								if(Veh[idx][TrunkContents][x] == '|')
								{
									pos = x + 1;
									break;
								}
							}

							if(Veh[idx][TrunkContents][pos - 1] != '|')
								pos = 0;

							for(new x = pos; x < strlen(Veh[idx][TrunkContents]); x++)
							{
								if(Veh[idx][TrunkContents][x] == '|')
								{
									strdel(Veh[idx][TrunkContents], pos, x + 1);
									break;
								}
							}

							GivePlayerWeaponEx(playerid, i);

							new string[128];
							format(string, sizeof(string), "* %s has taken a weapon from the vehicles trunk.", GetNameEx(playerid));
							NearByMessage(playerid, NICESKY, string);
							valid = 1;
						}
						else
						{
							new string[128];
							format(string, sizeof(string), "ERROR: Could not find \"%s\" in the vehicles trunk. Somebody may have taken it before you.", selected);
							return SendClientMessage(playerid, GREY, string);
						}
					}
				}
			}

			#define take_option(%0) !strcmp(selected, %0, true)

			if(take_option("Gas Can") || take_option(" Gas Can"))
			{
				new pos = strfind(Veh[idx][TrunkContents], selected, true);
				if(pos == -1)
					return SendClientMessage(playerid, WHITE, "It appears that is no longer in the vehicles trunk.");

				if(Player[playerid][GasCans] > 0)
					return SendClientMessage(playerid, -1, "You already have a gas can.");

				for(new x = pos; x > 0; x--)
				{
					if(Veh[idx][TrunkContents][x] == '|')
					{
						pos = x + 1;
						break;
					}
				}

				if(Veh[idx][TrunkContents][pos - 1] != '|')
					pos = 0;

				new gascan[32];
				for(new x = pos; x < strlen(Veh[idx][TrunkContents]); x++)
				{
					if(Veh[idx][TrunkContents][x] == '|')
					{
						strmid(gascan, Veh[idx][TrunkContents], pos, x + 1);
						strdel(Veh[idx][TrunkContents], pos, x + 1);
						break;
					}
				}

				Player[playerid][GasCans] = 1;
				if(strfind(gascan, "Full", true) != -1)
					Player[playerid][GasFull] = 25;
				else if(strfind(gascan, "Empty", true) != -1)
					Player[playerid][GasFull] = 0;
				else
					Player[playerid][GasFull] = strval(gascan) / 4;

				new string[128];
				format(string, sizeof(string), "* %s has taken a gas can from the vehicles trunk.", GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, string);
			}
			else if(take_option("Street Grade Materials"))
			{
				new pos = strfind(Veh[idx][TrunkContents], selected, true);
				if(pos == -1)
					return SendClientMessage(playerid, WHITE, "It appears that is no longer in the vehicles trunk.");

				for(new x = pos; x > 0; x--)
				{
					if(Veh[idx][TrunkContents][x] == '|')
					{
						pos = x + 1;
						break;
					}
				}

				if(Veh[idx][TrunkContents][pos - 1] != '|')
					pos = 0;

				for(new x = pos; x < strlen(Veh[idx][TrunkContents]); x++)
				{
					if(Veh[idx][TrunkContents][x] == '|')
					{
						strdel(Veh[idx][TrunkContents], pos, x + 1);
						break;
					}
				}

				Player[playerid][Materials][0] += amount;

				new string[128];
				format(string, sizeof(string), "* %s has taken materials from the vehicles trunk.", GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, string);
			}
			else if(take_option("Standard Grade Materials"))
			{
				new pos = strfind(Veh[idx][TrunkContents], selected, true);
				if(pos == -1)
					return SendClientMessage(playerid, WHITE, "It appears that is no longer in the vehicles trunk.");

				for(new x = pos; x > 0; x--)
				{
					if(Veh[idx][TrunkContents][x] == '|')
					{
						pos = x + 1;
						break;
					}
				}

				if(Veh[idx][TrunkContents][pos - 1] != '|')
					pos = 0;

				for(new x = pos; x < strlen(Veh[idx][TrunkContents]); x++)
				{
					if(Veh[idx][TrunkContents][x] == '|')
					{
						strdel(Veh[idx][TrunkContents], pos, x + 1);
						break;
					}
				}

				Player[playerid][Materials][1] += amount;

				new string[128];
				format(string, sizeof(string), "* %s has taken materials from the vehicles trunk.", GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, string);
			}
			else if(take_option("Military Grade Materials"))
			{
				new pos = strfind(Veh[idx][TrunkContents], selected, true);
				if(pos == -1)
					return SendClientMessage(playerid, WHITE, "It appears that is no longer in the vehicles trunk.");

				for(new x = pos; x > 0; x--)
				{
					if(Veh[idx][TrunkContents][x] == '|')
					{
						pos = x + 1;
						break;
					}
				}

				if(Veh[idx][TrunkContents][pos - 1] != '|')
					pos = 0;

				for(new x = pos; x < strlen(Veh[idx][TrunkContents]); x++)
				{
					if(Veh[idx][TrunkContents][x] == '|')
					{
						strdel(Veh[idx][TrunkContents], pos, x + 1);
						break;
					}
				}

				Player[playerid][Materials][2] += amount;

				new string[128];
				format(string, sizeof(string), "* %s has taken materials from the vehicles trunk.", GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, string);
			}
			else if(take_option("Pot"))
			{
				new pos = strfind(Veh[idx][TrunkContents], selected, true);
				if(pos == -1)
					return SendClientMessage(playerid, WHITE, "It appears that is no longer in the vehicles trunk.");

				for(new x = pos; x > 0; x--)
				{
					if(Veh[idx][TrunkContents][x] == '|')
					{
						pos = x + 1;
						break;
					}
				}

				if(Veh[idx][TrunkContents][pos - 1] != '|')
					pos = 0;

				for(new x = pos; x < strlen(Veh[idx][TrunkContents]); x++)
				{
					if(Veh[idx][TrunkContents][x] == '|')
					{
						strdel(Veh[idx][TrunkContents], pos, x + 1);
						break;
					}
				}

				Player[playerid][Pot] += amount;

				new string[128];
				format(string, sizeof(string), "* %s has taken pot from the vehicles trunk.", GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, string);
			}
			else if(take_option("Cocaine"))
			{
				new pos = strfind(Veh[idx][TrunkContents], selected, true);
				if(pos == -1)
					return SendClientMessage(playerid, WHITE, "It appears that is no longer in the vehicles trunk.");

				for(new x = pos; x > 0; x--)
				{
					if(Veh[idx][TrunkContents][x] == '|')
					{
						pos = x + 1;
						break;
					}
				}

				if(Veh[idx][TrunkContents][pos - 1] != '|')
					pos = 0;

				for(new x = pos; x < strlen(Veh[idx][TrunkContents]); x++)
				{
					if(Veh[idx][TrunkContents][x] == '|')
					{
						strdel(Veh[idx][TrunkContents], pos, x + 1);
						break;
					}
				}

				Player[playerid][Cocaine] += amount;

				new string[128];
				format(string, sizeof(string), "* %s has taken cocaine from the vehicles trunk.", GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, string);
			}
			else if(take_option("Speed"))
			{
				new pos = strfind(Veh[idx][TrunkContents], selected, true);
				if(pos == -1)
					return SendClientMessage(playerid, WHITE, "It appears that is no longer in the vehicles trunk.");

				for(new x = pos; x > 0; x--)
				{
					if(Veh[idx][TrunkContents][x] == '|')
					{
						pos = x + 1;
						break;
					}
				}

				if(Veh[idx][TrunkContents][pos - 1] != '|')
					pos = 0;

				for(new x = pos; x < strlen(Veh[idx][TrunkContents]); x++)
				{
					if(Veh[idx][TrunkContents][x] == '|')
					{
						strdel(Veh[idx][TrunkContents], pos, x + 1);
						break;
					}
				}

				Player[playerid][Speed] += amount;

				new string[128];
				format(string, sizeof(string), "* %s has taken speed from the vehicles trunk.", GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, string);
			}
			else if(take_option("Money"))
			{
				new pos = strfind(Veh[idx][TrunkContents], selected, true);
				if(pos == -1)
					return SendClientMessage(playerid, WHITE, "It appears that is no longer in the vehicles trunk.");

				for(new x = pos; x > 0; x--)
				{
					if(Veh[idx][TrunkContents][x] == '|')
					{
						pos = x + 1;
						break;
					}
				}

				if(Veh[idx][TrunkContents][pos - 1] != '|')
					pos = 0;

				for(new x = pos; x < strlen(Veh[idx][TrunkContents]); x++)
				{
					if(Veh[idx][TrunkContents][x] == '|')
					{
						strdel(Veh[idx][TrunkContents], pos, x + 1);
						break;
					}
				}

				Player[playerid][Money] += amount;

				new string[128];
				format(string, sizeof(string), "* %s has taken money from the vehicles trunk.", GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, string);
			}
			else if(take_option("Poor Kevlar") || take_option(" Poor Kevlar"))
			{
				new pos = strfind(Veh[idx][TrunkContents], selected, true);
				if(pos == -1)
					return SendClientMessage(playerid, WHITE, "It appears that is no longer in the vehicles trunk.");

				if(Player[playerid][HasArmour] > 0)
					return SendClientMessage(playerid, -1, "You already have a kevlar vest.");

				if(amount > 1)
				{
					new new_amount = amount - 1;
					if(pos != -1)
					{
						for(new x = pos; x > 0; x--)
						{
							if(Veh[idx][TrunkContents][x] == '|')
							{
								pos = x + 1;
								break;
							}
						}
						
						if(Veh[idx][TrunkContents][pos - 1] != '|')
							pos = 0;

						for(new x = pos; x < strlen(Veh[idx][TrunkContents]); x++)
						{
							if(Veh[idx][TrunkContents][x] == '|')
							{
								strdel(Veh[idx][TrunkContents], pos, x + 1);
								break;
							}
						}

						format(Veh[idx][TrunkContents], 255, "%s%d %s|", Veh[idx][TrunkContents], new_amount, selected);
						
						Player[playerid][HasArmour] = 100;
						new string[128];
						format(string, sizeof(string), "* %s has taken a kevlar vest from the vehicles trunk.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
					}
					else
					{
						new string[128];
						format(string, sizeof(string), "ERROR: Could not find \"%s\" in the vehicles trunk.", selected);
						return SendClientMessage(playerid, GREY, string);
					}
				}
				else
				{
					for(new x = pos; x > 0; x--)
					{
						if(Veh[idx][TrunkContents][x] == '|')
						{
							pos = x + 1;
							break;
						}
					}

					if(Veh[idx][TrunkContents][pos - 1] != '|')
						pos = 0;

					for(new x = pos; x < strlen(Veh[idx][TrunkContents]); x++)
					{
						if(Veh[idx][TrunkContents][x] == '|')
						{
							strdel(Veh[idx][TrunkContents], pos, x + 1);
							break;
						}
					}

					Player[playerid][HasArmour] = 100;
					new string[128];
					format(string, sizeof(string), "* %s has taken a kevlar vest from the vehicles trunk.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
				}
			}
			else if(take_option("Standard Kevlar") || take_option(" Standard Kevlar"))
			{
				new pos = strfind(Veh[idx][TrunkContents], selected, true);
				if(pos == -1)
					return SendClientMessage(playerid, WHITE, "It appears that is no longer in the vehicles trunk.");

				if(Player[playerid][HasArmour] > 0)
					return SendClientMessage(playerid, -1, "You already have a kevlar vest.");

				if(amount > 1)
				{
					new new_amount = amount - 1;
					if(pos != -1)
					{
						for(new x = pos; x > 0; x--)
						{
							if(Veh[idx][TrunkContents][x] == '|')
							{
								pos = x + 1;
								break;
							}
						}
						
						if(Veh[idx][TrunkContents][pos - 1] != '|')
							pos = 0;

						for(new x = pos; x < strlen(Veh[idx][TrunkContents]); x++)
						{
							if(Veh[idx][TrunkContents][x] == '|')
							{
								strdel(Veh[idx][TrunkContents], pos, x + 1);
								break;
							}
						}

						format(Veh[idx][TrunkContents], 255, "%s%d %s|", Veh[idx][TrunkContents], new_amount, selected);
						
						Player[playerid][HasArmour] = 115;
						new string[128];
						format(string, sizeof(string), "* %s has taken a kevlar vest from the vehicles trunk.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
					}
					else
					{
						new string[128];
						format(string, sizeof(string), "ERROR: Could not find \"%s\" in the vehicles trunk.", selected);
						return SendClientMessage(playerid, GREY, string);
					}
				}
				else
				{
					for(new x = pos; x > 0; x--)
					{
						if(Veh[idx][TrunkContents][x] == '|')
						{
							pos = x + 1;
							break;
						}
					}

					if(Veh[idx][TrunkContents][pos - 1] != '|')
						pos = 0;

					for(new x = pos; x < strlen(Veh[idx][TrunkContents]); x++)
					{
						if(Veh[idx][TrunkContents][x] == '|')
						{
							strdel(Veh[idx][TrunkContents], pos, x + 1);
							break;
						}
					}

					Player[playerid][HasArmour] = 115;
					new string[128];
					format(string, sizeof(string), "* %s has taken a kevlar vest from the vehicles trunk.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
				}
			}
			else if(take_option("Military Kevlar") || take_option(" Military Kevlar"))
			{
				new pos = strfind(Veh[idx][TrunkContents], selected, true);
				if(pos == -1)
					return SendClientMessage(playerid, WHITE, "It appears that is no longer in the vehicles trunk.");

				if(Player[playerid][HasArmour] > 0)
					return SendClientMessage(playerid, -1, "You already have a kevlar vest.");

				if(amount > 1)
				{
					new new_amount = amount - 1;
					if(pos != -1)
					{
						for(new x = pos; x > 0; x--)
						{
							if(Veh[idx][TrunkContents][x] == '|')
							{
								pos = x + 1;
								break;
							}
						}
						
						if(Veh[idx][TrunkContents][pos - 1] != '|')
							pos = 0;

						for(new x = pos; x < strlen(Veh[idx][TrunkContents]); x++)
						{
							if(Veh[idx][TrunkContents][x] == '|')
							{
								strdel(Veh[idx][TrunkContents], pos, x + 1);
								break;
							}
						}

						format(Veh[idx][TrunkContents], 255, "%s%d %s|", Veh[idx][TrunkContents], new_amount, selected);
						
						Player[playerid][HasArmour] = 130;
						new string[128];
						format(string, sizeof(string), "* %s has taken a kevlar vest from the vehicles trunk.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
					}
					else
					{
						new string[128];
						format(string, sizeof(string), "ERROR: Could not find \"%s\" in the vehicles trunk.", selected);
						return SendClientMessage(playerid, GREY, string);
					}
				}
				else
				{
					for(new x = pos; x > 0; x--)
					{
						if(Veh[idx][TrunkContents][x] == '|')
						{
							pos = x + 1;
							break;
						}
					}

					if(Veh[idx][TrunkContents][pos - 1] != '|')
						pos = 0;

					for(new x = pos; x < strlen(Veh[idx][TrunkContents]); x++)
					{
						if(Veh[idx][TrunkContents][x] == '|')
						{
							strdel(Veh[idx][TrunkContents], pos, x + 1);
							break;
						}
					}

					Player[playerid][HasArmour] = 130;
					new string[128];
					format(string, sizeof(string), "* %s has taken a kevlar vest from the vehicles trunk.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
				}
			}
			else if(take_option("Bomb"))
			{
				new pos = strfind(Veh[idx][TrunkContents], selected, true);
				if(pos == -1)
					return SendClientMessage(playerid, WHITE, "It appears that is no longer in the vehicles trunk.");

				if(Player[playerid][Bomb] > 0)
					return SendClientMessage(playerid, -1, "You already have a bomb.");

				if(amount > 1)
				{
					new new_amount = amount - 1;
					if(pos != -1)
					{
						for(new x = pos; x > 0; x--)
						{
							if(Veh[idx][TrunkContents][x] == '|')
							{
								pos = x + 1;
								break;
							}
						}
						
						if(Veh[idx][TrunkContents][pos - 1] != '|')
							pos = 0;

						for(new x = pos; x < strlen(Veh[idx][TrunkContents]); x++)
						{
							if(Veh[idx][TrunkContents][x] == '|')
							{
								strdel(Veh[idx][TrunkContents], pos, x + 1);
								break;
							}
						}

						format(Veh[idx][TrunkContents], 255, "%s%d %s|", Veh[idx][TrunkContents], new_amount, selected);
						
						Player[playerid][Bomb] = 1;
						new string[128];
						format(string, sizeof(string), "* %s has taken a package from the vehicles trunk.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
					}
					else
					{
						new string[128];
						format(string, sizeof(string), "ERROR: Could not find \"%s\" in the vehicles trunk.", selected);
						return SendClientMessage(playerid, GREY, string);
					}
				}
				else
				{
					for(new x = pos; x > 0; x--)
					{
						if(Veh[idx][TrunkContents][x] == '|')
						{
							pos = x + 1;
							break;
						}
					}

					if(Veh[idx][TrunkContents][pos - 1] != '|')
						pos = 0;

					for(new x = pos; x < strlen(Veh[idx][TrunkContents]); x++)
					{
						if(Veh[idx][TrunkContents][x] == '|')
						{
							strdel(Veh[idx][TrunkContents], pos, x + 1);
							break;
						}
					}

					Player[playerid][Bomb] = 1;
					new string[128];
					format(string, sizeof(string), "* %s has taken a package from the vehicles trunk.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
				}
			}
			else if(take_option("Engine Parts") || take_option(" Engine Parts"))
			{
				new pos = strfind(Veh[idx][TrunkContents], selected, true);
				if(pos == -1)
					return SendClientMessage(playerid, WHITE, "It appears that is no longer in the vehicles trunk.");

				if(Player[playerid][EngineParts] > 5)
					return SendClientMessage(playerid, -1, "You already have 5 engine parts in your inventory.");
				
				if(Player[playerid][EngineParts] + 1 > 5)
					return SendClientMessage(playerid, -1, "You can't carry this many engine parts.");

				if(amount > 1)
				{
					new new_amount = amount - 1;
					if(pos != -1)
					{
						for(new x = pos; x > 0; x--)
						{
							if(Veh[idx][TrunkContents][x] == '|')
							{
								pos = x + 1;
								break;
							}
						}
						
						if(Veh[idx][TrunkContents][pos - 1] != '|')
							pos = 0;

						for(new x = pos; x < strlen(Veh[idx][TrunkContents]); x++)
						{
							if(Veh[idx][TrunkContents][x] == '|')
							{
								strdel(Veh[idx][TrunkContents], pos, x + 1);
								break;
							}
						}

						format(Veh[idx][TrunkContents], 255, "%s%d %s|", Veh[idx][TrunkContents], new_amount, selected);
						
						Player[playerid][EngineParts] += 1;
						new string[128];
						format(string, sizeof(string), "* %s has taken an engine part from the vehicles trunk.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
					}
					else
					{
						new string[128];
						format(string, sizeof(string), "ERROR: Could not find \"%s\" in the vehicles trunk.", selected);
						return SendClientMessage(playerid, GREY, string);
					}
				}
				else
				{
					for(new x = pos; x > 0; x--)
					{
						if(Veh[idx][TrunkContents][x] == '|')
						{
							pos = x + 1;
							break;
						}
					}

					if(Veh[idx][TrunkContents][pos - 1] != '|')
						pos = 0;

					for(new x = pos; x < strlen(Veh[idx][TrunkContents]); x++)
					{
						if(Veh[idx][TrunkContents][x] == '|')
						{
							strdel(Veh[idx][TrunkContents], pos, x + 1);
							break;
						}
					}

					Player[playerid][EngineParts] += 1;
					new string[128];
					format(string, sizeof(string), "* %s has taken an engine part from the vehicles trunk.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
				}
			}
			else if(take_option("Fishing Rod") || take_option(" Fishing Rod"))
			{
				new pos = strfind(Veh[idx][TrunkContents], selected, true);
				if(pos == -1)
					return SendClientMessage(playerid, WHITE, "It appears that is no longer in the vehicles trunk.");

				if(Player[playerid][FishingRod] > 0)
					return SendClientMessage(playerid, -1, "You already have a fishing rod in your inventory.");

				if(amount > 1)
				{
					new new_amount = amount - 1;
					if(pos != -1)
					{
						for(new x = pos; x > 0; x--)
						{
							if(Veh[idx][TrunkContents][x] == '|')
							{
								pos = x + 1;
								break;
							}
						}
						
						if(Veh[idx][TrunkContents][pos - 1] != '|')
							pos = 0;

						for(new x = pos; x < strlen(Veh[idx][TrunkContents]); x++)
						{
							if(Veh[idx][TrunkContents][x] == '|')
							{
								strdel(Veh[idx][TrunkContents], pos, x + 1);
								break;
							}
						}

						format(Veh[idx][TrunkContents], 255, "%s%d %s|", Veh[idx][TrunkContents], new_amount, selected);
						
						Player[playerid][FishingRod] = 1;
						new string[128];
						format(string, sizeof(string), "* %s has taken a fishing rod from the vehicles trunk.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
					}
					else
					{
						new string[128];
						format(string, sizeof(string), "ERROR: Could not find \"%s\" in the vehicles trunk.", selected);
						return SendClientMessage(playerid, GREY, string);
					}
				}
				else
				{
					for(new x = pos; x > 0; x--)
					{
						if(Veh[idx][TrunkContents][x] == '|')
						{
							pos = x + 1;
							break;
						}
					}

					if(Veh[idx][TrunkContents][pos - 1] != '|')
						pos = 0;

					for(new x = pos; x < strlen(Veh[idx][TrunkContents]); x++)
					{
						if(Veh[idx][TrunkContents][x] == '|')
						{
							strdel(Veh[idx][TrunkContents], pos, x + 1);
							break;
						}
					}

					Player[playerid][FishingRod] = 1;
					new string[128];
					format(string, sizeof(string), "* %s has taken a fishing rod from the vehicles trunk.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
				}
			}
			else if(!valid)
			{
				new string[128];
				format(string, sizeof(string), "\"%s\" is not a valid thing to have in your trunk, screenshot this message and create a bug report.", selected);
				return SendClientMessage(playerid, RED, string);
			}

			new string[128];
			format(string, sizeof(string), "[CAR] %s has taken %s (%d) from vehicle SQLID %d.", GetName(playerid), selected, amount, sql);
			StatLog(string);
			SaveVehicle(sql);
		}
		case PHONE_CHOOSE:
		{
			if(!response)
				return 1;

			new query[128];
			mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM phones WHERE owner = '%e'", Player[playerid][NormalName]);
			new Cache:cache = mysql_query(MYSQL_MAIN, query);

			Player[playerid][PhoneN] = cache_get_field_content_int(listitem, "number");
			cache_delete(cache);
			format(query, sizeof(query), "You have chosen %s.", inputtext);
			SendClientMessage(playerid, WHITE, query);
		}
		case HOUSE_TAKE:
		{
			if(!response)
				return 1;

			if(Player[playerid][InHouse] != Player[playerid][House] && Player[playerid][InHouse] != Player[playerid][House2] && Player[playerid][InHouse] != Player[playerid][HouseKey] && (Player[playerid][CopDuty] != 1 && Player[playerid][GroupRank] <= 6))
				return SendClientMessage(playerid, WHITE, "You aren't inside your house or don't have keys to this house!");

			new house = Player[playerid][InHouse], item_type, string[128], item_name[32];
			format(item_name, sizeof(item_name), "%s", ParseItemNameFromString(inputtext));
			item_type = GetItemTypeFromName(item_name);

			if(item_type != ITEM_TYPE_WEAPON && item_type != ITEM_TYPE_ARMOUR_POOR && item_type != ITEM_TYPE_ARMOUR_STANDARD && item_type != ITEM_TYPE_ARMOUR_MILITARY && item_type != ITEM_TYPE_BOMB && item_type != ITEM_TYPE_TENT)
			{
				SetPVarInt(playerid, "ITEM_TYPE", item_type);
				ShowPlayerDialog(playerid, HOUSE_TAKE+1, DIALOG_STYLE_INPUT, "House Storage", "How much would you like to take?", "Accept", "Cancel");
				return 1;
			}
			else if(item_type == ITEM_TYPE_ARMOUR_POOR)
			{
				if(Player[playerid][HasArmour] > 0)
					return SendClientMessage(playerid, -1, "You already have a kevlar vest in your inventory.");
				
				if(!IsItemInStorage(house, CONTAINER_TYPE_HOUSE, ITEM_TYPE_ARMOUR_POOR, 1))
					return SendClientMessage(playerid, WHITE, IntToFormattedStr(IsItemInStorage(house, CONTAINER_TYPE_HOUSE, ITEM_TYPE_ARMOUR_POOR, 1)));

				RemoveFromStorage(house, CONTAINER_TYPE_HOUSE, ITEM_TYPE_ARMOUR_POOR, 1);
				AddItemToPlayer(playerid, ITEM_TYPE_ARMOUR_POOR, 1);

				format(string, sizeof(string), "* %s has taken a kevlar vest from the house.", GetNameEx(playerid));
		      	NearByMessage(playerid, NICESKY, string);
				format(string, sizeof(string), "[HOUSE] %s has taken a kevlar vest from house id %d.", GetName(playerid));
				StatLog(string);
				SavePlayerData(playerid);
			}
			else if(item_type == ITEM_TYPE_ARMOUR_STANDARD)
			{
				if(Player[playerid][HasArmour] > 0)
					return SendClientMessage(playerid, -1, "You already have a kevlar vest in your inventory.");
				
				if(!IsItemInStorage(house, CONTAINER_TYPE_HOUSE, ITEM_TYPE_ARMOUR_STANDARD, 1))
					return SendClientMessage(playerid, WHITE, IntToFormattedStr(IsItemInStorage(house, CONTAINER_TYPE_HOUSE, ITEM_TYPE_ARMOUR_STANDARD, 1)));

				RemoveFromStorage(house, CONTAINER_TYPE_HOUSE, ITEM_TYPE_ARMOUR_STANDARD, 1);
				AddItemToPlayer(playerid, ITEM_TYPE_ARMOUR_STANDARD, 1);

				format(string, sizeof(string), "* %s has taken a kevlar vest from the house.", GetNameEx(playerid));
		      	NearByMessage(playerid, NICESKY, string);
				format(string, sizeof(string), "[HOUSE] %s has taken a kevlar vest from house id %d.", GetName(playerid));
				StatLog(string);
				SavePlayerData(playerid);
			}
			else if(item_type == ITEM_TYPE_ARMOUR_MILITARY)
			{
				if(Player[playerid][HasArmour] > 0)
					return SendClientMessage(playerid, -1, "You already have a kevlar vest in your inventory.");
				
				if(!IsItemInStorage(house, CONTAINER_TYPE_HOUSE, ITEM_TYPE_ARMOUR_MILITARY, 1))
					return SendClientMessage(playerid, WHITE, IntToFormattedStr(IsItemInStorage(house, CONTAINER_TYPE_HOUSE, ITEM_TYPE_ARMOUR_MILITARY, 1)));

				RemoveFromStorage(house, CONTAINER_TYPE_HOUSE, ITEM_TYPE_ARMOUR_MILITARY, 1);
				AddItemToPlayer(playerid, ITEM_TYPE_ARMOUR_MILITARY, 1);

				format(string, sizeof(string), "* %s has taken a kevlar vest from the house.", GetNameEx(playerid));
		      	NearByMessage(playerid, NICESKY, string);
				format(string, sizeof(string), "[HOUSE] %s has taken a kevlar vest from house id %d.", GetName(playerid));
				StatLog(string);
				SavePlayerData(playerid);
			}
			else if(item_type == ITEM_TYPE_BOMB)
			{
				if(Player[playerid][Bomb] > 0)
					return SendClientMessage(playerid, -1, "You already have a bomb in your inventory.");
				
				if(!IsItemInStorage(house, CONTAINER_TYPE_HOUSE, ITEM_TYPE_BOMB, 1))
					return SendClientMessage(playerid, WHITE, IntToFormattedStr(IsItemInStorage(house, CONTAINER_TYPE_HOUSE, ITEM_TYPE_BOMB, 1)));
				
				RemoveFromStorage(house, CONTAINER_TYPE_HOUSE, ITEM_TYPE_BOMB, 1);
				AddItemToPlayer(playerid, ITEM_TYPE_BOMB, 1);
				
				format(string, sizeof(string), "* %s has taken a bomb from the house.", GetNameEx(playerid));
		      	NearByMessage(playerid, NICESKY, string);
				format(string, sizeof(string), "[HOUSE] %s has taken a bomb from house id %d.", GetName(playerid));
				StatLog(string);
				SavePlayerData(playerid);
			}
			else if(item_type == ITEM_TYPE_TENT)
			{
				if(Player[playerid][Tent] > 0)
					return SendClientMessage(playerid, -1, "You already have a tent in your inventory.");
				
				if(!IsItemInStorage(house, CONTAINER_TYPE_HOUSE, ITEM_TYPE_TENT, 1))
					return SendClientMessage(playerid, WHITE, IntToFormattedStr(IsItemInStorage(house, CONTAINER_TYPE_HOUSE, ITEM_TYPE_TENT, 1)));
				
				RemoveFromStorage(house, CONTAINER_TYPE_HOUSE, ITEM_TYPE_TENT, 1);
				AddItemToPlayer(playerid, ITEM_TYPE_TENT, 1);
				
				format(string, sizeof(string), "* %s has taken a tent from the house.", GetNameEx(playerid));
		      	NearByMessage(playerid, NICESKY, string);
				format(string, sizeof(string), "[HOUSE] %s has taken a tent from house id %d.", GetName(playerid));
				StatLog(string);
				SavePlayerData(playerid);
			}
			else
			{

				new weapid = 0;
				for(new i = 1; i < 47; i ++)
				{
					if(!strcmp(weapons[i], item_name, true) && strlen(weapons[i]) > 0)
					{
						weapid = i;
						break;
					}
				}

				if(weapid == 0)
					return SendClientMessage(playerid, WHITE, "Weapon ID not found. Make a bug report");

				if(PlayerHasWeaponInSlot(playerid, GetWeaponType(weapid)))
					return SendClientMessage(playerid, WHITE, "You already have a weapon in this slot. Store it or get rid of it first.");

				if(!IsItemInStorage(house, CONTAINER_TYPE_HOUSE, ITEM_TYPE_WEAPON, weapid))
					return SendClientMessage(playerid, WHITE, IntToFormattedStr(IsItemInStorage(house, CONTAINER_TYPE_HOUSE, ITEM_TYPE_WEAPON, weapid)));

				RemoveFromStorage(house, CONTAINER_TYPE_HOUSE, ITEM_TYPE_WEAPON, weapid);
				AddItemToPlayer(playerid, ITEM_TYPE_WEAPON, weapid);

				format(string, sizeof(string), "* %s has taken a weapon from the house.", GetNameEx(playerid));
		      	NearByMessage(playerid, NICESKY, string);
				format(string, sizeof(string), "[HOUSE] %s has taken %s (%d) from house id %d.", GetName(playerid), weapons[weapid], weapid, house);
				StatLog(string);
				SavePlayerData(playerid);
			}
			return 1;
		}
		case HOUSE_TAKE+1:
		{
			new item_amount = strval(inputtext), item_type = GetPVarInt(playerid, "ITEM_TYPE"), house = Player[playerid][InHouse];

			if(item_amount < 1)
				return SendClientMessage(playerid, WHITE, "Invalid amount entered.");

			new db_item_amount = IsItemInStorage(house, CONTAINER_TYPE_HOUSE, item_type, item_amount);

			if(db_item_amount == 0)
				return SendClientMessage(playerid, WHITE, "That item is no longer in storage.");

			if(item_amount > db_item_amount)
				item_amount = db_item_amount;

			new string[128];
			RemoveFromStorage(house, CONTAINER_TYPE_HOUSE, item_type, item_amount);
			AddItemToPlayer(playerid, item_type, item_amount);

			if(!strcmp("GasCan", GetItemName(item_type), true))
				format(string, sizeof(string), "* %s has taken a gas can from the house.", GetNameEx(playerid));
			else
				format(string, sizeof(string), "* %s has taken some %s from the house.", GetNameEx(playerid), strtolower(GetItemName(item_type)));
			NearByMessage(playerid, NICESKY, string);
			format(string, sizeof(string), "You have taken %d %s from the house.", item_amount, strtolower(GetItemName(item_type)));
			SendClientMessage(playerid, WHITE, string);
			format(string, sizeof(string), "[HOUSE] %s has taken %d %s from house %d.", GetName(playerid), item_amount, GetItemName(item_type), house);
			StatLog(string);
			SavePlayerData(playerid);
		}
		case BUSINESS_TAKE:
		{
			if(!response)
				return 1;
				
			new bid = Player[playerid][InBusiness];
			if(bid == 0)
				return SendClientMessage(playerid, -1, "You are not inside any business.");

			if(Player[playerid][AdminDuty] < 1)
			{
				if(Businesses[bid][bLinkedGroup] > 0)
				{
					if(!PlayerHasBusinessKey(playerid, bid))
					{
						if(Businesses[bid][bLinkedGroup] != Player[playerid][Group] && Player[playerid][InBusiness] != Player[playerid][Business])
							return SendClientMessage(playerid, -1, "You are not apart of this business group.");

						if(!IsPlayerInRangeOfPoint(playerid, 5.0, Businesses[bid][bSafeX], Businesses[bid][bSafeY], Businesses[bid][bSafeZ]))
							return SendClientMessage(playerid, -1, "You are not close enough to the safe location.");
					}
				}
				else
				{
					if(!PlayerHasBusinessKey(playerid, bid) || bid == 0)
						return SendClientMessage(playerid, -1, "You must be in a business you have a key to to do this.");
				}
			}

			new item_type, string[128], item_name[32];
			format(item_name, sizeof(item_name), "%s", ParseItemNameFromString(inputtext));
			item_type = GetItemTypeFromName(item_name);

			if(item_type != ITEM_TYPE_WEAPON && item_type != ITEM_TYPE_ARMOUR_POOR && item_type != ITEM_TYPE_ARMOUR_STANDARD && item_type != ITEM_TYPE_ARMOUR_MILITARY && item_type != ITEM_TYPE_BOMB && item_type != ITEM_TYPE_TENT)
			{
				SetPVarInt(playerid, "ITEM_TYPE", item_type);
				ShowPlayerDialog(playerid, BUSINESS_TAKE+1, DIALOG_STYLE_INPUT, "Business Storage", "How much would you like to take?", "Accept", "Cancel");
				return 1;
			}
			else if(item_type == ITEM_TYPE_ARMOUR_POOR)
			{
				if(Player[playerid][HasArmour] > 0)
					return SendClientMessage(playerid, -1, "You already have a kevlar vest in your inventory.");
				
				if(!IsItemInStorage(bid, CONTAINER_TYPE_BIZ, ITEM_TYPE_ARMOUR_POOR, 1))
					return SendClientMessage(playerid, WHITE, IntToFormattedStr(IsItemInStorage(bid, CONTAINER_TYPE_BIZ, ITEM_TYPE_ARMOUR_POOR, 1)));

				RemoveFromStorage(bid, CONTAINER_TYPE_BIZ, ITEM_TYPE_ARMOUR_POOR, 1);
				AddItemToPlayer(playerid, ITEM_TYPE_ARMOUR_POOR, 1);

				format(string, sizeof(string), "* %s has taken a kevlar vest from the business.", GetNameEx(playerid));
		      	NearByMessage(playerid, NICESKY, string);
				format(string, sizeof(string), "[BUSINESS] %s has taken a kevlar vest from business id %d.", GetName(playerid), bid);
				StatLog(string);
				SavePlayerData(playerid);
			}
			else if(item_type == ITEM_TYPE_ARMOUR_STANDARD)
			{
				if(Player[playerid][HasArmour] > 0)
					return SendClientMessage(playerid, -1, "You already have a kevlar vest in your inventory.");
				
				if(!IsItemInStorage(bid, CONTAINER_TYPE_BIZ, ITEM_TYPE_ARMOUR_STANDARD, 1))
					return SendClientMessage(playerid, WHITE, IntToFormattedStr(IsItemInStorage(bid, CONTAINER_TYPE_BIZ, ITEM_TYPE_ARMOUR_STANDARD, 1)));

				RemoveFromStorage(bid, CONTAINER_TYPE_BIZ, ITEM_TYPE_ARMOUR_STANDARD, 1);
				AddItemToPlayer(playerid, ITEM_TYPE_ARMOUR_STANDARD, 1);

				format(string, sizeof(string), "* %s has taken a kevlar vest from the business.", GetNameEx(playerid));
		      	NearByMessage(playerid, NICESKY, string);
				format(string, sizeof(string), "[BUSINESS] %s has taken a kevlar vest from business id %d.", GetName(playerid), bid);
				StatLog(string);
				SavePlayerData(playerid);
			}
			else if(item_type == ITEM_TYPE_ARMOUR_MILITARY)
			{
				if(Player[playerid][HasArmour] > 0)
					return SendClientMessage(playerid, -1, "You already have a kevlar vest in your inventory.");
				
				if(!IsItemInStorage(bid, CONTAINER_TYPE_BIZ, ITEM_TYPE_ARMOUR_MILITARY, 1))
					return SendClientMessage(playerid, WHITE, IntToFormattedStr(IsItemInStorage(bid, CONTAINER_TYPE_BIZ, ITEM_TYPE_ARMOUR_MILITARY, 1)));

				RemoveFromStorage(bid, CONTAINER_TYPE_BIZ, ITEM_TYPE_ARMOUR_MILITARY, 1);
				AddItemToPlayer(playerid, ITEM_TYPE_ARMOUR_MILITARY, 1);

				format(string, sizeof(string), "* %s has taken a kevlar vest from the business.", GetNameEx(playerid));
		      	NearByMessage(playerid, NICESKY, string);
				format(string, sizeof(string), "[BUSINESS] %s has taken a kevlar vest from business id %d.", GetName(playerid), bid);
				StatLog(string);
				SavePlayerData(playerid);
			}
			else if(item_type == ITEM_TYPE_BOMB)
			{
				if(Player[playerid][Bomb] > 0)
					return SendClientMessage(playerid, -1, "You already have a bomb in your inventory.");
				
				if(!IsItemInStorage(bid, CONTAINER_TYPE_BIZ, ITEM_TYPE_BOMB, 1))
					return SendClientMessage(playerid, WHITE, IntToFormattedStr(IsItemInStorage(bid, CONTAINER_TYPE_BIZ, ITEM_TYPE_BOMB, 1)));
				
				RemoveFromStorage(bid, CONTAINER_TYPE_BIZ, ITEM_TYPE_BOMB, 1);
				AddItemToPlayer(playerid, ITEM_TYPE_BOMB, 1);
				
				format(string, sizeof(string), "* %s has taken a bomb from the business.", GetNameEx(playerid), bid);
		      	NearByMessage(playerid, NICESKY, string);
				format(string, sizeof(string), "[BUSINESS] %s has taken a bomb from business id %d.", GetName(playerid), bid);
				StatLog(string);
				SavePlayerData(playerid);
			}
			else if(item_type == ITEM_TYPE_TENT)
			{
				if(Player[playerid][Tent] > 0)
					return SendClientMessage(playerid, -1, "You already have a tent in your inventory.");
				
				if(!IsItemInStorage(bid, CONTAINER_TYPE_BIZ, ITEM_TYPE_TENT, 1))
					return SendClientMessage(playerid, WHITE, IntToFormattedStr(IsItemInStorage(bid, CONTAINER_TYPE_BIZ, ITEM_TYPE_TENT, 1)));
				
				RemoveFromStorage(bid, CONTAINER_TYPE_BIZ, ITEM_TYPE_TENT, 1);
				AddItemToPlayer(playerid, ITEM_TYPE_TENT, 1);
				
				format(string, sizeof(string), "* %s has taken a tent from the business.", GetNameEx(playerid), bid);
		      	NearByMessage(playerid, NICESKY, string);
				format(string, sizeof(string), "[BUSINESS] %s has taken a tent from business id %d.", GetName(playerid), bid);
				StatLog(string);
				SavePlayerData(playerid);
			}
			else
			{

				new weapid = 0;
				for(new i = 1; i < 47; i ++)
				{
					if(!strcmp(weapons[i], item_name, true) && strlen(weapons[i]) > 0)
					{
						weapid = i;
						break;
					}
				}

				if(weapid == 0)
					return SendClientMessage(playerid, WHITE, "Weapon ID not found. Make a bug report");

				if(PlayerHasWeaponInSlot(playerid, GetWeaponType(weapid)))
					return SendClientMessage(playerid, WHITE, "You already have a weapon in this slot. Store it or get rid of it first.");

				if(!IsItemInStorage(bid, CONTAINER_TYPE_BIZ, ITEM_TYPE_WEAPON, weapid))
					return SendClientMessage(playerid, WHITE, IntToFormattedStr(IsItemInStorage(bid, CONTAINER_TYPE_BIZ, ITEM_TYPE_WEAPON, weapid)));

				RemoveFromStorage(bid, CONTAINER_TYPE_BIZ, ITEM_TYPE_WEAPON, weapid);
				AddItemToPlayer(playerid, ITEM_TYPE_WEAPON, weapid);

				format(string, sizeof(string), "* %s has taken a weapon from the business.", GetNameEx(playerid));
		      	NearByMessage(playerid, NICESKY, string);
				format(string, sizeof(string), "[BUSINESS] %s has taken %s (%d) from business id %d.", GetName(playerid), weapons[weapid], weapid, bid);
				StatLog(string);
				SavePlayerData(playerid);
			}
			return 1;
		}
		case BUSINESS_TAKE+1:
		{
			new item_amount = strval(inputtext), item_type = GetPVarInt(playerid, "ITEM_TYPE"), bid = Player[playerid][InBusiness];

			if(item_amount < 1)
				return SendClientMessage(playerid, WHITE, "Invalid amount entered.");

			new db_item_amount = IsItemInStorage(bid, CONTAINER_TYPE_BIZ, item_type, item_amount);

			if(db_item_amount == 0)
				return SendClientMessage(playerid, WHITE, "That item is no longer in storage.");

			if(item_amount > db_item_amount)
				item_amount = db_item_amount;

			new string[128];
			RemoveFromStorage(bid, CONTAINER_TYPE_BIZ, item_type, item_amount);
			AddItemToPlayer(playerid, item_type, item_amount);

			if(!strcmp("GasCan", GetItemName(item_type), true))
				format(string, sizeof(string), "* %s has taken a gas can from the business.", GetNameEx(playerid));
			else
				format(string, sizeof(string), "* %s has taken some %s from the business.", GetNameEx(playerid), strtolower(GetItemName(item_type)));
			NearByMessage(playerid, NICESKY, string);
			format(string, sizeof(string), "You have taken %d %s from the business.", item_amount, strtolower(GetItemName(item_type)));
			SendClientMessage(playerid, WHITE, string);
			format(string, sizeof(string), "[BUSINESS] %s has taken %d %s from business %d.", GetName(playerid), item_amount, GetItemName(item_type), bid);
			StatLog(string);
			SavePlayerData(playerid);
		}
		case DIALOG_TUTORIAL:
		{
			if((GetPVarInt(playerid, "TUTORIAL_TIMER")  - gettime()) < 5)
				PutPlayerInTutorial(playerid, Player[playerid][Tutorial]);
			else
			{
				new string[128];
				format(string, sizeof(string), "Please wait %d seconds before hitting continue.", (GetPVarInt(playerid, "TUTORIAL_TIMER")  - gettime()) - 5);
				SendClientMessage(playerid, RED, string);
				PutPlayerInTutorial(playerid, Player[playerid][Tutorial] - 1, 1);
			}
		}
		case DIALOG_ANNOUNCEMENT_1:
		{
			if(response)
			{
				format(announcesummary, sizeof(announcesummary), inputtext);
				ShowPlayerDialog(playerid, DIALOG_ANNOUNCEMENT_2, DIALOG_STYLE_INPUT, "Announcement Creator - URL", "Enter the URL for the announcement below:", "Enter", "");
			}
		}
		case DIALOG_ANNOUNCEMENT_2:
		{
			if(response)
			{
				format(announcelink, sizeof(announcelink), inputtext);
				format(announcemsg, sizeof(announcemsg), "{33CCFF}%s\n{AFAFAF}%s", announcesummary, announcelink);
				ShowPlayerDialog(playerid, DIALOG_LATEST_ANNOUNCEMENT, DIALOG_STYLE_MSGBOX, "{FF4500}Latest Announcement", announcemsg, "Close", "");
				SendClientMessage(playerid, -1, "Announcement created. This will show for all players next time they log in. Any previous announcement has been overwritten.");
				AnnounceExist = 1;

				new Minute, Hour, Day, Month, Year;
				gettime(Hour, Minute);
				getdate(Year, Month, Day);
				LastAnnounceMinute = Minute;
				LastAnnounceHour = Hour;
				LastAnnounceDay = Day;
				LastAnnounceMonth = Month;
				LastAnnounceYear = Year;
				
				dini_IntSet("Assets.ini", "AnnounceExist", AnnounceExist);
				dini_Set("Assets.ini", "announcemsg", announcemsg);
				dini_IntSet("Assets.ini", "LastAnnounceMinute", LastAnnounceMinute);
				dini_IntSet("Assets.ini", "LastAnnounceHour", LastAnnounceHour);
				dini_IntSet("Assets.ini", "LastAnnounceDay", LastAnnounceDay);
				dini_IntSet("Assets.ini", "LastAnnounceMonth", LastAnnounceMonth);
				dini_IntSet("Assets.ini", "LastAnnounceYear", LastAnnounceYear);
				
			}
		}
		case DIALOG_LOAN:
		{
			if(!response)
				return 1;
			
			new string[128];
			if(strval(inputtext) < 1 || strval(inputtext) > MAX_LOAN)
			{
				format(string, sizeof(string), "Enter a value between 1 and %d", MAX_LOAN);
				SendClientMessage(playerid, -1, string);
				format(string, sizeof(string), "{F97804}Maximum loan: {21DD00}%s\nEnter amount you wish to loan:", PrettyMoney(MAX_LOAN));
				return ShowPlayerDialog(playerid, DIALOG_LOAN, DIALOG_STYLE_INPUT, "Bank Loan System", string, "Loan", "Cancel");
			}
			
			new Float:interest = strval(inputtext) * 0.2, total;
			total = strval(inputtext) + floatround(interest, floatround_round);
			format(string, sizeof(string), "{F97804}Loan: %s\nInterest: %s\nTotal amount to be paid back: {21DD00}%s\n\n{FFFFFF}Do you accept?", PrettyMoney(strval(inputtext)), PrettyMoney(floatround(interest, floatround_round)), PrettyMoney(total));
			ShowPlayerDialog(playerid, DIALOG_LOAN+1, DIALOG_STYLE_MSGBOX, "Bank Loan System", string, "Accept", "Cancel");
			SetPVarInt(playerid, "Loan", strval(inputtext));
			SetPVarInt(playerid, "LoanTotal", total);
			
		}
		case DIALOG_LOAN+1:
		{
			if(!response)
				return SendClientMessage(playerid, -1, "Loan cancelled.");
			
			new loan = GetPVarInt(playerid, "Loan"), total = GetPVarInt(playerid, "LoanTotal"), string[128];
			DeletePVar(playerid, "Loan");
			DeletePVar(playerid, "LoanTotal");
			
			SendClientMessage(playerid, ANNOUNCEMENT, "----------------------------------------------------------------------------");
			format(string, sizeof(string), "You have loaned %s from the bank.", PrettyMoney(loan));
			SendClientMessage(playerid, ORANGE, string);
			format(string, sizeof(string), "You have 7 days to pay back {21DD00}%s.", PrettyMoney(total));
			SendClientMessage(playerid, ORANGE, string);
			SendClientMessage(playerid, ORANGE, "Failure to pay back the loan will result in the bank seizing your income until it is paid.");
			SendClientMessage(playerid, ORANGE, "(( Use /bpayloan at the bank to pay back your loan. ))");
			SendClientMessage(playerid, ANNOUNCEMENT, "----------------------------------------------------------------------------");	
			
			Player[playerid][Loan] = total;
			Player[playerid][LoanTime] = gettime() + 604800;
			Player[playerid][LoanNotPaid] = 0;
			
			new ip[25];
			GetPlayerIp(playerid, ip, sizeof(ip));
			format(string, sizeof(string), "[BANK] %s (%s) has taken a loan of $%s from their bank (plus interest = %s).", GetName(playerid), ip, IntToFormattedStr(loan), IntToFormattedStr(total));
			MoneyLog(string);
			Player[playerid][BankMoney] += loan;
		}
		case DIALOG_LOAN_PAYBACK:
		{
			if(!response)
				return 1;
			
			new string[128];
			if(strval(inputtext) < 1 || strval(inputtext) > Player[playerid][Loan])
			{
				format(string, sizeof(string), "Enter a value between 1 and %d", Player[playerid][Loan]);
				SendClientMessage(playerid, -1, string);
				new days = (Player[playerid][LoanTime] - gettime()) / 86400, hours = ((Player[playerid][LoanTime] - gettime()) % 86400) / 3600;
				if(days < 0 && hours < 0)
					format(string, sizeof(string), "{F97804}Amount owed remaining: {21DD00}%s {F97804}\nTime left: {AA3333}EXPIRED{F97804}\n\nEnter amount you wish to pay back:", PrettyMoney(Player[playerid][Loan]));
				else
					format(string, sizeof(string), "{F97804}Amount owed remaining: {21DD00}%s {F97804}\nTime left: %d days, %d hours\n\nEnter amount you wish to pay back:", PrettyMoney(Player[playerid][Loan]), days, hours);
				return ShowPlayerDialog(playerid, DIALOG_LOAN_PAYBACK, DIALOG_STYLE_INPUT, "Bank Loan System", string, "Pay", "Cancel");
			}
			
			if(strval(inputtext) > Player[playerid][BankMoney])
			{
				new days = (Player[playerid][LoanTime] - gettime()) / 86400, hours = ((Player[playerid][LoanTime] - gettime()) % 86400) / 3600;
				if(days < 0 && hours < 0)
					format(string, sizeof(string), "{F97804}Amount owed remaining: {21DD00}%s {F97804}\nTime left: {AA3333}EXPIRED{F97804}\n\nEnter amount you wish to pay back:", PrettyMoney(Player[playerid][Loan]));
				else
					format(string, sizeof(string), "{F97804}Amount owed remaining: {21DD00}%s {F97804}\nTime left: %d days, %d hours\n\nEnter amount you wish to pay back:", PrettyMoney(Player[playerid][Loan]), days, hours);
				SendClientMessage(playerid, -1, "You don't have this much to pay back in your bank account.");
				return ShowPlayerDialog(playerid, DIALOG_LOAN_PAYBACK, DIALOG_STYLE_INPUT, "Bank Loan System", string, "Pay", "Cancel");
			}
		
			Player[playerid][Loan] -= strval(inputtext);
			Player[playerid][BankMoney] -= strval(inputtext);
			
			SendClientMessage(playerid, ANNOUNCEMENT, "----------------------------------------------------------------------------");
			if(Player[playerid][Loan] > 0)
				format(string, sizeof(string), "You have paid %s from your loan. You still owe %s to the bank", PrettyMoney(strval(inputtext)), PrettyMoney(Player[playerid][Loan]));
			else
			{
				format(string, sizeof(string), "You have paid %s from your loan. You no longer owe anything to the bank!", PrettyMoney(strval(inputtext)));
				Player[playerid][LoanNotPaid] = 0;
				Player[playerid][CannotLoanTime] = gettime() + 259200;
			}
			SendClientMessage(playerid, ORANGE, string);
			SendClientMessage(playerid, ANNOUNCEMENT, "----------------------------------------------------------------------------");
			
			new ip[25];
			GetPlayerIp(playerid, ip, sizeof(ip));
			format(string, sizeof(string), "[BANK] %s (%s) has paid $%d of their loan to the bank (remaining amount: $%d)", GetName(playerid), ip, IntToFormattedStr(strval(inputtext)), IntToFormattedStr(Player[playerid][Loan]));
			MoneyLog(string);
		}	
		case DIALOG_FAKELICENSE:
		{
			if(!response)
			{
				DeletePVar(playerid, "FakeLName");
				DeletePVar(playerid, "FakeLicense1");
				DeletePVar(playerid, "FakeLicense2");
				DeletePVar(playerid, "FakeLicense3");
				DeletePVar(playerid, "FakeLicense4");
				DeletePVar(playerid, "FakeLicense5");
				return SendClientMessage(playerid, -1, "Fake registration creation cancelled.");
			}
			
			if(strfind(inputtext, "_") == -1)
			{
				SendClientMessage(playerid, -1, "You must include an underscore.");
				return ShowPlayerDialog(playerid, DIALOG_FAKELICENSE, DIALOG_STYLE_INPUT, "Fake Registration", "Enter your fake name (e.g. John_Smith):", "Next", "Cancel");
			}
			
			if(strlen(inputtext) < 7)
			{
				SendClientMessage(playerid, -1, "Minimum of 7 characters needed for the fake name.");
				return ShowPlayerDialog(playerid, DIALOG_FAKELICENSE, DIALOG_STYLE_INPUT, "Fake Registration", "Enter your fake name (e.g. John_Smith):", "Next", "Cancel");
			}
			if(strlen(inputtext) > 30)
			{
				SendClientMessage(playerid, -1, "Maximum of 30 characters needed for the fake name.");
				return ShowPlayerDialog(playerid, DIALOG_FAKELICENSE, DIALOG_STYLE_INPUT, "Fake Registration", "Enter your fake name (e.g. John_Smith):", "Next", "Cancel");
			}
				
			SetPVarString(playerid, "FakeLName", inputtext);
			SendClientMessage(playerid, -1, "Click 'Next' and leave the space blank if you wish to stop adding vehicles.");
			ShowPlayerDialog(playerid, DIALOG_FAKELICENSE+1, DIALOG_STYLE_INPUT, "Fake Registration", "Enter your first fake vehicle details (e.g. Sultan | ABC-123):", "Next", "Cancel");			
		}
		case DIALOG_FAKELICENSE+1:
		{
			if(!response)
			{
				DeletePVar(playerid, "FakeLName");
				DeletePVar(playerid, "FakeLicense1");
				DeletePVar(playerid, "FakeLicense2");
				DeletePVar(playerid, "FakeLicense3");
				DeletePVar(playerid, "FakeLicense4");
				DeletePVar(playerid, "FakeLicense5");
				return SendClientMessage(playerid, -1, "Fake registration creation cancelled.");
			}
			
			if(strlen(inputtext) < 1)
			{
				new string[256], name[30];
				GetPVarString(playerid, "FakeLName", name, 30);
				return ShowPlayerDialog(playerid, DIALOG_FAKELICENSE+6, DIALOG_STYLE_MSGBOX, "Fake Registration Final Details", string, "Create", "Cancel");
			}
			if(strlen(inputtext) > 30)
			{
				SendClientMessage(playerid, -1, "Maximum of 30 characters allowed.");
				return ShowPlayerDialog(playerid, DIALOG_FAKELICENSE+1, DIALOG_STYLE_INPUT, "Fake Registration", "Enter your first fake vehicle details (e.g. Sultan | ABC-123):", "Next", "Cancel");	
			}
			
			SetPVarString(playerid, "FakeLicense1", inputtext);
			ShowPlayerDialog(playerid, DIALOG_FAKELICENSE+2, DIALOG_STYLE_INPUT, "Fake Registration", "Enter your second fake vehicle details (e.g. Sultan | ABC-123):", "Next", "Cancel");
		}
		case DIALOG_FAKELICENSE+2:
		{
			if(!response)
			{
				DeletePVar(playerid, "FakeLName");
				DeletePVar(playerid, "FakeLicense1");
				DeletePVar(playerid, "FakeLicense2");
				DeletePVar(playerid, "FakeLicense3");
				DeletePVar(playerid, "FakeLicense4");
				DeletePVar(playerid, "FakeLicense5");
				return SendClientMessage(playerid, -1, "Fake registration creation cancelled.");
			}
			
			if(strlen(inputtext) < 1)
			{
				new car1[30], string[256], name[30];
				GetPVarString(playerid, "FakeLName", name, 30);
				GetPVarString(playerid, "FakeLicense1", car1, 30);
				format(string, sizeof(string), "Fake name: %s\nFake cars:\n%s", name, car1);
				return ShowPlayerDialog(playerid, DIALOG_FAKELICENSE+6, DIALOG_STYLE_MSGBOX, "Fake Registration Final Details", string, "Create", "Cancel");
			}
			if(strlen(inputtext) > 30)
			{
				SendClientMessage(playerid, -1, "Maximum of 30 characters allowed.");
				return ShowPlayerDialog(playerid, DIALOG_FAKELICENSE+2, DIALOG_STYLE_INPUT, "Fake Registration", "Enter your second fake vehicle details (e.g. Sultan | ABC-123):", "Next", "Cancel");	
			}
			
			SetPVarString(playerid, "FakeLicense2", inputtext);
			ShowPlayerDialog(playerid, DIALOG_FAKELICENSE+3, DIALOG_STYLE_INPUT, "Fake Registration", "Enter your third fake vehicle details (e.g. Sultan | ABC-123):", "Next", "Cancel");
		}
		case DIALOG_FAKELICENSE+3:
		{
			if(!response)
			{
				DeletePVar(playerid, "FakeLName");
				DeletePVar(playerid, "FakeLicense1");
				DeletePVar(playerid, "FakeLicense2");
				DeletePVar(playerid, "FakeLicense3");
				DeletePVar(playerid, "FakeLicense4");
				DeletePVar(playerid, "FakeLicense5");
				return SendClientMessage(playerid, -1, "Fake registration creation cancelled.");
			}
			
			if(strlen(inputtext) < 1)
			{
				new car1[30], car2[30], string[256], name[30];
				GetPVarString(playerid, "FakeLName", name, 30);
				GetPVarString(playerid, "FakeLicense1", car1, 30);
				GetPVarString(playerid, "FakeLicense2", car2, 30);
				format(string, sizeof(string), "Fake name: %s\nFake cars:\n%s\n%s", name, car1, car2);
				return ShowPlayerDialog(playerid, DIALOG_FAKELICENSE+6, DIALOG_STYLE_MSGBOX, "Fake Registration Final Details", string, "Create", "Cancel");
			}
			if(strlen(inputtext) > 30)
			{
				SendClientMessage(playerid, -1, "Maximum of 30 characters allowed.");
				return ShowPlayerDialog(playerid, DIALOG_FAKELICENSE+3, DIALOG_STYLE_INPUT, "Fake Registration", "Enter your third fake vehicle details (e.g. Sultan | ABC-123):", "Next", "Cancel");	
			}
			
			SetPVarString(playerid, "FakeLicense3", inputtext);
			ShowPlayerDialog(playerid, DIALOG_FAKELICENSE+4, DIALOG_STYLE_INPUT, "Fake Registration", "Enter your fourth fake vehicle details (e.g. Sultan | ABC-123):", "Next", "Cancel");
		}
		case DIALOG_FAKELICENSE+4:
		{
			if(!response)
			{
				DeletePVar(playerid, "FakeLName");
				DeletePVar(playerid, "FakeLicense1");
				DeletePVar(playerid, "FakeLicense2");
				DeletePVar(playerid, "FakeLicense3");
				DeletePVar(playerid, "FakeLicense4");
				DeletePVar(playerid, "FakeLicense5");
				return SendClientMessage(playerid, -1, "Fake registration creation cancelled.");
			}
			
			if(strlen(inputtext) < 1)
			{
				new car1[30], car2[30], car3[30], string[256], name[30];
				GetPVarString(playerid, "FakeLName", name, 30);
				GetPVarString(playerid, "FakeLicense1", car1, 30);
				GetPVarString(playerid, "FakeLicense2", car2, 30);
				GetPVarString(playerid, "FakeLicense3", car3, 30);
				format(string, sizeof(string), "Fake name: %s\nFake cars:\n%s\n%s\n%s\n", name, car1, car2, car3);
				return ShowPlayerDialog(playerid, DIALOG_FAKELICENSE+6, DIALOG_STYLE_MSGBOX, "Fake Registration Final Details", string, "Create", "Cancel");
			}
			if(strlen(inputtext) > 30)
			{
				SendClientMessage(playerid, -1, "Maximum of 30 characters allowed.");
				return ShowPlayerDialog(playerid, DIALOG_FAKELICENSE+4, DIALOG_STYLE_INPUT, "Fake Registration", "Enter your fourth fake vehicle details (e.g. Sultan | ABC-123):", "Next", "Cancel");	
			}
			
			SetPVarString(playerid, "FakeLicense4", inputtext);
			ShowPlayerDialog(playerid, DIALOG_FAKELICENSE+5, DIALOG_STYLE_INPUT, "Fake Registration", "Enter your fifth fake vehicle details (e.g. Sultan | ABC-123):", "Next", "Cancel");
		}
		case DIALOG_FAKELICENSE+5:
		{
			if(!response)
			{
				DeletePVar(playerid, "FakeLName");
				DeletePVar(playerid, "FakeLicense1");
				DeletePVar(playerid, "FakeLicense2");
				DeletePVar(playerid, "FakeLicense3");
				DeletePVar(playerid, "FakeLicense4");
				DeletePVar(playerid, "FakeLicense5");
				return SendClientMessage(playerid, -1, "Fake registration creation cancelled.");
			}
			
			if(strlen(inputtext) < 1)
			{
				new car1[30], car2[30], car3[30], car4[30], string[256], name[30];
				GetPVarString(playerid, "FakeLName", name, 30);
				GetPVarString(playerid, "FakeLicense1", car1, 30);
				GetPVarString(playerid, "FakeLicense2", car2, 30);
				GetPVarString(playerid, "FakeLicense3", car3, 30);
				GetPVarString(playerid, "FakeLicense4", car4, 30);
				format(string, sizeof(string), "Fake name: %s\nFake cars:\n%s\n%s\n%s\n%s", name, car1, car2, car3, car4);
				return ShowPlayerDialog(playerid, DIALOG_FAKELICENSE+6, DIALOG_STYLE_MSGBOX, "Fake Registration Final Details", string, "Create", "Cancel");
			}
			if(strlen(inputtext) > 30)
			{
				SendClientMessage(playerid, -1, "Maximum of 30 characters allowed.");
				return ShowPlayerDialog(playerid, DIALOG_FAKELICENSE+5, DIALOG_STYLE_INPUT, "Fake Registration", "Enter your fifth fake vehicle details (e.g. Sultan | ABC-123):", "Next", "Cancel");	
			}
			
			SetPVarString(playerid, "FakeLicense5", inputtext);
			
			new car1[30], car2[30], car3[30], car4[30], car5[30], string[256], name[30];
			GetPVarString(playerid, "FakeLName", name, 30);
			GetPVarString(playerid, "FakeLicense1", car1, 30);
			GetPVarString(playerid, "FakeLicense2", car2, 30);
			GetPVarString(playerid, "FakeLicense3", car3, 30);
			GetPVarString(playerid, "FakeLicense4", car4, 30);
			GetPVarString(playerid, "FakeLicense5", car5, 30);
			format(string, sizeof(string), "Fake name: %s\nFake cars:\n%s\n%s\n%s\n%s\n%s", name, car1, car2, car3, car4, car5);
			ShowPlayerDialog(playerid, DIALOG_FAKELICENSE+6, DIALOG_STYLE_MSGBOX, "Fake Registration Final Details", string, "Create", "Cancel");
		}
		case DIALOG_FAKELICENSE+6:
		{
			if(!response)
			{
				DeletePVar(playerid, "FakeLName");
				DeletePVar(playerid, "FakeLicense1");
				DeletePVar(playerid, "FakeLicense2");
				DeletePVar(playerid, "FakeLicense3");
				DeletePVar(playerid, "FakeLicense4");
				DeletePVar(playerid, "FakeLicense5");
				return SendClientMessage(playerid, -1, "Fake registration creation cancelled.");
			}
	
			new name[30], string[128], car1[30], car2[30], car3[30], car4[30], car5[30];
			GetPVarString(playerid, "FakeLName", name, 30);
			new i;
			while ((i = strfind(name, "_", false, i)) != -1)
				name[i] = ' ';
				
			GetPVarString(playerid, "FakeLicense1", car1, 30);
			GetPVarString(playerid, "FakeLicense2", car2, 30);
			GetPVarString(playerid, "FakeLicense3", car3, 30);
			GetPVarString(playerid, "FakeLicense4", car4, 30);
			GetPVarString(playerid, "FakeLicense5", car5, 30);
			
			if(strlen(car5) < 1)
				format(Player[playerid][FakeLicense], 256, "%s |Car1:%s>Car2:%s<Car3:%s/Car4:%s'", name, car1, car2, car3, car4);
			if(strlen(car4) < 1)
				format(Player[playerid][FakeLicense], 256, "%s |Car1:%s>Car2:%s<Car3:%s/", name, car1, car2, car3);
			if(strlen(car3) < 1)
				format(Player[playerid][FakeLicense], 256, "%s |Car1:%s>Car2:%s<", name, car1, car2);
			if(strlen(car2) < 1)
				format(Player[playerid][FakeLicense], 256, "%s |Car1:%s>", name, car1);
			if(strlen(car1) < 1)
				format(Player[playerid][FakeLicense], 256, "%s |", name);
				
			DeletePVar(playerid, "FakeLName");
			DeletePVar(playerid, "FakeLicense1");
			DeletePVar(playerid, "FakeLicense2");
			DeletePVar(playerid, "FakeLicense3");
			DeletePVar(playerid, "FakeLicense4");
			DeletePVar(playerid, "FakeLicense5");
			
			format(string, sizeof(string), "* %s creates a fake registration card.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
			SendClientMessage(playerid, -1, "Your fake registration has been added to your inventory.");
		}
		case DIALOG_FAKEID:
		{
			if(!response)
				return SendClientMessage(playerid, -1, "Fake ID creation cancelled.");
			
			if(strfind(inputtext, "_") == -1)
			{
				SendClientMessage(playerid, -1, "You must include an underscore.");
				return ShowPlayerDialog(playerid, DIALOG_FAKEID, DIALOG_STYLE_INPUT, "Fake ID", "Enter your fake name (e.g. John_Smith):", "Next", "Cancel");
			}
			
			if(strlen(inputtext) < 7)
			{
				SendClientMessage(playerid, -1, "Minimum of 7 characters needed for the fake name.");
				return ShowPlayerDialog(playerid, DIALOG_FAKEID, DIALOG_STYLE_INPUT, "Fake ID", "Enter your fake name (e.g. John_Smith):", "Next", "Cancel");
			}
			if(strlen(inputtext) > 30)
			{
				SendClientMessage(playerid, -1, "Maximum of 30 characters needed for the fake name.");
				return ShowPlayerDialog(playerid, DIALOG_FAKEID, DIALOG_STYLE_INPUT, "Fake ID", "Enter your fake name (e.g. John_Smith):", "Next", "Cancel");
			}
				
			SetPVarString(playerid, "FakeIDName", inputtext);
			ShowPlayerDialog(playerid, DIALOG_FAKEID+1, DIALOG_STYLE_INPUT, "Fake ID", "Enter your fake age (between 18-99):", "Next", "Cancel");			
		}
		case DIALOG_FAKEID+1:
		{
			if(!response)
				return SendClientMessage(playerid, -1, "Fake ID creation cancelled.");
			

			if(strval(inputtext) < 18 || strval(inputtext) > 99)
			{
				SendClientMessage(playerid, -1, "Fake age must be between 18 and 99.");
				return ShowPlayerDialog(playerid, DIALOG_FAKEID+1, DIALOG_STYLE_INPUT, "Fake ID", "Enter your fake age (between 18-99):", "Next", "Cancel");		
			}
			
			SetPVarInt(playerid, "FakeIDAge", strval(inputtext));
			ShowPlayerDialog(playerid, DIALOG_FAKEID+2, DIALOG_STYLE_INPUT, "Fake ID", "Enter your fake house address (can leave blank):", "Next", "Cancel");
		}
		case DIALOG_FAKEID+2:
		{
			if(!response)
				return SendClientMessage(playerid, -1, "Fake ID creation cancelled.");
			
			if(strlen(inputtext) == 0)
				return ShowPlayerDialog(playerid, DIALOG_FAKEID+3, DIALOG_STYLE_INPUT, "Fake ID", "Type 0, 1 or 2 (0 = no license, 1 = car license, 2 = car and truck license)", "Next", "Cancel");
			
			if(strlen(inputtext) > 60)
			{
				SendClientMessage(playerid, -1, "Maximum of 60 characters needed for the fake house address.");
				return ShowPlayerDialog(playerid, DIALOG_FAKEID+2, DIALOG_STYLE_INPUT, "Fake ID", "Enter your fake house address (can leave blank):", "Next", "Cancel");
			}
			
			SetPVarString(playerid, "FakeIDHouse", inputtext);
			ShowPlayerDialog(playerid, DIALOG_FAKEID+3, DIALOG_STYLE_INPUT, "Fake ID", "Type 0, 1 or 2 (0 = no license, 1 = car license, 2 = car and truck license)", "Next", "Cancel");
		}
		case DIALOG_FAKEID+3:
		{
			if(!response)
				return SendClientMessage(playerid, -1, "Fake ID creation cancelled.");
			
			if(strval(inputtext) < 0 || strval(inputtext) > 2)
			{
				SendClientMessage(playerid, -1, "Can only use values 0, 1 or 2.");
				return ShowPlayerDialog(playerid, DIALOG_FAKEID+3, DIALOG_STYLE_INPUT, "Fake ID", "Type 0, 1 or 2 (0 = no license, 1 = car license, 2 = car and truck license)", "Next", "Cancel");
			}
			
			SetPVarInt(playerid, "FakeIDLicense", strval(inputtext));
			
			new string[128], name[30], house[60];
			GetPVarString(playerid, "FakeIDName", name, 30);
			GetPVarString(playerid, "FakeIDHouse", house, 60);
			format(string, sizeof(string), "Fake name: %s\nFake age: %d\nFake address: %s\nFake licenses: %s", name, GetPVarInt(playerid, "FakeIDAge"), house, (GetPVarInt(playerid, "FakeIDLicense") == 0) ? ("No licenses") : (GetPVarInt(playerid, "FakeIDLicense") == 1 ? ("Car license") : ("Car license, truck license")));
			ShowPlayerDialog(playerid, DIALOG_FAKEID+4, DIALOG_STYLE_MSGBOX, "Fake ID Final Details", string, "Create", "Cancel");
		}
		case DIALOG_FAKEID+4:
		{
			if(!response)
				return SendClientMessage(playerid, -1, "Fake ID creation cancelled.");
			
			new name[30], house[60];
			GetPVarString(playerid, "FakeIDName", name, 30);
			new i;
			while ((i = strfind(name, "_", false, i)) != -1)
				name[i] = ' ';
			new age = GetPVarInt(playerid, "FakeIDAge");
			GetPVarString(playerid, "FakeIDHouse", house, 60);
			new license = GetPVarInt(playerid, "FakeIDLicense");
			DeletePVar(playerid, "FakeIDName");
			DeletePVar(playerid, "FakeIDAge");
			DeletePVar(playerid, "FakeIDHouse");
			DeletePVar(playerid, "FakeIDLicense");
			
			new string[128];
			if(strlen(house) > 1 && license > 0)
				format(Player[playerid][FakeIDString], 256, "Name: %s |Age: %d|Registered House Address: %s/%s", name, age, house, (license == 1) ? ("Standard") : ("Standard,Truck"));
			else if(strlen(house) > 1 && license == 0)
				format(Player[playerid][FakeIDString], 256, "Name: %s |Age: %d|Registered House Address: %s/", name, age, house);
			else if(strlen(house) < 1 && license > 0)
				format(Player[playerid][FakeIDString], 256, "Name: %s |Age: %d/%s", name, age, (license == 1) ? ("Standard") : ("Standard,Truck"));
			else 
				format(Player[playerid][FakeIDString], 256, "Name: %s |Age: %d", name, age);
			
			format(string, sizeof(string), "* %s creates a fake identification card.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
			SendClientMessage(playerid, -1, "Your fake ID card has been added to your inventory.");
		}
		case DIALOG_GUNRACK:
		{
			if(!response)
				return 1;
			
			new idx = GetPVarInt(playerid, "GunRack_idx"), sql = GetPVarInt(playerid, "GunRack_sql"), string[128], gun[20];
			DeletePVar(playerid, "GunRack_idx");
			DeletePVar(playerid, "GunRack_sql");
			
			if(Veh[idx][GunRack][listitem] < 1)
				return 1;
			
			GivePlayerWeaponEx(playerid, Veh[idx][GunRack][listitem]);
			
			if(Veh[idx][GunRack][listitem] == 27)
				SetPlayerArmedWeapon(playerid, 0);
			else
				SetPlayerArmedWeapon(playerid, Veh[idx][GunRack][listitem]);
			
			GetWeaponName(Veh[idx][GunRack][listitem], gun ,sizeof(gun));
			Veh[idx][GunRack][listitem] = 0;
			
			format(string, sizeof(string), "* %s has taken a %s from their gun rack.", GetNameEx(playerid), gun);
			NearByMessage(playerid, NICESKY, string);
			
			new query[128];
			format(query, sizeof(query), "UPDATE vehicles SET GunRack0 = '%d', GunRack1 = '%d' WHERE sqlid = '%d'", Veh[idx][GunRack][0], Veh[idx][GunRack][1], sql);
			mysql_query(MYSQL_MAIN, query);
		}
		case DIALOG_SELLBACKHOUSE:
		{
			if(!response)
				return 1;
			
			new house = GetPVarInt(playerid, "SellBackHouseSlot");
			new houseid = GetPVarInt(playerid, "SellBackHouseID");
			new payment = GetPVarInt(playerid, "SellBackHousePrice");
			DeletePVar(playerid, "SellBackHouseSlot");
			DeletePVar(playerid, "SellBackHouseID");
			DeletePVar(playerid, "SellBackHousePrice");
			
			new string[128];
			format(string, sizeof(string), "[HOUSE] %s has sold back House %d to real estate for %s.", GetName(playerid), houseid);
			StatLog(string);
			format(Houses[houseid][hOwner], 255, "Nobody");
			RemovePlayerHouseKeys(houseid);
			Houses[houseid][Keypad] = -1;
			Houses[houseid][hFakeOwner] = 0;
			SaveHouse(houseid);
			DestroyDynamicPickup(Houses[houseid][HPickupID]);
			UpdateObjectLabel(houseid, LABEL_TYPE_HOUSE, .create = 0);
			Houses[houseid][HPickupID] = CreateDynamicPickup(1273, 23, Houses[houseid][hExteriorX], Houses[houseid][hExteriorY], Houses[houseid][hExteriorZ], Houses[houseid][hExteriorVW], Houses[houseid][hExteriorID], -1, 150.0);
			if(house == 1)
				Player[playerid][House] = 0;
			else
				Player[playerid][House2] = 0;
			
			Player[playerid][BankMoney] += payment;
			format(string, sizeof(string), "You have sold house %d for %s. The payment has been transferred to your bank.", houseid, PrettyMoney(payment));
			SendClientMessage(playerid, -1, string);
		}
		case DIALOG_SELLBACKVEHICLE:
		{
			if(!response)
				return 1;
			
			new payment = GetPVarInt(playerid, "SellBackVehicle");
			DeletePVar(playerid, "SellBackVehicle");
			new sql = GetVSQLID(GetPlayerVehicleID(playerid)), idx = GetVIndex(sql);
    		for(new i; i < 5; i++)
			{
				if(Player[playerid][Cars][i] == sql)
				{
					Player[playerid][Cars][i] = 0;
					break;
				}
			}
			
			if(IsSQLVehicleSpawned(sql))
				DespawnVehicleSQL(sql);

			new string[255];
			format(string, sizeof(string), "DELETE FROM vehicles WHERE sqlid = '%d'", sql);
			mysql_query(MYSQL_MAIN, string, false);
			ResetVCell(idx);

			format(string, sizeof(string), "[CAR] %s has sold their car using /dropcar with SQLID %d. (Paid: %d)", GetName(playerid), sql, payment);
			StatLog(string);
			Player[playerid][Money] += payment;
			format(string, sizeof(string), "You have sold your vehicle for %s.", PrettyMoney(payment));
			SendClientMessage(playerid, -1, string);
			DisablePlayerCheckpoint(playerid);
		}
		case DIALOG_HOUSE_BUYSTORAGE:
		{
			if(!response)
			{
				DeletePVar(playerid, "BuySlotHouse");
				return 1;
			}
			
			new amount = strval(inputtext), hid = GetPVarInt(playerid, "BuySlotHouse"), string[128];
			
			if(amount < 1)
				return SendClientMessage(playerid, -1, "Invalid amount.");
			
			if((Houses[hid][HouseStorageSize] + amount) > (Houses[hid][HouseStorageBase] * 2))
				return SendClientMessage(playerid, -1, "You can't exceed the maximum number of slots allowed.");
			
			new price = amount * 2000;
			
			if(Player[playerid][BankMoney] < price)
				return SendClientMessage(playerid, -1, "You don't have enough money in the bank.");
			
			SetPVarInt(playerid, "BuySlotPrice", price);
			SetPVarInt(playerid, "BuySlotAmount", amount);
			format(string, sizeof(string), "%d slots will cost %s. Do you accept?", amount, PrettyMoney(price));
			ShowPlayerDialog(playerid, DIALOG_HOUSE_BUYSTORAGE+1, DIALOG_STYLE_MSGBOX, "Buy Additional House Slots", string, "Buy", "Cancel");		
		}
		case DIALOG_HOUSE_BUYSTORAGE+1:
		{
			if(!response)
			{
				DeletePVar(playerid, "BuySlotPrice");
				DeletePVar(playerid, "BuySlotHouse");
				DeletePVar(playerid, "BuySlotAmount");
				return 1;
			}
			
			new price = GetPVarInt(playerid, "BuySlotPrice"), hid = GetPVarInt(playerid, "BuySlotHouse"), amount = GetPVarInt(playerid, "BuySlotAmount");
			DeletePVar(playerid, "BuySlotPrice");
			DeletePVar(playerid, "BuySlotHouse");
			DeletePVar(playerid, "BuySlotAmount");
			
			Player[playerid][BankMoney] -= price;
			Houses[hid][HouseStorageSize] += amount;
			Houses[hid][HouseStorageExtra] += amount;
			
			new string[128];
			format(string, sizeof(string), "You have purchased %d storage slots for %s.", amount, PrettyMoney(price));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "You can purchase %d more storage slots for this house.", ((Houses[hid][HouseStorageBase] * 2) - Houses[hid][HouseStorageSize]));
			SendClientMessage(playerid, -1, string);
			
			format(string, sizeof(string), "[HOUSE] %s has purchased %d extra storage slots for %s.", GetName(playerid), amount, PrettyMoney(price));
			StatLog(string);
			SaveHouse(hid);
		}
	}
	return 1;
}

public OnGameModeExit()
{
	if(EmergencyShutdown == 0)
	{
		if(CurGMX == 0)
		{
			SaveGeneralData();
		}
		else
		{
			SaveGroups();
			UpdateAnalysis();
			SaveJobs();
			SaveHouses();
			SaveBusinesses();
			saveRaffle();
			//SaveVehicles();
			//SaveBillboards();
		}
	}
	mysql_close();
	djson_GameModeExit();
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	new sql = GetVSQLID(vehicleid), idx = GetVIndex(sql);
	if(sql != 0)
	{
		Veh[idx][PaintJob] = paintjobid;
	}
	return 1;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
    new panels, doors, lights, tires;
    GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
    switch(GetVehicleModel(vehicleid))
    {
        case 427: UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, 0);
        case 528: UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, 0);
        case 601: UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, 0);
        case 490: UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, 0);
    }
    return 1;
}
 
public ClearCriminalRecord(playerid)
{
	// format(Player[playerid][Offence1], 255, "None");
	// format(Player[playerid][Offence2], 255, "None");
	// format(Player[playerid][Offence3], 255, "None");
	// format(Player[playerid][Offence4], 255, "None");
	// format(Player[playerid][Offence5], 255, "None");
	// format(Player[playerid][Offence6], 255, "None");
	Player[playerid][WantedLevel] = 0;
	new query[128];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE PoliceCrimes SET Active = \'0\' WHERE criminalName = \'%e\'", GetName(playerid));
	mysql_query(MYSQL_MAIN, query, false);
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	if(Player[playerid][Tutorial] >= 1)
	{
		return 0;
	}
	else if(Player[playerid][Authenticated] == 1)
	{
		SetSpawnInfo(playerid, 0, Player[playerid][LastSkin], Player[playerid][LastX], Player[playerid][LastY], Player[playerid][LastZ], 90, 0, 0, 0, 0, 0, 0);
		//SetSpawnInfo(playerid, 0, 299, Player[playerid][LastX], Player[playerid][LastY], Player[playerid][LastZ], 90, 0, 0, 0, 0, 0, 0);
		SpawnPlayer(playerid);
		new Connected;
		foreach(Player, i)
		{
			Connected++;
		}
		if (Connected >= MAX_PLAYERS - VIP_SLOTS){
			if (Player[playerid][VipRank] > 0 || Player[playerid][AdminLevel] > 0){
				// null
			}
			else
			{
				SendClientMessage(playerid, GREY, "The server is full, you've been kicked to keep a VIP slot open.");
				KickEx(playerid);
			}
		}
		return 0;
	}
	else
	{
		return 0;
	}
}

public OnPlayerRequestSpawn(playerid)
{
	if(Player[playerid][Authenticated] == 0)
	{
		SendClientMessage(playerid, GREY, "You have to login first.");
		KickEx(playerid);
		return 0;
	}
	else if(Player[playerid][Tutorial] >= 1)
	{
		SendClientMessage(playerid, GREY, "You have to go through the tutorial first.");
		return 0;
	}
	else
	{
		return 1;
	}
}

forward LoginCamPos(playerid);
public LoginCamPos(playerid)
{
	#if defined MTG_CHRISTMAS
		SetPlayerPos_Update(playerid, 1115.4314,-1435.3640,28.9753);
		SetPlayerCameraPos(playerid, 1115.4314,-1435.3640,28.9753);
		SetPlayerCameraLookAt(playerid, 1128.8220,-1444.7031,15.8759);
		// SetPlayerVirtualWorld(playerid, 1337);
	#endif
	return 1;
}

public OnPlayerConnect(playerid)
{
	Player[playerid][FirstSpawn] = 0;
	SetTimerEx("LoginCamPos", 500, false, "d", playerid);

	#if defined MTG_CHRISTMAS
		PlayAudioStreamForPlayer(playerid, MTG_CHRISTMAS_AUDIO);
	#endif

	if(strcmp(GetPlayerCountryName(playerid), "Anonymous Proxy", true) == 0)
	{
		SendClientMessage(playerid, WHITE, "You are not allowed to play on the crea SA:MP Roleplay server via an anonymous proxy.");
		KickEx(playerid); // This check is completely redundant in most cases.
		return 1;
	}

	SlotSpinner[playerid][0] = CreatePlayerObject(playerid, 2347, 2212.73, 1609.16, 1018.33,   0.00, 0.00, 0.00);
	SlotSpinner[playerid][1] = CreatePlayerObject(playerid, 2348, 2212.84, 1609.16, 1018.33,   0.00, 0.00, 0.00);
	SlotSpinner[playerid][2] = CreatePlayerObject(playerid, 2349, 2212.95, 1609.16, 1018.33,   0.00, 0.00, 0.00);
	SlotSpinner[playerid][3] = CreatePlayerObject(playerid, 2325, 2212.82, 1609.17, 1018.32,   0.00, 0.00, 0.00);

	new IP[21], string[128];
	GetPlayerIp(playerid, IP, sizeof(IP));
	format(string, sizeof(string), "%s connected from IP %s", GetName(playerid), IP);
	ConnectionLog(string);

	if(!strcmp(GetName(playerid), "con", true)
	|| !strcmp(GetName(playerid), "prn", true)
	|| !strcmp(GetName(playerid), "aux", true)
	|| !strcmp(GetName(playerid), "clock$", true)
	|| !strcmp(GetName(playerid), "nul", true)
	|| !strcmp(GetName(playerid), "com0", true)
	|| !strcmp(GetName(playerid), "com1", true)
	|| !strcmp(GetName(playerid), "com2", true)
	|| !strcmp(GetName(playerid), "com3", true)
	|| !strcmp(GetName(playerid), "com4", true)
	|| !strcmp(GetName(playerid), "com5", true)
	|| !strcmp(GetName(playerid), "com6", true)
	|| !strcmp(GetName(playerid), "com7", true)
	|| !strcmp(GetName(playerid), "com8", true)
	|| !strcmp(GetName(playerid), "com9", true)
	|| !strcmp(GetName(playerid), "lpt0", true)
	|| !strcmp(GetName(playerid), "lpt1", true)
	|| !strcmp(GetName(playerid), "lpt2", true)
	|| !strcmp(GetName(playerid), "lpt3", true)
	|| !strcmp(GetName(playerid), "lpt4", true)
	|| !strcmp(GetName(playerid), "lpt5", true)
	|| !strcmp(GetName(playerid), "lpt6", true)
	|| !strcmp(GetName(playerid), "lpt7", true)
	|| !strcmp(GetName(playerid), "lpt8", true)
	|| !strcmp(GetName(playerid), "lpt9", true))
	{
		//new IP[21], string[128];
		//GetPlayerIp(playerid, IP, sizeof(IP));
		format(string, sizeof(string), "IP %s tried to login as %s", IP, GetName(playerid));
		BanLog(string);
		printf(string);
  		format(string, sizeof(string), "Server has banned IP %s for trying to login as %s", IP, GetName(playerid));
		SendToAdmins(ADMINORANGE, string, 0);
		KickEx(playerid);
		format(string, sizeof(string), "banip %s", IP);
		SendRconCommand(string);
	}

	mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT * FROM ipbans WHERE IP = '%e'", IP);
	new Cache:cache = mysql_query(MYSQL_MAIN, string);
	if(cache_get_row_count() != 0)
	{
		cache_delete(cache);
		SendClientMessage(playerid, 0x94a6c6FF, "You are banned from this server.");
		KickEx(playerid);
		return 1;
	}
	cache_delete(cache);

	if(! IsPlayerNPC(playerid))
	{
		new Name[MAX_PLAYER_NAME];
		GetPlayerName(playerid, Name, sizeof(Name));

		Reset(playerid);
		//LoadEnvironmentChanges(playerid);
		SetPlayerColor(playerid, GREY);
		TotalConnections++;
		PlayersOn++;

		if(PlayersOn > MaxVisitors)
		{
			MaxVisitors = PlayersOn;
			UpdateAnalysis();
		}
		SendClientMessage(playerid, RED, "THIS SERVER CONTAINS EXPLICIT CONTENT, AND IS INTENDED ONLY FOR ADULTS.");
		
		//Textdraw here
		TextDrawShowForPlayer(playerid, LoadingTextdraw[0]);
		TextDrawShowForPlayer(playerid, LoadingTextdraw[1]);
		
		new query[128];
		mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT sqlid FROM account_directory WHERE name = '%e'", GetName(playerid));
		mysql_tquery(MYSQL_MAIN, query, "OnPlayerDirectorySearch", "d", playerid);
	}
	else
	{
		KickEx(playerid);
	}
	return 1;
}

forward OnPlayerDirectorySearch(playerid);
public OnPlayerDirectorySearch(playerid)
{
	
	TextDrawHideForPlayer(playerid, LoadingTextdraw[0]);
	TextDrawHideForPlayer(playerid, LoadingTextdraw[1]);
	if(!cache_get_row_count()) //Not registered
	{
		if(PlayerCreationDisabled == 1)
		{
			SendClientMessage(playerid, -1, "Player creation is disabled at this time, try again later.");
			KickEx(playerid);
			return 1;
		}

		new playernamesplit[3][MAX_PLAYER_NAME], pname[MAX_PLAYER_NAME], underscore, illegalchar;
		strcpy(pname, GetName(playerid), 128);
		split(pname, playernamesplit, '_');

		new illegalchars[] =
		{
			'`', '~', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '=', '+',
			'[', '{', ']', '}', '\'', '\\', '|', '"', ';', ':', '?', '/', '.', '>', ',',
			'<', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')'
		}; //"
		
		for(new i; i < strlen(pname); i++)
		{
			if(pname[i] == '_') underscore++;
			for(new x; x < sizeof(illegalchars); x++)
			{
				if(pname[i] == illegalchars[x])
					illegalchar++;
			}
		}

		if(!strlen(playernamesplit[0]) || !strlen(playernamesplit[1]) || underscore >= 2 || illegalchar > 0)
		{
			printf("[system] %s has been forced to the name change menu.", GetName(playerid));
			
			new NameStr[MAX_PLAYER_NAME];
			format(NameStr, sizeof(NameStr), "NONRPNAME%d", playerid);
			SetPlayerNameEx(playerid, NameStr);
			
			ShowPlayerDialog(playerid, 594, DIALOG_STYLE_INPUT, "Roleplay Name", "Please select a new, valid roleplaying name.", "Change", "Cancel");
			SendClientMessage(playerid, WHITE, "Your name is not valid, please pick a new one. Refrain from using tags and include one underscore.");
		}
		else
		{
			if(!IsAccountApproved(GetName(playerid)))
			{
				SendClientMessage(playerid, ORANGE, ACCOUNT_CREATION_STRING);
				SendClientMessage(playerid, ORANGE, ACCOUNT_CREATION_STRING);
				SendClientMessage(playerid, ORANGE, ACCOUNT_CREATION_STRING);
				KickEx(playerid);
				return 1;
			}
			else 
			{
				//ShowPlayerDialog(playerid, DIALOG_CREATION_PIN, DIALOG_STYLE_INPUT, "Creation Pin", "Please enter the creation pin given to you by an admin.", "Enter", "Cancel");
				ShowPlayerDialog(playerid, 3895, DIALOG_STYLE_INPUT, "Registration", "Please enter your password to register your new account.", "Register", "Cancel");
			}
		}
	}
	else
	{
		new ORM:ormid = Player[playerid][pORM_ID] = orm_create("playeraccounts");
		
		Player[playerid][pSQL_ID] = cache_get_field_content_int(0, "sqlid");
			
		orm_addvar_int(ormid, Player[playerid][pSQL_ID], "SQLID");
		orm_setkey(ormid, "SQLID");
		
		orm_addvar_string(ormid, Player[playerid][Password], 161, "Password");
		orm_addvar_string(ormid, Player[playerid][pSalt], 32, "pSalt");
		orm_addvar_string(ormid, Player[playerid][NormalName], 25, "NormalName");
		
		SetPVarInt(playerid, "VALID_ORM", 1);
		orm_select(ormid, "OnPlayerLoadPassword", "d", playerid);
	}
	
	return 1;
}

//temp
stock GenHpBar(playerid)
{
	new HpBar[500], Float:Health;
	GetPlayerHealth(playerid, Health);

	if(Health > 99)
		format(HpBar, sizeof(HpBar), "==========");
	else if(Health > 89)
		format(HpBar, sizeof(HpBar), "========={767270}=");
	else if(Health > 79)
		format(HpBar, sizeof(HpBar), "========{767270}==");
	else if(Health > 69)
		format(HpBar, sizeof(HpBar), "======={767270}===");
	else if(Health > 59)
		format(HpBar, sizeof(HpBar), "======{767270}====");
	else if(Health > 49)
		format(HpBar, sizeof(HpBar), "====={767270}=====");
	else if(Health > 39)
		format(HpBar, sizeof(HpBar), "===={767270}======");
	else if(Health > 29)
		format(HpBar, sizeof(HpBar), "==={767270}=======");
	else if(Health > 19)
		format(HpBar, sizeof(HpBar), "=={767270}========");
	else if(Health > 9)
		format(HpBar, sizeof(HpBar), "={767270}=========");
	else
	format(HpBar, sizeof(HpBar), "{767270}==========");

	return HpBar;
}

stock GenArmourBar(playerid)
{
	new armbar[500], Float:Armour;
	GetPlayerArmour(playerid, Armour);

	if(Armour > 99)
		format(armbar, sizeof(armbar), "==========");
	else if(Armour > 89)
		format(armbar, sizeof(armbar), "========={767270}=");
	else if(Armour > 79)
		format(armbar, sizeof(armbar), "========{767270}==");
	else if(Armour > 69)
		format(armbar, sizeof(armbar), "======={767270}===");
	else if(Armour > 59)
		format(armbar, sizeof(armbar), "======{767270}====");
	else if(Armour > 49)
		format(armbar, sizeof(armbar), "====={767270}=====");
	else if(Armour > 39)
		format(armbar, sizeof(armbar), "===={767270}======");
	else if(Armour > 29)
		format(armbar, sizeof(armbar), "==={767270}=======");
	else if(Armour > 19)
		format(armbar, sizeof(armbar), "=={767270}========");
	else if(Armour > 9)
		format(armbar, sizeof(armbar), "={767270}=========");
	else
	format(armbar, sizeof(armbar), "{767270}==========");

	return armbar;
}

stock UpdatePlayerNameColour(playerid)
{
	if(Player[playerid][AdminDuty] > 0)
		SetPlayerColor(playerid, ADMIN_COLOR);
	else if(Player[playerid][IsAtEvent] > 0 || Player[playerid][InRally] > 0 || Player[playerid][InDerby] > 0)
		SetPlayerColor(playerid, RED);
	else
		SetPlayerColor(playerid, WHITE);

	//UpdatePlayerLabel(playerid);
}

stock UpdatePlayerLabel(playerid)
{
	new strR[1024], Float:armour, Float:health;
	GetPlayerArmour(playerid, armour);
	GetPlayerHealth(playerid, health);
	if(armour == 0)
		format(strR, sizeof(strR), "%s (%d)\n{E9452E}%.0f %s", GetNameEx(playerid), playerid, health, GenHpBar(playerid));
	else
		format(strR, sizeof(strR), "%s (%d)\n{94D9F3}%.0f %s\n{E9452E}%.0f %s", GetNameEx(playerid), playerid, armour, GenArmourBar(playerid), health, GenHpBar(playerid));

	if(Player[playerid][AdminDuty] > 0)
		format(strR, sizeof(strR), "{008080}%s", strR);
	else if(Player[playerid][VipRank] > 0 && Player[playerid][ToggedVIP] == 0)
		format(strR, sizeof(strR), "{FFFF00}%s", strR);

	UpdateDynamic3DTextLabelText(Player[playerid][StatisticsTag], -1, strR);

	SetPVarFloat(playerid, "LastHealth", health);
	SetPVarFloat(playerid, "LastArmour", armour);
}

public OnPlayerDisconnect(playerid, reason)
{
	if(IsPlayerNPC(playerid))
	{
		NPCs--;
		printf("[system] NPC %s has disconnected from the server.", GetName(playerid));
	}
	else
	{
		if(Player[playerid][Authenticated] == 0)
			return 1;
		
		//DestroyDynamic3DTextLabel(Player[playerid][StatisticsTag]);

		if(GetPVarInt(playerid, "TrashType") == TRASH_BIZ)
			Businesses[GetPVarInt(playerid, "trashID")][BusinessTrashCurrentPlayer] = INVALID_PLAYER_ID;

		if(Player[playerid][AdminLevel] > 0)
		{
			DestroyInternalHotelRoomIDIcons(playerid);
			new string[128];
			switch(reason)
			{
				case 0: format(string, sizeof(string), "timeout");
				case 1: format(string, sizeof(string), "quit");
				case 2: format(string, sizeof(string), "kicked/banned");
			}
			format(string, sizeof(string), "03%s has disconnected from the SA:MP server. (%s)", Player[playerid][AdminName], string);
			CallRemoteFunction("IRC_Message", "s", string);
		}
		
		if(Jobs[Player[playerid][Job]][JobType] == JOB_CARJACKER || Jobs[Player[playerid][Job2]][JobType] == JOB_CARJACKER)
			Iter_Remove(CarJackers, playerid);
		
		if(Player[playerid][AdminDuty] > 0 || GetPVarInt(playerid, "JASON_MODE") > 0)
		{
			new string[128];
			SetPlayerNameEx(playerid, Player[playerid][NormalName]);

			switch(reason)
			{
				case 0: format(string, sizeof(string), "%s is now off Admin Duty (timeout).", Player[playerid][AdminName]);
				case 1: format(string, sizeof(string), "%s is now off Admin Duty (disconnected).", Player[playerid][AdminName]);
				case 2: format(string, sizeof(string), "%s is now off Admin Duty (kicked/banned).", Player[playerid][AdminName]);
			}

			SendToAdmins(ADMINORANGE, string, 0);
		}

		if(Player[playerid][currentVehInteriorVW] != 0)
		{
			new sql = Player[playerid][currentVehInteriorVW],
			idx = GetVIndex(sql);
			if(Veh[idx][intCap] > 0)
				Veh[idx][intCap]--;
		}

		for(new i; i < MAX_BILLBOARDS; i++)
		{
			if(IsValidDynamicMapIcon(Billboards[i][Checkpoint][playerid]))
				DestroyDynamicMapIcon(Billboards[i][Checkpoint][playerid]);
		}


		new string[128], Name[MAX_PLAYER_NAME];

		if(Player[playerid][Mask] == 1)
			format(Name, sizeof(Name), "%s", Player[playerid][NormalName]);
		else
			GetPlayerName(playerid, Name, sizeof(Name));

		DestroyPlayerObject(playerid, SlotSpinner[playerid][0]);
		DestroyPlayerObject(playerid, SlotSpinner[playerid][1]);
		DestroyPlayerObject(playerid, SlotSpinner[playerid][2]);
		DestroyPlayerObject(playerid, SlotSpinner[playerid][3]);

		if(GetPVarInt(playerid, "PNS_Using") > 0)
			PNS_InUse[GetPVarInt(playerid, "PNS_Using") - 1] = 0;

		Player[playerid][Mask] = 0;
		Player[playerid][MaskID] = 0;
		PlayersOn--;

		if(Player[playerid][GunTazer] == 1)
		{
			if(GetPVarInt(playerid, "Old_Gun") > 0)
				GivePlayerWeaponEx(playerid, GetPVarInt(playerid, "Old_Gun"));
			else
				AdjustWeapon(playerid, Player[playerid][WepSlot2], 0);
		}
		
		if(CurGMX == 0)
		{
			if(Spectator[playerid][SpecSpectatingPlayer] == -1)
			{
				switch(reason)
				{
					case 0:
					{
						format(string, sizeof(string), "%s has timed out from the server.", Name);
					}

					case 1:
					{
						format(string, sizeof(string), "%s has left the server.", Name);

						if (playerid == LastFarm){
							SendToAdmins(ADMINORANGE, "WARNING: User from the last warning logged. Take action.", 0);
							LastFarm = -10;
						}

					}

					case 2:
					{
						format(string, sizeof(string), "%s has been either kicked or banned from the server.", Name);
						if (playerid == LastFarm){
							SendToAdmins(ADMINORANGE, "NOTICE: User from the last warning was kicked or banned.", 0);
						}
					}
				}

				NearByMessage(playerid, ANNOUNCEMENT, string);
			}

			if(Player[playerid][Group] >= 1)
			{
				switch(reason)
				{
					case 0:
					{
						format(string, sizeof(string), "%s from your faction has disconnected (timeout).", Name);
						GroupMessage(playerid, ANNOUNCEMENT, string);
					}
					case 1:
					{
						format(string, sizeof(string), "%s from your faction has disconnected (quit).", Name);
						GroupMessage(playerid, ANNOUNCEMENT, string);
					}
					case 2:
					{
						format(string, sizeof(string), "%s from your faction has disconnected (banned/kicked).", Name);
						GroupMessage(playerid, ANNOUNCEMENT, string);
					}
				}
			}

			if(Player[playerid][Gang] >= 1)
			{
				switch(reason)
				{
					case 0:
					{
						format(string, sizeof(string), "%s from your gang has disconnected (timeout).", Name);
						SendToGang(Player[playerid][Gang], ANNOUNCEMENT, string);
					}
					case 1:
					{
						format(string, sizeof(string), "%s from your gang has disconnected (quit).", Name);
						SendToGang(Player[playerid][Gang], ANNOUNCEMENT, string);
					}
					case 2:
					{
						format(string, sizeof(string), "%s from your gang has disconnected (banned/kicked).", Name);
						SendToGang(Player[playerid][Gang], ANNOUNCEMENT, string);
					}
				}
			}
			if(Player[playerid][InDerby] > 0)
			{
				Player[playerid][Muted] = 0;
				SavePlayerData(playerid);

				RemoveEventVehicle(GetPVarInt(playerid, "derbyCar"));
				DeletePVar(playerid, "derbyCar");

				switch(reason)
				{
					case 0:
					{
						format(string, sizeof(string), "%s is out of the derby! (timeout)", Name);
						DerbyMessage(YELLOW, string);
					}
					case 1:
					{
						format(string, sizeof(string), "%s is out of the derby! (quit)", Name);
						DerbyMessage(YELLOW, string);
					}
					case 2:
					{
						format(string, sizeof(string), "%s is out of the derby! (banned/kicked)", Name);
						DerbyMessage(YELLOW, string);
					}
				}
			}
			if(Player[playerid][InRally] > 0)
			{
				Player[playerid][Muted] = 0;
				SavePlayerData(playerid);

				switch(reason)
				{
					case 0:
					{
						format(string, sizeof(string), "%s is out of the rally! (timeout)", Name);
						RallyMessage(YELLOW, string);
					}
					case 1:
					{
						format(string, sizeof(string), "%s is out of the rally! (quit)", Name);
						RallyMessage(YELLOW, string);
					}
					case 2:
					{
						format(string, sizeof(string), "%s is out of the rally! (banned/kicked)", Name);
						RallyMessage(YELLOW, string);
					}
				}
			}
			if(Player[playerid][IsAtEvent] == 1)
			{
				ResetPlayerWeapons(playerid);
				Iter_Remove(EventPlayers, playerid);
				Player[playerid][IsAtEvent] = 0;
				Player[playerid][Muted] = 0;
				SetPlayerTeam(playerid, NO_TEAM);
				SetPlayerHealth(playerid, Player[playerid][LastHealth]);
				SetPlayerArmour(playerid, Player[playerid][LastArmour]);
				SetPlayerSkin(playerid, Player[playerid][LastSkin]);

				switch(reason)
				{
					case 0:
					{
						format(string, sizeof(string), "%s is no longer in the event, reason: Disconnected (timeout).", Name);
						MessageToEventPlayers(YELLOW, string);
					}
					case 1:
					{
						format(string, sizeof(string), "%s is no longer in the event, reason: Disconnected (quit).", Name);
						MessageToEventPlayers(YELLOW, string);
					}
					case 2:
					{
						format(string, sizeof(string), "%s is no longer in the event, reason: Disconnected (banned/kicked).", Name);
						MessageToEventPlayers(YELLOW, string);
					}
				}
			}
			if(Player[playerid][Authenticated] == 1)
			{

				if(Player[playerid][Cuffed] >= 1 || Player[playerid][Tied] >= 1 && Player[playerid][AFKKicked] == 0)// || GetPVarInt(playerid, "BleedingOutTime") > 0)
				{
					Player[playerid][PrisonDuration] = 1500;
					Player[playerid][PrisonID] = 1;
					format(Player[playerid][Note], 128, "You have automatically been prisoned for disconnecting whilst cuffed / tied.");
				}

				if(Player[playerid][PrisonID] == 2)
				{
					new cell = GetPVarInt(playerid, "Cell_Number");
					CellChanged(cell);
					
					if(Player[playerid][SolitaryDuration] > 0)
					{
						Solitary[GetPVarInt(playerid, "Solitary_Number")][Occupied] = 0;
					}
				}
				
				foreach(Player, i)
				{

					if(Player[i][PendingContract] == playerid)
					{
						Player[i][PendingContract] = -1;
						Player[i][PendingPrice] = 0;
						format(Player[i][PendingReason], 255, "Nothing");
					}

					/*if(Player[i][EMSAccepted] == playerid && GetPVarInt(playerid, "BleedingOutTime") > 0)
					{
						SendClientMessage(i, YELLOW, "The patient that had called you has disconnected.");
						Player[i][EMSAccepted] = -1;
						if(Player[i][Checkpoint] == 6969)
						{
							Player[i][Checkpoint] = 0;
							DisablePlayerCheckpoint(i);
						}
					}*/
				}


				if(Player[playerid][BeingSpyedOnBy] != -1)
				{
					format(string, sizeof(string), "The player you were spying on (%s) has disconnected", Name);
					SendClientMessage(Player[playerid][BeingSpyedOnBy], WHITE, string);
					Player[playerid][BeingSpyedOnBy] = -1;
				}

				if(Player[playerid][PendingProposal] != -1)
				{
					format(string, sizeof(string), "%s has disconnected (the person you have a pending proposal with).", Name);
					SendClientMessage(Player[playerid][PendingProposal], WHITE, string);
					Player[playerid][PendingProposal] = -1;
				}

				foreach(Player, i)
				{
					if(Player[i][PendingProposal] == playerid)
					{
						format(string, sizeof(string), "%s has disconnected (the person you have a pending proposal with).", Name);
						SendClientMessage(i, WHITE, string);
						Player[i][PendingProposal] = -1;
						break;
					}
				}

				if(Player[playerid][IsAtEvent] >= 1)
				{
					Player[playerid][LastX] = SpawnX;
					Player[playerid][LastY] = SpawnY;
					Player[playerid][LastZ] = SpawnZ;
					Player[playerid][LastWorld] = 0;
					Player[playerid][LastInterior] = 0;
					SavePlayerData(playerid);
					//printf("[system] %s has disconnected during an event, so they've been warped to the newbie spawn.", Name);
				}
				else
				{
					if(Player[playerid][InHouse] > 0 && GetPVarInt(playerid, "VIEWING_HOUSE") == Player[playerid][InHouse])
					{
						new houseid = Player[playerid][InHouse];
						Player[playerid][LastX] = Houses[houseid][hExteriorX];
						Player[playerid][LastY] = Houses[houseid][hExteriorY];
						Player[playerid][LastZ] = Houses[houseid][hExteriorZ];
						Player[playerid][LastWorld] = Houses[houseid][hExteriorVW];
						Player[playerid][LastInterior] = Houses[houseid][hExteriorID];
						
						stop Player[playerid][ViewingHouseTimer];
					}
					else 
					{
						GetPlayerPos(playerid, Player[playerid][LastX], Player[playerid][LastY], Player[playerid][LastZ]);
						Player[playerid][LastWorld] = GetPlayerVirtualWorld(playerid);
						Player[playerid][LastInterior] = GetPlayerInterior(playerid);
						SavePlayerData(playerid);
					}
				}

				foreach(Player, i)
				{
					for(new j; j < 5; j++)
					{
						if(playerid == Player[i][SpareKeys][j])
						{
							Player[i][SpareKeys][j] = -1;
							break;
						}
					}
				}

				for(new i; i < 5; i++)
				{
					if(Player[playerid][SpareKeys][i] != -1)
					{
						if(Player[Player[playerid][SpareKeys][i]][TempKey] == Player[playerid][Cars][i])
							Player[Player[playerid][SpareKeys][i]][TempKey] = 0;
					}
				}
				
				if(IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0 && Player[playerid][AutoParkCar] == 1 && !IsPlayerInParkcarBanZone(playerid))
				{
					new veh = GetPlayerVehicleID(playerid), sql = GetVSQLID(veh), idx = GetVIndex(sql);
					if(IsVehicleOwner(playerid, sql))
					{
						GetVehiclePos(veh, Veh[idx][vX] , Veh[idx][vY] , Veh[idx][vZ]);
						GetVehicleZAngle(veh, Veh[idx][vAngle]);
						Veh[idx][vInt] = GetPlayerInterior(playerid);
						Veh[idx][vVWorld] = GetPlayerVirtualWorld(playerid);
						SaveVehicle(sql);	
					}
				}
				
				UnloadPlayerVehicles(playerid);
			}
			if(GetPVarInt(playerid, "VehicleAlarmTime") <= gettime())
			{
				new engine, lights, alarm, doors, boot, bonnet, objective;
				GetVehicleParamsEx(GetPVarInt(playerid, "VehicleAlarm"), engine, lights, alarm, doors, boot, bonnet, objective);
				SetVehicleParamsEx(GetPVarInt(playerid, "VehicleAlarm"), engine, lights, 0, doors, boot, bonnet, objective);
			}

			if(Player[playerid][CellphoneConsole] > -1 && Player[playerid][CellphoneConsole] != 911)
			{
				new id = Player[playerid][CellphoneConsole];
				if(IsPlayerConnected(id))
				{
					SendClientMessage(id, -1, "The call has been dropped. (( Other party has disconnected ))");
					cmd_hangup(id, "blankmsg");
				}
			}

			if(PizzaOrder[Player[playerid][House]])
			{
				PizzaOrder[Player[playerid][House]] = 0;
				foreach(Player, i)
				{
					if(i == PizzaOrderTaken[Player[playerid][House]] - 1)
					{
						PizzaOrderTaken[Player[playerid][House]] = 0;
						SendClientMessage(i, YELLOW, "The pizza delivery you are on has been cancelled! Head back and get a new delivery!");
						new job = (Jobs[Player[i][Job]][JobType] == JOB_PIZZABOY) ? (Player[i][Job]) : (Player[i][Job2]);
						new zone[MAX_ZONE_NAME];
						Player[i][PizzaCooldown] = 0;
						Player[playerid][Checkpoint] = 1;
						SetPVarInt(i, "HouseDeliveryFailed", 1);
						Get2DPosZone(Jobs[job][JobMiscLocationOneX], Jobs[job][JobMiscLocationOneY], zone, MAX_ZONE_NAME);
						SetPlayerCheckpoint(i, Jobs[job][JobMiscLocationOneX], Jobs[job][JobMiscLocationOneY], Jobs[job][JobMiscLocationOneZ], 5);
					}
				}
			}

			if(PizzaOrder[Player[playerid][House2]])
			{
				PizzaOrder[Player[playerid][House2]] = 0;
				foreach(Player, i)
				{
					if(i == PizzaOrderTaken[Player[playerid][House2]] - 1)
					{
						PizzaOrderTaken[Player[playerid][House2]] = 0;
						SendClientMessage(i, YELLOW, "The pizza delivery you are on has been cancelled! Head back and get a new delivery!");
						new job = (Jobs[Player[i][Job]][JobType] == JOB_PIZZABOY) ? (Player[i][Job]) : (Player[i][Job2]);
						new zone[MAX_ZONE_NAME];
						Player[i][PizzaCooldown] = 0;
						Player[playerid][Checkpoint] = 1;
						SetPVarInt(i, "HouseDeliveryFailed", 1);
						Get2DPosZone(Jobs[job][JobMiscLocationOneX], Jobs[job][JobMiscLocationOneY], zone, MAX_ZONE_NAME);
						SetPlayerCheckpoint(i, Jobs[job][JobMiscLocationOneX], Jobs[job][JobMiscLocationOneY], Jobs[job][JobMiscLocationOneZ], 5);
					}
				}
			}

			for(new i; i < MAX_HOUSES; i++)
			{
				if(playerid == PizzaOrderTaken[i] - 1)
					PizzaOrderTaken[i] = 0;
			}
		}

		foreach(Player, i)
		{
			if(Spectator[i][SpecSpectatingPlayer] == playerid)
				cmd_specoff(i, "");
		}

		orm_destroy(Player[playerid][pORM_ID]);
	}
	return 1;
}

public RallyMessage(colour, string[])
{
	foreach(Player, i)
	{
	    if(Player[i][InRally] == 0)
	        continue;
		SendClientMessage(i, YELLOW, string);
	}
	return 1;
}

public MessageToEventPlayers(colour, string[])
{
	foreach(new i : EventPlayers)
	{
		if(Player[i][IsAtEvent] >= 1 && IsPlayerConnected(i))
		{
			SendClientMessage(i, colour, string);
		}
	}
	return 1;
}

public OnPlayerSpawn(playerid)
{
	UpdatePlayerNameColour(playerid);

	if(Player[playerid][PreLoadedAnims] == 0)
	{
		for(new i; i < sizeof(animation_library); i++)
		{
			PreloadAnimLib(playerid, animation_library[i]);
		}
		Player[playerid][PreLoadedAnims] = 1;
	}

	SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 1);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 999);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 999);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, (Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 2) ? (999) : (998));
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, (Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 2) ? (999) : (998));
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, (Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 2) ? (999) : (998));
	SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, (Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 2) ? (999) : (998));
	SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, (Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 2) ? (999) : (998));
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, (Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 2) ? (999) : (998));

	AttachWeaponToPlayer(playerid, Player[playerid][WepSlot0]);
	AttachWeaponToPlayer(playerid, Player[playerid][WepSlot1]);
	AttachWeaponToPlayer(playerid, Player[playerid][WepSlot2]);
	AttachWeaponToPlayer(playerid, Player[playerid][WepSlot3]);
	AttachWeaponToPlayer(playerid, Player[playerid][WepSlot4]);
	AttachWeaponToPlayer(playerid, Player[playerid][WepSlot5]);
	AttachWeaponToPlayer(playerid, Player[playerid][WepSlot6]);
	AttachWeaponToPlayer(playerid, Player[playerid][WepSlot7]);
	AttachWeaponToPlayer(playerid, Player[playerid][WepSlot8]);
	AttachWeaponToPlayer(playerid, Player[playerid][WepSlot9]);
	AttachWeaponToPlayer(playerid, Player[playerid][WepSlot10]);
	AttachWeaponToPlayer(playerid, Player[playerid][WepSlot11]);
	GivePlayerSavedWeapons(playerid);
	SetPlayerArmedWeapon(playerid, 0);

	if(Player[playerid][IsAtEvent] == 0)
		FreezePlayer(playerid, 1500);

	if(Player[playerid][Authenticated] == 1)
	{
		SetCameraBehindPlayer(playerid);
		if(Player[playerid][PrisonID] == 2 && Player[playerid][Hospitalized] != 1)
		{
			if(Player[playerid][SolitaryDuration] > 0)
			{
				FindSolitaryForPlayer(playerid);
			}
		}
		if(Player[playerid][PrisonDuration] >= 1)
		{
			Player[playerid][InGroupHQ] = 0;
			Player[playerid][InBusiness] = 0;
			Player[playerid][InHouse] = 0;

			if(Player[playerid][PrisonID] == 1)
			{
				SetPlayerInterior(playerid, Prison1Int);
				SetPlayerPos_Update(playerid, Prison1X, Prison1Y, Prison1Z);
				SetPlayerVirtualWorld(playerid, playerid);
			}
		}

		if(Player[playerid][PotTimer] > gettime())
		{
			SetPlayerDrunkLevel(playerid, 10000);
			SetPlayerWeather(playerid, 32);
		}
		else if(Player[playerid][CocaineTimer] > gettime())
		{
			SetPlayerDrunkLevel(playerid, 40000);
			SetPlayerWeather(playerid, 9);
		}
		else
			SetPlayerWeather(playerid, GlobalWeather);

		if(Player[playerid][AdminDuty] == 1)
			SetPlayerHealth(playerid, 500000);

		if(Player[playerid][InRally] > 0)
		{
			ResetPlayerWeapons(playerid);
			TogglePlayerControllable(playerid, true);
			new MathsFlaw = floatround(Player[playerid][LastHealth], floatround_ceil);
			SetPlayerHealth(playerid, MathsFlaw);
			MathsFlaw = floatround(Player[playerid][LastArmour], floatround_ceil);
			SetPlayerArmour(playerid, MathsFlaw);
			SendPlayerToSavedPos(playerid);
			GivePlayerSavedWeapons(playerid);

			new str[128];
			format(str, sizeof(str), "%s is out of the rally! (death)", GetName(playerid));
			RallyMessage(YELLOW, str);

			Player[playerid][Hospitalized] = 0;
			Player[playerid][InRally] = 0;
			Player[playerid][RallyCP] = 0;
			Player[playerid][Checkpoint] = 0;
			Player[playerid][Muted] = 0;
			DisablePlayerRaceCheckpoint(playerid);
			UpdatePlayerNameColour(playerid);
			TextDrawHideForPlayer(playerid, RallyLB);
		}

		if(Player[playerid][InDerby] > 0)
		{
			Player[playerid][Hospitalized] = 0;
			TogglePlayerControllable(playerid, true);
			new MathsFlaw = floatround(Player[playerid][LastHealth], floatround_ceil);
			SetPlayerHealth(playerid, MathsFlaw);
			MathsFlaw = floatround(Player[playerid][LastArmour], floatround_ceil);
			SetPlayerArmour(playerid, MathsFlaw);
			SendPlayerToSavedPos(playerid);
			GivePlayerSavedWeapons(playerid);
			new str[128];
			format(str, sizeof(str), "%s is out of the derby! (death)", GetName(playerid));
			DerbyMessage(YELLOW, str);
			Player[playerid][Muted] = 0;
			Player[playerid][InDerby] = 0;
			UpdatePlayerNameColour(playerid);
		}


		if(Player[playerid][IsAtEvent] >= 1)
		{
			new string[128];

			switch(eventType)
			{
				case 1:
				{
					ResetPlayerWeapons(playerid);
					GivePlayerSavedWeapons(playerid);
					SendPlayerToSavedPos(playerid);
					new MathsFlaw = floatround(Player[playerid][LastHealth], floatround_ceil);
					SetPlayerHealth(playerid, MathsFlaw);
					MathsFlaw = floatround(Player[playerid][LastArmour], floatround_ceil);
					SetPlayerArmour(playerid, MathsFlaw);
					SendClientMessage(playerid, WHITE, "Thanks for playing in one of our events. You have been fully refunded.");
					Player[playerid][Hospitalized] = 0;
					Player[playerid][IsAtEvent] = 0;
					Player[playerid][eventTeam] = 0;
					Player[playerid][Muted] = 0;
					SetPlayerTeam(playerid, NO_TEAM);
					UpdatePlayerNameColour(playerid);

					if(Player[playerid][LastKiller] == INVALID_PLAYER_ID)
					{
						format(string, sizeof(string), "%s is no longer in the event, reason: Death.", GetName(playerid));
						MessageToEventPlayers(YELLOW, string);
					}
					else
					{
						format(string, sizeof(string), "%s is no longer in the event, reason: Death (killed by %s).", GetName(playerid), GetName(Player[playerid][LastKiller]));
						MessageToEventPlayers(YELLOW, string);
					}
				}
				case 2:
				{
					if(TeamKills[0] != KillsToWin && TeamKills[1] != KillsToWin)
					{
						if(maxDeaths > 0 && Player[playerid][eventDeaths] == maxDeaths)
						{
							Player[playerid][Hospitalized] = 0;
							TextDrawHideForPlayer(playerid, EventTextDraw);
							new MathsFlaw = floatround(Player[playerid][LastHealth], floatround_ceil);
							SetPlayerHealth(playerid, MathsFlaw);
							MathsFlaw = floatround(Player[playerid][LastArmour], floatround_ceil);
							SetPlayerArmour(playerid, MathsFlaw);
							Player[playerid][Hospitalized] = 0;
							Player[playerid][IsAtEvent] = 0;
							TogglePlayerControllable(playerid, true);
							Player[playerid][ResetTimer] = 1;
							ResetPlayerWeapons(playerid);
							GivePlayerSavedWeapons(playerid);
							SendPlayerToSavedPos(playerid);
							UpdatePlayerNameColour(playerid);
							SetPlayerTeam(playerid, NO_TEAM);
							return SendClientMessage(playerid, WHITE, "Thanks for playing fair!");
						}

						if(maxDeaths > 0 && Player[playerid][eventDeaths] != maxDeaths)
						{
							format(string, sizeof(string), "You have %d deaths left!", maxDeaths - Player[playerid][eventDeaths]);
							GameTextForPlayer(playerid, string, 3000, 4);
						}

						Player[playerid][Hospitalized] = 0;
						ResetPlayerWeapons(playerid);
						GivePlayerWeapon(playerid, EventWeapon1, 999999);
						GivePlayerWeapon(playerid, EventWeapon2, 999999);
						GivePlayerWeapon(playerid, EventWeapon3, 999999);
						GivePlayerWeapon(playerid, EventWeapon4, 999999);
						GivePlayerWeapon(playerid, EventWeapon5, 999999);

						SetPlayerHealth(playerid, EventHP);
						SetPlayerArmour(playerid, EventArmour);

						SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 999);
						SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 999);
						SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 999);
						SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 999);
						SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 999);
						SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 999);

						switch(Player[playerid][eventTeam])
						{
							case 1:
							{
								SetPlayerSkin(playerid, EventSkin);
								SetPlayerInterior(playerid, EventInt);
								SetPlayerVirtualWorld(playerid, EventWorld);
								SetPlayerPos_Update(playerid, EventX, EventY, EventZ);

								if(Player[playerid][AdminDuty] < 1)
									SetPlayerColor(playerid, RED);
							}
							case 2:
							{
								SetPlayerSkin(playerid, EventSkin2);
								SetPlayerInterior(playerid, EventInt);
								SetPlayerVirtualWorld(playerid, EventWorld);
								SetPlayerPos_Update(playerid, EventPos2[0], EventPos2[1], EventPos2[2]);

								if(Player[playerid][AdminDuty] < 1)
									SetPlayerColor(playerid, LIGHTGREEN);
							}
						}
					}
					else
					{
						CurrentEvent = 0;
						TextDrawHideForPlayer(playerid, EventTextDraw);
						new MathsFlaw = floatround(Player[playerid][LastHealth], floatround_ceil);
						SetPlayerHealth(playerid, MathsFlaw);
						MathsFlaw = floatround(Player[playerid][LastArmour], floatround_ceil);
						SetPlayerArmour(playerid, MathsFlaw);
						Player[playerid][Hospitalized] = 0;
						Player[playerid][IsAtEvent] = 0;
						TogglePlayerControllable(playerid, true);
						Player[playerid][ResetTimer] = 1;
						ResetPlayerWeapons(playerid);
						GivePlayerSavedWeapons(playerid);
						SendPlayerToSavedPos(playerid);
						UpdatePlayerNameColour(playerid);
						SetPlayerTeam(playerid, NO_TEAM);
						SendClientMessage(playerid, WHITE, "Thanks for playing fair!");
						
						stop UpdateEventTimer;
					}
				}
			}
		}

		if(Player[playerid][Hospitalized] >= 1)
		{
			Player[playerid][LastWorld] = 0;
			Player[playerid][LastInterior] = 0;
			ResetPlayerWeaponsEx(playerid);
			SetPlayerHealth(playerid, 100);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerDrunkLevel(playerid, 50000);
			Player[playerid][HospitalTime] = 1;
			SetPlayerColor(playerid, GREY);
			SetPlayerVirtualWorld(playerid, playerid+59);
			TogglePlayerControllable(playerid, false);
			SetPlayerPos_Update(playerid, GetPVarFloat(playerid, "DeathPosX"), GetPVarFloat(playerid, "DeathPosY"), -100);
			SetPlayerCameraPos(playerid, -833.5241, -1358.8575, 86.9054);
			SetPlayerCameraLookAt(playerid, -830.8118, -1360.3612, 87.0289);
			SendClientMessage(playerid, ANNOUNCEMENT, "You have blacked out. You're currently undergoing hospital treatment.");
			SendClientMessage(playerid, WHITE, "You will be released when you have recovered.");

			if(DisplayingHunger[playerid])
				HidePlayerProgressBar(playerid, Hunger[playerid]);
		}
		else if(Player[playerid][Hospitalized] == -1)
		{
			SetCameraBehindPlayer(playerid);
			SetPlayerInterior(playerid, Spectator[playerid][SpecPlayerInterior]);
			SetPlayerFacingAngle(playerid, Spectator[playerid][SpecPlayerAngle]);
			SetPlayerVirtualWorld(playerid, Spectator[playerid][SpecPlayerWorld]);
			SetPlayerPos_Update(playerid, Spectator[playerid][SpecPlayerX], Spectator[playerid][SpecPlayerY], Spectator[playerid][SpecPlayerZ]);
			TogglePlayerControllable(playerid, true);
			Player[playerid][Hospitalized] = 0;
			if(Player[playerid][LastKiller] != -1)
				Player[Player[playerid][LastKiller]][IsHacker] = 0;
		}
		else if(!IsPlayerInEvent(playerid))
		{
			TogglePlayerControllable(playerid, true);
			SetPlayerInterior(playerid, Player[playerid][LastInterior]);
			SetPlayerVirtualWorld(playerid, Player[playerid][LastWorld]);

			if(GetPlayerVirtualWorld(playerid) >= 45000 && GetPlayerVirtualWorld(playerid) < 55000 || GetPlayerVirtualWorld(playerid) >= 55000 && GetPlayerVirtualWorld(playerid) < 65000 || GetPlayerVirtualWorld(playerid) >= 65000 && GetPlayerVirtualWorld(playerid) < 75000)
			{
				if(Player[playerid][AdminLevel] == 0)
					PlayerTextDrawShow(playerid, ExitTextdraw[playerid]);
			}
		}
	}


	if(Player[playerid][IsAtEvent] == 0)
		Player[playerid][ResetTimer] = 1;

	if(Player[playerid][FirstSpawn] == 1)
	{
		Player[playerid][FirstSpawn] = 0;
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, false);
		defer SobeitCheck(playerid);
	}
	return 1;
}

timer SobeitCheck[1000](i)
{
	new Float:camPos[3];
	GetPlayerCameraFrontVector(i, camPos[0], camPos[1], camPos[2]);
	if(camPos[2] < -0.8)
	{
		new string[128], IP[21];
		TogglePlayerControllable(i, true);
		GetPlayerIp(i, IP, sizeof(IP));

		format(string, sizeof(string), "%s | %s | Sobeit.", IP, GetName(i));
		BanLog(string);
		format(string, sizeof(string), "Ban: %s has been auto-banned. Defined reason: \"Sobeit\".", GetName(i));
		SendToAdmins(LIGHTRED, string, 0);
		print(string);

		Player[i][Banned] = 1;
		format(Player[i][BannedReason], 128, "Autoban: Sobeit");
		format(Player[i][BannedBy], 128, "System");
		SavePlayerData(i);
		format(string, sizeof(string), "banip %s", IP);
		SendRconCommand(string);
		new query[255];
		mysql_format(MYSQL_MAIN, query, sizeof(query), "INSERT INTO ipbans (IP, Timestamp, Reason) VALUES ('%e', '%e', '%e')", IP, GetDate(), Player[i][BannedReason]);
		new Cache:cache = mysql_query(MYSQL_MAIN, query, false);
		cache_delete(cache);
	}
	else
	{
		TogglePlayerControllable(i, true);
	}
	return 1;
}

public GivePlayerSavedWeapons(playerid)
{
	if(Player[playerid][WepSlot3] == 26)
	{
		Player[playerid][WepSlot6] = 0;
		ResetPlayerWeapons(playerid);
	}

	GivePlayerWeapon(playerid, Player[playerid][WepSlot0], 99999);
	GivePlayerWeapon(playerid, Player[playerid][WepSlot1], 99999);
	GivePlayerWeapon(playerid, Player[playerid][WepSlot2], 99999);
	GivePlayerWeapon(playerid, Player[playerid][WepSlot3], 99999);
	GivePlayerWeapon(playerid, Player[playerid][WepSlot4], 99999);
	GivePlayerWeapon(playerid, Player[playerid][WepSlot5], 99999);
	GivePlayerWeapon(playerid, Player[playerid][WepSlot6], 99999);
	GivePlayerWeapon(playerid, Player[playerid][WepSlot7], 99999);
	GivePlayerWeapon(playerid, Player[playerid][WepSlot8], 99999);
	GivePlayerWeapon(playerid, Player[playerid][WepSlot9], 99999);
	GivePlayerWeapon(playerid, Player[playerid][WepSlot10], 99999);
	GivePlayerWeapon(playerid, Player[playerid][WepSlot11], 99999);
	return 1;
}

public ResetPlayerWeaponsEx(playerid)
{
	SetPVarInt(playerid, "WEAPON_HACK_WARNING_COOLDOWN", gettime() + 3);
	ResetPlayerWeapons(playerid);
	Player[playerid][WepSlot0] = 0;
	Player[playerid][WepSlot1] = 0;
	Player[playerid][WepSlot2] = 0;
	Player[playerid][WepSlot3] = 0;
	Player[playerid][WepSlot4] = 0;
	Player[playerid][WepSlot5] = 0;
	Player[playerid][WepSlot6] = 0;
	Player[playerid][WepSlot7] = 0;
	Player[playerid][WepSlot8] = 0;
	Player[playerid][WepSlot9] = 0;
	Player[playerid][WepSlot10] = 0;
	Player[playerid][WepSlot11] = 0;

	for(new i; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
	{
		if(Player[playerid][HolsteredWeapon][i] > 0)
		{
			RemovePlayerAttachedObject(playerid, i);
			Player[playerid][HolsteredWeapon][i] = 0;
		}
	}

	return 1;
}

stock split(const strsrc[], strdest[][], delimiter)
{
	new i, li, len, aNum;
	while(i <= strlen(strsrc))
	{
		if(strsrc[i] == delimiter || i == strlen(strsrc))
		{
			len = strmid(strdest[aNum], strsrc, li, i, 128);
			strdest[aNum][len] = 0;
			li = i+1;
			aNum++;
		}
		i++;
	}
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(Player[playerid][IsAtEvent] == 0)
	{

		new str[256];
		if(killerid != INVALID_PLAYER_ID)
		{
			if(reason == 50)
			{
				 format(str, sizeof(str), "[KILL] %s has been heli-killed by %s.", GetName(playerid), GetName(killerid));
				 DeathLog(str);
			}
			else
			{
				new weapon[128],Float:Distance;
				Distance = GetDistanceBetweenPlayers(killerid, playerid);
				GetWeaponName(reason, weapon, sizeof(weapon));
				if(Player[killerid][Mask] == 1)
				{
					format(str, sizeof(str), "You have been killed by a masked player. ID: %d", Player[killerid][MaskID]);
					SendClientMessage(playerid, RED, str);
					format(str, sizeof(str), "[KILL] %s has been killed by %s, with a %s. (%f meters away). Killer name: %s (was masked: %d)", GetName(playerid), GetName(killerid), weapon, Distance, Player[killerid][NormalName], Player[killerid][MaskID]);
				}
				else
					format(str, sizeof(str), "[KILL] %s has been killed by %s, with a %s. (%f meters away)", GetName(playerid), GetName(killerid), weapon, Distance);
				DeathLog(str);
			}
		}
		else
		{ 
			switch(reason)
			{
				case 53:
				{
					format(str, sizeof(str), "[DEATH] %s has drowned.", GetName(playerid));
					DeathLog(str);
				}
				case 51:
				{
					format(str, sizeof(str), "[DEATH] %s died due to an explosion.", GetName(playerid));
					DeathLog(str);
				}
				case 54:
				{
					format(str, sizeof(str), "[SUICIDE] %s has commited a suicide.", GetName(playerid));
					DeathLog(str);
				}
			}
			  
		}
	}
	
	if(killerid != INVALID_PLAYER_ID)
		Player[playerid][LastKiller] = killerid;
	else
	{
		Player[playerid][LastKiller] = playerid;
		killerid = playerid;
	}

	Player[playerid][LastDeathReason] = reason;

	//Fake kill anti-cheat
	if(GetPVarInt(playerid, "LastKilled") != 0)
	{
		new lastKilled = GetPVarInt(playerid, "LastKilled"), string[128];

		if(gettime() - lastKilled <= 1)
		{
			format(string, sizeof(string), "WARNING: %s may be possibly fake kill hacking. (Type 1)", GetName(playerid));
			SendToAdmins(ADMINORANGE, string, 1);
			WarningLog(string);
			SetPVarInt(playerid, "FakeKillCount1", GetPVarInt(playerid, "FakeKillCount1") + 1);
			SetPVarInt(playerid, "LastKilled", gettime());
		}
		else
		{
			DeletePVar(playerid, "FakeKillCount1");
			DeletePVar(playerid, "LastKilled");
		}

		if(GetPVarInt(playerid, "FakeKillCount1") > 2)
		{
			new IP[21];
			GetPlayerIp(playerid, IP, sizeof(IP));
			format(string, sizeof(string), "%s | %s | Fake kill hacking (1).", IP, GetName(playerid));
			BanLog(string);
			format(string, sizeof(string), "Ban: %s has been auto-banned. Defined reason: \"Fake kill hacking (1)\".", GetName(playerid));
			SendClientMessageToAll(LIGHTRED, string);
			print(string);
			Player[playerid][Banned] = 1;
			format(Player[playerid][BannedReason], 128, "Autoban: Fake kill hacking (1)");
			format(Player[playerid][BannedBy], 128, "System");
			SavePlayerData(playerid);
			Kick(playerid);
			format(string, sizeof(string), "banip %s", IP);
			SendRconCommand(string);
			new query[255];
			mysql_format(MYSQL_MAIN, query, sizeof(query), "INSERT INTO ipbans (IP, Timestamp, Reason) VALUES ('%e', '%e', '%e')", IP, GetDate(), Player[playerid][BannedReason]);
			new Cache:cache = mysql_query(MYSQL_MAIN, query);
			cache_delete(cache);
			return 1;
		}
	}
	//Killer is fake killing many players quickly
	if(GetPVarInt(killerid, "LastKilled") != 0)
	{
		new lastKilled = GetPVarInt(killerid, "LastKilled"), string[128];

		if(GetTickCount() - lastKilled <= 1000)
		{
			format(string, sizeof(string), "WARNING: %s may be possibly fake kill hacking. (Type 3)", GetName(killerid));
			SendToAdmins(ADMINORANGE, string, 1);
			WarningLog(string);
			SetPVarInt(killerid, "FakeKillCount3", GetPVarInt(killerid, "FakeKillCount3") + 1);
			SetPVarInt(killerid, "LastKilled", GetTickCount());
		}
		else
		{
			DeletePVar(killerid, "FakeKillCount3");
			DeletePVar(killerid, "LastKilled");
		}

		if(GetPVarInt(killerid, "FakeKillCount3") > 2)
		{
			new IP[21];
			GetPlayerIp(killerid, IP, sizeof(IP));
			format(string, sizeof(string), "%s | %s | Fake kill hacking (3).", IP, GetName(killerid));
			BanLog(string);
			format(string, sizeof(string), "Ban: %s has been auto-banned. Defined reason: \"Fake kill hacking (3)\".", GetName(killerid));
			SendClientMessageToAll(LIGHTRED, string);
			print(string);
			Player[killerid][Banned] = 1;
			format(Player[killerid][BannedReason], 128, "Autoban: Fake kill hacking (3)");
			format(Player[killerid][BannedBy], 128, "System");
			SavePlayerData(killerid);
			Kick(killerid);
			format(string, sizeof(string), "banip %s", IP);
			SendRconCommand(string);
			new query[255];
			mysql_format(MYSQL_MAIN, query, sizeof(query), "INSERT INTO ipbans (IP, Timestamp, Reason) VALUES ('%e', '%e', '%e')", IP, GetDate(), Player[killerid][BannedReason]);
			new Cache:cache = mysql_query(MYSQL_MAIN, query);
			cache_delete(cache);
			return 1;
		}
	}
	//Dying player is causing fake deaths
	//Don't believe people actually do this anymore 
	/*if(GetPlayerWeapon(killerid) != reason && killerid != playerid && reason < 47)
	{
		new string[128];
		format(string, sizeof(string), "WARNING: %s may be possibly fake kill hacking. (Type 2)", GetName(playerid));
		SendToAdmins(ADMINORANGE, string, 1);
		WarningLog(string);
		SetPVarInt(playerid, "FakeKillCount2", GetPVarInt(playerid, "FakeKillCount2") + 1);

		if(GetPVarInt(playerid, "FakeKillCount2") > 2)
		{
			new IP[21];
			GetPlayerIp(playerid, IP, sizeof(IP));
			format(string, sizeof(string), "%s | %s | Fake kill hacking (2).", IP, GetName(playerid));
			BanLog(string);
			format(string, sizeof(string), "Ban: %s has been auto-banned. Defined reason: \"Fake kill hacking (2)\".", GetName(playerid));
			SendClientMessageToAll(LIGHTRED, string);
			print(string);
			Player[playerid][Banned] = 1;
			format(Player[playerid][BannedReason], 128, "Autoban: Fake kill hacking (2)");
			format(Player[playerid][BannedBy], 128, "System");
			SavePlayerData(playerid);
			Kick(playerid);
			format(string, sizeof(string), "banip %s", IP);
			SendRconCommand(string);
			return 1;
		}
	}*/

	if(Player[playerid][InRally] == 0 && Player[playerid][IsAtEvent] == 0 && Player[playerid][InDerby] == 0)
	{
		new Float:lastX, Float:lastY, Float:lastZ, lastInt = GetPlayerInterior(playerid), lastVW = GetPlayerVirtualWorld(playerid);
		GetPlayerPos(playerid, lastX, lastY, lastZ);
		SetPVarInt(playerid, "lastInt", lastInt+1);
		SetPVarInt(playerid, "lastVW", lastVW+1);
		SetPVarFloat(playerid, "lastX", lastX);
		SetPVarFloat(playerid, "lastY", lastY);
		SetPVarFloat(playerid, "lastZ", lastZ);
	}

	if(Player[playerid][InHalloweenMaze] == 1)
	{
		SetPlayerPos_Update(playerid, -2826.2583, -1534.0724, 111.5000);
		return 1;
	}

	new string[255];

	if(Player[playerid][AdminDuty] != 1 && Player[playerid][InRally] != 1 && Player[playerid][InDerby] != 1)
	{
		new Float: x, Float: y, Float: z;
		GetPlayerPos(playerid, x, y, z);
		SetPVarFloat(playerid, "DeathPosX", x);
		SetPVarFloat(playerid, "DeathPosY", y);
		//SetPVarFloat(playerid, "DeathPosZ", z);
		Player[playerid][Hospitalized] = 1;
	}

	if(Player[playerid][AdminDuty] == 1)
	{
		if(Player[killerid][AdminDuty] != 1)
		{
			SendClientMessage(killerid, ADMINORANGE, "You have killed an on-duty admin, therefore you have been killed. ");
			SendClientMessage(killerid, ADMINORANGE, "You will not be refunded of your weapons.");

			SendClientMessage(playerid, ADMINORANGE, "Someone tried killing you whilst you were on-duty, they have been killed.");
			SetPlayerHealth(killerid, -1);
		}
	}


	if(Player[playerid][IsInAnimation] >= 1)
	{
		Player[playerid][IsInAnimation] = 0;
		TextDrawHideForPlayer(playerid, AnimationTextDraw);
	}

	if(Player[killerid][AdminLevel] < 1)
	{
		if(GetDistanceBetweenPlayers(killerid, playerid) > 25 && reason > 1 && reason < 100 && IsPlayerConnectedEx(killerid) && killerid != playerid && Player[killerid][IsAtEvent] == 0)
		{
			new weapon[128];
			GetWeaponName(reason, weapon, sizeof(weapon));
			format(string, sizeof(string), "WARNING: %s has killed %s; from a long distance, using a %s.", GetName(killerid), GetName(playerid), weapon);
			SendToAdmins(ADMINORANGE, string, 1);
			WarningLog(string);
			
			if(reason == WEAPON_MINIGUN)
			{
				if(Player[playerid][AdminLevel] < 1)
					AntiCheatBan(playerid);
			}
		}

		if(reason == 49)
		{
			format(string, sizeof(string), "WARNING: %s has car-rammed %s to death.", GetName(killerid), GetName(playerid));
			SendToAdmins(ADMINORANGE, string, 1);
			WarningLog(string);
			//print(string);
		}
		if(reason == 50)
		{
			if(IsAHelicopter(GetPlayerVehicleID(killerid)))
			{
				format(string, sizeof(string), "WARNING: %s has heli-killed %s.", GetName(killerid), GetName(playerid));
				SendToAdmins(ADMINORANGE, string, 1);
				WarningLog(string);
				//print(string);
			}
			else
			{
				if(GetPlayerWeapon(killerid) != 32 || GetPlayerWeapon(killerid) != 28 || GetPlayerWeapon(killerid) != 29)
				{
					format(string, sizeof(string), "WARNING: %s has car-parked %s.", GetName(killerid), GetName(playerid));
					SendToAdmins(ADMINORANGE, string, 1);
					WarningLog(string);
					//print(string);
				}
				else
				{
					format(string, sizeof(string), "WARNING: %s has drivershot %s.", GetName(killerid), GetName(playerid));
					SendToAdmins(ADMINORANGE, string, 1);
					WarningLog(string);
					print(string);
				}
			}
		}
	}

	//Player[playerid][ResetTimer] = 1;

	foreach(Player, i)
	{
		if(Player[i][BeingDraggedBy] == playerid)
		{
			Player[i][BeingDraggedBy] = -1;
		}
	}

	if(GetPVarInt(playerid, "MovingStash") > 0)
	{
		DeletePVar(playerid, "MovingStash");
		DeletePVar(playerid, "MovingStashSlot");
		CancelEdit(playerid);
	}

	if(Player[playerid][BeingAssasinated] == killerid)
	{
		format(string, sizeof(string), "%s has successfully assassinated contract %s (for $%d).", GetName(killerid), GetName(playerid), Player[playerid][ContractPrice]/2);
		GroupMessage(killerid, ANNOUNCEMENT, string);
		format(string, sizeof(string), "[HITMAN] %s has earned $%s ($%s) from killing contract %s.", GetName(killerid), IntToFormattedStr(Player[playerid][ContractPrice]/2), IntToFormattedStr(Player[killerid][Money] + Player[playerid][ContractPrice]/2), GetName(playerid));
		MoneyLog(string);
		format(string, sizeof(string), "[HITMAN] %s has lost $%s ($%s) from being contract killed by %s.", GetName(playerid), IntToFormattedStr(Player[playerid][ContractPrice]/2), IntToFormattedStr(Player[playerid][Money] - Player[playerid][ContractPrice]/2), GetName(killerid));
		MoneyLog(string);
		Player[killerid][SuccessfulHits]++;
		Player[killerid][Money] += Player[playerid][ContractPrice]; // /2
		// Groups[Player[killerid][Group]][SafeMoney] += Player[playerid][ContractPrice] / 2;
		format(Player[playerid][Contract], 255, "None");
		format(Player[playerid][Contract2], 255, "None");
		Player[playerid][ContractPrice] /= 2;
		if(GetPlayerTotalWealth(playerid) < Player[playerid][ContractPrice]) Player[playerid][ContractPrice] = GetPlayerTotalWealth(playerid);
		Player[playerid][Money] -= Player[playerid][ContractPrice];
		Player[playerid][BeingAssasinated] = -1;
		Player[killerid][PlayerToAssasinate] = -1;
		format(string, sizeof(string), "You have been attacked by a hitman. The hitman also took $%s.", IntToFormattedStr(Player[playerid][ContractPrice]));
		SendClientMessage(playerid, ANNOUNCEMENT, string);
		Player[playerid][ContractPrice] = 0;
	}
	else if(Player[killerid][BeingAssasinated] == playerid)
	{
		format(string, sizeof(string), "You have been attacked by a Hitman and killed them. You were chased because: %s. You earned $%s.", Player[killerid][Contract], IntToFormattedStr(Player[killerid][ContractPrice]/2));
		SendClientMessage(killerid, ANNOUNCEMENT, string);
		format(string, sizeof(string), "[HITMAN] %s has earned $%s ($%s) for killing the hitman (%s).", GetName(killerid), IntToFormattedStr(Player[killerid][ContractPrice]/2), IntToFormattedStr(Player[killerid][Money] + Player[killerid][ContractPrice]/2), GetName(playerid));
		MoneyLog(string);
		format(string, sizeof(string), "[HITMAN] %s has lost $%s ($%s) for being killed by the target (%s).", GetName(playerid), IntToFormattedStr(Player[killerid][ContractPrice]), IntToFormattedStr(Player[playerid][Money] - Player[killerid][ContractPrice]), GetName(killerid));
		MoneyLog(string);
		Player[playerid][FailedHits]++;
		format(string, sizeof(string), "%s has failed to assasinate contract %s (for $%s).", GetName(playerid), GetName(killerid), IntToFormattedStr(Player[killerid][ContractPrice]));
		GroupMessage(playerid, ANNOUNCEMENT, string);
		Player[killerid][Money] += Player[killerid][ContractPrice]/2;
		Groups[Player[playerid][Group]][SafeMoney] += Player[killerid][ContractPrice]/2;
		format(Player[killerid][Contract], 255, "None");
		format(Player[killerid][Contract2], 255, "None");
		Player[playerid][Money] -= Player[killerid][ContractPrice];
		Player[killerid][BeingAssasinated] = -1;
		Player[playerid][PlayerToAssasinate] = -1;
		format(string, sizeof(string), "You have failed to assasinate %s, therefore you have lost $%s.", GetName(killerid), IntToFormattedStr(Player[killerid][ContractPrice]));
		SendClientMessage(playerid, ANNOUNCEMENT, string);
		Player[killerid][ContractPrice] = 0;
	}

	if(Player[playerid][PlayingSlots] > 0)
		cmd_leaveslots(playerid, "");

	if(GetPVarInt(killerid, "JASON_MODE") == 1)
	{
		StopAudioStreamForPlayer(playerid);
		SetPVarInt(playerid, "KILLED_BY_JASON", 1);
	}

	if(Player[playerid][IsAtEvent] >= 1)
	{
		switch(eventType)
		{
			case 1:
			{

				TextDrawHideForPlayer(playerid, EventTextDraw);
				Player[killerid][eventKills] ++;
				Player[playerid][eventKills] = 0;
				Iter_Remove(EventPlayers, playerid);

				if(Player[killerid][eventKills] == 3)
				{
					format(string, sizeof(string), "%s is on a 3 kill streak!", GetNameEx(killerid));
					MessageToEventPlayers(YELLOW, string);
				}

				if(Player[killerid][eventKills] == 5)
				{
					format(string, sizeof(string), "%s is on a 5 kill streak!", GetNameEx(killerid));
					MessageToEventPlayers(YELLOW, string);
				}

				if(Player[killerid][eventKills] == 7)
				{
					format(string, sizeof(string), "%s is on a 7 kill streak!", GetNameEx(killerid));
					MessageToEventPlayers(YELLOW, string);
				}

				format(string, sizeof(string), "~w~You have killed~n~~g~%s~w~", GetNameEx(playerid));
				GameTextForPlayer(killerid, string, 3000, 4);

				if(playerid == MostKills)
				{
					new id;
					foreach(Player, i)
					{
						if(Player[i][IsAtEvent] == 1)
						{
							if(Player[i][eventKills] > Player[id][eventKills])
								id = i;
						}
					}
					MostKills = id;
				}

				if(IsPlayerConnected(MostKills))
				{
					format(string, sizeof(string), "~n~~r~Kills Leader: ~w~%s (%d)~n~~n~~r~Players Remaining: ~w~%d~n~~n~", GetName(MostKills), Player[MostKills][eventKills], GetEventPlayerCount());
					TextDrawSetString(EventTextDraw, string);
				}
				else
				{
					new id;
					foreach(Player, i)
					{
						if(Player[i][IsAtEvent] == 1)
						{
							if(Player[i][eventKills] > Player[id][eventKills])
								id = i;
						}
					}
					MostKills = id;
					format(string, sizeof(string), "~n~~r~Kills Leader: ~w~%s (%d)~n~~n~~r~Players Remaining: ~w~%d~n~~n~", GetName(MostKills), Player[MostKills][eventKills], GetEventPlayerCount());
					TextDrawSetString(EventTextDraw, string);
				}

				if(Player[killerid][eventKills] > MostKills)
				{
					MostKills = killerid;
					format(string, sizeof(string), "~n~~r~Kills Leader: ~w~%s (%d)~n~~n~~r~Players Remaining: ~w~%d~n~~n~", GetName(MostKills), Player[MostKills][eventKills], GetEventPlayerCount());
					TextDrawSetString(EventTextDraw, string);
				}

				if(GetEventPlayerCount() == 1 && AutoPickWinner == 1)
				{
					format(string, sizeof(string), "Congratulations to %s - they've won the event!", GetName(killerid));
					TextDrawHideForPlayer(killerid, EventTextDraw);
					SendClientMessageToAll(LIGHTRED, string);
					CurrentEvent = 0;
					new MathsFlaw = floatround(Player[killerid][LastHealth], floatround_ceil);
					SetPlayerHealth(killerid, MathsFlaw);
					MathsFlaw = floatround(Player[killerid][LastArmour], floatround_ceil);
					SetPlayerArmour(killerid, MathsFlaw);
					Player[killerid][Hospitalized] = 0;
					Player[killerid][IsAtEvent] = 0;
					Player[killerid][eventKills] = 0;
					TogglePlayerControllable(killerid, true);
					Player[killerid][ResetTimer] = 1;
					ResetPlayerWeapons(killerid);
					GivePlayerSavedWeapons(killerid);
					Iter_Clear(EventPlayers);
					SetPlayerTeam(killerid, NO_TEAM);
					SendPlayerToSavedPos(killerid);
					UpdatePlayerNameColour(killerid);
					SendClientMessage(killerid, WHITE, "Thanks for playing fair! Congratulations on winning the event.");
					
					stop UpdateEventTimer;

					if(Anticheat == -1)
					{
						Anticheat = 1;
					}
				}
				else if(GetEventPlayerCount() == 1 && AutoPickWinner == 0)
				{
					format(string, sizeof(string), "[EVENT] The system has detected %s to be the event winner. Use /eventwinner %d if this is correct.", GetName(killerid), killerid);
					SendToAdmins(ADMINORANGE, string, 0);
				}
			}
			case 2:
			{
				new killerteam = Player[killerid][eventTeam] - 1;

				if(killerteam == Player[playerid][eventTeam] - 1)
				{
					SetPlayerHealth(killerid, -1);
					SendClientMessage(killerid, -1, "You have been killed for killing your teammate!");
					SendClientMessage(playerid, -1, "You were killed by your teammate!");
				}
				else
				{
					TeamKills[killerteam] ++;
					Player[playerid][eventKills] = 0;
					Player[killerid][eventKills]++;
					Player[playerid][TotalEventKills]++;

					if(maxDeaths > 0)
					{
						Player[playerid][eventDeaths] ++;
					}

					if(Player[killerid][eventKills] == 3)
					{
						format(string, sizeof(string), "%s is on a 3 kill streak!", GetNameEx(killerid));
						MessageToEventPlayers(YELLOW, string);
					}

					if(Player[killerid][eventKills] == 5)
					{
						format(string, sizeof(string), "%s is on a 5 kill streak!", GetNameEx(killerid));
						MessageToEventPlayers(YELLOW, string);
					}

					if(Player[killerid][eventKills] == 7)
					{
						format(string, sizeof(string), "%s is on a 7 kill streak!", GetNameEx(killerid));
						MessageToEventPlayers(YELLOW, string);
					}

					format(string, sizeof(string), "~w~You have killed~n~~g~%s~w~!", GetNameEx(playerid));
					GameTextForPlayer(killerid, string, 3000, 4);

					format(string, sizeof(string), "~n~~r~Team One Kills: ~w~%d~n~~n~~g~Team Two Kills: ~w~%d~n~~n~~y~Score Limit: ~w~%d~n~~n~", TeamKills[0], TeamKills[1], KillsToWin);
					TextDrawSetString(EventTextDraw, string);

					if(TeamKills[killerteam] >= KillsToWin)
					{
						format(string, sizeof(string), "Congratulations to %s for getting the final kill and winning for %s.", GetName(killerid), (Player[killerid][eventTeam] == 1) ? ("Team One") : ("Team Two"));
						SendClientMessageToAll(LIGHTRED, string);
						TeamKills[0] = 0;
						TeamKills[1] = 0;

						foreach(Player, i)
						{
							if(Player[i][IsAtEvent] >= 1)
							{
								CurrentEvent = 0;
								TextDrawHideForPlayer(i, EventTextDraw);
								new MathsFlaw = floatround(Player[i][LastHealth], floatround_ceil);
								SetPlayerHealth(i, MathsFlaw);
								MathsFlaw = floatround(Player[i][LastArmour], floatround_ceil);
								SetPlayerArmour(i, MathsFlaw);
								Player[i][Hospitalized] = 0;
								Player[i][IsAtEvent] = 0;
								Player[i][eventKills] = 0;
								TogglePlayerControllable(i, true);
								Player[i][ResetTimer] = 1;
								ResetPlayerWeapons(i);
								GivePlayerSavedWeapons(i);
								SendPlayerToSavedPos(i);
								UpdatePlayerNameColour(i);
								SetPlayerTeam(i, NO_TEAM);
								SendClientMessage(i, WHITE, "Thanks for playing fair!");
								
								stop UpdateEventTimer;
							}
						}
					}
					if(Anticheat == -1)
					{
						Anticheat = 1;
					}
				}
			}
		}
	}
	else
	{
		if(Anticheat == 1 && CurrentEvent == 0 /*&& DiveEvent == 0*/)
		{
			if(Player[killerid][IsAtEvent] >= 1)
			{
				Player[playerid][LastWorld] = 0;
				Player[playerid][LastInterior] = 0;
			}
		}

		if(Player[playerid][PrisonDuration] < 1)
		{
			if(Player[playerid][AdminDuty] != 1)
			{
				if(Player[killerid][IsHacker] == 1)
				{
					SendClientMessage(playerid, WHITE, "It seems you were killed by a hacker. Your weapons will not be refunded and you will be hospitalized.");
					Player[playerid][Hospitalized] = 1;

					/*Spectator[playerid][SpecPlayerInterior] = SpawnInt;
					Spectator[playerid][SpecPlayerAngle] = 0.00;
					Spectator[playerid][SpecPlayerWorld] = 0;
					Spectator[playerid][SpecPlayerX] = SpawnX;
					Spectator[playerid][SpecPlayerY] = SpawnY;
					Spectator[playerid][SpecPlayerZ] = SpawnZ;*/
				}
				/*else
				{
					Player[playerid][Hospitalized] = 1;
				}*/
				if(Player[playerid][InRally] < 1 && GetPVarInt(playerid, "KILLED_BY_JASON") != 1)
					ResetPlayerWeaponsEx(playerid);
			}
		}
	}

	if(Player[playerid][IsAtEvent] == 0)
	{
		Player[playerid][SpeedTimer] = 0;
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, (Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 2) ? (999) : (998));
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, (Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 2) ? (999) : (998));
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, (Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 2) ? (999) : (998));
		SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, (Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 2) ? (999) : (998));
		SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, (Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 2) ? (999) : (998));
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, (Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 2) ? (999) : (998));
	}
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	//printf("[DEBUG] Vehicle %d has spawned!", vehicleid);

	new sql = GetVSQLID(vehicleid);
	if(sql != 0)
	{
		SpawnVehicleSQL(sql);
		//print("Respawned vehicle");
	}
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{

	if(IsEventVehicle(vehicleid))
	{
		RemoveEventVehicle(vehicleid);
		return 1;
	}
	
	new sql = GetVSQLID(vehicleid),
	idx = GetVIndex(sql);
	if(sql != 0 && (!strcmp(Veh[idx][Owner], "unowned") && (Veh[idx][Group] == 0 && Veh[idx][GangLink] == 0)) )
	{
		ResetVMods(sql);
		//print("Destroyed mods on civilian car");
		Veh[idx][Color1] = random(255);
		Veh[idx][Color2] = random(255);
	}
	if(sql != 0)
	{

		//Kill all the mofos in the vehicle interior
		if(Veh[idx][attachedInteriorType] != 0)
		{
			foreach(Player, p)
			{
				if(Player[p][currentVehInteriorVW] == sql)
				{
					SetPlayerVirtualWorld(p, 0);
					SetPlayerHealth(p, 0);
					Player[p][currentVehInteriorVW] = 0;
				}
			}
		}

		Veh[idx][windowState] = 0;
		Veh[idx][damageState] = 0;
		new Float:health;
		GetVehicleHealth(vehicleid, health);
		if(health < 250)  // Stop vehicles respawning fixed when dumped in water
			Veh[idx][vHealth] = 1000;
		if(Groups[Veh[idx][Group]][CommandTypes] == 1)
		{
			if(GetVehicleModel(Veh[idx][Link]) == 427 || GetVehicleModel(Veh[idx][Link]) == 528 || GetVehicleModel(Veh[idx][Link]) == 601)
			{
				Veh[idx][vHealth] = 5000;
			}
		}
		Veh[idx][radioState] = 0;
		Veh[idx][attachedInteriorType] = 0;

	}
	return 1;
}

stock LiteralGroupMessage(group, colour, string[], ignoreadmin = 0)
{
	foreach(Player, i)
	{
		if(ignoreadmin && Player[i][AdminDuty] > 0)
			continue;

		if(Player[i][Group] == group && GetPlayerToggle(i, TOGGLE_RADIO) == false)
		{
			SendClientMessage(i, colour, string);
		}
	}
	return 1;
}

public OnPlayerText(playerid, text[])
{
	new string[255];

	if(substr_count(".", text, true) >= 3 && substr_count(":", text, true) >= 1)
	{
		new tmp;
		tmp = strfind(text, ":");
		if(tmp != -1)
		{
			format(string, sizeof(string), "WARNING: %s may be server-advertising (%s).", GetName(playerid), text);
			SendToAdmins(ADMINORANGE, string, 1);
			WarningLog(string);
			return 0;
		}
	}

	if(CurGMX == 2)
	{
		SendClientMessage(playerid, WHITE, "Please wait until the server has completely restarted.");
		return 0;
	}

	if(SavingStatus == 1)
	{
		SendClientMessage(playerid, WHITE, "Please wait until the server finishes saving.");
		return 0;
	}

	if(! strcmp(text, "Next", true))
	{
		if(Player[playerid][Tutorial] >= 1)
		{
			if(GetPVarInt(playerid, "TUTORIAL_TIMER")  - gettime() < 5)
				PutPlayerInTutorial(playerid, Player[playerid][Tutorial]);
			return 0;

			/*if(Player[playerid][ServerTut] >= 1)
			{
				switch(Player[playerid][ServerTut])
				{
					case 1:
					{
						SetPlayerPos(playerid, 1480.6547, -1771.3693, 15.7958);
						SetPlayerCameraPos(playerid, 1462.2637, -1715.6284, 31.0309);
						SetPlayerCameraLookAt(playerid, 1480.6547, -1771.3693, 18.7958);
						TogglePlayerControllable(playerid, false);

						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
						SendClientMessage(playerid, WHITE, "City Hall");
						SendClientMessage(playerid, WHITE, "City Hall is the primary government location in Los Santos and is located in Pershing Square right next to the LSPD.");
						SendClientMessage(playerid, WHITE, "At city hall you can purchase your ID card with the command \"/buyid\" so that you may be able to get a driver license at the DMV.");
						SendClientMessage(playerid, WHITE, "An ID is also required to rent hotel rooms at hotels all around Los Santos.");
						SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
						Player[playerid][ServerTut]++;
						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");

					}
					case 2:
					{
						SetPlayerPos(playerid, 2120.8201, -1907.0924, 12.2291);
						SetPlayerCameraPos(playerid, 2121.7781, -1880.6339, 31.2221);
						SetPlayerCameraLookAt(playerid, 2120.8201, -1907.0924, 17.2291);
						TogglePlayerControllable(playerid, false);

						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
						SendClientMessage(playerid, WHITE, "Department of Motor Vehicles");
						SendClientMessage(playerid, WHITE, "The DMV is one of the most important locations in Los Santos as it allows you to get your driver license and trucker license.");
						SendClientMessage(playerid, WHITE, "A driver license is required to drive legally in Los Santos and the trucker license is required to do certain jobs such as the Garbage man and Trucker job.");
						SendClientMessage(playerid, WHITE, "To start your driving test you will need to head inside and type the command \"/starttest\"");
						SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
						Player[playerid][ServerTut]++;
						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					}
					case 3:
					{
						SetPlayerPos(playerid, 1467.6205, -1011.6158, 22.8438);
						SetPlayerCameraPos(playerid, 1467.7682,-1044.3505,23.8281);
						SetPlayerCameraLookAt(playerid, 1467.6205, -1011.6158, 26.8438);
						TogglePlayerControllable(playerid, false);

						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
						SendClientMessage(playerid, WHITE, "The Bank");
						SendClientMessage(playerid, WHITE, "The Bank is a primary location on the server, within this building you can withdraw, deposit & receive money.");
						SendClientMessage(playerid, WHITE, "You can search for more banks through the island yourself, or use /map to find the nearest bank to your location.");
						SendClientMessage(playerid, WHITE, "The commands in the bank are: /bdeposit, /bwithdraw, /wiretransfer, /redeemcheck, /bloan, /bpayloan");
						SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
						Player[playerid][ServerTut]++;
						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
						return 0;
					}
					case 4:
					{
						SetPlayerPos(playerid, 543.0785, -1293.0146, 12.2422);
						SetPlayerCameraPos(playerid, 543.8637, -1234.2123, 46.4125);
						SetPlayerCameraLookAt(playerid, 543.0785, -1293.0146, 17.2422);
						TogglePlayerControllable(playerid, false);

						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
						SendClientMessage(playerid, WHITE, "The Vehicle Dealership");
						SendClientMessage(playerid, WHITE, "The Vehicle Dealership is a very popular business. There are a many dealerships in Los Santos,");
						SendClientMessage(playerid, WHITE, "all of which you can find via /map. There is an upper class dealership with expensive cars, a lower class dealership with cheaper vehicles,");
						SendClientMessage(playerid, WHITE, "as well as a pedal bike dealership and a van dealership.");
						SendClientMessage(playerid, WHITE, "Buying vehicles from any of these places will save to your name, and are vehicles only you own.");
						SendClientMessage(playerid, WHITE, "The vehicles you buy will only be spawned when you're online, so you're safe from people stealing your car when you aren't there.");
						SendClientMessage(playerid, WHITE, "You can find out more information on vehicles and your own cars in /help.");
						SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
						Player[playerid][ServerTut]++;
						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
						return 0;
					}
					case 5:
					{
						SetPlayerPos(playerid, 2104.1421, -1791.7871, 10.5547);
						SetPlayerCameraPos(playerid, 2070.7749, -1772.5292, 37.3558);
						SetPlayerCameraLookAt(playerid, 2104.1421, -1791.7871, 13.5547);
						TogglePlayerControllable(playerid, false);

						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
						SendClientMessage(playerid, WHITE, "Legal Jobs");
						SendClientMessage(playerid, WHITE, "There are multiple legal jobs on this server, as well as illegal jobs.");
						SendClientMessage(playerid, WHITE, "All these jobs are spreadout through the city, and to find them you can use /map.");
						SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
						Player[playerid][ServerTut]++;
						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
						return 0;
					}
					case 6:
					{
						SetPlayerPos(playerid, 967.2281, 2571.9170, 19.6123);
						SetPlayerCameraPos(playerid, 966.3963, 2572.4683, 23.6075);
						SetPlayerCameraLookAt(playerid, 967.2281, 2571.9170, 23.6123);
						TogglePlayerControllable(playerid, false);

						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
						SendClientMessage(playerid, WHITE, "Okay, so we're almost done.");
						SendClientMessage(playerid, WHITE, "Please fill in these important bits of information, before we can let you proceed.");
						ShowPlayerDialog(playerid, 106, DIALOG_STYLE_LIST, "Please Specify Your Gender", "Male\nFemale", "Select", "Cancel");
						Player[playerid][ServerTut] = 0;
						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
						return 0;
					}
				}
			}

			if(Player[playerid][RPTutStep] >= 1)
			{
				switch(Player[playerid][RPTutStep])
				{
					case 1:
					{
						SetPlayerCameraPos(playerid, 966.3963, 2572.4683, 23.6075);
						SetPlayerCameraLookAt(playerid, 967.2281, 2571.9170, 23.6123);
						TogglePlayerControllable(playerid, false);

						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
						SendClientMessage(playerid, WHITE, "IC and OOC");
						SendClientMessage(playerid, WHITE, "IC and OOC are two prime terms you'll come across whilst roleplaying.");
						SendClientMessage(playerid, WHITE, "IC - In Character: Everything that you're roleplaying is IC.");
						SendClientMessage(playerid, WHITE, "OOC - Out of Character: Computer issues, real-life-related things are OOC.");
						SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
						Player[playerid][RPTutStep]++;
						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
						return 0;
					}
					case 2:
					{
						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
						SendClientMessage(playerid, WHITE, "Metagaming");
						SendClientMessage(playerid, WHITE, "This is the process of mixing OOC information with IC information.");
						SendClientMessage(playerid, WHITE, "This is a regular thing that newbies experience; example: Responding to an OOC question IC. ");
						SendClientMessage(playerid, WHITE, "Another example is: Using the names above peoples heads as IC information. ");
						SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
						Player[playerid][RPTutStep]++;
						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
						return 0;
					}
					case 3:
					{
						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
						SendClientMessage(playerid, WHITE, "Powergaming");
						SendClientMessage(playerid, WHITE, "This is the process of executing an unrealistic action / forcing RP upon another player.");
						SendClientMessage(playerid, WHITE, "Such as: /me becomes superman and and starts flying.");
						SendClientMessage(playerid, WHITE, "Or even: /me breaks the cuffs because he is strong.");
						SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
						Player[playerid][RPTutStep]++;
						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
						return 0;
					}
					case 4:
					{
						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
						SendClientMessage(playerid, WHITE, "Hacking");
						SendClientMessage(playerid, WHITE, "This is the process of using third-party tools to modify your game play or others.");
						SendClientMessage(playerid, WHITE, "Hacking Tools are NOT allowed at any time, not even our administrators are allowed to use them.");
						SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
						Player[playerid][RPTutStep]++;
						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
						return 0;
					}
					case 5:
					{
						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
						SendClientMessage(playerid, WHITE, "Deathmatching");
						SendClientMessage(playerid, WHITE, "This is the process of killing somebody without a valid IC reason.");
						SendClientMessage(playerid, WHITE, "For example, killing someone because they insulted you OOC. A common abbreviation for deathmatching is 'DMing'.");
						SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
						Player[playerid][RPTutStep]++;
						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
						return 0;
					}
					case 6:
					{
						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
						SendClientMessage(playerid, WHITE, "Revenge Killing");
						SendClientMessage(playerid, WHITE, "This is the process of killing somebody who has just killed you.");
						SendClientMessage(playerid, WHITE, "You can only do this, if you have an IC link to who just killed you (for example, a friend was present when you were ");
						SendClientMessage(playerid, WHITE, "attacked, they told you when you respawned from hospital). If you're not informed, that is RKing (Revenge Killing)");
						SendClientMessage(playerid, WHITE, "As you lose 30 minutes of memory, each time you die (become severely injured).");
						SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
						Player[playerid][RPTutStep]++;
						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
						return 0;
					}
					case 7:
					{
						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
						SendClientMessage(playerid, WHITE, "Administrators / Admins");
						SendClientMessage(playerid, WHITE, "Administrators are a part of the server's staff team. They actively help players out and handle reports.");
						SendClientMessage(playerid, WHITE, "Administrators are usually the most active of the game, and you can contact them using out /(re)port tool.");
						SendClientMessage(playerid, WHITE, "Quite a lot of the time, our administrators are busy helping other players out, but they're usually very friendly");
						SendClientMessage(playerid, WHITE, "and do their best to help as many people out as possible. You can check if there any online, by using /admins.");
						SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
						Player[playerid][RPTutStep]++;
						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
						return 0;
					}
					case 8:
					{
						ShowPlayerDialog(playerid, 105, DIALOG_STYLE_LIST, "Would you like to endure our server tutorial?", "Yes, please\nNo, thanks.", "Select", "Cancel");
						Player[playerid][RPTutStep] = 0;
						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
						SendClientMessage(playerid, WHITE, "Okay, we're done with the boring stuff. Would you like to participate in our server tutorial?");
						SendClientMessage(playerid, WHITE, "This tutorial section is foccused on explaining server locations, jobs and other bits.");
						SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
						return 0;
					}
				}
			}*/
		}
	}

	if(GetPVarInt(playerid, "Pming") == 1 && IsPlayerConnectedEx(GetPVarInt(playerid, "PMTarget") - 1) && GetPVarInt(playerid, "PMTarget") != 0)
	{
		if(!strcmp("##", text))
		{
			DeletePVar(playerid, "PMTarget");
			DeletePVar(playerid, "Pming");
			SendClientMessage(playerid, -1, "You've canceled your PM");
			return 0;
		}
		new str[128], target = GetPVarInt(playerid, "PMTarget")-1;
		format(str, sizeof(str), "[PM] %s: %s", GetName(playerid), text);
		SendClientMessage(target, YELLOW, str);
		format(str, sizeof(str), "[PM] %s: %s", GetName(target), text);
		SendClientMessage(playerid, YELLOW, str);
		return 0;
	}

	if(Player[playerid][CellphoneConsole] != -1 && Player[playerid][IsSleeping] == 0)
	{
		#if defined MTG_PLAGUE
		if(Player[playerid][VirusCount] >= PLAGUE_SPEECH_MIN)
			format(text, strlen(text) + 1, "%s", MixUpSentence(text, Player[playerid][VirusCount], strlen(text) + 1));
		#endif
		
		if(Player[playerid][OnTaxiCall] >= 0)
		{
			new id = Player[playerid][CellphoneConsole];
			format(string, sizeof(string), "[611][%s %s accent] says: %s", accents[Player[playerid][Accent]], (Player[playerid][Gender] == 1) ? ("male") : ("female"), text);
			SendClientMessage(id, GREY, string);
			format(string, sizeof(string), "[Phone][%s %s accent] says: %s", accents[Player[playerid][Accent]], (Player[playerid][Gender] == 1) ? ("male") : ("female"), text);
			NearByMessage(playerid, GREY, string);
		}
		else if(Player[playerid][CellphoneConsole] != 911)
		{
			new talkingto[25], id = Player[playerid][CellphoneConsole];
			GetPVarString(id, "OnPhoneTo", talkingto, 25);
			if(!isnull(talkingto) && Player[playerid][OnPayphone] == 0)
			{
				format(string, sizeof(string), "[%s][%s %s accent] says: %s", talkingto, accents[Player[playerid][Accent]], (Player[playerid][Gender] == 1) ? ("male") : ("female"), text);
				SendClientMessage(id, GREY, string);
				format(string, sizeof(string), "[Phone][%s %s accent] says: %s", accents[Player[playerid][Accent]], (Player[playerid][Gender] == 1) ? ("male") : ("female"), text);
				NearByMessage(playerid, GREY, string);
			}
			else
			{
				format(string, sizeof(string), "[%d][%s %s accent] says: %s", (Player[playerid][OnPayphone] > 0) ? (Player[playerid][OnPayphone]) : (Player[playerid][PhoneN]), accents[Player[playerid][Accent]], (Player[playerid][Gender] == 1) ? ("male") : ("female"), text);
				SendClientMessage(id, GREY, string);
				format(string, sizeof(string), "[Phone][%s %s accent] says: %s", accents[Player[playerid][Accent]], (Player[playerid][Gender] == 1) ? ("male") : ("female"), text);
				NearByMessage(playerid, GREY, string);
			}

			if(Player[id][SpeakerPhone])
			{
				new Float:x, Float:y, Float:z;
				GetPlayerPos(id, x, y, z);

				foreach(Player, i)
				{
					if(IsPlayerInRangeOfPoint(i, 7.0, x, y, z) && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(id))
					{
						format(string, sizeof(string), "[Speaker Phone][%s %s accent] %s", accents[Player[playerid][Accent]], (Player[playerid][Gender] == 1) ? ("male") : ("female"), text);
						SendClientMessage(i, GREY, string);
					}
				}
			}

			format(string, sizeof(string), "[Phone][%s to %s] %s", GetNameEx(playerid), GetNameEx(id), text);
			SendMessageToSpectators(playerid, GREY, string);
			SendMessageToSpectators(id, GREY, string);

			//format(string, sizeof(string), "[%s[%s Accent]: %s", accents[Player[playerid][Accent]], GetNameEx(playerid), text);
			//NearByMessage(playerid, GREY, string);
			//SendClientMessage(Player[playerid][CellphoneConsole], GREY, string);
			format(string, sizeof(string), "[Phone][%s %s accent] %s says: %s", accents[Player[playerid][Accent]], (Player[playerid][Gender] == 1) ? ("male") : ("female"), GetNameEx(playerid), text);
			ICChatLog(string);
		}
		else
		{
			new txtstr[128];
			format(txtstr, sizeof(txtstr), "[Phone][%s %s accent] %s says: %s", accents[Player[playerid][Accent]], (Player[playerid][Gender] == 1) ? ("male") : ("female"), GetNameEx(playerid), text);
			NearByMessage(playerid, GREY, txtstr);
			format(txtstr, sizeof(txtstr), "[Phone][%s %s accent] %s says: %s", accents[Player[playerid][Accent]], (Player[playerid][Gender] == 1) ? ("male") : ("female"), GetNameEx(playerid), text);
			ICChatLog(string);

			switch(Player[playerid][NineOneOneStep])
			{
				case 0:
				{
					if(!strcmp(text, "LSPD", true))
					{
						format(txtstr, sizeof(txtstr), "* %s takes out their phone and hits 'Emergency'", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, txtstr);
						switch(random(4))
						{
							case 0: SendClientMessage(playerid, GREY, "[Phone][American female accent] says: Hello, Los Santos Police, how may we help you?");
							case 1: SendClientMessage(playerid, GREY, "[Phone][American female accent] says: LSPD, what is your emergency?");
							case 2: SendClientMessage(playerid, GREY, "[Phone][American female accent] says: Los Santos Police Department, please state your emergency.");
							case 3: SendClientMessage(playerid, GREY, "[Phone][American female accent] says: Hello, this is the LSPD, how can we assist you?");
						}
						Player[playerid][NineOneOneStep] = 1;
					}
					/*
					else if(!strcmp(text, "LSMD", true))
					{
						if(Player[playerid][EMSCalled] == 0)
						{
							format(txtstr, sizeof(txtstr), "* %s takes out their phone and hits 'Emergency'", GetNameEx(playerid));
							NearByMessage(playerid, NICESKY, txtstr);
							SendClientMessage(playerid, WHITE, "You've selected the LSMD - How may we help you?");
							SendClientMessage(playerid, GREY, "Please describe your current condition.");
							Player[playerid][NineOneOneStep] = 10;
						}
						else
						{
							Player[playerid][CellphoneConsole] = -1;
							Player[playerid][NineOneOneStep] = 0;
							SendClientMessage(playerid, WHITE, "You have already contacted the LSMD.");
						}

					}
					*/
					else
					{
						//if(GetPVarInt(playerid, "BleedingOutTime") == 0)
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
						RemovePlayerAttachedObject(playerid, 4);
						Player[playerid][CellphoneConsole] = -1;
						Player[playerid][NineOneOneStep] = 0;
						SendClientMessage(playerid, WHITE, "Unrecognized line. The call has been terminated.");
					}
				}
				case 1:
				{
					if(strlen(text) >= 1)
					{
						new log[128];
						format(log, sizeof(log), "[Phone (911 call)][%s %s accent] %s: %s", accents[Player[playerid][Accent]], (Player[playerid][Gender] == 1) ? ("male") : ("female"), GetNameEx(playerid), text);
						ICChatLog(log);
						format(Player[playerid][ActiveCrimeReport], 255, "%s", text);
						NearByMessage(playerid, GREY, txtstr);
						
						new location[MAX_ZONE_NAME];
						GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
						
						foreach(Player, i)
						{
							if(IsPlayerConnectedEx(i))
							{
								if(Groups[Player[i][Group]][CommandTypes] == 1 && Player[i][CopDuty] == 1)
								{
									if(Player[playerid][OnPayphone] > 0)
										format(string, sizeof(string), "[911] Somebody (%d) has reported a crime at %s.", Player[playerid][OnPayphone], location);
									else
										format(string, sizeof(string), "[911] %s (%d) has reported a crime at %s.", Player[playerid][NormalName], Player[playerid][PhoneN], location);
									SendClientMessage(i, COLOR_LIGHTBLUE, string);
									format(string, sizeof(string), "[911] Report: %s", Player[playerid][ActiveCrimeReport]);
									SendClientMessage(i, COLOR_LIGHTBLUE, string);
								}
							}
						}
						
						if(Player[playerid][OnPayphone] > 0)
							Store911Call(location, "Payphone User", Player[playerid][ActiveCrimeReport], Player[playerid][OnPayphone]);
						else Store911Call(location, GetNormalNameEx(playerid), Player[playerid][ActiveCrimeReport], Player[playerid][PhoneN]);
						
						switch(random(4))
						{
							case 0: SendClientMessage(playerid, GREY, "[Phone][American female accent] says: Thank you for reporting, we'll get somebody on that immediately.");
							case 1: SendClientMessage(playerid, GREY, "[Phone][American female accent] says: An officer will be dispatched as soon as possible.");
							case 2: SendClientMessage(playerid, GREY, "[Phone][American female accent] says: I've alerted our units in the area, thank you for your call.");
							case 3: SendClientMessage(playerid, GREY, "[Phone][American female accent] says: Thank you for your call, the situation will be investigated.");
						}
						
						SendClientMessage(playerid, WHITE, "Your call has been terminated by the other party.");
						Player[playerid][CellphoneConsole] = -1;
						Player[playerid][NineOneOneStep] = 0;
						Player[playerid][OnPayphone] = 0;

						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
						RemovePlayerAttachedObject(playerid, 4);
						
					}
					else
					{
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
						RemovePlayerAttachedObject(playerid, 4);
						Player[playerid][CellphoneConsole] = -1;
						Player[playerid][NineOneOneStep] = 0;
					}
				}
				/*
				case 2:
				{
					for(new i; i < strlen(text); i++)
					{
						if(text[i] == '_') 
						{
							text[i] = ' ';
						}
					}

					if(strlen(text) != 0 && strcmp(text, "Unsure", true))
					{
						new location[MAX_ZONE_NAME];
						GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
						foreach(Player, i)
						{
							if(IsPlayerConnectedEx(i))
							{
								if(Groups[Player[i][Group]][CommandTypes] == 1 && Player[i][CopDuty] == 1)
								{
									if(Player[playerid][OnPayphone] > 0)
										format(string, sizeof(string), "[911] Somebody (%d) has reported %s committing a crime at %s.", Player[playerid][OnPayphone], text, location);
									else
										format(string, sizeof(string), "[911] %s (%d) has reported %s committing a crime at %s.", Player[playerid][NormalName], Player[playerid][PhoneN], text, location);
									SendClientMessage(i, COLOR_LIGHTBLUE, string);
									format(string, sizeof(string), "[911] Reason: %s", Player[playerid][ActiveCrimeReport]);
									SendClientMessage(i, COLOR_LIGHTBLUE, string);
								}
							}
						}
						
						if(Player[playerid][OnPayphone] > 0)
							Store911Call(location, text, "Payphone User", Player[playerid][ActiveCrimeReport], Player[playerid][OnPayphone]);
						else Store911Call(location, text, GetNameEx(playerid), Player[playerid][ActiveCrimeReport], Player[playerid][PhoneN]);
						
						format(string, sizeof(string), "Thank you for reporting %s. The situation will be investigated!", text);
						SendClientMessage(playerid, WHITE, string);
						Player[playerid][CellphoneConsole] = -1;
						Player[playerid][NineOneOneStep] = 0;
						Player[playerid][OnPayphone] = 0;

						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
						RemovePlayerAttachedObject(playerid, 4);
					}
					else if(!strcmp(text, "Unsure", true))
					{
						new location[MAX_ZONE_NAME];
						GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
						foreach(Player, i)
						{
							if(Groups[Player[i][Group]][CommandTypes] == 1 && Player[i][CopDuty] == 1)
							{
								if(Player[playerid][OnPayphone] > 0)
									format(string, sizeof(string), "[911] Somebody (%d) has reported a crime at %s.", Player[playerid][OnPayphone], location);
								else
									format(string, sizeof(string), "[911] %s (%d) has reported a crime at %s.", Player[playerid][NormalName], Player[playerid][PhoneN], location);
								SendClientMessage(i, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "[911] Reason: %s", Player[playerid][ActiveCrimeReport]);
								SendClientMessage(i, COLOR_LIGHTBLUE, string);
							}
						}
						
						if(Player[playerid][OnPayphone] > 0)
							Store911Call(location, "Unsure", "Payphone User", Player[playerid][ActiveCrimeReport], Player[playerid][OnPayphone]);
						else Store911Call(location, "Unsure", GetNameEx(playerid), Player[playerid][ActiveCrimeReport], Player[playerid][PhoneN]);
						
						format(string, sizeof(string), "Thank you for reporting a crime. The situation will be investigated!");
						SendClientMessage(playerid, WHITE, string);
						Player[playerid][CellphoneConsole] = -1;
						Player[playerid][NineOneOneStep] = 0;
						Player[playerid][OnPayphone] = 0;

						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
						RemovePlayerAttachedObject(playerid, 4);
						return 0;
					}
					else
					{
						Player[playerid][CellphoneConsole] = -1;
						Player[playerid][NineOneOneStep] = 0;
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
						RemovePlayerAttachedObject(playerid, 4);
						SendClientMessage(playerid, WHITE, "Name not recognized on the database of LS Citizens.");
					}

					new log[128];
					format(log, sizeof(log), "[Phone (911 call)][%s %s accent] %s: %s", accents[Player[playerid][Accent]], (Player[playerid][Gender] == 1) ? ("male") : ("female"), GetNameEx(playerid), text);
					ICChatLog(log);
				}
				*/
				case 10:
				{
					if(strlen(text) >= 1)
					{
						new location[MAX_ZONE_NAME];
						GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
						SendClientMessage(playerid, WHITE, "Thank you for calling. A unit will be dispatched shortly!");
						Player[playerid][CellphoneConsole] = -1;
						Player[playerid][NineOneOneStep] = 0;

						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
						RemovePlayerAttachedObject(playerid, 4);

						new name[24];
						if(Player[playerid][OnPayphone] > 0)
							format(name, sizeof(name), "Somebody");
						else format(name, sizeof(name), "%s", GetNameEx(playerid));

						format(string, sizeof(string), "[LSMD] %s has reported: %s (Location: %s)", name, text, GetIntZone(playerid));

						foreach(Player, i)
						{
							if(Groups[Player[i][Group]][CommandTypes] == 3 && Player[i][MDuty] == 1)
							{
								SendClientMessage(i, LSFMD_PEACH, string);
							}
						}
					}
					else
					{
						Player[playerid][CellphoneConsole] = -1;
						Player[playerid][NineOneOneStep] = 0;
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
						RemovePlayerAttachedObject(playerid, 4);
					}
				}
			}
		}
	}
	else
	{
		if(strcmp(text, "Yes", true) == 0 && Player[playerid][PendingProposal] >= 1)
		{
			if(Player[Player[playerid][PendingProposal]][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice1] && Businesses[Player[playerid][InBusiness]][bType] == 9)
			{
				Player[Player[playerid][PendingProposal]][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice1];
//				Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice1];
				AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Businesses[Player[playerid][InBusiness]][bProductPrice1]);
				new str[128];
				SendClientMessage(playerid, WHITE, "You have accepted the proposal!");
				format(str, sizeof(str), "%s has accepted your proposal! You are now married!", GetName(Player[playerid][PendingProposal]));
				SendClientMessage(Player[playerid][PendingProposal], WHITE, string);

				new strin[255];

				if (Player[playerid][Gender] != Player[Player[playerid][PendingProposal]][Gender]){
					format(strin, sizeof(strin), "%s and %s are a new married couple, congratulations!", GetName(Player[playerid][PendingProposal]), GetName(playerid));
				}
				else
				{
					format(strin, sizeof(strin), "%s and %s are a new gay married couple, congratulations!", GetName(Player[playerid][PendingProposal]), GetName(playerid));
				}

				foreach(Player, i)
				{
				    if(Player[i][InBusiness] == Player[playerid][InBusiness])
				        SendClientMessage(i, -1, strin);
				}
				//SendClientMessageToAll(WHITE, strin);

				format(Player[playerid][MarriedTo], 255, "%s", GetName(Player[playerid][PendingProposal]));
				format(Player[Player[playerid][PendingProposal]][MarriedTo], 255, "%s", GetName(playerid));
				Player[playerid][PendingProposal] = -1;



			}
			else
			{
				SendClientMessage(playerid, WHITE, "The wedding can't be performed as the player you're marrying doesn't have $10,000. Or you're not in a church!");
			}
		}

		if(Player[playerid][Tutorial] >= 1)
		{
			SendClientMessage(playerid, WHITE, "Please finish the tutorial first.");
		}
		else
		{
			if(Player[playerid][Authenticated] == 0)
			{
				SendClientMessage(playerid, GREY, "You must login first.");
			}
			if(Player[playerid][Muted] != 0)
			{
				SendClientMessage(playerid, GREY, "You're unable to speak as you're muted or prisoned.");
			}
			else
			{
				if(strlen(text) >= 185)
				{
					SendClientMessage(playerid, WHITE, "Your message must be shorter than 185 characters.");
				}
				else
				{
					if(Player[playerid][PrisonID] != 1 && Player[playerid][IsSleeping] == 0)
					{
						if(Spectator[playerid][SpecSpectatingPlayer] == -1 || Player[playerid][AdminDuty] > 0 || GetPVarInt(playerid, "OnAsk") == 1)
						{
							if(Player[playerid][AdminDuty] > 0 || GetPVarInt(playerid, "OnAsk") == 1)
							{
								//(( 012345678901234567890123 says: 90 characters remaining ))
								new splitpos = 110 - (13+strlen(GetName(playerid)));
								if(strlen(text) > splitpos)
								{
									new str1[90], str2[90], tmp[255];
									strcpy(tmp, text, sizeof(tmp));
									strsplit(tmp, str1, str2, splitpos);
									//strmid(str1, text, 0, 89);
									//strmid(str2, text, 89, 179);
									format(string, sizeof(string), "(( {F6970C}%s{AFAFAF} says: %s ))", GetName(playerid), str1);
									NearByMessage(playerid, OOCC_CHAT, string);
									format(string, sizeof(string), "(( {F6970C}%s{AFAFAF} says: %s ))", GetName(playerid), str2);
									NearByMessage(playerid, OOCC_CHAT, string);
								}
								else
								{
									format(string, sizeof(string), "(( {F6970C}%s{AFAFAF} says: %s ))", GetName(playerid), text);
									NearByMessage(playerid, OOCC_CHAT, string);
								}

								format(string, sizeof(string), "(( %s says: %s ))", GetName(playerid), text);
								OOCChatLog(string);
							}
							else
							{
								/*//Windows Check
								if(IsPlayerInAnyVehicle(playerid) && !IsAnyBike(GetPlayerVehicleID(playerid)))
								{
									new veh = GetPlayerVehicleID(playerid),
									sql = GetVSQLID(veh),
									idx = GetVIndex(sql);
									if(sql != 0)
									{
										if(Veh[idx][windowStatus] == 0) // up
										{
											if(GetPVarInt(playerid, "windowsUpNotify") == 0)
												SendClientMessage(playerid, YELLOW, "[Tip] Your window is up, only people inside will hear you! Type /car window");

											SetPVarInt(playerid, "windowsUpNotify", 1);

											format(string, sizeof(string), "{FF007F}[VEHICLE] {F5FFFA}[%s Accent] %s says: %s", accents[Player[playerid][Accent]], GetNameEx(playerid), text);
											foreach(Player, p)
											{
												if(!IsPlayerInVehicle(p, veh))
													continue;

												SendClientMessage(p, 0xF5FFFAFF, string);
											}
											ICChatLog(string);
										}
										else
										{
											format(string, sizeof(string), "[%s Accent] %s says: %s", accents[Player[playerid][Accent]], GetNameEx(playerid), text);
											NearByMessage(playerid, WHITE, string);
											ICChatLog(string);
										}
									}
									else //Just incase.....
									{
										format(string, sizeof(string), "[%s Accent] %s says: %s", accents[Player[playerid][Accent]], GetNameEx(playerid), text);
										NearByMessage(playerid, WHITE, string);
										ICChatLog(string);
									}

								}*/

								if(Player[playerid][Gagged])
									return SendClientMessage(playerid, -1, "You can't do that, you're gagged!"), 0;
									
								#if defined MTG_PLAGUE
								if(Player[playerid][VirusCount] >= PLAGUE_SPEECH_MIN)
									format(text, strlen(text) + 1, "%s", MixUpSentence(text, Player[playerid][VirusCount], strlen(text) + 1));
								#endif
								
								// [01234567890123456789 Accent] 012345678901234567890123 says: 66 characters left
								new splitpos = 110 - (16+strlen(accents[Player[playerid][Accent]])+strlen(GetName(playerid)));
								if(strlen(text) > splitpos)
								{
									new str1[66], str2[66], tmp[255];
									strcpy(tmp, text, sizeof(tmp));
									strsplit(tmp, str1, str2, splitpos);
									// strmid(str1, text, 0, 65);
									// strmid(str2, text, 65, 131);
									format(string, sizeof(string), "[%s Accent] %s says: %s", accents[Player[playerid][Accent]], GetNameEx(playerid), str1);
									NearByMessage(playerid, WHITE, string);
									format(string, sizeof(string), "[%s Accent] %s says: %s", accents[Player[playerid][Accent]], GetNameEx(playerid), str2);
									NearByMessage(playerid, WHITE, string);
								}

								else
								{
									format(string, sizeof(string), "[%s Accent] %s says: %s", accents[Player[playerid][Accent]], GetNameEx(playerid), text);
									NearByMessage(playerid, WHITE, string);
								}

								format(string, sizeof(string), "[%s Accent] %s says: %s", accents[Player[playerid][Accent]], GetNameEx(playerid), text);
								ICChatLog(string);
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You can't talk ICly whilst you're spectating off Admin Duty.");
						}
					}
					else
					{
						SendClientMessage(playerid, WHITE, "You may not speak ICly whilst you're in OOC prison.");
					}
				}
			}
		}
	}
	
	for(new i; i < MAX_BUGS; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5, Bugs[i][bx], Bugs[i][by], Bugs[i][bz]) && GetPlayerVirtualWorld(playerid) == Bugs[i][BugVW])
		{
			foreach(Player, k) 
			{
				if(Player[k][Headphones] == i+1)
				{
					format(string, sizeof(string), "[HEADPHONES] %s: %s", GetNameEx(playerid), text);
					SendClientMessage(k, GREY, string);
				}
			}
		}
	}
	return 0;
}

stock GroupMessage(playerid, colour, string[], ignoreadmin = 0)
{
	foreach(Player, i)
	{
		if(ignoreadmin && Player[i][AdminDuty] > 0)
			continue;

		if(Player[i][Group] == Player[playerid][Group])
		{
			SendClientMessage(i, colour, string);
		}
	}
	return 1;
}

stock GroupMessageEx(playerid, colour, rank, string[], ignoreadmin = 0)
{
	foreach(Player, i)
	{
		if(ignoreadmin && Player[i][AdminDuty] > 0)
			continue;

		if(Player[i][Group] != Player[playerid][Group])
			continue;

		if(Player[i][GroupRank] < rank)
			continue;

		SendClientMessage(i, colour, string);
	}
	return 1;
}

public NearByMessage(playerid, colour, string[])
{
	new Float: PlayerX, Float: PlayerY, Float: PlayerZ;
	foreach(Player, i)
	{
		if(IsPlayerSpawned(playerid))
		{
			GetPlayerPos(playerid, PlayerX, PlayerY, PlayerZ);
			if(IsPlayerInRangeOfPoint(i, 12, PlayerX, PlayerY, PlayerZ))
			{
				if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i) && GetPlayerInterior(playerid) == GetPlayerInterior(i))
				{
					SendClientMessage(i, colour, string);
				}
			}
		}
	}
	return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if(SavingStatus == 1)
	{
		SendClientMessage(playerid, WHITE, "Please wait until the server finishes saving.");
		return 0;
	}
	if(IsPlayerConnectedEx(playerid))
	{
		if(Player[playerid][Muted] >= 1)
		{
			SendClientMessage(playerid, WHITE, "You can't use any commands whilst you are muted.");
			return 0;
		}
		else
		{

			/*if(strfind(cmdtext, "[myid]", true))
			{
			new tmpstr[4];
			format(tmpstr, sizeof(tmpstr), "%d", playerid);
			cmdtext[128] = str_replace("[myid]", tmpstr, cmdtext, substr_count("[myid]", cmdtext));
			}*/

			if(Player[playerid][AdminLevel] >= 1 && strlen(Player[playerid][AdminName]) == 0)
			{
				SendClientMessage(playerid, WHITE, "You must have your admin name set first.");
				return 0;
			}
			else
			{
				if(Player[playerid][AdminLevel] >= 1 && Player[playerid][PINAuth] == 0)
				{
					SendClientMessage(playerid, WHITE, "You must authenticate with your admin PIN first.");
					return 0;
				}
				else
				{
					Player[playerid][SpamCount]++;
					/*
					if(Player[playerid][SpamCount] >= 3 && Player[playerid][AdminLevel] >= 1 && Player[playerid][AdminLevel] < 5)
					{
					if(strfind(cmdtext, "ban", true) != -1 || strfind(cmdtext, "kick", true) != -1 || strfind(cmdtext, "warn", true) != -1 || strfind(cmdtext, "set", true) != -1 || strfind(cmdtext, "announce", true) != -1)
					{
					new string[128], Name[MAX_PLAYER_NAME];
					new hour, minute, second, day, year, month;
					GetPlayerName(playerid, Name, sizeof(Name));
					gettime(hour, minute, second);
					getdate(year, month, day);
					#pragma unused second
					new IP[21];
					GetPlayerIp(playerid, IP, sizeof(IP));
					format(string, sizeof(string), "%d/%d/%d | %d:%d | %s | %s | SPAMMING | System", day, month, year, hour, minute, IP, Name);
					BanLog(string);
					format(string, sizeof(string), "Ban: %s has been auto-banned. Defined reason: \"Spamming (ban/kick/warn/set)\".", Name);
					SendClientMessageToAll(LIGHTRED, string);
					Player[playerid][Banned] = 1;
					format(Player[playerid][BannedReason], 128, "Autoban: Spamming");
					format(Player[playerid][BannedBy], 128, "System");
					Player[playerid][AdminDuty] = 0;
					print(string);
					Kick(playerid);
					return 0;
					}
					else
					{
					Kick(playerid);
					}
					}*/

					if(substr_count(".", cmdtext, true) >= 3 && substr_count(":", cmdtext, true) >= 1)
					{
						new string[128], tmp;
						tmp = strfind(cmdtext, ":");
						if(tmp != -1)
						{
							format(string, sizeof(string), "WARNING: %s may be server-advertising (%s).", GetName(playerid), cmdtext);
							SendToAdmins(ADMINORANGE, string, 1);
							WarningLog(string);
							return 0;
						}
					}

					if(CurGMX == 2)
					{
						SendClientMessage(playerid, WHITE, "Please wait until the server has completely restarted.");
						return 0;
					}
					else
					{
						if(Player[playerid][Tutorial] >= 1 && Player[playerid][AdminLevel] < 1)
						{
							SendClientMessage(playerid, WHITE, "You may not use commands whilst in the tutorial.");
							return 0;
						}
						else
						{
							new tmp[200];
							format(tmp, sizeof(tmp), "%s (%d) has executed: %s", GetName(playerid), playerid, cmdtext);
							CommandsLog(tmp);
							//printf("[command] %s (%d) executes: %s", GetName(playerid), playerid, cmdtext);
							return 1;
						}
					}
				}
			}
		}
	}
	else
	{
		SendClientMessage(playerid, WHITE, "Please authenticate first.");
		return 0;
	}
}



stock strtolower(string[])
{
	new
	retStr[255],
	i,
	j;

	while ((j = string[i]))  retStr[i++] = chrtolower(j);
	retStr[i] = '\0';
	return retStr;
}

/*stock StripNL(str[])
{
	new
		l = strlen(str);
	while (l-- && str[l] <= ' ') str[l] = '\0';
}*/

stock titleStr(string[])
{
	new
	retStr[255],
	i,
	j;

	j = string[i];
	retStr[i++] = chrtoupper(j);

	while ((j = string[i]))
	{
		retStr[i++] = chrtolower(j);

		if(j == 0x5F && (j = string[i]))
			retStr[i++] = chrtoupper(j);
	}
	retStr[i] = '\0';
	return retStr;
}

stock substr_count(substring[], string[], bool:ignorecase = false, startpos = 0)
{
	new ncount, start = strfind(string, substring, ignorecase, startpos);

	while(start >- 1)
	{
		start = strfind(string, substring, ignorecase, start + strlen(substring));
		ncount++;
	}

	return ncount;
}

stock AdminWeaponWarning(playerid, weaponid = 0)
{
	if(Player[playerid][AdminDuty] < 1)
	{
		if(! IsPlayerInAnyVehicle(playerid))
		{
			new string[128], WepName[128], Name[MAX_PLAYER_NAME];
			GetPlayerName(playerid, Name, sizeof(Name));
			if(weaponid == 0)
				GetWeaponName(GetPlayerWeapon(playerid), WepName, sizeof(WepName));
			else GetWeaponName(weaponid, WepName, sizeof(WepName));
			format(string, sizeof(string), "WARNING: %s [ID: %d] may possibly be weapon hacking (%s).", Name, playerid, WepName);
			SendToAdmins(ADMINORANGE, string, 1);
			WarningLog(string);

			print(string);

			Player[playerid][AnticheatWarns]++;
			Player[playerid][ACWarnTime] = 1;

			if(Player[playerid][AnticheatWarns] >= MAX_WEAPON_HACK_WARNINGS)
			{
				AntiCheatBan(playerid);
				Player[playerid][AnticheatWarns] = 0;
				Player[playerid][ACWarnTime] = 0;
			}
		}
	}
}

stock AntiCS(playerid)
{
	if(GetPlayerSurfingVehicleID(playerid) == INVALID_VEHICLE_ID)
		return DeletePVar(playerid, "CarSurfTicks");

	SetPVarInt(playerid, "CarSurfTicks", GetPVarInt(playerid, "CarSurfTicks") + 1);
	if(GetPVarInt(playerid, "CarSurfTicks") > 5)
	{
		new Float:pX, Float:pY, Float:pZ;
		GetPlayerPos(playerid, pX, pY, pZ);
		SetPlayerPos_Update(playerid, pX, pY, pZ+5);
		PlayerPlayNearbySound(playerid,1190);
		SendClientMessage(playerid, -1, "You've been slapped off the vehicle due to car surfing!");
		DeletePVar(playerid, "CarSurfTicks");
	}
	return 1;
}

stock ShowStatistics(playerid, id)
{
	if(Player[playerid][AdminLevel] >= Player[id][AdminLevel])
	{
		new string[255], GenderString[23], Rank[50], GroupString[128], JobString[128], Job2String[128], RaceString[128];
		SendClientMessage(playerid, GREY, "-------------------------------------------------------------------------------------------------------------------------------------");

		if(Player[id][Gender] == 1)
		{
			format(GenderString, sizeof(GenderString), "Male");
		}
		else
		{
			format(GenderString, sizeof(GenderString), "Female");
		}

		if(Player[id][Job] >= 1)
		{
			format(JobString, sizeof(JobString), "%s", Jobs[Player[id][Job]][JobName]);
		}
		else
		{
			format(JobString, sizeof(JobString), "{CFCFCF}Unemployed{FFFFFF}");
		}

		if(Player[id][Job2] >= 1)
		{
			format(Job2String, sizeof(Job2String), "%s", Jobs[Player[id][Job2]][JobName]);
		}

		if(Player[id][Group] >= 1)
		{
			format(GroupString, sizeof(GroupString), "%s", Groups[Player[id][Group]][GroupName]);
		}
		else
		{
			format(GroupString, sizeof(GroupString), "{CFCFCF}None{FFFFFF}");
		}

		if(Player[id][Race] == 0)
			format(RaceString, sizeof(RaceString), "White");
		else if(Player[id][Race] == 1)
			format(RaceString, sizeof(RaceString), "Black");
		else if(Player[id][Race] == 2)
			format(RaceString, sizeof(RaceString), "Asian");
		else if(Player[id][Race] == 3)
			format(RaceString, sizeof(RaceString), "Hispanic");

		if(Player[id][PlayingHours] < 2 )
			format(Rank, sizeof(Rank), "%s\n", OOCRanks[Rank1]);
		else if(Player[id][PlayingHours] < 75)
			format(Rank, sizeof(Rank), "%s\n", OOCRanks[Rank2]);
		else if(Player[id][PlayingHours] < 250)
			format(Rank, sizeof(Rank), "%s\n", OOCRanks[Rank3]);
		else if(Player[id][PlayingHours] < 750)
			format(Rank, sizeof(Rank), "%s\n", OOCRanks[Rank4]);
		else if(Player[id][PlayingHours] < 1250)
			format(Rank, sizeof(Rank), "%s\n", OOCRanks[Rank5]);
		else if(Player[id][PlayingHours] < 2000)
			format(Rank, sizeof(Rank), "%s\n", OOCRanks[Rank6]);
		else
			format(Rank, sizeof(Rank), "%s\n", OOCRanks[Rank7]);

		if(isnull(Job2String))
			format(string, sizeof(string), "%s | %s | Age: %d | Race: %s | Job: %s | Faction: %s (%d) Rank: %d ", GetName(id), GenderString, Player[id][Age], RaceString, JobString, GroupString, Player[id][Group], Player[id][GroupRank]);
		else
			format(string, sizeof(string), "%s | %s | Age: %d | Race: %s | Job: %s, %s | Faction: %s (%d) Rank: %d ", GetName(id), GenderString, Player[id][Age], RaceString, JobString, Job2String, GroupString, Player[id][Group]);
		SendClientMessage(playerid, -1, string);

		new Float: Health, Float: Armour, ArmourMathFlaw, HealthMathFlaw;
		GetPlayerHealth(id, Health);
		GetPlayerArmour(id, Armour);
		HealthMathFlaw = floatround(Health, floatround_ceil);
		ArmourMathFlaw = floatround(Armour, floatround_ceil);

		format(GroupString, sizeof(GroupString), "%s", Gangs[Player[id][Gang]][GangName]);
		if(Player[id][House2] == 0)
			format(string, sizeof(string), "Health: %d | Armour: %d | House: %d | Business: %d | Hotel room: %d | Gang: %s (%d) Rank: %d", HealthMathFlaw, ArmourMathFlaw, Player[id][House], Player[id][Business], Player[playerid][HotelRoomID], (Player[id][Gang] == 0) ? ("None") : (GroupString), Player[id][Gang], Player[id][GangRank]);
		else format(string, sizeof(string), "Health: %d | Armour: %d | House: %d, %d | Business: %d | Hotel room: %d | Gang: %s (%d) Rank: %d", HealthMathFlaw, ArmourMathFlaw, Player[id][House], Player[id][House2], Player[id][Business], Player[playerid][HotelRoomID], (Player[id][Gang] == 0) ? ("None") : (GroupString), Player[id][Gang], Player[id][GangRank]);
		SendClientMessage(playerid, WHITE, string);

		if(Player[playerid][AdminLevel] >= 1)
		{
			new IP[21];
			GetPlayerIp(id, IP, sizeof(IP));
			if(Player[id][House2] == 0)
				format(string, sizeof(string), "Admin Level: %d | Virtual World: %d | Interior: %d | IP: %s", Player[id][AdminLevel], GetPlayerVirtualWorld(id), GetPlayerInterior(id), IP);
			else
				format(string, sizeof(string), "Admin Level: %d | Virtual World: %d | Interior: %d | IP: %s ", Player[id][AdminLevel], GetPlayerVirtualWorld(id), GetPlayerInterior(id), IP);
			SendClientMessage(playerid, GREY, string);

			new tmpint, tmpint2;
			if(Player[id][nMuted] == 1)
				tmpint = Player[id][nMutedTime] - gettime();
			else
				tmpint = 0;

			if(Player[id][vMuted] == 1)
				tmpint2 = Player[id][vMutedTime] - gettime();
			else
				tmpint2 = 0;

			new rban = (Player[id][reportBan][0] - gettime()) / 60;
			if(rban < 0)
				rban = 0;

			new aban = (Player[id][askBan][0] - gettime()) / 60;
			if(aban < 0)
				aban = 0;

			format(string, sizeof(string), "ID: %d | Ping: %d | nMuted: %d (%d M)(%d) | vMuted: %d (%d M)(%d) | /re-Ban: %d (%d M) | /ask-Ban: %d (%d M) | Tempban Level: %d", id, GetPlayerPing(id), Player[id][nMuted], tmpint/60, Player[id][nMutedLevel], Player[id][vMuted], tmpint2/60, Player[id][vMutedLevel], Player[id][reportBan][1], rban, Player[id][askBan][1], aban, Player[id][TempbanLevel]);

			SendClientMessage(playerid, GREY, string);
			format(string, sizeof(string), "First Warning: %s | Second Warning: %s | Third Warning: %s", Player[id][Warning1], Player[id][Warning2], Player[id][Warning3]);
			SendClientMessage(playerid, GREY, string);

			if(Player[id][PrisonDuration] >= 1)
			{
				if(Player[id][PrisonID] == 1)
				{
					format(string, sizeof(string), "Admin Actions: %s | Prison Time: %d minutes | Geographical Location: %s | Admin Name: %s | Normal Name: %s | AFK: %d/%d", IntToFormattedStr(Player[id][AdminActions]), SecondsToMinutes(Player[id][PrisonDuration]), GetPlayerCountryName(id), Player[id][AdminName], Player[id][NormalName], Player[id][AdminAfkKicks], Player[id][SystemAfkKicks]);
					SendClientMessage(playerid, GREY, string);
				}
				else
				{
					format(string, sizeof(string), "Admin Actions: %s | Jail Time: %d minutes | Geographical Location: %s | Admin Name: %s | Normal Name: %s | AFK: %d/%d", IntToFormattedStr(Player[id][AdminActions]), SecondsToMinutes(Player[id][PrisonDuration]), GetPlayerCountryName(id), Player[id][AdminName], Player[id][NormalName], Player[id][AdminAfkKicks], Player[id][SystemAfkKicks]);
					SendClientMessage(playerid, GREY, string);
				}
			}
			else
			{
				format(string, sizeof(string), "Admin Actions: %s | Geographical Location: %s | Admin Name: %s | Normal Name: %s | AFK: %d/%d", IntToFormattedStr(Player[id][AdminActions]), GetPlayerCountryName(id), Player[id][AdminName], Player[id][NormalName], Player[id][AdminAfkKicks], Player[id][SystemAfkKicks]);
				SendClientMessage(playerid, GREY, string);
			}
		}

		format(string, sizeof(string), "Playing Hours: %d | Money: $%s ($%s) | Bank Money: $%s | %s", Player[id][PlayingHours], IntToFormattedStr(Player[id][Money]), IntToFormattedStr(Player[id][CheckBalance]), IntToFormattedStr(Player[id][BankMoney]));
		SendClientMessage(playerid, WHITE, string);

		new VipString[128], VipExp[128], VipLeft;
		switch(Player[id][VipRank]){
			case 1: format(VipString, sizeof(VipString), "Bronze");
			case 2: format(VipString, sizeof(VipString), "Silver");
			case 3: format(VipString, sizeof(VipString), "Gold");
			case 4: format(VipString, sizeof(VipString), "Gold+");
			case 5: format(VipString, sizeof(VipString), "Admin");
			default: format(VipString, sizeof(VipString), "{CFCFCF}None{FFFFFF}");
		}
		VipLeft = Player[id][VipTime] - gettime();
		if(Player[id][LoyaltyVipHoursLeft] > 0)
			format(VipExp, sizeof(VipExp), " | Expiration: %d playing hours", Player[id][LoyaltyVipHoursLeft]);
		else if(VipLeft > 0 && Player[id][VipRank] < 5 && Player[id][VipRank] > 0)
			format(VipExp, sizeof(VipExp), " | Expiration: %d Days", VipLeft / 86400);

		format(string, sizeof(string), "Married: %s | Rank: %s | VIP: %s%s | VIP Tokens: %d | Hunger: %d%%", Player[id][MarriedTo], Rank , VipString, VipExp, Player[id][VipTokens], Player[id][HungerLevel]);
		SendClientMessage(playerid, WHITE, string);

		new high[10];
		if(Player[id][PotTimer] > 0)
			high = "Pot";
		else if(Player[id][CocaineTimer] > 0)
			high = "Crack";
		else if(GetPlayerDrunkLevel(id) > 0)
			high = "Drunk";
		else
			high = "No";

		if(Player[playerid][AdminLevel] > 1)
		{
			new sql = GetVSQLID(GetPlayerVehicleID(id));
			if(sql == 0 || !IsPlayerInAnyVehicle(id))
				format(string, sizeof(string), "Cuffed: %d | Frozen: %d | Tazed: %d | Tied: %d | High: %s | SQLID: None", Player[id][Cuffed], Player[id][AdminFrozen], Player[id][Tazed], Player[id][Tied], high);
			else
				format(string, sizeof(string), "Cuffed: %d | Frozen: %d | Tazed: %d | Tied: %d | High: %s | SQLID: %d", Player[id][Cuffed], Player[id][AdminFrozen], Player[id][Tazed], Player[id][Tied], high, sql);
			SendClientMessage(playerid, GREY, string);
		}

		new end[255], strt;

		for(new i = 0; i < 5; i++)
		{
			if(Player[id][Cars][i] != 0)
			{
				strt = i;
				break;
			}
		}

		format(string, sizeof(string), "");
		if(Player[playerid][AdminLevel] > 0)
		{
			for(new i = 0; i < 5; i++)
			{
				if(Player[id][Cars][i] > 0)
				{
					if(i != strt)
						strcat(string, " | ");
					format(end, sizeof(end), "%s: %d", vNames[Veh[GetVIndex(Player[id][Cars][i])][Model] - 400], Player[id][Cars][i]);
					strcat(string, end);
				}
			}
		}
		else
		{
			for(new i = 0; i < 5; i++)
			{
				if(Player[id][Cars][i] > 0)
				{
					if(i != strt)
						strcat(string, " | ");
					format(end, sizeof(end), "Vehicle %d: %s", i + 1, vNames[Veh[GetVIndex(Player[id][Cars][i])][Model] - 400]);
					strcat(string, end);
				}
			}
		}
		if(!isnull(string))
			SendClientMessage(playerid, WHITE, string);

		if(Player[playerid][AdminLevel] > 1)
		{
			switch(Player[id][LastDeathReason])
			{
				case 0 .. 46: format(string, sizeof(string), "Last death reason: %s", weapons[Player[id][LastDeathReason]]);
				case 47: format(string, sizeof(string), "Last death reason: Fake Pistol");
				case 49: format(string, sizeof(string), "Last death reason: Vehicle");
				case 50: format(string, sizeof(string), "Last death reason: Heli Blades");
				case 51: format(string, sizeof(string), "Last death reason: Explosion");
				case 53: format(string, sizeof(string), "Last death reason: Drowned");
				case 54: format(string, sizeof(string), "Last death reason: Falling");
				default: format(string, sizeof(string), "Last death reason: %d", Player[id][LastDeathReason]);
			}

			SendClientMessage(playerid, -1, string);
		}

		SendClientMessage(playerid, GREY, "-------------------------------------------------------------------------------------------------------------------------------------");
	}
	else
	{
		SendClientMessage(playerid, WHITE, "You can only view the statistics of a player that is a lower admin level, compared to you.");
	}
	return 1;
}

stock ShowRemoteStatistics(playerid, name[])
{
	if(!IsPlayerRegistered(name))
		return SendClientMessage(playerid, WHITE, "That player doesn't exist.");

	new query[255];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM playeraccounts WHERE NormalName = '%e'", name);
	new Cache:data = mysql_query(MYSQL_MAIN, query);

	if(!cache_is_valid(data))
		return SendClientMessage(playerid, WHITE, "An error occured while remote checking that player.");

	if(Player[playerid][AdminLevel] >= cache_get_field_content_int(0, "AdminLevel"))
	{
		new string[255], GenderString[23], Rank[50], GroupString[64], JobString[32], Job2String[32], RaceString[16], country[128];
		SendClientMessage(playerid, WHITE, "-------------------------------------------------------------------------------------------------------------------------------------");

		if(cache_get_field_content_int(0, "Gender") == 1)
			format(GenderString, sizeof(GenderString), "Male");
		else
			format(GenderString, sizeof(GenderString), "Female");

		if(cache_get_field_content_int(0, "Job") >= 1)
			format(JobString, sizeof(JobString), "%s", Jobs[cache_get_field_content_int(0, "Job")][JobName]);
		else
			format(JobString, sizeof(JobString), "Unemployed");

		if(cache_get_field_content_int(0, "Job2") >= 1)
			format(Job2String, sizeof(Job2String), "%s", Jobs[cache_get_field_content_int(0, "Job2")][JobName]);
		else format(Job2String, sizeof(Job2String), "Unemployed");

		if(cache_get_field_content_int(0, "Group")  >= 1)
			format(GroupString, sizeof(GroupString), "%s", Groups[cache_get_field_content_int(0, "Group")][GroupName]);
		else
			format(GroupString, sizeof(GroupString), "None");

		if(cache_get_field_content_int(0, "Race") == 0)
			format(RaceString, sizeof(RaceString), "White");
		else if(cache_get_field_content_int(0, "Race") == 1)
			format(RaceString, sizeof(RaceString), "Black");
		else if(cache_get_field_content_int(0, "Race") == 2)
			format(RaceString, sizeof(RaceString), "Asian");
		else if(cache_get_field_content_int(0, "Race") == 3)
			format(RaceString, sizeof(RaceString), "Hispanic");

		if(cache_get_field_content_int(0, "PlayingHours") < 2 )
			format(Rank, sizeof(Rank), "%s\n", OOCRanks[Rank1]);
		else if(cache_get_field_content_int(0, "PlayingHours") < 75)
			format(Rank, sizeof(Rank), "%s\n", OOCRanks[Rank2]);
		else if(cache_get_field_content_int(0, "PlayingHours") < 250)
			format(Rank, sizeof(Rank), "%s\n", OOCRanks[Rank3]);
		else if(cache_get_field_content_int(0, "PlayingHours") < 750)
			format(Rank, sizeof(Rank), "%s\n", OOCRanks[Rank4]);
		else if(cache_get_field_content_int(0, "PlayingHours") < 1250)
			format(Rank, sizeof(Rank), "%s\n", OOCRanks[Rank5]);
		else if(cache_get_field_content_int(0, "PlayingHours") < 2000)
			format(Rank, sizeof(Rank), "%s\n", OOCRanks[Rank6]);
		else
			format(Rank, sizeof(Rank), "%s\n", OOCRanks[Rank7]);

		new tmpint = cache_get_field_content_int(0, "Banned"), banstr[64];
		switch(tmpint)
		{
			case -1:
			format(banstr, sizeof(banstr), "Unbanned");
			case 0:
			format(banstr, sizeof(banstr), "Offline");
			case 1:
			format(banstr, sizeof(banstr), "Banned");
			case 2:
			format(banstr, sizeof(banstr), "Permabanned");
			case 3:
			format(banstr, sizeof(banstr), "Tempbanned");
		}

		new IP[21];
		cache_get_field_content(0, "LastIP", IP);
		GetIPCountry(playerid, IP); //GetPVarInt(playerid, "IP_COUNTRY_LOOKUP_RESULT") for result
		GetPVarString(playerid, "IP_COUNTRY_LOOKUP_RESULT", country, sizeof(country));
		DeletePVar(playerid, "IP_COUNTRY_LOOKUP_RESULT");

		format(string, sizeof(string), "Name: %s (%d) | Last login: %d/%d/%d %02d:%02d | Last IP: %s | Status: %s | Location: %s", name, cache_get_field_content_int(0, "AdminLevel"), cache_get_field_content_int(0, "LastLoginMonth"), cache_get_field_content_int(0, "LastLoginDay"), cache_get_field_content_int(0, "LastLoginYear"), cache_get_field_content_int(0, "LastLoginHour"), cache_get_field_content_int(0, "LastLoginMinute"), IP, banstr, country);
		SendClientMessage(playerid, GREY, string);

		new banReason[32], bannedBy[25];
		cache_get_field_content(0, "BannedReason", banReason);
		cache_get_field_content(0, "BannedBy", bannedBy);
		if(tmpint == 1 || tmpint == 2)
		{
			format(string, sizeof(string), "Ban reason: %s | Banned by: %s", banReason, bannedBy);
			SendClientMessage(playerid, GREY, string);
		}
		else if(tmpint == 3)
		{
			new tmpbantime = cache_get_field_content_int(0, "TempbanTime") - gettime();
			new tmpbantime2, tmpbanstr[128];

			if(tmpbantime < 3600)
			{
				tmpbantime2 = tmpbantime / 60;
				format(tmpbanstr, sizeof(tmpbanstr), "%d M", tmpbantime2);
			}
			else if(tmpbantime < 86400)
			{
				tmpbantime2 = tmpbantime / 60;
				tmpbantime = tmpbantime2 / 60;
				format(tmpbanstr, sizeof(tmpbanstr), "%d H", tmpbantime);
			}
			else
			{
				tmpbantime2 = tmpbantime / 84600;
				format(tmpbanstr, sizeof(tmpbanstr), "%d D", tmpbantime2);
			}

			format(string, sizeof(string), "Tempban reason: %s | Tempbanned by: %s | Tempban Duration: %s (%d)", banReason, bannedBy, tmpbanstr, cache_get_field_content_int(0, "TempbanLevel"));
			SendClientMessage(playerid, GREY, string);
		}

		new GangString[32];
		if(cache_get_field_content_int(0, "Gang") > 0)
			format(GangString, sizeof(GangString), "%s", Gangs[cache_get_field_content_int(0, "Gang")][GangName]);

		format(string, sizeof(string), "Gender: %s | Age: %d | Race: %s | Job: %s, %s | Faction: %s (%d) Rank: %d ", GenderString, cache_get_field_content_int(0, "Age"), RaceString, JobString, Job2String, GroupString, cache_get_field_content_int(0, "Group"), cache_get_field_content_int(0, "GroupRank"));
		SendClientMessage(playerid, GREY, string);

		new ArmourMathFlaw, HealthMathFlaw;
		HealthMathFlaw = floatround(cache_get_field_content_float(0, "LastHealth"), floatround_ceil);
		ArmourMathFlaw = floatround(cache_get_field_content_float(0, "LastArmour"), floatround_ceil);
		format(string, sizeof(string), "Health: %d | Armour: %d | House: %d, %d | Business: %d | Hotel room: %d | Gang: %s (%d) Rank: %d", HealthMathFlaw, ArmourMathFlaw, cache_get_field_content_int(0, "House"), cache_get_field_content_int(0, "House2"), cache_get_field_content_int(0, "Business"), cache_get_field_content_int(0, "HotelRoomID"), (cache_get_field_content_int(0, "Gang") > 0) ? (GangString) : ("None"), cache_get_field_content_int(0, "Gang"), cache_get_field_content_int(0, "GangRank"));
		SendClientMessage(playerid, GREY, string);

		new tmpint2;
		if(cache_get_field_content_int(0, "nMuted") == 1)
			tmpint = cache_get_field_content_int(0, "nMutedTime") - gettime();
		else
			tmpint = 0;

		if(cache_get_field_content_int(0, "vMuted") == 1)
			tmpint2 = cache_get_field_content_int(0, "vMutedTime") - gettime();
		else
			tmpint2 = 0;

		new rban = (cache_get_field_content_int(0, "ReportBanTime") - gettime()) / 60;
		if(rban < 0)
			rban = 0;

		new aban = (cache_get_field_content_int(0, "AskBanTime") - gettime()) / 60;
		if(aban < 0)
			aban = 0;

		format(string, sizeof(string), "nMuted: %d (%d M)(%d) | vMuted: %d (%d M)(%d) | /re-Ban: %d (%d M) | /ask-Ban: %d (%d M) | Tempban Level: %d", cache_get_field_content_int(0, "nMuted"), tmpint/60, cache_get_field_content_int(0, "nMutedLevel"), cache_get_field_content_int(0, "vMuted"), tmpint2/60, cache_get_field_content_int(0, "vMutedLevel"), cache_get_field_content_int(0, "ReportBanLevel"), rban, cache_get_field_content_int(0, "AskBanLevel"), aban, cache_get_field_content_int(0, "TempbanLevel"));
		SendClientMessage(playerid, GREY, string);

		new Warning1String[128], Warning2String[128], Warning3String[128];
		cache_get_field_content(0, "Warning1", Warning1String);
		cache_get_field_content(0, "Warning2", Warning2String);
		cache_get_field_content(0, "Warning3", Warning3String);
		format(string, sizeof(string), "First Warning: %s | Second Warning: %s | Third Warning: %s", Warning1String, Warning2String, Warning3String);
		SendClientMessage(playerid, GREY, string);

		new NormalNameString[25], AdminNameString[25];
		cache_get_field_content(0, "NormalName", NormalNameString);
		cache_get_field_content(0, "AdminName", AdminNameString);
		if(cache_get_field_content_int(0, "PrisonDuration") >= 1)
		{
			if(cache_get_field_content_int(0, "PrisonID") == 1)
			{
				format(string, sizeof(string), "Admin Actions: %s | Prison Time: %d minutes | Admin Name: %s | Normal Name: %s | AFK: %d/%d", IntToFormattedStr(cache_get_field_content_int(0, "AdminActions")), SecondsToMinutes(cache_get_field_content_int(0, "PrisonDuration")), AdminNameString, NormalNameString, cache_get_field_content_int(0, "AdminAfkKicks"), cache_get_field_content_int(0, "SystemAfkKicks"));
				SendClientMessage(playerid, GREY, string);
			}
			else
			{
				format(string, sizeof(string), "Admin Actions: %s | Jail Time: %d minutes | Admin Name: %s | Normal Name: %s | AFK: %d/%d", IntToFormattedStr(cache_get_field_content_int(0, "AdminActions")), SecondsToMinutes(cache_get_field_content_int(0, "PrisonDuration")), AdminNameString, NormalNameString, cache_get_field_content_int(0, "AdminAfkKicks"), cache_get_field_content_int(0, "SystemAfkKicks"));
				SendClientMessage(playerid, GREY, string);
			}
		}
		else
		{
			format(string, sizeof(string), "Admin Actions: %s | Admin Name: %s | Normal Name: %s | AFK: %d/%d", IntToFormattedStr(cache_get_field_content_int(0, "AdminActions")), AdminNameString, NormalNameString, cache_get_field_content_int(0, "AdminAfkKicks"), cache_get_field_content_int(0, "SystemAfkKicks"));
			SendClientMessage(playerid, GREY, string);
		}

		format(string, sizeof(string), "Playing Hours: %d | Money: $%s ($%s) | Bank Money: $%s", cache_get_field_content_int(0, "PlayingHours"), IntToFormattedStr(cache_get_field_content_int(0, "Money")), IntToFormattedStr(cache_get_field_content_int(0, "CheckBalance")), IntToFormattedStr(cache_get_field_content_int(0, "BankMoney")));
		SendClientMessage(playerid, GREY, string);

		new VipString[128], VipExp[128], VipLeft;
		switch(cache_get_field_content_int(0, "VipRank")){
			case 1: format(VipString, sizeof(VipString), "Bronze");
			case 2: format(VipString, sizeof(VipString), "Silver");
			case 3: format(VipString, sizeof(VipString), "Gold");
			case 4: format(VipString, sizeof(VipString), "Gold+");
			case 5: format(VipString, sizeof(VipString), "Admin");
			default: format(VipString, sizeof(VipString), "{CFCFCF}None");
		}
		VipLeft = cache_get_field_content_int(0, "VipTime") - gettime();
		if(VipLeft > 0 && TempPlayer[playerid][VipRank] < 5 && TempPlayer[playerid][VipRank] > 0)
			format(VipExp, sizeof(VipExp), " | Expiration: %d Days", VipLeft / 86400);

		cache_get_field_content(0, "MarriedTo", NormalNameString);
		format(string, sizeof(string), "Married: %s | Rank: %s | VIP: %s%s | VIP Tokens: %d", NormalNameString, Rank, VipString, VipExp, cache_get_field_content_int(0, "VipTokens"));
		SendClientMessage(playerid, GREY, string);

		new Cache:result, count;
		mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM vehicles WHERE owner = '%e'", name);
		result = mysql_query(MYSQL_MAIN, query);
		count = cache_get_row_count();
		new cars[5][2], slot, end[255];

		while(slot < count)
		{
			cars[slot][0] = cache_get_field_content_int(slot, "sqlid");
			cars[slot][1] = cache_get_field_content_int(slot, "model");

			slot++;
		}
		cache_delete(result);

		format(string, sizeof(string), "");
		for(new i = 0; i < 5; i++)
		{
			if(cars[i][0] > 0){
				if(i != 0)
					strcat(string, " | ");
				format(end, sizeof(end), "%s: %d", vNames[cars[i][1] - 400], cars[i][0]);
				strcat(string, end);
			}
		}
		if(!isnull(string))
			SendClientMessage(playerid, GREY, string);

		SendClientMessage(playerid, WHITE, "-------------------------------------------------------------------------------------------------------------------------------------");
	}
	else
	{
		SendClientMessage(playerid, GREY, "You can only view the statistics of a Player that is a lower admin level, compared to you.");
	}
	cache_delete(data);
	return 1;
}

stock IsPlayerInRangeOfVehicle(playerid, vehicleid, Float: radius)
{
	new Float: CarPoX, Float: CarPoY, Float: CarPoZ;
	GetVehiclePos(vehicleid, CarPoX, CarPoY, CarPoZ);
	return IsPlayerInRangeOfPoint(playerid, radius, CarPoX, CarPoY, CarPoZ);
}

//--------------------------------------------------------------------------------------------------
command(stats, playerid, params[])
{
	#pragma unused params
	ShowStatistics(playerid, playerid);
	return 1;
}

CMD:usecocaine(playerid, params[])
{
	if(isnull(params))
		return SendClientMessage(playerid, GREY, "SYNTAX: /usecocaine <amount>");

	if(strval(params) > Player[playerid][Cocaine])
		return SendClientMessage(playerid, -1, "You don't have that much cocaine");

	if(strval(params) < 1)
		return SendClientMessage(playerid, -1, "You must use atleast 1 cocaine");

	if(Player[playerid][CocaineTimer] > 0)
		return SendClientMessage(playerid, -1, "You're already high on cocaine.");

	if(strval(params) > 10)
		return SendClientMessage(playerid, -1, "You can only sniff 10 grams at max!");

	if(CantUseRightNow(playerid))
		return SendClientMessage(playerid, -1, "Nope, you can't use that right now.");

	new str[128], Float:armour;
	GetPlayerArmour(playerid, armour);

	if(armour + (strval(params) * 13) > 100)
		SetPlayerArmour(playerid, 100);
	else
		SetPlayerArmour(playerid, armour + (strval(params) * 13));

	Player[playerid][Cocaine] -= strval(params);

	SetPlayerWeather(playerid, 9);
	SetPlayerDrunkLevel(playerid, 40000);
	Player[playerid][CocaineTimer] = gettime() + ( 1 * strval(params) ) * 60;

	format(str, sizeof(str), "* %s has sniffed %d grams of cocaine", GetNameEx(playerid), strval(params));
	NearByMessage(playerid, NICESKY, str);
	return 1;
}

CMD:usepot(playerid, params[])
{
	if(isnull(params))
		return SendClientMessage(playerid, GREY, "SYNTAX: /usepot <amount>");

	if(strval(params) > Player[playerid][Pot])
		return SendClientMessage(playerid, -1, "You don't have that much pot");

	if(strval(params) < 1)
		return SendClientMessage(playerid, -1, "You must use atleast 1 pot");

	if(Player[playerid][PotTimer] > 0)
		return SendClientMessage(playerid, -1, "You're already high on pot.");

	if(strval(params) > 10)
		return SendClientMessage(playerid, -1, "You can only smoke 10 grams at max!");

	if(CantUseRightNow(playerid))
		return SendClientMessage(playerid, -1, "Nope, you can't use that right now.");

	new str[128], Float:health;
	GetPlayerHealth(playerid, health);

	if(health + (strval(params) * 13) > 100)
		SetPlayerHealth(playerid, 100);
	else
	SetPlayerHealth(playerid, health + (strval(params) * 13));

	Player[playerid][Pot] -= strval(params);
	SetPlayerWeather(playerid, 32);
	SetPlayerDrunkLevel(playerid, 10000);
	Player[playerid][PotTimer] = gettime() + ( 1 * strval(params) ) * 60;

	format(str, sizeof(str), "* %s lights a blunt and begins to smoke it.", GetNameEx(playerid));
	NearByMessage(playerid, NICESKY, str);
	if(!IsPlayerInAnyVehicle(playerid))
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
	return 1;
}

command(time, playerid, params[])
{
	new id;
	if(isnull(params) || Player[playerid][AdminLevel] < 2)
		id = playerid;
	else if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /time ([id])");

	if(!IsPlayerConnected(id))
		return SendClientMessage(playerid, -1, "That player is not connected");

	new string[128], hour, minute, second;
	gettime(hour, minute, second);

	SendClientMessage(playerid, GREY, "----------------------------------------");

	if(id == playerid)
		SendClientMessage(playerid, GREY, "TIME");
	else
	{
		format(string, sizeof(string), "TIME (%s)", GetName(id));
		SendClientMessage(playerid, GREY, string);
	}

	format(string, sizeof(string), "The current server time is %02d:%02d:%02d.", (hour + 4 >= 24) ? ((hour + 4) - 24) : (hour + 4), minute, second);
	SendClientMessage(playerid, WHITE, string);

	format(string, sizeof(string), "%d minute(s), %d seconds until your next paycheck!", SecondsToMinutes(3600-Player[id][SecondsLoggedIn]), (3600-Player[id][SecondsLoggedIn]) % 60);
	SendClientMessage(playerid, GREY, string);

	if(GetPVarInt(id, "MechanicReload") > gettime())
	{
		format(string, sizeof(string), "%d minute(s), %d seconds until you can repair a car again.", (GetPVarInt(id, "MechanicReload")-gettime()) / 60, (GetPVarInt(id, "MechanicReload")-gettime()) % 60);
		SendClientMessage(playerid, GREY, string);
	}

	if(Player[id][PotTimer] >= 1)
	{
		format(string, sizeof(string), "%d minute(s), %d seconds until you're no longer high on pot.", (Player[id][PotTimer]-gettime()) / 60, (Player[id][PotTimer]-gettime()) % 60);
		SendClientMessage(playerid, GREY, string);
	}

	if(Player[id][CocaineTimer] >= 1)
	{
		format(string, sizeof(string), "%d minute(s), %d seconds until you're no longer high on cocaine.", (Player[id][CocaineTimer]-gettime()) / 60, (Player[id][CocaineTimer]-gettime()) % 60);
		SendClientMessage(playerid, GREY, string);
	}

	if(Player[id][SpeedTimer] >= 1)
	{
		format(string, sizeof(string), "%d minute(s), %d seconds until you're no longer high on speed.", (Player[id][SpeedTimer]-gettime()) / 60, (Player[id][SpeedTimer]-gettime()) % 60);
		SendClientMessage(playerid, GREY, string);
	}

	if(Player[id][CantFish] > gettime())
	{
		format(string, sizeof(string), "%d minute(s), %d seconds until you can fish again.", (Player[id][CantFish] - gettime()) / 60, (Player[id][CantFish] - gettime()) % 60);
		SendClientMessage(playerid, GREY, string);
	}

	if(Player[id][InabilityToDropCar] > gettime())
	{
		format(string, sizeof(string), "%d minute(s), %d seconds until you can dropcar again.", (Player[id][InabilityToDropCar] - gettime()) / 60, (Player[id][InabilityToDropCar] - gettime()) % 60);
		SendClientMessage(playerid, GREY, string);
	}

	if(Player[id][MatrunInabilityDuration] >= 1)
	{
		format(string, sizeof(string), "%d minute(s), %d seconds until you can matrun again.", (MATRUN_INABILITY_TIME-Player[id][MatrunInabilityDuration]) / 60, (MATRUN_INABILITY_TIME-Player[id][MatrunInabilityDuration]) % 60);
		SendClientMessage(playerid, GREY, string);
	}

	if(Player[id][CanMakeGun] == 0)
	{
		format(string, sizeof(string), "%d minute(s), %d seconds until you can make another gun.", (Player[id][GunTime]-gettime()) / 60, (Player[id][GunTime]-gettime()) % 60);
		SendClientMessage(playerid, GREY, string);
	}

	if(Player[id][JobCooldown] > gettime())
	{
		format(string, sizeof(string), "%d minute(s), %d seconds until you can join a new job.", (Player[id][JobCooldown]-gettime()) / 60, (Player[id][JobCooldown]-gettime()) % 60);
		SendClientMessage(playerid, GREY, string);
	}

	if(Player[id][PizzaCooldown] > gettime())
	{
		if(Player[id][PizzaRun] > 0)
			format(string, sizeof(string), "%d minute(s), %d seconds until your pizzas go cold.", (Player[id][PizzaCooldown]-gettime()) / 60, (Player[id][PizzaCooldown]-gettime()) % 60);
		else
			format(string, sizeof(string), "%d minute(s), %d seconds until you can do another pizza delivery.", (Player[id][PizzaCooldown]-gettime()) / 60, (Player[id][PizzaCooldown]-gettime()) % 60);
		SendClientMessage(playerid, GREY, string);
	}

	if(Player[id][DeliverTime] > gettime())
	{
		format(string, sizeof(string), "%d seconds until you can get more deliverer supplies.", (Player[id][DeliverTime]-gettime()) % 60);
		SendClientMessage(playerid, GREY, string);
	}

	if(Player[id][reportBan][0] > gettime())
	{
		format(string, sizeof(string), "%d minute(s), %d seconds until you can use the report feature again.", (Player[id][reportBan][0]-gettime()) / 60, (Player[id][reportBan][0]-gettime()) % 60);
		SendClientMessage(playerid, GREY, string);
	}

	if(Player[id][askBan][0] > gettime())
	{
		format(string, sizeof(string), "%d minute(s), %d seconds until you can use /ask again.", (Player[id][askBan][0] - gettime()) / 60, (Player[id][askBan][0] - gettime()) % 60);
		SendClientMessage(playerid, GREY, string);
	}

	if(Player[id][GarbageCooldown] > gettime())
	{
		format(string, sizeof(string), "%d minute(s), %d seconds until you can do another garbage run.", (Player[id][GarbageCooldown] - gettime()) / 60, (Player[id][GarbageCooldown] - gettime()) % 60);
		SendClientMessage(playerid, GREY, string);
	}

	if(Player[id][TruckerTestCooldown] > gettime())
	{
		new str[128], time_left = Player[id][TruckerTestCooldown] - gettime(), hours = time_left / 3600;
		if(hours > 1)
			format(str, sizeof(str), "%d hours and %d minutes until next trucker test.", hours, (time_left % 3600) / 60);
		else
			format(str, sizeof(str), "%d minutes and %d seconds until next trucker test.", (time_left % 3600) / 60, (time_left % 60));
		SendClientMessage(playerid, -1, str);
	}

	if(Player[id][SkillCooldown] > gettime())
	{
		new timeLeft = Player[id][SkillCooldown] - gettime();
		format(string, sizeof(string), "You must wait %d hours and %d minutes before you can purchase another skill level.", timeLeft / 3600, (timeLeft % 3600) / 60);
		SendClientMessage(playerid, GREY, string);
	}

	if(Player[id][LicenseSuspended] > gettime())
	{
		new str[128], time_left = Player[id][LicenseSuspended] - gettime();
		format(str, sizeof(str), "%d days, %d hours and %d minutes until your license is unsuspended.", time_left / 86400, (time_left % 86400) / 3600, (time_left % 3600) / 60);
		SendClientMessage(playerid, -1, str);
	}
	
	if(GetPVarInt(playerid, "BugReportCooldown") > gettime())
	{
	   format(string, sizeof(string), "%d minutes(s), %d seconds until you can submit another bug report.", (GetPVarInt(playerid, "BugReportCooldown") - gettime()) / 60, (GetPVarInt(playerid, "BugReportCooldown") - gettime()) % 60);
	   SendClientMessage(playerid, GREY, string);
	}
	
	if(Player[id][SmuggleCooldown] > gettime())
	{
		format(string, sizeof(string), "%d minute(s), %d seconds until you can smuggle another item into the prison.", (Player[id][SmuggleCooldown] - gettime()) / 60, (Player[id][SmuggleCooldown] - gettime()) % 60);
		SendClientMessage(playerid, GREY, string);
	}
	
	if(Player[id][PrisonBuyItemCooldown] > gettime())
	{
		format(string, sizeof(string), "%d minute(s), %d seconds until you can buy another illegal item in prison.", (Player[id][PrisonBuyItemCooldown] - gettime()) / 60, (Player[id][PrisonBuyItemCooldown] - gettime()) % 60);
		SendClientMessage(playerid, GREY, string);
	}
	
	if(Player[id][PrisonJobCooldown] > gettime())
	{
		format(string, sizeof(string), "%d minute(s), %d seconds until you can get another prison job.", (Player[id][PrisonJobCooldown] - gettime()) / 60, (Player[id][PrisonJobCooldown] - gettime()) % 60);
		SendClientMessage(playerid, GREY, string);
	}
	
	if(Player[id][PrisonID] == 2)
	{
		if(Player[id][SolitaryDuration] > 0)
		{
			format(string, sizeof(string), "%d minute(s), %d seconds until you are out of solitary confinement.", (Player[id][SolitaryDuration]) / 60, (Player[id][SolitaryDuration]) % 60);
			SendClientMessage(playerid, GREY, string);
		}
		if(Player[id][PrisonDuration] > 0)
		{
			format(string, sizeof(string), "%d minute(s), %d seconds until your sentence has finished.", (Player[id][PrisonDuration]) / 60, (Player[id][PrisonDuration]) % 60);
			SendClientMessage(playerid, GREY, string);
		}
		else if(Player[playerid][PrisonLifer] != 1)
			SendClientMessage(playerid, GREY, "Your prison sentence has finished. Head to the blue doors in either cell block and type /leaveprison.");
	}

	SendClientMessage(playerid, GREY, "----------------------------------------");
	return 1;
}

command(betauninvite, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /betauninvite [playerid]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
			if(IsPlayerConnectedEx(id))
			{
				if(Player[id][Tester] >= 1)
				{
					Player[id][Tester] = 0;
					format(string, sizeof(string), "You have been removed from the tester team by %s.", GetName(playerid));
					SendClientMessage(id, GREY, string);

					format(string, sizeof(string), "You have uninvited %s from the testers team.", GetName(id));
					SendClientMessage(playerid, WHITE, string);
				}
				else
				{
					SendClientMessage(playerid, WHITE, "That player isn't a tester.");
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "That player isn't connected or is not logged in.");
			}
		}
	}
	return 1;
}

command(betainvite, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /betainvite [playerid]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
			if(IsPlayerConnectedEx(id))
			{
				if(Player[id][Tester] == 0)
				{
					SendClientMessage(id, ADMINORANGE, "You have been invited to participate in the crea BETA program.");
					format(string, sizeof(string), "You have been invited by %s - please type /accept betainvite to participate.", GetName(playerid));
					SendClientMessage(id, WHITE, string);
					Player[id][PendingBETAInvite] = 1;

					format(string, sizeof(string), "You have invited %s to participate in the BETA program.", GetName(id));
					SendClientMessage(playerid, WHITE, string);
				}
				else
				{
					SendClientMessage(playerid, WHITE, "That player is already a tester.");
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "That player isn't connected or is not logged in.");
			}
		}
	}
	return 1;
}

command(listtesters, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tester] >= 1)
	{
		new string[128];

		SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");

		foreach(Player, i)
		{
			if(Player[i][Tester] >= 1)
			{
				format(string, sizeof(string), "TESTER: %s", GetName(i));
				SendClientMessage(playerid, GREY, string);
			}
		}

		SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");

	}
	return 1;
}



stock IsPlayerInPlane(playerid) {
	switch(GetVehicleModel(GetPlayerVehicleID(playerid))){
		case 592,577,511,512,593,520,553,476,519,460,513,548,
		425,417,487,488,563,447,469:return 1;
	}
	return 0;
}
stock NearestVehicle(playerid)
{
	new vehicleid, Float:dist = 1000, Float:tmpdis;

	new Float:x, Float:y, Float:z;
	new Float:px, Float:py, Float:pz;
	GetPlayerPos(playerid, px, py, pz);
	new pv = GetPlayerVehicleID(playerid);

	for(new i = 0; i < MAX_VEHICLES; i++)
	{
		if(Veh[i][Link] < 1)
			continue;

		new v = Veh[i][Link];

		GetVehiclePos(v, x, y, z);
		tmpdis = floatsqroot(floatpower(floatabs(floatsub(px,x)),2)+floatpower(floatabs(floatsub(py,y)),2)+floatpower(floatabs(floatsub(pz,z)),2));
		if((tmpdis < dist) && (v != pv))
		{
			dist = tmpdis;
			vehicleid = v;
		}
	}
	return vehicleid;
}


new VehicleSeats[] =
{
	4,2,2,2,4,4,1,2,2,4,2,2,2,4,2,2,4,2,4,2,4,4,2,2,2,1,4,4,4,2,1,9,1,2,2,1,2,9,4,2,
	4,1,2,2,2,4,1,2,1,6,1,2,1,1,1,2,2,2,4,4,2,2,2,2,2,2,4,4,2,2,4,2,1,1,2,2,1,2,2,4,
	2,1,4,3,1,1,1,4,2,2,4,2,4,1,2,2,2,4,4,2,2,2,2,2,2,2,2,4,2,1,1,2,1,1,2,2,4,2,2,1,
	1,2,2,2,2,2,2,2,2,4,1,1,1,2,2,2,2,0,0,1,4,2,2,2,2,2,4,4,2,2,4,4,2,1,2,2,2,2,2,2,
	4,4,2,2,1,2,4,4,1,0,0,1,1,2,1,2,2,2,2,4,4,2,4,1,1,4,2,2,2,2,6,1,2,2,2,1,4,4,4,2,
	2,2,2,2,4,2,1,1,1,4,1,1
};

stock GetMaxVehicleSeats(vehicleid)
{
	return VehicleSeats[GetVehicleModel(vehicleid) - 400];
}

command(closestcar, playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(NearestVehicle(playerid) == 0)
		return SendClientMessage(playerid, -1, "No vehicle currently exists in range");

	new seat = strval(params);
	if(isnull(params))
		seat = 0;

	if(GetMaxVehicleSeats(NearestVehicle(playerid)) <= seat)
		return SendClientMessage(playerid, -1, "That vehicle doesn't have that many seats!");

	if(IsSeatOccupied(NearestVehicle(playerid), seat))
		return SendClientMessage(playerid, -1, "That seat is already occupied.");

	PutPlayerInVehicle(playerid, NearestVehicle(playerid), seat);
	SendClientMessage(playerid, -1, "You've been put in the nearest vehicle");

	if(Player[playerid][PartyBussin] > 0)
	{
		KillTimer(Player[playerid][PartyBusTimer]);
		SendClientMessage(playerid, -1, "You have disabled party bus.");
		Player[playerid][PartyBussin] = 0;
	}

	return 1;
}

command(resetpass, playerid, params[])
{
	if (Player[playerid][AdminLevel] >= 3){
		new name[128], password[161];


		if(sscanf(params, "s[128]s[128]", name, password))
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /resetpass [name] [password]");
		}
		else
		{

			if(IsPlayerRegistered(name))
			{
				if(GetRemoteAdminLevel(name) >= Player[playerid][AdminLevel])
					return SendClientMessage(playerid, WHITE, "You can't change this user's password.");

				new salt[32], buff[162], query[384];
				randomString(salt, 31);
				strcat(password, salt, sizeof(password));
				WP_Hash(buff, sizeof(buff), password);

				mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE playeraccounts SET Password = '%e', pSalt = '%e' WHERE NormalName = '%e'", buff, salt, name);
				mysql_tquery(MYSQL_MAIN, query, "OnQueryFinish", "dddss", THREAD_RESET_PASSWORD, playerid, 0, name, password);
			}
			else
			{
				SendClientMessage(playerid, WHITE, "That user does not exist.");
			}
		}
	}
	return 1;
}

command(prison, playerid, params[])
{
	new id, string[128], time, reason[128];

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(sscanf(params, "uds[128]", id, time, reason))
		return SendClientMessage(playerid, GREY, "SYNTAX: /prison [playerid] [time] [reason]");

	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, -1, "That player isn't connected!");

	if(Player[playerid][AdminLevel] < Player[id][AdminLevel])
		return SendClientMessage(playerid, -1, "You can't prison a higher level administrator.");

	else
	{
		if(time > 999999)
			return SendClientMessage(playerid, -1, "Keep the time under 999,999.");


		if(time == 0)
		{
			if(Player[id][PrisonDuration] >= 1)
			{
				SetPlayerVirtualWorld(playerid, SpawnWorld);
				format(string, sizeof(string), "Prison: %s has been released from prison by %s. Reason: \"%s\"", GetName(id), Player[playerid][AdminName], reason);
				SendToAdmins(LIGHTRED, string, 0);
				NearByMessage(id, LIGHTRED, string);
				Player[id][PrisonDuration] = 0;
				Player[id][PrisonReason] = 0;
				format(string, sizeof(string), "%s has been released from prison by %s. Reason: \"%s\"", GetName(id), Player[playerid][AdminName], reason);
				AdminActionsLog(string);
			}

			else
				return SendClientMessage(playerid, -1, "You can't release someone who isn't prisoned.");
		}

		else
		{
			format(string, sizeof(string), "Prison: %s has been prisoned by %s. Reason: \"%s\" (%d minutes)", GetName(id), Player[playerid][AdminName], reason, time);
			SendToAdmins(LIGHTRED, string, 0);
			NearByMessage(id, LIGHTRED, string);
			Player[id][PrisonDuration] = time*60;
			Player[id][PrisonID] = 1;
			format(Player[id][PrisonReason], 128, reason);
			format(string, sizeof(string), "Prison: %s has been prisoned by %s. Reason: \"%s\" (%d minutes)", GetName(id), Player[playerid][AdminName], reason, time);
			AdminActionsLog(string);
			Player[playerid][AdminActions]++;

			if(IsPlayerInAnyVehicle(id))
				RemovePlayerFromVehicle(id);

			foreach(Player, i)
			{
				if(Player[i][BeingDraggedBy] == id)
				{
					Player[i][BeingDraggedBy] = -1;
				}
			}

			ResetPlayerWeaponsEx(id);
			SetPlayerInterior(id, Prison1Int);
			SetPlayerPos_Update(id, Prison1X, Prison1Y, Prison1Z);
			//SetPlayerVirtualWorld(id, Prison1World);
			SetPlayerVirtualWorld(id, id);
		}
	}

	return 1;
}

command(knock, playerid, params[])
{
	#pragma unused params
    if(GetPVarInt(playerid, "knockCD") > gettime())
        return 1;
	new string[128];
	for(new i = 0; i < sizeof(Houses); i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3, Houses[i][hExteriorX], Houses[i][hExteriorY], Houses[i][hExteriorZ]))
		{
			if(GetPlayerVirtualWorld(playerid) == 0)
			{
				foreach(Player, j)
				{
					if(Player[j][InHouse] == i)
					{
						SendClientMessage(j, NICESKY, "Somebody has knocked on the door!");
					}
				}

				format(string, sizeof(string), "* %s knocks on the door.", GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, string);
				SetPVarInt(playerid, "knockCD", gettime() + 2);
			}
		}
	}
	return 1;
}

command(togglenewbie, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][AdminLevel] >= 2)
	{
		if(NewbieEnabled == 1)
		{
			NewbieEnabled = 0;
			format(string, sizeof(string), "%s has disabled Newbie Chat.", Player[playerid][AdminName]);
			SendClientMessageToAll(LIGHTRED, string);
			AdminActionsLog(string);
		}
		else
		{
			NewbieEnabled = 1;
			format(string, sizeof(string), "%s has enabled Newbie Chat.", Player[playerid][AdminName]);
			SendClientMessageToAll(LIGHTRED, string);
			AdminActionsLog(string);
		}
	}
	return 1;
}

command(n, playerid, params[])
{
	if(GetPVarInt(playerid, "ShortCMDS") == 0)
		return cmd_newbie(playerid, params);
	return SendClientMessage(playerid, -1, "ShortCMDS are disabled, you must use /newbie");
}

command(getmotd, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][Group] >= 1)
	{
		format(string, sizeof(string), "Faction MOTD: %s", Groups[Player[playerid][Group]][MOTD]);
		SendClientMessage(playerid, ANNOUNCEMENT, string);
	}
	return 1;
}

command(notetoplayer, playerid, params[])
{
	new note[128], name[32];
	if(sscanf(params, "s[32]s[128]", name, note))
	{
		if(Player[playerid][AdminLevel] >= 2)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /notetoplayer [name] [note]");
		}
	}
	else
	{
		if(strlen(name) >= 1 && strlen(note) >= 1)
		{
			if(Player[playerid][AdminLevel] >= 2)
			{
				if(IsPlayerRegistered(name))
				{
					new query[384];
					mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE playeraccounts SET Note = '%e' WHERE NormalName = '%e'", note, name);
					mysql_tquery(MYSQL_MAIN, query, "OnQueryFinish", "dddss", THREAD_PLAYER_NOTE, playerid, 0, name, note);
				}
				else
				{
					SendClientMessage(playerid, WHITE, "That account doesn't exist.");
				}
			}
		}
	}
	return 1;
}

command(motd, playerid, params[])
{
	new NewMOTD[128], string[128];
	sscanf(params, "s[128]", NewMOTD);

	if(isnull(NewMOTD) && Player[playerid][Group] > 0)
	{
		format(string, sizeof(string), "Faction MOTD: %s", Groups[Player[playerid][Group]][MOTD]);
		return SendClientMessage(playerid, ANNOUNCEMENT, string);
	}

	if(Player[playerid][Group] >= 1 && Player[playerid][GroupRank] >= 5)
	{
		format(Groups[Player[playerid][Group]][MOTD], 128, "%s", NewMOTD);
		format(string, sizeof(string), "You have changed your faction's MOTD to: %s.", NewMOTD);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "The Faction MOTD has been changed to: %s (by %s).", NewMOTD, GetName(playerid));
		GroupMessage(playerid, ANNOUNCEMENT, string);
	}
	return 1;
}

command(changename, playerid, params[])
{
	new id, NewName[MAX_PLAYER_NAME], updateLvpdDb;
	if(sscanf(params, "us[24]D(0)", id, NewName, updateLvpdDb))
	{
		if(Player[playerid][AdminLevel] >= 3)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /changename [playerid] [new name] <update LSPD Database (Optional; Use 1 as value if yes)>");
		}
	}
	else
	{
		new CurrentName[MAX_PLAYER_NAME], string[128];

		if(Player[playerid][AdminLevel] >= 3)
		{
			if(Player[id][AdminLevel] >= 3 && Player[playerid][AdminLevel] < 6)
			{
				SendClientMessage(playerid, WHITE, "You must have permission from a level 6 to change another administrators' name.");
			}
			else
			{
				if(Player[playerid][AdminLevel] >= Player[id][AdminLevel])
				{
					if(strlen(NewName) >= 3 && strlen(NewName) < MAX_PLAYER_NAME)
					{
						GetPlayerName(id, CurrentName, sizeof(CurrentName));
						if(IsPlayerRegistered(NewName))
						{
							SendClientMessage(playerid, WHITE, "That account name is already registered.");
						}
						else
						{
							SavePlayerData(id);

							format(Player[id][NormalName], MAX_PLAYER_NAME, "%s", NewName);
							SetPlayerNameEx(id, NewName);
							new query[384];

							//Making sure old name can't be used again
							new oldSQL = Player[id][pSQL_ID];
							mysql_format(MYSQL_MAIN, query, sizeof(query), "CREATE TEMPORARY TABLE playeraccountstemp SELECT * FROM playeraccounts WHERE SQLID = '%d'", oldSQL);
							mysql_query(MYSQL_MAIN, query, false);
							mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE playeraccountstemp SET SQLID = NULL, NormalName = '%e'", NewName);
							mysql_query(MYSQL_MAIN, query, false);
							mysql_query(MYSQL_MAIN, "INSERT INTO playeraccounts SELECT * FROM playeraccountstemp", false);
							mysql_query(MYSQL_MAIN, "DROP TABLE playeraccountstemp", false);

							Player[id][pSQL_ID] = GetRemoteIntValue(NewName, "SQLID");

							//mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE playertoys SET PlayerSQLID = '%d' WHERE PlayerSQLID = '%d'", Player[id][pSQL_ID], oldsql);
							//mysql_query(MYSQL_MAIN, query, false);

							//Transfering old name warnings to new name without removing old name warnings
							mysql_format(MYSQL_MAIN, query, sizeof(query), "CREATE TEMPORARY TABLE WarnHistoryTemp SELECT * FROM WarnHistory WHERE playerSQLID = '%d'", oldSQL);
							mysql_query(MYSQL_MAIN, query, false);
							mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE WarnHistoryTemp SET pName = '%e', warnSQLID = NULL, playerSQLID = '%d'", NewName, Player[id][pSQL_ID]);
							mysql_query(MYSQL_MAIN, query, false);
							mysql_query(MYSQL_MAIN, "INSERT INTO WarnHistory SELECT * FROM WarnHistoryTemp", false);
							mysql_query(MYSQL_MAIN, "DROP TABLE WarnHistoryTemp", false);
							
							mysql_format(MYSQL_MAIN, query, sizeof(query), "INSERT INTO account_directory (sqlid, name) VALUES ('%d', '%e')", Player[id][pSQL_ID], NewName);
							mysql_query(MYSQL_MAIN, query, false);
							
							SavePlayerData(id);

							format(string, sizeof(string), "WARNING: Server Admin %s has renamed %s to %s. (New SQLID: %d)", GetName(playerid), CurrentName, NewName, Player[id][pSQL_ID]);
							AdminActionsLog(string);
							NamechangeLog(string);
							SendToAdmins(ADMINORANGE, string, 1);

							if(Player[id][Business] >= 1 || Player[id][House] >= 1)
							{
								if(strcmp(Businesses[Player[id][Business]][bOwner], CurrentName, true) == 0)
								{
									format(Businesses[Player[id][Business]][bOwner], MAX_PLAYER_NAME, "%s", NewName);
								}

								if(strcmp(Houses[Player[id][House]][hOwner], CurrentName, true) == 0)
								{
									format(Houses[Player[id][House]][hOwner], 255, "%s", NewName);
								}
							}

							if(updateLvpdDb == 1)
							{
								mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE PoliceCrimes SET criminalName = \'%e\' WHERE criminalName = \'%e\'", NewName, CurrentName);
								mysql_query(MYSQL_MAIN, query, false);
								mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE PoliceTickets SET offenderName = \'%e\' WHERE offenderName = \'%e\'", NewName, CurrentName);
								mysql_query(MYSQL_MAIN, query, false);
								Player[id][LicenseSuspended] = 0;
							}
							
							mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE phones SET owner = '%e' WHERE owner = '%e'", NewName, CurrentName);
							mysql_query(MYSQL_MAIN, query, false);
							
							if(!PlayerOwnsPhone(id))
							{
								Player[id][PhoneN] = -1;
							}
							
							for(new i; i < 5; i++)
							{
								if(Player[id][Cars][i] != 0)
								{
									format(Veh[GetVIndex(Player[id][Cars][i])][Owner], 24, NewName);
									SaveVehicle(Player[id][Cars][i]);
								}
							}

							format(string, sizeof(string), "Your name has been changed from %s to %s, by %s.", CurrentName, NewName, Player[playerid][AdminName]);
							SendClientMessage(id, WHITE, string);

							SendClientMessage(id, GREY, "Don't worry about re-connecting, just don't forget to change your name in the connection client!");

							if(Player[id][ActiveReport] >= 1)
							{
								Player[id][ActiveReport] = 0;
								Player[playerid][AdminActions]++;
							}

						}

					}
					else
					{
						format(string, sizeof(string), "Names must be 3 - %d characters in length.", MAX_PLAYER_NAME);
						SendClientMessage(playerid, WHITE, string);
					}
				}
			}
		}
	}
	return 1;
}

command(abandonbusiness, playerid, params[])
{
	new Confirmation[8], string[255];
	if(sscanf(params, "s[8]", Confirmation))
	{
		SendClientMessage(playerid, WHITE, "Are you SURE you want to abandon your business? Please type /abandonbusiness confirm");
	}
	else
	{
		if(!strcmp(Confirmation, "Confirm", true))
		{
			if(Player[playerid][Business] != 0)
			{
				format(string, sizeof(string), "[BUSINESS] %s has abandoned Business %d.", GetName(playerid), Player[playerid][Business]);
				StatLog(string);
				format(Businesses[Player[playerid][Business]][bOwner], 255, "Nobody");
				format(Businesses[Player[playerid][Business]][bKeyOwner1], 255, "Nobody");
				format(Businesses[Player[playerid][Business]][bKeyOwner2], 255, "Nobody");
				Businesses[Player[playerid][Business]][bLockStatus] = 1;
				SendClientMessage(playerid, WHITE, "You have now abandoned your business.");
				SaveBusiness(Player[playerid][Business]);
				Player[playerid][Business] = 0;
			}
		}
	}
	return 1;
}

CMD:undercoverskins(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 1)
		return 1;

	if(Player[playerid][GroupRank] < 4)
		return 1;

	new string[128];
	switch(undercoverSkinsEnabled)
	{
		case 0:
		{
			undercoverSkinsEnabled = 1;
			format(string, sizeof(string), "The undercover clothes locker has been unlocked by %s.", GetNormalNameEx(playerid));
			GroupMessage(playerid, NICESKY, string, 1);
		}
		default:
		{
			undercoverSkinsEnabled = 0;
			format(string, sizeof(string), "The undercover clothes locker has been locked by %s.", GetNormalNameEx(playerid));
			GroupMessage(playerid, NICESKY, string, 1);
		}
	}
	return 1;
}

command(swatinv, playerid, params[])
{
	#pragma unused params
	if(Groups[Player[playerid][Group]][CommandTypes] == 1)
	{
		if(Player[playerid][GroupRank] >= 4)
		{
			new string[65];
			if(SWATEnabled == 0)
			{
				SWATEnabled = 1;
				format(string, sizeof(string), "The SWAT inventory has been enabled by %s!", GetNormalNameEx(playerid));
				GroupMessage(playerid, NICESKY, string, 1);
			}
			else
			{
				SWATEnabled = 0;
				format(string, sizeof(string), "The SWAT inventory has been disabled by %s!", GetNormalNameEx(playerid));
				GroupMessage(playerid, NICESKY, string, 1);
			}
		}
	}
	return 1;
}

command(buybusiness, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][Business] == 0)
	{
		for(new b = 0; b < sizeof(Businesses); b++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 5, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ]))
			{
				if(strcmp(Businesses[b][bOwner], "Nobody", true) == 0)
				{
					if(Businesses[b][bPrice] < 1)
					{
						SendClientMessage(playerid, WHITE, "This business isn't purchasable.");
					}
					else
					{
						if(Player[playerid][Money] >= Businesses[b][bPrice])
						{
							Player[playerid][Money] -= Businesses[b][bPrice];
							format(Businesses[b][bOwner], MAX_PLAYER_NAME, "%s", Player[playerid][NormalName]);
							format(string, sizeof(string), "Congratulations! You are now the owner of %s.", Businesses[b][bName]);
							SendClientMessage(playerid, ANNOUNCEMENT, string);
							Player[playerid][Business] = b;
							Businesses[b][bSupplyPrice] = 8;
							SaveBusiness(b);
							format(string, sizeof(string), "[BUSINESS] %s has purchased Business %d for $%s.", Player[playerid][NormalName], Player[playerid][Business], IntToFormattedStr(Businesses[b][bPrice]));
							StatLog(string);
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You do not have enough money to purchase this business.");
						}
					}
				}
				else
				{
					SendClientMessage(playerid, WHITE, "Sorry, this business is not available!");
				}
			}
		}
	}
	else
	{
		SendClientMessage(playerid, WHITE, "You already have a Business, type /abandonbusiness.");
	}
	return 1;
}

CMD:remoteaw(playerid, params[])
{
	new name[MAX_PLAYER_NAME];

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(sscanf(params, "s[24]", name))
		return SendClientMessage(playerid, GREY, "SYNTAX: /remoteaw [player name]");

	if(!IsPlayerRegistered(name))
		return SendClientMessage(playerid, WHITE, "That player doesn't exist.");

	if(GetRemoteAdminLevel(name) > Player[playerid][AdminLevel])
		return SendClientMessage(playerid, -1, "You can't do that to a higher level admin.");

	new query[384];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE playeraccounts SET LastX = '%f', LastY = '%f', LastZ = '%f', LastWorld = '0', LastInterior = '%d' WHERE NormalName = '%e'", SpawnX, SpawnY, SpawnZ, SpawnInt, name);
	mysql_tquery(MYSQL_MAIN, query, "OnQueryFinish", "dddss", THREAD_REMOTE_AW, playerid, 0, name, "");
	return 1;
}

command(aw, playerid, params[])
{
	new id, Names[2][MAX_PLAYER_NAME];
	if(sscanf(params, "u", id))
	{
		if(Player[playerid][AdminLevel] >= 2)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /aw [playerid]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 2)
		{
			if(IsPlayerConnected(id))
			{
				if(Player[playerid][AdminLevel] < Player[id][AdminLevel])
					return SendClientMessage(playerid, WHITE, "NYAH NYAH NYAH!");
				GetPlayerName(id, Names[0], MAX_PLAYER_NAME);
				GetPlayerName(playerid, Names[1], MAX_PLAYER_NAME);

				new string[128];
				new Float:lastX, Float:lastY, Float:lastZ, lastInt = GetPlayerInterior(id), lastVW = GetPlayerVirtualWorld(id);
				GetPlayerPos(id, lastX, lastY, lastZ);
				SetPVarInt(id, "lastInt", lastInt+1);
				SetPVarInt(id, "lastVW", lastVW+1);
				SetPVarFloat(id, "lastX", lastX);
				SetPVarFloat(id, "lastY", lastY);
				SetPVarFloat(id, "lastZ", lastZ);
				format(string, sizeof(string), "You have warped %s to the Newbie Spawn.", GetName(id));
				SendClientMessage(playerid, WHITE, string);
				SetPlayerInterior(id, SpawnInt);
				SetPlayerPos_Update(id, SpawnX, SpawnY, SpawnZ);
				SetPlayerVirtualWorld(id, 0);
				format(string, sizeof(string), "%s has admin-warped you to the Newbie Spawn.", GetName(playerid));
				SendClientMessage(id, WHITE, string);

				PlayerTextDrawHide(id, ExitTextdraw[playerid]);
				Player[id][InGroupHQ] = 0;
				Player[id][InBusiness] = 0;
				Player[id][InHouse] = 0;
				Player[id][InHotelRoom] = 0;
				if(Player[playerid][PlayingSlots] > 0)
				{
					cmd_leaveslots(id, "");
				}

				format(string, sizeof(string), "%s has been warped to the noob spawn by %s.", Names[0], Names[1]);
				AdminActionsLog(string);
			}
			else
			{
				SendClientMessage(playerid, WHITE, "That player is not connected.");
			}
		}
	}
	return 1;
}

/*command(changejobmessage, playerid, params[])
{
	new string[128], jobid, id, name[32];
	if(sscanf(params, "dds", jobid, id, name))
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /changejobmessage [job id] [id (1-2)] [new name]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			format(string, sizeof(string), "Jobs/Job_%d.ini", jobid);

			if(fexist(string))
			{
				switch(id)
				{
					case 1:
					{
						format(Jobs[jobid][JobMiscLocationOneMessage], 128, "%s", name);
						dini_Set(string, "JobMiscLocationOneMessage", Jobs[jobid][JobMiscLocationOneMessage]);
						format(string, sizeof(string), "You've changed message 1 with job %d's message to %s.", jobid, name);
						SendClientMessage(playerid, WHITE, string);
					}

					case 2:
					{
						format(Jobs[jobid][JobMiscLocationTwoMessage], 128, "%s", name);
						dini_Set(string, "JobMiscLocationTwoMessage", Jobs[jobid][JobMiscLocationTwoMessage]);
						format(string, sizeof(string), "You've changed message 2 with job %d's message to %s.", jobid, name);
						SendClientMessage(playerid, WHITE, string);
					}

					default: SendClientMessage(playerid, GREY, "SYNTAX: /changejobmessage [job id] [id (1-2)] [new name]");
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "Invalid Job ID.");
			}
		}
	}
	return 1;
}*/

/*command(changejobname, playerid, params[])
{
	new string[128], id, name[32];
	if(sscanf(params, "ds[32]", id, name))
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /changejobname [id] [new name]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			format(string, sizeof(string), "Jobs/Job_%d.ini", id);

			if(fexist(string))
			{
				format(Jobs[id][JobName], 128, "%s", name);
				dini_Set(string, "JobName", Jobs[id][JobName]);
				format(string, sizeof(string), "Job name changed to '%s'.", name);
				SendClientMessage(playerid, WHITE, string);
			}
			else
			{
				SendClientMessage(playerid, WHITE, "Invalid Job ID.");
			}
		}
	}
	return 1;
}*/

command(gunname, playerid, params[])
{
	new value[50], results, strings[128];
	if(sscanf(params, "s[50]", value))
	{
		if(Player[playerid][AdminLevel] >= 3)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /gunname [name/weaponid]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 3)
		{
			SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------------");
			for(new i; i < sizeof(WeaponNames); i++)
			{
				if(strfind(WeaponNames[i], value, true) != -1)
				{
					if(results == 0)
					{
						format(strings, sizeof(strings), "%s", WeaponNames[i]);
					}
					else
					{
						format(strings, sizeof(strings), "%s, %s", strings, WeaponNames[i]);
					}

					results++;

					if(strlen(strings) > 118)
					{
						SendClientMessage(playerid, WHITE, "Too many results found! Please search more specified!");
						SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------------");
						return 1;
					}
				}
			}

			if(results == 0)
			{
				SendClientMessage(playerid, WHITE, "Sorry, no weapons found.");
				SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------------");
			}
			else
			{
				SendClientMessage(playerid, WHITE, "Results:");
				SendClientMessage(playerid, WHITE, strings);
				SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------------");
			}
		}
	}
	return 1;
}

command(stopdrag, playerid, params[])
{
	#pragma unused params

	new string[73];

	foreach(Player, i)
	{
		if(Player[i][BeingDraggedBy] == playerid)
		{
			format(string, sizeof(string), "* %s has stopped dragging %s.", GetNameEx(playerid), GetNameEx(i));
			NearByMessage(playerid, NICESKY, string);
			Player[i][BeingDraggedBy] = -1;
			if(GetPVarInt(i, "BleedingOutTime") > 0)
			{
				ApplyAnimation(i, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0, 1);
			}
			
		//	stop Player[i][BeingDraggedTimer];
			break;
		}
	}

	return 1;
}

command(agiveweapon, playerid, params[])
{
	new WeaponN[60], Names[2][MAX_PLAYER_NAME], string[128], id, weaponid;
	if(sscanf(params, "ud", id, weaponid))
	{
		if(Player[playerid][AdminLevel] >= 3)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /agiveweapon [playerid] [weaponid] (Special Weapon: 19 - Jetpack)");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 3)
		{
			if(IsPlayerConnectedEx(id))
			{
				if(weaponid >= 1 && weaponid < 47)
				{

					GetPlayerName(id, Names[0], MAX_PLAYER_NAME);
					GetPlayerName(playerid, Names[1], MAX_PLAYER_NAME);

					if(weaponid == 19)
					{
						SetPlayerSpecialAction(id, SPECIAL_ACTION_USEJETPACK);
						format(string, sizeof(string), "You have given %s a Jetpack (Weapon ID: 19).", GetName(id), weaponid);
						SendClientMessage(playerid, WHITE, string);
						format(string, sizeof(string), "You have been given a Jetpack from %s.", GetName(playerid));
						SendClientMessage(id, WHITE, string);
						Player[id][HasJetpack] = 1;
						format(string, sizeof(string), "%s has been given weapon %d by %s.", Names[0], weaponid, Player[playerid][AdminName]);
						AdminActionsLog(string);
					}
					else
					{
						GetWeaponName(weaponid, WeaponN, sizeof(WeaponN));
						GivePlayerWeaponEx(id, weaponid);
						format(string, sizeof(string), "You have given %s a %s (Weapon ID: %d).", GetName(id), WeaponN, weaponid);
						SendClientMessage(playerid, WHITE, string);
						format(string, sizeof(string), "You have been given a %s from %s.", WeaponN, GetName(playerid));
						SendClientMessage(id, WHITE, string);
						format(string, sizeof(string), "%s has been given weapon %d by %s.", Names[0], weaponid, Player[playerid][AdminName]);
						AdminActionsLog(string);
					}
				}
				else
				{
					SendClientMessage(playerid, WHITE, "Invalid weapon ID.");
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
			}
		}
	}
	return 1;
}
command(weapon, playerid, params[])
{
	return cmd_agiveweapon(playerid, params);
}

command(specoff, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 2)
	{
		new string[128];

		Spectator[playerid][SpecSpectatingPlayer] = -1;
		Spectator[playerid][SpecSpectatingVehicle] = -1;

		TogglePlayerSpectating(playerid, false);
		SetCameraBehindPlayer(playerid);

		SetPlayerInterior(playerid, Spectator[playerid][SpecPlayerInterior]);
		SetPlayerFacingAngle(playerid, Spectator[playerid][SpecPlayerAngle]);
		SetPlayerVirtualWorld(playerid, Spectator[playerid][SpecPlayerWorld]);
		SetPlayerPos_Update(playerid, Spectator[playerid][SpecPlayerX], Spectator[playerid][SpecPlayerY], Spectator[playerid][SpecPlayerZ]);

		SendClientMessage(playerid, WHITE, "You've finished your session of spectating.");

		Player[playerid][Hospitalized] = -1;

		SetPlayerToggle(playerid,  TOGGLE_WALKIE, false);
		Player[playerid][ResetTimer] = 1;

		format(string, sizeof(string), "%s has finished spectating.", Player[playerid][AdminName]);
		AdminActionsLog(string);
	}
	return 1;
}

command(businessname, playerid, params[])
{
	new Name[255], string[128];
	if(sscanf(params, "s[255]", Name))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /businessname [New Name]");
	}
	else
	{
		if(Player[playerid][Business] == 0)
			return SendClientMessage(playerid, -1, "You don't own a business.");

		if(strlen(Name) >= 1 && strlen(Name) < 20)
		{
			if(strfind(Name, "~", true))
			{
				format(string, sizeof(string), "You have changed your business name to %s.", Name);
				SendClientMessage(playerid, WHITE, string);
				Businesses[Player[playerid][Business]][bName] = Name;
				UpdateObjectLabel(Player[playerid][Business], LABEL_TYPE_BIZ);
			}
			else
			{
				SendClientMessage(playerid, WHITE, "You may not use the '~' character.");
			}

		}
		else
		{
			SendClientMessage(playerid, WHITE, "Names must be shorter than 20 characters and greater than 1 character.");
		}
	}
	return 1;
}

command(spec, playerid, params[])
{
	new id, string[128], Float: health, Float: armour, healthf, armourf;

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /spec [playerid] (type /specoff to finish spectating)");

	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, -1, "That player isn't connected!");

	else
	{
		if(Spectator[playerid][SpecSpectatingPlayer] == -1 && Spectator[playerid][SpecSpectatingVehicle] == -1)
		{
			GetPlayerPos(playerid, Spectator[playerid][SpecPlayerX], Spectator[playerid][SpecPlayerY], Spectator[playerid][SpecPlayerZ]);
			GetPlayerFacingAngle(playerid, Spectator[playerid][SpecPlayerAngle]);
			Spectator[playerid][SpecPlayerWorld] = GetPlayerVirtualWorld(playerid);
			Spectator[playerid][SpecPlayerInterior] = GetPlayerInterior(playerid);
		}

		if(IsPlayerInAnyVehicle(playerid) && GetPlayerToggle(playerid, TOGGLE_FUEL_BAR) == false)
		{
			DestroyPlayerProgressBar(playerid, vFuel[playerid]);
			vFuel[playerid] = INVALID_PLAYER_BAR_ID;
		}

		format(string, sizeof(string), "%s has started spectating %s.", Player[playerid][AdminName], GetName(id));
		AdminActionsLog(string);
		SetPlayerToggle(playerid,  TOGGLE_WALKIE, true);
		format(string, sizeof(string), "You are now spectating %s.", GetName(id));
		SendClientMessage(playerid, GREY, string);
		GetPlayerHealth(id, health);
		GetPlayerArmour(id, armour);
		healthf = floatround(health, floatround_ceil);
		armourf = floatround(armour, floatround_ceil);
		SetPlayerInterior(playerid, GetPlayerInterior(id));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(id));
		new sql = GetVSQLID(GetPlayerVehicleID(id));
		if(sql == 0 || !IsPlayerInAnyVehicle(id))
			format(string, sizeof(string), "Health: %d | Armour: %d | Money: %s | Bank: %s | Hours: %d | SQLID: None", healthf, armourf, IntToFormattedStr(Player[id][Money]), IntToFormattedStr(Player[id][BankMoney]), Player[id][PlayingHours]);
		else
			format(string, sizeof(string), "Health: %d | Armour: %d | Money: %s | Bank: %s | Hours: %d | SQLID: %d", healthf, armourf, IntToFormattedStr(Player[id][Money]), IntToFormattedStr(Player[id][BankMoney]), Player[id][PlayingHours], sql);
		SendClientMessage(playerid, WHITE, string);
		Spectator[playerid][SpecSpectatingPlayer] = id;
		TogglePlayerSpectating(playerid, true);

		if((strcmp(Player[id][AdminNote1], "None", true) && isnull(Player[id][AdminNote1])) || (strcmp(Player[id][AdminNote2], "None", true) && isnull(Player[id][AdminNote2])) || (strcmp(Player[id][AdminNote3], "None", true) && isnull(Player[id][AdminNote3])))
		{
			SendClientMessage(playerid, -1, "This player has an active admin note! Check it before you take action.");
		}

		if(IsPlayerInAnyVehicle(id))
		{
			PlayerSpectateVehicle(playerid, GetPlayerVehicleID(id));
			Spectator[playerid][SpecSpectatingState] = 1;
		}

		else
		{
			PlayerSpectatePlayer(playerid, id);
			Spectator[playerid][SpecSpectatingState] = 2;
		}

		Spectator[playerid][SpecSpectatingPlayer] = id;
		SpectatorRefresh(playerid, id);
	}

	return 1;
}

command(listfactions, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 2)
	{
		new string[128];
		SendClientMessage(playerid, WHITE, "------------------------------------------------------------");
		for(new i = 0; i < MAX_GROUPS; i++)
		{
			if(DoesFactionExist(i))
			{
				format(string, sizeof(string), "Name: %s (ID: %d) | Type: %d.", Groups[i][GroupName], i, Groups[i][CommandTypes]);
				SendClientMessage(playerid, GREY, string);
			}
		}
		SendClientMessage(playerid, WHITE, "------------------------------------------------------------");
	}
	return 1;
}

command(donate, playerid, params[])
{
	new amount, string[255];
	if(sscanf(params, "d", amount))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /donate [amount]");
	}
	else
	{
		if(Businesses[Player[playerid][InBusiness]][bType] == 8)
		{
			if(Player[playerid][Money] >= amount)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, GREY, "SYNTAX: /donate [amount]");
				}
				else
				{
					format(string, sizeof(string), "[BUSINESS] %s has donated %s ($%s) to business %d (owned by %s) (%s).", GetName(playerid), IntToFormattedStr(amount), IntToFormattedStr(Player[playerid][Money] - amount), Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bOwner], IntToFormattedStr(IsItemInStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, 0, 1)+ amount));
					MoneyLog(string);
					Player[playerid][Money] -= amount;
//					Businesses[Player[playerid][InBusiness]][bVault] += amount;
					AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, amount);
					format(string, sizeof(string), "You have donated $%s to this charity!", IntToFormattedStr(amount));
					SendClientMessage(playerid, WHITE, string);
					format(string, sizeof(string), "%s has donated $%s.", GetNameEx(playerid), IntToFormattedStr(amount));
					NearByMessage(playerid, NICESKY, string);
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "You don't have that much to donate.");
			}
		}
	}
	return 1;
}

command(fingerprint, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /fingerprint [playerid]");
	}
	else
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 1)
		{
			if(IsPlayerConnectedEx(id))
			{
				if(GetDistanceBetweenPlayers(id, playerid) < 7)
				{
					if(Player[id][Cuffed] >= 1)
					{
						new Name[2][MAX_PLAYER_NAME];

						format(Name[0], MAX_PLAYER_NAME, GetNameEx(id));
						format(Name[1], MAX_PLAYER_NAME, GetNameEx(playerid));

						if(Player[id][CriminalOffences] == 0)
						{
							format(string, sizeof(string), "* %s has grabbed ahold of %s's finger, placing it on the scanner.", Name[1], Name[0]);
							NearByMessage(playerid, NICESKY, string);

							SendClientMessage(playerid, WHITE, "--------------------------------------------------------------");
							SendClientMessage(playerid, GREY, "The PDA returns a null result.");
							SendClientMessage(playerid, WHITE, "--------------------------------------------------------------");
						}
						else
						{
							format(string, sizeof(string), "* %s has grabbed ahold of %s's finger, placing it on the scanner.", Name[1], Name[0]);
							NearByMessage(playerid, NICESKY, string);
							SendClientMessage(playerid, WHITE, "--------------------------------------------------------------");
							SendClientMessage(playerid, GREY, "The PDA returns a result, matching the entered print.");
							format(string, sizeof(string), "The print traces back to a %s.", Player[id][NormalName]);
							SendClientMessage(playerid, GREEN, string);
							SendClientMessage(playerid, WHITE, "--------------------------------------------------------------");
						}
					}
					else
					{
						SendClientMessage(playerid, WHITE, "You must cuff them, first.");
					}
				}
				else
				{
					SendClientMessage(playerid, WHITE, "You're not close enough.");
				}
			}
		}
	}
	return 1;
}

command(attempt, playerid, params[])
{
	new Message[128], string[128];
	if(sscanf(params, "s[128]", Message))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /attempt [action]");
	}
	else
	{
		if(strlen(Message) < 1)
		{
			return 1;
		}

		if(random(10) < 6)
		{
			format(string, sizeof(string), "[ATTEMPT] * %s has attempted to %s, and succeeded.", GetNameEx(playerid), Message);
			NearByMessage(playerid, NICESKY, string);
		}
		else
		{
			format(string, sizeof(string), "[ATTEMPT] * %s has attempted to %s, but failed.", GetNameEx(playerid), Message);
			NearByMessage(playerid, NICESKY, string);
		}
	}
	return 1;
}

command(buyid, playerid, params[])
{
	#pragma unused params
	if(Groups[Player[playerid][InGroupHQ]][CommandTypes] == 4)
	{
		if(Player[playerid][Money] >= 50)
		{
			Player[playerid][Money] -= 50;
			Player[playerid][Identity]++;
			Groups[Player[playerid][InGroupHQ]][SafeMoney] += 50;
			SendClientMessage(playerid, WHITE, "You have successfully purchased some identification!");
		}
		else
		{
			SendClientMessage(playerid, WHITE, "You must have at least $50.");
		}
	}
	else
	{
		SendClientMessage(playerid, WHITE, "You must be inside City Hall.");
	}

	return 1;
}

command(announce, playerid, params[])
{
	new announcement[128], string[255];

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(sscanf(params, "s[128]", announcement))
		return SendClientMessage(playerid, GREY, "SYNTAX: /announce [message]");

	else
	{
		if(strlen(announcement) >= 1)
		{
			format(string, sizeof(string), "((Announcement from Server Admin %s: %s))", Player[playerid][AdminName], announcement);
			SendClientMessageToAll(LIGHTRED, string);
			format(string, sizeof(string), "((Announcement from Server Admin %s: %s))", Player[playerid][AdminName], announcement);
			OOCChatLog(string);
			format(string, sizeof(string), "((Announcement from Server Admin %s: %s))", Player[playerid][AdminName], announcement);
			AdminActionsLog(string);
		}

	}
	return 1;
}

CMD:recordcrime(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 1)
		return 1;

	new id, string[128], crime[128], name[MAX_PLAYER_NAME];
	if(sscanf(params, "s[25]s[128]", name, crime))
		return SendClientMessage(playerid, -1, "SYNTAX: /recordcrime [fullname] [offence]");

	id = GetPlayersID(name);
	if(id == INVALID_PLAYER_ID && Player[playerid][GroupRank] < 7)
		return SendClientMessage(playerid, -1, "You do not have the required rank to record crimes on an offline player.");

	new query[255], second, minute, hour, day, month, year;
	gettime(hour, minute, second);
	getdate(year, month, day);
	format(string, sizeof(string), "%d/%d/%d at %02d:%02d:%02d", month, day, year, (hour + 4 >= 24) ? ((hour + 4) - 24) : (hour + 4), minute, second);
	mysql_format(MYSQL_MAIN, query, sizeof(query), "INSERT INTO PoliceCrimes (Crime, criminalName, arrestingOfficer, timeGiven, Active) VALUES (\'%e\', \'%e\', \'%e\', \'%e\', \'1\')", crime, name, Player[playerid][NormalName], string);
	mysql_query(MYSQL_MAIN, query, false);

	format(string, sizeof(string), "You have successfully recorded %s for %s.", name, crime);
	SendClientMessage(playerid, -1, string);
	format(string, sizeof(string), "%s has been recorded for crime: %s, by %s.", name, crime, GetNormalNameEx(playerid));
	GroupMessage(playerid, ANNOUNCEMENT, string, 1);
	return 1;
}

command(wanted, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Groups[Player[playerid][Group]][CommandTypes] == 1)
	{
		SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");
		foreach(Player, i)
		{
			if(GetPlayerNumCrimes(Player[i][NormalName], 1) > 0)
			{
				format(string, sizeof(string), "%s is wanted with %d active offences.", GetNormalNameEx(i), GetPlayerNumCrimes(Player[i][NormalName], 1));
				SendClientMessage(playerid, ADMINORANGE, string);
			}
		}
		SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");
	}
	return 1;
}

command(joinjob, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][Job] < 1)
	{
		for(new h = 0; h < sizeof(Jobs); h++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 5, Jobs[h][JobJoinPosX], Jobs[h][JobJoinPosY], Jobs[h][JobJoinPosZ]))
			{
				if(Jobs[h][JobType] == JOB_TRUCKER && Player[playerid][PlayingHours] < 20 && Player[playerid][VipRank] < 1)
					return SendClientMessage(playerid, -1, "Sorry, we don't think you know the area very well. Come back and try another time!");
				if(Jobs[h][JobType] == JOB_TRUCKER && !Player[playerid][TruckLicense] || Jobs[h][JobType] == JOB_GARBAGEMAN && !Player[playerid][TruckLicense])
					return SendClientMessage(playerid, -1, "Sorry, you don't have a trucking license.");
				if(Jobs[h][JobCrimeLimit] < Player[playerid][CriminalOffences] && Jobs[h][JobCrimeLimit] != 0)
					return SendClientMessage(playerid, -1, "Sorry, you have failed the background check. You may not have this job!");
				if(Jobs[h][JobType] == JOB_CARJACKER && Player[playerid][TotalCarsDropped] < 25)
					return SendClientMessage(playerid, WHITE, "Sorry man, you needa work for us a bit more before we can trust you with the better assignments.");

				new str[128];
				if(Groups[Player[playerid][Group]][CommandTypes] == 1 && (Jobs[h][JobType] != JOB_MECHANIC && Jobs[h][JobType] != JOB_DETECTIVE))
				{
					format(str, sizeof(str), "You can't have that job!");
					return SendClientMessage(playerid, -1, str);
				}
				if(gettime() < Player[playerid][JobCooldown])
				{
					format(str, sizeof(str), "You must wait another %d seconds before you can get another job!", Player[playerid][JobCooldown] - gettime());
				    return SendClientMessage(playerid, WHITE, str);
				}
				format(string, sizeof(string), "Congratulations. You have now become a %s.", Jobs[h][JobName]);
				SendClientMessage(playerid, WHITE, string);
				Player[playerid][Job] = h;

				if(Jobs[h][JobType] == JOB_TRUCKER)
				{
					if(Player[playerid][TotalTruckRuns] == 0)
					{
						if(Player[playerid][PhoneN] > 0 && strval(GetPhoneInfo(Player[playerid][PhoneN], "status")) == 1)
						{
							format(string, sizeof(string), "Thanks for choosing to work for me, %s! My name is %s, you can call me Bigrig.", GetFirstName(playerid));
							SaveSMS(Player[playerid][PhoneN], strval(TRUCKER_NUMBER), 1, string);
							format(string, sizeof(string), "If I ever need you for work, I'll let you know with a quick message.", GetFirstName(playerid));
							SaveSMS(Player[playerid][PhoneN], strval(TRUCKER_NUMBER), 1, string);
							PlayerPlaySound(playerid, 21000, 0.00, 0.00, 0.00);
							if(strval(GetPhoneInfo(Player[playerid][PhoneN], "vibrate")) == 1 && Spectator[playerid][SpecSpectatingPlayer] == -1 && Spectator[playerid][SpecSpectatingVehicle] == -1)
							{
								format(string, sizeof(string), "* %s's phone vibrates..",  GetNameEx(playerid));
								NearByMessage(playerid, NICESKY, string);
							}
							format(string, sizeof(string), "You got a message on your phone \"%s\".", GetPhoneInfo(Player[playerid][PhoneN], "label"));
							SendClientMessage(playerid, WHITE, string);
						}
					}
					else
					{
						if(Player[playerid][PhoneN] > 0 && strval(GetPhoneInfo(Player[playerid][PhoneN], "status")) == 1)
						{
							format(string, sizeof(string), "You're back, %s! Awesome, I'll let you know if I need ya for any work.", GetFirstName(playerid));
							SaveSMS(Player[playerid][PhoneN], strval(TRUCKER_NUMBER), 1, string);
							PlayerPlaySound(playerid, 21000, 0.00, 0.00, 0.00);
							if(strval(GetPhoneInfo(Player[playerid][PhoneN], "vibrate")) == 1 && Spectator[playerid][SpecSpectatingPlayer] == -1 && Spectator[playerid][SpecSpectatingVehicle] == -1)
							{
								format(string, sizeof(string), "* %s's phone vibrates..",  GetNameEx(playerid));
								NearByMessage(playerid, NICESKY, string);
							}
							format(string, sizeof(string), "You got a message on your phone \"%s\".", GetPhoneInfo(Player[playerid][PhoneN], "label"));
							SendClientMessage(playerid, WHITE, string);
						}
					}
				}
				else if(Jobs[h][JobType] == JOB_CARJACKER)
					Iter_Add(CarJackers, playerid);

				if(Player[playerid][PlayingHours] >= 10)
					Player[playerid][JobCooldown] = gettime() + 60 * 60;
			}
		}
	}
	else
	{
		SendClientMessage(playerid, WHITE, "You already have a job (type /quitjob first).");
	}
	return 1;
}

command(joinjob2, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][VipRank] > 1)
	{
		if(Player[playerid][Job2] < 1)
		{
			for(new h = 0; h < sizeof(Jobs); h++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 5, Jobs[h][JobJoinPosX], Jobs[h][JobJoinPosY], Jobs[h][JobJoinPosZ]))
				{
					if(Jobs[h][JobType] == JOB_TRUCKER && Player[playerid][PlayingHours] < 20 && Player[playerid][VipRank] < 1)
						return SendClientMessage(playerid, -1, "Sorry, we don't think you know the area very well. Come back and try another time!");
					if(Jobs[h][JobType] == JOB_TRUCKER && !Player[playerid][TruckLicense] || Jobs[h][JobType] == JOB_GARBAGEMAN && !Player[playerid][TruckLicense])
						return SendClientMessage(playerid, -1, "Sorry, you don't have a trucking license.");
					if(Jobs[h][JobCrimeLimit] < Player[playerid][CriminalOffences] && Jobs[h][JobCrimeLimit] != 0)
						return SendClientMessage(playerid, -1, "Sorry, you have failed the background check. You may not have this job!");
					if(Jobs[h][JobType] == JOB_CARJACKER && Player[playerid][TotalCarsDropped] < 25)
						return SendClientMessage(playerid, WHITE, "Sorry man, you needa work for us a bit more before we can trust you with the better assignments.");

					new str[128];
					if(Groups[Player[playerid][Group]][CommandTypes] == 1 && (Jobs[h][JobType] != JOB_MECHANIC && Jobs[h][JobType] != JOB_DETECTIVE))
					{
						format(str, sizeof(str), "You can't have that job!");
						return SendClientMessage(playerid, -1, str);
					}
					if(gettime() < Player[playerid][JobCooldown])
					{
						format(str, sizeof(str), "You must wait another %d seconds before you can get another job!", Player[playerid][JobCooldown] - gettime());
					    return SendClientMessage(playerid, WHITE, str);
					}
					format(string, sizeof(string), "Congratulations. You have now become a %s.", Jobs[h][JobName]);
					SendClientMessage(playerid, WHITE, string);
					Player[playerid][Job2] = h;

					if(Jobs[h][JobType] == JOB_TRUCKER)
					{
						if(Player[playerid][TotalTruckRuns] == 0)
						{
							if(Player[playerid][PhoneN] > 0 && strval(GetPhoneInfo(Player[playerid][PhoneN], "status")) == 1)
							{
								format(string, sizeof(string), "Thanks for choosing to work for me, %s! My name is %s, you can call me Bigrig.", GetFirstName(playerid));
								SaveSMS(Player[playerid][PhoneN], strval(TRUCKER_NUMBER), 1, string);
								format(string, sizeof(string), "If I ever need you for work, I'll let you know with a quick message.", GetFirstName(playerid));
								SaveSMS(Player[playerid][PhoneN], strval(TRUCKER_NUMBER), 1, string);
								PlayerPlaySound(playerid, 21000, 0.00, 0.00, 0.00);
								if(strval(GetPhoneInfo(Player[playerid][PhoneN], "vibrate")) == 1 && Spectator[playerid][SpecSpectatingPlayer] == -1 && Spectator[playerid][SpecSpectatingVehicle] == -1)
								{
									format(string, sizeof(string), "* %s's phone vibrates..",  GetNameEx(playerid));
									NearByMessage(playerid, NICESKY, string);
								}
								format(string, sizeof(string), "You got a message on your phone \"%s\".", GetPhoneInfo(Player[playerid][PhoneN], "label"));
								SendClientMessage(playerid, WHITE, string);
							}
						}
						else
						{
							if(Player[playerid][PhoneN] > 0 && strval(GetPhoneInfo(Player[playerid][PhoneN], "status")) == 1)
							{
								format(string, sizeof(string), "You're back, %s! Awesome, I'll let you know if I need ya for any work.", GetFirstName(playerid));
								SaveSMS(Player[playerid][PhoneN], strval(TRUCKER_NUMBER), 1, string);
								PlayerPlaySound(playerid, 21000, 0.00, 0.00, 0.00);
								if(strval(GetPhoneInfo(Player[playerid][PhoneN], "vibrate")) == 1 && Spectator[playerid][SpecSpectatingPlayer] == -1 && Spectator[playerid][SpecSpectatingVehicle] == -1)
								{
									format(string, sizeof(string), "* %s's phone vibrates..",  GetNameEx(playerid));
									NearByMessage(playerid, NICESKY, string);
								}
								format(string, sizeof(string), "You got a message on your phone \"%s\".", GetPhoneInfo(Player[playerid][PhoneN], "label"));
								SendClientMessage(playerid, WHITE, string);
							}
						}
					}
					else if(Jobs[h][JobType] == JOB_CARJACKER)
						Iter_Add(CarJackers, playerid);

					if(Player[playerid][PlayingHours] >= 10)
						Player[playerid][JobCooldown] = gettime() + 60 * 60;
				}
			}
		}
		else
		{
			SendClientMessage(playerid, WHITE, "You already have a job (type /quitjob2 first).");
		}
	}
	return 1;
}

command(quitjob, playerid, params[])
{
	new string[128];

	if(!isnull(params) && IsNumeric(params) && strval(params) == 2)
		return cmd_quitjob2(playerid, params);

	if(Player[playerid][Job] < 1)
	{
		format(string, sizeof(string), "You don't have a job!");
		SendClientMessage(playerid, WHITE, string);
	}
	else
	{
		format(string, sizeof(string), "You have quit your job (%s).", Jobs[Player[playerid][Job]][JobName]);
		SendClientMessage(playerid, WHITE, string);

		if(Jobs[Player[playerid][Job]][JobType] == JOB_TRUCKER)
		{
			if(Player[playerid][PhoneN] > 0 && strval(GetPhoneInfo(Player[playerid][PhoneN], "status")) == 1)
			{
				format(string, sizeof(string), "What are ya doing, %s!? Ya leaving me??!", GetFirstName(playerid));
				SaveSMS(Player[playerid][PhoneN], strval(TRUCKER_NUMBER), 1, string);
				PlayerPlaySound(playerid, 21000, 0.00, 0.00, 0.00);
				if(strval(GetPhoneInfo(Player[playerid][PhoneN], "vibrate")) == 1 && Spectator[playerid][SpecSpectatingPlayer] == -1 && Spectator[playerid][SpecSpectatingVehicle] == -1)
				{
					format(string, sizeof(string), "* %s's phone vibrates..",  GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
				}
				format(string, sizeof(string), "You got a message on your phone \"%s\".", GetPhoneInfo(Player[playerid][PhoneN], "label"));
				SendClientMessage(playerid, WHITE, string);
			}
			
			if(Player[playerid][TruckDelivery] == 2)
			{
				Player[playerid][TruckPenalty] = 1;
			}
		}
		else if(Jobs[Player[playerid][Job]][JobType] == JOB_CARJACKER)
			Iter_Remove(CarJackers, playerid);

		Player[playerid][Job] = 0;
	}
	return 1;
}

command(quitjob2, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][Job2] >= 1)
	{
		if(Player[playerid][Checkpoint] >= 1)
		{
			SendClientMessage(playerid, WHITE, "Reach the checkpoint first, or re-connect.");
		}
		else
		{
			format(string, sizeof(string), "You have quit your job (%s).", Jobs[Player[playerid][Job2]][JobName]);
			SendClientMessage(playerid, WHITE, string);

			if(Jobs[Player[playerid][Job2]][JobType] == JOB_TRUCKER)
			{
				if(Player[playerid][PhoneN] > 0 && strval(GetPhoneInfo(Player[playerid][PhoneN], "status")) == 1)
				{
					format(string, sizeof(string), "What are ya doing, %s!? Ya leaving me??!", GetFirstName(playerid));
					SaveSMS(Player[playerid][PhoneN], strval(TRUCKER_NUMBER), 1, string);
					PlayerPlaySound(playerid, 21000, 0.00, 0.00, 0.00);
					if(strval(GetPhoneInfo(Player[playerid][PhoneN], "vibrate")) == 1 && Spectator[playerid][SpecSpectatingPlayer] == -1 && Spectator[playerid][SpecSpectatingVehicle] == -1)
					{
						format(string, sizeof(string), "* %s's phone vibrates..",  GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
					}
					format(string, sizeof(string), "You got a message on your phone \"%s\".", GetPhoneInfo(Player[playerid][PhoneN], "label"));
					SendClientMessage(playerid, WHITE, string);
				}
			}
			else if(Jobs[Player[playerid][Job]][JobType] == JOB_CARJACKER)
				Iter_Remove(CarJackers, playerid);

			Player[playerid][Job2] = 0;
		}
	}
	return 1;
}

CMD:kc(playerid, params[]) return cmd_killcheckpoint(playerid, params);

command(killcheckpoint, playerid, params[])
{
	#pragma unused params
	new string[128];

	if(Player[playerid][Checkpoint] < 1)
	{
		format(string, sizeof(string), "You don't have a checkpoint!");
		SendClientMessage(playerid, WHITE, string);
	}
	else
	{
		Player[playerid][Checkpoint] = 0;
		Player[playerid][Detecting] = 0;
		Player[playerid][MatRunning] = 0;
		Player[playerid][Harvesting] = 0;
		Player[playerid][FindingCar] = 0;
		if(Player[playerid][DoingDMVTest] || Player[playerid][DoingTruckerTest])
			cmd_endtest(playerid);
		if(Player[playerid][GarbageStep] > 0)
			cmd_endtrash(playerid, params);
		Player[playerid][AttendingBackupCall] = -1;
		if(Player[playerid][InRally] > 0)
		{
			Player[playerid][RallyCP] = 0;
			Player[playerid][InRally] = 0;
			cmd_leaverally(playerid, params);
		}
		Player[playerid][Map] = 0;
		if(Player[playerid][PizzaRun] > 0)
		{
			for(new i; i < MAX_HOUSES; i++)
			{
				if(playerid == PizzaOrderTaken[i] - 1)
					PizzaOrderTaken[i] = 0;
			}

			Player[playerid][PizzaCooldown] = gettime() + 600;
			Player[playerid][PizzaRun] = 0;
			Player[playerid][PizzaPay] = 0;
			Player[playerid][PizzaDist] = 0;
			Player[playerid][PizzaCP] = 0;
			Player[playerid][CantDeliverPizza] = 1;
			PlayerTextDrawHide(playerid, Player[playerid][PizzaTimer]);
			RemovePlayerFromVehicle(playerid);
		}
		DisablePlayerCheckpoint(playerid);
		DisablePlayerRaceCheckpoint(playerid);
		format(string, sizeof(string), "Checkpoint killed.");
		SendClientMessage(playerid, WHITE, string);
	}
	return 1;
}
command(usefightstyle, playerid, params[])
{
	ShowPlayerDialog(playerid, 4592, DIALOG_STYLE_LIST, "Fighting Styles", "Boxing\nKung Fu\nKneehead\nGrabkick\nElbow\nNormal", "Select", "Cancel");
	return 1;
}

command(createjob, playerid, params[])
{
	new type, name[128], string[128];
	if(sscanf(params, "ds[128]", type, name))
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /createjob [type] [name]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			if(strlen(name) >= 1 && strlen(name) < 20)
			{
				SpawnedJobs++;
				new id = SpawnedJobs;

				format(Jobs[id][JobName], 255, "%s", name);
				Jobs[id][JobJoinPosX] = 0.0;
				Jobs[id][JobJoinPosY] = 0.0;
				Jobs[id][JobJoinPosZ] = 0.0;
				Jobs[id][JobJoinPosWorld] = 0;
				Jobs[id][JobJoinPosInterior] = 0;

				Jobs[id][JobMiscLocationOneX] = 0.0;
				Jobs[id][JobMiscLocationOneY] = 0.0;
				Jobs[id][JobMiscLocationOneZ] = 0.0;
				Jobs[id][JobMiscLocationOneWorld] = 0;
				format(Jobs[id][JobMiscLocationOneMessage], 255, "Nothing");

				Jobs[id][JobMiscLocationTwoX] = 0.0;
				Jobs[id][JobMiscLocationTwoY] = 0.0;
				Jobs[id][JobMiscLocationTwoZ] = 0.0;
				Jobs[id][JobMiscLocationTwoWorld] = 0;
				format(Jobs[id][JobMiscLocationTwoMessage], 255, "Nothing");

				Jobs[id][JobType] = type;
				Jobs[id][JobCrimeLimit] = 0;

				Jobs[id][ORM_ID] = orm_create("jobs");
				orm_setkey(Jobs[id][ORM_ID], "JobSQL");
				SetupJobORM(id);

				SaveJob(id, 1);

				format(string, sizeof(string), "You have created job %s (ID: %d) and set the type to %d (use /movejob to change the jobs locations).", name, id, type);
				SendClientMessage(playerid, WHITE, string);
			}
		}
	}
	return 1;
}

command(home, playerid, params[])
{
	if(Player[playerid][Checkpoint] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You already have an active checkpoint, please reach it or /killcheckpoint.");
	}
	else
	{
		new house;
		if(sscanf(params, "d", house))
			return SendClientMessage(playerid, -1, "SYNTAX: /home [ house (1/2) ]");

		new houseid;
		switch(house)
		{
			case 1:
			{
				if(Player[playerid][House] == 0)
					return SendClientMessage(playerid, -1, "You don't have a house in that slot.");
				houseid = Player[playerid][House];
			}
			case 2:
			{
				if(Player[playerid][House2] == 0)
					return SendClientMessage(playerid, -1, "You don't have a house in that slot.");
				houseid = Player[playerid][House2];
			}
			default: return SendClientMessage(playerid, -1, "House is either 1 or 2.");
		}

		Player[playerid][Checkpoint] = 1;
		Player[playerid][FindingHouse] = 1;
		if(Houses[houseid][HouseType] == 1 && GetHouseApartmentComplex(houseid) > 0)
			SetPlayerCheckpoint(playerid, Businesses[GetHouseApartmentComplex(houseid)][bExteriorX], Businesses[GetHouseApartmentComplex(houseid)][bExteriorY], Businesses[GetHouseApartmentComplex(houseid)][bExteriorZ], 40.0);
		else
			SetPlayerCheckpoint(playerid, Houses[houseid][hExteriorX], Houses[houseid][hExteriorY], Houses[houseid][hExteriorZ], 40.0);
		SendClientMessage(playerid, WHITE, "A checkpoint has been set to your house!");
	}
	return 1;
}

CMD:dropcar(playerid, params[])
{
	if(DropCarStatus == 1)
		return SendClientMessage(playerid, WHITE, "This is currently unavailable.");

	if(Groups[Player[playerid][Group]][CommandTypes] == 1)
		return SendClientMessage(playerid, WHITE, "Police can't use this command.");

	if(Player[playerid][Checkpoint] >= 1)
		return SendClientMessage(playerid, WHITE, "You already have an existing checkpoint.");

	if(Player[playerid][InabilityToDropCar] > gettime())
		return SendClientMessage(playerid, WHITE, "Please wait 1 hour from the last time you dropped a vehicle.");

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, WHITE, "You must be in a vehicle to do this.");

	Player[playerid][Checkpoint] = 1;
	SetPlayerCheckpoint(playerid, DropCarX, DropCarY, DropCarZ, 3.0);
	SendClientMessage(playerid, WHITE, "Deliver your vehicle to the red checkpoint.");
	return 1;
}

command(arrest, playerid, params[])
{
	new id, string[128], time, fine, strikes, bail[5];
	if(sscanf(params, "uds[5]D(0)D(0)", id, time, bail, strikes, fine))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /arrest [playerid] [time (1 minute - 120 minutes)] [allow bail? 'yes' or 'no'] (strikes) (fine)");
	}
	else
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 1)
		{
			if(fine < 40001 && fine >= 0)
			{
				if(time < 121)
				{
					if(IsPlayerInRangeOfPoint(playerid, 5, ArrestPosX, ArrestPosY, ArrestPosZ))
					{
						if(GetDistanceBetweenPlayers(playerid, id)  < 5)
						{
							if(Player[id][Cuffed] >= 1)
							{
								if(GetPlayerNumCrimes(GetName(id), 1) > 0)
								{
									new ArrestedPlayer = id;
									if(!strcmp(bail, "no", true))
 										Player[ArrestedPlayer][CannotBail] = 1;
 									else
 										Player[ArrestedPlayer][CannotBail] = 0;
										
									fine += GetPlayerOwedTicketsAmount(GetName(ArrestedPlayer));

									new query[384];
									mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE PoliceTickets SET Active = \'0\' WHERE offenderName = \'%e\'", GetName(ArrestedPlayer));
									mysql_query(MYSQL_MAIN, query, false);

									Player[ArrestedPlayer][Tickets] = 0;

									if(strikes > 0)
									{
										mysql_format(MYSQL_MAIN, query, sizeof(query), "INSERT INTO PoliceTickets (offense, offenderName, officerName, ticketAmount, timeGiven, strikesIssued, Active, StrikesExpired) VALUES (\'Arrest\', \'%e\', \'%e\', \'0\', \'%e\', \'%d\', \'0\', \'0\')", GetName(ArrestedPlayer), GetName(playerid), GetDate(), strikes);
										mysql_query(MYSQL_MAIN, query, false);
									}

									if(GetPlayerTotalWealth(ArrestedPlayer) < fine) fine = GetPlayerTotalWealth(ArrestedPlayer);
									if(fine < 0) fine = 0;
									Player[ArrestedPlayer][Money] -= fine;
									Groups[Player[playerid][Group]][SafeMoney] += fine;
									format(string, sizeof(string), "You have been arrested by %s. You have been given %d minutes jail time.", GetNameEx(playerid), time);
									SendClientMessage(ArrestedPlayer, NICESKY, string);
									if(Player[ArrestedPlayer][CannotBail] < 1)
 										SendClientMessage(ArrestedPlayer, PINK, "You have been granted permission to bail. (( /bail ))");
 									else
 										SendClientMessage(ArrestedPlayer, PINK, "You have been denied permission to bail.");
									if(strikes > 0)
										format(string, sizeof(string), "%s has arrested %s, giving them %d minutes in jail, a $%d fine, and %d strikes. Bail: %s", GetNormalNameEx(playerid), GetNormalNameEx(ArrestedPlayer), time, fine, strikes, (Player[ArrestedPlayer][CannotBail] == 0) ? ("Granted") : ("Denied"));
									else format(string, sizeof(string), "%s has arrested %s, giving them %d minutes in jail and a $%d fine. Bail: %s", GetNormalNameEx(playerid), GetNormalNameEx(ArrestedPlayer), time, fine, (Player[ArrestedPlayer][CannotBail] == 0) ? ("Granted") : ("Denied"));
									GroupMessage(playerid, ANNOUNCEMENT, string, 1);
									SetPlayerToggle(ArrestedPlayer,  TOGGLE_WALKIE, true);
									Player[ArrestedPlayer][PrisonDuration] = MinutesToSeconds(time);
									Player[ArrestedPlayer][PrisonID] = 2;
									Player[ArrestedPlayer][Cuffed] = 0;
									ResetPlayerWeaponsEx(ArrestedPlayer);

									foreach(Player, i)
									{
										if(Player[i][BeingDraggedBy] == id)
										{
											Player[i][BeingDraggedBy] = -1;
										}
									}

									ClearCriminalRecord(ArrestedPlayer);

									TogglePlayerControllable(ArrestedPlayer, true);


									FindCellForPlayer(ArrestedPlayer);
									Player[ArrestedPlayer][SolitaryDuration] = -1;
									SetPlayerVirtualWorld(ArrestedPlayer, PRISON_VW);

									SavePlayerData(ArrestedPlayer);
									SaveGroup(Player[playerid][Group]);
									SetPlayerArmour(ArrestedPlayer, 0);
									SetPlayerSpecialAction(ArrestedPlayer, SPECIAL_ACTION_NONE);
									RemovePlayerAttachedObject(ArrestedPlayer, 0);
								}
								else
								{
									SendClientMessage(playerid, WHITE, "You can't arrest someone who doesn't have a criminal record.");
								}
							}
							else
							{
								SendClientMessage(playerid, WHITE, "The nearest player must be cuffed, in order to arrest them.");
							}
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "You can't fine for under $0, or over $40,000.");
			}
		}
	}
	return 1;
}

/*command(deliver, playerid, params[])
{
	#pragma unused params
	if(Businesses[Player[playerid][InBusiness]][bType] == 11)
	{
		if(Player[playerid][Harvesting] == 7)
		{
			if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1000)
				return SendClientMessage(playerid, WHITE, "This business is already fully stocked.");
			if(Businesses[Player[playerid][InBusiness]][bVault] >= 5000)
			{
				if(Businesses[Player[playerid][InBusiness]][bSupplyStatus] == 0)
				{
					Businesses[Player[playerid][InBusiness]][bSupplies] += 50;
					Businesses[Player[playerid][InBusiness]][bVault] -= 5000;
					Player[playerid][Money] += 5000;
					Player[playerid][Harvesting] = 0;
					SendClientMessage(playerid, WHITE, "You have finished the run and earned $5,000.");
				}
				else
				{
					SendClientMessage(playerid, WHITE, "This business isn't currently accepting deliveries.");
				}
			}
		}
		else
		{
			SendClientMessage(playerid, WHITE, "You're not on a delivery.");
		}
	}
	else
	{
		SendClientMessage(playerid, WHITE, "You're not in a chemistry / pharmacy.");
	}
	return 1;
}*/

command(elevator, playerid, params[])
{
	#pragma unused params
	if(IsPlayerInRangeOfPoint(playerid, 5, 2267.8208,2448.8154,3.5313) || IsPlayerInRangeOfPoint(playerid, 5, 1562.84814, -1711.01404, -90.75160) || IsPlayerInRangeOfPoint(playerid, 5, 1537.38184, -1684.82300, -80.74860) || IsPlayerInRangeOfPoint(playerid, 5, 1579.15283, -1679.86157, -87.23490) || IsPlayerInRangeOfPoint(playerid, 5, 1564.9611, -1666.4128, 28.3956))
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 1)
		{
			ShowPlayerDialog(playerid, 3928, DIALOG_STYLE_LIST, "Elevator", "Rooftop Level\nDetective Bureau Floor\nFloor 3\nFloor 2\nFloor 1\nGarage Level 1\nGarage Level 2", "Select", "Cancel");
		}
	}
	if(IsPlayerInRangeOfPoint(playerid, 5, 1569.7266, -1667.9274, -60.4563) || IsPlayerInRangeOfPoint(playerid, 5, 2268.0039,2448.0969,-7.1953)) 
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 1)
		{
			ShowPlayerDialog(playerid, 3928, DIALOG_STYLE_LIST, "Elevator", "Rooftop Level\nDetective Bureau Floor\nFloor 3\nFloor 2\nFloor 1\nGarage Level 1\nGarage Level 2", "Select", "Cancel");
		}
	}

	if(IsPlayerInRangeOfPoint(playerid, 5, 1613.1486,1785.7460,-38.6058) || IsPlayerInRangeOfPoint(playerid, 5, 1610.2673,1788.6671,-34.8955) || IsPlayerInRangeOfPoint(playerid, 5, 1615.0090,1786.4961,30.4688))
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 3)
		{
			ShowPlayerDialog(playerid, 3929, DIALOG_STYLE_LIST,"Elevator", "Rooftop\nInterior Level\nMorgue", "Select", "Cancel");
		}
	}
	
	if(IsPlayerInRangeOfPoint(playerid, 5, 669.8990,-587.7369,-40.5621) || IsPlayerInRangeOfPoint(playerid, 5, 596, -558, -53) || IsPlayerInRangeOfPoint(playerid, 5, 584, -618, -38) || IsPlayerInRangeOfPoint(playerid, 5, 609.1933,-591.8193,-53.9141))
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 1)
		{
			ShowPlayerDialog(playerid, 3930, DIALOG_STYLE_LIST,"Elevator", "Jefferson Motel\nAdministration\nKill House\nLobby", "Select", "Cancel");
		}
	}

	return 1;
}

CMD:go(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new string[500], cat[128] = "boobies";
	for(new i; i < sizeof(GoMenu); i++)
	{
		if(!strcmp(GoMenu[i][Category], "Nothing", true))
			continue;

		if(strcmp(GoMenu[i][Category], cat, true))
		{
			format(cat, sizeof(cat), GoMenu[i][Category]);

			if(strfind(string, cat, true, 0) != -1)
				continue;

			format(string, sizeof(string), "%s%s\n", string, cat);
		}
	}
	ShowPlayerDialog(playerid, GO_MENU, DIALOG_STYLE_LIST, "Teleports", string, "Select", "Cancel");
	return SavePlayerPos(playerid);
}

CMD:gomenu(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 3)
		return 1;

	new option[7], cat[64], type[64], name[64];
	if(sscanf(params, "s[7]s[64]s[64]s[64]", option, cat, type, name))
		return SendClientMessage(playerid, GREY, "SYNTAX: /gomenu [add/remove] [category] [type] [name]");

	new string[512];
	if(!strcmp(option, "add", true))
	{
		for(new i; i < sizeof(GoMenu); i++)
		{
			if(GoMenu[i][goX] == 0.00)
				continue;

			if(!strcmp(GoMenu[i][Category], cat, true) && !strcmp(GoMenu[i][Type], type, true) && !strcmp(GoMenu[i][goName], name, true))
				return SendClientMessage(playerid, GREY, "Error: A location in the /go menu already exists as that.");
		}

		for(new i; i < strlen(name); i++)
		{
			if(name[i] == ' ')
				return SendClientMessage(playerid, GREY, "Error: You cannot have spaces in the category, type or name.");
		}

		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		new int = GetPlayerInterior(playerid);
		format(string, sizeof(string), "%s %s %s %f %f %f %d\r\n", cat, type, name, x, y, z, int);

		new File:file = fopen(GOMENU_FILE, io_readwrite);

		new temp[512];
		while(fread(file, temp))
			print(temp);

		fwrite(file, string);
		fclose(file);
		LoadGoMenu();

		format(string, sizeof(string), "%s added %s>%s>%s to the /go menu.", Player[playerid][AdminName], cat, type, name);
		SendToAdmins(ADMINORANGE, string, 1);
		AdminActionsLog(string);
	}
	else if(!strcmp(option, "remove", true))
	{
		new id = -1;
		for(new i; i < sizeof(GoMenu); i++)
		{
			if(GoMenu[i][goX] == 0.00)
				continue;

			if(strcmp(GoMenu[i][Category], cat, true))
				continue;

			if(strcmp(GoMenu[i][Type], type, true))
				continue;

			if(strcmp(GoMenu[i][goName], name, true))
				continue;

			id = i;
			strcpy(GoMenu[i][Category], "Nothing", 64);
			strcpy(GoMenu[i][Type], "Nothing", 64);
			strcpy(GoMenu[i][goName], "Nothing", 64);
			GoMenu[i][goX] = 0.00;
			GoMenu[i][goY] = 0.00;
			GoMenu[i][goZ] = 0.00;
			GoMenu[i][goInt] = 0;
		}

		if(id == -1)
			return SendClientMessage(playerid, GREY, "Error: There are no locations that exist as that.");

		fremove(GOMENU_FILE);
		new File:file = fopen(GOMENU_FILE, io_write);
		for(new i; i < sizeof(GoMenu); i++)
		{
			if(GoMenu[i][goX] != 0.00 && GoMenu[i][goY] != 0.00)
			{
				format(string, sizeof(string), "%s %s %s %f %f %f %d\r\n", GoMenu[i][Category], GoMenu[i][Type], GoMenu[i][goName], GoMenu[i][goX], GoMenu[i][goY], GoMenu[i][goZ], GoMenu[i][goInt]);
				fwrite(file, string);
			}
		}
		fclose(file);
		LoadGoMenu();

		format(string, sizeof(string), "%s removed %s>%s>%s from the /go menu.", Player[playerid][AdminName], cat, type, name);
		SendToAdmins(ADMINORANGE, string, 1);
		AdminActionsLog(string);
	}
	else
		return SendClientMessage(playerid, GREY, "SYNTAX: /gomenu [add/remove] [category] [type] [name]");

	return 1;
}

stock LoadGoMenu()
{
	for(new i; i < MAX_LOCATIONS; i++)
	{
		strcpy(GoMenu[i][Category], "Nothing", 64);
		strcpy(GoMenu[i][Type], "Nothing", 64);
		strcpy(GoMenu[i][goName], "Nothing", 64);
		GoMenu[i][goX] = 0.00;
		GoMenu[i][goY] = 0.00;
		GoMenu[i][goZ] = 0.00;
		GoMenu[i][goInt] = 0;
	}

    if(!fexist(GOMENU_FILE))
    {
        print("[system] GoMenu file does not exist -- Creating..");
        return dini_Create(GOMENU_FILE);
    }

    new File:file = fopen(GOMENU_FILE, io_read), string[512], idx;
    while(fread(file, string))
    {
        sscanf(string, "s[64]s[64]s[64]fffd", GoMenu[idx][Category], GoMenu[idx][Type], GoMenu[idx][goName], GoMenu[idx][goX], GoMenu[idx][goY], GoMenu[idx][goZ], GoMenu[idx][goInt]);
        //printf("%s>%s>%s (%f, %f, %f, %d)", GoMenu[idx][Category], GoMenu[idx][Type], GoMenu[idx][goName], GoMenu[idx][goX], GoMenu[idx][goY], GoMenu[idx][goZ], GoMenu[idx][goInt]);
		idx++;
    }
    fclose(file);
    return 1;
}

stock SavePlayerPos(playerid)
{
	new Float:lastX, Float:lastY, Float:lastZ, lastInt = GetPlayerInterior(playerid), lastVW = GetPlayerVirtualWorld(playerid);
	GetPlayerPos(playerid, lastX, lastY, lastZ);
	SetPVarInt(playerid, "lastInt", lastInt+1);
	SetPVarInt(playerid, "lastVW", lastVW+1);
	SetPVarFloat(playerid, "lastX", lastX);
	SetPVarFloat(playerid, "lastY", lastY);
	SetPVarFloat(playerid, "lastZ", lastZ);
	return 1;
}

command(resetplayer, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		if(Player[playerid][AdminLevel] >= 3)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /resetplayer [playerid]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 3)
		{
			Player[id][DeliverTime] = 0;
			Player[id][TruckerTestCooldown] = 0;
			Player[id][MatrunInabilityDuration] = 0;
			Player[id][InabilityToDropCar] = 0;
			Player[id][CantFish] = 0;
			Player[id][CarModDelay] = 0;
			Player[id][DetectiveCooldown] = 0;
			Player[id][GunTime] = 0;
			Player[id][PizzaCooldown] = 0;
			Player[id][CantDeliverPizza] = 0;
			Player[id][JobCooldown] = 0;
			Player[id][GarbageCooldown] = 0;
			SetPVarInt(id, "CarReload", gettime());
			Player[id][PotTimer] = 1;
			Player[id][CocaineTimer] = 1;
			format(string, sizeof(string), "You have reset %s's timers. Some may take a full minute to clear.", GetName(id));
			SendClientMessage(playerid, WHITE, string);
		}
	}
	return 1;
}

command(movelocation, playerid, params[])
{
	new Location[128];
	if(sscanf(params, "s[128]", Location))
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /movelocation [usage]");
			SendClientMessage(playerid, GREY, "Prison, Jail, Spawn, LockerPos, LockerPos2, ArrestPos,  OwnedCarSpawn, OwnedCarSpawn2, VipCarSpawn, OwnedBoatSpawn, BikeSpawn, VanSpawn");
			//SendClientMessage(playerid, GREY, "LockerPos2, Harvest1, Harvest2, Harvest3, Harvest4, Harvest5, Matdrop1, Matdrop2, Matdrop3, Matdrop4, Matdrop5");
			SendClientMessage(playerid, GREY, "UnimpoundPos, VipLoungeExt, VipLoungeInt, VipLoungeLocker, Hospital, DropCar");
			SendClientMessage(playerid, GREY, "FishDeadZone, TicketPos, SupplyPickup, GasPickup, ModShop, ModShopExit, LockerPos3");
			return 1;
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			if(strcmp(Location, "Prison", true) == 0)
			{
				GetPlayerPos(playerid, Prison1X, Prison1Y, Prison1Z);
				Prison1Int = GetPlayerInterior(playerid);
				//Prison1World = GetPlayerVirtualWorld(playerid);

				dini_FloatSet("Assets.ini", "Prison1X", Prison1X);
				dini_FloatSet("Assets.ini", "Prison1Y", Prison1Y);
				dini_FloatSet("Assets.ini", "Prison1Z", Prison1Z);
				dini_IntSet("Assets.ini", "Prison1Int", Prison1Int);
				//dini_IntSet("Assets.ini", "Prison1World", Prison1World);

				SendClientMessage(playerid, WHITE, "You have successfully re-located the Prison location.");
			}
			else if(!strcmp(Location, "BikeSpawn", true))
			{
				GetPlayerPos(playerid, BikeSpawn[0], BikeSpawn[1], BikeSpawn[2]);

				dini_FloatSet("Assets.ini", "BikeSpawnX", BikeSpawn[0]);
				dini_FloatSet("Assets.ini", "BikeSpawnY", BikeSpawn[1]);
				dini_FloatSet("Assests.ini", "BikeSpawnZ", BikeSpawn[2]);

				SendClientMessage(playerid, WHITE, "You have successfully re-located the Bike spawn.");
			}
			else if(strcmp(Location, "Harvest1", true) == 0)
			{
				GetPlayerPos(playerid, Harvest1X, Harvest1Y, Harvest1Z);

				dini_FloatSet("Assets.ini", "Harvest1X", Harvest1X);
				dini_FloatSet("Assets.ini", "Harvest1Y", Harvest1Y);
				dini_FloatSet("Assets.ini", "Harvest1Z", Harvest1Z);

				SendClientMessage(playerid, WHITE, "You have successfully re-located the Harvest1 location.");
			}
			else if(strcmp(Location, "Harvest2", true) == 0)
			{
				GetPlayerPos(playerid, Harvest2X, Harvest2Y, Harvest2Z);

				dini_FloatSet("Assets.ini", "Harvest2X", Harvest2X);
				dini_FloatSet("Assets.ini", "Harvest2Y", Harvest2Y);
				dini_FloatSet("Assets.ini", "Harvest2Z", Harvest2Z);

				SendClientMessage(playerid, WHITE, "You have successfully re-located the Harvest2 location.");
			}
			else if(strcmp(Location, "Harvest3", true) == 0)
			{
				GetPlayerPos(playerid, Harvest3X, Harvest3Y, Harvest3Z);

				dini_FloatSet("Assets.ini", "Harvest3X", Harvest3X);
				dini_FloatSet("Assets.ini", "Harvest3Y", Harvest3Y);
				dini_FloatSet("Assets.ini", "Harvest3Z", Harvest3Z);

				SendClientMessage(playerid, WHITE, "You have successfully re-located the Harvest3 location.");
			}
			else if(strcmp(Location, "Harvest4", true) == 0)
			{
				GetPlayerPos(playerid, Harvest4X, Harvest4Y, Harvest4Z);

				dini_FloatSet("Assets.ini", "Harvest4X", Harvest4X);
				dini_FloatSet("Assets.ini", "Harvest4Y", Harvest4Y);
				dini_FloatSet("Assets.ini", "Harvest4Z", Harvest4Z);

				SendClientMessage(playerid, WHITE, "You have successfully re-located the Harvest4 location.");
			}
			else if(strcmp(Location, "Harvest5", true) == 0)
			{
				GetPlayerPos(playerid, Harvest5X, Harvest5Y, Harvest5Z);

				dini_FloatSet("Assets.ini", "Harvest5X", Harvest5X);
				dini_FloatSet("Assets.ini", "Harvest5Y", Harvest5Y);
				dini_FloatSet("Assets.ini", "Harvest5Z", Harvest5Z);

				SendClientMessage(playerid, WHITE, "You have successfully re-located the Harvest5 location.");
			}
			else if(strcmp(Location, "OwnedCarSpawn", true) == 0)
			{
				GetPlayerPos(playerid, OwnedCarSpawnX, OwnedCarSpawnY, OwnedCarSpawnZ);

				dini_FloatSet("Assets.ini", "OwnedCarSpawnX", OwnedCarSpawnX);
				dini_FloatSet("Assets.ini", "OwnedCarSpawnY", OwnedCarSpawnY);
				dini_FloatSet("Assets.ini", "OwnedCarSpawnZ", OwnedCarSpawnZ);

				SendClientMessage(playerid, WHITE, "You have successfully re-located the Owned Car Spawn location.");
			}
			else if(strcmp(Location, "OwnedCarSpawn2", true) == 0)
			{
				GetPlayerPos(playerid, OwnedCarSpawn2X, OwnedCarSpawn2Y, OwnedCarSpawn2Z);

				dini_FloatSet("Assets.ini", "OwnedCarSpawn2X", OwnedCarSpawn2X);
				dini_FloatSet("Assets.ini", "OwnedCarSpawn2Y", OwnedCarSpawn2Y);
				dini_FloatSet("Assets.ini", "OwnedCarSpawn2Z", OwnedCarSpawn2Z);

				SendClientMessage(playerid, WHITE, "You have successfully re-located the Owned Car Spawn 2 location.");
			}
			else if(strcmp(Location, "OwnedBoatSpawn", true) == 0)
			{
				GetPlayerPos(playerid, OwnedBoatSpawnX, OwnedBoatSpawnY, OwnedBoatSpawnZ);

				dini_FloatSet("Assets.ini", "OwnedBoatSpawnX", OwnedBoatSpawnX);
				dini_FloatSet("Assets.ini", "OwnedBoatSpawnY", OwnedBoatSpawnY);
				dini_FloatSet("Assets.ini", "OwnedBoatSpawnZ", OwnedBoatSpawnZ);

				SendClientMessage(playerid, WHITE, "You have successfully re-located the Owned Boat Spawn location.");
			}
			else if(strcmp(Location, "DropCar", true) == 0)
			{
				GetPlayerPos(playerid, DropCarX, DropCarY, DropCarZ);

				dini_FloatSet("Assets.ini", "DropCarX", DropCarX);
				dini_FloatSet("Assets.ini", "DropCarY", DropCarY);
				dini_FloatSet("Assets.ini", "DropCarZ", DropCarZ);

				SendClientMessage(playerid, WHITE, "You have successfully re-located the DropCar location.");
			}
			else if(strcmp(Location, "ArrestPos", true) == 0)
			{
				GetPlayerPos(playerid, ArrestPosX, ArrestPosY, ArrestPosZ);

				DestroyDynamicPickup(ArrestPosPickup);

				dini_FloatSet("Assets.ini", "ArrestPosX", ArrestPosX);
				dini_FloatSet("Assets.ini", "ArrestPosY", ArrestPosY);
				dini_FloatSet("Assets.ini", "ArrestPosZ", ArrestPosZ);

				SendClientMessage(playerid, WHITE, "You have successfully re-located the ArrestPos location.");

				ArrestPosPickup = CreateDynamicPickup(1239, 23, ArrestPosX, ArrestPosY, ArrestPosZ, 0, 0, -1, 150.0);
				UpdateStreamerItemLocation(STREAMER_TYPE_3D_TEXT_LABEL, ArrestLocLabel, ArrestPosX, ArrestPosY, ArrestPosZ, 0, 0);
			}
         /*	else if(strcmp(Location, "Jail", true) == 0)
			{
				GetPlayerPos(playerid, Prison2X, Prison2Y, Prison2Z);
				Prison2Int = GetPlayerInterior(playerid);
				Prison2World = GetPlayerVirtualWorld(playerid);

				dini_FloatSet("Assets.ini", "Prison2X", Prison2X);
				dini_FloatSet("Assets.ini", "Prison2Y", Prison2Y);
				dini_FloatSet("Assets.ini", "Prison2Z", Prison2Z);
				dini_IntSet("Assets.ini", "Prison2Int", Prison2Int);
				dini_IntSet("Assets.ini", "Prison2World", Prison2World);

				SendClientMessage(playerid, WHITE, "You have successfully re-located the Jail location.");
			} */
			else if(strcmp(Location, "Hospital", true) == 0)
			{
				GetPlayerPos(playerid, HospitalSpawnX, HospitalSpawnY, HospitalSpawnZ);
				HospitalInt = GetPlayerInterior(playerid);

				dini_FloatSet("Assets.ini", "HospitalSpawnX", HospitalSpawnX);
				dini_FloatSet("Assets.ini", "HospitalSpawnY", HospitalSpawnY);
				dini_FloatSet("Assets.ini", "HospitalSpawnZ", HospitalSpawnZ);
				dini_IntSet("Assets.ini", "HospitalInt", HospitalInt);

				SendClientMessage(playerid, WHITE, "You have successfully re-located the Hospital.");
			}
			else if(strcmp(Location, "LockerPos3", true) == 0)
			{
				GetPlayerPos(playerid, LockerPos3X, LockerPos3Y, LockerPos3Z);
				LockerPos3Int = GetPlayerInterior(playerid);

				dini_FloatSet("Assets.ini", "LockerPos3X", LockerPos3X);
				dini_FloatSet("Assets.ini", "LockerPos3Y", LockerPos3Y);
				dini_FloatSet("Assets.ini", "LockerPos3Z", LockerPos3Z);
				dini_IntSet("Assets.ini", "LockerPos3Int", LockerPos3Int);

				SendClientMessage(playerid, WHITE, "You have successfully re-located the LockerPos3 location.");
			}
			else if(strcmp(Location, "LockerPos2", true) == 0)
			{
				GetPlayerPos(playerid, LockerPos2X, LockerPos2Y, LockerPos2Z);
				LockerPos2Int = GetPlayerInterior(playerid);

				dini_FloatSet("Assets.ini", "LockerPos2X", LockerPos2X);
				dini_FloatSet("Assets.ini", "LockerPos2Y", LockerPos2Y);
				dini_FloatSet("Assets.ini", "LockerPos2Z", LockerPos2Z);
				dini_IntSet("Assets.ini", "LockerPos2Int", LockerPos2Int);

				SendClientMessage(playerid, WHITE, "You have successfully re-located the LockerPos2 location.");
			}
			else if(strcmp(Location, "LockerPos", true) == 0)
			{
				GetPlayerPos(playerid, LockerPosX, LockerPosY, LockerPosZ);
				LockerPosInt = GetPlayerInterior(playerid);

				dini_FloatSet("Assets.ini", "LockerPosX", LockerPosX);
				dini_FloatSet("Assets.ini", "LockerPosY", LockerPosY);
				dini_FloatSet("Assets.ini", "LockerPosZ", LockerPosZ);
				dini_IntSet("Assets.ini", "LockerPosInt", LockerPosInt);

				SendClientMessage(playerid, WHITE, "You have successfully re-located the LockerPos location.");
			}
			else if(strcmp(Location, "Spawn", true) == 0)
			{
				GetPlayerPos(playerid, SpawnX, SpawnY, SpawnZ);

				SpawnInt = GetPlayerInterior(playerid);
				SpawnWorld = GetPlayerVirtualWorld(playerid);

				dini_FloatSet("Spawn.ini", "SpawnX", SpawnX);
				dini_FloatSet("Spawn.ini", "SpawnY", SpawnY);
				dini_FloatSet("Spawn.ini", "SpawnZ", SpawnZ);
				dini_IntSet("Spawn.ini", "SpawnInt", SpawnInt);
				dini_IntSet("Spawn.ini", "SpawnWorld", SpawnWorld);
				SendClientMessage(playerid, WHITE, "You have successfully re-located the Spawn location.");
			}
			else if(strcmp(Location, "AgencyDoorPos", true) == 0)
			{
				GetPlayerPos(playerid, AgencyDoorPosX, AgencyDoorPosY, AgencyDoorPosZ);
				AgencyDoorPosInt = GetPlayerInterior(playerid);

				dini_FloatSet("Assets.ini", "AgencyDoorPosX", AgencyDoorPosX);
				dini_FloatSet("Assets.ini", "AgencyDoorPosY", AgencyDoorPosY);
				dini_FloatSet("Assets.ini", "AgencyDoorPosZ", AgencyDoorPosZ);
				dini_IntSet("Assets.ini", "AgencyDoorPosInt", AgencyDoorPosInt);

				SendClientMessage(playerid, WHITE, "You have successfully re-located the AgencyDoorPos location.");
			}
			else if(strcmp(Location, "AgencyIntPos", true) == 0)
			{
				GetPlayerPos(playerid, AgencyIntPosX, AgencyIntPosY, AgencyIntPosZ);
				AgencyIntPosInt = GetPlayerInterior(playerid);

				dini_FloatSet("Assets.ini", "AgencyIntPosX", AgencyIntPosX);
				dini_FloatSet("Assets.ini", "AgencyIntPosY", AgencyIntPosY);
				dini_FloatSet("Assets.ini", "AgencyIntPosZ", AgencyIntPosZ);
				dini_IntSet("Assets.ini", "AgencyIntPosInt", AgencyIntPosInt);

				SendClientMessage(playerid, WHITE, "You have successfully re-located the AgencyIntPos location.");
			}
			else if(strcmp(Location, "AgencyGarageEntrance", true) == 0)
			{
				GetPlayerPos(playerid, AgencyGarageEntranceX, AgencyGarageEntranceY, AgencyGarageEntranceZ);

				dini_FloatSet("Assets.ini", "AgencyGarageEntranceX", AgencyGarageEntranceX);
				dini_FloatSet("Assets.ini", "AgencyGarageEntranceY", AgencyGarageEntranceY);
				dini_FloatSet("Assets.ini", "AgencyGarageEntranceZ", AgencyGarageEntranceZ);

				SendClientMessage(playerid, WHITE, "You have successfully re-located the AgencyGarageEntrance location.");
			}
			else if(strcmp(Location, "AgencyGarageExit", true) == 0)
			{
				GetPlayerPos(playerid, AgencyGarageExitX, AgencyGarageExitY, AgencyGarageExitZ);

				dini_FloatSet("Assets.ini", "AgencyGarageExitX", AgencyGarageExitX);
				dini_FloatSet("Assets.ini", "AgencyGarageExitY", AgencyGarageExitY);
				dini_FloatSet("Assets.ini", "AgencyGarageExitZ", AgencyGarageExitZ);

				SendClientMessage(playerid, WHITE, "You have successfully re-located the AgencyGarageExit location.");
			}
			else if(strcmp(Location, "AgencyHQGarageEntrance", true) == 0)
			{
				GetPlayerPos(playerid, AgencyHQGarageEntranceX, AgencyHQGarageEntranceY, AgencyHQGarageEntranceZ);
				AgencyHQGarageEntranceInt = GetPlayerInterior(playerid);

				dini_FloatSet("Assets.ini", "AgencyHQGarageEntranceX", AgencyHQGarageEntranceX);
				dini_FloatSet("Assets.ini", "AgencyHQGarageEntranceY", AgencyHQGarageEntranceY);
				dini_FloatSet("Assets.ini", "AgencyHQGarageEntranceZ", AgencyHQGarageEntranceZ);
				dini_IntSet("Assets.ini", "AgencyHQGarageEntranceInt", AgencyHQGarageEntranceInt);

				SendClientMessage(playerid, WHITE, "You have successfully re-located the AgencyHQGarageEntrance location.");
			}
			else if(strcmp(Location, "AgencyHQGarageExit", true) == 0)
			{
				GetPlayerPos(playerid, AgencyHQGarageExitX, AgencyHQGarageExitY, AgencyHQGarageExitZ);

				dini_FloatSet("Assets.ini", "AgencyHQGarageExitX", AgencyHQGarageExitX);
				dini_FloatSet("Assets.ini", "AgencyHQGarageExitY", AgencyHQGarageExitY);
				dini_FloatSet("Assets.ini", "AgencyHQGarageExitZ", AgencyHQGarageExitZ);

				SendClientMessage(playerid, WHITE, "You have successfully re-located the AgencyHQGarageExit location.");
			}
			else if(!strcmp(Location, "VipCarSpawn", true))
			{
			    GetPlayerPos(playerid, VipCarSpawn[0], VipCarSpawn[1], VipCarSpawn[2]);

			    dini_FloatSet("Assets.ini", "VipCarSpawnX", VipCarSpawn[0]);
			    dini_FloatSet("Assets.ini", "VipCarSpawnY", VipCarSpawn[1]);
			    dini_FloatSet("Assets.ini", "VipCarSpawnZ", VipCarSpawn[2]);

			    SendClientMessage(playerid, WHITE, "You have successfully re-located the VipCarSpawn location.");
			}
			else if(!strcmp(Location, "UnimpoundPos", true))
			{
			    GetPlayerPos(playerid, UnimpoundPos[0], UnimpoundPos[1], UnimpoundPos[2]);
				GetPlayerFacingAngle(playerid, UnimpoundPos[3]);

			    dini_FloatSet("Assets.ini", "UnimpoundPosX", UnimpoundPos[0]);
			    dini_FloatSet("Assets.ini", "UnimpoundPosY", UnimpoundPos[1]);
			    dini_FloatSet("Assets.ini", "UnimpoundPosZ", UnimpoundPos[2]);
			    dini_FloatSet("Assets.ini", "UnimpoundPosA", UnimpoundPos[3]);

			    SendClientMessage(playerid, WHITE, "You have successfully re-located the UnimpoundPos location.");
			}
			else if(!strcmp(Location, "VipLoungeExt", true))
			{
			    GetPlayerPos(playerid, VipLounge[0], VipLounge[1], VipLounge[2]);

			    dini_FloatSet("Assets.ini", "VipLoungeExtX", VipLounge[0]);
			    dini_FloatSet("Assets.ini", "VipLoungeExtY", VipLounge[1]);
			    dini_FloatSet("Assets.ini", "VipLoungeExtZ", VipLounge[2]);

				DestroyDynamicPickup(VipExtPickup);
				VipExtPickup = CreateDynamicPickup(1239, 23, VipLounge[0], VipLounge[1], VipLounge[2], 0, 0, -1, 150.0);
				UpdateStreamerItemLocation(STREAMER_TYPE_3D_TEXT_LABEL, VIPLoungeLabel, VipLounge[0], VipLounge[1], VipLounge[2], 0, 0);
			    SendClientMessage(playerid, WHITE, "You have successfully re-located the VipLoungeExt location.");
			}
			else if(!strcmp(Location, "VipLoungeInt", true))
			{
			    GetPlayerPos(playerid, VipLounge[3], VipLounge[4], VipLounge[5]);
				VipLoungeInterior = GetPlayerInterior(playerid);
				VipLoungeVW = GetPlayerVirtualWorld(playerid);

			    dini_FloatSet("Assets.ini", "VipLoungeIntX", VipLounge[3]);
			    dini_FloatSet("Assets.ini", "VipLoungeIntY", VipLounge[4]);
			    dini_FloatSet("Assets.ini", "VipLoungeIntZ", VipLounge[5]);
				dini_IntSet("Assets.ini", "VipLoungeInterior", VipLoungeInterior);
				dini_IntSet("Assets.ini", "VipLoungeVW", VipLoungeVW);

			    SendClientMessage(playerid, WHITE, "You have successfully re-located the VipLoungeInt location.");
			}
			else if(!strcmp(Location, "VipLoungeLocker", true))
			{
			    GetPlayerPos(playerid, VipLounge[6], VipLounge[7], VipLounge[8]);

			    dini_FloatSet("Assets.ini", "VipLoungeLockerX", VipLounge[6]);
			    dini_FloatSet("Assets.ini", "VipLoungeLockerY", VipLounge[7]);
			    dini_FloatSet("Assets.ini", "VipLoungeLockerZ", VipLounge[8]);

				DestroyDynamicPickup(VipLockerPickup);
				VipLockerPickup = CreateDynamicPickup(1239, 23, VipLounge[6], VipLounge[7], VipLounge[8], VipLoungeVW, VipLoungeInterior, -1, 150.0);
			    SendClientMessage(playerid, WHITE, "You have successfully re-located the VipLoungeLocker location.");
			}
			else if(!strcmp(Location, "FishDeadZone", true))
			{
			    GetPlayerPos(playerid, FishDeadZone[0], FishDeadZone[1], FishDeadZone[2]);

			    dini_FloatSet("Assets.ini", "FishDeadZoneX", FishDeadZone[0]);
			    dini_FloatSet("Assets.ini", "FishDeadZoneY", FishDeadZone[1]);
			    dini_FloatSet("Assets.ini", "FishDeadZoneZ", FishDeadZone[2]);

			    SendClientMessage(playerid, WHITE, "You have successfully re-located the FishDeadZone location.");
			}
			else if(!strcmp(Location, "ticketpos", true))
			{
				GetPlayerPos(playerid, TicketPos[0], TicketPos[1], TicketPos[2]);
				TicketPosInt = GetPlayerInterior(playerid);
				TicketPosVW = GetPlayerVirtualWorld(playerid);

			    dini_FloatSet("Assets.ini", "TicketPosX", TicketPos[0]);
			    dini_FloatSet("Assets.ini", "TicketPosY", TicketPos[1]);
			    dini_FloatSet("Assets.ini", "TicketPosZ", TicketPos[2]);
			    dini_IntSet("Assets.ini", "TicketPosInt", TicketPosInt);
			    dini_IntSet("Assets.ini", "TicketPosVW", TicketPosVW);

				UpdateStreamerItemLocation(STREAMER_TYPE_3D_TEXT_LABEL, LSPDFrontDeskLabel, TicketPos[0], TicketPos[1], TicketPos[2], TicketPosVW, TicketPosInt);
			    SendClientMessage(playerid, WHITE, "You have successfully re-located the TicketPos location.");
			}
			else if(!strcmp(Location, "SupplyPickup", true))
			{
				GetPlayerPos(playerid, TruckerPickup[0], TruckerPickup[1], TruckerPickup[2]);

			    dini_FloatSet("Assets.ini", "SupplyPickupX", TruckerPickup[0]);
			    dini_FloatSet("Assets.ini", "SupplyPickupY", TruckerPickup[1]);
			    dini_FloatSet("Assets.ini", "SupplyPickupZ", TruckerPickup[2]);

				DestroyDynamicPickup(TruckerPickups[0]);
				TruckerPickups[0] = CreateDynamicPickup(1239, 23, TruckerPickup[0], TruckerPickup[1], TruckerPickup[2], 0, -1, -1, 150.0);

				UpdateStreamerItemLocation(STREAMER_TYPE_3D_TEXT_LABEL, TruckerSupplyPickupLabel, TruckerPickup[0], TruckerPickup[1], TruckerPickup[2]);
			    SendClientMessage(playerid, WHITE, "You have successfully re-located the SupplyPickup location.");
			}
			else if(!strcmp(Location, "GasPickup", true))
			{
				GetPlayerPos(playerid, TruckerPickup[3], TruckerPickup[4], TruckerPickup[5]);

			    dini_FloatSet("Assets.ini", "GasPickupX", TruckerPickup[3]);
			    dini_FloatSet("Assets.ini", "GasPickupY", TruckerPickup[4]);
			    dini_FloatSet("Assets.ini", "GasPickupZ", TruckerPickup[5]);

				DestroyDynamicPickup(TruckerPickups[1]);
				TruckerPickups[1] = CreateDynamicPickup(1239, 23, TruckerPickup[3], TruckerPickup[4], TruckerPickup[5], 0, -1, -1, 150.0);

				UpdateStreamerItemLocation(STREAMER_TYPE_3D_TEXT_LABEL, TruckerFuelPickupLabel, TruckerPickup[3], TruckerPickup[4], TruckerPickup[5]);
			    SendClientMessage(playerid, WHITE, "You have successfully re-located the GasPickup location.");
			}
			else if(!strcmp(Location, "VanSpawn", true))
			{
				GetPlayerPos(playerid, VanSpawn[0], VanSpawn[1], VanSpawn[2]);

				dini_FloatSet("Assets.ini", "VanSpawnX", VanSpawn[0]);
				dini_FloatSet("Assets.ini", "VanSpawnY", VanSpawn[1]);
				dini_FloatSet("Assets.ini", "VanSpawnZ", VanSpawn[2]);

				SendClientMessage(playerid, WHITE, "You have successfully re-located the van spawn location.");
			}
			else if(!strcmp(Location, "ModShop", true))
			{
				if(IsValidDynamic3DTextLabel(ModShop_Label))
					DestroyDynamic3DTextLabel(ModShop_Label);

				GetPlayerPos(playerid, ModShopPos[0], ModShopPos[1], ModShopPos[2]);

				dini_FloatSet("Assets.ini", "ModShopX", ModShopPos[0]);
				dini_FloatSet("Assets.ini", "ModShopY", ModShopPos[1]);
				dini_FloatSet("Assets.ini", "ModShopZ", ModShopPos[2]);

				ModShop_Label = CreateDynamic3DTextLabel("Wheel Arch Angels\nUse /entermodshop to enter", GREEN, ModShopPos[0], ModShopPos[1], ModShopPos[2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);

				SendClientMessage(playerid, WHITE, "You have successfully re-located the mod shop location.");
			}
			else if(!strcmp(Location, "ModShopExit", true))
			{
				GetPlayerPos(playerid, ModShopExitPos[0], ModShopExitPos[1], ModShopExitPos[2]);
				GetPlayerFacingAngle(playerid, ModShopExitPos[3]);

				dini_FloatSet("Assets.ini", "ModShopExitX", ModShopExitPos[0]);
				dini_FloatSet("Assets.ini", "ModShopExitY", ModShopExitPos[1]);
				dini_FloatSet("Assets.ini", "ModShopExitZ", ModShopExitPos[2]);
				dini_FloatSet("Assets.ini", "ModShopExitAng", ModShopExitPos[3]);

				SendClientMessage(playerid, WHITE, "You have successfully re-loacted the mod shop exit location.");
			}
			else
			{
				SendClientMessage(playerid, WHITE, "Invalid location.");
			}
		}
	}
	return 1;
}

command(news, playerid, params[])
{
	new message[128], string[128];
	if(sscanf(params, "s[128]", message))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /news [message]");
	}
	else
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 5 || Player[playerid][InterviewPowers] == 1)
		{
			format(string, sizeof(string), "[NEWS] Broadcaster %s: %s", GetNameEx(playerid), message);
			ICChatLog(string);
			format(string, sizeof(string), "[NEWS] Broadcaster %s: %s", GetNameEx(playerid), message);

			new sql, idx;
			foreach(Player, i)
			{
				if(GetPlayerToggle(playerid, TOGGLE_NEWS) == true)
					continue;

				if(GetPlayerToggle(playerid, TOGGLE_SAM_RADIO) == true)
					continue;

				sql = GetVSQLID(GetPlayerVehicleID(i)), idx = GetVIndex(sql);
				if(sql == 0 || Veh[idx][RadioInstalled] == 0)
					continue;

				SendClientMessage(i, COLOR_PINK, string);
			}

			format(string, sizeof(string), "[%s accent] %s says: %s", accents[Player[playerid][Accent]], GetNameEx(playerid), message);
			NearByMessage(playerid, -1, string);
		}
		else
		{
			SendClientMessage(playerid, WHITE, "You're not a radio presenter.");
		}
	}
	return 1;
}

command(weather, playerid, params[])
{
	new message[128], string[128];
	if(sscanf(params, "s[128]", message))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /weather [message]");
	}
	else
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 5 || Player[playerid][InterviewPowers] == 1)
		{
			format(string, sizeof(string), "[WEATHER] Broadcaster %s: %s", GetNameEx(playerid), message);
			ICChatLog(string);
			format(string, sizeof(string), "[WEATHER] Broadcaster %s: %s", GetNameEx(playerid), message);

			new sql, idx;
			foreach(Player, i)
			{
				if(GetPlayerToggle(playerid, TOGGLE_NEWS) == true)
					continue;

				if(GetPlayerToggle(playerid, TOGGLE_SAM_RADIO) == true)
					continue;

				sql = GetVSQLID(GetPlayerVehicleID(i)), idx = GetVIndex(sql);
				if(sql == 0 || Veh[idx][RadioInstalled] == 0)
					continue;

				SendClientMessage(i, COLOR_PINK, string);
			}

			format(string, sizeof(string), "[%s accent] %s says: %s", accents[Player[playerid][Accent]], GetNameEx(playerid), message);
			NearByMessage(playerid, -1, string);
		}
		else
		{
			SendClientMessage(playerid, WHITE, "You're not a radio presenter.");
		}
	}
	return 1;
}

command(rm, playerid, params[])
{
	new message[128], string[128];
	if(sscanf(params, "s[128]", message))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /rm [message]");
	}
	else
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 5 || Player[playerid][InterviewPowers] == 1)
		{
			format(string, sizeof(string), "[RADIO] Broadcaster %s: %s", GetNameEx(playerid), message);
			ICChatLog(string);
			format(string, sizeof(string), "[RADIO] Broadcaster %s: %s", GetNameEx(playerid), message);

			new sql, idx;
			foreach(Player, i)
			{
				if(GetPVarInt(i, "ToggedRM") == 1)
					continue;

				sql = GetVSQLID(GetPlayerVehicleID(i)), idx = GetVIndex(sql);
				if(sql == 0 || Veh[idx][RadioInstalled] == 0)
					continue;

				SendClientMessage(i, COLOR_PINK, string);
			}

			format(string, sizeof(string), "[%s accent] %s says: %s", accents[Player[playerid][Accent]], GetNameEx(playerid), message);
			NearByMessage(playerid, -1, string);
		}
		else
		{
			SendClientMessage(playerid, WHITE, "You're not a radio presenter.");
		}
	}
	return 1;
}

command(grantinterviewpowers, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /grantinterviewpowers [playerid]");
	}
	else
	{
		if(IsPlayerConnectedEx(id))
		{
			if(Groups[Player[playerid][Group]][CommandTypes] == 5)
			{
				if(Player[id][InterviewPowers] == 1)
				{
					format(string, sizeof(string), "You have removed %s' interview powers.", GetName(id));
					SendClientMessage(playerid, WHITE, string);
					Player[id][InterviewPowers] = 0;
					format(string, sizeof(string), "You have been removed of tempoary interview powers by %s.", GetName(playerid));
					SendClientMessage(id, WHITE, string);
				}
				else
				{
					format(string, sizeof(string), "You have granted %s' interview powers.", GetName(id));
					Player[id][InterviewPowers] = 1;
					SendClientMessage(playerid, WHITE, string);
					format(string, sizeof(string), "You have been given tempoary interview powers by %s.", GetName(playerid));
					SendClientMessage(id, WHITE, string);
				}
			}
		}
	}
	return 1;
}

command(listfaction, playerid, params[])
{
	new groupnumber, string[128];
	if(sscanf(params, "d", groupnumber))
	{
		if(Player[playerid][AdminLevel] >= 2)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /listfaction [faction ID]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 2)
		{
			if(groupnumber >= MAX_GROUPS || groupnumber < 1)
			{
				SendClientMessage(playerid, WHITE, "Invalid Faction ID!");
			}
			else
			{
				format(string, sizeof(string), "-------------------- %s. --------------------", Groups[groupnumber][GroupName]);
				SendClientMessage(playerid, WHITE, string);
				foreach(Player, i)
				{
					if(Player[i][Group] == groupnumber)
					{
						switch(Player[i][GroupRank])
						{
							case 0:
							{
								format(string, sizeof(string), "Name: %s | Rank: %s (0)", GetName(i), Groups[Player[i][Group]][RankName0]);
							}
							case 1:
							{
								format(string, sizeof(string), "Name: %s | Rank: %s (1)", GetName(i), Groups[Player[i][Group]][RankName1]);
							}
							case 2:
							{
								format(string, sizeof(string), "Name: %s | Rank: %s (2)", GetName(i), Groups[Player[i][Group]][RankName2]);
							}
							case 3:
							{
								format(string, sizeof(string), "Name: %s | Rank: %s (3)", GetName(i), Groups[Player[i][Group]][RankName3]);
							}
							case 4:
							{
								format(string, sizeof(string), "Name: %s | Rank: %s (4)", GetName(i), Groups[Player[i][Group]][RankName4]);
							}
							case 5:
							{
								format(string, sizeof(string), "Name: %s | Rank: %s (5)", GetName(i), Groups[Player[i][Group]][RankName5]);
							}
							case 6:
							{
								format(string, sizeof(string), "Name: %s | Rank: %s (6)", GetName(i), Groups[Player[i][Group]][RankName6]);
							}
							case 7: format(string, sizeof(string), "Name: %s | Rank: %s (7)", GetName(i), Groups[Player[i][Group]][RankName7]);
							case 8: format(string, sizeof(string), "Name: %s | Rank: %s (8)", GetName(i), Groups[Player[i][Group]][RankName8]);
							case 9: format(string, sizeof(string), "Name: %s | Rank: %s (9)", GetName(i), Groups[Player[i][Group]][RankName9]);
							case 10: format(string, sizeof(string), "Name: %s | Rank: %s (10)", GetName(i), Groups[Player[i][Group]][RankName10]);
						}

						SendClientMessage(playerid, WHITE, string);
					}
				}
				format(string, sizeof(string), "-------------------- %s. --------------------", Groups[groupnumber][GroupName]);
				SendClientMessage(playerid, WHITE, string);
			}
		}
	}
	return 1;
}

command(takecourse, playerid, params[])
{
	#pragma unused params
	if(Businesses[Player[playerid][InBusiness]][bType] == 7)
	{
		new string[128];
		new price1 = Businesses[Player[playerid][InBusiness]][bProductPrice1];
		new price2 = Businesses[Player[playerid][InBusiness]][bProductPrice2];
		new price3 = Businesses[Player[playerid][InBusiness]][bProductPrice3];
		new price4 = Businesses[Player[playerid][InBusiness]][bProductPrice4];
		new price5 = Businesses[Player[playerid][InBusiness]][bProductPrice5];
		format(string, sizeof(string), "Media Studies ($%d)\nCivil Law Degree ($%d)\nEnglish Degree ($%d)\nMathematics Degree ($%d)\nChemistry Degree ($%d)\n", price1, price2, price3, price4, price5);
		ShowPlayerDialog(playerid, 1230, DIALOG_STYLE_LIST, "Course List", string, "Select", "Cancel");
	}
	return 1;
}

CMD:f(playerid, params[]){
	if(GetPVarInt(playerid, "ShortCMDS") == 0)
		return cmd_faction(playerid, params);
	return SendClientMessage(playerid, -1, "ShortCMDS are disabled, you must use /faction");
}

CMD:faction(playerid, params[]){

	if(Player[playerid][Group] < 1)
		return 1;

	if(Groups[Player[playerid][Group]][CommandTypes] == -1)
		return 1;//SendClientMessage(playerid, WHITE, "This group does not have an OOC chat.");

	new Message[128], string[255];
	if(sscanf(params, "s[128]", Message))
		return SendClientMessage(playerid, GREY, "SYNTAX: /f [message]");

	if(Groups[Player[playerid][Group]][ChatDisabled])
		return SendClientMessage(playerid, WHITE, "Your factions chat has been disabled.");
	
	new name[MAX_PLAYER_NAME];
	if(Player[playerid][AdminDuty] > 0)
		format(name, sizeof(name), "%s", GetName(playerid));
	else
		format(name, sizeof(name), "%s", Player[playerid][NormalName]);

	switch(Player[playerid][GroupRank])
	{
		case 0: format(string, sizeof(string), "[F] %s (0) {BDF38B}%s{E7FFD1}: %s", Groups[Player[playerid][Group]][RankName0], name, Message);
		case 1: format(string, sizeof(string), "[F] %s (1) {BDF38B}%s{E7FFD1}: %s", Groups[Player[playerid][Group]][RankName1], name, Message);
		case 2: format(string, sizeof(string), "[F] %s (2) {BDF38B}%s{E7FFD1}: %s", Groups[Player[playerid][Group]][RankName2], name, Message);
		case 3: format(string, sizeof(string), "[F] %s (3) {BDF38B}%s{E7FFD1}: %s", Groups[Player[playerid][Group]][RankName3], name, Message);
		case 4: format(string, sizeof(string), "[F] %s (4) {BDF38B}%s{E7FFD1}: %s", Groups[Player[playerid][Group]][RankName4], name, Message);
		case 5: format(string, sizeof(string), "[F] %s (5) {BDF38B}%s{E7FFD1}: %s", Groups[Player[playerid][Group]][RankName5], name, Message);
		case 6: format(string, sizeof(string), "[F] %s (6) {BDF38B}%s{E7FFD1}: %s", Groups[Player[playerid][Group]][RankName6], name, Message);
		case 7: format(string, sizeof(string), "[F] %s (7) {BDF38B}%s{E7FFD1}: %s", Groups[Player[playerid][Group]][RankName7], name, Message);
		case 8: format(string, sizeof(string), "[F] %s (8) {BDF38B}%s{E7FFD1}: %s", Groups[Player[playerid][Group]][RankName8], name, Message);
		case 9: format(string, sizeof(string), "[F] %s (9) {BDF38B}%s{E7FFD1}: %s", Groups[Player[playerid][Group]][RankName9], name, Message);
		case 10: format(string, sizeof(string), "[F] %s (10) {BDF38B}%s{E7FFD1}: %s", Groups[Player[playerid][Group]][RankName10], name, Message);
	}

	GroupMessage(playerid, GROUP_CHAT, string);
	format(string, sizeof(string), "[F][%d] (%d) %s: %s", Player[playerid][Group], Player[playerid][GroupRank], Player[playerid][NormalName], Message);
	GroupChatLog(string);

	return 1;
}

command(togglefactionchat, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Group] >= 1 && Player[playerid][GroupRank] >= 5)
	{
		if(Groups[Player[playerid][Group]][ChatDisabled] == 0)
		{
			Groups[Player[playerid][Group]][ChatDisabled] = 1;
			SendClientMessage(playerid, WHITE, "You have disabled faction chat.");
		}
		else
		{
			Groups[Player[playerid][Group]][ChatDisabled] = 0;
			SendClientMessage(playerid, WHITE, "You have enabled faction chat.");
		}
	}
	return 1;
}

command(unfreezebank, playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 4)
		return 1;

	if(Player[playerid][GroupRank] < 9)
		return 1;

	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /unfreezebank [playerid]");
	}
	else
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 4 && Player[playerid][GroupRank] >= 4)
		{
			if(IsPlayerConnectedEx(id))
			{
				format(string, sizeof(string), "You have unfrozen %s's bank account.", GetName(id));
				SendClientMessage(playerid, WHITE, string);
				Player[id][BankStatus] = 0;
				format(string, sizeof(string), "[GOV] %s has unfrozen %s' bank account.", GetName(playerid), GetName(id));
				StatLog(string);
			}
			else
			{
				SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
			}
		}
	}
	return 1;
}

command(freezebank, playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 4)
		return 1;

	if(Player[playerid][GroupRank] < 9)
		return 1;

	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /freezebank [playerid]");
	}
	else
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 4 && Player[playerid][GroupRank] >= 4)
		{
			if(IsPlayerConnectedEx(id))
			{
				format(string, sizeof(string), "You have frozen %s's bank account.", GetName(id));
				SendClientMessage(playerid, WHITE, string);
				Player[id][BankStatus] = 1;
				format(string, sizeof(string), "[GOV] %s has frozen %s' bank account.", GetName(playerid), GetName(id));
				StatLog(string);
			}
			else
			{
				SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
			}
		}
	}
	return 1;
}

command(r, playerid, params[])
{
	new Message[128], Name[MAX_PLAYER_NAME], string[128], string2[128];
	if(sscanf(params, "s[128]", Message))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /r(adio) [message]");
	}
	else
	{
		if(strlen(Message) < 1 || !IsPlayerConnectedEx(playerid))
		{
			return 1;
		}
		if(GetPlayerToggle(playerid, TOGGLE_RADIO) == true)
		{
			return SendClientMessage(playerid, WHITE, "Your radio is off.");
		}
		else
		{
			if(Groups[Player[playerid][Group]][CommandTypes] == 6 || Groups[Player[playerid][Group]][CommandTypes] == 11 || Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 3 || Groups[Player[playerid][Group]][CommandTypes] == 5)
			{
				#if defined MTG_PLAGUE
				if(Player[playerid][VirusCount] >= PLAGUE_SPEECH_MIN)
					format(Message, strlen(Message) + 1, "%s", MixUpSentence(Message, Player[playerid][VirusCount], strlen(Message) + 1));
				#endif
				format(Name, sizeof(Name), GetNormalNameEx(playerid));

				if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 3)
				{
					new splitpos = 110 - (40+strlen(Player[playerid][NormalName]));
					if(strlen(Message) > splitpos)
					{
						new str1[128], str2[128];
						strsplit(Message, str1, str2, splitpos);

						switch(Player[playerid][GroupRank])
						{
							case 0:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName0], Name, Player[playerid][PDBadge], str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName0], Name, Player[playerid][PDBadge], str2);
							}
							case 1:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName1], Name, Player[playerid][PDBadge], str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName1], Name, Player[playerid][PDBadge], str2);
							}
							case 2:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName2], Name, Player[playerid][PDBadge], str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName2], Name, Player[playerid][PDBadge], str2);
							}
							case 3:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName3], Name, Player[playerid][PDBadge], str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName3], Name, Player[playerid][PDBadge], str2);
							}
							case 4:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName4], Name, Player[playerid][PDBadge], str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName4], Name, Player[playerid][PDBadge], str2);
							}
							case 5:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName5], Name, Player[playerid][PDBadge], str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName5], Name, Player[playerid][PDBadge], str2);
							}
							case 6:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName6], Name, Player[playerid][PDBadge], str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName6], Name, Player[playerid][PDBadge], str2);
							}
							case 7:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName7], Name, Player[playerid][PDBadge], str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName7], Name, Player[playerid][PDBadge], str2);
							}
							case 8:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName8], Name, Player[playerid][PDBadge], str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName8], Name, Player[playerid][PDBadge], str2);
							}
							case 9:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName9], Name, Player[playerid][PDBadge], str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName9], Name, Player[playerid][PDBadge], str2);
							}
							case 10:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName10], Name, Player[playerid][PDBadge], str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName10], Name, Player[playerid][PDBadge], str2);
							}
							default:
							{
								format(string, sizeof(string), "[Radio Chat] Undefined %s says: %s", Name, str1);
								format(string2, sizeof(string2), "[Radio Chat] Undefined %s says: %s", Name, str2);
							}
						}
					}
					else
					{
						switch(Player[playerid][GroupRank])
						{
							case 0:	format(string, sizeof(string), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName0], Name, Player[playerid][PDBadge], Message);
							case 1:	format(string, sizeof(string), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName1], Name, Player[playerid][PDBadge], Message);
							case 2:	format(string, sizeof(string), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName2], Name, Player[playerid][PDBadge], Message);
							case 3:	format(string, sizeof(string), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName3], Name, Player[playerid][PDBadge], Message);
							case 4:	format(string, sizeof(string), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName4], Name, Player[playerid][PDBadge], Message);
							case 5:	format(string, sizeof(string), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName5], Name, Player[playerid][PDBadge], Message);
							case 6:	format(string, sizeof(string), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName6], Name, Player[playerid][PDBadge], Message);
							case 7:	format(string, sizeof(string), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName7], Name, Player[playerid][PDBadge], Message);
							case 8:	format(string, sizeof(string), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName8], Name, Player[playerid][PDBadge], Message);
							case 9:	format(string, sizeof(string), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName9], Name, Player[playerid][PDBadge], Message);
							case 10: format(string, sizeof(string), "[Radio Chat] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName10], Name, Player[playerid][PDBadge], Message);
							default: format(string, sizeof(string), "[Radio Chat] Undefined %s says: %s", Name, Message);
						}
					}
				}
				else
				{
					new splitpos = 110 - (36+strlen(GetName(playerid)));
					if(strlen(Message) > splitpos)
					{
						new str1[128], str2[128];
						strsplit(Message, str1, str2, splitpos);

						switch(Player[playerid][GroupRank])
						{
							case 0:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName0], Name, str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName0], Name, str2);
							}
							case 1:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName1], Name, str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName1], Name, str2);
							}
							case 2:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName2], Name, str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName2], Name, str2);
							}
							case 3:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName3], Name, str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName3], Name, str2);
							}
							case 4:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName4], Name, str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName4], Name, str2);
							}
							case 5:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName5], Name, str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName5], Name, str2);
							}
							case 6:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName6], Name, str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName6], Name, str2);
							}
							case 7:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName7], Name, str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName7], Name, str2);
							}
							case 8:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName8], Name, str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName8], Name, str2);
							}
							case 9:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName9], Name, str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName9], Name, str2);
							}
							case 10:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName10], Name, str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName10], Name, str2);
							}
							default:
							{
								format(string, sizeof(string), "[Radio Chat] Undefined %s says: %s", Name, str1);
								format(string2, sizeof(string2), "[Radio Chat] Undefined %s says: %s", Name, str2);
							}
						}
					}
					else
					{
						switch(Player[playerid][GroupRank])
						{
							case 0:	format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName0], Name, Message);
							case 1:	format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName1], Name, Message);
							case 2:	format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName2], Name, Message);
							case 3:	format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName3], Name, Message);
							case 4:	format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName4], Name, Message);
							case 5:	format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName5], Name, Message);
							case 6:	format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName6], Name, Message);
							case 7:	format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName7], Name, Message);
							case 8:	format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName8], Name, Message);
							case 9:	format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName9], Name, Message);
							case 10: format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName10], Name, Message);
							default: format(string, sizeof(string), "[Radio Chat] Undefined %s says: %s", Name, Message);
						}
					}
				}

				foreach(Player, i)
				{
					if(Player[playerid][Group] == Player[i][Group] && GetPlayerToggle(playerid, TOGGLE_RADIO) == false)
					{
						SendClientMessage(i, R_COLOUR, string);
						if(strlen(string2) > 0)
							SendClientMessage(i, R_COLOUR, string2);
					}
				}

				new splitpos = 110 - (15+strlen(Player[playerid][NormalName])), nearby1[128], nearby2[128];
				if(strlen(Message) > splitpos)
				{
					new str1[128], str2[128];
					strsplit(Message, str1, str2, splitpos);
					format(nearby1, sizeof(nearby1), "[Radio] %s says: %s", Name, str1);
					format(nearby2, sizeof(nearby2), "[Radio] %s says: %s", Name, str2);
				}
				else
					format(nearby1, sizeof(nearby1), "[Radio] %s says: %s", Name, Message);

				new Float:pos[3], SeenMessage[MAX_PLAYERS];
				foreach(Player, i)
				{
					if(Groups[Player[i][Group]][CommandTypes] == Groups[Player[playerid][Group]][CommandTypes] && GetPlayerToggle(i, TOGGLE_RADIO) == false)
					{
						GetPlayerPos(i, pos[0], pos[1], pos[2]);
						foreach(Player, j)
						{
							if(i == j)
								continue;
							if(SeenMessage[j] == 1)
								continue;
							
							if(IsPlayerInAnyVehicle(i))
							{
								if(!IsPlayerInAnyVehicle(j))
									continue;
								else 
								{
									if(GetPlayerVehicleID(j) != GetPlayerVehicleID(i))
										continue;
								}
							
							}
							
							if(IsPlayerInRangeOfPoint(j, 5, pos[0], pos[1], pos[2]) && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(j))
							{
								if(Groups[Player[j][Group]][CommandTypes] != Groups[Player[playerid][Group]][CommandTypes] || Groups[Player[j][Group]][CommandTypes] == Groups[Player[playerid][Group]][CommandTypes] && GetPlayerToggle(j, TOGGLE_RADIO) == true)
								{
									SendClientMessage(j, GREY, nearby1);
									if(strlen(nearby2) > 0)
										SendClientMessage(j, GREY, nearby2);
									SeenMessage[j] = 1;
								}
							}
						}
					}
				}
				
				format(string, sizeof(string), "[Radio] %s says: %s", Name, Message);
				GroupChatLog(string);
			}
			else
			{
				SendClientMessage(playerid, WHITE, "Your faction does not have a radio.");
			}
		}
	}
	return 1;
}

command(acceptbackup, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /acceptbackup [playerid]");
	}
	else
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 3)
		{
			if(!IsPlayerInAnyVehicle(playerid))
				return SendClientMessage(playerid, -1, "You must be inside a faction vehicle to use this command!");

			new veh = GetPlayerVehicleID(playerid);
			new sql = GetVSQLID(veh), idx = GetVIndex(sql);

			if(Groups[Veh[idx][Group]][CommandTypes] != Groups[Player[playerid][Group]][CommandTypes])
				return SendClientMessage(playerid, -1, "You must be inside a faction vehicle to use this command!");

			if(IsPlayerConnectedEx(id))
			{
				if(Player[playerid][Checkpoint] >= 1)
				{
					SendClientMessage(playerid, WHITE, "You already have an existing checkpoint, please reach it or re-connect!");
				}
				else
				{
					if(Player[id][RequestingBackup] >= 1)
					{
						Player[playerid][AttendingBackupCall] = id;
						Player[playerid][Checkpoint] = 1;
						format(string, sizeof(string), "You are now attending the call of %s!", Player[id][NormalName]);
						SendClientMessage(playerid, WHITE, string);
					}
					else
					{
						SendClientMessage(playerid, WHITE, "Inactive backup call.");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "Inactive backup call.");
			}
		}
	}
	return 1;
}

command(cancelbackup, playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 3)
	{
		Player[playerid][RequestingBackup] = 0;
		LSPD_LastBackup = -1;
		SendClientMessage(playerid, WHITE, "Cleared.");
	}
	return 1;
}

command(backup, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 3)
	{
		new location[MAX_ZONE_NAME];
		GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
		format(string, sizeof(string), "%s is requesting backup at %s! ((type /acceptbackup %d))", Player[playerid][NormalName], location, playerid);
		GroupMessage(playerid, ADMINORANGE, string, 1);
		Player[playerid][RequestingBackup] = 1;
		if(Groups[Player[playerid][Group]][CommandTypes] == 1)
			LSPD_LastBackup = playerid;
		format(string, sizeof(string), "* %s has activated their backup beacon.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);
	}
	return 1;
}

command(radio, playerid, params[])
return cmd_r(playerid, params);

/*command(stopanim, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tied] >= 1 || Player[playerid][IsAtEvent] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][AdminFrozen] >= 1)
	{
		return SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are in an event, cuffed, tazed or tied.");
	}
	else
	{
		ClearAnimations(playerid);
		StopLoopingAnimation(playerid);
		TogglePlayerControllable(playerid, true);
	}
	return 1;
}*/

/*CMD:backin(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
		PutPlayerInVehicle(playerid, GetPlayerVehicleID(playerid), GetPlayerVehicleSeat(playerid));
	return 1;
}*/

stock rtrim(const sSource[])
{
	new
		iEnd,
		iInputLength = strlen(sSource),
		sReturn[256];

	strcat(sReturn, sSource, 256);

	for(iEnd = (iInputLength - 1); iEnd > 0; --iEnd)
	{
		switch(sReturn[iEnd])
		{
			case ' ', '\t', '\r', '\n':
			{
				continue;
			}
			default:
			{
				break;
			}
		}
	}

	strdel(sReturn, (iEnd + 1), iInputLength);
	return sReturn;
}

command(do, playerid, params[])
{
	new Message[190], string[255];
	if(sscanf(params, "s[190]", Message))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /do [action]");
	}
	else
	{
		if(strlen(Message) < 1 || !IsPlayerConnectedEx(playerid))
		{
			return 1;
		}
		else
		{
			//* 94 characters remaining (( 012345678901234567890123 ))
			new splitpos = 110 - (9+strlen(GetName(playerid)));
			if(strlen(Message) > splitpos)
			{
				new str1[94], str2[94];
				strsplit(Message, str1, str2, splitpos);
				// strmid(str1, Message, 0, 93);
				// strmid(str2, Message, 93, 187);
				format(string, sizeof(string), "* %s (( %s ))", str1, GetNameEx(playerid));
				NearByMessage(playerid, PLAYERACTIONS, string);
				format(string, sizeof(string), "* %s (( %s ))", str2, GetNameEx(playerid));
				NearByMessage(playerid, PLAYERACTIONS, string);
			}
			else
			{
				format(string, sizeof(string), "* %s (( %s ))", Message, GetNameEx(playerid));
				NearByMessage(playerid, PLAYERACTIONS, string);
			}

			format(string, sizeof(string), "* %s (( %s ))", Message, GetNameEx(playerid));
			ICChatLog(string);
		}
	}
	return 1;
}

command(b, playerid, params[])
{
	new Message[185], string[255];
	if(sscanf(params, "s[185]", Message))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /b [message]");
	}
	else
	{
		if(strlen(Message) < 1 || !IsPlayerConnectedEx(playerid))
		{
			return 1;
		}
		else
		{
			if(Player[playerid][PrisonID] == 1)
			{
				SendClientMessage(playerid, WHITE, "You may not use this channel right now.");
			}
			else
			{
				//(( 012345678901234567890123 says: 90 characters remaining ))
				new splitpos = 110 - (13+strlen(GetName(playerid)));
				if(strlen(Message) > splitpos)
				{
					new str1[90], str2[90];
					strsplit(Message, str1, str2, splitpos);
					// strmid(str1, Message, 0, 89);
					// strmid(str2, Message, 89, 179);
					if(Player[playerid][AdminDuty] > 0 || GetPVarInt(playerid, "OnAsk") == 1)
					{
						format(string, sizeof(string), "(( {F6970C}%s{AFAFAF} says: %s ))", GetName(playerid), str1);
						NearByMessage(playerid, OOCC_CHAT, string);
						format(string, sizeof(string), "(( {F6970C}%s{AFAFAF} says: %s ))", GetName(playerid), str2);
						NearByMessage(playerid, OOCC_CHAT, string);
					}
					else
					{
						format(string, sizeof(string), "(( %s says: %s ))", GetNameEx(playerid), str1);
						NearByMessage(playerid, OOCC_CHAT, string);
						format(string, sizeof(string), "(( %s says: %s ))", GetNameEx(playerid), str2);
						NearByMessage(playerid, OOCC_CHAT, string);
					}
				}
				else
				{
					if(Player[playerid][AdminDuty] > 0 || GetPVarInt(playerid, "OnAsk") == 1)
					{
						format(string, sizeof(string), "(( {F6970C}%s{AFAFAF} says: %s ))", GetName(playerid), Message);
						NearByMessage(playerid, OOCC_CHAT, string);
					}
					else
					{
						format(string, sizeof(string), "(( %s says: %s ))", GetNameEx(playerid), Message);
						NearByMessage(playerid, OOCC_CHAT, string);
					}
				}

				format(string, sizeof(string), "(( %s says: %s ))", GetName(playerid), Message);
				OOCChatLog(string);
			}
		}
	}
	return 1;
}

command(me, playerid, params[]) {
	new
	string[255]; // Updated this as I forgot about the whole params usage at the time of originally creating this.... but seeing as how noobs constantly rip this command I might as well give them some good code to rip from! (yes I'm talking about you, RealCop228 and all the others)

	if(isnull(params)) {
		return SendClientMessage(playerid, GREY, "SYNTAX: /me [action]");
	}
	else {
		if(Player[playerid][PrisonID] == 1) {
			SendClientMessage(playerid, WHITE, "You're unable to do this right now!");
		}
		else
		{
			//* 012345678901234567890123 100 characters remaining
			new splitpos = 110 - (3+strlen(GetName(playerid)));
			if(strlen(params) > splitpos)
			{
				new str1[100], str2[100], tmp[255];
				strcpy(tmp, params, sizeof(tmp));
				strsplit(tmp, str1, str2, splitpos);
				// strmid(str1, params, 0, 99);
				// strmid(str2, params, 99, 199);
				format(string, sizeof(string), "* %s %s", GetNameEx(playerid), str1);
				NearByMessage(playerid, PLAYERACTIONS, string);
				format(string, sizeof(string), "* %s ((%s))", str2, GetNameEx(playerid));
				NearByMessage(playerid, PLAYERACTIONS, string);
			}
			else
			{
				format(string, sizeof(string), "* %s %s", GetNameEx(playerid), params);
				NearByMessage(playerid, PLAYERACTIONS, string);
			}

			format(string, sizeof(string), "* %s %s", GetNameEx(playerid), params);
			ICChatLog(string);
		}
	}
	return 1;
}

/* command(omute, playerid, params[])
{
	new id, string[128];

	if(Player[playerid][AdminLevel] < 1)
		return 1;

	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /omute [playerid]");
		SendClientMessage(playerid, GREY, "This can be used to reverse the mute effect (effectively unmute).");
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 1)
		{
			if(IsPlayerConnectedEx(id))
			{
				if(Player[id][oMuted] == 0)
				{
					format(string, sizeof(string), "You have muted %s from OOC chat.", GetName(id));
					Player[id][oMuted] = 1;
					SendClientMessage(playerid, WHITE, string);
				}
				else
				{
					format(string, sizeof(string), "You have unmuted %s from OOC chat.", GetName(id));
					Player[id][oMuted] = 0;
					SendClientMessage(playerid, WHITE, string);
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
			}
		}
	}
	return 1;
} */

command(mute, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		if(Player[playerid][AdminLevel] >= 2)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /mute [playerid]");
			SendClientMessage(playerid, GREY, "This can be used to reverse the mute effect (effectively unmute).");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 2)
		{
			if(IsPlayerConnectedEx(id))
			{
				if(Player[id][Muted] == 0)
				{
					if(Player[playerid][AdminLevel] >= Player[id][AdminLevel])
					{
						format(string, sizeof(string), "You have muted %s.", GetName(id));
						Player[id][Muted] = 1;
						SendClientMessage(playerid, WHITE, string);
					}
				}
				else
				{
					format(string, sizeof(string), "You have unmuted %s.", GetName(id));
					Player[id][Muted] = 0;
					SendClientMessage(playerid, WHITE, string);
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
			}
		}
		else
		{
			SendClientMessage(playerid, GREY, "You're not authenticated.");
		}

	}
	return 1;
}

command(parajump, playerid, params[])
{
	if(Player[playerid][AdminLevel] >= 4)
	{
		SendClientMessage(playerid, COLOR_GREEN, "You have been teleported to the Andromada!");
		SendClientMessage(playerid, COLOR_GREEN, "Remember to use /startjump and /beginjump!");
		SetPlayerPos_Update(playerid, 1450, -1276, 2000);
	}
	else
	{
		SendClientMessage(playerid, WHITE, "You are not an admin!");
	}
	return 1;
}

command(startjump, playerid, params[])
{
	new string[128];
	if(Player[playerid][AdminLevel] >= 4)
	{
		format(string, sizeof(string), "Server Admin %s has created a Skydive! Use /joinjump to join!", Player[playerid][AdminName]);
		SendClientMessageToAll(LIGHTRED, string);
		SendClientMessageToAll(LIGHTRED, "Please store your weapons! We are not responsible if you die in the jump!");
		DiveEvent = 1;
	}
	return 1;
}

command(joinjump, playerid, params[])
{
	if(DiveEvent == 1)
	{
		if(Player[playerid][PrisonID] >= 1 && Player[playerid][PrisonDuration] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Tied] >= 1)
		{
			SendClientMessage(playerid, WHITE, "You can't participate as you're prisoned, jailed, cuffed, tied or tazed.");
		}
		else
		{
			GetPlayerHealth(playerid, Player[playerid][LastHealth]);
			GetPlayerArmour(playerid, Player[playerid][LastArmour]);
			GivePlayerWeaponEx(playerid, 46);
			SetPlayerPos_Update(playerid, 1450, -1276, 2000);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			FreezePlayer(playerid, 1000);
			SendClientMessage(playerid, WHITE, "You have joined the Skydive event. Please wait for an admin to start it!");
		}
	}
	else if(DiveEvent == 2)
	{
		SendClientMessage(playerid, WHITE, "You appear to have missed the event, Wait for a new one to be created! Sorry!");
	}
	else
	{
		SendClientMessage(playerid, WHITE, "There isnt a skydive event at the moment!");
	}
	return 1;
}

command(beginjump, playerid, params[])
{
	new string[128];
	if(Player[playerid][AdminLevel] >= 4)
	{
		if(DiveEvent == 1)
		{
			format(string, sizeof(string), "Server Admin %s has started the Skydive Event!", Player[playerid][AdminName]);
			SendClientMessageToAll(LIGHTRED, string);
			DiveEvent = 2;
		}
	}
	else
	{
		SendClientMessage(playerid, WHITE, "You are not admin!");
	}
	return 1;
}

command(admins, playerid, params[])
{
	#pragma unused params
	new string[128];

	SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");

	foreach(Player, i)
	{
		if(Player[playerid][AdminLevel] > 0)
		{
			if(Player[i][AdminLevel] > 0)
			{
				if(Player[i][AFKStat] > 0)
				{
					format(string, sizeof(string), "Admin %s (%s) (level %d) is currently away from keyboard.", Player[i][AdminName], Player[i][NormalName], Player[i][AdminLevel]);
					SendClientMessage(playerid, YELLOW, string);
				}
				else
				{
					format(string, sizeof(string), "%sAdmin %s (%s) (level %d)%s is %s admin duty.", (Player[i][AdminDuty]) ? ("{21DD00}") : ("{CECECE}"),  Player[i][AdminName], Player[i][NormalName], Player[i][AdminLevel], (Player[i][ModStatus]) ? ("*") : (""), (Player[i][AdminDuty]) ? ("on") : ("off"));
					SendClientMessage(playerid, -1, string);
				}
			}
		}
		else
		{
			if(Player[i][AdminLevel] > 0 && Player[i][AdminDuty] > 0)
			{
				if(Player[i][AFKStat] > 0)
				{
					format(string, sizeof(string), "Admin %s (level %d) is currently away from keyboard.", Player[i][AdminName], Player[i][AdminLevel]);
					SendClientMessage(playerid, YELLOW, string);
				}
				else
				{
					format(string, sizeof(string), "Admin %s (level %d) is on admin duty.",  Player[i][AdminName], Player[i][AdminLevel]);
					SendClientMessage(playerid, GREEN, string);
				}
			}
		}
	}
	SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");
	return 1;
}

command(adminduty, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][AdminLevel] >= 2)
	{
		if(Player[playerid][Hospitalized] > 0)
			return SendClientMessage(playerid, -1, "Wait until you are out of the hospital to use this.");

		if(GetPVarInt(playerid, "JASON_MODE") == 1)
			return SendClientMessage(playerid, WHITE, "You can't do this while in Jason mode.");
			
		if(Player[playerid][AdminDuty] == 0)
		{
			if(Player[playerid][Mask] == 1)
				return SendClientMessage(playerid, -1, "Remove your mask before going on admin duty.");
			
			if(strlen(Player[playerid][AdminName]) >= 1)
			{
				SendClientMessage(playerid, WHITE, "You are now on admin duty. You will appear on the /admins list and you'll be able to view reports.");
				Player[playerid][AdminDuty] = 1;
				SetPVarInt(playerid, "AdminDuty", 1);

				SetPVarFloat(playerid, "ADutyArmour", GetArmour(playerid));
				SetPlayerHealth(playerid, 500000);

				if(Player[playerid][UnderCover] == 0)
					format(Player[playerid][NormalName], 255, "%s", GetName(playerid));

				SetPlayerNameEx(playerid, Player[playerid][AdminName]);
				SetPlayerSkin(playerid, Player[playerid][AdminSkin]);
				if(Player[playerid][HospitalTime] >= 1)
				{
					Player[playerid][HospitalTime] = 0;
					SetCameraBehindPlayer(playerid);
					SetPlayerPos_Update(playerid, SpawnX, SpawnY, SpawnZ);
					SetPlayerDrunkLevel(playerid, 0);
					SendClientMessage(playerid, WHITE, "You have been de-hospitalized.");
				}
				
				SetPlayerToggle(playerid, TOGGLE_RADIO, true);
				
				format(string, sizeof(string), "%s (%s) is now on Admin Duty.", GetName(playerid), Player[playerid][NormalName]);
				SendToAdmins(ADMINORANGE, string, 0);
				SetPlayerColor(playerid, ADMIN_COLOR);
				
				foreach(Player, i)
				{
					ShowPlayerNameTagForPlayer(playerid, i, 1);
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "You haven't set an administrators' name yet.");
			}
		}
		else
		{
			SendClientMessage(playerid, WHITE, "You're now off admin duty, though you will still see admin chat.");
			Player[playerid][AdminDuty] = 0;
			DeletePVar(playerid, "AdminDuty");

			UpdatePlayerNameColour(playerid);

			SetPlayerHealth(playerid, 100);
			SetPlayerArmour(playerid, GetPVarFloat(playerid, "ADutyArmour"));

			if(Player[playerid][AdminRadio])
			{
				Player[playerid][AdminRadio] = 0;
				StopAudioStreamForPlayer(playerid);
			}

			if(strlen(Player[playerid][NormalName]) > 1)
			{
				SetPlayerNameEx(playerid, Player[playerid][NormalName]);
			}

			SetPlayerSkin(playerid, Player[playerid][LastSkin]);

			format(string, sizeof(string), "%s (%s) is now off Admin Duty.", Player[playerid][AdminName], GetName(playerid));
			SendToAdmins(ADMINORANGE, string, 0);
			
			foreach(Player, i)
			{
				if(Player[i][Mask] != 1)
					continue;
					
				ShowPlayerNameTagForPlayer(playerid, i, 0);
			}
		}
	}

	return 1;
}

CMD:e(playerid, params[])
return cmd_car(playerid, "engine");

CMD:healme(playerid, params[])
{
	if(Player[playerid][MyMedic] == INVALID_PLAYER_ID)
		return SendClientMessage(playerid, -1, "No one is requesting to heal you!");

	if(GetDistanceBetweenPlayers(playerid, Player[playerid][MyMedic]) > 5)
		return SendClientMessage(playerid, -1, "You are not close enough to the medic who is requesting to heal you.");

	new string[128];
	SetPlayerHealth(playerid, 100.0);
	format(string, sizeof(string), "%s has accepted your heal request and has been given full health.", GetName(playerid));
	SendClientMessage(Player[playerid][MyMedic], -1, string);
	format(string, sizeof(string), "You have been healed by %s.", GetName(Player[playerid][MyMedic]));
	SendClientMessage(playerid, -1, string);
	format(string, sizeof(string), "* %s heals %s's wounds.", GetNameEx(Player[playerid][MyMedic]), GetNameEx(playerid));
	NearByMessage(playerid, NICESKY, string);
	Player[playerid][MyMedic] = INVALID_PLAYER_ID;
	return 1;
}

command(heal, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /heal [playerid]");
	}
	else
	{
		if(IsPlayerConnectedEx(id) && id != playerid)
		{
			if(Groups[Player[playerid][Group]][CommandTypes] == 3)
			{
				if(GetDistanceBetweenPlayers(id, playerid) < 5)
				{
					new Float: Health, HealthInt;
					GetPlayerHealth(id, Health);

					HealthInt = floatround(Health, floatround_ceil);

					if(HealthInt >= 100)
					{
						SendClientMessage(playerid, WHITE, "That person already has full health.");
					}
					else
					{
						format(string, sizeof(string), "%s has requested to heal you (type /healme to accept the request).", GetName(playerid));
						Player[playerid][AttemptingToHeal] = id;
						Player[id][MyMedic] = playerid;
						SendClientMessage(id, ANNOUNCEMENT, string);
						format(string, sizeof(string), "You have requested to heal %s. Wait for them to accept it.", GetName(id));
						SendClientMessage(playerid, WHITE, string);
					}
				}
				else
				{
					SendClientMessage(playerid, WHITE, "You're not close enough to that player.");
				}

			}
			else
			{
				SendClientMessage(playerid, WHITE, "Invalid ID, or that's you.");
			}
		}
	}
	return 1;
}

command(changeclothes, playerid, params[])
{
	if(Player[playerid][House] == 0 && Player[playerid][House2] == 0)
		return SendClientMessage(playerid, -1, "You don't have a house.");

	if(Player[playerid][InHouse] == 0)
		return SendClientMessage(playerid, -1, "You are not in a house.");

	new slot;
	if(sscanf(params, "d", slot))
		return SendClientMessage(playerid, GREY, "SYNTAX: /changeclothes [Slot (1-3)]");

	if(Player[playerid][InHouse] != Player[playerid][House] && Player[playerid][InHouse] != Player[playerid][House2])
		return SendClientMessage(playerid, -1, "You must be in your own house to change your clothes.");

	switch(slot)
	{
		case 1:
		{
			if(!IsSkinValidForRace(playerid, Player[playerid][PlayerSkinSlot1]))
			{
				Player[playerid][PlayerSkinSlot1] = GetRaceSkin(Player[playerid][Gender], Player[playerid][Race]);
			}

			SetPlayerSkin(playerid, Player[playerid][PlayerSkinSlot1]);
			Player[playerid][LastSkin] = Player[playerid][PlayerSkinSlot1];
			SendClientMessage(playerid, WHITE, "You have switched your skin, to slot 1.");
		}
		case 2:
		{
			if(!IsSkinValidForRace(playerid, Player[playerid][PlayerSkinSlot2]))
			{
				Player[playerid][PlayerSkinSlot2] = GetRaceSkin(Player[playerid][Gender], Player[playerid][Race]);
			}

			SetPlayerSkin(playerid, Player[playerid][PlayerSkinSlot2]);
			Player[playerid][LastSkin] = Player[playerid][PlayerSkinSlot2];
			SendClientMessage(playerid, WHITE, "You have switched your skin, to slot 2.");
		}
		case 3:
		{
			if(!IsSkinValidForRace(playerid, Player[playerid][PlayerSkinSlot3]))
			{
				Player[playerid][PlayerSkinSlot3] = GetRaceSkin(Player[playerid][Gender], Player[playerid][Race]);
			}

			SetPlayerSkin(playerid, Player[playerid][PlayerSkinSlot3]);
			Player[playerid][LastSkin] = Player[playerid][PlayerSkinSlot3];
			SendClientMessage(playerid, WHITE, "You have switched your skin, to slot 3.");
		}
	}
	return 1;
}
command(setprice, playerid, params[])
{
	if(Player[playerid][Business] == 0)
		return SendClientMessage(playerid, -1, "You don't have a business.");

	if(Player[playerid][InBusiness] == 0)
		return SendClientMessage(playerid, -1, "You are not in a business.");

	if(Player[playerid][Business] != Player[playerid][InBusiness])
		return SendClientMessage(playerid, -1, "You must be in your own business to use this.");

	new string[128], price, product;
	if(sscanf(params, "dd", product, price))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /setprice [product] [price] (Maximum Price: $300,000)");
		switch(Businesses[Player[playerid][Business]][bType])
		{
			case 1:
			{
				SendClientMessage(playerid, GREY, "Product 1 - Rope");
				SendClientMessage(playerid, GREY, "Product 2 - Rags");
				SendClientMessage(playerid, GREY, "Product 3 - Phone");
				SendClientMessage(playerid, GREY, "Product 4 - Bottle O' Sprunk");
				SendClientMessage(playerid, GREY, "Product 5 - Spraycan");
				SendClientMessage(playerid, GREY, "Product 6 - Walkie Talkie");
				SendClientMessage(playerid, GREY, "Product 7 - Personal Radio");
				SendClientMessage(playerid, GREY, "Product 8 - Toolkit");
				SendClientMessage(playerid, GREY, "Product 9 - Gas Can");
				SendClientMessage(playerid, GREY, "Product 10 - Vehicle Radio");
				SendClientMessage(playerid, GREY, "Product 11 - Camera");
				SendClientMessage(playerid, GREY, "Product 12 - Boombox");
				SendClientMessage(playerid, GREY, "Product 13 - Notepad");
			}
			case 2:
			{
				SendClientMessage(playerid, GREY, "Product 1 - Every Skin Available");
			}
			case 3, 12: //Sprunk ($%d)\nWine ($%d)\nBeer ($%d)\n%s ($%d)\n%s ($%d)\n%s ($%d)\n%s ($%d)\n
			{
				SendClientMessage(playerid, GREY, "Product 1 - Sprunk");
				SendClientMessage(playerid, GREY, "Product 2 - Wine");
				SendClientMessage(playerid, GREY, "Product 3 - Beer");
				SendClientMessage(playerid, GREY, "Product 4 - Case of beer");
				format(string, sizeof(string), "Product 5 - %s", Businesses[Player[playerid][Business]][bFoodName1]);
				SendClientMessage(playerid, GREY, string);
				format(string, sizeof(string), "Product 6 - %s", Businesses[Player[playerid][Business]][bFoodName2]);
				SendClientMessage(playerid, GREY, string);
				format(string, sizeof(string), "Product 7 - %s", Businesses[Player[playerid][Business]][bFoodName3]);
				SendClientMessage(playerid, GREY, string);
				format(string, sizeof(string), "Product 8 - %s", Businesses[Player[playerid][Business]][bFoodName4]);
				SendClientMessage(playerid, GREY, string);
			}
			case 4:
			{
				SendClientMessage(playerid, GREY, "Product 1 - All ads placed inside business");
				SendClientMessage(playerid, GREY, "Product 2 - All ads placed via mobile app");
			}
			case 5:
			{
				SendClientMessage(playerid, GREY, "Product 1 - Rope");
				SendClientMessage(playerid, GREY, "Product 2 - Small White Vibrator");
				SendClientMessage(playerid, GREY, "Product 3 - Silver Vibrator");
				SendClientMessage(playerid, GREY, "Product 4 - Large White Vibrator");
				SendClientMessage(playerid, GREY, "Product 5 - Priest Costume");
				SendClientMessage(playerid, GREY, "Product 6 - Naughty Police Woman Costume");
				SendClientMessage(playerid, GREY, "Product 7 - Cat Woman Costume");
			}
			case 7:
			{
				SendClientMessage(playerid, GREY, "Product 1 - Media Studies");
				SendClientMessage(playerid, GREY, "Product 2 - Civil Law Degree");
				SendClientMessage(playerid, GREY, "Product 3 - Intermediate English Degree");
				SendClientMessage(playerid, GREY, "Product 4 - Intermediate Mathematics Degree");
				SendClientMessage(playerid, GREY, "Product 5 - Intermediate Chemistry Degree");
			}
			case 10:
			{
				SendClientMessage(playerid, GREY, "Product 1 - Boxing");
				SendClientMessage(playerid, GREY, "Product 2 - Kung Fu");
				SendClientMessage(playerid, GREY, "Product 3 - Kneehead");
				SendClientMessage(playerid, GREY, "Product 4 - Grabkick");
				SendClientMessage(playerid, GREY, "Product 5 - Elbow");
				SendClientMessage(playerid, GREY, "Product 6 - Gang 1");
				SendClientMessage(playerid, GREY, "Product 7 - Drunk");
				SendClientMessage(playerid, GREY, "Product 8 - Sexy");
				SendClientMessage(playerid, GREY, "Product 9 - Fatty");
				SendClientMessage(playerid, GREY, "Product 10 - Bad Back");
			}
			case 11:
			{
				SendClientMessage(playerid, GREY, "Product 1 - 500 pills of Speed");
				SendClientMessage(playerid, GREY, "Product 2 - 1000 pills of Speed");
				SendClientMessage(playerid, GREY, "Product 3 - 1500 pills of Speed");
				SendClientMessage(playerid, GREY, "Product 4 - 5000 pills of Speed");
				SendClientMessage(playerid, GREY, "Product 5 - 500 grams of Cocaine");
				SendClientMessage(playerid, GREY, "Product 6 - 1000 grams of Cocaine");
				SendClientMessage(playerid, GREY, "Product 7 - 1500 grams of Cocaine");
				SendClientMessage(playerid, GREY, "Product 8 - 5000 grams of Cocaine");
				SendClientMessage(playerid, GREY, "Product 9 - Fluorescent Grow Light");
				SendClientMessage(playerid, GREY, "Product 10 - Pot Seeds");
			}
			case 13:
			{
				SendClientMessage(playerid, GREY, "Product 1 - Fishing Rod");
				SendClientMessage(playerid, GREY, "Product 2 - Fish Bait");
			}
			case 15:
			{
				SendClientMessage(playerid, GREY, "Product 1 - Engine Parts");
				SendClientMessage(playerid, GREY, "Product 2 - NOS Bottle");
				SendClientMessage(playerid, GREY, "Product 3 - Hydraulics Kit");
				SendClientMessage(playerid, GREY, "Product 4 - Rope");
				SendClientMessage(playerid, GREY, "Product 5 - Rags");
				SendClientMessage(playerid, GREY, "Product 6 - Gas Can");
				SendClientMessage(playerid, GREY, "Product 7 - Workbench");
				SendClientMessage(playerid, GREY, "Product 8 - Toolkit");
				SendClientMessage(playerid, GREY, "Product 9 - Business Intercom System");
				SendClientMessage(playerid, GREY, "Product 10 - Tent");
				SendClientMessage(playerid, GREY, "Product 11 - Ventillation Upgrade 1");
				SendClientMessage(playerid, GREY, "Product 12 - Ventillation Upgrade 2");
			}
			case 16:
			{
				SendClientMessage(playerid, GREY, "Product 1 - Rope");
				SendClientMessage(playerid, GREY, "Product 2 - Rags");
				SendClientMessage(playerid, GREY, "Product 3 - Gas Can");
				SendClientMessage(playerid, GREY, "Product 4 - Bottle O' Sprunk");
				SendClientMessage(playerid, GREY, "Product 5 - Gas Pump");
			}
			case 17: SendClientMessage(playerid, GREY, "Product 1 - Med Kit");
			case 9:
			{
				SendClientMessage(playerid, GREY, "Product 1 - Marriage Price");
			}
			case 23: SendClientMessage(playerid, GREY, "Product 1 - Pizza");
		}
	}
	else
	{
		if(price < 300001 && price >= 1)
		{
			if(Businesses[Player[playerid][Business]][bType] == 1)
			{
				if(product > 0 && product < 14)
				{
					switch(product)
					{
						case 1:
						{
							if(price < 20)
								return SendClientMessage(playerid, WHITE, "The minimum price for rope is $20!");
							Businesses[Player[playerid][Business]][bProductPrice1] = price;
							format(string, sizeof(string), "You have set the price of Rope to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 2:
						{
							if(price < 10)
								return SendClientMessage(playerid, WHITE, "The minimum price for rags is $10!");
							Businesses[Player[playerid][Business]][bProductPrice2] = price;
							format(string, sizeof(string), "You have set the price of Rags to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 3:
						{
							if(price < 500)
								return SendClientMessage(playerid, WHITE, "The minimum price for phones is $500!");
							Businesses[Player[playerid][Business]][bProductPrice3] = price;
							format(string, sizeof(string), "You have set the price of a Phone to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 4:
						{
							if(price < 1)
								return SendClientMessage(playerid, WHITE, "The minimum price for bottles of Sprunk is $1!");
							Businesses[Player[playerid][Business]][bProductPrice4] = price;
							format(string, sizeof(string), "You have set the price of a Bottle O' Sprunk to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 5:
						{
							if(price < 50)
								return SendClientMessage(playerid, WHITE, "The minimum price for spraycans is $50!");
							Businesses[Player[playerid][Business]][bProductPrice5] = price;
							format(string, sizeof(string), "You have set the price of a Spraycan to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 6:
						{
							if(price < 500)
								return SendClientMessage(playerid, WHITE, "The minimum price for walkie talkies is $500!");
							Businesses[Player[playerid][Business]][bProductPrice6] = price;
							format(string, sizeof(string), "You have set the price of a Walkie Talkie to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 7:
						{
							if(price < 5000)
								return SendClientMessage(playerid, WHITE, "The minimum price for personal radios is $5000!");
							Businesses[Player[playerid][Business]][bProductPrice7] = price;
							format(string, sizeof(string), "You have set the price of Personal Radios to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 8:
						{
							if(price < 500)
								return SendClientMessage(playerid, WHITE, "The minimum price for toolkits is $500!");
							Businesses[Player[playerid][Business]][bProductPrice8] = price;
							format(string, sizeof(string), "You have set the price of Toolkits to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 9:
						{
							if(price < 50)
								return SendClientMessage(playerid, WHITE, "The minimum price for gas cans is $50!");
							Businesses[Player[playerid][Business]][bProductPrice9] = price;
							format(string, sizeof(string), "You have set the price of Gas Cans to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 10:
						{
							if(price < 500)
								return SendClientMessage(playerid, WHITE, "The minimum price for vehicle radios is $500!");
							Businesses[Player[playerid][Business]][bProductPrice10] = price;
							format(string, sizeof(string), "You have set the price of Vehicle Radios to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 11:
						{
							if(price < 5000)
								return SendClientMessage(playerid, WHITE, "The minimum price for a camera is $5,000!");
							Businesses[Player[playerid][Business]][bProductPrice11] = price;
							format(string, sizeof(string), "You have set the price of Cameras to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 12:
						{
							if(price < 1000)
								return SendClientMessage(playerid, WHITE, "The minimum price for a boombox is $1,000!");
							Businesses[Player[playerid][Business]][bProductPrice12] = price;
							format(string, sizeof(string), "You have set the price of Boombox to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 13:
						{
							if(price < 500)
								return SendClientMessage(playerid, WHITE, "The minimum price for a notepad is $500!");
							Businesses[Player[playerid][Business]][bProductPrice13] = price;
							format(string, sizeof(string), "You have set the price of Notepad to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
					}
				}
				else
				{
					SendClientMessage(playerid, WHITE, "Invalid product slot!");
					SendClientMessage(playerid, GREY, "Product 1 - Rope");
					SendClientMessage(playerid, GREY, "Product 2 - Rags");
					SendClientMessage(playerid, GREY, "Product 3 - Phone");
					SendClientMessage(playerid, GREY, "Product 4 - Bottle O' Sprunk");
					SendClientMessage(playerid, GREY, "Product 5 - Spraycan");
					SendClientMessage(playerid, GREY, "Product 6 - Walkie Talkie");
					SendClientMessage(playerid, GREY, "Product 7 - Personal Radio");
					SendClientMessage(playerid, GREY, "Product 8 - Toolkit");
					SendClientMessage(playerid, GREY, "Product 9 - Gas Can");
					SendClientMessage(playerid, GREY, "Product 10 - Vehicle Radio");
					SendClientMessage(playerid, GREY, "Product 11 - Camera");
					SendClientMessage(playerid, GREY, "Product 12 - Boombox");
					SendClientMessage(playerid, GREY, "Product 13 - Notepad");
				}
			}

			if(Businesses[Player[playerid][Business]][bType] == 7)
			{
				if(product >= 1 && product < 6)
				{
					switch(product)
					{
						case 1:
						{
							Businesses[Player[playerid][Business]][bProductPrice1] = price;
							format(string, sizeof(string), "You have set the price of Media Studies to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 2:
						{
							Businesses[Player[playerid][Business]][bProductPrice2] = price;
							format(string, sizeof(string), "You have set the price of Civil Law Degree to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 3:
						{
							Businesses[Player[playerid][Business]][bProductPrice3] = price;
							format(string, sizeof(string), "You have set the price of Intermediate English Degree to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 4:
						{
							Businesses[Player[playerid][Business]][bProductPrice4] = price;
							format(string, sizeof(string), "You have set the price of Intermediate Mathematics Degree to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 5:
						{
							Businesses[Player[playerid][Business]][bProductPrice5] = price;
							format(string, sizeof(string), "You have set the price of Intermediate Chemistry Degree to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
					}
				}
				else
				{
					SendClientMessage(playerid, GREY, "Product 1 - Media Studies");
					SendClientMessage(playerid, GREY, "Product 2 - Civil Law Degree");
					SendClientMessage(playerid, GREY, "Product 3 - Intermediate English Degree");
					SendClientMessage(playerid, GREY, "Product 4 - Intermediate Mathematics Degree");
					SendClientMessage(playerid, GREY, "Product 5 - Intermediate Chemistry Degree");
				}
			}

			if(Businesses[Player[playerid][Business]][bType] == 11)
			{
				if(product >= 1 && product < 11)
				{
					switch(product)
					{
						case 1:
						{
							Businesses[Player[playerid][Business]][bProductPrice1] = price;
							format(string, sizeof(string), "You have set the price of 500 pills of Speed to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 2:
						{
							Businesses[Player[playerid][Business]][bProductPrice2] = price;
							format(string, sizeof(string), "You have set the price of 1000 pills of Speed to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 3:
						{
							Businesses[Player[playerid][Business]][bProductPrice3] = price;
							format(string, sizeof(string), "You have set the price of 1500 pills of Speed to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 4:
						{
							Businesses[Player[playerid][Business]][bProductPrice4] = price;
							format(string, sizeof(string), "You have set the price of 5000 pills of Speed to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 5:
						{
							Businesses[Player[playerid][Business]][bProductPrice5] = price;
							format(string, sizeof(string), "You have set the price of 500 grams of Cocaine to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 6:
						{
							Businesses[Player[playerid][Business]][bProductPrice6] = price;
							format(string, sizeof(string), "You have set the price of 1000 grams of Cocaine to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 7:
						{
							Businesses[Player[playerid][Business]][bProductPrice7] = price;
							format(string, sizeof(string), "You have set the price of 1500 grams of Cocaine to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 8:
						{
							Businesses[Player[playerid][Business]][bProductPrice8] = price;
							format(string, sizeof(string), "You have set the price of 5000 grams of Cocaine to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 9:
						{
							Businesses[Player[playerid][Business]][bProductPrice9] = price;
							format(string, sizeof(string), "You have set the price of Fluorescent Grow Light to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 10:
						{
							Businesses[Player[playerid][Business]][bProductPrice10] = price;
							format(string, sizeof(string), "You have set the price of Pot Seeds to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
					}
				}
				else
				{
					SendClientMessage(playerid, WHITE, "Invalid product slot!");
					SendClientMessage(playerid, GREY, "Product 1 - 500 pills of Speed");
					SendClientMessage(playerid, GREY, "Product 2 - 1000 pills of Speed");
					SendClientMessage(playerid, GREY, "Product 3 - 1500 pills of Speed");
					SendClientMessage(playerid, GREY, "Product 4 - 5000 pills of Speed");
					SendClientMessage(playerid, GREY, "Product 5 - 500 grams of Cocaine");
					SendClientMessage(playerid, GREY, "Product 6 - 1000 grams of Cocaine");
					SendClientMessage(playerid, GREY, "Product 7 - 1500 grams of Cocaine");
					SendClientMessage(playerid, GREY, "Product 8 - 5000 grams of Cocaine");
					SendClientMessage(playerid, GREY, "Product 9 - Fluorescent Grow Light");
					SendClientMessage(playerid, GREY, "Product 10 - Pot Seeds");
				}
			}

			if(Businesses[Player[playerid][Business]][bType] == 2)
			{
				if(product == 1)
				{
					if(price < 150)
						return SendClientMessage(playerid, -1, "The minimum price for clothes is $150.");
					Businesses[Player[playerid][Business]][bProductPrice1] = price;
					format(string, sizeof(string), "You have set the skin price to $%d.", price);
					SendClientMessage(playerid, WHITE, string);
				}
				else
				{
					SendClientMessage(playerid, WHITE, "Invalid product slot!");
					SendClientMessage(playerid, GREY, "Product 1 - Every Skin Available");
				}
			}

			if(Businesses[Player[playerid][Business]][bType] == 4)
			{
				if(product >=1 && product < 3)
				{
					switch(product)
					{
						case 1:
						{
							Businesses[Player[playerid][Business]][bProductPrice1] = price;
							format(string, sizeof(string), "You have set the ad price to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 2:
						{
							Businesses[Player[playerid][Business]][bProductPrice2] = price;
							format(string, sizeof(string), "You have set the mobile ad price to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
					}
				}
				else
				{
					SendClientMessage(playerid, WHITE, "Invalid product slot!");
					SendClientMessage(playerid, GREY, "Product 1 - All ads placed inside business");
					SendClientMessage(playerid, GREY, "Product 2 - All ads placed via mobile app");
				}
			}

			if(Businesses[Player[playerid][Business]][bType] == 12 || Businesses[Player[playerid][Business]][bType] == 3)
			{
				if(product >= 1 && product < 9)
				{
					switch(product)
					{
						case 1:
						{
							Businesses[Player[playerid][Business]][bProductPrice1] = price;
							format(string, sizeof(string), "You have set the price of Sprunk to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 2:
						{
							Businesses[Player[playerid][Business]][bProductPrice2] = price;
							format(string, sizeof(string), "You have set the price of Wine to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 3:
						{
							Businesses[Player[playerid][Business]][bProductPrice3] = price;
							format(string, sizeof(string), "You have set the price of Beer to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 4:
						{
							if(price < 60)
								return SendClientMessage(playerid, WHITE, "The minimum price for a case of beer is $60!");
							Businesses[Player[playerid][Business]][bProductPrice4] = price;
							format(string, sizeof(string), "You have set the price of a case of beer to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 5:
						{
							Businesses[Player[playerid][Business]][bProductPrice5] = price;
							format(string, sizeof(string), "You have set the price of %s to $%d.", Businesses[Player[playerid][Business]][bFoodName1], price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 6:
						{
							Businesses[Player[playerid][Business]][bProductPrice6] = price;
							format(string, sizeof(string), "You have set the price of %s to $%d.", Businesses[Player[playerid][Business]][bFoodName2], price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 7:
						{
							Businesses[Player[playerid][Business]][bProductPrice7] = price;
							format(string, sizeof(string), "You have set the price of %s to $%d.", Businesses[Player[playerid][Business]][bFoodName3], price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 8:
						{
							Businesses[Player[playerid][Business]][bProductPrice8] = price;
							format(string, sizeof(string), "You have set the price of %s to $%d.", Businesses[Player[playerid][Business]][bFoodName4], price);
							SendClientMessage(playerid, WHITE, string);
						}
					}
				}
				else
				{
					SendClientMessage(playerid, WHITE, "Invalid product slot!");
					SendClientMessage(playerid, GREY, "Product 1 - Sprunk");
					SendClientMessage(playerid, GREY, "Product 2 - Wine");
					SendClientMessage(playerid, GREY, "Product 3 - Beer");
					SendClientMessage(playerid, GREY, "Product 4 - Case of beer");
					format(string, sizeof(string), "Product 5 - %s", Businesses[Player[playerid][Business]][bFoodName1]);
					SendClientMessage(playerid, GREY, string);
					format(string, sizeof(string), "Product 6 - %s", Businesses[Player[playerid][Business]][bFoodName2]);
					SendClientMessage(playerid, GREY, string);
					format(string, sizeof(string), "Product 7 - %s", Businesses[Player[playerid][Business]][bFoodName3]);
					SendClientMessage(playerid, GREY, string);
					format(string, sizeof(string), "Product 8 - %s", Businesses[Player[playerid][Business]][bFoodName4]);
					SendClientMessage(playerid, GREY, string);
				}
			}

			if(Businesses[Player[playerid][Business]][bType] == 10)
			{
				if(product > 0 && product < 11)
				{
					switch(product)
					{
						case 1:
						{
							if(price < 500)
								return SendClientMessage(playerid, -1, "The minimum price for Boxing is $500.");
							Businesses[Player[playerid][Business]][bProductPrice1] = price;
							format(string, sizeof(string), "You have set the price of Boxing to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 2:
						{
							if(price < 750)
								return SendClientMessage(playerid, -1, "The minimum price for Kung Fu is $750.");
							Businesses[Player[playerid][Business]][bProductPrice2] = price;
							format(string, sizeof(string), "You have set the price of Kung Fu to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 3:
						{
							if(price < 1500)
								return SendClientMessage(playerid, -1, "The minimum price for Kneehead is $1500.");
							Businesses[Player[playerid][Business]][bProductPrice3] = price;
							format(string, sizeof(string), "You have set the price of Kneehead to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 4:
						{
							if(price < 1250)
								return SendClientMessage(playerid, -1, "The minimum price for Grabkick is $1250.");
							Businesses[Player[playerid][Business]][bProductPrice4] = price;
							format(string, sizeof(string), "You have set the price of Grabkick to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 5:
						{
							if(price < 1000)
								return SendClientMessage(playerid, -1, "The minimum price for Elbow is $1000.");
							Businesses[Player[playerid][Business]][bProductPrice5] = price;
							format(string, sizeof(string), "You have set the price of Elbow to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 6:
						{
							if(price < 50)
								return SendClientMessage(playerid, -1, "The minimum price for Gang 1 is $50.");
							Businesses[Player[playerid][Business]][bProductPrice6] = price;
							format(string, sizeof(string), "You have set the price of Gang 1 to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 7:
						{
							if(price < 50)
								return SendClientMessage(playerid, -1, "The minimum price for Drunk is $50.");
							Businesses[Player[playerid][Business]][bProductPrice7] = price;
							format(string, sizeof(string), "You have set the price of Drunk to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 8:
						{
							if(price < 50)
								return SendClientMessage(playerid, -1, "The minimum price for Sexy is $50.");
							Businesses[Player[playerid][Business]][bProductPrice8] = price;
							format(string, sizeof(string), "You have set the price of Sexy to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 9:
						{
							if(price < 50)
								return SendClientMessage(playerid, -1, "The minimum price for Fatty is $50.");
							Businesses[Player[playerid][Business]][bProductPrice9] = price;
							format(string, sizeof(string), "You have set the price of Fatty to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 10:
						{
							if(price < 50)
								return SendClientMessage(playerid, -1, "The minimum price for Bad Back is $50.");
							Businesses[Player[playerid][Business]][bProductPrice10] = price;
							format(string, sizeof(string), "You have set the price of Bad Back to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
					}
				}
				else
				{
					SendClientMessage(playerid, GREY, "Product 1 - Boxing");
					SendClientMessage(playerid, GREY, "Product 2 - Kung Fu");
					SendClientMessage(playerid, GREY, "Product 3 - Kneehead");
					SendClientMessage(playerid, GREY, "Product 4 - Grabkick");
					SendClientMessage(playerid, GREY, "Product 5 - Elbow");
					SendClientMessage(playerid, GREY, "Product 6 - Gang 1");
					SendClientMessage(playerid, GREY, "Product 7 - Drunk");
					SendClientMessage(playerid, GREY, "Product 8 - Sexy");
					SendClientMessage(playerid, GREY, "Product 9 - Fatty");
					SendClientMessage(playerid, GREY, "Product 10 - Bad Back");
				}
			}

			if(Businesses[Player[playerid][Business]][bType] == 5)
			{
				if(product >= 1 && product < 8)
				{
					switch(product)
					{
						case 1:
						{
							Businesses[Player[playerid][Business]][bProductPrice1] = price;
							format(string, sizeof(string), "You have set the price of Rope to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 2:
						{
							Businesses[Player[playerid][Business]][bProductPrice2] = price;
							format(string, sizeof(string), "You have set the price of a Small White Vibrator to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 3:
						{
							Businesses[Player[playerid][Business]][bProductPrice3] = price;
							format(string, sizeof(string), "You have set the price of a Silver Vibrator to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 4:
						{
							Businesses[Player[playerid][Business]][bProductPrice4] = price;
							format(string, sizeof(string), "You have set the price of a Large White Vibrator to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 5:
						{
							Businesses[Player[playerid][Business]][bProductPrice5] = price;
							format(string, sizeof(string), "You have set the price of Priest Clothing to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 6:
						{
							Businesses[Player[playerid][Business]][bProductPrice6] = price;
							format(string, sizeof(string), "You have set the price of a Naughty Police Woman Costume to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 7:
						{
							Businesses[Player[playerid][Business]][bProductPrice7] = price;
							format(string, sizeof(string), "You have set the price of a Cat Woman Costume to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
					}
				}
				else
				{
					SendClientMessage(playerid, WHITE, "Invalid product slot!");
					SendClientMessage(playerid, GREY, "Product 1 - Rope");
					SendClientMessage(playerid, GREY, "Product 2 - Small White Vibrator");
					SendClientMessage(playerid, GREY, "Product 3 - Silver Vibrator");
					SendClientMessage(playerid, GREY, "Product 4 - Large White Vibrator");
					SendClientMessage(playerid, GREY, "Product 5 - Priest Costume");
					SendClientMessage(playerid, GREY, "Product 6 - Naughty Police Woman Costume");
					SendClientMessage(playerid, GREY, "Product 7 - Cat Woman Costume");
				}
			}
			if(Businesses[Player[playerid][Business]][bType] == 15)
			{
				if(product >= 1 && product < 13)
				{
					switch(product)
					{
						case 1:
						{
							if(price < 25)
								return SendClientMessage(playerid, WHITE, "The minimum price for engine parts is $25!");
							Businesses[Player[playerid][Business]][bProductPrice1] = price;
							format(string, sizeof(string), "You have set the price of engine parts to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 2:
						{
							if(price < 1000)
								return SendClientMessage(playerid, WHITE, "The minimum price for NOS bottles is $1000!");
							Businesses[Player[playerid][Business]][bProductPrice2] = price;
							format(string, sizeof(string), "You have set the price of a NOS bottle to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 3:
						{
							if(price < 1000)
								return SendClientMessage(playerid, WHITE, "The minimum price for hydraulics kits is $1000!");
							Businesses[Player[playerid][Business]][bProductPrice3] = price;
							format(string, sizeof(string), "You have set the price of a hydraulics kit to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 4:
						{
							if(price < 20)
								return SendClientMessage(playerid, WHITE, "The minimum price for rope is $20!");
							Businesses[Player[playerid][Business]][bProductPrice4] = price;
							format(string, sizeof(string), "You have set the price of rope to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 5:
						{
							if(price < 10)
								return SendClientMessage(playerid, WHITE, "The minimum price for rags is $10!");
							Businesses[Player[playerid][Business]][bProductPrice5] = price;
							format(string, sizeof(string), "You have set the price of rags to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 6:
						{
							if(price < 50)
								return SendClientMessage(playerid, WHITE, "The minimum price for gas cans is $50!");
							Businesses[Player[playerid][Business]][bProductPrice6] = price;
							format(string, sizeof(string), "You have set the price of gas cans to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 7:
						{
							if(price < 7500)
								return SendClientMessage(playerid, WHITE, "The minimum price for workbenches is $7500!");
							Businesses[Player[playerid][Business]][bProductPrice7] = price;
							format(string, sizeof(string), "You have set the price of a workbench to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 8:
						{
							if(price < 500)
								return SendClientMessage(playerid, WHITE, "The minimum price for toolkits is $500!");
							Businesses[Player[playerid][Business]][bProductPrice8] = price;
							format(string, sizeof(string), "You have set the price of a toolkit to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 9:
						{
							if(price < 2500)
								return SendClientMessage(playerid, WHITE, "The minimum price for intercoms is $2500!");
							Businesses[Player[playerid][Business]][bProductPrice9] = price;
							format(string, sizeof(string), "You have set the price of an intercom to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 10:
						{
							if(price < 2500)
								return SendClientMessage(playerid, WHITE, "The minimum price for tents is $2500!");
							Businesses[Player[playerid][Business]][bProductPrice10] = price;
							format(string, sizeof(string), "You have set the price of a tent to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 11:
						{
							if(price < 5000)
								return SendClientMessage(playerid, WHITE, "The minimum price for vent upgrade 1 is $5000!");
							Businesses[Player[playerid][Business]][bProductPrice11] = price;
							format(string, sizeof(string), "You have set the price of a vent upgrade 1 to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 12:
						{
							if(price < 10000)
								return SendClientMessage(playerid, WHITE, "The minimum price for vent upgrade 2 is $10000!");
							Businesses[Player[playerid][Business]][bProductPrice12] = price;
							format(string, sizeof(string), "You have set the price of a vent upgrade 2 to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
					}
				}
				else
				{
					SendClientMessage(playerid, WHITE, "Invalid product slot!");
     				SendClientMessage(playerid, GREY, "Product 1 - Engine Parts");
					SendClientMessage(playerid, GREY, "Product 2 - NOS Bottle");
					SendClientMessage(playerid, GREY, "Product 3 - Hydraulics Kit");
					SendClientMessage(playerid, GREY, "Product 4 - Rope");
					SendClientMessage(playerid, GREY, "Product 5 - Rags");
					SendClientMessage(playerid, GREY, "Product 6 - Gas Can");
					SendClientMessage(playerid, GREY, "Product 7 - Workbench");
					SendClientMessage(playerid, GREY, "Product 8 - Toolkit");
					SendClientMessage(playerid, GREY, "Product 9 - Business Intercom System");
					SendClientMessage(playerid, GREY, "Product 10 - Tent");
					SendClientMessage(playerid, GREY, "Product 11 - Ventillation Upgrade 1");
					SendClientMessage(playerid, GREY, "Product 12 - Ventillation Upgrade 2");
				}
			}
			if(Businesses[Player[playerid][Business]][bType] == 16)
			{
				if(product >= 1 && product < 6)
				{
					switch(product)
					{
						case 1:
						{
							if(price < 20)
								return SendClientMessage(playerid, WHITE, "The minimum price for rope is $20!");
							Businesses[Player[playerid][Business]][bProductPrice1] = price;
							format(string, sizeof(string), "You have set the price of rope to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 2:
						{
							if(price < 10)
								return SendClientMessage(playerid, WHITE, "The minimum price for rags is $10!");
							Businesses[Player[playerid][Business]][bProductPrice2] = price;
							format(string, sizeof(string), "You have set the price of rags to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 3:
						{
							if(price < 50)
								return SendClientMessage(playerid, WHITE, "The minimum price for gas cans is $50!");
							Businesses[Player[playerid][Business]][bProductPrice3] = price;
							format(string, sizeof(string), "You have set the price of gas cans to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 4:
						{
							if(price < 1)
								return SendClientMessage(playerid, WHITE, "The minimum price for bottles of Sprunk is $1!");
							Businesses[Player[playerid][Business]][bProductPrice4] = price;
							format(string, sizeof(string), "You have set the price of a Bottle O' Sprunk to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 5:
						{
							if(price < 3)
								return SendClientMessage(playerid, WHITE, "The minimum price for gas is $3/unit!");
							Businesses[Player[playerid][Business]][bProductPrice5] = price;
							format(string, sizeof(string), "Gas Station\nPrice: $%d per unit\n/refuel", Businesses[Player[playerid][Business]][bProductPrice5]);
							for(new i; i < MAX_PUMPS; i++)
							{
								if(IsValidDynamic3DTextLabel(Businesses[Player[playerid][Business]][GasText][i]))
									UpdateDynamic3DTextLabelText(Businesses[Player[playerid][Business]][GasText][i], YELLOW, string);
							}
							format(string, sizeof(string), "You have set the price of Gas to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
					}
				}
				else
				{
					SendClientMessage(playerid, WHITE, "Invalid product slot!");
					SendClientMessage(playerid, GREY, "Product 1 - Rope");
					SendClientMessage(playerid, GREY, "Product 2 - Rags");
					SendClientMessage(playerid, GREY, "Product 3 - Gas Can");
					SendClientMessage(playerid, GREY, "Product 4 - Bottle O' Sprunk");
					SendClientMessage(playerid, GREY, "Product 5 - Gas");
				}
			}
			if(Businesses[Player[playerid][Business]][bType] == 13)
			{
				if(product >= 1 && product < 3)
				{
					switch(product)
					{
						case 1:
						{
							if(price < 500)
								return SendClientMessage(playerid, WHITE, "The minimum price for a fishing rod is $500!");
							Businesses[Player[playerid][Business]][bProductPrice1] = price;
							format(string, sizeof(string), "You have set the price of a fishing rod to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
						case 2:
						{
							if(price < 3)
								return SendClientMessage(playerid, WHITE, "The minimum price for fish bait is $3!");
							Businesses[Player[playerid][Business]][bProductPrice2] = price;
							format(string, sizeof(string), "You have set the price of fish bait to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
					}
				}
				else
				{
					SendClientMessage(playerid, WHITE, "Invalid product slot!");
					SendClientMessage(playerid, GREY, "Product 1 - Fishing Rod");
					SendClientMessage(playerid, GREY, "Product 2 - Fish Bait");
				}
			}
			if(Businesses[Player[playerid][Business]][bType] == 9)
			{
				if(product >= 1 && product < 2)
				{
					switch(product)
					{
						case 1:
						{
							if(price < 1000)
								return SendClientMessage(playerid, WHITE, "The minimum price for marriage is $1,000!");
							Businesses[Player[playerid][Business]][bProductPrice1] = price;
							format(string, sizeof(string), "You have set the price of marriage to $%d.", price);
							SendClientMessage(playerid, WHITE, string);
						}
					}
				}
				else
				{
					SendClientMessage(playerid, WHITE, "Invalid product slot!");
					SendClientMessage(playerid, GREY, "Product 1 - Marriage Price");
				}
			}
			if(Businesses[Player[playerid][Business]][bType] == 17)
			{
				switch(product)
				{
					case 1:
					{
						if(price < 50)
							return SendClientMessage(playerid, WHITE, "The minimum price for a Med Kit is $50!");
						Businesses[Player[playerid][Business]][bProductPrice1] = price;
						format(string, sizeof(string), "You have set the price of a Med Kit to $%d.", price);
						SendClientMessage(playerid, WHITE, string);
					}
					default:
					{
						SendClientMessage(playerid, WHITE, "Invalid product slot!");
						SendClientMessage(playerid, GREY, "Product 1 - Med Kit");
					}
				}
			}
			if(Businesses[Player[playerid][Business]][bType] == 23)
			{
				switch(product)
				{
					case 1:
					{
						if(price < 20)
							return SendClientMessage(playerid, WHITE, "The minimum price for a Pizza is $20!");
						Businesses[Player[playerid][Business]][bProductPrice1] = price;
						format(string, sizeof(string), "You have set the price of a Pizza to $%d.", price);
						SendClientMessage(playerid, WHITE, string);
					}
					default:
					{
						SendClientMessage(playerid, WHITE, "Invalid product slot!");
						SendClientMessage(playerid, GREY, "Product 1 - Pizza");
					}
				}
			}
		}
	}
	return 1;
}

command(movehouse, playerid, params[])
{
	new Usage[128], id;
	if(sscanf(params, "ds[128]", id, Usage))
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /movehouse [houseid] [usage]");
			SendClientMessage(playerid, GREY, "Usages: Exterior & Interior.");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			if(strcmp(Usage, "exterior", true) == 0)
			{
				if(!DoesHouseExist(id))
				{
					SendClientMessage(playerid, WHITE, "Invalid house ID!");
					return 1;
				}
				else
				{
					DestroyDynamicPickup(Houses[id][HPickupID]);
					GetPlayerPos(playerid, Houses[id][hExteriorX], Houses[id][hExteriorY], Houses[id][hExteriorZ]);
					Houses[id][hExteriorVW] = GetPlayerVirtualWorld(playerid);
					Houses[id][hExteriorID] = GetPlayerInterior(playerid);
					if(strcmp(Houses[id][hOwner], "Nobody", true) == 0)
					{
						Houses[id][HPickupID] = CreateDynamicPickup(1273, 23, Houses[id][hExteriorX], Houses[id][hExteriorY], Houses[id][hExteriorZ], Houses[id][hExteriorVW], Houses[id][hExteriorID], -1, 150.0);
					}
					else
					{
						Houses[id][HPickupID] = CreateDynamicPickup(1272, 23, Houses[id][hExteriorX], Houses[id][hExteriorY], Houses[id][hExteriorZ], Houses[id][hExteriorVW], Houses[id][hExteriorID], -1, 150.0);
					}
					UpdateObjectLabel(id, LABEL_TYPE_HOUSE, .create = 1);
					SendClientMessage(playerid, WHITE, "Exterior changed!");
					SaveHouse(id);
				}
			}
			else if(strcmp(Usage, "interior", true) == 0)
			{
				if(!DoesHouseExist(id))
				{
					SendClientMessage(playerid, WHITE, "Invalid house ID!");
					return 1;
				}
				else
				{
					GetPlayerPos(playerid, Houses[id][hInteriorX], Houses[id][hInteriorY], Houses[id][hInteriorZ]);
					Houses[id][hInteriorID] = GetPlayerInterior(playerid);
					SendClientMessage(playerid, WHITE, "Interior changed!");
					SaveHouse(id);
				}
			}
		}
	}
	return 1;
}

command(setbusinesssupplies, playerid, params[])
{
	new amount, id, string[128];
	if(sscanf(params, "dd", id, amount))
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /setbusinesssupplies [businessid] [amount]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			if(DoesBusinessExist(id))
			{
				Businesses[id][bSupplies] = amount;
				format(string, sizeof(string), "You have set business %d (%s)'s supplies to %d.", id, Businesses[id][bName], amount);
				SendClientMessage(playerid, WHITE, string);
				SaveBusiness(id);
			}
			else
			{
				SendClientMessage(playerid, WHITE, "Invalid business ID.");
			}
		}
	}
	return 1;
}

command(movebusiness, playerid, params[])
{
	new Usage[128], id;
	if(sscanf(params, "ds[128]", id, Usage))
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /movebusiness [businessid] [usage]");
			SendClientMessage(playerid, GREY, "Usages: Exterior & Interior.");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			if(strcmp(Usage, "exterior", true) == 0)
			{
				if(!DoesBusinessExist(id))
				{
					SendClientMessage(playerid, WHITE, "Invalid business ID!");
					return 1;
				}
				else
				{
					new type;
					switch(Businesses[id][bType])
					{
						case 1: type = 17;
						case 2: type = 45;
						case 3: type = 49;
						case 6: type = 55;
						case 10: type = 54;
						case 11: type = 23;
						case 12: type = 50;
						case 13: type = 9;
						case 14: type = 55;
						case 15: type = 48;
						case 16: type = 36;
						case 17: type = 22;
						case 18: type = 52;
						case 19: type = 31;
						case 23: type = 29;
						default: type = -1;
					}


					DestroyDynamicPickup(Businesses[id][bPickupID]);

					Businesses[id][bExteriorID] = 0;
					GetPlayerPos(playerid, Businesses[id][bExteriorX], Businesses[id][bExteriorY], Businesses[id][bExteriorZ]);
					Businesses[id][bPickupID] = CreateDynamicPickup(1239, 23, Businesses[id][bExteriorX], Businesses[id][bExteriorY], Businesses[id][bExteriorZ], 0, 0, -1, 150.0);

					if(type != -1)
					{
						DestroyDynamicMapIcon(Businesses[id][mapIcon]);
						Businesses[id][mapIcon] = CreateDynamicMapIcon(Businesses[id][bExteriorX], Businesses[id][bExteriorY], Businesses[id][bExteriorZ], type, 0, .streamdistance = 150);
					}

					UpdateObjectLabel(id, LABEL_TYPE_BIZ, .create = 1);
					SendClientMessage(playerid, WHITE, "Exterior changed!");
					SaveBusiness(id);
				}
			}
			else if(strcmp(Usage, "interior", true) == 0)
			{
				if(!DoesBusinessExist(id))
				{
					SendClientMessage(playerid, WHITE, "Invalid business ID!");
					return 1;
				}
				else
				{
					GetPlayerPos(playerid, Businesses[id][bInteriorX], Businesses[id][bInteriorY], Businesses[id][bInteriorZ]);
					Businesses[id][bInteriorID] = GetPlayerInterior(playerid);
					SendClientMessage(playerid, WHITE, "Interior changed!");
					SaveBusiness(id);
				}
			}
		}
	}
	return 1;
}

command(killspotlight, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 3)
	{
		foreach(Player, i)
		{
			if(Player[i][SpotlightEffect] == 1)
			{
				Player[i][SpotlightEffect] = 0;
				Player[i][Checkpoint] = 0;
				DisablePlayerCheckpoint(i);
			}
		}

		Spotlight = -1;

		SendClientMessage(playerid, WHITE, "Killed the spotlight.");
	}
	return 1;
}

command(adivorce, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		if(Player[playerid][AdminLevel] >= 3)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /adivorce [playerid]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 3)
		{
			if(IsPlayerConnectedEx(id))
			{
				format(string, sizeof(string), "You have forced an admin divorce for %s.", GetName(id));
				SendClientMessage(playerid, WHITE, string);
				format(string, sizeof(string), "Server Admin %s has cleared your marrital record.", GetName(playerid));
				SendClientMessage(id, WHITE, string);
				format(Player[id][MarriedTo], 255, "Nobody");
			}
			else
			{
				SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
			}
		}
	}
	return 1;
}

command(movejob, playerid, params[])
{
	new Usage[128], id;
	if(sscanf(params, "ds[128]", id, Usage))
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /movejob [jobid] [usage]");
			SendClientMessage(playerid, GREY, "Usages: JoinPos, Location1, Location2");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			if(strcmp(Usage, "JoinPos", true) == 0)
			{
				if(!DoesJobExist(id))
				{
					SendClientMessage(playerid, WHITE, "Invalid job ID!");
					return 1;
				}
				else
				{
					DestroyDynamicPickup(Jobs[id][JobJoinPosPickupID]);
					Jobs[id][JobJoinPosInterior] = GetPlayerInterior(playerid);
					Jobs[id][JobJoinPosWorld] = GetPlayerVirtualWorld(playerid);
					GetPlayerPos(playerid, Jobs[id][JobJoinPosX], Jobs[id][JobJoinPosY], Jobs[id][JobJoinPosZ]);
					Jobs[id][JobJoinPosPickupID] = CreateDynamicPickup(1239, 23, Jobs[id][JobJoinPosX], Jobs[id][JobJoinPosY], Jobs[id][JobJoinPosZ], Jobs[id][JobJoinPosWorld], -1, -1, 150.0);
					UpdateObjectLabel(id, LABEL_TYPE_JOB, 0, 1);
					SendClientMessage(playerid, WHITE, "Join Job position updated.");
					SaveJobs();
				}
			}
			else if(strcmp(Usage, "location1", true) == 0)
			{
				if(!DoesJobExist(id))
				{
					SendClientMessage(playerid, WHITE, "Invalid job ID!");
					return 1;
				}
				else
				{
					DestroyDynamicPickup(Jobs[id][JobMiscLocationOnePickupID]);
					Jobs[id][JobMiscLocationOneInterior] = GetPlayerInterior(playerid);
					Jobs[id][JobMiscLocationOneWorld] = GetPlayerVirtualWorld(playerid);
					GetPlayerPos(playerid, Jobs[id][JobMiscLocationOneX], Jobs[id][JobMiscLocationOneY], Jobs[id][JobMiscLocationOneZ]);
					Jobs[id][JobMiscLocationOnePickupID] = CreateDynamicPickup(1239, 23, Jobs[id][JobMiscLocationOneX], Jobs[id][JobMiscLocationOneY], Jobs[id][JobMiscLocationOneZ], Jobs[id][JobMiscLocationOneWorld], -1, -1, 150.0);
					UpdateObjectLabel(id, LABEL_TYPE_JOB, 1, 1);
					SendClientMessage(playerid, WHITE, "Join Job position updated.");
					SaveJobs();
				}
			}
			else if(strcmp(Usage, "location2", true) == 0)
			{
				if(!DoesJobExist(id))
				{
					SendClientMessage(playerid, WHITE, "Invalid job ID!");
					return 1;
				}
				else
				{
					DestroyDynamicPickup(Jobs[id][JobMiscLocationTwoPickupID]);
					Jobs[id][JobMiscLocationTwoInterior] = GetPlayerInterior(playerid);
					Jobs[id][JobMiscLocationTwoWorld] = GetPlayerVirtualWorld(playerid);
					GetPlayerPos(playerid, Jobs[id][JobMiscLocationTwoX], Jobs[id][JobMiscLocationTwoY], Jobs[id][JobMiscLocationTwoZ]);
					Jobs[id][JobMiscLocationTwoPickupID] = CreateDynamicPickup(1239, 23, Jobs[id][JobMiscLocationTwoX], Jobs[id][JobMiscLocationTwoY], Jobs[id][JobMiscLocationTwoZ], Jobs[id][JobMiscLocationTwoWorld], -1, -1, 150.0);
					UpdateObjectLabel(id, LABEL_TYPE_JOB, 2, 1);
					SendClientMessage(playerid, WHITE, "Join Job position updated.");
					SaveJobs();
				}
			}
		}
	}
	return 1;
}

command(unblindfold, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /unblindfold [playerid]");
	}
	else
	{
		if(!IsPlayerConnectedEx(id))
		{
			SendClientMessage(playerid, WHITE, "That player is not connected or is not logged in.");
		}
		else
		{
			if(GetDistanceBetweenPlayers(playerid, id) < 5)
			{
				if(Player[playerid][Cuffed] >= 1 || Player[playerid][HospitalTime] >= 1 || Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1)
				{
					SendClientMessage(playerid, WHITE, "You can't do this right now.");
				}
				else
				{
					if(Player[id][Blindfolded] >= 1)
					{
						Player[id][Blindfolded] = 0;
						SetPlayerDrunkLevel(id, 0);
						SetCameraBehindPlayer(id);
						format(string, sizeof(string), "* %s grabs the rag off of %s's face.", GetNameEx(playerid), GetNameEx(id));
						NearByMessage(playerid, NICESKY, string);
					}
					else
					{
						SendClientMessage(playerid, WHITE, "That player isn't even blindfolded.");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "You're too far away.");
			}
		}
	}
	return 1;
}

command(endround, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 4)
	{
		if(ActiveQuiz >= 1)
		{
			ActiveQuiz = 0;
			QuizText("The quiz round has been finished!");
		}
	}
	return 1;
}

command(startround, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 4)
	{
		ShowPlayerDialog(playerid, 4541, DIALOG_STYLE_INPUT, "Quiz Question", "Please set the question for the Quiz.", "Done", "Cancel");
	}
	return 1;
}

command(quizhint, playerid, params[])
{
	new hint[128], string[128];
	if(sscanf(params, "s[128]", hint))
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /quizhint [hint]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
			if(strlen(hint) >= 1)
			{
				format(string, sizeof(string), "((Quiz HINT from %s: %s)) ", GetName(playerid), hint);
				QuizText(string);
			}
			else
			{
				SendClientMessage(playerid, GREY, "SYNTAX: /quizhint [hint]");
			}
		}
	}
	return 1;
}

command(forcetutorial, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		if(Player[playerid][AdminLevel] >= 2)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /forcetutorial [playerid]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 2)
		{
			if(IsPlayerConnectedEx(id))
			{
				if(Player[id][AdminLevel] <= Player[playerid][AdminLevel])
				{
					format(string, sizeof(string), "You have forced %s in to the tutorial.", GetName(id));
					SendClientMessage(playerid, WHITE, string);

					PutPlayerInTutorial(id, 1);
				}
				else
				{
					SendClientMessage(playerid, WHITE, "You can't do that to a higher level admin.");
				}
			}
		}
	}
	return 1;
}

command(answerq, playerid, params[])
{
	new answer[128], string[128];
	if(sscanf(params, "s[128]", answer))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /answerq [answer]");
	}
	else
	{
		if(ActiveQuiz >= 1)
		{
			if(strlen(answer) >= 1)
			{
				if(strcmp(answer, QuizAnswer, true) == 0)
				{
					format(string, sizeof(string), "%s has the correct answer!", GetName(playerid));
					QuizText(string);
				}
				else
				{
					format(string, sizeof(string), "%s has submitted the answer: %s", GetName(playerid), answer);
					SendToAdmins(ADMINORANGE, string, 1);
				}

				format(string, sizeof(string), "You have submitted: %s.", answer);
				SendClientMessage(playerid, WHITE, string);
			}
			else
			{
				SendClientMessage(playerid, GREY, "SYNTAX: /answerq [answer]");
			}
		}
	}
	return 1;
}

command(clearchat, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 4)
	{
		for(new i = 0; i < 100; i++)
		{
			SendClientMessageToAll(-1, "");
		}
		SendClientMessage(playerid, -1, "All player's chat boxes have been cleared.");
	}

	return 1;
}

command(gag, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /gag [playerid]");
	}
	else
	{
		if(!IsPlayerConnectedEx(id))
		{
			SendClientMessage(playerid, WHITE, "That player is not connected or is not logged in.");
		}
		else
		{
			if(Player[playerid][Rags] >= 1)
			{
				if(GetDistanceBetweenPlayers(playerid, id) < 5)
				{
					if(Player[playerid][Cuffed] >= 1 || Player[playerid][HospitalTime] >= 1 || Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1)
					{
						SendClientMessage(playerid, WHITE, "You can't do this right now.");
					}
					else
					{
						if(Player[id][Tied] >= 1 || Player[id][Cuffed] >= 1)
						{
							Player[id][Gagged] = 1;
							format(string, sizeof(string), "* %s grabs a rag, and ties it around %s's mouth.", GetNameEx(playerid), GetNameEx(id));
							NearByMessage(playerid, NICESKY, string);
							Player[playerid][Rags]--;
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You must cuff/tie them first.");
						}
					}
				}
				else
				{
					SendClientMessage(playerid, WHITE, "You're too far away.");
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "You have no rags left.");
			}
		}
	}
	return 1;
}

command(ungag, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /ungag [playerid]");
	}
	else
	{
		if(!IsPlayerConnectedEx(id))
		{
			SendClientMessage(playerid, WHITE, "That player is not connected or is not logged in.");
		}
		else
		{
			if(GetDistanceBetweenPlayers(playerid, id) < 5)
			{
				if(Player[playerid][Cuffed] >= 1 || Player[playerid][HospitalTime] >= 1 || Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1)
				{
					SendClientMessage(playerid, WHITE, "You can't do this right now.");
				}
				else
				{
					if(Player[id][Gagged] == 1)
					{
						Player[id][Gagged] = 0;
						format(string, sizeof(string), "* %s has whipped the rag off of %s's mouth.", GetNameEx(playerid), GetNameEx(id));
						NearByMessage(playerid, NICESKY, string);
					}
					else
					{
						SendClientMessage(playerid, -1, "This person is not gagged!");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "You're too far away.");
			}
		}
	}
	return 1;
}

command(blindfold, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /blindfold [playerid]");
	}
	else
	{
		if(!IsPlayerConnectedEx(id))
		{
			SendClientMessage(playerid, WHITE, "That player is not connected or is not logged in.");
		}
		else
		{
			if(Player[playerid][Rags] >= 1)
			{
				if(GetDistanceBetweenPlayers(playerid, id) < 5)
				{
					if(Player[playerid][Cuffed] >= 1 || Player[playerid][HospitalTime] >= 1 || Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1)
					{
						SendClientMessage(playerid, WHITE, "You can't do this right now.");
					}
					else
					{
						if(Player[id][Tied] >= 1 || Player[id][Cuffed] >= 1)
						{
							Player[playerid][Rags]--;
							SetPlayerDrunkLevel(id, 50000);
							SetPlayerCameraLookAt(id, -830.8118, -1360.3612, 87.0289);
							format(string, sizeof(string), "* %s grabs a rag, and ties it around %s's eyes.", GetNameEx(playerid), GetNameEx(id));
							NearByMessage(playerid, NICESKY, string);
							Player[id][Blindfolded] = 1;
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You must cuff/tie them first.");
						}
					}
				}
				else
				{
					SendClientMessage(playerid, WHITE, "You're too far away.");
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "You have no rags left.");
			}
		}
	}
	return 1;
}

command(houseprice, playerid, params[])
{
	new money, id, string[128];
	if(sscanf(params, "dd", id, money))
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /houseprice [houseid] [usage]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			if(money < 0)
				return SendClientMessage(playerid, WHITE, "Houses can't be worth negative amounts!");

			if(!DoesHouseExist(id))
			{
				SendClientMessage(playerid, WHITE, "Invalid house ID!");
				return 1;
			}
			else
			{
				format(string, sizeof(string), "You have set the price of House %d to $%d. (was $%d)", id, money, Houses[id][HousePrice]);
				SendClientMessage(playerid, -1, string);
				Houses[id][HousePrice] = money;
				SaveHouse(id);
				format(string, sizeof(string), "%s has set the price of House %d to $%s.", Player[playerid][AdminName], id, IntToFormattedStr(money));
				AdminActionsLog(string);
			}
		}
	}
	return 1;
}

command(businessprice, playerid, params[])
{
	new money, id, string[128];
	if(sscanf(params, "dd", id, money))
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /businessprice [businessid] [usage]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			if(money < 0 || money > 100000000)
				return SendClientMessage(playerid, WHITE, "Houses can't be worth negative amounts or greater than 100 million!");

			if(!DoesBusinessExist(id))
			{
				SendClientMessage(playerid, WHITE, "Invalid business ID!");
				return 1;
			}
			else
			{
				Businesses[id][bPrice] = money;
				SaveBusiness(id);
				format(string, sizeof(string), "%s has set the price of Business %d to $%s.", Player[playerid][AdminName], id, IntToFormattedStr(money));
				SendClientMessage(playerid, WHITE, string);
				AdminActionsLog(string);
			}
		}
	}
	return 1;
}

command(businesstype, playerid, params[])
{
	new type, id, string[128];
	if(sscanf(params, "dd", id, type))
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /businesstype [businessid] [type]");
			SendClientMessage(playerid, GREY, "Types: 1 - 24/7 | 2 - Clothing | 3 - Club | 4 - Advertisement Agency | 5 - Sex Shop | 6 - Shody Used Autos");
			SendClientMessage(playerid, GREY, "Types: 7 - College | 8 - Charity | 9 - Church | 10 - Gym | 11 - Pharmacy | 12 - Restaurant");
			SendClientMessage(playerid, GREY, "Types: 13 - Marina (boat & fishing) | 14 - Auto Bahn | 15 - Hardware Store | 16 - Gas Station");
			SendClientMessage(playerid, GREY, "Types: 17 - Hospital | 18 - Bank | 19 - Hotel | 20 - Bike Shop | 21 - Van Dealership | 22 - Furniture Store");
			return SendClientMessage(playerid, GREY, "Types: 23 - Pizza Store | 24 - Real Estate | 25 - Crowdfunding ");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 5)
		{

			if(!DoesBusinessExist(id))
			{
				SendClientMessage(playerid, WHITE, "Invalid business ID!");
				return 1;
			}
			else
			{
				Businesses[id][bType] = type;
				SaveBusiness(id);
				format(string, sizeof(string), "You have set the business type to %d.", type);
				SendClientMessage(playerid, WHITE, string);
			}
		}
	}
	return 1;
}
/*
command(tazer, playerid, params[])
{
	if (Groups[Player[playerid][Group]][CommandTypes] == 1){
	
		if(Player[playerid][GunTazer] == 1)
			return SendClientMessage(playerid, -1, "You're already holding your tazer gun.");
		new string[128];
		switch(Player[playerid][HandTazer])
		{
			case 0:
			{
				if(Player[playerid][Tied] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] == 1 || Player[playerid][AdminFrozen] == 1)
					return SendClientMessage(playerid, -1, "You can't do that right now, you're incapacitated!");

				Player[playerid][HandTazer] = 1;
				SetPlayerAttachedObject(playerid, 0, 18642, 6, 0.06, 0.01, 0.08, 180.0, 0.0, 0.0);
				format(string, sizeof(string), "* %s withdraws their tazer.", GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, string);
				UpdatePlayerToys(playerid);

			}
			case 1:
			{
				Player[playerid][HandTazer] = 0;
				RemovePlayerAttachedObject(playerid, 0);
				format(string, sizeof(string), "* %s holsters their tazer.", GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, string);
				UpdatePlayerToys(playerid);
			}
		}
	}
	return 1;
}
command(stun, playerid, params[])
	return cmd_tazer(playerid, params);
*/

command(hostname, playerid, params[])
{
	new name[128], string[128];
	if(sscanf(params, "s[128]", name))
	{
		if(Player[playerid][AdminLevel] >= 6)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /hostname [new name]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 6)
		{
			format(string, sizeof(string), "You have changed the server's name to %s.", name);
			SendClientMessage(playerid, WHITE, string);
			format(string, sizeof(string), "hostname %s", name);
			SendRconCommand(string);
		}
	}
	return 1;
}

command(drop, playerid, params[])
{
	new string[650];
	if(Player[playerid][Cuffed] >= 1 || Player[playerid][Tied] || Player[playerid][Tazed])
		return SendClientMessage(playerid, WHITE, "You can't do that, you're incapacitated!");
	format(string, sizeof(string), "Pot (%d grams)\nCocaine (%d grams)\nWeapons\nPhone\nWalkie talkie\nCasino chips\nGas can\nWorkbench\nToolkit\nFish\nFishing rod\n\nHydraulics kit\n", Player[playerid][Pot], Player[playerid][Cocaine]);
	format(string, sizeof(string), "%sNOS bottle\nFishing bait (%d)\nBeer cases (%d)\nRope (%d)\nRags (%d)\nPot seeds (%d)\nStreet grade mats (%d)\nStandard grade mats (%d)\nMilitary grade mats (%d)\nFireworks (%d)\n", string, Player[playerid][FishingBait], Player[playerid][BeerCases], Player[playerid][Rope], Player[playerid][Rags], Player[playerid][PotSeeds], Player[playerid][Materials][0], Player[playerid][Materials][1], Player[playerid][Materials][2], Player[playerid][pFireworks]);
	format(string, sizeof(string), "%sVehicle radio\nPersonal radio\nPizza slices (%d)\nSpray cans (%d)\nEngine parts\nSpeed (%d pills)\nSiren Kit\nPrison tickets (%d)\nScrewdriver\nShank\nRazor\nCigarettes (%d)\nDice\nLighter\nBusiness Intercom System\nFake ID\nFake Reg\nNotepad\nNotes\nTent\n", string, Player[playerid][PizzaSlices], Player[playerid][HasSprayCans], Player[playerid][Speed], Player[playerid][PrisonTickets], Player[playerid][Cigarettes]);
	format(string, sizeof(string), "%sArmour\nVentillation Upgrade\nID\nBomb\nGun License", string); 
	ShowPlayerDialog(playerid, 4621, DIALOG_STYLE_LIST, "Inventory", string, "Drop", "Cancel");
	return 1;
}

CMD:give(playerid, params[])
{
	new item[128], quantity, id, string[128];
	if(isnull(params))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /give [playerid] [item] [quantity]");
		SendClientMessage(playerid, GREY, "Items: Pot, Cocaine, Rags, Rope, streetmats, standardmats, militarymats, EngineParts, NOSbottle, VehicleRadio, Speed, Workbench");
		SendClientMessage(playerid, GREY, "Items: HydroKit, Gascan, WalkieTalkie, Toolkit, FishingRod, FishBait, CasinoChips, SprayCan, PersonalRadio, phone");
		SendClientMessage(playerid, GREY, "Items: Fish, CaseOfBeer, PizzaSlice, Fireworks, Tent, Note, FakeID, FakeReg, Armour, Bomb");
		return SendClientMessage(playerid, GREY, "Prison Items: PrisonTickets, Screwdriver, Shank, Razor, Cigarettes, Dice, Lighter");
	}
	sscanf(params, "ds[128]d", id, item, quantity);
	
	if(id < MAX_PLAYERS)
	{
		sscanf(params, "us[128]d", id, item, quantity);
		
		if(!IsPlayerConnectedEx(id))
			return SendClientMessage(playerid, -1, "That player is not connected or logged in.");
			
		if(Player[id][Mask] == 1)
	    	id = -1;
	}
	else
	    id = CheckIfMasked(id);
	
	if(id == -1)
		return SendClientMessage(playerid, -1, "You're too far away.");
		
	if(!strcmp(item, "Workbench", true))
	{
		if(quantity != 1)
	        return SendClientMessage(playerid, -1, "Invalid amount.");

	    if(Player[playerid][Workbench] == 0)
			return SendClientMessage(playerid, -1, "You don't have a workbench.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That player is not connected or isn't logged in.");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		if(Player[id][Workbench] != 0)
			return SendClientMessage(playerid, -1, "That player already has a workbench.");

		Player[id][Workbench] = 1;
		Player[playerid][Workbench] = 0;
		format(string, sizeof(string), "You have passed a Workbench to %s.", GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given a Workbench by %s.", GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed a Workbench to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s a Workbench.", GetName(playerid), GetName(id));
		StatLog(string);
	}
	if(!strcmp(item, "CaseOfBeer", true))
	{
		if(quantity < 1 || quantity > Player[playerid][BeerCases])
	        return SendClientMessage(playerid, -1, "Invalid amount.");

	    if(Player[playerid][BeerCases] == 0)
			return SendClientMessage(playerid, -1, "You don't have any beer cases.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That player is not connected or isn't logged in.");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		Player[id][BeerCases] += quantity;
		Player[playerid][BeerCases] -= quantity;
		format(string, sizeof(string), "You have passed %d cases of beer to %s.", quantity, GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given %d cases of beer by %s.", quantity, GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed %d cases of beer to %s.", GetNameEx(playerid), quantity, GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s %d cases of beer.", GetName(playerid), GetName(id), quantity);
		StatLog(string);
	}
	if(!strcmp(item, "phone", true))
	{
		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That player is not connected or isn't logged in.");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT * FROM phones WHERE owner = '%e' AND number = '%d'", Player[playerid][NormalName], quantity);
		new Cache:cache = mysql_query(MYSQL_MAIN, string), count = cache_get_row_count();
		cache_delete(cache);

		if(count == 0)
	        return SendClientMessage(playerid, -1, "Invalid phone, quantity needs to be the number of the phone you are giving.");

		if(GetPlayerPhones(id) >= 5)
		    return SendClientMessage(playerid, -1, "That player already has the max amount of phones.");
		    
		if(Player[playerid][PhoneN] == quantity)
			Player[playerid][PhoneN] = -1;

		mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE phones SET owner = '%e' WHERE owner = '%e' AND number = '%d'", Player[id][NormalName], Player[playerid][NormalName], quantity);
		mysql_query(MYSQL_MAIN, string, false);

		format(string, sizeof(string), "You have passed your phone (%s) to %s.", GetPhoneInfo(quantity, "label"), GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given a phone (%s) by %s.", GetPhoneInfo(quantity, "label"), GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed a phone to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s a phone (#%d).", GetName(playerid), GetName(id), quantity);
		StatLog(string);
	}
	if(!strcmp(item, "PersonalRadio", true))
	{
		if(quantity != 1)
	        return SendClientMessage(playerid, -1, "Invalid amount.");

	    if(Player[playerid][PersonalRadio] == 0)
			return SendClientMessage(playerid, -1, "You don't have a personal radio.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That player is not connected or isn't logged in.");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		if(Player[id][PersonalRadio] != 0)
			return SendClientMessage(playerid, -1, "That player already has a personal radio.");

		Player[id][PersonalRadio] = 1;
		Player[playerid][PersonalRadio] = 0;
		format(string, sizeof(string), "You have passed a personal radio to %s.", GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given a personal radio by %s.", GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed a personal radio to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s a personal radio.", GetName(playerid), GetName(id));
		StatLog(string);
	}
	if(strcmp(item, "streetmats", true) == 0)
	{
	    if(quantity < 1)
	        return SendClientMessage(playerid, -1, "Invalid amount.");

	    if(Player[playerid][Materials][0] < quantity)
			return SendClientMessage(playerid, -1, "You don't have that many street grade materials.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That player is not connected or isn't logged in.");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		Player[id][Materials][0] += quantity;
		Player[playerid][Materials][0] -= quantity;
		format(string, sizeof(string), "You have passed %d street grade materials on to %s.", quantity, GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given %d street grade materials, from %s.", quantity, GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed materials to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s %d street grade materials.", GetName(playerid), GetName(id), quantity);
		StatLog(string);
	}
	if(strcmp(item, "standardmats", true) == 0)
	{
	    if(quantity < 1)
	        return SendClientMessage(playerid, -1, "Invalid amount.");

	    if(Player[playerid][Materials][1] < quantity)
			return SendClientMessage(playerid, -1, "You don't have that many standard grade materials.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That player is not connected or isn't logged in.");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		Player[id][Materials][1] += quantity;
		Player[playerid][Materials][1] -= quantity;
		format(string, sizeof(string), "You have passed %d standard grade materials on to %s.", quantity, GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given %d standard grade materials, from %s.", quantity, GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed materials to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s %d standard grade materials.", GetName(playerid), GetName(id), quantity);
		StatLog(string);
	}
	if(strcmp(item, "militarymats", true) == 0)
	{
	    if(quantity < 1)
	        return SendClientMessage(playerid, -1, "Invalid amount.");

	    if(Player[playerid][Materials][2] < quantity)
			return SendClientMessage(playerid, -1, "You don't have that many military grade materials.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That player is not connected or isn't logged in.");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		Player[id][Materials][2] += quantity;
		Player[playerid][Materials][2] -= quantity;
		format(string, sizeof(string), "You have passed %d military grade materials on to %s.", quantity, GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given %d military grade materials, from %s.", quantity, GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed materials to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s %d military grade materials.", GetName(playerid), GetName(id), quantity);
		StatLog(string);
	}
	if(strcmp(item, "speed", true) == 0)
	{
	    if(quantity < 1)
	        return SendClientMessage(playerid, -1, "Invalid amount.");

	    if(Player[playerid][Speed] < quantity)
			return SendClientMessage(playerid, -1, "You don't have that many speed.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That player is not connected or isn't logged in.");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		Player[id][Speed] += quantity;
		Player[playerid][Speed] -= quantity;
		format(string, sizeof(string), "You have passed %d speed on to %s.", quantity, GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given %d speed, from %s.", quantity, GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed speed to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s %d speed.", GetName(playerid), GetName(id), quantity);
		StatLog(string);
	}
	if(strcmp(item, "potseeds", true) == 0)
	{
	    if(quantity < 1)
	        return SendClientMessage(playerid, -1, "Invalid amount.");

	    if(Player[playerid][PotSeeds] < quantity)
			return SendClientMessage(playerid, -1, "You don't have that many seeds.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That player is not connected or isn't logged in.");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		if(Player[id][PotSeeds] + quantity > 50)
			return SendClientMessage(playerid, -1, "That player cannot have that many seeds.");

		Player[id][PotSeeds] += quantity;
		Player[playerid][PotSeeds] -= quantity;
		format(string, sizeof(string), "You have passed %d seeds on to %s.", quantity, GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given %d seeds, from %s.", quantity, GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed seeds to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s %d pot seeds.", GetName(playerid), GetName(id), quantity);
		StatLog(string);
	}
	else if(strcmp(item, "rags", true) == 0)
	{
	    if(quantity < 1)
	        return SendClientMessage(playerid, -1, "Invalid amount.");

	    if(Player[playerid][Rags] < quantity)
			return SendClientMessage(playerid, -1, "You don't have that many rags.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That player is not connected or isn't logged in.");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		Player[id][Rags] += quantity;
		Player[playerid][Rags] -= quantity;
		format(string, sizeof(string), "You have passed %d rags on to %s.", quantity, GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given %d rags, from %s.", quantity, GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed rags to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s %d rags.", GetName(playerid), GetName(id), quantity);
		StatLog(string);
	}
	else if(strcmp(item, "rope", true) == 0)
	{
	    if(quantity < 1)
	        return SendClientMessage(playerid, -1, "Invalid amount.");

	    if(Player[playerid][Rope] < quantity)
			return SendClientMessage(playerid, -1, "You don't have that many rope.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That player is not connected or isn't logged in.");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		Player[id][Rope] += quantity;
		Player[playerid][Rope] -= quantity;
		format(string, sizeof(string), "You have passed %d lines of rope on to %s.", quantity, GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given %d lines of rope, from %s.", quantity, GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed lines of rope to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s %d rope.", GetName(playerid), GetName(id), quantity);
		StatLog(string);
	}
	else if(strcmp(item, "Cocaine", true) == 0)
	{
	    if(quantity < 1)
	        return SendClientMessage(playerid, -1, "Invalid amount.");

	    if(Player[playerid][Cocaine] < quantity)
			return SendClientMessage(playerid, -1, "You don't have that many cocaine.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That player is not connected or isn't logged in.");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		Player[id][Cocaine] += quantity;
		Player[playerid][Cocaine] -= quantity;
		format(string, sizeof(string), "You have passed %d grams of Cocaine on to %s.", quantity, GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given %d grams of Cocaine, from %s.", quantity, GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed Cocaine to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s %d cocaine.", GetName(playerid), GetName(id), quantity);
		StatLog(string);
	}
	else if(strcmp(item, "Pot", true) == 0)
	{
	    if(quantity < 1)
	        return SendClientMessage(playerid, -1, "Invalid amount.");

	    if(Player[playerid][Pot] < quantity)
			return SendClientMessage(playerid, -1, "You don't have that many pot.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That player is not connected or isn't logged in.");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		Player[id][Pot] += quantity;
		Player[playerid][Pot] -= quantity;
		format(string, sizeof(string), "You have passed %d grams of Pot on to %s.", quantity, GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given %d grams of Pot, from %s.", quantity, GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed Pot to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s %d pot.", GetName(playerid), GetName(id), quantity);
		StatLog(string);
	}
	else if(strcmp(item, "EngineParts", true) == 0)
	{
	    if(quantity < 1)
	        return SendClientMessage(playerid, -1, "Invalid amount.");

	    if(Player[playerid][EngineParts] < quantity)
			return SendClientMessage(playerid, -1, "You don't have that many engine parts.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That player is not connected or isn't logged in.");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		if(Player[id][EngineParts] + quantity > 5)
		    return SendClientMessage(playerid, -1, "That player can't hold that many engine parts.");

		Player[id][EngineParts] += quantity;
		Player[playerid][EngineParts] -= quantity;
		format(string, sizeof(string), "You have passed %d engine part(s) on to %s.", quantity, GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given %d engine part(s), from %s.", quantity, GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed engine parts to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s %d engine part(s).", GetName(playerid), GetName(id), quantity);
		StatLog(string);
	}
	else if(!strcmp(item, "Gascan", true))
	{
	    if(!Player[playerid][GasCans])
	        return SendClientMessage(playerid, -1, "You don't have a gas can!");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That specified player is not connected or isn't logged in.");

		if(Player[id][GasCans])
			return SendClientMessage(playerid, -1, "That player already has a gas can.");

		for(new i; i < 5; i++)
		{
			if(Player[id][Cars][i] == 0) continue;

			// if(VehicleHasGasCan(Player[id][Cars][i]))
				// return SendClientMessage(playerid, -1, "That player already has a gas can.");
		}

		Player[id][GasCans] = 1;
		Player[playerid][GasCans] = 0;
		Player[id][GasFull] = Player[playerid][GasFull];
		Player[playerid][GasFull] = 0;
		format(string, sizeof(string), "You have passed a gas can to %s.", GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given a gas can, from %s.", GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed a gas can to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s a gas can.", GetName(playerid), GetName(id));
		StatLog(string);
	}
	else if(!strcmp(item, "WalkieTalkie", true))
	{
	    if(!Player[playerid][WalkieTalkie])
	        return SendClientMessage(playerid, -1, "You don't have a walkie talkie!");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That specified player is not connected or isn't logged in.");

		if(Player[id][WalkieTalkie])
			return SendClientMessage(playerid, -1, "That player already has a walkie talkie.");

		Player[id][WalkieTalkie]++;
		Player[playerid][WalkieTalkie]--;
		Player[playerid][WalkieFrequency] = 0;
		format(string, sizeof(string), "You have passed a walkie talkie to %s.", GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given a walkie talkie, from %s.", GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed a walkie talkie to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s a walkie talkie.", GetName(playerid), GetName(id));
		StatLog(string);
	}
	else if(!strcmp(item, "Toolkit", true))
	{
	    if(!Player[playerid][Toolkit])
	        return SendClientMessage(playerid, -1, "You don't have a toolkit!");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That specified player is not connected or isn't logged in.");

		if(Player[id][Toolkit])
			return SendClientMessage(playerid, -1, "That player already has a toolkit.");

		Player[id][Toolkit]++;
		Player[playerid][Toolkit]--;
		format(string, sizeof(string), "You have passed a toolkit to %s.", GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given a toolkit, from %s.", GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed a toolkit to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s a toolkit.", GetName(playerid), GetName(id));
		StatLog(string);
	}
	else if(!strcmp(item, "FishingRod", true))
	{
	    if(!Player[playerid][FishingRod])
	        return SendClientMessage(playerid, -1, "You don't have a fishing rod!");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That specified player is not connected or isn't logged in.");

		if(Player[id][FishingRod])
			return SendClientMessage(playerid, -1, "That player already has a fishing rod.");

		Player[id][FishingRod]++;
		Player[playerid][FishingRod]--;
		format(string, sizeof(string), "You have passed a fishing rod to %s.", GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given a fishing rod, from %s.", GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed a fishing rod to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s a fishing rod.", GetName(playerid), GetName(id));
		StatLog(string);
	}
	else if(!strcmp(item, "FishBait", true))
	{
	    if(quantity < 1)
	        return SendClientMessage(playerid, -1, "Invalid amount.");

	    if(Player[playerid][FishingBait] < quantity)
	        return SendClientMessage(playerid, -1, "You don't have that much fishing bait!");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That specified player is not connected or isn't logged in.");

		if(Player[id][FishingBait] + quantity > 30)
			return SendClientMessage(playerid, -1, "That player can't hold that much fishing bait.");

		Player[id][FishingBait] += quantity;
		Player[playerid][FishingBait] -= quantity;
		format(string, sizeof(string), "You have passed %d fishing bait to %s.", quantity, GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given %d fishing bait, from %s.", quantity, GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed a fishing bait to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s some fishing bait.", GetName(playerid), GetName(id));
		StatLog(string);
	}
	else if(!strcmp(item, "NOSbottle", true))
	{
	    if(!Player[playerid][NosBottle])
	        return SendClientMessage(playerid, -1, "You don't have a NOS bottle!");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That specified player is not connected or isn't logged in.");

		if(Player[id][NosBottle])
			return SendClientMessage(playerid, -1, "That player already has a NOS bottle.");

		Player[id][NosBottle]++;
		Player[playerid][NosBottle]--;
		format(string, sizeof(string), "You have passed a NOS bottle to %s.", GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given a NOS bottle, from %s.", GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed a NOS bottle to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s a NOS bottle.", GetName(playerid), GetName(id));
		StatLog(string);
	}
	else if(!strcmp(item, "HydroKit", true))
	{
	    if(!Player[playerid][HydroKit])
	        return SendClientMessage(playerid, -1, "You don't have a hydraulics kit!");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That specified player is not connected or isn't logged in.");

		if(Player[id][HydroKit])
			return SendClientMessage(playerid, -1, "That player already has a hydraulics kit.");

		Player[id][HydroKit]++;
		Player[playerid][HydroKit]--;
		format(string, sizeof(string), "You have passed a hydro kit to %s.", GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given a hydro kit, from %s.", GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed a hydro kit to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s a hydro kit.", GetName(playerid), GetName(id));
		StatLog(string);
	}
	else if(!strcmp(item, "Fish", true))
	{
	    new totalfish = Player[id][TotalBass] + Player[id][TotalCod] + Player[id][TotalSalmon] + Player[id][TotalMackerel];
		totalfish += Player[id][TotalTuna] + Player[id][TotalCarp] + Player[id][TotalHerring] + Player[id][TotalMarlin];
		totalfish += Player[id][TotalMako] + Player[id][TotalCrab] + Player[id][TotalKraken];

		new playertotalfish = Player[playerid][TotalBass] + Player[playerid][TotalCod] + Player[playerid][TotalSalmon] + Player[playerid][TotalMackerel];
		playertotalfish += Player[playerid][TotalTuna] + Player[playerid][TotalCarp] + Player[playerid][TotalHerring] + Player[playerid][TotalMarlin];
		playertotalfish += Player[playerid][TotalMako] + Player[playerid][TotalCrab] + Player[playerid][TotalKraken];

	    if(playertotalfish < 1)
	        return SendClientMessage(playerid, -1, "You don't have any fish.");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That specified player is not connected or isn't logged in.");

		if(totalfish + playertotalfish > 10)
			return SendClientMessage(playerid, -1, "That player can't hold that many fish.");
			
		if(playerid == id)
			return SendClientMessage(playerid, -1, "You can't give fish to yourself.");

		Player[id][TotalBass] += Player[playerid][TotalBass];
		Player[id][TotalCod] += Player[playerid][TotalCod];
		Player[id][TotalSalmon] += Player[playerid][TotalSalmon];
		Player[id][TotalMackerel] += Player[playerid][TotalMackerel];
		Player[id][TotalTuna] += Player[playerid][TotalTuna];
		Player[id][TotalCarp] += Player[playerid][TotalCarp];
		Player[id][TotalHerring] += Player[playerid][TotalHerring];
		Player[id][TotalMarlin] += Player[playerid][TotalMarlin];
		Player[id][TotalMako] += Player[playerid][TotalMako];
		Player[id][TotalCrab] += Player[playerid][TotalCrab];
		Player[id][TotalKraken] += Player[playerid][TotalKraken];

		Player[playerid][TotalBass] = 0;
		Player[playerid][TotalCod] = 0;
		Player[playerid][TotalSalmon] = 0;
		Player[playerid][TotalMackerel] = 0;
		Player[playerid][TotalTuna] = 0;
		Player[playerid][TotalCarp] = 0;
		Player[playerid][TotalHerring] = 0;
		Player[playerid][TotalMarlin] = 0;
		Player[playerid][TotalMako] = 0;
		Player[playerid][TotalCrab] = 0;
		Player[playerid][TotalKraken] = 0;


		format(string, sizeof(string), "You have passed %d fish to %s.", quantity, GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given %d fish, from %s.", quantity, GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed some fish to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s some fish.", GetName(playerid), GetName(id));
		StatLog(string);
	}
	else if(!strcmp(item, "casinochips", true))
	{
	    if(quantity < 1)
	        return SendClientMessage(playerid, -1, "Invalid amount.");

	    if(Player[playerid][CasinoChips] < quantity)
	        return SendClientMessage(playerid, -1, "You don't have that many casino chips!");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That specified player is not connected or isn't logged in.");

		if(Player[id][PlayingHours] < 25)
			return SendClientMessage(playerid, -1, "That specified player has less than 25 playing hours.");
			
		Player[id][CasinoChips] += quantity;
		Player[playerid][CasinoChips] -= quantity;
		format(string, sizeof(string), "You have passed %d casino chips to %s.", quantity, GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given %d casino chips, from %s.", quantity, GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed some casino chips to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s some casino chips.", GetName(playerid), GetName(id));
		StatLog(string);
	}
	else if(!strcmp(item, "spraycan", true))
	{
		if(quantity < 1)
			return SendClientMessage(playerid, -1, "Invalid amount.");

		if(Player[playerid][HasSprayCans] < quantity)
			return SendClientMessage(playerid, -1, "You don't have that many spray cans!");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
			return SendClientMessage(playerid, -1, "You're too far away.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That specified player is not connected or isn't logged in.");

		Player[id][HasSprayCans] += quantity;
		Player[playerid][HasSprayCans] -= quantity;
		format(string, sizeof(string), "You have passed %d spray cans to %s.", quantity, GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given %d spray cans, from %s.", quantity, GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed some spray cans to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s some spray cans.", GetName(playerid), GetName(id));
		StatLog(string);
	}
	else if(!strcmp(item, "VehicleRadio", true))
	{
		if(Player[playerid][VehicleRadio] < 1)
			return SendClientMessage(playerid, -1, "You don't have a vehicle radio!");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That specified player is not connected or isn't logged in.");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
			return SendClientMessage(playerid, -1, "You're too far away.");

		if(Player[id][VehicleRadio] > 0)
			return SendClientMessage(playerid, -1, "They already have a vehicle radio.");

		Player[id][VehicleRadio] = 1;
		Player[playerid][VehicleRadio] = 0;
		format(string, sizeof(string), "You have passed a vehicle radio to %s.", GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given a vehicle radio, from %s.", GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed a vehicle radio to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s a vehicle radio.", GetName(playerid), GetName(id));
		StatLog(string);
	}
	else if(!strcmp(item, "PizzaSlice", true))
	{
	    if(quantity < 1)
	        return SendClientMessage(playerid, -1, "Invalid amount.");

	    if(Player[playerid][PizzaSlices] < quantity)
	        return SendClientMessage(playerid, -1, "You don't have that many pizza slices!");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That specified player is not connected or isn't logged in.");


		Player[id][PizzaSlices] += quantity;
		Player[playerid][PizzaSlices] -= quantity;
		format(string, sizeof(string), "You have passed %d pizza slices to %s.", quantity, GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given %d pizza slices, from %s.", quantity, GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed pizza slices to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s some pizza slices.", GetName(playerid), GetName(id));
		StatLog(string);
	}
	else if(!strcmp(item, "Fireworks", true))
	{
	    if(quantity < 1)
	        return SendClientMessage(playerid, -1, "Invalid amount.");

	    if(Player[playerid][pFireworks] < quantity)
	        return SendClientMessage(playerid, -1, "You don't have that many fireworks!");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That specified player is not connected or isn't logged in.");

		Player[id][pFireworks] += quantity;
		Player[playerid][pFireworks] -= quantity;
		format(string, sizeof(string), "You have passed %d fireworks to %s.", quantity, GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given %d fireworks, from %s.", quantity, GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed some fireworks to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s some fireworks.", GetName(playerid), GetName(id));
		StatLog(string);
	}
	else if(!strcmp(item, "PrisonTickets", true))
	{
	    if(quantity < 1)
	        return SendClientMessage(playerid, -1, "Invalid amount.");

	    if(Player[playerid][PrisonTickets] < quantity)
	        return SendClientMessage(playerid, -1, "You don't have that many prison tickets!");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That specified player is not connected or isn't logged in.");

		Player[id][PrisonTickets] += quantity;
		Player[playerid][PrisonTickets] -= quantity;
		format(string, sizeof(string), "You have passed %d prison tickets to %s.", quantity, GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given %d prison tickets, from %s.", quantity, GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed prison tickets to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s some prison tickets.", GetName(playerid), GetName(id));
		StatLog(string);
	}
	else if(!strcmp(item, "Screwdriver", true))
	{
	    if(Player[playerid][PrisonScrewdriver] < 1)
	        return SendClientMessage(playerid, -1, "You don't have a screwdriver!");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That specified player is not connected or isn't logged in.");

		if(Player[id][PrisonScrewdriver] == 1)
			return SendClientMessage(playerid, -1, "This player already has a screwdriver!");
			
		Player[id][PrisonScrewdriver] = 1;
		Player[playerid][PrisonScrewdriver] = 0;
		format(string, sizeof(string), "You have passed a screwdriver to %s.", GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given a screwdriver, from %s.", GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed a screwdriver to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s a screwdriver.", GetName(playerid), GetName(id));
		StatLog(string);
	}
	else if(!strcmp(item, "Shank", true))
	{
	    if(Player[playerid][PrisonShank] < 1)
	        return SendClientMessage(playerid, -1, "You don't have a shank!");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That specified player is not connected or isn't logged in.");

		if(Player[id][PrisonShank] == 1)
			return SendClientMessage(playerid, -1, "This player already has a shank!");
			
		Player[id][PrisonShank] = 1;
		Player[playerid][PrisonShank] = 0;
		format(string, sizeof(string), "You have passed a shank to %s.", GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given a shank, from %s.", GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed a shank to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s a shank.", GetName(playerid), GetName(id));
		StatLog(string);
	}
	else if(!strcmp(item, "Razor", true))
	{
	    if(Player[playerid][PrisonRazor] < 1)
	        return SendClientMessage(playerid, -1, "You don't have a razor!");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That specified player is not connected or isn't logged in.");

		if(Player[id][PrisonRazor] == 1)
			return SendClientMessage(playerid, -1, "This player already has a razor!");
			
		Player[id][PrisonRazor] = 1;
		Player[playerid][PrisonRazor] = 0;
		format(string, sizeof(string), "You have passed a razor to %s.", GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given a razor, from %s.", GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed a razor to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s a razor.", GetName(playerid), GetName(id));
		StatLog(string);
	}
	else if(!strcmp(item, "Cigarettes", true))
	{
	    if(quantity < 1)
	        return SendClientMessage(playerid, -1, "Invalid amount.");

	    if(Player[playerid][Cigarettes] < quantity)
	        return SendClientMessage(playerid, -1, "You don't have that many cigarettes!");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That specified player is not connected or isn't logged in.");

		Player[id][Cigarettes] += quantity;
		Player[playerid][Cigarettes] -= quantity;
		format(string, sizeof(string), "You have passed %d cigarettes to %s.", quantity, GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given %d cigarettes, from %s.", quantity, GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed cigarettes to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s some cigarettes.", GetName(playerid), GetName(id));
		StatLog(string);
	}
	else if(!strcmp(item, "Dice", true))
	{
	    if(Player[playerid][PrisonDice] < 1)
	        return SendClientMessage(playerid, -1, "You don't have dice!");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That specified player is not connected or isn't logged in.");

		if(Player[id][PrisonDice] == 1)
			return SendClientMessage(playerid, -1, "This player already has dice!");
			
		Player[id][PrisonDice] = 1;
		Player[playerid][PrisonDice] = 0;
		format(string, sizeof(string), "You have passed dice to %s.", GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given dice, from %s.", GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed dice to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s dice.", GetName(playerid), GetName(id));
		StatLog(string);
	}
	else if(!strcmp(item, "Lighter", true))
	{
	    if(Player[playerid][PrisonLighter] < 1)
	        return SendClientMessage(playerid, -1, "You don't have a lighter!");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		if(!IsPlayerConnectedEx(id))
			return SendClientMessage(playerid, -1, "That specified player is not connected or isn't logged in.");

		if(Player[id][PrisonLighter] == 1)
			return SendClientMessage(playerid, -1, "This player already has a lighter!");
			
		Player[id][PrisonLighter] = 1;
		Player[playerid][PrisonLighter] = 0;
		format(string, sizeof(string), "You have passed a lighter to %s.", GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given a lighter, from %s.", GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed a lighter to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s a lighter.", GetName(playerid), GetName(id));
		StatLog(string);
	}
	else if(!strcmp(item, "Tent", true))
	{
	    if(!Player[playerid][Tent])
	        return SendClientMessage(playerid, -1, "You don't have a tent!");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That specified player is not connected or isn't logged in.");

		if(Player[id][Tent])
			return SendClientMessage(playerid, -1, "That player already has a tent.");
			
		if(Player[id][PlayingHours] < 20 && Player[id][VipRank] < 1)
			return SendClientMessage(playerid, -1, "That player has under 20 playing hours.");

		Player[id][Tent] = 1;
		Player[playerid][Tent] = 0;
		format(string, sizeof(string), "You have passed a tent to %s.", GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given a tent, from %s.", GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed a tent to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s a tent.", GetName(playerid), GetName(id));
		StatLog(string);
	}
	else if(!strcmp(item, "Note", true))
	{
		if(quantity < 1 || quantity > 3)
	        return SendClientMessage(playerid, -1, "Invalid number, choose 1-3.");
		
		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That specified player is not connected or isn't logged in.");
			
		new notestr[256];
		switch(quantity)
		{
			case 1:
			{
				if(strlen(Player[playerid][Note1]) < 1)
					return SendClientMessage(playerid, -1, "You don't have a note in this slot.");
				format(notestr, 256, Player[playerid][Note1]);
			}
			case 2:
			{
				if(strlen(Player[playerid][Note2]) < 1)
					return SendClientMessage(playerid, -1, "You don't have a note in this slot.");
				format(notestr, 256, Player[playerid][Note2]);
			}
			case 3: 
			{
				if(strlen(Player[playerid][Note3]) < 1)
					return SendClientMessage(playerid, -1, "You don't have a note in this slot.");
				format(notestr, 256, Player[playerid][Note3]);
			}
		}	
	
		if(strlen(Player[id][Note1]) < 1)
		{
			format(Player[id][Note1], 256, notestr);
		}
		else if(strlen(Player[id][Note2]) < 1)
		{
			format(Player[id][Note2], 256, notestr);
		}
		else if(strlen(Player[id][Note3]) < 1)
		{
			format(Player[id][Note3], 256, notestr);
		}
		else
			return SendClientMessage(playerid, -1, "This player can't hold any more notes.");
		
		if(!strcmp(notestr, Player[playerid][Note1]))
			format(Player[playerid][Note1], 256, "");
		if(!strcmp(notestr, Player[playerid][Note2]))
			format(Player[playerid][Note2], 256, "");
		if(!strcmp(notestr, Player[playerid][Note3]))
			format(Player[playerid][Note3], 256, "");
		SendClientMessage(id, GREY, "-------------------------");
		SendClientMessage(id, -1, "You have been given a note, it reads:");
		SendClientMessage(id, -1, notestr);
		SendClientMessage(id, GREY, "-------------------------");
		format(string, sizeof(string), "* %s passes a note to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
	}
	else if(!strcmp(item, "FakeID", true))
	{
	    if(strlen(Player[playerid][FakeIDString]) < 3)
	        return SendClientMessage(playerid, -1, "You don't have a fake ID!");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That specified player is not connected or isn't logged in.");

		if(strlen(Player[id][FakeIDString]) > 2)
			return SendClientMessage(playerid, -1, "That player already has a fake ID.");
			
		if(Player[id][PlayingHours] < 20 && Player[id][VipRank] < 1)
			return SendClientMessage(playerid, -1, "That player has under 20 playing hours.");

		format(Player[id][FakeIDString], 256, Player[playerid][FakeIDString]);
		format(Player[playerid][FakeIDString], 256, "");
		format(string, sizeof(string), "You have passed a fake ID card to %s.", GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given a fake ID card, from %s.", GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed an ID card to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s a fake ID.", GetName(playerid), GetName(id));
		StatLog(string);
	}
	else if(!strcmp(item, "FakeReg", true))
	{
	    if(strlen(Player[playerid][FakeLicense]) < 3)
	        return SendClientMessage(playerid, -1, "You don't have a fake registration!");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That specified player is not connected or isn't logged in.");

		if(strlen(Player[id][FakeLicense]) > 2)
			return SendClientMessage(playerid, -1, "That player already has a fake registration.");
			
		if(Player[id][PlayingHours] < 20 && Player[id][VipRank] < 1)
			return SendClientMessage(playerid, -1, "That player has under 20 playing hours.");

		format(Player[id][FakeLicense], 256, Player[playerid][FakeLicense]);
		format(Player[playerid][FakeLicense], 256, "");
		format(string, sizeof(string), "You have passed a fake registration to %s.", GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given a fake registration, from %s.", GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed a registration card to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s a fake registration.", GetName(playerid), GetName(id));
		StatLog(string);
	}
	else if(!strcmp(item, "Armour", true))
	{
	    if(Player[playerid][HasArmour] < 1)
	        return SendClientMessage(playerid, -1, "You don't have any armour in your inventory!");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That specified player is not connected or isn't logged in.");

		if(Player[id][HasArmour] > 0)
			return SendClientMessage(playerid, -1, "That player already has armour.");

		Player[id][HasArmour] = Player[playerid][HasArmour];
		Player[playerid][HasArmour] = 0;
		format(string, sizeof(string), "You have passed a kevlar vest to %s.", GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given a kevlar vest, from %s.", GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed a kevlar vest to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s a kevlar vest.", GetName(playerid), GetName(id));
		StatLog(string);
	}
	else if(!strcmp(item, "Bomb", true))
	{
	    if(!Player[playerid][Toolkit])
	        return SendClientMessage(playerid, -1, "You don't have a bomb!");

		if(GetDistanceBetweenPlayers(playerid, id) > 6)
		    return SendClientMessage(playerid, -1, "You're too far away.");

		if(!IsPlayerConnectedEx(id))
		    return SendClientMessage(playerid, -1, "That specified player is not connected or isn't logged in.");

		if(Player[id][Toolkit])
			return SendClientMessage(playerid, -1, "That player already has a bomb.");

		Player[id][Bomb]++;
		Player[playerid][Bomb]--;
		format(string, sizeof(string), "You have passed a bomb to %s.", GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given a bomb, from %s.", GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		format(string, sizeof(string), "* %s has passed a bomb to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[GIVE] %s has given %s a bomb.", GetName(playerid), GetName(id));
		StatLog(string);
	}
	
	if(!IsPlayerInAnyVehicle(playerid) && playerid != id)
		ApplyAnimation(playerid, "GANGS", "DEALER_DEAL", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

command(getsupplies, playerid, params[])
{
	#pragma unused params

	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, WHITE, "You need to get out of your car first!");

	if(Jobs[Player[playerid][Job]][JobType] == JOB_DELIVERER || Jobs[Player[playerid][Job2]][JobType] == JOB_DELIVERER)
	{
		for(new h = 0; h < sizeof(Jobs); h++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 5, Jobs[h][JobMiscLocationOneX], Jobs[h][JobMiscLocationOneY], Jobs[h][JobMiscLocationOneZ]))
			{
				if((Player[playerid][Job] == h && Jobs[Player[playerid][Job]][JobType] == JOB_DELIVERER) || (Player[playerid][Job2] == h && Jobs[Player[playerid][Job2]][JobType] == JOB_DELIVERER))
				{
					if(Jobs[h][JobMiscLocationOneWorld] == GetPlayerVirtualWorld(playerid))
					{
						if(Player[playerid][DeliverTime] > gettime())
							return SendClientMessage(playerid, -1, "You can't do that right now.");

						SendClientMessage(playerid, WHITE, "Please select the supplies type you wish to collect.");
						ShowPlayerDialog(playerid, 1621, DIALOG_STYLE_LIST, "Delivery Job", "Grocery Supplies (24/7)\nClothes (skin shops)\nAlcohol & Food (bars / clubs / restaurants)\nHardware (hardware shops)\nGas bar supplies\nHotel Supplies\n", "Select", "Cancel");
					}
				}
				else
				{
					SendClientMessage(playerid, -1, "You can't do that here.");
				}
			}
		}
	}
	return 1;
}

command(changeranktitle, playerid, params[])
{
	new Name[128], Rank, string[128];
	if (sscanf(params, "ds[128]", Rank, Name))
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /changeranktitle [rank (1-7)] [new title]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
			if(strlen(Name) < 20 && strlen(Name) >= 1)
			{
				switch(Rank)
				{
					case 1:
					{
						format(OOCRanks[Rank1], sizeof(OOCRanks[Rank1]), "%s", Name);
						dini_Set("Ranks.ini", "Rank1", OOCRanks[Rank1]);
						format(string, sizeof(string), "You have changed Rank 1's title to '%s'.", OOCRanks[Rank1]);
						SendClientMessage(playerid, WHITE, string);
					}
					case 2:
					{
						format(OOCRanks[Rank2], sizeof(OOCRanks[Rank2]), "%s", Name);
						dini_Set("Ranks.ini", "Rank2", OOCRanks[Rank2]);
						format(string, sizeof(string), "You have changed Rank 2's title to '%s'.", OOCRanks[Rank2]);
						SendClientMessage(playerid, WHITE, string);
					}
					case 3:
					{
						format(OOCRanks[Rank3], sizeof(OOCRanks[Rank3]), "%s", Name);
						dini_Set("Ranks.ini", "Rank3", OOCRanks[Rank3]);
						format(string, sizeof(string), "You have changed Rank 3's title to '%s'.", OOCRanks[Rank3]);
						SendClientMessage(playerid, WHITE, string);
					}
					case 4:
					{
						format(OOCRanks[Rank4], sizeof(OOCRanks[Rank4]), "%s", Name);
						dini_Set("Ranks.ini", "Rank4", OOCRanks[Rank4]);
						format(string, sizeof(string), "You have changed Rank 4's title to '%s'.", OOCRanks[Rank4]);
						SendClientMessage(playerid, WHITE, string);
					}
					case 5:
					{
						format(OOCRanks[Rank5], sizeof(OOCRanks[Rank5]), "%s", Name);
						dini_Set("Ranks.ini", "Rank5", OOCRanks[Rank5]);
						format(string, sizeof(string), "You have changed Rank 5's title to '%s'.", OOCRanks[Rank5]);
						SendClientMessage(playerid, WHITE, string);
					}
					case 6:
					{
						format(OOCRanks[Rank6], sizeof(OOCRanks[Rank6]), "%s", Name);
						dini_Set("Ranks.ini", "Rank6", OOCRanks[Rank6]);
						format(string, sizeof(string), "You have changed Rank 6's title to '%s'.", OOCRanks[Rank6]);
						SendClientMessage(playerid, WHITE, string);
					}
					case 7:
					{
						format(OOCRanks[Rank7], sizeof(OOCRanks[Rank7]), "%s", Name);
						dini_Set("Ranks.ini", "Rank7", OOCRanks[Rank7]);
						format(string, sizeof(string), "You have changed Rank 7's title to '%s'.", OOCRanks[Rank7]);
						SendClientMessage(playerid, WHITE, string);
					}
					default:
					{
						SendClientMessage(playerid, GREY, "SYNTAX: /changeranktitle [rank (1-7)] [new title]");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "Rank names must be longer than 1 character and shorter than 20 characters.");
			}
		}
	}
	return 1;
}

CMD:tempbanrecord(playerid, params[])
{
	new id;

	if(isnull(params) || Player[playerid][AdminLevel] < 2)
		id = playerid;
	else if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /tempbanrecord [id]");

	if(!IsPlayerConnected(id))
		return SendClientMessage(playerid, -1, "That player is not connected");

	new string[256], Cache:cache, row, count;
	SendClientMessage(playerid, WHITE, "------------------------------------------------------");
	format(string, sizeof(string), "Name: %s", GetName(id));
	SendClientMessage(playerid, WHITE, string);

	mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT * FROM WarnHistory WHERE playerSQLID = '%d'", Player[id][pSQL_ID]);
	cache = mysql_query(MYSQL_MAIN, string);
	count = cache_get_row_count();
	if(count == 0)
	{
		SendClientMessage(playerid, GREY, "No warn history found.");
	}
	else
	{
		new  warnedBy[25], TimeStamp[128], reason[128], sqlString[32];
		while(row < count)
		{
			if(cache_get_field_content_int(row, "WarnIsValid") == 1)
			{
				format(sqlString, sizeof(sqlString), "WarnSQL: %d | ", cache_get_field_content_int(row, "warnSQLID"));
				cache_get_field_content(row, "WarnTimestamp", TimeStamp, sizeof(TimeStamp));
				cache_get_field_content(row, "WarnReason", reason, sizeof(reason));
				cache_get_field_content(row, "WarnedBy", warnedBy, sizeof(warnedBy));
				format(string, sizeof(string), "%sDate: %s | Warned By: %s | Reason: %s | TempbanLevel at Time: %d", (Player[playerid][AdminLevel] > 1) ? (sqlString) : (""), TimeStamp, warnedBy, reason, cache_get_field_content_int(row, "TempbanLevel"));
				SendClientMessage(playerid, GREY, string);
			}
			row++;
		}
	}
	cache_delete(cache);
	SendClientMessage(playerid, WHITE, "------------------------------------------------------");
	return 1;
}

CMD:remotetempbanrecord(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new name[MAX_PLAYER_NAME];
	if(sscanf(params, "s[24]", name))
		return SendClientMessage(playerid, -1, "SYNTAX: /remotetempbanrecord [name]");


	if(!IsPlayerRegistered(name))
		return SendClientMessage(playerid, WHITE, "That player doesn't exist.");

	new string[256], Cache:cache, row, count;
	SendClientMessage(playerid, WHITE, "------------------------------------------------------");
	format(string, sizeof(string), "Name: %s", name);
	SendClientMessage(playerid, WHITE, string);
	mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT * FROM WarnHistory WHERE pName = '%e'", name);
	cache = mysql_query(MYSQL_MAIN, string);
	count = cache_get_row_count();

	if(count == 0)
	{
		SendClientMessage(playerid, GREY, "No warn history found.");
	}
	else
	{
		new  warnedBy[25], TimeStamp[128], reason[128];
		while(row < count)
		{
			if(cache_get_field_content_int(row, "WarnIsValid") == 1)
			{
				cache_get_field_content(row, "WarnTimestamp", TimeStamp, sizeof(TimeStamp));
				cache_get_field_content(row, "WarnReason", reason, sizeof(reason));
				cache_get_field_content(row, "WarnedBy", warnedBy, sizeof(warnedBy));
				format(string, sizeof(string), "Date: %s | Warned By: %s | Reason: %s | TempbanLevel at Time: %d", TimeStamp, warnedBy, reason, cache_get_field_content_int(row, "TempbanLevel"));
				SendClientMessage(playerid, GREY, string);
			}
			row++;
		}
	}
	cache_delete(cache);
	SendClientMessage(playerid, WHITE, "------------------------------------------------------");
	return 1;
}

CMD:playerwarns(playerid, params[])
{
	new id, string[128];
	if(Player[playerid][AdminLevel] > 0)
	{
		if(sscanf(params, "u", id))
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /playerwarns [playerid]");
		}
		else
		{
			if(IsPlayerConnectedEx(id))
			{
				SendClientMessage(playerid, WHITE, "------------------------------------------------------");
				format(string, sizeof(string), "Name: %s", GetName(id));
				SendClientMessage(playerid, WHITE, string);
				format(string, sizeof(string), "First Warning: %s", Player[id][Warning1]);
				SendClientMessage(playerid, GREY, string);
				format(string, sizeof(string), "Second Warning: %s", Player[id][Warning2]);
				SendClientMessage(playerid, GREY, string);
				format(string, sizeof(string), "Third Warning: %s", Player[id][Warning3]);
				SendClientMessage(playerid, GREY, string);
				SendClientMessage(playerid, WHITE, "------------------------------------------------------");
				format(string, sizeof(string), "Tempban Level: %d", Player[id][TempbanLevel]);
				SendClientMessage(playerid, GREY, string);
				SendClientMessage(playerid, WHITE, "------------------------------------------------------");

			}
		}
	}
	else
	{
		SendClientMessage(playerid, WHITE, "------------------------------------------------------");
		format(string, sizeof(string), "Name: %s", GetName(playerid));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "First Warning: %s", Player[playerid][Warning1]);
		SendClientMessage(playerid, GREY, string);
		format(string, sizeof(string), "Second Warning: %s", Player[playerid][Warning2]);
		SendClientMessage(playerid, GREY, string);
		format(string, sizeof(string), "Third Warning: %s", Player[playerid][Warning3]);
		SendClientMessage(playerid, GREY, string);
		SendClientMessage(playerid, WHITE, "------------------------------------------------------");
		format(string, sizeof(string), "Tempban Level: %d", Player[playerid][TempbanLevel]);
		SendClientMessage(playerid, GREY, string);
		SendClientMessage(playerid, WHITE, "------------------------------------------------------");
	}
	return 1;
}

CMD:remoteplayerwarns(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new name[MAX_PLAYER_NAME];
	if(sscanf(params, "s[24]", name))
		return SendClientMessage(playerid, -1, "SYNTAX: /remoteplayerwarns [name]");

	if(!IsPlayerRegistered(name))
		return SendClientMessage(playerid, WHITE, "That player doesn't exist.");


	new string[128];
	SendClientMessage(playerid, -1, "--------------------------------------------------------");
	format(string, sizeof(string), "Warning 1: %s", GetRemoteStringValue(name, "Warning1"));
	SendClientMessage(playerid, -1, string);
	format(string, sizeof(string), "Warning 2: %s", GetRemoteStringValue(name, "Warning2"));
	SendClientMessage(playerid, -1, string);
	format(string, sizeof(string), "Warning 3: %s", GetRemoteStringValue(name, "Warning3"));
	SendClientMessage(playerid, -1, string);
	SendClientMessage(playerid, -1, "--------------------------------------------------------");
	return 1;
}

stock GetPlayerNumTickets(name[], active = 0)
{
	new query[255];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM PoliceTickets WHERE offenderName = \'%e\' AND Active = \'%d\'", name, active);
	new Cache:cache = mysql_query(MYSQL_MAIN, query), count = cache_get_row_count();
	cache_delete(cache);
	return count;
}

stock GetPlayerNumCrimes(name[], active = 0)
{
	new query[255];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM PoliceCrimes WHERE criminalName = \'%e\' AND Active = \'%d\'", name, active);
	new Cache:cache = mysql_query(MYSQL_MAIN, query), count = cache_get_row_count();
	cache_delete(cache);
	return count;
}

stock GetPlayerCrimes(name[], startposition, active = 0, forplayer)
{
	new query[255], string[950], crime[128], officer[MAX_PLAYER_NAME + 1], time[128], sql;

	mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM PoliceCrimes WHERE criminalName = \'%e\' AND Active = \'%d\' AND SQLID > \'%d\'", name, active, startposition);
	new Cache:cache = mysql_query(MYSQL_MAIN, query), totalRows = cache_get_row_count();

	new count;
	for(new i = 0; i < totalRows; i++)
	{
		if(count == 6)
		{
			SetPVarInt(forplayer, "startPosition", sql);
			format(string, sizeof(string), "%sNext\n", string);
			break;
		}

		sql = cache_get_field_content_int(i, "SQLID");
		cache_get_field_content(i, "Crime", crime);
		cache_get_field_content(i, "arrestingOfficer", officer);
		cache_get_field_content(i, "timeGiven", time);

		format(string, sizeof(string), "%s%d | Crime: %s | Given by: %s\n", string, sql, crime, officer, time);
		count++;
	}
	cache_delete(cache);
	return string;
}

stock GetPlayerTickets(name[], startposition, active = 0, forplayer)
{
	new query[255], string[750], officer[MAX_PLAYER_NAME], sql, reason[128];

	mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM PoliceTickets WHERE offenderName = \'%e\' AND Active = \'%d\' AND SQLID > \'%d\'", name, active, startposition);
	new Cache:cache = mysql_query(MYSQL_MAIN, query), totalRows = cache_get_row_count();

	new count;
	for(new i = 0; i < totalRows; i++)
	{
		if(count == 6)
		{
			SetPVarInt(forplayer, "startPosition", sql);
			format(string, sizeof(string), "%sNext\n", string);
			break;
		}

		cache_get_field_content(i, "Offense", reason);
		cache_get_field_content(i, "officerName", officer);
		sql = cache_get_field_content_int(i, "SQLID");

		format(string, sizeof(string), "%s%d | Reason: %s | Given by: %s\n", string, sql, reason, officer);
		count++;
	}
	cache_delete(cache);
	return string;
}

stock GetPlayerOwedTicketsAmount(name[])
{
	new query[128], amount = 0;
	mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT ticketAmount FROM PoliceTickets WHERE offenderName = \'%e\' AND Active = \'1\'", name);
	new Cache:cache = mysql_query(MYSQL_MAIN, query);

	new rows = cache_get_row_count();
	if(rows == 0)
		return amount;

	for(new i; i < rows; i++)
	{
		amount += cache_get_field_content_int(i, "ticketAmount");
	}
	cache_delete(cache);
	return amount;
}

stock GetPlayerStrikes(name[], expired = 0)
{
	new query[128], amount = 0;
	mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT strikesIssued FROM PoliceTickets WHERE offenderName = \'%e\' AND StrikesExpired = \'%d\'", name, expired);
	new Cache:cache = mysql_query(MYSQL_MAIN, query);

	new rows = cache_get_row_count();
	if(rows == 0)
		return amount;

	for(new i; i < rows; i++)
	{
		amount += cache_get_field_content_int(i, "strikesIssued");
	}
	cache_delete(cache);
	return amount;
}

CMD:clearlicense(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 1)
		return 1;

	if(Player[playerid][GroupRank] < 8)
		return 1;

	new pid;
	if(sscanf(params, "u", pid))
		return SendClientMessage(playerid, -1, "SYNTAX: /clearlicense [playerid]");

	if(!IsPlayerConnected(pid))
		return SendClientMessage(playerid, -1, "That player isn't connected.");

	if(Player[pid][LicenseSuspended] < 1)
		return SendClientMessage(playerid, -1, "That player's license isn't suspended.");

	Player[pid][LicenseSuspended] = 0;

	new query[128];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE PoliceTickets SET StrikesExpired = \'1\' WHERE offenderName = \'%e\'", GetName(pid));
	mysql_query(MYSQL_MAIN, query, false);

	format(query, sizeof(query), "You have unsuspended %s's license and have caused all their strikes to expire.", GetName(pid));
	SendClientMessage(playerid, -1, query);

	format(query, sizeof(query), "[TICKET] %s has unsuspended %s's license.", GetName(playerid), GetName(pid));
	StatLog(query);
	return 1;
}

CMD:recordcheck(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 1)
		return 1;

	new name[MAX_PLAYER_NAME];

	if(sscanf(params, "s[25]", name))
		return SendClientMessage(playerid, -1, "SYNTAX: /recordcheck [player name] (No underscore needed, don't add extra spaces at the end)");

	for(new t = 0, j = strlen(name); t != j; t++){
		if(name[t] == ' ') {
			name[t] = '_';
			break;
		}
	}

	if(!IsPlayerRegistered(name))
		return SendClientMessage(playerid, -1, "That account does not exist.");

	new string[128];
	SetPVarString(playerid, "checkName", name);
	format(string, sizeof(string), "Tickets: %d\nActive Tickets: %s%d\nCrimes: %d\nActive Crimes: %s%d", GetPlayerNumTickets(name, 0), (GetPlayerNumTickets(name, 1) > 0 ? ("{FF0000}") : ("{FFFFFF}")), GetPlayerNumTickets(name, 1), GetPlayerNumCrimes(name, 0), (GetPlayerNumCrimes(name, 1) > 0 ? ("{FF0000}") : ("{FFFFFF}")), GetPlayerNumCrimes(name, 1));
	ShowPlayerDialog(playerid, LSPD_RECORD_CHECK, DIALOG_STYLE_LIST, "Record Check", string, "View", "Cancel");
	return 1;
}

stock IsPlayerOnPhone(playerid)
{
	if(Player[playerid][Calling] >= 0 || Player[playerid][CellphoneConsole] >= 0 || Player[playerid][CallingPayphone] > 0 || Player[playerid][OnPayphone] > 0 || Player[playerid][CallingTaxi] > 0 || Player[playerid][OnTaxiCall] >= 0)
		return 1;
	return 0;
}

command(hangup, playerid, params[])
{
	if(!IsPlayerOnPhone(playerid))
		return SendClientMessage(playerid, -1, "You're not on the phone!");

	if(CantUseRightNow(playerid))
		return SendClientMessage(playerid, -1, "You can't do that right now.");

	new onphoneto[128];
	GetPVarString(playerid, "OnPhoneTo", onphoneto, 128);
	Player[playerid][BeingCalled] = -1;
	Player[playerid][CallingPayphone] = 0;
	Player[playerid][OnPhoneTime] = 0;
	Player[playerid][Calling] = -1;
	Player[playerid][CallingTaxi] = 0;
	Player[playerid][OnTaxiCall] = -1;
	Player[playerid][CellphoneConsole] = -1;
	Player[playerid][OnPayphone] = 0;
	Player[playerid][NineOneOneStep] = 0;
	DeletePVar(playerid, "OnPhoneTo");
	RemovePlayerAttachedObject(playerid, 4);
	PlayerPlaySound(playerid, 6400, 0, 0, 0);

	SendClientMessage(playerid, WHITE, "You have terminated the current call.");

	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE)
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	TextDrawHideForPlayer(playerid, CellPhoneTextDraw);
	TextDrawHideForPlayer(playerid, CellPhoneTextDrawInVehicle);

	if(!strcmp(params, "droppedPhone", true))
	{
		SendClientMessage(playerid, -1, "The phone cable doesn't reach that far, so the call has been dropped.");
	}
	else if(!strcmp(params, "noAnswer", true))
	{
		SendClientMessage(playerid, -1, "Nobody has answered the phone, so the call has terminated.");
		foreach(Player, i)
		{
			if(GetPVarInt(i, "StashPhoneMusic") == 1)
			{
				DeletePVar(i, "StashPhoneMusic");
				StopAudioStreamForPlayer(i);
			}
		}
	}
	else if(!strcmp(params, "toggedDaPhone", true))
	{
		SendClientMessage(playerid, -1, "The call has been interrupted and cancelled.");
	}
	else if(!strcmp(params, "blankmsg", true))
	{
		SendClientMessage(playerid, WHITE, "You have terminated the current call.");
	}
	else if(!strcmp(params, "taxicallend", true))
	{
		// SendClientMessage(playerid, WHITE, "You have left the company HQ or company vehicle and lost the call.");
	}

	foreach(Player, i)
	{
		if(Player[i][CellphoneConsole] == playerid || Player[i][BeingCalled] == playerid)
		{
			Player[i][BeingCalled] = -1;
			Player[i][CallingPayphone] = 0;
			Player[i][OnPayphone] = 0;
			Player[i][OnPhoneTime] = 0;
			Player[i][OnTaxiCall] = -1;
			Player[i][CallingTaxi] = 0;
			Player[i][Calling] = -1;
			Player[i][CellphoneConsole] = -1;
			PlayerPlayNearbySoundEx(i, 1143, 6, true);
			if(!strcmp(params, "noAnswer", true))
				SendClientMessage(i, -1, "The ringing has stopped, you missed the call.");
			else if(strcmp(params, "toggedDaPhone", true))
				SendClientMessage(i, WHITE, "Your call has been terminated by the other party.");
			DeletePVar(i, "OnPhoneTo");
			RemovePlayerAttachedObject(i, 4);

			if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_USECELLPHONE)
				SetPlayerSpecialAction(i, SPECIAL_ACTION_STOPUSECELLPHONE);
			TextDrawHideForPlayer(i, CellPhoneTextDraw);
			TextDrawHideForPlayer(i, CellPhoneTextDrawInVehicle);
			break;
		}
	}

	return 1;
}

command(h, playerid, params[])
{
	return cmd_hangup(playerid, params);
}

/*command(contract, playerid, params[])
{
	new Reason[128], id, price, string[128];
	if(sscanf(params, "uds[128]", id, price, Reason))
		return SendClientMessage(playerid, GREY, "SYNTAX: /contract [playerid] [price] [reason]");

	if(strlen(Reason) < 1)
		return SendClientMessage(playerid, GREY, "SYNTAX: /contract [playerid] [price] [reason]");

	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, WHITE, "Player not connected or logged in.");

	if(Player[playerid][Money] < price)
		return SendClientMessage(playerid, WHITE, "You can't afford that.");

	if(price >= 10000000 || price < 5000)
		return SendClientMessage(playerid, WHITE, "The maximum you can place is $10,000,000 and can't be smaller than $5,000.");

	if(playerid == id)
		return SendClientMessage(playerid, WHITE, "You can't place a contract on yourself.");

	if(Player[id][ContractPrice] >= 1)
		return SendClientMessage(playerid, WHITE, "Unable to place contract.");

	new targetsmoney = Player[id][Money] + Player[id][BankMoney];
	if(targetsmoney < price)
		return SendClientMessage(playerid, -1, "Unable to place contract.");

	Player[playerid][PendingContract] = id;
	Player[playerid][PendingPrice] = price;
	format(Player[playerid][PendingReason], 255, "%s (from %s)", Reason, GetName(playerid));
	format(string, sizeof(string), "You have successfully requested a contract to be placed on %s, for %s.", GetName(id), PrettyMoney(price));
	SendClientMessage(playerid, -1, string);
	format(string, sizeof(string), "Your reason: %s", Reason);
	SendClientMessage(playerid, -1, string);
	format(string, sizeof(string), "%s has requested a hit on %s, for %s.", GetName(playerid), GetName(id), PrettyMoney(price));
	foreach(Player, i)
	{
		if(Groups[Player[i][Group]][CommandTypes] == 2)
			SendClientMessage(i, ANNOUNCEMENT, string);
	}

	// Player[playerid][Money] -= price;
	// format(Player[id][Contract], 255, "%s (from %s)", Reason, GetName(playerid));
	// Player[id][ContractPrice] = price;
	// format(string, sizeof(string), "You have successfullly placed a contract on %s, for $%d. For the reason: %s.", GetName(id), price, Reason);
	// SendClientMessage(playerid, WHITE, string);
	// format(string, sizeof(string), "A hit has become available on %s, for $%d.", GetName(id), price);

	return 1;
}*/

command(disbandfaction, playerid, params[])
{
	new confirm[8];
	if(sscanf(params, "s[8]", confirm))
	    return SendClientMessage(playerid, YELLOW, "Are you sure you want to disband the faction? Type /disbandfaction confirm to continue.");

	if(strcmp(confirm, "confirm", true))
	    return SendClientMessage(playerid, YELLOW, "Are you sure you want to disband the faction? Type /disbandfaction confirm to continue.");

	if(Player[playerid][Group] >= 1 && Player[playerid][GroupRank] >= 6)
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 1 && Player[playerid][GroupRank] != 10)
			return SendClientMessage(playerid, -1, "This command can only be used by the chief");

		if(Groups[Player[playerid][Group]][CommandTypes] == 9 && Player[playerid][GroupRank] != 10)
			return SendClientMessage(playerid, -1, "You msut be rank 10 to do this.");

		new second, grptemp = Player[playerid][Group];

		gettime(Groups[Player[playerid][Group]][DisbandHour], Groups[Player[playerid][Group]][DisbandMinute], second);
		getdate(Groups[Player[playerid][Group]][DisbandDay], Groups[Player[playerid][Group]][DisbandMonth], Groups[Player[playerid][Group]][DisbandYear]);

		foreach(Player, i)
		{
			if(Player[i][Group] == grptemp)
			{
				SendClientMessage(i, RED, "You have been kicked from the faction, reason: Disbandation.");
				Player[i][Group] = 0;
				Player[i][GroupRank] = 0;
			}
		}

		format(Groups[grptemp][GroupName], 255, "Nothing");
		Groups[grptemp][MemberCount] = 0;
	}
	return 1;
}

command(adisbandfaction, playerid, params[])
{
	new grptemp, string[128];
	if(sscanf(params, "d", grptemp))
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /adisbandfaction [id]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			if(grptemp >= 1 && grptemp < 20)
			{
				new second;

				gettime(Groups[Player[playerid][Group]][DisbandHour], Groups[Player[playerid][Group]][DisbandMinute], second);
				getdate(Groups[Player[playerid][Group]][DisbandDay], Groups[Player[playerid][Group]][DisbandMonth], Groups[Player[playerid][Group]][DisbandYear]);

				foreach(Player, i)
				{
					if(Player[i][Group] == grptemp)
					{
						SendClientMessage(i, ADMINORANGE, "You have been kicked from the faction, reason: Disbandation.");
						Player[i][Group] = 0;
						Player[i][GroupRank] = 0;
					}
				}
				format(string, sizeof(string), "You have disbanded faction %d (%s).", grptemp, Groups[grptemp][GroupName]);
				SendClientMessage(playerid, WHITE, string);
				format(Groups[grptemp][GroupName], 255, "Nothing");
				Groups[grptemp][MemberCount] = 0;
			}
		}
	}
	return 1;
}

stock LoadLSMDPaychecks()
{
	if(!fexist("Misc/LSMDPaychecks.ini"))
	{
		new file[24] = "Misc/LSMDPaychecks.ini";

		dini_Create(file);
		dini_IntSet(file, "Rank1", 100);
		dini_IntSet(file, "Rank2", 200);
		dini_IntSet(file, "Rank3", 250);
		dini_IntSet(file, "Rank4", 300);
		dini_IntSet(file, "Rank5", 350);
		dini_IntSet(file, "Rank6", 400);
		dini_IntSet(file, "Rank7", 450);
		dini_IntSet(file, "Rank8", 500);
		dini_IntSet(file, "Rank9", 550);
		dini_IntSet(file, "Rank10", 600);

		LSMDBonus[0] = 100;
		LSMDBonus[1] = 200;
		LSMDBonus[2] = 250;
		LSMDBonus[3] = 300;
		LSMDBonus[4] = 350;
		LSMDBonus[5] = 400;
		LSMDBonus[6] = 450;
		LSMDBonus[7] = 500;
		LSMDBonus[8] = 550;
		LSMDBonus[9] = 600;
	}
	else
	{
		new file[24] = "Misc/LSMDPaychecks.ini";

		LSMDBonus[0] = dini_Int(file, "Rank1");
		LSMDBonus[1] = dini_Int(file, "Rank2");
		LSMDBonus[2] = dini_Int(file, "Rank3");
		LSMDBonus[3] = dini_Int(file, "Rank4");
		LSMDBonus[4] = dini_Int(file, "Rank5");
		LSMDBonus[5] = dini_Int(file, "Rank6");
		LSMDBonus[6] = dini_Int(file, "Rank7");
		LSMDBonus[7] = dini_Int(file, "Rank8");
		LSMDBonus[8] = dini_Int(file, "Rank9");
		LSMDBonus[9] = dini_Int(file, "Rank10");
	}
	return 1;
}

stock LoadLSPDPaychecks()
{
	if(!fexist("Misc/LSPDPaychecks.ini"))
	{
		new file[24] = "Misc/LSPDPaychecks.ini";
		dini_Create(file);
		dini_IntSet(file, "Rank1", 100);
		dini_IntSet(file, "Rank2", 200);
		dini_IntSet(file, "Rank3", 250);
		dini_IntSet(file, "Rank4", 300);
		dini_IntSet(file, "Rank5", 350);
		dini_IntSet(file, "Rank6", 400);
		dini_IntSet(file, "Rank7", 450);
		dini_IntSet(file, "Rank8", 500);
		dini_IntSet(file, "Rank9", 550);
		dini_IntSet(file, "Rank10", 600);

		LSPDBonus[0] = 100;
		LSPDBonus[1] = 200;
		LSPDBonus[2] = 250;
		LSPDBonus[3] = 300;
		LSPDBonus[4] = 350;
		LSPDBonus[5] = 400;
		LSPDBonus[6] = 450;
		LSPDBonus[7] = 500;
		LSPDBonus[8] = 550;
		LSPDBonus[9] = 600;
	}
	else
	{
		new file[24] = "Misc/LSPDPaychecks.ini";

		LSPDBonus[0] = dini_Int(file, "Rank1");
		LSPDBonus[1] = dini_Int(file, "Rank2");
		LSPDBonus[2] = dini_Int(file, "Rank3");
		LSPDBonus[3] = dini_Int(file, "Rank4");
		LSPDBonus[4] = dini_Int(file, "Rank5");
		LSPDBonus[5] = dini_Int(file, "Rank6");
		LSPDBonus[6] = dini_Int(file, "Rank7");
		LSPDBonus[7] = dini_Int(file, "Rank8");
		LSPDBonus[8] = dini_Int(file, "Rank9");
		LSPDBonus[9] = dini_Int(file, "Rank10");
	}
	return 1;
}

stock LoadMediaPaychecks()
{
	if(!fexist("Misc/MediaPaychecks.ini"))
	{
		new file[24] = "Misc/MediaPaychecks.ini";
		dini_Create(file);
		dini_IntSet(file, "Rank1", 100);
		dini_IntSet(file, "Rank2", 200);
		dini_IntSet(file, "Rank3", 250);
		dini_IntSet(file, "Rank4", 300);
		dini_IntSet(file, "Rank5", 350);
		dini_IntSet(file, "Rank6", 400);
		dini_IntSet(file, "Rank7", 450);
		dini_IntSet(file, "Rank8", 500);
		dini_IntSet(file, "Rank9", 550);
		dini_IntSet(file, "Rank10", 600);

		MediaBonus[0] = 100;
		MediaBonus[1] = 200;
		MediaBonus[2] = 250;
		MediaBonus[3] = 300;
		MediaBonus[4] = 350;
		MediaBonus[5] = 400;
		MediaBonus[6] = 450;
		MediaBonus[7] = 500;
		MediaBonus[8] = 550;
		MediaBonus[9] = 600;
	}
	else
	{
		new file[24] = "Misc/MediaPaychecks.ini";

		MediaBonus[0] = dini_Int(file, "Rank1");
		MediaBonus[1] = dini_Int(file, "Rank2");
		MediaBonus[2] = dini_Int(file, "Rank3");
		MediaBonus[3] = dini_Int(file, "Rank4");
		MediaBonus[4] = dini_Int(file, "Rank5");
		MediaBonus[5] = dini_Int(file, "Rank6");
		MediaBonus[6] = dini_Int(file, "Rank7");
		MediaBonus[7] = dini_Int(file, "Rank8");
		MediaBonus[8] = dini_Int(file, "Rank9");
		MediaBonus[9] = dini_Int(file, "Rank10");
	}
	return 1;
}

stock LoadCouncilPaychecks()
{
	if(!fexist("Misc/CouncilPaychecks.ini"))
	{
		new file[32] = "Misc/CouncilPaychecks.ini";
		dini_Create(file);
		dini_IntSet(file, "Rank1", 100);
		dini_IntSet(file, "Rank2", 200);
		dini_IntSet(file, "Rank3", 250);
		dini_IntSet(file, "Rank4", 300);
		dini_IntSet(file, "Rank5", 350);
		dini_IntSet(file, "Rank6", 400);
		dini_IntSet(file, "Rank7", 450);
		dini_IntSet(file, "Rank8", 500);
		dini_IntSet(file, "Rank9", 550);
		dini_IntSet(file, "Rank10", 600);

		CouncilBonus[0] = 100;
		CouncilBonus[1] = 200;
		CouncilBonus[2] = 250;
		CouncilBonus[3] = 300;
		CouncilBonus[4] = 350;
		CouncilBonus[5] = 400;
		CouncilBonus[6] = 450;
		CouncilBonus[7] = 500;
		CouncilBonus[8] = 550;
		CouncilBonus[9] = 600;
	}
	else
	{
		new file[32] = "Misc/CouncilPaychecks.ini";

		CouncilBonus[0] = dini_Int(file, "Rank1");
		CouncilBonus[1] = dini_Int(file, "Rank2");
		CouncilBonus[2] = dini_Int(file, "Rank3");
		CouncilBonus[3] = dini_Int(file, "Rank4");
		CouncilBonus[4] = dini_Int(file, "Rank5");
		CouncilBonus[5] = dini_Int(file, "Rank6");
		CouncilBonus[6] = dini_Int(file, "Rank7");
		CouncilBonus[7] = dini_Int(file, "Rank8");
		CouncilBonus[8] = dini_Int(file, "Rank9");
		CouncilBonus[9] = dini_Int(file, "Rank10");
	}
	return 1;
}

CMD:togglefuelpayment(playerid, params[])
{
	if(Player[playerid][Group] == 0)
		return 1;
	
	if(Groups[Player[playerid][Group]][CommandTypes] == 0)
		return 1;
		
	if(Player[playerid][GroupRank] < 7)
		return 1;
		
	new string[128];
	switch(Groups[Player[playerid][Group]][PayForFuel])
	{
		case 0:
		{
			Groups[Player[playerid][Group]][PayForFuel] = 1;
			SendClientMessage(playerid, WHITE, "You have turned off paying for faction vehicle fuel from the safe.");
			format(string, sizeof(string), "%s has turned off paying for faction vehicle fuel from the safe.", GetName(playerid));
			GroupMessage(Player[playerid][Group], ANNOUNCEMENT, string);
		}	
		case 1:
		{
			Groups[Player[playerid][Group]][PayForFuel] = 0;
			SendClientMessage(playerid, WHITE, "You have turned on paying for faction vehicle fuel from the safe.");
			format(string, sizeof(string), "%s has turned on paying for faction vehicle fuel from the safe.", GetName(playerid));
			GroupMessage(Player[playerid][Group], ANNOUNCEMENT, string);
		}
	}
	return 1;
}

CMD:editpaychecks(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 1 && Groups[Player[playerid][Group]][CommandTypes] != 3 && Groups[Player[playerid][Group]][CommandTypes] != 4 && Groups[Player[playerid][Group]][CommandTypes] != 5)
		return 1;

	if(Player[playerid][GroupRank] < 10)
		return 1;

	new rank, amount, string[128];
	if(sscanf(params, "dd", rank, amount))
		return SendClientMessage(playerid, GREY, "SYNTAX: /editpaychecks [rank] [amount]");

	if(rank < 1 || rank > 10)
		return SendClientMessage(playerid, -1, "Invalid rank. (1-10)");

	if(amount < 50 || amount > 10000)
		return SendClientMessage(playerid, -1, "Invalid amount. (50 - 7500)");

	switch(Groups[Player[playerid][Group]][CommandTypes])
	{
		case 1:
		{
			new file[24] = "Misc/LSPDPaychecks.ini";
			switch(rank)
			{
				case 1: dini_IntSet(file, "Rank1", amount);
				case 2:	dini_IntSet(file, "Rank2", amount);
				case 3:	dini_IntSet(file, "Rank3", amount);
				case 4:	dini_IntSet(file, "Rank4", amount);
				case 5:	dini_IntSet(file, "Rank5", amount);
				case 6:	dini_IntSet(file, "Rank6", amount);
				case 7:	dini_IntSet(file, "Rank7", amount);
				case 8:	dini_IntSet(file, "Rank8", amount);
				case 9:	dini_IntSet(file, "Rank9", amount);
				case 10: dini_IntSet(file, "Rank10", amount);
			}

			rank = rank - 1;
			LSPDBonus[rank] = amount;
			format(string, sizeof(string), "[LSPD] %s has changed the paycheck bonus of rank %d to $%d", GetName(playerid), rank+1, amount);
			StatLog(string);
		}
		case 3:
		{
			new file[24] = "Misc/LSMDPaychecks.ini";
			switch(rank)
			{
				case 1: dini_IntSet(file, "Rank1", amount);
				case 2:	dini_IntSet(file, "Rank2", amount);
				case 3:	dini_IntSet(file, "Rank3", amount);
				case 4:	dini_IntSet(file, "Rank4", amount);
				case 5:	dini_IntSet(file, "Rank5", amount);
				case 6:	dini_IntSet(file, "Rank6", amount);
				case 7:	dini_IntSet(file, "Rank7", amount);
				case 8:	dini_IntSet(file, "Rank8", amount);
				case 9:	dini_IntSet(file, "Rank9", amount);
				case 10: dini_IntSet(file, "Rank10", amount);
			}
			rank = rank - 1;
			LSMDBonus[rank] = amount;
			format(string, sizeof(string), "[LSMD] %s has changed the paycheck bonus of rank %d to $%d", GetName(playerid), rank+1, amount);
			StatLog(string);
		}
		case 4:
		{
			new file[32] = "Misc/CouncilPaychecks.ini";
			switch(rank)
			{
				case 1: dini_IntSet(file, "Rank1", amount);
				case 2:	dini_IntSet(file, "Rank2", amount);
				case 3:	dini_IntSet(file, "Rank3", amount);
				case 4:	dini_IntSet(file, "Rank4", amount);
				case 5:	dini_IntSet(file, "Rank5", amount);
				case 6:	dini_IntSet(file, "Rank6", amount);
				case 7:	dini_IntSet(file, "Rank7", amount);
				case 8:	dini_IntSet(file, "Rank8", amount);
				case 9:	dini_IntSet(file, "Rank9", amount);
				case 10: dini_IntSet(file, "Rank10", amount);
			}
			rank = rank - 1;
			CouncilBonus[rank] = amount;
			format(string, sizeof(string), "[COUNCIL] %s has changed the paycheck bonus of rank %d to $%d.", GetName(playerid), rank + 1, amount);
			StatLog(string);
		}
		case 5:
		{
			new file[24] = "Misc/MediaPaychecks.ini";
			switch(rank)
			{
				case 1: dini_IntSet(file, "Rank1", amount);
				case 2:	dini_IntSet(file, "Rank2", amount);
				case 3:	dini_IntSet(file, "Rank3", amount);
				case 4:	dini_IntSet(file, "Rank4", amount);
				case 5:	dini_IntSet(file, "Rank5", amount);
				case 6:	dini_IntSet(file, "Rank6", amount);
				case 7:	dini_IntSet(file, "Rank7", amount);
				case 8:	dini_IntSet(file, "Rank8", amount);
				case 9:	dini_IntSet(file, "Rank9", amount);
				case 10: dini_IntSet(file, "Rank10", amount);
			}

			rank = rank - 1;
			MediaBonus[rank] = amount;
			format(string, sizeof(string), "[MEDIA] %s has changed the paycheck bonus of rank %d to $%d", GetName(playerid), rank+1, amount);
			StatLog(string);
		}
	}
	format(string, sizeof(string), "You have changed rank %d's bonus to $%d per paycheck.", rank+1, amount);
	SendClientMessage(playerid, WHITE, string);
	return 1;
}

command(gov, playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 1 && Groups[Player[playerid][Group]][CommandTypes] != 4)
		return 1;

	if(Groups[Player[playerid][Group]][CommandTypes] == 4 && Player[playerid][GroupRank] < 7)
		return 1;

	new message[180], string[255];

	if(sscanf(params, "s[180]", message))
		return SendClientMessage(playerid, GREY, "SYNTAX: /gov [message]");

	if(Groups[Player[playerid][Group]][CommandTypes] == 1 && Player[playerid][GroupRank] < 5)
		return SendClientMessage(playerid, WHITE, "You do not have sufficient ranking to use this command!");

	new gstring[10];
	if(Groups[Player[playerid][Group]][CommandTypes] == 1)
		format(gstring, sizeof(gstring), "LSPD");
	else
		format(gstring, sizeof(gstring), "Mayor");

	SendClientMessageToAll(GREY, "----------------------------- [Government Notice] ----------------------------- ");
	//01234: 012345678901234567890123 says: 89 characters remaining
	new splitpos = 110 - (9+strlen(gstring)+strlen(GetName(playerid)));
	if(strlen(message) > splitpos)
	{
		new str1[89], str2[89];
		strsplit(message, str1, str2, splitpos);
		// strmid(str1, message, 0, 88);
		// strmid(str2, message, 88, 177);
		format(string, sizeof(string), "%s: %s says: %s", gstring, GetNameEx(playerid), str1);
		SendClientMessageToAll(WHITE, string);
		format(string, sizeof(string), "%s: %s says: %s", gstring, GetNameEx(playerid), str2);
		SendClientMessageToAll(WHITE, string);
	}
	else
	{
		format(string, sizeof(string), "%s: %s says: %s", gstring, GetNameEx(playerid), message);
		SendClientMessageToAll(WHITE, string);
	}

	SendClientMessageToAll(GREY, "----------------------------- [Government Notice] ----------------------------- ");
	format(string, sizeof(string), "%s: %s says: %s", gstring, GetNameEx(playerid), message);
	ICChatLog(string);

	return 1;
}

command(departments, playerid, params[])
{
	new Message[128], Name[MAX_PLAYER_NAME], string[128];
	if(sscanf(params, "s[128]", Message))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /(dep)artments [message]");
	}
	else
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 3)
		{
			if(Player[playerid][Mask] == 1)
				format(Name, sizeof(Name), Player[playerid][NormalName]);
			else
				format(Name, sizeof(Name), GetNameEx(playerid));

			if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 3)
			{
				switch(Player[playerid][GroupRank])
				{
					case 0: format(string, sizeof(string), "[Dept Radio] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName0], Name, Player[playerid][PDBadge] ,Message);
					case 1: format(string, sizeof(string), "[Dept Radio] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName1], Name, Player[playerid][PDBadge] ,Message);
					case 2:	format(string, sizeof(string), "[Dept Radio] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName2], Name, Player[playerid][PDBadge] ,Message);
					case 3: format(string, sizeof(string), "[Dept Radio] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName3], Name, Player[playerid][PDBadge] ,Message);
					case 4:	format(string, sizeof(string), "[Dept Radio] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName4], Name, Player[playerid][PDBadge] ,Message);
					case 5:	format(string, sizeof(string), "[Dept Radio] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName5], Name, Player[playerid][PDBadge] ,Message);
					case 6: format(string, sizeof(string), "[Dept Radio] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName6], Name, Player[playerid][PDBadge] ,Message);
					case 7: format(string, sizeof(string), "[Dept Radio] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName7], Name, Player[playerid][PDBadge] ,Message);
					case 8: format(string, sizeof(string), "[Dept Radio] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName8], Name, Player[playerid][PDBadge] ,Message);
					case 9: format(string, sizeof(string), "[Dept Radio] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName9], Name, Player[playerid][PDBadge] , Message);
					case 10: format(string, sizeof(string), "[Dept Radio] %s %s #%d says: %s", Groups[Player[playerid][Group]][RankName10], Name, Player[playerid][PDBadge] , Message);
					default: format(string, sizeof(string), "ERROR! %s has used /d, but they're not a valid rank!", Name);
				}
			}
			else
			{
				switch(Player[playerid][GroupRank])
				{
					case 0: format(string, sizeof(string), "[Dept Radio] %s %s says: %s", Groups[Player[playerid][Group]][RankName0], Name, Message);
					case 1: format(string, sizeof(string), "[Dept Radio] %s %s says: %s", Groups[Player[playerid][Group]][RankName1], Name, Message);
					case 2:	format(string, sizeof(string), "[Dept Radio] %s %s says: %s", Groups[Player[playerid][Group]][RankName2], Name, Message);
					case 3: format(string, sizeof(string), "[Dept Radio] %s %s says: %s", Groups[Player[playerid][Group]][RankName3], Name, Message);
					case 4:	format(string, sizeof(string), "[Dept Radio] %s %s says: %s", Groups[Player[playerid][Group]][RankName4], Name, Message);
					case 5:	format(string, sizeof(string), "[Dept Radio] %s %s says: %s", Groups[Player[playerid][Group]][RankName5], Name, Message);
					case 6: format(string, sizeof(string), "[Dept Radio] %s %s says: %s", Groups[Player[playerid][Group]][RankName6], Name, Message);
					default: format(string, sizeof(string), "ERROR! %s has used /d, but they're not a valid rank!", Name);
				}
			}

			for(new i = 0; i < MAX_GROUPS; i++)
			{
				if(Groups[i][CommandTypes] == 1 || Groups[i][CommandTypes] == 3)
				{		
					LiteralGroupMessage(i, DEPARTMENT_CHAT, string, 1);
				}
			}

			format(string, sizeof(string), "[Dept Radio] %s says: %s", Name, Message);
			NearByMessage(playerid, GREY, string);

			GroupChatLog(string);
		}
	}
	return 1;
}

command(dep, playerid, params[])
return cmd_departments(playerid, params);

CMD:as(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new string[128], range;
	if(sscanf(params, "ds[128]", range, string))
		return SendClientMessage(playerid, -1, "SYNTAX: /as [range] [message]");

	format(string, sizeof(string), "(( Admin %s: %s ))", Player[playerid][AdminName], string);
	NearByMessageEx(playerid, YELLOW, string, range);
	OOCChatLog(string);
	return 1;
}

command(megaphone, playerid, params[]){
	new message[128], string[128];
	if(sscanf(params, "s[128]", message))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /(m)egaphone [message]");
	}
	else
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 3 || Groups[Player[playerid][Group]][CommandTypes] == 2)
		{
			if(Player[playerid][InRally] > 0)
				return SendClientMessage(playerid, WHITE, "You can't do that right now!");
			
			new sql = GetVSQLID(GetPlayerVehicleID(playerid)), idx = GetVIndex(sql);
			
			if(!IsPlayerInAnyVehicle(playerid)) 
			{
				sql = GetNearestCarSQL(playerid), idx = GetVIndex(sql);
				
				if(idx == -1 || sql == -1)
					return SendClientMessage(playerid, WHITE, "You are not near/inside a vehicle with a megaphone.");
				
				new Float:vPos[6];
				GetVehicleRelativePos(Veh[idx][Link], vPos[0], vPos[1], vPos[2], 1.0, 0.5, 0.0);
				GetVehicleRelativePos(Veh[idx][Link], vPos[3], vPos[4], vPos[5], -1.0, 0.5, 0.0);
				
				if(!IsPlayerInRangeOfPoint(playerid, 1.0, vPos[0], vPos[1], vPos[2]) && !IsPlayerInRangeOfPoint(playerid, 3.5, vPos[3], vPos[4], vPos[5]))
					return SendClientMessage(playerid, WHITE, "You must be near the front driver/passenger door to use the megaphone.");
				
				if(Groups[Veh[idx][Group]][CommandTypes] != 1 && Groups[Veh[idx][Group]][CommandTypes] != 3 && Groups[Veh[idx][Group]][CommandTypes] != 2)
					return SendClientMessage(playerid, WHITE, "This vehicle is not equiped with a megaphone.");
			}
			else if(idx == -1 || sql == -1 || (Groups[Veh[idx][Group]][CommandTypes] != 1 && Groups[Veh[idx][Group]][CommandTypes] != 3 && Groups[Veh[idx][Group]][CommandTypes] != 2))
				return SendClientMessage(playerid, -1, "You can't use that in this vehicle.");
			
			#if defined MTG_PLAGUE
			if(Player[playerid][VirusCount] >= PLAGUE_SPEECH_MIN)
				format(message, strlen(message) + 1, "%s", MixUpSentence(message, Player[playerid][VirusCount], strlen(message) + 1));
			#endif
			format(string, sizeof(string), "[Megaphone] %s: %s", GetNameEx(playerid), message);
			NearByMessageEx(playerid, 0xEDED3BFF, string, 50);
			ICChatLog(string);

			for(new h; h < SpawnedHouses; h ++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 35, Houses[h][hExteriorX], Houses[h][hExteriorY], Houses[h][hExteriorZ]))
				{
					new Float:range = GetPlayerDistanceFromPoint(playerid, Houses[h][hExteriorX], Houses[h][hExteriorY], Houses[h][hExteriorZ]);
					range = 35.0 - range;

					foreach(Player, i)
					{
						if(IsPlayerInRangeOfPoint(i, range, Houses[h][hInteriorX], Houses[h][hInteriorY], Houses[h][hInteriorZ]) && Player[i][InHouse] == h)
							SendClientMessage(i, 0xEDED3BFF, string);
					}
				}
			}

			for(new b; b < SpawnedBusinesses; b ++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 35, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ]))
				{
					new Float: range = GetPlayerDistanceFromPoint(playerid, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ]);
					range = 35.0 - range;

					foreach(Player, i)
					{
						if(IsPlayerInRangeOfPoint(i, range, Businesses[b][bInteriorX], Businesses[b][bInteriorY], Businesses[b][bInteriorZ]) && Player[i][InBusiness] == b)
							SendClientMessage(i, 0xEDED3BFF, string);
					}
				}
			}

			for(new g; g < SpawnedGroups; g ++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 35, Groups[g][HQExteriorX], Groups[g][HQExteriorY], Groups[g][HQExteriorZ]))
				{
					new Float: range = GetPlayerDistanceFromPoint(playerid, Groups[g][HQExteriorX], Groups[g][HQExteriorY], Groups[g][HQExteriorZ]);
					range = 35.0 - range;

					foreach(Player, i)
					{
						if(IsPlayerInRangeOfPoint(i, range, Groups[g][HQInteriorX], Groups[g][HQInteriorY], Groups[g][HQInteriorZ]) && Player[i][InGroupHQ] == g)
							SendClientMessage(i, 0xEDED3BFF, string);
					}
				}
			}
			foreach(new g : Garage)
			{
				if(IsPlayerInRangeOfPoint(playerid, 35, Garages[g][ExtPos][0], Garages[g][ExtPos][1], Garages[g][ExtPos][2]))
				{
					new Float: range = GetPlayerDistanceFromPoint(playerid, Garages[g][ExtPos][0], Garages[g][ExtPos][1], Garages[g][ExtPos][2]);
					range = 35.0 - range;
					foreach(Player, i)
					{
						if(IsPlayerInRangeOfPoint(i, range, Garages[g][IntPos][0], Garages[g][IntPos][1], Garages[g][IntPos][2]) && Player[i][InGarage] == g)
							SendClientMessage(i, 0xEDED3BFF, string);
					}
				}
			}
		}
		else
		{
			SendClientMessage(playerid, WHITE, "You're not a LEO/medic.");
		}
	}
	return 1;
}

command(m, playerid, params[])
{
	if(GetPVarInt(playerid, "ShortCMDS") == 0)
		return cmd_megaphone(playerid, params);
	return SendClientMessage(playerid, -1, "ShortCMDS are disabled, you must use /megaphone");
}

command(travelannouncement, playerid, params[])
{
	new message[128], string[128];
	if(sscanf(params, "s[128]", message))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /travelannouncement [message]");
	}
	else
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 11 && Player[playerid][GroupRank] >= 5)
		{
			format(string, sizeof(string), "Travel Announcement from %s: %s", GetNameEx(playerid), message);
			SendClientMessageToAll(GREEN, string);
			ICChatLog(string);
		}
	}
	return 1;
}

CMD:s(playerid, params[])
{
	if(GetPVarInt(playerid, "ShortCMDS") == 0)
		return cmd_shout(playerid, params);
	else
	{
		SendClientMessage(playerid, -1, "ShortCMDS are disabled, you must use /shout");
		return 1;
	}
}

command(shout, playerid, params[])
{
	new message[128], string[128];
	if(sscanf(params, "s[128]", message))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /(s)hout [message]");
	}
	else
	{
		if(Player[playerid][PrisonID] == 1)
		{
			SendClientMessage(playerid, WHITE, "You may not speak ICly whilst you're in OOC prison.");
		}
		else
		{
			if(Player[playerid][Gagged] >= 1)
			{
				SendClientMessage(playerid, WHITE, "You're currently unable to speak ICly as you're gagged.");
			}
			else
			{
				#if defined MTG_PLAGUE
				if(Player[playerid][VirusCount] >= PLAGUE_SPEECH_MIN)
					format(message, strlen(message) + 1, "%s", MixUpSentence(message, Player[playerid][VirusCount], strlen(message) + 1));
				#endif
				format(string, sizeof(string), "%s shouts: %s!", GetNameEx(playerid), message);
				NearByMessageEx(playerid, WHITE, string, 25.0);
				ICChatLog(string);
				if(Player[playerid][InGarage] == 0)
				{
					foreach(new i : Garage)
					{
						if(IsPlayerInRangeOfPoint(playerid, 25, Garages[i][ExtPos][0], Garages[i][ExtPos][1], Garages[i][ExtPos][2]))
						{
							new Float:range = GetPlayerDistanceFromPoint(playerid, Garages[i][ExtPos][0], Garages[i][ExtPos][1], Garages[i][ExtPos][2]);
							range = 25 - range;
							foreach(Player, p)
							{
								if(Player[p][InGarage] == i)
								{
									if(IsPlayerInRangeOfPoint(p, range, Garages[i][IntPos][0], Garages[i][IntPos][1], Garages[i][IntPos][2]))
										SendClientMessage(p, -1, string);
								}
							}
						}
						else if(IsPlayerInRangeOfPoint(playerid, 25, Garages[i][pExtPos][0], Garages[i][pExtPos][1], Garages[i][pExtPos][2]))
						{
							new Float:range = GetPlayerDistanceFromPoint(playerid, Garages[i][pExtPos][0], Garages[i][pExtPos][1], Garages[i][pExtPos][2]);
							range = 25 - range;
							foreach(Player, p)
							{
								if(Player[p][InGarage] == i)
								{
									if(IsPlayerInRangeOfPoint(p, range, Garages[i][pIntPos][0], Garages[i][pIntPos][1], Garages[i][pIntPos][2]))
										SendClientMessage(p, -1, string);
								}
							}
						}
					}
				}
				else
				{
					new id = Player[playerid][InGarage];
					if(id != -1)
					{
						if(IsPlayerInRangeOfPoint(playerid, 25, Garages[id][IntPos][0], Garages[id][IntPos][1], Garages[id][IntPos][2]))
						{
							new Float:range = GetPlayerDistanceFromPoint(playerid, Garages[id][IntPos][0], Garages[id][IntPos][1], Garages[id][IntPos][2]);
							range = 25 - range;
							foreach(Player, i)
							{
								if(Player[i][InHouse] == Player[playerid][InHouse])
									continue;

								if(IsPlayerInRangeOfPoint(i, range, Garages[id][ExtPos][0], Garages[id][ExtPos][1], Garages[id][ExtPos][2]))
									SendClientMessage(i, -1, string);
							}
						}
					}
				}
				if(Player[playerid][InHouse] == 0)
				{
					// new house = NearestHouse(playerid);
					for(new x; x < MAX_HOUSES; x++)
					{
						if(IsPlayerInRangeOfPoint(playerid, 25, Houses[x][hExteriorX], Houses[x][hExteriorY], Houses[x][hExteriorZ]))
						{
							new Float:range = GetPlayerDistanceFromPoint(playerid, Houses[x][hExteriorX], Houses[x][hExteriorY], Houses[x][hExteriorZ]);
							range = 25 - range;
							foreach(Player, i)
							{
								if(Player[i][InHouse] == x)
								{
									if(!IsPlayerInRangeOfPoint(i, range, Houses[x][hInteriorX], Houses[x][hInteriorY], Houses[x][hInteriorZ]))
										continue;

									SendClientMessage(i, -1, string);
								}
							}
						}
					}
				}
				else
				{
					if(IsPlayerInRangeOfPoint(playerid, 25, Houses[Player[playerid][InHouse]][hInteriorX], Houses[Player[playerid][InHouse]][hInteriorY], Houses[Player[playerid][InHouse]][hInteriorZ]))
					{
						new Float:range = GetPlayerDistanceFromPoint(playerid, Houses[Player[playerid][InHouse]][hInteriorX], Houses[Player[playerid][InHouse]][hInteriorY], Houses[Player[playerid][InHouse]][hInteriorZ]);
						range = 25 - range;
						foreach(Player, i)
						{
							if(Player[i][InHouse] == Player[playerid][InHouse])
								continue;

							if(!IsPlayerInRangeOfPoint(i, range, Houses[Player[playerid][InHouse]][hExteriorX], Houses[Player[playerid][InHouse]][hExteriorY], Houses[Player[playerid][InHouse]][hExteriorZ]))
								continue;

							SendClientMessage(i, -1, string);
						}
					}
				}
				if(Businesses[Player[playerid][InBusiness]][bType] == 19 && Player[playerid][InHotelRoom] == -1)
				{
					new id = GetClosestHotelRoom(playerid);
					if(IsPlayerInRangeOfPoint(playerid, 10, Hotels[id][hExtPos][0], Hotels[id][hExtPos][1], Hotels[id][hExtPos][2]))
					{
						new Float:range = GetPlayerDistanceFromPoint(playerid,  Hotels[id][hExtPos][0], Hotels[id][hExtPos][1], Hotels[id][hExtPos][2]);
						range = 25 - range;
						foreach(Player, i)
						{
							if(Player[i][InHotelRoom] == id)
							{
								if(!IsPlayerInRangeOfPoint(i, range, Hotels[id][hIntPos][0], Hotels[id][hIntPos][1], Hotels[id][hIntPos][2]))
									continue;

								SendClientMessage(i, -1, string);
							}
						}
					}
				}
				else if(Businesses[Player[playerid][InBusiness]][bType] == 19 && Player[playerid][InHotelRoom] > -1)
				{
					new id = Player[playerid][InHotelRoom];
					if(IsPlayerInRangeOfPoint(playerid, 25, Hotels[id][hIntPos][0], Hotels[id][hIntPos][1], Hotels[id][hIntPos][2]))
					{
						new Float:range = GetPlayerDistanceFromPoint(playerid, Hotels[id][hIntPos][0], Hotels[id][hIntPos][1], Hotels[id][hIntPos][2]);
						range = 25 - range;
						foreach(Player, i)
						{
							if(!IsPlayerInRangeOfPoint(i, range, Hotels[id][hExtPos][0], Hotels[id][hExtPos][1], Hotels[id][hExtPos][2]))
								continue;

							SendClientMessage(i, -1, string);
						}
					}
				}
			}
		}
	}
	return 1;
}

command(spotlight, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		if(Player[playerid][AdminLevel] >= 3)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /spotlight [playerid]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 3)
		{
			if(IsPlayerConnectedEx(id))
			{
				format(string, sizeof(string), "You have set %s (ID: %d) as the Spotlight player.", GetName(id), id);
				SendClientMessage(playerid, WHITE, string);
				Spotlight = id;
				format(string, sizeof(string), "%s has been set as the Spotlight Player by %s!", GetName(id), GetName(playerid));
				SendClientMessageToAll(ANNOUNCEMENT, string);
			}
			else
			{
				SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
			}
		}
	}
	return 1;
}

command(low, playerid, params[])
{
	new message[128], string[128];
	if(sscanf(params, "s[128]", message))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /low [message]");
	}
	else
	{
		if(Player[playerid][PrisonID] == 1)
		{
			SendClientMessage(playerid, WHITE, "You may not use this channel right now.");
		}
		else
		{
			if(Player[playerid][Gagged] >= 1)
			{
				SendClientMessage(playerid, WHITE, "You're currently unable to speak ICly as you're gagged.");
			}
			else
			{
				#if defined MTG_PLAGUE
				if(Player[playerid][VirusCount] >= PLAGUE_SPEECH_MIN)
					format(message, strlen(message) + 1, "%s", MixUpSentence(message, Player[playerid][VirusCount], strlen(message) + 1));
				#endif
				format(string, sizeof(string), "%s whispers: %s", GetNameEx(playerid), message);
				NearByMessageEx(playerid, WHITE, string, 2.0);
				ICChatLog(string);
			}
		}
	}
	return 1;
}

command(supplystatus, playerid, params[])
{
	if(!PlayerHasBusinessKey(playerid, Player[playerid][InBusiness]) || Player[playerid][InBusiness] == 0)
		return SendClientMessage(playerid, -1, "You must be inside your business to do this.");

	if(Businesses[Player[playerid][InBusiness]][bSupplyStatus] == 1)
	{
		Businesses[Player[playerid][InBusiness]][bSupplyStatus] = 0;
		SendClientMessage(playerid, WHITE, "The business is now accepting supplies again.");
	}
	else
	{
		Businesses[Player[playerid][InBusiness]][bSupplyStatus] = 1;
		SendClientMessage(playerid, WHITE, "The business is no longer accepting supplies.");
	}
	return 1;
}

CMD:trashstatus(playerid, params[])
{
	if(!PlayerHasBusinessKey(playerid, Player[playerid][InBusiness]) || Player[playerid][InBusiness] == 0)
		return SendClientMessage(playerid, -1, "You must be inside your business to do this.");
	new id = Player[playerid][InBusiness];
	switch(Businesses[id][BusinessTrashStatus])
	{
		case 0:
		{
			Businesses[id][BusinessTrashStatus] = 1;
			SendClientMessage(playerid, WHITE, "The business is no longer having its garbage picked up.");
		}
		case 1:
		{
			Businesses[id][BusinessTrashStatus] = 0;
			SendClientMessage(playerid, WHITE, "The business is once again having its garbage picked up.");
		}
	}
	return 1;
}

command(getnumber, playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 2)
		return 1;
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /getnumber [playerid]");
	}
	else
	{
		if(IsPlayerConnectedEx(id))
		{
			if(PlayerOwnsPhone(id) == 0)
			{
				format(string, sizeof(string), "%s is not registered to have a phone.", GetName(id));
				SendClientMessage(playerid, WHITE, string);
			}
			else
			{
				SendClientMessage(playerid, WHITE, "----------------------------------------------");

				format(string, sizeof(string), "%s owns these phone numbers:", GetName(id));
				SendClientMessage(playerid, WHITE, string);


				mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT * FROM phones WHERE owner = '%e'", Player[id][NormalName]);
				new Cache:cache = mysql_query(MYSQL_MAIN, string), count = cache_get_row_count(), idx;

				while(idx < count)
				{
					cache_set_active(cache);
					cache_get_field_content(idx, "number", string);
					SendClientMessage(playerid, WHITE, string);
					idx ++;
				}

				cache_delete(cache);

				SendClientMessage(playerid, WHITE, "----------------------------------------------");
			}
		}
		else
		{
			SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
		}
	}

	return 1;
}

command(lspd, playerid, params[])
{
	#pragma unused params

	if(Player[playerid][AdminDuty] > 0)
		return SendClientMessage(playerid, -1, "You must go off Admin Duty to do this");

	if(Groups[Player[playerid][Group]][CommandTypes] == 1 && Player[playerid][Group] != 0)
	{
		new string[128];
		if(IsPlayerInRangeOfPoint(playerid, 5, LockerPosX, LockerPosY, LockerPosZ) || IsPlayerInRangeOfPoint(playerid, 5, LockerPos2X, LockerPos2Y, LockerPos2Z) || IsPlayerInRangeOfPoint(playerid, 5, LockerPos3X, LockerPos3Y, LockerPosZ))
		{
			if(GetPlayerInterior(playerid) == LockerPosInt || GetPlayerInterior(playerid) == LockerPos2Int || GetPlayerInterior(playerid) == LockerPos3Int)
			{
				format(string, sizeof(string), "%s Menu", Groups[Player[playerid][Group]][GroupName]);
				ShowPlayerDialog(playerid, 3432, DIALOG_STYLE_LIST, string, "Toggle Duty\nEquipment\nRelease a Suspect\nClothing\nClear a Suspect\n", "Select", "Cancel");
			}
		}
	}
	return 1;
}

command(pda, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminDuty] > 0)
		return SendClientMessage(playerid, -1, "You must go off Admin Duty to do this");

	if(Groups[Player[playerid][Group]][CommandTypes] == 2 && Player[playerid][Group] != 0)
	{
		if(Player[playerid][GroupRank] >= 4)
		{
			ShowPlayerDialog(playerid, 3433, DIALOG_STYLE_LIST, "Hitman Menu", "Contract List\nActive Agents\nTargets of Interest (over $25,000)\nEquipment\nUndercover Settings\nAssign a Contract", "Select", "Cancel");
		}
		else
		{
			ShowPlayerDialog(playerid, 3433, DIALOG_STYLE_LIST, "Hitman Menu", "Contract List\nActive Agents\nTargets of Interest (over $25,000)\nEquipment\nUndercover Settings", "Select", "Cancel");
		}
	}
	return 1;
}

command(checkweapons, playerid, params[])
{
	new id;
	if(sscanf(params, "u", id))
	{
		if(Player[playerid][AdminLevel] >= 2)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /checkweapons [playerid]");
		}
	}
	else
	{
		if(!IsPlayerConnected(id))
			return SendClientMessage(playerid, -1, "That player is not connected.");

		if(Player[playerid][AdminLevel] >= 2)
		{
			SendClientMessage(playerid, GREY, "--------------------------------------------------------------------------------------");
			ReturnWeapons(playerid, id);
			SendClientMessage(playerid, GREY, "--------------------------------------------------------------------------------------");
		}
	}
	return 1;
}

CMD:frisk(playerid, params[])
{
	new id, string[128];
	sscanf(params, "d", id);
	if(id < MAX_PLAYERS)
	{
	    if(sscanf(params, "u", id))
			return SendClientMessage(playerid, GREY, "SYNTAX: /frisk [playerid]");

		if(!IsPlayerConnectedEx(id))
			return SendClientMessage(playerid, -1, "That player is not connected or logged in.");
		
		if(Player[id][Mask] == 1)
	    	id = -1;
	}
	else
	    id = CheckIfMasked(id);

	if(id == -1)
		return SendClientMessage(playerid, -1, "You're too far away.");
		
	if(id == playerid)
	    return SendClientMessage(playerid, WHITE, "You can't do that to yourself!");

    if(GetDistanceBetweenPlayers(playerid, id) >= 5)
	    return SendClientMessage(playerid, WHITE, "You're too far away.");

	if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(id))
	    return SendClientMessage(playerid, WHITE, "You need to be in the same vehicle as them!");

	if((GetPlayerSpecialAction(id) != SPECIAL_ACTION_HANDSUP) && Player[id][Tied] == 0 && Player[id][Cuffed] == 0)
	    return SendClientMessage(playerid, WHITE, "They need to be tied/cuffed or have their hands up to do this!");

	format(string, sizeof(string), "* %s has frisked %s for any items.", GetNameEx(playerid), GetNameEx(id));
	NearByMessage(playerid, NICESKY, string);

    new totalfish = Player[id][TotalBass] + Player[id][TotalCod] + Player[id][TotalSalmon] + Player[id][TotalMackerel];
	totalfish += Player[id][TotalTuna] + Player[id][TotalCarp] + Player[id][TotalHerring] + Player[id][TotalMarlin];
	totalfish += Player[id][TotalMako] + Player[id][TotalCrab] + Player[id][TotalKraken];

	SendClientMessage(playerid, GREY, "------------------------------------------------------");
	ReturnWeapons(playerid, id);
	if(Player[id][Cocaine] >= 1)
	{
		format(string, sizeof(string), "- Cocaine (%d)", Player[id][Cocaine]);
		SendClientMessage(playerid, WHITE, string);
	}

	if(Player[id][Pot] >= 1)
	{
		format(string, sizeof(string), "- Pot (%d)", Player[id][Pot]);
		SendClientMessage(playerid, WHITE, string);
	}

	if(Player[id][Materials][0] >= 1)
	{
		format(string, sizeof(string), "- Street Grade Materials (%d)", Player[id][Materials][0]);
		SendClientMessage(playerid, WHITE, string);
	}

	if(Player[id][Materials][1] >= 1)
	{
		format(string, sizeof(string), "- Standard Grade Materials (%d)", Player[id][Materials][1]);
		SendClientMessage(playerid, WHITE, string);
	}

	if(Player[id][Materials][2] >= 1)
	{
		format(string, sizeof(string), "- Military Grade Materials (%d)", Player[id][Materials][2]);
		SendClientMessage(playerid, WHITE, string);
	}

	new query[128];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM phones WHERE owner = '%e'", Player[id][NormalName]);
	new Cache:cache = mysql_query(MYSQL_MAIN, query), count = cache_get_row_count(), index;
	while(index < count)
	{
		SendClientMessage(playerid, -1, "- Phone");
		index ++;
	}
	cache_delete(cache);

	if(Player[id][Identity])
		SendClientMessage(playerid, WHITE, "- Identification");

	if(Player[id][Money] >= 1)
	{
	    format(string, sizeof(string), "- Wallet (%s)", PrettyMoney(Player[id][Money]));
		SendClientMessage(playerid, WHITE, string);
	}

	if(Player[id][WalkieTalkie] > 0)
	{
	    format(string, sizeof(string), "- Walkie Talkie (%d)", Player[id][WalkieFrequency]);
	    SendClientMessage(playerid, WHITE, string);
	}

	if(totalfish > 0)
	{
		format(string, sizeof(string), "- Fish (%d)", totalfish);
		SendClientMessage(playerid, WHITE, string);
	}

	if(Player[id][Rope] > 0)
	{
		format(string, sizeof(string), "- Rope (%d)", Player[id][Rope]);
		SendClientMessage(playerid, WHITE, string);
	}

	if(Player[id][Rags] > 0)
	{
		format(string, sizeof(string), "- Rags (%d)", Player[id][Rags]);
	    SendClientMessage(playerid, WHITE, string);
	}

	if(Player[id][FishingRod])
		SendClientMessage(playerid, -1, "- Fishing Rod");

	if(Player[id][FishingBait] > 0)
	{
	    format(string, sizeof(string), "- Fish Bait (%d)", Player[id][FishingBait]);
	    SendClientMessage(playerid, -1, string);
	}

	if(Player[id][EngineParts] > 0)
	{
	    format(string, sizeof(string), "- Engine Parts (%d)", Player[id][EngineParts]);
	    SendClientMessage(playerid, -1, string);
	}

	if(Player[id][NosBottle])
	    SendClientMessage(playerid, -1, "- NOS Bottle");

	if(Player[id][HydroKit])
	    SendClientMessage(playerid, -1, "- Hydraulics Kit");

	if(Player[id][Workbench])
	    SendClientMessage(playerid, -1, "- Workbench");

	if(Player[id][Toolkit])
	    SendClientMessage(playerid, -1, "- Toolkit");

	if(Player[id][CasinoChips] > 0)
	{
		format(string, sizeof(string), "- Casino Chips (%s)", IntToFormattedStr(Player[id][CasinoChips]));
		SendClientMessage(playerid, -1, string);
	}

	if(Player[id][HotelRoomID] > -1)
	{
		format(string, sizeof(string), "- Hotel Key (%s #%d)", Businesses[Hotels[Player[id][HotelRoomID]][hBizLink]][bName], Hotels[Player[id][HotelRoomID]][hBizIndex]);
		SendClientMessage(playerid, -1, string);
	}

	if(Player[id][HouseKey] > 0)
	{
		format(string, sizeof(string), "- House %d key", Player[id][HouseKey]);
		SendClientMessage(playerid, -1, string);
	}

	if(Player[id][CarLicense])
		SendClientMessage(playerid, -1, "- Car license");

	if(Player[id][Tickets] > 0)
	{
		format(string, sizeof(string), "- Tickets (%d)", Player[id][Tickets]);
		SendClientMessage(playerid, -1, string);
	}

	if(Player[id][PotSeeds] > 0)
	{
		format(string, sizeof(string), "- %d pot seeds", Player[id][PotSeeds]);
		SendClientMessage(playerid, -1, string);
	}

	if(Player[id][Speed] > 0)
	{
		format(string, sizeof(string), "- %d pills of speed", Player[id][Speed]);
		SendClientMessage(playerid, -1, string);
	}

	if(Player[id][PrisonTickets] > 0)
	{
		format(string, sizeof(string), "- %d prison tickets", Player[id][PrisonTickets]);
		SendClientMessage(playerid, -1, string);
	}
	
	if(Player[id][PrisonScrewdriver] > 0)
	{
		format(string, sizeof(string), "- Screwdriver");
		SendClientMessage(playerid, -1, string);
	}
	
	if(Player[id][PrisonShank] > 0)
	{
		format(string, sizeof(string), "- Shank");
		SendClientMessage(playerid, -1, string);
	}
	
	if(Player[id][PrisonRazor] > 0)
	{
		format(string, sizeof(string), "- Razor");
		SendClientMessage(playerid, -1, string);
	}
	
	if(Player[id][Cigarettes] > 0)
	{
		format(string, sizeof(string), "- %d cigarettes", Player[id][Cigarettes]);
		SendClientMessage(playerid, -1, string);
	}
	
	if(Player[id][PrisonDice] > 0)
	{
		format(string, sizeof(string), "- Dice");
		SendClientMessage(playerid, -1, string);
	}
	
	if(Player[id][PrisonLighter] > 0)
	{
		format(string, sizeof(string), "- Lighter");
		SendClientMessage(playerid, -1, string);
	}
	
	if(Player[id][PrisonLitter] > 0)
	{
		format(string, sizeof(string), "- Piece of litter");
		SendClientMessage(playerid, -1, string);
	}
	
	if(Player[id][Tent] > 0)
	{
		format(string, sizeof(string), "- Tent");
		SendClientMessage(playerid, -1, string);
	}
	
	if(Player[id][Notepad] > 0)
	{
		SendClientMessage(playerid, -1, "- Notepad");
	}
	
	new str1[128];
	if(strlen(Player[id][Note1]) > 0)
	{
	    strmid(str1, Player[id][Note1], 0, 15);
	    format(string, sizeof(string), "- Note #1 (%s...)", str1);
	    SendClientMessage(playerid, -1, string);
	}
	if(strlen(Player[playerid][Note2]) > 0)
	{
	    strmid(str1, Player[id][Note2], 0, 15);
	    format(string, sizeof(string), "- Note #2 (%s...)", str1);
	    SendClientMessage(playerid, -1, string);
	}
 	if(strlen(Player[id][Note3]) > 0)
	{
 		strmid(str1, Player[id][Note3], 0, 15);
	    format(string, sizeof(string), "- Note #3 (%s...)", str1);
	    SendClientMessage(playerid, -1, string);
	}
	if(strlen(Player[id][FakeIDString]) > 3)
	{
		format(string, sizeof(string), "- Fake ID");
		SendClientMessage(playerid, -1, string);
	}
	
	if(strlen(Player[id][FakeLicense]) > 3)
	{
		format(string, sizeof(string), "- Fake registration");
		SendClientMessage(playerid, -1, string);
	}
	
	if(Player[id][HasArmour] > 0)
	{
		if(Player[id][HasArmour] == 100)
			SendClientMessage(playerid, -1, "- Kevlar (Poor)");
		else if(Player[id][HasArmour] == 115)
			SendClientMessage(playerid, -1, "- Kevlar (Standard)");
		else
			SendClientMessage(playerid, -1, "- Kevlar (Military)");
	}
	
	if(Player[id][Ventillation] > 0)
	{
		if(Player[id][Ventillation] == 1)
			SendClientMessage(playerid, -1, "- Ventillation Upgrade 1");
		else
			SendClientMessage(playerid, -1, "- Ventillation Upgrade 2");
	}
	
	if(Player[id][Bomb] > 0)
	{
		format(string, sizeof(string), "- Bomb");
		SendClientMessage(playerid, -1, string);
	}
	
	if(Player[id][GunLicense] > 0)
	{
		SendClientMessage(playerid, -1, "- Gun license");
	}
	
	if(Player[id][GasCans])
	{
		SendClientMessage(playerid, -1, "- Gas Can");
	}
	SendClientMessage(playerid, GREY, "------------------------------------------------------");

	return 1;
}

command(setleader, playerid, params[])
{
	new GroupID, id, string[128];
	if(sscanf(params, "ud", id, GroupID))
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /setleader [playerid] [faction id]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			if(DoesFactionExist(GroupID))
			{

				if(Player[id][Group] >= 1 && GroupID != Player[id][Group])
				{
					format(string, sizeof(string), "%s has left the faction (admin-set to another faction).", GetName(id));
					GroupMessage(id, ANNOUNCEMENT, string);
				}

				format(string, sizeof(string), "You have set %s to be the leader of Faction %s.", GetName(id), Groups[GroupID][GroupName]);
				SendClientMessage(playerid, WHITE, string);
				format(string, sizeof(string), "You have been appointed to lead faction %s, by %s.", Groups[GroupID][GroupName], GetName(playerid));
				SendClientMessage(id, WHITE, string);
				Player[id][Group] = GroupID;
				Player[id][GroupRank] = 6;
				format(string, sizeof(string), "%s has joined the faction (admin-set).", GetName(id));
				GroupMessage(id, ANNOUNCEMENT, string);
			}
			else
			{
				SendClientMessage(playerid, WHITE, "Invalid faction ID.");
			}
		}
	}
	return 1;
}

command(changepass, playerid, params[])
{
	ShowPlayerDialog(playerid, 3666, DIALOG_STYLE_INPUT, "Password", "Please change your password.", "Change", "Cancel");
	return 1;
}

command(highvolume, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 4)
	{
		if(ReportStatus == 0)
		{
			ReportStatus = 1;
			SendClientMessageToAll(LIGHTRED, "We are experiencing an extremely high volume of reports right now.");
			SendClientMessageToAll(LIGHTRED, "Please only use the /(re)port feature, if your report is of extreme urgency.");
		}
		else
		{
			ReportStatus = 0;
			SendClientMessageToAll(LIGHTRED, "The volume of reports has been successfully addressed.");
			SendClientMessageToAll(LIGHTRED, "You may now use /(re)port for smaller issues / requests.");
		}
	}
	return 1;
}

CMD:re(playerid, params[])
{
	if(GetPVarInt(playerid, "ShortCMDS") > 0)
	{
		SendClientMessage(playerid, -1, "ShortCMDS are disabled, you must use /report");
		return 1;
	}
	else
	{
		new id, reason[100], string[128];
		if(sscanf(params, "us[100]", id, reason))
			return cmd_report(playerid, params);
		
		if(GetPVarInt(playerid, "ReportReload") > gettime())
		{
			format(string, sizeof(string), "You must wait %d seconds before you can do this again.", GetPVarInt(playerid, "ReportReload") - gettime());
			return SendClientMessage(playerid, -1, string);
		}
		
		new count = 0;
		foreach(Player, i)
		{
			if(Player[i][AdminLevel] > 1)
				count++;
		}
		if(count == 0)
			return SendClientMessage(playerid, -1, "There are currently no administrators online, take a screenshot (F8) and make a player report on the forums if needed.");
		
		if(Player[playerid][ActiveReport] >= 1)
			return SendClientMessage(playerid, WHITE, "Our administrators have a list of reports that have been unanswered - please wait for them to attend your current report.");
			
		if(Player[playerid][reportBan][0] > 0)
		{
			format(string, sizeof(string), "You are still banned from using the report feature for %d minute(s), %d second(s).", (Player[playerid][reportBan][0]-gettime()) / 60, (Player[playerid][reportBan][0]-gettime()) % 60);
			return SendClientMessage(playerid, WHITE, string);
		}
		
		if(!IsPlayerConnectedEx(id))
			return SendClientMessage(playerid, WHITE, "Invalid character name / ID, please use a valid name to report.");
			
		format(string, sizeof(string), "%s (ID: %d) has reported %s (ID: %d): %s", GetName(playerid), playerid, GetName(id), id, reason);
		SendToAdmins(ADMINORANGE, string, 1);
		OOCChatLog(string);
		format(string, sizeof(string), "You have reported %s (ID: %d): %s", GetName(id), id, reason);
		SendClientMessage(playerid, WHITE, string);
		format(Player[playerid][ReportText], 128, "PLAYER REPORT: %s reported %s, for %s.", GetName(playerid), id, reason);
		Player[playerid][ActiveReport] = 1;
		Player[playerid][ReportTime] = gettime();
		SetPVarInt(playerid, "ReportReload", gettime() + 10);	
	}
	return 1;
}

command(report, playerid, params[])
{
	#pragma unused params
	new count = 0;
	foreach(Player, i)
	{
		if(Player[i][AdminLevel] > 1)
			count++;
	}
	if(count == 0)
		return SendClientMessage(playerid, -1, "There are currently no administrators online, take a screenshot (F8) and make a player report on the forums if needed.");
		
	if(Player[playerid][ActiveReport] >= 1)
	{
		SendClientMessage(playerid, WHITE, "Our administrators have a list of reports that have been unanswered - please wait for them to attend your current report.");
	}
	else
	{
		if(Player[playerid][reportBan][0] > 0)
		{
			new string[128];
			format(string, sizeof(string), "You are still banned from using the report feature for %d minute(s), %d second(s).", (Player[playerid][reportBan][0]-gettime()) / 60, (Player[playerid][reportBan][0]-gettime()) % 60);
			SendClientMessage(playerid, WHITE, string);
		}
		else
		{
			if(ReportStatus == 0)
			{
				ShowPlayerDialog(playerid, 6677, DIALOG_STYLE_LIST, "Report System", "Report a Player\nHouse / Business Related Request\nSpeak to an Administrator\nReport Masked Player", "Select", "Cancel");
			}
			else
			{
				SendClientMessage(playerid, RED, "We are experiencing an extremely high volume of reports right now.");
				SendClientMessage(playerid, WHITE, "Please only use this feature, if your report is important.");
				SendClientMessage(playerid, WHITE, "Normal service shall resume once we've resolved the volume of reports.");
				SendClientMessage(playerid, GREY, "If you are going to proceed with your report, please select from the menu.");
				ShowPlayerDialog(playerid, 6897, DIALOG_STYLE_LIST, "Report System - PLEASE ONLY REPORT IF YOUR REPORT IS URGENT!", "Report a Player\nSpeak to an Administrator\nReport Masked Player", "Proceed", "Cancel");
			}
		}
	}
	return 1;
}

command(askban, playerid, params[])
{
	new id, string[128];

	if(Player[playerid][AdminLevel] < 1)
		return 1;

	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /askban [playerid]");

	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, -1, "That player isn't connected!");

	if(Player[playerid][AdminLevel] < Player[id][AdminLevel])
		return SendClientMessage(playerid, -1, "You can't do that to a higher level administrator.");

	else
	{
		if(Player[id][askBan][0] > 0)
		{
			Player[id][askBan][0] = 0;
			Player[id][askBan][1] --;
			format(string, sizeof(string), "%s has unbanned you from using /ask.", Player[playerid][AdminName]);
			SendClientMessage(id, WHITE, string);
			format(string, sizeof(string), "%s has unbanned %s from using /ask.", Player[playerid][AdminName], GetName(id));
			SendToAdmins(ADMINORANGE, string, 0);
			AdminActionsLog(string);
		}
		else
		{
			Player[id][askBan][0] = gettime() + 3600;
			Player[id][askBan][1] ++;

			format(string, sizeof(string), "%s has banned you from using /ask for one hour.", Player[playerid][AdminName]);
			SendClientMessage(id, WHITE, string);
			format(string, sizeof(string), "%s has banned %s from using /ask for one hour.", Player[playerid][AdminName], GetName(id));
			SendToAdmins(ADMINORANGE, string, 0);
			AdminActionsLog(string);

			if(Player[id][askBan][1] >= 3)
			{
				format(string, sizeof(string), "Third /askban");
				Player[id][askBan][1] = 0;
				WarnPlayer(playerid, id, string);
			}
		}
	}

	return 1;
}

command(reportban, playerid, params[])
{
	new id, string[128];

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /reportban [playerid]");

	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, -1, "That player isn't connected!");

	if(Player[playerid][AdminLevel] < Player[id][AdminLevel])
		return SendClientMessage(playerid, -1, "You can't do that to a higher level administrator.");

	else
	{
		if(Player[id][reportBan][0] > 0)
		{
			Player[id][reportBan][0] = 0;
			Player[id][reportBan][1] --;
			//Player[id][ReportBanStatus] = 0;
			format(string, sizeof(string), "%s has unbanned you from using /report.", Player[playerid][AdminName]);
			SendClientMessage(id, WHITE, string);
			format(string, sizeof(string), "%s has unbanned %s from using /report.", Player[playerid][AdminName], GetName(id));
			SendToAdmins(ADMINORANGE, string, 0);
			AdminActionsLog(string);
		}
		else
		{
			//Player[id][ReportBanStatus] = 1;
			format(string, sizeof(string), "%s has banned you from using /report for one hour.", Player[playerid][AdminName]);
			SendClientMessage(id, WHITE, string);
			format(string, sizeof(string), "%s has banned %s from using /report for one hour.", Player[playerid][AdminName], GetName(id));
			SendToAdmins(ADMINORANGE, string, 0);
			AdminActionsLog(string);

			Player[id][reportBan][0] = gettime() + 3600;
			Player[id][reportBan][1] ++;

			if(Player[id][reportBan][1] >= 3)
			{
				format(string, sizeof(string), "Third /reportban");
				Player[id][reportBan][1] = 0;
				WarnPlayer(playerid, id, string);
			}
		}
	}

	return 1;
}

command(locker, playerid, params[])
{
	if (IsPlayerInRangeOfPoint(playerid, 3, VipLounge[6], VipLounge[7], VipLounge[8]) && (Player[playerid][VipRank] > 0) && GetPlayerVirtualWorld(playerid) == VipLoungeVW)
	{ 
		ShowPlayerDialog(playerid, 8081, DIALOG_STYLE_LIST, "VIP Locker", "Golf Club (40 tokens)\nSkills\nEnter Raffle\nCustom Number\nVIP Vehicles\n", "Select", "Cancel");
	}
	else
	{
		SendClientMessage(playerid, WHITE, "You're not near the VIP locker!");
	}
	return 1;
}


/* command(togooc, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][ToggedOOC] == 1)
	{
		Player[playerid][ToggedOOC] = 0;
		SendClientMessage(playerid, WHITE, "You can now see OOC chat.");
	}
	else
	{
		Player[playerid][ToggedOOC] = 1;
		SendClientMessage(playerid, WHITE, "You will no longer see chat in /(o)oc.");
	}
	return 1;
} */

CMD:serverstats(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new string[128];
	SendClientMessage(playerid, DARKGREY, "---------------------------------------------------------------------------------------------------------------------------");
	SendClientMessage(playerid, WHITE, "Analysis from 14/10/2011 to the present date:");
	format(string, sizeof(string), "Total Connections: %s | Maximum Player Connections: %s | Logins: %s | Registrations: %s", IntToFormattedStr(TotalConnections), IntToFormattedStr(MaxVisitors), IntToFormattedStr(MaxLoggedIn), IntToFormattedStr(MaxRegistered));
	SendClientMessage(playerid, GREY, string);
	SendClientMessage(playerid, WHITE, "Analysis from 2014/02/01 to the present date:");
	format(string, sizeof(string), "Friend Referals: %d | SA:MP Forum Referals: %d | Youtube Referals: %d | Google Referals: %d | Other: %d", FriendReferals, SAMPForumReferals, YoutubeReferals, GoogleReferals, OtherReferals);
	SendClientMessage(playerid, GREY, string);
	SendClientMessage(playerid, DARKGREY, "---------------------------------------------------------------------------------------------------------------------------");
	return 1;
}

CMD:status(playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][AdminLevel] >= 2)
	{
		SendClientMessage(playerid, DARKGREY, "---------------------------------------------------------------------------------------------------------------------------");
		SendClientMessage(playerid, WHITE, "Analysis of the System (automatically updated):");
		format(string, sizeof(string), "Objects: %d | Pickups: %d | Dynamic Checkpoints: %d | Dynamic Map Icons: %d | Dynamic 3D Text Labels: %d", CountDynamicObjects(), CountDynamicPickups(), CountDynamicCPs(), CountDynamicMapIcons(), CountDynamic3DTextLabels());
		SendClientMessage(playerid, GREY, string);
		format(string, sizeof(string), "Admin Spawned Vehicles: %d | Last Log Rotation: %s", AdminSpawnedCount(), LastLogRotation);
		SendClientMessage(playerid, GREY, string);
		format(string, sizeof(string), "NPCs: %d | Players Online: %d | Last Save: %s | Last restart: %s", NPCs, PlayersOn, LastServerSave, LastRestartTime);
		SendClientMessage(playerid, GREY, string);
		format(string, sizeof(string), "Newbie Chat: %s | VIP Chat: %s", (NewbieEnabled) ? ("Enabled") : ("Disabled"), (VIPEnabled) ? ("Enabled") : ("Disabled"));
		SendClientMessage(playerid, GREY, string);
		format(string, sizeof(string), "Weather ID: %d | Tax Faction: %d", GlobalWeather, TaxGroup);
		SendClientMessage(playerid, GREY, string);
		if(PaycheckHours > 0)
			format(string, sizeof(string), "%d", PaycheckHours);
		else
			format(string, sizeof(string), "No limit");
		format(string, sizeof(string), "Paycheck Bonus: %d percent | Ends in: %d days, %d hours, %d minutes | Hour limit: %s", PaycheckBonus, (PaycheckBonusTimeleft - gettime()) / 86400, ((PaycheckBonusTimeleft - gettime()) % 86400) / 3600, ((PaycheckBonusTimeleft - gettime()) % 3600) / 60, string);
		SendClientMessage(playerid, GREY, string);
		format(string, sizeof(string), "Next Drug Drop: %d days, %d hours, %d minutes", ((dTimeUntilNextDrop - gettime()) / 86400), ((dTimeUntilNextDrop - gettime()) % 86400) / 3600, ((dTimeUntilNextDrop - gettime()) % 3600) / 60);
		SendClientMessage(playerid, GREY, string);
		SendClientMessage(playerid, DARKGREY, "---------------------------------------------------------------------------------------------------------------------------");
	}
	else
	{
		format(string, sizeof(string), "Newbie Chat: %s | VIP Chat: %s", (NewbieEnabled) ? ("Enabled") : ("Disabled"), (VIPEnabled) ? ("Enabled") : ("Disabled"));
		SendClientMessage(playerid, GREY, string);
	}
	return 1;
}

command(breakin, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][Group] >= 1)
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 1)
		{
			for(new i = 0; i < sizeof(Businesses); i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3, Businesses[i][bExteriorX], Businesses[i][bExteriorY], Businesses[i][bExteriorZ]))
				{
					if(GetPlayerVirtualWorld(playerid) == 0)
					{
						if(random(4) < 2)
						{
							format(string, sizeof(string), "* %s has kicked the door down, breaking the door lock.", GetNameEx(playerid));
							NearByMessage(playerid, NICESKY, string);
							Businesses[i][bLockStatus] = 0;
							Player[playerid][InBusiness] = i;
							SetPlayerVirtualWorld(playerid, 65000+i);
							SetPlayerInterior(playerid, Businesses[i][bInteriorID]);
							SetPlayerPos_Update(playerid, Businesses[i][bInteriorX], Businesses[i][bInteriorY], Businesses[i][bInteriorZ]);

							format(string, sizeof(string), "[BREAKIN] %s (%d) has broke into a business (%d)", GetName(playerid), playerid, i);
							StatLog(string);
							return 1;
						}
						else
						{
							format(string, sizeof(string), "* %s has kicked the door, attempting to break through, but has failed.", GetNameEx(playerid));
							NearByMessage(playerid, NICESKY, string);
							return 1;
						}
					}
				}
			}
			for(new i = 0; i < sizeof(Houses); i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3, Houses[i][hExteriorX], Houses[i][hExteriorY], Houses[i][hExteriorZ]))
				{
					if(GetPlayerVirtualWorld(playerid) == Houses[i][hExteriorVW] && GetPlayerInterior(playerid) == Houses[i][hExteriorID])
					{
						if(random(4) < 2)
						{
							format(string, sizeof(string), "* %s has kicked the door down, breaking the door lock.", GetNameEx(playerid));
							NearByMessage(playerid, NICESKY, string);
							Houses[i][LockStatus] = 0;
							SetPlayerVirtualWorld(playerid, 55000+i);
							Player[playerid][InHouse] = i;
							SetPlayerInterior(playerid, Houses[i][hInteriorID]);
							SetPlayerPos_Update(playerid, Houses[i][hInteriorX], Houses[i][hInteriorY], Houses[i][hInteriorZ]);

							format(string, sizeof(string), "[BREAKIN] %s (%d) has broke into a house (%d)", GetName(playerid), playerid, i);
							StatLog(string);
							return 1;
						}
						else
						{
							format(string, sizeof(string), "* %s has kicked the door, attempting to break through, but has failed.", GetNameEx(playerid));
							NearByMessage(playerid, NICESKY, string);
							return 1;
						}
					}
				}
			}
			for(new i = 0; i < sizeof(Groups); i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3, Groups[i][HQExteriorX], Groups[i][HQExteriorY], Groups[i][HQExteriorZ]))
				{
					if(GetPlayerInterior(playerid) == Groups[i][HQExteriorID] && GetPlayerVirtualWorld(playerid) == 0)
					{
						if(random(4) < 2)
						{
							format(string, sizeof(string), "* %s has kicked the door down, breaking the door lock.", GetNameEx(playerid));
							NearByMessage(playerid, NICESKY, string);
							Groups[i][HQLock] = 0;
							Player[playerid][InGroupHQ] = i;
							SetPlayerVirtualWorld(playerid, 45000+i);
							SetPlayerInterior(playerid, Groups[i][HQInteriorID]);
							SetPlayerPos_Update(playerid, Groups[i][HQInteriorX], Groups[i][HQInteriorY], Groups[i][HQInteriorZ]);

							format(string, sizeof(string), "[BREAKIN] %s (%d) has broke into a faction (%d)", GetName(playerid), playerid, i);
							StatLog(string);
							return 1;
						}
						else
						{
							format(string, sizeof(string), "* %s has kicked the door, attempting to break through, but has failed.", GetNameEx(playerid));
							NearByMessage(playerid, NICESKY, string);
							return 1;
						}
					}
				}
			}
			foreach(new i : Garage)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3,  Garages[i][pExtPos][0], Garages[i][pExtPos][1], Garages[i][pExtPos][2]))
				{
					if(GetPlayerInterior(playerid) == Garages[i][ExtIntID] && GetPlayerVirtualWorld(playerid) == Garages[i][ExtVW])
					{
						if(random(4) < 2)
						{
							format(string, sizeof(string), "* %s has kicked the door down, breaking the door lock.", GetNameEx(playerid));
							NearByMessage(playerid, NICESKY, string);
							Garages[i][GarageLock] = 0;
							Player[playerid][InGarage] = i;
							SetPlayerVirtualWorld(playerid, Garages[i][IntVW]);
							SetPlayerInterior(playerid, Garages[i][IntIntID]);
							SetPlayerPos_Update(playerid, Garages[i][pIntPos][0], Garages[i][pIntPos][1], Garages[i][pIntPos][2]);
							UpdateGarageText(i);
							format(string, sizeof(string), "[BREAKIN] %s (%d) has broken into a garage. (%d)", GetName(playerid), playerid, i);
							StatLog(string);
							return 1;
						}
						else
						{
							format(string, sizeof(string), "* %s has kicked the door, attempting to break through, but has failed.", GetNameEx(playerid));
							NearByMessage(playerid, NICESKY, string);
							return 1;
						}
					}
				}
			}
			foreach(new h : Hotel)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3, Hotels[h][hExtPos][0], Hotels[h][hExtPos][1], Hotels[h][hExtPos][2]))
				{
					if(GetPlayerInterior(playerid) == Hotels[h][hExteriorInt] && GetPlayerVirtualWorld(playerid) == Hotels[h][hExteriorVW])
					{
						if(random(4) < 2)
						{
							format(string, sizeof(string), "* %s has kicked the door down, breaking the door lock.", GetNameEx(playerid));
							NearByMessage(playerid, NICESKY, string);
							Hotels[h][hLock] = 0;
							Player[playerid][InHotelRoom] = h;
							SetPlayerVirtualWorld(playerid, Hotels[h][hInteriorVW]);
							SetPlayerInterior(playerid, Hotels[h][hInteriorInt]);
							SetPlayerPos_Update(playerid, Hotels[h][hIntPos][0], Hotels[h][hIntPos][1], Hotels[h][hIntPos][2]);
							format(string, sizeof(string), "[BREAKIN] %s (%d) has broken into a hotel room. (%d)", GetName(playerid), playerid, h);
							StatLog(string);
							return 1;
						}
						else
						{
							format(string, sizeof(string), "* %s has kicked the door, attempting to break through, but has failed.", GetNameEx(playerid));
							NearByMessage(playerid, NICESKY, string);
							return 1;
						}
					}
				}
			}
			foreach(new i : DoorGate)
			{
				if(DoorGates[i][Type] == GATE_TYPE_GATE)
					continue;

				if(!IsValidDynamicObject(DoorGates[i][ObjectID]))
					continue;

				if(DoorGates[i][Enabled] == 0)
					continue;

				if(DoorGates[i][DoorGateLink] > 0)
					continue;

				if(DoorGates[i][IsOpen] == 1)
					continue;

				if(!IsPlayerInRangeOfPoint(playerid, DoorGates[i][dRange], DoorGates[i][ClosePos][0], DoorGates[i][ClosePos][1], DoorGates[i][ClosePos][2]))
					continue;


				if(random(4) < 2)
				{
					format(string, sizeof(string), "* %s has kicked the door, attempting to break through, but has failed.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
					return 1;
				}

				MoveDynamicObject(DoorGates[i][ObjectID], DoorGates[i][OpenPos][0], DoorGates[i][OpenPos][1], DoorGates[i][OpenPos][2], DoorGates[i][dSpeed], DoorGates[i][OpenRot][0], DoorGates[i][OpenRot][1], DoorGates[i][OpenRot][2]);
				format(string, sizeof(string), "* %s has kicked the door down, breaking the door lock.", GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, string);
				DoorGates[i][IsOpen] = 1;
				MoveLinkedDoorGates(i);
				format(string, sizeof(string), "[BREAKIN] %s (%d) has broken into a scripted door. (%d)", GetName(playerid), playerid, i);
				StatLog(string);
			}
		}
	}
	return 1;
}

command(adminbreakin, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][AdminLevel] >= 2)
	{
		if(true)
		{
			for(new i = 0; i < sizeof(Businesses); i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3, Businesses[i][bExteriorX], Businesses[i][bExteriorY], Businesses[i][bExteriorZ]))
				{
					if(GetPlayerVirtualWorld(playerid) == 0)
					{
						if(random(4) < 2)
						{
							format(string, sizeof(string), "* %s has kicked the door down, breaking the door lock.", GetNameEx(playerid));
							NearByMessage(playerid, NICESKY, string);
							Businesses[i][bLockStatus] = 0;
							Player[playerid][InBusiness] = i;
							SetPlayerVirtualWorld(playerid, 65000+i);
							SetPlayerInterior(playerid, Businesses[i][bInteriorID]);
							SetPlayerPos_Update(playerid, Businesses[i][bInteriorX], Businesses[i][bInteriorY], Businesses[i][bInteriorZ]);

							format(string, sizeof(string), "[BREAKIN] %s (%d) has broke into a business (%d)", GetName(playerid), playerid, i);
							StatLog(string);
							return 1;
						}
						else
						{
							format(string, sizeof(string), "* %s has kicked the door, attempting to break through, but has failed.", GetNameEx(playerid));
							NearByMessage(playerid, NICESKY, string);
							return 1;
						}
					}
				}
			}
			for(new i = 0; i < sizeof(Houses); i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3, Houses[i][hExteriorX], Houses[i][hExteriorY], Houses[i][hExteriorZ]))
				{
					if(GetPlayerVirtualWorld(playerid) == Houses[i][hExteriorVW] && GetPlayerInterior(playerid) == Houses[i][hExteriorID])
					{
						if(random(4) < 2)
						{
							format(string, sizeof(string), "* %s has kicked the door down, breaking the door lock.", GetNameEx(playerid));
							NearByMessage(playerid, NICESKY, string);
							Houses[i][LockStatus] = 0;
							SetPlayerVirtualWorld(playerid, 55000+i);
							Player[playerid][InHouse] = i;
							SetPlayerInterior(playerid, Houses[i][hInteriorID]);
							SetPlayerPos_Update(playerid, Houses[i][hInteriorX], Houses[i][hInteriorY], Houses[i][hInteriorZ]);

							format(string, sizeof(string), "[BREAKIN] %s (%d) has broke into a house (%d)", GetName(playerid), playerid, i);
							StatLog(string);
							return 1;
						}
						else
						{
							format(string, sizeof(string), "* %s has kicked the door, attempting to break through, but has failed.", GetNameEx(playerid));
							NearByMessage(playerid, NICESKY, string);
							return 1;
						}
					}
				}
			}
			for(new i = 0; i < sizeof(Groups); i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3, Groups[i][HQExteriorX], Groups[i][HQExteriorY], Groups[i][HQExteriorZ]))
				{
					if(GetPlayerInterior(playerid) == Groups[i][HQExteriorID] && GetPlayerVirtualWorld(playerid) == 0)
					{
						if(random(4) < 2)
						{
							format(string, sizeof(string), "* %s has kicked the door down, breaking the door lock.", GetNameEx(playerid));
							NearByMessage(playerid, NICESKY, string);
							Groups[i][HQLock] = 0;
							Player[playerid][InGroupHQ] = i;
							SetPlayerVirtualWorld(playerid, 45000+i);
							SetPlayerInterior(playerid, Groups[i][HQInteriorID]);
							SetPlayerPos_Update(playerid, Groups[i][HQInteriorX], Groups[i][HQInteriorY], Groups[i][HQInteriorZ]);

							format(string, sizeof(string), "[BREAKIN] %s (%d) has broke into a faction (%d)", GetName(playerid), playerid, i);
							StatLog(string);
							return 1;
						}
						else
						{
							format(string, sizeof(string), "* %s has kicked the door, attempting to break through, but has failed.", GetNameEx(playerid));
							NearByMessage(playerid, NICESKY, string);
							return 1;
						}
					}
				}
			}
			foreach(new i : Garage)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3,  Garages[i][pExtPos][0], Garages[i][pExtPos][1], Garages[i][pExtPos][2]))
				{
					if(GetPlayerInterior(playerid) == Garages[i][ExtIntID] && GetPlayerVirtualWorld(playerid) == Garages[i][ExtVW])
					{
						if(random(4) < 2)
						{
							format(string, sizeof(string), "* %s has kicked the door down, breaking the door lock.", GetNameEx(playerid));
							NearByMessage(playerid, NICESKY, string);
							Garages[i][GarageLock] = 0;
							Player[playerid][InGarage] = i;
							SetPlayerVirtualWorld(playerid, Garages[i][IntVW]);
							SetPlayerInterior(playerid, Garages[i][IntIntID]);
							SetPlayerPos_Update(playerid, Garages[i][pIntPos][0], Garages[i][pIntPos][1], Garages[i][pIntPos][2]);
							UpdateGarageText(i);
							format(string, sizeof(string), "[BREAKIN] %s (%d) has broken into a garage. (%d)", GetName(playerid), playerid, i);
							StatLog(string);
							return 1;
						}
						else
						{
							format(string, sizeof(string), "* %s has kicked the door, attempting to break through, but has failed.", GetNameEx(playerid));
							NearByMessage(playerid, NICESKY, string);
							return 1;
						}
					}
				}
			}
			foreach(new h : Hotel)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3, Hotels[h][hExtPos][0], Hotels[h][hExtPos][1], Hotels[h][hExtPos][2]))
				{
					if(GetPlayerInterior(playerid) == Hotels[h][hExteriorInt] && GetPlayerVirtualWorld(playerid) == Hotels[h][hExteriorVW])
					{
						if(random(4) < 2)
						{
							format(string, sizeof(string), "* %s has kicked the door down, breaking the door lock.", GetNameEx(playerid));
							NearByMessage(playerid, NICESKY, string);
							Hotels[h][hLock] = 0;
							Player[playerid][InHotelRoom] = h;
							SetPlayerVirtualWorld(playerid, Hotels[h][hInteriorVW]);
							SetPlayerInterior(playerid, Hotels[h][hInteriorInt]);
							SetPlayerPos_Update(playerid, Hotels[h][hIntPos][0], Hotels[h][hIntPos][1], Hotels[h][hIntPos][2]);
							format(string, sizeof(string), "[BREAKIN] %s (%d) has broken into a hotel room. (%d)", GetName(playerid), playerid, h);
							StatLog(string);
							return 1;
						}
						else
						{
							format(string, sizeof(string), "* %s has kicked the door, attempting to break through, but has failed.", GetNameEx(playerid));
							NearByMessage(playerid, NICESKY, string);
							return 1;
						}
					}
				}
			}
			foreach(new i : DoorGate)
			{
				if(DoorGates[i][Type] == GATE_TYPE_GATE)
					continue;

				if(!IsValidDynamicObject(DoorGates[i][ObjectID]))
					continue;

				if(DoorGates[i][Enabled] == 0)
					continue;

				if(DoorGates[i][DoorGateLink] > 0)
					continue;

				if(DoorGates[i][IsOpen] == 1)
					continue;

				if(!IsPlayerInRangeOfPoint(playerid, DoorGates[i][dRange], DoorGates[i][ClosePos][0], DoorGates[i][ClosePos][1], DoorGates[i][ClosePos][2]))
					continue;


				if(random(4) < 2)
				{
					format(string, sizeof(string), "* %s has kicked the door, attempting to break through, but has failed.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
					return 1;
				}

				MoveDynamicObject(DoorGates[i][ObjectID], DoorGates[i][OpenPos][0], DoorGates[i][OpenPos][1], DoorGates[i][OpenPos][2], DoorGates[i][dSpeed], DoorGates[i][OpenRot][0], DoorGates[i][OpenRot][1], DoorGates[i][OpenRot][2]);
				format(string, sizeof(string), "* %s has kicked the door down, breaking the door lock.", GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, string);
				DoorGates[i][IsOpen] = 1;
				MoveLinkedDoorGates(i);
				format(string, sizeof(string), "[BREAKIN] %s (%d) has broken into a scripted door. (%d)", GetName(playerid), playerid, i);
				StatLog(string);
			}
		}
	}
	return 1;
}
command(buy, playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 1.5, Businesses[Player[playerid][InBusiness]][bInteractX], Businesses[Player[playerid][InBusiness]][bInteractY], Businesses[Player[playerid][InBusiness]][bInteractZ]) && Player[playerid][InBusiness] != 0)
		return SendClientMessage(playerid, GREY, "You must stand near the interaction point to do this.");

	#pragma unused params
	if(Businesses[Player[playerid][InBusiness]][bType] == 1)
	{
		new string[300];
		new price1 = Businesses[Player[playerid][InBusiness]][bProductPrice1];
		new price2 = Businesses[Player[playerid][InBusiness]][bProductPrice2];
		new price3 = Businesses[Player[playerid][InBusiness]][bProductPrice3];
		new price4 = Businesses[Player[playerid][InBusiness]][bProductPrice4];
		new price5 = Businesses[Player[playerid][InBusiness]][bProductPrice5];
		new price6 = Businesses[Player[playerid][InBusiness]][bProductPrice6];
		new price7 = Businesses[Player[playerid][InBusiness]][bProductPrice7];
		new price8 = Businesses[Player[playerid][InBusiness]][bProductPrice8];
		new price9 = Businesses[Player[playerid][InBusiness]][bProductPrice9];
		new price10 = Businesses[Player[playerid][InBusiness]][bProductPrice10];
		new price11 = Businesses[Player[playerid][InBusiness]][bProductPrice11];
		new price12 = Businesses[Player[playerid][InBusiness]][bProductPrice12];
		new price13 = Businesses[Player[playerid][InBusiness]][bProductPrice13];
		if(toggedRaffle)
		{
			format(string, sizeof(string), "Rope (%s)\nRags (%s)\nPhone (%s)\nBottle O' Sprunk (%s)\nSpray Can (%s)\n", PrettyMoney(price1), PrettyMoney(price2), PrettyMoney(price3), PrettyMoney(price4), PrettyMoney(price5));
			format(string, sizeof(string), "%sWalkie Talkie (%s)\nPersonal Radio (%s)\nToolkit (%s)\nGas Can (%s)", string, PrettyMoney(price6), PrettyMoney(price7), PrettyMoney(price8), PrettyMoney(price9));
			format(string, sizeof(string), "%s\nVehicle Radio (%s)\nCamera (%s)\nBoombox (%s)\nNotepad (%s)\nLottery Ticket (%s)\n", string, PrettyMoney(price10), PrettyMoney(price11), PrettyMoney(price12), PrettyMoney(price13), PrettyMoney(rafflePrice));
		}
		else
		{
			format(string, sizeof(string), "Rope (%s)\nRags (%s)\nPhone (%s)\nBottle O' Sprunk (%s)\nSpray Can (%s)\n", PrettyMoney(price1), PrettyMoney(price2), PrettyMoney(price3), PrettyMoney(price4), PrettyMoney(price5));
			format(string, sizeof(string), "%sWalkie Talkie (%s)\nPersonal Radio (%s)\nToolkit (%s)\nGas Can (%s)", string, PrettyMoney(price6), PrettyMoney(price7), PrettyMoney(price8), PrettyMoney(price9));
			format(string, sizeof(string), "%s\nVehicle Radio (%s)\nCamera (%s)\nBoombox (%s)\nNotepad (%s)\n", string, PrettyMoney(price10), PrettyMoney(price11), PrettyMoney(price12), PrettyMoney(price13));
		}
		ShowPlayerDialog(playerid, 631, DIALOG_STYLE_LIST, "Select the product you wish to purchase.", string, "Purchase", "Cancel");
	}
	else if(Businesses[Player[playerid][InBusiness]][bType] == 11)
	{
		new string[128];

		//format(string, sizeof(string), "500 pills of Speed ($%d)\n1000 pills of Speed ($%d)\n1500 pills of Speed ($%d)\n5000 pills of Speed ($%d)\n", Businesses[Player[playerid][InBusiness]][bProductPrice1], Businesses[Player[playerid][InBusiness]][bProductPrice2], Businesses[Player[playerid][InBusiness]][bProductPrice3], Businesses[Player[playerid][InBusiness]][bProductPrice4]);
		//format(string, sizeof(string), "%s500 grams of Cocaine ($%d)\n1000 grams of Cocaine ($%d)\n1500 grams of Cocaine ($%d)\n5000 grams of Cocaine ($%d)\n", string, Businesses[Player[playerid][InBusiness]][bProductPrice5], Businesses[Player[playerid][InBusiness]][bProductPrice6], Businesses[Player[playerid][InBusiness]][bProductPrice7], Businesses[Player[playerid][InBusiness]][bProductPrice8]);
		//format(string, sizeof(string), "%sFluorescent Grow Light ($%d)\nPot Seeds ($%d)\n", string, Businesses[Player[playerid][InBusiness]][bProductPrice9], Businesses[Player[playerid][InBusiness]][bProductPrice10]);
		//ShowPlayerDialog(playerid, 8561, DIALOG_STYLE_LIST, "Select the product you wish to purchase.", string, "Purchase", "Cancel");
		format(string, sizeof(string), "Fluorescent Grow Light ($%d)\nPot Seeds ($%d)\n", Businesses[Player[playerid][InBusiness]][bProductPrice9], Businesses[Player[playerid][InBusiness]][bProductPrice10]);
		ShowPlayerDialog(playerid, 8561, DIALOG_STYLE_LIST, "Select the product you wish to purchase.", string, "Purchase", "Cancel");

	}
	else if(Businesses[Player[playerid][InBusiness]][bType] == 12 || Businesses[Player[playerid][InBusiness]][bType] == 3)
	{
		new string[256];
		new price1 = Businesses[Player[playerid][InBusiness]][bProductPrice1];
		new price2 = Businesses[Player[playerid][InBusiness]][bProductPrice2];
		new price3 = Businesses[Player[playerid][InBusiness]][bProductPrice3];
		new price4 = Businesses[Player[playerid][InBusiness]][bProductPrice4];
		new price5 = Businesses[Player[playerid][InBusiness]][bProductPrice5];
		new price6 = Businesses[Player[playerid][InBusiness]][bProductPrice6];
		new price7 = Businesses[Player[playerid][InBusiness]][bProductPrice7];
		new price8 = Businesses[Player[playerid][InBusiness]][bProductPrice8];
		format(string, sizeof(string), "Sprunk ($%d)\nWine ($%d)\nBeer ($%d)\nCase of beer (6 beers) ($%d)\n%s ($%d)\n%s ($%d)\n%s ($%d)\n%s ($%d)\n", price1, price2, price3, price4, Businesses[Player[playerid][InBusiness]][bFoodName1], price5, Businesses[Player[playerid][InBusiness]][bFoodName2], price6, Businesses[Player[playerid][InBusiness]][bFoodName3], price7, Businesses[Player[playerid][InBusiness]][bFoodName4], price8);
		ShowPlayerDialog(playerid, 81, DIALOG_STYLE_LIST, "Select the product you wish to purchase.", string, "Purchase", "Cancel");
	}
	else if(Businesses[Player[playerid][InBusiness]][bType] == 5)
	{
		new string[135];
		new price1 = Businesses[Player[playerid][InBusiness]][bProductPrice1];
		new price2 = Businesses[Player[playerid][InBusiness]][bProductPrice2];
		new price3 = Businesses[Player[playerid][InBusiness]][bProductPrice3];
		new price4 = Businesses[Player[playerid][InBusiness]][bProductPrice4];
		new price5 = Businesses[Player[playerid][InBusiness]][bProductPrice5];
		new price6 = Businesses[Player[playerid][InBusiness]][bProductPrice6];
		new price7 = Businesses[Player[playerid][InBusiness]][bProductPrice7];
		format(string, sizeof(string), "Rope ($%d)\nSmall White Vibrator ($%d)\nSilver Vibrator ($%d)\nLarge White Vibrator ($%d)\nPriest ($%d)\nNaughty Girl Cop Costume ($%d)\nCat Woman Costume ($%d)", price1, price2, price3, price4, price5, price6, price7);
		ShowPlayerDialog(playerid, 257, DIALOG_STYLE_LIST, "Select the product you wish to purchase.", string, "Purchase", "Cancel");
	}
	else if(Businesses[Player[playerid][InBusiness]][bType] == 15)
	{
		new string[256];
		new price1 = Businesses[Player[playerid][InBusiness]][bProductPrice1];
		new price2 = Businesses[Player[playerid][InBusiness]][bProductPrice2];
		new price3 = Businesses[Player[playerid][InBusiness]][bProductPrice3];
		new price4 = Businesses[Player[playerid][InBusiness]][bProductPrice4];
		new price5 = Businesses[Player[playerid][InBusiness]][bProductPrice5];
		new price6 = Businesses[Player[playerid][InBusiness]][bProductPrice6];
		new price7 = Businesses[Player[playerid][InBusiness]][bProductPrice7];
		new price8 = Businesses[Player[playerid][InBusiness]][bProductPrice8];
		new price9 = Businesses[Player[playerid][InBusiness]][bProductPrice9];
		new price10 = Businesses[Player[playerid][InBusiness]][bProductPrice10];
		new price11 = Businesses[Player[playerid][InBusiness]][bProductPrice11];
		new price12 = Businesses[Player[playerid][InBusiness]][bProductPrice12];
		format(string, sizeof(string), "Engine Parts (%s)\nNOS Bottle (%s)\nHydraulics Kit (%s)\nRope (%s)\nRags (%s)\nGas Can (%s)\nWorkbench (%s)\nToolkit (%s)\nBusiness Intercom System (%s)\nTent (%s)", PrettyMoney(price1), PrettyMoney(price2), PrettyMoney(price3), PrettyMoney(price4), PrettyMoney(price5), PrettyMoney(price6), PrettyMoney(price7), PrettyMoney(price8), PrettyMoney(price9), PrettyMoney(price10));
		format(string, sizeof(string), "%s\nVentillation Upgrade 1 (%s)\nVentillation Upgrade 2 (%s)", string, PrettyMoney(price11), PrettyMoney(price12));
		//format(string, sizeof(string), "Engine Parts (%s)\nNOS Bottle (%s)\nHydraulics Kit (%s)\nRope (%s)\nRags (%s)\nGas Can (%s)\nWorkbench (%s)\nToolkit (%s)\nBusiness Intercom System (%s)\n", PrettyMoney(price1), PrettyMoney(price2), PrettyMoney(price3), PrettyMoney(price4), PrettyMoney(price5), PrettyMoney(price6), PrettyMoney(price7), PrettyMoney(price8), PrettyMoney(price9));
		ShowPlayerDialog(playerid, HARDWARE_BUY, DIALOG_STYLE_LIST, "Select the product you wish to purchase.", string, "Purchase", "Cancel");
	}
	else if(Businesses[Player[playerid][InBusiness]][bType] == 16)
	{
		new string[256];
		new price1 = Businesses[Player[playerid][InBusiness]][bProductPrice1];
		new price2 = Businesses[Player[playerid][InBusiness]][bProductPrice2];
		new price3 = Businesses[Player[playerid][InBusiness]][bProductPrice3];
		new price4 = Businesses[Player[playerid][InBusiness]][bProductPrice4];
		format(string, sizeof(string), "Rope (%s)\nRags (%s)\nGas Can (%s)\nBottle O' Sprunk (%s)\n", PrettyMoney(price1), PrettyMoney(price2), PrettyMoney(price3), PrettyMoney(price4));
		ShowPlayerDialog(playerid, GASBAR_BIZ, DIALOG_STYLE_LIST, "Select the product you wish to purchase.", string, "Purchase", "Cancel");
	}
	else if(Businesses[Player[playerid][InBusiness]][bType] == 13)
	{
		new string[256];
		new price1 = Businesses[Player[playerid][InBusiness]][bProductPrice1];
		new price2 = Businesses[Player[playerid][InBusiness]][bProductPrice2];
		format(string, sizeof(string), "Fishing Rod (%s)\nFish Bait (%s)\n", PrettyMoney(price1), PrettyMoney(price2));
		ShowPlayerDialog(playerid, 11211, DIALOG_STYLE_LIST, "Select the product you wish to purchase.", string, "Purchase", "Cancel");
	}
	return 1;
}

command(set, playerid, params[])
{
	new usage[128], id, value, string[128], tmp;

	if(Player[playerid][AdminLevel] < 3)
		return 1;

	if(sscanf(params, "us[128]d", id, usage, value))
	{
		if(Player[playerid][AdminLevel] >= 3)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /set [playerid] [item] [value]");
			SendClientMessage(playerid, GREY, "Usages: Health, Cocaine, Pot, Job, job2, Phone, Interior, House, streetmats, standardmats, militarymats, Skin");
			SendClientMessage(playerid, GREY, "Usages: FailedHits, SuccessfulHits, Bank, PlayingHours, CriminalOffences, Rope, Rags, Age, AchievementPoints, CheckBalance, GunXP, Tokens");
			SendClientMessage(playerid, GREY, "Usages: Business, Faction, FactionRank, Gang, GangRank, Money, CocaineArmour, Armour, VirtualWorld");
			SendClientMessage(playerid, GREY, "Usages: Casts, Tempbanlevel, Rallycp, Race, PizzaRuns, CasinoChips, HotelRoom");
			return SendClientMessage(playerid, GREY, "Usages: CarLicense, TruckLicense, Speed, nmutes, vmutes, hunger, carsdropped, carjackerxp, loyaltystreak");
		}
	}

	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, WHITE, "That player isn't connected!");

	if(Player[playerid][AdminLevel] < Player[id][AdminLevel])
		return SendClientMessage(playerid, WHITE, "You can't do that to a higher-level admin!");

	else
	{
		if(strcmp(usage, "skin", true) == 0)
		{
			if(value > MAX_SKINS|| value < 0)
				return SendClientMessage(playerid, WHITE, "You must select a valid skin between 0 and"#MAX_SKINS"!");

			if(Player[id][IsAtEvent] >= 1)
				return SendClientMessage(playerid, WHITE, "As that player is playing in an event, their skin will return itself to normal when they respawn.");

			if(Player[id][AdminDuty] >= 1)
			{
				tmp = Player[id][AdminSkin];
				Player[id][AdminSkin] = value;
			}
			else
			{
				tmp = Player[id][LastSkin];
				Player[id][LastSkin] = value;
			}

			SetPlayerSkin(id, value);
		}
		else if(strcmp(usage, "bank", true) == 0)
		{
			format(string, sizeof(string), "[ADMIN] %s has set %s's bank to $%s (was $%s).", Player[playerid][AdminName], GetName(id), IntToFormattedStr(value), IntToFormattedStr(Player[id][Money]));
			MoneyLog(string);
			tmp = Player[id][BankMoney];
			Player[id][BankMoney] = value;
		}
		else if(strcmp(usage, "casinochips", true) == 0)
		{
			format(string, sizeof(string), "[ADMIN] %s has set %s's casinochips to %s (was %s).", Player[playerid][AdminName], GetName(id), IntToFormattedStr(value), IntToFormattedStr(Player[id][CasinoChips]));
			MoneyLog(string);
			tmp = Player[id][CasinoChips];
			Player[id][CasinoChips] = value;
		}
		else if(strcmp(usage, "rags", true) == 0)
		{
			tmp = Player[id][Rags];
			Player[id][Rags] = value;
		}
		else if(strcmp(usage, "pizzaruns", true) == 0)
		{
			tmp = Player[id][PizzaDelivers];
			Player[id][PizzaDelivers] = value;
		}
		else if(strcmp(usage, "rope", true) == 0)
		{
			tmp = Player[id][Rope];
			Player[id][Rope] = value;
		}
		else if(strcmp(usage, "age", true) == 0)
		{
			tmp = Player[id][Age];
			Player[id][Age] = value;
		}
		else if(strcmp(usage, "criminaloffences", true) == 0)
		{
			tmp = Player[id][CriminalOffences];
			Player[id][CriminalOffences] = value;
		}
		else if(strcmp(usage, "playinghours", true) == 0)
		{
			tmp = Player[id][PlayingHours];
			Player[id][PlayingHours] = value;
		}
		else if(strcmp(usage, "failedhits", true) == 0)
		{
			tmp = Player[id][FailedHits];
			Player[id][FailedHits] = value;
		}
		else if(strcmp(usage, "successfulhits", true) == 0)
		{
			tmp = Player[id][SuccessfulHits];
			Player[id][SuccessfulHits] = value;
		}
		else if(strcmp(usage, "streetmats", true) == 0)
		{
			tmp = Player[id][Materials][0];
			Player[id][Materials][0] = value;
		}
		else if(strcmp(usage, "standardmats", true) == 0)
		{
			tmp = Player[id][Materials][1];
			Player[id][Materials][1] = value;
		}
		else if(strcmp(usage, "militarymats", true) == 0)
		{
			tmp = Player[id][Materials][2];
			Player[id][Materials][2] = value;
		}
		else if(strcmp(usage, "pot", true) == 0)
		{
			tmp = Player[id][Pot];
			Player[id][Pot] = value;
		}
		else if(strcmp(usage, "job", true) == 0)
		{
			tmp = Player[id][Job];
			Player[id][Job] = value;
		}
		else if(strcmp(usage, "job2", true) == 0)
		{
			tmp = Player[id][Job2];
			Player[id][Job2] = value;
		}
		else if(strcmp(usage, "cocaine", true) == 0)
		{
			tmp = Player[id][Cocaine];
			Player[id][Cocaine] = value;
		}
		else if(strcmp(usage, "Faction", true) == 0)
		{
			tmp = Player[id][Group];
			Player[id][Group] = value;
			if(value == 0)
			{
				Player[id][GangPayment] = 0;
				Player[id][GroupRank] = 0;
			}

			if(tmp != 0)
				Groups[tmp][MemberCount]--;

			if(value != 0)
				Groups[value][MemberCount]++;
		}
		else if(strcmp(usage, "house", true) == 0)
		{
			tmp = Player[id][House];
			Player[id][House] = value;
		}
		else if(strcmp(usage, "house2", true) == 0)
		{
			tmp = Player[id][House2];
			Player[id][House2] = value;
		}
		else if(strcmp(usage, "business", true) == 0)
		{
			tmp = Player[id][Business];
			Player[id][Business] = value;
		}
		else if(strcmp(usage, "factionrank", true) == 0)
		{
			tmp = Player[id][GroupRank];
			Player[id][GroupRank] = value;
		}
		else if(strcmp(usage, "money", true) == 0)
		{
			format(string, sizeof(string), "[ADMIN] %s has set %s's money to $%s (was $%s).", Player[playerid][AdminName], GetName(id), IntToFormattedStr(value), IntToFormattedStr(Player[id][Money]));
			MoneyLog(string);
			tmp = Player[id][Money];
			Player[id][Money] = value;
		}
		else if(strcmp(usage, "health", true) == 0)
		{
			new Float:tmpfloat;
			GetPlayerHealth(id, tmpfloat);
			tmp = floatround(tmpfloat, floatround_ceil);
			tmpfloat = float(value);
			SetPlayerHealth(id, tmpfloat);
		}
		else if(strcmp(usage, "vw", true) == 0 || strcmp(usage, "virtualworld", true) == 0)
		{
			Player[id][LastWorld] = GetPlayerVirtualWorld(id);
			tmp = Player[id][LastWorld];
			SetPlayerVirtualWorld(id, value);
		}
		else if(strcmp(usage, "interior", true) == 0)
		{
			tmp = Player[id][LastInterior];
			SetPlayerInterior(id, value);
		}
		else if(strcmp(usage, "armour", true) == 0)
		{
			new Float:tmpfloat;
			GetPlayerArmour(id, tmpfloat);
			tmp = floatround(tmpfloat, floatround_ceil);
			tmpfloat = float(value);
			SetPlayerArmour(id, tmpfloat);
		}
		else if(strcmp(usage, "checkbalance", true) == 0)
		{
			format(string, sizeof(string), "[ADMIN] %s has set %s's check balance to $%s (was $%s).", Player[playerid][AdminName], GetName(id), IntToFormattedStr(value), IntToFormattedStr(Player[id][CheckBalance]));
			MoneyLog(string);
			tmp = Player[id][CheckBalance];
			Player[id][CheckBalance] = value;
		}
		else if(strcmp(usage, "gunxp", true) == 0)
		{
			tmp = Player[id][ArmsDealerXP];
			Player[id][ArmsDealerXP] = value;
		}
		else if(strcmp(usage, "tokens", true) == 0)
		{
			tmp = Player[id][VipTokens];
			Player[id][VipTokens] = value;
		}
		else if(strcmp(usage, "tempbanlevel", true) == 0)
		{
			tmp = Player[id][TempbanLevel];
			Player[id][TempbanLevel] = value;
		}
		else if(strcmp(usage, "deliveries", true) == 0)
		{
			tmp = Player[id][Deliveries];
			Player[id][Deliveries] = value;
		}
		else if(strcmp(usage, "casts", true) == 0)
		{
		    tmp = Player[id][TotalFished];
		    Player[id][TotalFished] = value;
		}
		else if(strcmp(usage, "fishattempts", true) == 0)
		{
		    tmp = Player[id][FishAttempts];
	  		Player[id][FishAttempts] = value;
		}
		else if(strcmp(usage, "viptime", true) == 0)
		{ //86400
			tmp = Player[id][VipTime];
			Player[id][VipTime] = value;
			Player[id][VipRenew] = 0;
		}
		else if(strcmp(usage, "race", true) == 0)
		{
			tmp = Player[id][Race];
			Player[id][Race] = value;
		}
		else if(strcmp(usage, "hotelroom", true) == 0)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /sethotelroom [playerid] [business id] [hotel room id]");
		}
		else if(strcmp(usage, "rallycp", true) == 0)
		{
			tmp = Player[id][RallyCP];
			Player[id][RallyCP] = value;
		}
		else if(strcmp(usage, "CarLicense", true) == 0)
		{
			tmp = Player[id][CarLicense];
			Player[id][CarLicense] = value;
		}
		else if(strcmp(usage, "TruckLicense", true) == 0)
		{
			tmp = Player[id][TruckLicense];
			Player[id][TruckLicense] = value;
		}
		else if(strcmp(usage, "parts", true) == 0)
		{
			tmp = Player[id][EngineParts];
			Player[id][EngineParts] = value;
		}
		else if(strcmp(usage, "BusinessKey", true) == 0)
		{
			tmp = Player[id][BusinessKey];
			if(value > 0)
			{
				if(!strcmp(Businesses[value][bKeyOwner1], "Nobody", true))
				{
					Player[id][BusinessKey] = value;
					if(Player[id][AdminDuty] > 0 || Player[id][Mask] == 1)
						strcpy(Businesses[value][bKeyOwner1], Player[id][NormalName], 25);
					else
						strcpy(Businesses[value][bKeyOwner1], GetName(id), 25);
				}
				else if(!strcmp(Businesses[value][bKeyOwner2], "Nobody", true))
				{
					Player[id][BusinessKey] = value;
					if(Player[id][AdminDuty] > 0 || Player[id][Mask] == 1)
						strcpy(Businesses[value][bKeyOwner2], Player[id][NormalName], 25);
					else
						strcpy(Businesses[value][bKeyOwner2], GetName(id), 25);
				}
				else
					return SendClientMessage(playerid, -1, "That business has no spare keys.");
			}
			else
			{
				new name[25];
				if(Player[id][AdminDuty] > 0 || Player[id][Mask] == 1)
					strcpy(name, Player[id][NormalName], 25);
				else
					strcpy(name, GetName(id), 25);

				if(tmp == 0)
					return SendClientMessage(playerid, -1, "That player does not have a business key.");

				if(!strcmp(Businesses[tmp][bKeyOwner1], name, true))
				{
					Player[id][BusinessKey] = 0;
					strcpy(Businesses[tmp][bKeyOwner1], name, 25);
				}
				else if(!strcmp(Businesses[tmp][bKeyOwner2], name, true))
				{
					Player[id][BusinessKey] = 0;
					strcpy(Businesses[tmp][bKeyOwner2], name, 25);
				}
				else
					return SendClientMessage(playerid, -1, "That player does not ");
			}
		}
		else if(strcmp(usage, "speed", true) == 0)
		{
			tmp = Player[id][Speed];
			Player[id][Speed] = value;
		}
		else if(!strcmp(usage, "nmutes", true))
		{
			tmp = Player[id][nMutedLevel];
			Player[id][nMutedLevel] = value;
		}
		else if(!strcmp(usage, "vmutes", true))
		{
			tmp = Player[id][vMutedLevel];
			Player[id][vMutedLevel] = value;
		}
		else if(!strcmp(usage, "hunger", true))
		{
			tmp = Player[id][HungerLevel];
			Player[id][HungerLevel] = value;

			SetPlayerProgressBarValue(id, Hunger[id], Player[id][HungerLevel]);
			UpdatePlayerProgressBar(id, Hunger[id]);
			RefreshHunger(id);
		}
		else if(!strcmp(usage, "gang", true))
		{
			tmp = Player[id][Gang];
			Player[id][Gang] = value;
		}
		else if(!strcmp(usage, "gangrank", true))
		{
			tmp = Player[id][GangRank];
			Player[id][GangRank] = value;
		}
		else if(!strcmp(usage, "boombox", true))
		{
			tmp = Player[id][HasBoombox];
			Player[id][HasBoombox] = value;
		}
		else if(!strcmp(usage, "carsdropped", true))
		{
			tmp = Player[id][TotalCarsDropped];
			Player[id][TotalCarsDropped] = value;
		}
		else if(!strcmp(usage, "carjackerxp", true))
		{
			tmp = Player[id][CarJackerXP];
			Player[id][CarJackerXP] = value;
		}
		else if(!strcmp(usage, "loyaltystreak", true))
		{
			tmp = Player[id][LoyaltyStreak];
			Player[id][LoyaltyStreak] = value;
			
			new day, month, year, date;
			getdate(year, month, day), date = getdate();
			Player[id][LastLoyaltyDay] = date;
			Player[id][LastLoyaltyMonth] = month;
			Player[id][LastLoyaltyYear] = year;
		}
		else
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /set [playerid] [item] [value]");
			SendClientMessage(playerid, GREY, "Usages: Health, Cocaine, Pot, Job, job2, Phone, Interior, House, streetmats, standardmats, militarymats, Skin");
			SendClientMessage(playerid, GREY, "Usages: FailedHits, SuccessfulHits, Bank, PlayingHours, CriminalOffences, Rope, Rags, Age, AchievementPoints, CheckBalance, GunXP, Tokens");
			SendClientMessage(playerid, GREY, "Usages: Business, Faction, FactionRank, Gang, GangRank, Money, CocaineArmour, Armour, VirtualWorld");
			return SendClientMessage(playerid, GREY, "Usages: Casts, Tempbanlevel, Rallycp, Race, PizzaRuns, CasinoChips, HotelRoom, CarLicense, TruckLicense, Speed, nmutes, vmutes, hunger, carsdropped, carjackerxp");
		}

		format(string, sizeof(string), "You have set %s's %s to %d (was %d).", GetName(id), usage, value, tmp);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "%s has set %s's %s to %d.", Player[playerid][AdminName], GetName(id), usage, value);
		AdminActionsLog(string);
		format(string, sizeof(string), "%s has set %s's %s to %d (was %d).", Player[playerid][AdminName], GetName(id), usage, value, tmp);
		StatLog(string);
	}

	return 1;
}

command(lockhq, playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "You can't do this from a vehicle.");

	if((Player[playerid][Group] >= 1 && Player[playerid][GroupRank] >= 5) || (Player[playerid][Group] == 3 && Player[playerid][GroupRank] > 0))
	{
		if(strval(params) == 0 || strval(params) == 1)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 6.0, Groups[Player[playerid][Group]][HQInteriorX], Groups[Player[playerid][Group]][HQInteriorY],  Groups[Player[playerid][Group]][HQInteriorZ]) && !IsPlayerInRangeOfPoint(playerid, 6.0, Groups[Player[playerid][Group]][HQExteriorX], Groups[Player[playerid][Group]][HQExteriorY], Groups[Player[playerid][Group]][HQExteriorZ]))
				return SendClientMessage(playerid, -1, "You aren't close enough to your first HQ door!");

			new string[128];
			if(Groups[Player[playerid][Group]][HQLock] == 0)
			{
				Groups[Player[playerid][Group]][HQLock] = 1;
				format(string, sizeof(string), "* %s uses their keys to lock the doors of the building.", GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, string);
				SendClientMessage(playerid, WHITE, "You have locked your HQ.");
			}
			else
			{
				Groups[Player[playerid][Group]][HQLock] = 0;
				format(string, sizeof(string), "* %s uses their keys to unlock the doors of the building.", GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, string);
				SendClientMessage(playerid, WHITE, "You have un-locked your HQ.");
			}
		}
		else if(strval(params) == 2)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 6.0, Groups[Player[playerid][Group]][HQExterior2][0], Groups[Player[playerid][Group]][HQExterior2][1], Groups[Player[playerid][Group]][HQExterior2][2]) && !IsPlayerInRangeOfPoint(playerid, 6.0, Groups[Player[playerid][Group]][HQInterior2][0], Groups[Player[playerid][Group]][HQInterior2][1], Groups[Player[playerid][Group]][HQInterior2][2]))
				return SendClientMessage(playerid, -1, "You aren't close enough to your second HQ door!");

			new string[128];
			if(Groups[Player[playerid][Group]][HQLock2] == 0)
			{
				Groups[Player[playerid][Group]][HQLock2] = 1;
				format(string, sizeof(string), "* %s uses their keys to lock the doors of the building.", GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, string);
				SendClientMessage(playerid, WHITE, "You have locked your HQ.");
			}
			else
			{
				Groups[Player[playerid][Group]][HQLock2] = 0;
				format(string, sizeof(string), "* %s uses their keys to unlock the doors of the building.", GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, string);
				SendClientMessage(playerid, WHITE, "You have un-locked your HQ.");
			}
		}
		else return SendClientMessage(playerid, -1, "SYNTAX: /lockhq <1/2>");
	}
	return 1;
}

command(factiontype, playerid, params[])
{
	new GroupID, GroupType, string[128];
	if(sscanf(params, "dd", GroupID, GroupType))
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /factiontype [faction ID] [faction Type]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			if(DoesFactionExist(GroupID))
			{
				Groups[GroupID][CommandTypes] = GroupType;
				format(string, sizeof(string), "You have set %s's faction type to %d.", Groups[GroupID][GroupName], GroupType);
				SendClientMessage(playerid, WHITE, string);
				SaveGroup(GroupID);
			}
			else
			{
				SendClientMessage(playerid, WHITE, "Invalid faction ID!");
			}
		}
	}
	return 1;
}

command(factionskins, playerid, params[])
{
	new skin, skinslot, GroupID, string[128];
	if(sscanf(params, "ddd", GroupID, skinslot, skin))
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /factionskins [faction ID] [Skin Slot (0-10)] [Skin ID]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			if(DoesFactionExist(GroupID))
			{
				if(skinslot < 11 && skinslot >= 0)
				{
					if(IsGroupSkin(skin) == 0)
					{
						switch(skinslot)
						{
							case 0: Groups[GroupID][Skin0] = skin;
							case 1: Groups[GroupID][Skin1] = skin;
							case 2: Groups[GroupID][Skin2] = skin;
							case 3: Groups[GroupID][Skin3] = skin;
							case 4: Groups[GroupID][Skin4] = skin;
							case 5: Groups[GroupID][Skin5] = skin;
							case 6: Groups[GroupID][Skin6] = skin;
							case 7: Groups[GroupID][Skin7] = skin;
							case 8: Groups[GroupID][Skin8] = skin;
							case 9: Groups[GroupID][Skin9] = skin;
							case 10: Groups[GroupID][Skin10] = skin;
						}

						format(string, sizeof(string), "You have changed '%s' skin slot %d, to skin %d.", Groups[GroupID][GroupName], skinslot, skin);
						SendClientMessage(playerid, WHITE, string);
					}
					else
					{
						format(string, sizeof(string), "This skin is already registered to '%s'.", Groups[IsGroupSkin(skin)][GroupName]);
						SendClientMessage(playerid, WHITE, string);
					}
				}
				else
				{
					SendClientMessage(playerid, WHITE, "Invalid Skin slot ID! Slots are from 0-10.");
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "You must specify a valid faction ID.");
			}
		}
	}
	return 1;
}

command(changeranks, playerid, params[])
{
	new rankname[128], rank, string[128];
	if(sscanf(params, "ds[128]", rank, rankname))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /changeranks [rank slot (0-10)] [new name]");
	}
	else
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 9 && Player[playerid][GroupRank] < 6)
			return SendClientMessage(playerid, -1, "You must be rank 8 or higher to do this.");

		if(Player[playerid][GroupRank] >= 6 && Player[playerid][Group] >= 1)
		{
			if(rank < 11 && rank > 0)
			{
				if(strlen(rankname) >= 1 && strlen(rankname) < 20)
				{
					switch(rank)
					{
						case 0: format(Groups[Player[playerid][Group]][RankName0], 255, "%s", rankname);
						case 1: format(Groups[Player[playerid][Group]][RankName1], 255, "%s", rankname);
						case 2: format(Groups[Player[playerid][Group]][RankName2], 255, "%s", rankname);
						case 3: format(Groups[Player[playerid][Group]][RankName3], 255, "%s", rankname);
						case 4: format(Groups[Player[playerid][Group]][RankName4], 255, "%s", rankname);
						case 5: format(Groups[Player[playerid][Group]][RankName5], 255, "%s", rankname);
						case 6: format(Groups[Player[playerid][Group]][RankName6], 255, "%s", rankname);
						case 7: format(Groups[Player[playerid][Group]][RankName7], 255, "%s", rankname);
						case 8: format(Groups[Player[playerid][Group]][RankName8], 255, "%s", rankname);
						case 9: format(Groups[Player[playerid][Group]][RankName9], 255, "%s", rankname);
						case 10: format(Groups[Player[playerid][Group]][RankName10], 255, "%s", rankname);
					}

					format(string, sizeof(string), "You have changed rank %d's name to %s.", rank, rankname);
					SendClientMessage(playerid, WHITE, string);
				}
				else
				{
					SendClientMessage(playerid, WHITE, "Rank name length can't be longer than 20 characters, or shorter than 1.");
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "Invalid Rank ID! Ranks start from 0-6.");
			}
		}
	}
	return 1;
}

command(remoteuninvite, playerid, params[])
{
	new Name[128], Result = -1;
	if(sscanf(params, "s[128]", Name))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /remoteuninvite [name]");
	}
	else
	{
		if(Player[playerid][GroupRank] >= 6 && Player[playerid][Group] >= 1)
		{
			if(strlen(Name) >= 1 && strlen(Name) < MAX_PLAYER_NAME)
			{
				foreach(Player, i)
				{
					if(strcmp(GetName(i), Name, true) == 0)
					{
						Result = i;
					}
				}

				if(Result == -1)
				{
					if(IsPlayerRegistered(Name))
					{
						new faction, factionrank, query[255];
						mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT `Group`, GroupRank FROM playeraccounts WHERE NormalName = '%e'", Name);
						new Cache:data = mysql_query(MYSQL_MAIN, query);

						if(!cache_get_row_count())
							return SendClientMessage(playerid, WHITE, "An error occured while uninvited that player.");

						faction = cache_get_field_content_int(0, "Group");
						factionrank = cache_get_field_content_int(0, "GroupRank");
						cache_delete(data);

						if(faction == Player[playerid][Group])
						{
							if(factionrank > Player[playerid][GroupRank])
							{
								SendClientMessage(playerid, WHITE, "You can't uninvite a higher rank.");
							}
							else
							{
								mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE playeraccounts SET `Group` = '0', GroupRank = '0', LastSkin = '0' WHERE NormalName = '%e'", Name);
								mysql_tquery(MYSQL_MAIN, query, "OnQueryFinish", "dddss", THREAD_FACTION_REMOTE_UNINVITE, playerid, 0, Name, "");
							}
						}
						else
						{
							SendClientMessage(playerid, WHITE, "That person isn't in the same faction as you.");
						}
					}
					else
					{
						SendClientMessage(playerid, WHITE, "Invalid name.");
					}
				}
				else
				{
					SendClientMessage(playerid, WHITE, "That player is connected, use /uninvite.");
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "Invalid name.");
			}
		}
		else
		{
			SendClientMessage(playerid, WHITE, "You're not a Group Leader.");
		}
	}
	return 1;
}

command(kick, playerid, params[])
{
	new id, reason[128], string[128];

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(sscanf(params, "us[128]", id, reason))
		return SendClientMessage(playerid, GREY, "SYNTAX: /kick [playerid] [reason]");

	if(!IsPlayerConnected(id))
		return SendClientMessage(playerid, -1, "That player isn't connected!");

	if(Player[id][AdminLevel] > Player[playerid][AdminLevel])
		return SendClientMessage(playerid, WHITE, "You can't kick a higher level administrator.");


	else
	{
		format(string, sizeof(string), "Kick: %s has been kicked by %s. Reason: \"%s\"", GetName(id), Player[playerid][AdminName], reason);
		SendToAdmins(LIGHTRED, string, 0);
		NearByMessage(id, LIGHTRED, string);
		format(string, sizeof(string), "%s has been kicked by %s. Reason: \"%s\"", GetName(id), Player[playerid][AdminName], reason);
		AdminActionsLog(string);
		format(string, sizeof(string), "You have been kicked from the server. Reason: \"%s\"", reason);
		SendClientMessage(id, WHITE, string);

		if(strfind(reason, "AFK", true) != -1) Player[id][AdminAfkKicks]++;

		KickEx(id);
		Player[playerid][AdminActions]++;
	}

	return 1;
}

command(adminname, playerid, params[])
{
	new name[128], id, string[128];
	if(sscanf(params, "us[128]", id, name))
	{
		if(Player[playerid][AdminLevel] >= 6)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /adminname [playerid] [new name]");
		}
	}
	else
	{
		if(!IsPlayerConnected(id))
			return SendClientMessage(playerid, -1, "That player is not connected.");

		if(Player[playerid][AdminLevel] >= 6)
		{
			if(Player[id][AdminLevel] >= 1)
			{
				if(strlen(name) > 1 && strlen(name) < MAX_PLAYER_NAME)
				{

					if(IsPlayerRegistered(name))
					{
						SendClientMessage(playerid, WHITE, "You can't select an admin name that is already an active account.");
					}
					else
					{
						format(string, sizeof(string), "Admin %s has changed %s's admin name to %s.", Player[playerid][AdminName], Player[id][AdminName], name);
						NamechangeLog(string);
						StatLog(string);
						SendToAdmins(ADMINORANGE, string, 0);

						format(Player[id][AdminName], 255, "%s", name);
						SetPVarString(id, "AdminName", name);

						if(Player[id][AdminDuty] >= 1)
						{
							SetPlayerNameEx(id, Player[id][AdminName]);
						}
					}
				}
				else
				{
					SendClientMessage(playerid, WHITE, "Invalid name. The name must exceed 1 character and be shorter than 24 characters.");
				}
			}
		}
	}
	return 1;
}

command(check, playerid, params[])
{
	new id;
	if(sscanf(params, "u", id))
	{
		if(Player[playerid][AdminLevel] >= 2)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /check [playerid]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 2)
		{
			if(IsPlayerConnectedEx(id))
			{
				ShowStatistics(playerid, id);
			}
			else
			{
				SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
			}
		}
	}
	return 1;
}

command(bbalance, playerid, params[])
{
	new businessid = Player[playerid][InBusiness];

	if(businessid == 0)
		return SendClientMessage(playerid, -1, "You must be inside a business to do this.");

	if(Businesses[businessid][bLinkedGroup] > 0)
	{
		if(!PlayerHasBusinessKey(playerid, businessid))
		{
			if(Businesses[businessid][bLinkedGroup] != Player[playerid][Group] && Player[playerid][InBusiness] != Player[playerid][Business])
				return SendClientMessage(playerid, -1, "You are not apart of this business group.");

			if(Player[playerid][GroupRank] < 6)
				return SendClientMessage(playerid, -1, "You must be rank 6 or higher to use this.");

			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Businesses[businessid][bSafeX], Businesses[businessid][bSafeY], Businesses[businessid][bSafeZ]))
				return SendClientMessage(playerid, -1, "You are not close enough to the safe location.");
		}
	}
	else
	{
		if(!PlayerHasBusinessKey(playerid, Player[playerid][InBusiness]) || Player[playerid][InBusiness] == 0)
			return SendClientMessage(playerid, -1, "You must be in a business you have a key to to do this.");
	}

	new string[128];
	SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------");
	format(string, sizeof(string), "Supplies: %d | Supply Price: %d | Garbage: %d", Businesses[Player[playerid][InBusiness]][bSupplies], Businesses[Player[playerid][InBusiness]][bSupplyPrice], Businesses[Player[playerid][InBusiness]][BusinessTrashAmount]);
	SendClientMessage(playerid, GREY, string);
	if(Businesses[Player[playerid][Business]][bType] == 16)
	{
		format(string, sizeof(string), "Gas: %d", Businesses[Player[playerid][InBusiness]][GasVolume]);
		SendClientMessage(playerid, GREY, string);
	}
	SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------");
	return 1;
}

command(respawncar, playerid, params[])
{
	if(Player[playerid][AdminLevel] < 4)
		return 1;

	if(isnull(params) || !IsNumeric(params))
	{
		if(IsPlayerInAnyVehicle(playerid))
			return SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	}

	new sql = strval(params), idx = GetVIndex(sql);

	if(!IsValidSQL(sql))
		return SendClientMessage(playerid, -1, "Invalid SQLID");

	new string[128];
	format(string, sizeof(string), "You have respawned vehicle SQLID %d.", sql);
	if(idx != -1)
		SetVehicleToRespawn(Veh[idx][Link]);
	return 1;
}

command(lockbusiness, playerid, params[])
{
	new b = Player[playerid][Business], b2 = Player[playerid][BusinessKey], string[128];

	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "You can't do this from a vehicle.");

	if(IsPlayerInRangeOfPoint(playerid, 5.0, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 5.0, Businesses[b][bInteriorX], Businesses[b][bInteriorY], Businesses[b][bInteriorZ]))
	{
		if(Businesses[b][bLockStatus] == 1)
		{
			Businesses[b][bLockStatus] = 0;
			format(string, sizeof(string), "* %s uses their key to unlock the business.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
		else
		{
			Businesses[b][bLockStatus] = 1;
			format(string, sizeof(string), "* %s uses their key to lock the business.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, Businesses[b2][bExteriorX], Businesses[b2][bExteriorY], Businesses[b2][bExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 5.0, Businesses[b2][bInteriorX], Businesses[b2][bInteriorY], Businesses[b2][bInteriorZ]))
	{
		if(Businesses[b2][bLockStatus] == 1)
		{
			Businesses[b2][bLockStatus] = 0;
			format(string, sizeof(string), "* %s uses their key to unlock the business.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
		else
		{
			Businesses[b2][bLockStatus] = 1;
			format(string, sizeof(string), "* %s uses their key to lock the business.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
	}
	else
		return SendClientMessage(playerid, -1, "You are not near a business door which you have a key to.");
	return 1;
}

command(mole, playerid, params[])
{
	if(Player[playerid][AdminLevel] >= 4)
	{
		new string[128], message[128];
		if(sscanf(params, "s[128]", message))
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /mole [message]");
		}
		else
		{
			Mole(message);
			format(string, sizeof(string), "You have sent the following mole: %s", message);
			SendClientMessage(playerid, WHITE, string);
			format(string, sizeof(string), "SMS from MOLE (555): %s", message);
			ICChatLog(string);
			format(string, sizeof(string), "Mole: %s has sent \"%s\" to all players.", Player[playerid][AdminName], message);
			AdminActionsLog(string);
		}
	}
	return 1;
}


command(admincommands, playerid, params[])
{
	#pragma unused params
	SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------");

	if(Player[playerid][AdminLevel] >= 1)
	{
		SendClientMessage(playerid, WHITE, "Level 1 Admin: /a, /maccept, /mtrash, /mfinish, /mlist, /nmute, /setpin, /vmute, /hours, /askban, /playerwarns,");
	}

	if(Player[playerid][AdminLevel] >= 2)
	{
		SendClientMessage(playerid, GREY, "Level 2 Admin: /acceptreport, /adminduty, /agotobusiness, /gotofaction, /agotohouse, /agotojob, /announce, /aw, /remoteaw, /gotopoint, /adminbreakin");
		SendClientMessage(playerid, GREY, "Level 2 Admin: /award, /belt, /check, /checkbusiness, /checkhouse, /checkfaction, /checkweapons, /closestcar, /back, /sendback");
		SendClientMessage(playerid, GREY, "Level 2 Admin: /confiscate, /fine, /finebank, /finetokens, /freeze, /forcetutorial, /get, /getcar, /go, /goto, /toyban, /remotetoyban");
		SendClientMessage(playerid, GREY, "Level 2 Admin: /gotocar, /highestz, /kick, /lastcar, /listfactions, /listgskins, /listjobs, /listlotterywinners, /mute, /vacantadspots");
		SendClientMessage(playerid, GREY, "Level 2 Admin: /notetoplayer, /prison, /lottery, /remotecheck, /remotefine, /remoteprison, /remotewarn, /reportban, /movepoint");
		SendClientMessage(playerid, GREY, "Level 2 Admin: /reports, /slap, /spec, /specoff, /status, /togglenewbie, /togglevip, /trash, /vsearch, /warn, /serverstats");
		SendClientMessage(playerid, GREY, "Level 2 Admin: /listbusinesses, /searchip, /checkwalkie, /checkhotelroom, /togwarnings, /eventwinner, /specveh, /searchnumber");
		SendClientMessage(playerid, GREY, "Level 2 Admin: /as, /checkvehicle, /liststashes, /checkstash, /gotopayphone, /searchloc, /adminnote, /clearnote, /avoid, /remoteavoid");
		SendClientMessage(playerid, GREY, "Level 2 Admin: /listgangs, /gotogang, /tempbanrecord, /gotodrugsupplyposition, /checkgang,  /testradius, /noobs, /remotetokens");
		SendClientMessage(playerid, GREY, "Level 2 Admin: /gotodoorgate, /viewdoorgatelabels, /checkgarage, /gotogarage, /pl, /gotoparkcarbanzone, /intmenu, /gotomatdrop, /listtents, /tentban");
		SendClientMessage(playerid, GREY, "Level 2 Admin: /maskban, /listmasks, /unmask");
	}

	if(Player[playerid][AdminLevel] >= 3)
	{
		SendClientMessage(playerid, WHITE, "Level 3 Admin: /adivorce, /agiveweapon, /ban, /banip, /changename, /changeviplevel, /gunname, /remoteban, /pskill");
		SendClientMessage(playerid, WHITE, "Level 3 Admin: /remotechangeviplevel, /remoteset, /remotesetgender, /remotetempban, /resetnmutes, /resetpass, /resetplayer");
		SendClientMessage(playerid, WHITE, "Level 3 Admin: /resetwarn(s), /remoteresetwarn(s), /set, /setgender, /tempban, /sethotelroom, /remotesethotelroom");
		SendClientMessage(playerid, WHITE, "Level 3 Admin: /removeallpdobjects, /deletestash, /setplayerweather, /modduty, /togglecollisions, /remotesethotelroom, /sethotelroom");
	}

	if(Player[playerid][AdminLevel] >= 4)
	{
		SendClientMessage(playerid, GREY, "Level 4 Admin: /adddev, /asnd, /xsnd, /beginjump, /betainvite, /betauninvite, /changeranktitle, /clearchat");
		SendClientMessage(playerid, GREY, "Level 4 Admin: /despawncar, /destroyvehicles, /editvehicle, /endevent, /endround, /explode, /aexplode, /highvolume, /afk");
		SendClientMessage(playerid, GREY, "Level 4 Admin: /mole, /nsnd, /parajump, /quizhint, /reloadbans, /respawncar, /respawnallcars, /setglobalweather");
		SendClientMessage(playerid, GREY, "Level 4 Admin: /respawnfactioncars, /savevehicle, /sban, /setweather, /snd, /spawncar, /startround, /startevent, /startjump, /getincar");
		SendClientMessage(playerid, GREY, "Level 4 Admin: /unban, /unbanip, /vehname, /setupevent, /continue, /startrally, /startevent, /startderby, /endevent, /respawnplayerscars, /respawnjobcars, /respawnclosestcars");
	}

	if(Player[playerid][AdminLevel] >= 5)
	{
		SendClientMessage(playerid, WHITE, "Level 5 Admin: /adisbandgroup, /asellbusiness, /asellhouse, /businessprice, /businesstype, /changejobmessage, /changejobname");
		SendClientMessage(playerid, WHITE, "Level 5 Admin: /cleartickets, /createbusiness, /creategroup, /createhouse, /createjob, /endlottery, /gotopoint, /groupname, /disguise");
		SendClientMessage(playerid, WHITE, "Level 5 Admin: /gskins, /gtype, /houseprice, /movebusiness, /movegroup, /movehouse, /movejob, /movelocation, /setbusinesssupplies");
		SendClientMessage(playerid, WHITE, "Level 5 Admin: /setleader, /ticketprice, /togglelottery, /partybus, /setjobtext, /setjobtype, /editroom, /finebusiness, /checkgroupmembers");
		SendClientMessage(playerid, WHITE, "Level 5 Admin: /unmuteall, /muteall, /maxgroupsize, /setpizzapoint, /gotoobject, /createobject, /editobject, /deleteobject, /setadprice");
		SendClientMessage(playerid, WHITE, "Level 5 Admin: /creategang, /gmakeleader, /gangtype, /gangname /editdrugsupplyposition, /createdoor, /creategate, /editdoorgate, /showstatus");
		SendClientMessage(playerid, WHITE, "Level 5 Admin: /deletefirework, /launchfireworks, /placefirework, /changefwstate, /creategarage, /linkgarage, /editgarage, /placeparkcarbanzone");
		SendClientMessage(playerid, WHITE, "Level 5 Admin: /placehotelroom, /aedithotelroom, /movematdrop, /resetmatdrop, /setbusinesstrash, /listparkcarbanzones, /resetdrugtimer");
	}
	if(Player[playerid][AdminLevel] >= 6)
	{
		SendClientMessage(playerid, GREY, "Level 6 Admin: /adminname, /hostname, /savedata, /editdrivingtest, /finishtestedit");
		SendClientMessage(playerid, GREY, "Level 6 Admin: /editradio, /matsafe, /createrally, /deleterally, /completerally, /vehregistrationcost");
		SendClientMessage(playerid, GREY, "Level 6 Admin: /refillgasstation, /refilldeliverersupplies, /checkdeliverersupplies");
		SendClientMessage(playerid, GREY, "Level 6 Admin: /changetrashpos, /changegarbagepay, /toggleadvertisements, /toggledropcar, /disbandgang, /prisonmenu");
	}

	if(Player[playerid][AdminLevel] >= 7)
	{
		SendClientMessage(playerid, WHITE, "Level 7 Admin: /changeadminlevel, /remotechangeadminlevel, /settaxfaction, /viphns, /resetpin, /createannouncement, /removeannouncement");
	}

	if(Player[playerid][AdminLevel] > 7)
		SendClientMessage(playerid, GREY, "Level 8 Admin: /emptygasstations");
		
	SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------");
	return 1;
}

command(savedata, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 6)
	{
		SaveGeneralData();
		SendClientMessage(playerid, WHITE, "All general data saved (accounts, groups, houses and businesses).");
	}
	return 1;
}

command(redeemcheck, playerid, params[])
{
	new string[255];
	#pragma unused params

	if(!IsPlayerInRangeOfPoint(playerid, 1.5, Businesses[Player[playerid][InBusiness]][bInteractX], Businesses[Player[playerid][InBusiness]][bInteractY], Businesses[Player[playerid][InBusiness]][bInteractZ]) && Player[playerid][InBusiness] != 0)
		return SendClientMessage(playerid, GREY, "You must stand near the interaction point to do this.");

	if(Businesses[Player[playerid][InBusiness]][bType] == 18)
	{
		if(Player[playerid][BankStatus] == 1)
		{
			SendClientMessage(playerid, WHITE, "Your bank account has been suspended by the authorities!");
		}
		else
		{
			if(Player[playerid][CheckBalance] >= 1)
			{
				format(string, sizeof(string), "[CHECK] %s has cashed in their check(s) for $%s ($%s).", GetName(playerid), IntToFormattedStr(Player[playerid][CheckBalance]), IntToFormattedStr(Player[playerid][BankMoney] + Player[playerid][CheckBalance]));
				MoneyLog(string);
				format(string, sizeof(string), "You have redeemed $%s, it has been added to your bank balance.", IntToFormattedStr(Player[playerid][CheckBalance]));
				SendClientMessage(playerid, WHITE, string);
				format(string, sizeof(string), "{009900}Old balance: {FFFFFF}%s | {009900}New balance: {FFFFFF}%s", PrettyMoney(Player[playerid][BankMoney]), PrettyMoney(Player[playerid][BankMoney] + Player[playerid][CheckBalance]));
				SendClientMessage(playerid, WHITE, string);
				Player[playerid][BankMoney] += Player[playerid][CheckBalance];
				Player[playerid][CheckBalance] = 0;
			}
			else
			{
				SendClientMessage(playerid, WHITE, "There is no money on your check balance.");
			}
		}
	}
	return 1;
}

CMD:getid(playerid, params[])
{
	new string[128], ids[5];
	if(sscanf(params, "u[5]", ids))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /getid [playerid/name]");
	}
	else
	{
		SendClientMessage(playerid, WHITE, "The following players match the given input:");
		SendClientMessage(playerid, WHITE, "---------------------------------------------");
		new i;
		for(i = 0; ids[i] != INVALID_PLAYER_ID; ++i)
		{
			if(ids[i] == cellmin)
			{
				SendClientMessage(playerid, WHITE, "More results found but not shown... Try refining your search");
				break;
			}
			
			format(string, sizeof(string), "%s (%d)", GetName(ids[i]), ids[i]);
			SendClientMessage(playerid, GREY, string);
		}
		if(i == 0)
			SendClientMessage(playerid, WHITE, "No players founded matching that name...");
		
		SendClientMessage(playerid, WHITE, "---------------------------------------------");
	}
	return 1;
}

command(eject, playerid, params[])
{
	new string[128], id;
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /eject [playerid]");
	}
	else
	{
		if(GetPlayerState(playerid) == 2)
		{
			if(GetPlayerVehicleID(id) == GetPlayerVehicleID(playerid))
			{
				format(string, sizeof(string), "* %s has ejected %s from their vehicle.", GetNameEx(playerid), GetNameEx(id));
				NearByMessage(playerid, NICESKY, string);
				RemovePlayerFromVehicle(id);
			}
		}
		else
		{
			SendClientMessage(playerid, WHITE, "You're not the driver.");
		}
	}
	return 1;
}

command(flipcoin, playerid, params[])
{
	#pragma unused params
	new string[128];

	switch(random(6))
	{
		case 0..2: format(string, sizeof(string), "* %s has withdrawn a coin, and flips it. Getting the 'HEADS' side.", GetNameEx(playerid));
		case 3..5: format(string, sizeof(string), "* %s has withdrawn a coin, and flips it. Getting the 'TAILS' side.", GetNameEx(playerid));
	}
	NearByMessage(playerid, NICESKY, string);

	return 1;
}

command(explode, playerid, params[])
{
	new	userid, string[128];
	if(sscanf(params, "u", userid))
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /explode [playerid]");
		}
	}
	else
	{
		if(IsPlayerConnectedEx(userid))
		{
			if(Player[playerid][AdminLevel] >= 4)
			{
				if(userid == INVALID_PLAYER_ID)
				{
					SendClientMessage(playerid, WHITE, "Invalid ID.");
					return 1;
				}
				else
				{
					if(Player[playerid][AdminLevel] >= Player[userid][AdminLevel])
					{
						new Float:px, Float:py, Float:pz;
						GetPlayerPos(userid, px, py, pz);
						SetPlayerHealth(userid, 50);
						CreateExplosion(px+10, py, pz, 7, 100.0);
						CreateExplosion(px, py+10, pz, 7, 100.0);
						CreateExplosion(px-10, py, pz, 7, 100.0);
						CreateExplosion(px, py-10, pz, 7, 100.0);
						CreateExplosion(px, py, pz, 7, 100.0);
						format(string, sizeof(string), "You have exploded %s.", GetName(userid));
						SendClientMessage(playerid, WHITE, string);
					}
				}
			}
		}
		else
		{
			SendClientMessage(playerid, WHITE, "That player is not connected or is logged in.");
		}
	}
	return 1;
}

command(slap, playerid, params[])
{
	//new string[128], id, Float: pX, Float: pY, Float: pZ, MathsFlaw, Float: Mathematical;
	new string[128], id, Float: pX, Float: pY, Float: pZ, Float:phealth;
	if(sscanf(params, "u", id))
	{
		if(Player[playerid][AdminLevel] >= 2)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /slap [playerid]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 2)
		{
			if(IsPlayerConnectedEx(id))
			{
				if(Player[playerid][AdminLevel] >= Player[id][AdminLevel])
				{
					ClearAnimations(id);

					GetPlayerPos(id, pX, pY, pZ);
					SetPlayerPos_Update(id, pX, pY, pZ+5);
					PlayerPlayNearbySound(id,1190);

					GetPlayerHealth(id, phealth);
					//MathsFlaw = floatround(Mathematical, floatround_ceil);

					if(Player[id][AdminDuty] < 1 && Player[id][AdminFrozen] < 1)
						SetPlayerHealth(id, phealth-5);

					format(string, sizeof(string), "You have slapped %s.", GetName(id));
					SendClientMessage(playerid, WHITE, string);
					format(string, sizeof(string), "%s has been slapped by an admin.", GetName(id));
					NearByMessage(id, NICESKY, string);
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
			}
		}
	}
	return 1;
}

command(belt, playerid, params[])
{
	new string[128], id, Float: pX, Float: pY, Float: pZ;
	if(sscanf(params, "u", id))
	{
		if(Player[playerid][AdminLevel] >= 2)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /belt [playerid]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 2)
		{
			if(IsPlayerConnectedEx(id))
			{
				if(Player[playerid][AdminLevel] >= Player[id][AdminLevel])
				{
					GetPlayerPos(id, pX, pY, pZ);
					SetPlayerPos_Update(id, pX+21, pY+-16, pZ+16);

					format(string, sizeof(string), "You have whipped %s with your huge belt!", GetName(id));
					SendClientMessage(playerid, WHITE, string);
					format(string, sizeof(string), "%s has been whipped by the almighty belt.", GetName(id));
					NearByMessage(id, NICESKY, string);
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
			}
		}
	}
	return 1;
}

stock BusinessTypeName(btype)
{
	new name[64];
	switch(btype)
	{
		case 1: format(name, sizeof(name), "24/7");
		case 2: format(name, sizeof(name), "Clothing");
		case 3: format(name, sizeof(name), "Club/Bar/Restaurant");
		case 4: format(name, sizeof(name), "Advertisement Agency");
		case 5: format(name, sizeof(name), "Sex Shop");
		case 6: format(name, sizeof(name), "Upper Class Dealership");
		case 7: format(name, sizeof(name), "College");
		case 8: format(name, sizeof(name), "Charity");
		case 9: format(name, sizeof(name), "Church");
		case 10: format(name, sizeof(name), "Gym");
		case 11: format(name, sizeof(name), "Pharmacy");
		case 12: format(name, sizeof(name), "Club/Bar/Restaurant");
		case 13: format(name, sizeof(name), "Marina");
		case 14: format(name, sizeof(name), "Lower Class Dealership");
		case 15: format(name, sizeof(name), "Hardware Store");
		case 16: format(name, sizeof(name), "Gas Station");
		case 17: format(name, sizeof(name), "Hospital");
		case 18: format(name, sizeof(name), "Bank");
		case 19: format(name, sizeof(name), "Hotel");
		case 20: format(name, sizeof(name), "Bike Shop");
		case 21: format(name, sizeof(name), "Van dealer");
		case 22: format(name, sizeof(name), "Furniture Store");
		case 23: format(name, sizeof(name), "Pizza Store");
		case 24: format(name, sizeof(name), "Real Estate");
		case 25: format(name, sizeof(name), "Crowdfunding");
		default: format(name, sizeof(name), "None");
	}
	return name;
}

CMD:listbusinesses(playerid, params[])
{
	if(Player[playerid][AdminLevel] >= 2)
	{
		if(isnull(params))
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /listbusinesses [type]");
			SendClientMessage(playerid, GREY, "Types: 1 - 24/7 | 2 - Clothing | 3 - Club/Restaurant | 4 - Advertisement Agency | 5 - Sex Shop | 6 - Auto Bahn");
			SendClientMessage(playerid, GREY, "Types: 7 - College | 8 - Charity | 9 - Church | 10 - Gym | 11 - Pharmacy | 12 - Club/Restaurant");
			SendClientMessage(playerid, GREY, "Types: 13 - Marina (boat & fishing) | 14 - Shody Used Autos | 15 - Hardware Store | 16 - Gas Station");
			SendClientMessage(playerid, GREY, "Types: 17 - Hospital | 18 - Bank | 19 - Hotel | 20 - Bike Shop | 21 - Van Dealership | 22 - Furniture Store");
			return SendClientMessage(playerid, GREY, "Types: 23 - Pizza Store | 24 - Real Estate | 25 - Crowdfunding");
		}
		//new string[1024];

		/*if(!strcmp(params, "all", true))
		{
			for(new i; i<MAX_BUSINESSES; i++)
			{
				if(strcmp(" ", Businesses[i][bName], true))
				{
					format(string, sizeof(string), "%s%i | %s | Owner: %s | Type: %s (%i)\n", string, i, Businesses[i][bName] , Businesses[i][bOwner], BusinessTypeName(Businesses[i][bType]), Businesses[i][bType]);
				}
			}
			ShowPlayerDialog(playerid, BUSINESS_LIST_DIALOG, DIALOG_STYLE_LIST, "Business List", string, "Teleport", "Exit");
		}*/
		if(IsNumeric(params))
		{
			new id = strval(params);
			if(id < 0 || id > 25)
				return SendClientMessage(playerid, -1, "Invalid ID");

			ShowPlayerDialog(playerid, BUSINESS_LIST_DIALOG, DIALOG_STYLE_LIST, "Business List", GetBusinessList(playerid, id), "Teleport", "Exit");
		}
		else
		{
			SendClientMessage(playerid, -1, "Invalid choice");
		}
	}
	return 1;
}

stock GetBusinessList(playerid, biztype, startingid = 1)
{
	new string[1024], count;
	for(new i = startingid; i<MAX_BUSINESSES; i++)
	{
		if(Businesses[i][bType] == biztype)
		{
			format(string, sizeof(string), "%s%i | %s | Owner: %s | Type: %s (%i)\n", string, i, Businesses[i][bName], Businesses[i][bOwner], BusinessTypeName(Businesses[i][bType]), Businesses[i][bType]);
			count++;
			
			if(count == 10)
			{
				format(string, sizeof(string), "%sNext Page", string);
				SetPVarInt(playerid, "LIST_BIZ_LAST_ID", i);
				SetPVarInt(playerid, "LIST_BIZ_LAST_TYPE", biztype);
				break;
			}
		}
	}
	if(count == 0)
		format(string, sizeof(string), "No businesses found...");
	
	return string;
}

command(createbusiness, playerid, params[])
{
	new Usage[128], string[128];
	if(sscanf(params, "s[128]", Usage))
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /createbusiness [usage]");
			SendClientMessage(playerid, GREY, "Usage: Interior, Exterior or Complete.");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			if(strcmp(Usage, "exterior", true) == 0)
			{
				Player[playerid][BusinessExterior]++;
				Player[playerid][bExtID] = GetPlayerInterior(playerid);
				GetPlayerPos(playerid, Player[playerid][bExtX], Player[playerid][bExtY], Player[playerid][bExtZ]);
				format(string, sizeof(string), "Exterior set! (X: %f, Y: %f, Z: %f).", Player[playerid][bExtX], Player[playerid][bExtY], Player[playerid][bExtZ]);
				SendClientMessage(playerid, WHITE, string);
			}
			if(strcmp(Usage, "interior", true) == 0)
			{
				Player[playerid][BusinessInterior]++;
				Player[playerid][bIntID] = GetPlayerInterior(playerid);
				GetPlayerPos(playerid, Player[playerid][bIntX], Player[playerid][bIntY], Player[playerid][bIntZ]);
				format(string, sizeof(string), "Interior set! (X: %f, Y: %f, Z: %f).", Player[playerid][bIntX], Player[playerid][bIntY], Player[playerid][bIntZ]);
				SendClientMessage(playerid, WHITE, string);
			}
			if(strcmp(Usage, "complete", true) == 0)
			{
				if(Player[playerid][BusinessInterior] > 0 || Player[playerid][BusinessExterior] > 0)
				{
					new NewBusinessID = SpawnedBusinesses+1;

					if(NewBusinessID >= MAX_BUSINESSES)
					{
						SendClientMessage(playerid, WHITE, "Too many businesses are currently spawned!");
					}

					if(!DoesBusinessExist(NewBusinessID))
					{
						Businesses[NewBusinessID][bInteriorID] = Player[playerid][bIntID];
						Businesses[NewBusinessID][bExteriorID] = Player[playerid][bExtID];
						Businesses[NewBusinessID][bInteriorX] = Player[playerid][bIntX];
						Businesses[NewBusinessID][bInteriorY] = Player[playerid][bIntY];
						Businesses[NewBusinessID][bInteriorZ] = Player[playerid][bIntZ];
						Businesses[NewBusinessID][bExteriorX] = Player[playerid][bExtX];
						Businesses[NewBusinessID][bExteriorY] = Player[playerid][bExtY];
						Businesses[NewBusinessID][bExteriorZ] = Player[playerid][bExtZ];
						format(Businesses[NewBusinessID][bOwner], 255, "Nobody");
						Businesses[NewBusinessID][bLockStatus] = 1;
						Businesses[NewBusinessID][bPrice] = 0;
						Businesses[NewBusinessID][bType] = 0;
						format(Businesses[NewBusinessID][bName], 255, "Nothing");
						format(Businesses[NewBusinessID][bKeyOwner1], 25, "Nobody");
						format(Businesses[NewBusinessID][bKeyOwner2], 25, "Nobody");
						Businesses[NewBusinessID][bPickupID] = CreateDynamicPickup(1239, 23, Businesses[NewBusinessID][bExteriorX], Businesses[NewBusinessID][bExteriorY], Businesses[NewBusinessID][bExteriorZ], 0, -1, -1, 150.0);
						Businesses[NewBusinessID][RadioInstalled] = 0;

						Businesses[NewBusinessID][bLinkedGroup] = 0;
						Businesses[NewBusinessID][bMaterials][0] = 0;
						Businesses[NewBusinessID][bMaterials][1] = 0;
						Businesses[NewBusinessID][bMaterials][2] = 0;
						Businesses[NewBusinessID][bCocaine] = 0;
						Businesses[NewBusinessID][bPot] = 0;
						Businesses[NewBusinessID][bSpeed] = 0;
						Businesses[NewBusinessID][bSafeX] = 0.00;
						Businesses[NewBusinessID][bSafeY] = 0.00;
						Businesses[NewBusinessID][bSafeZ] = 0.00;

						Businesses[NewBusinessID][ORM_ID] = orm_create("businesses");
						SetupBusinessORM(NewBusinessID);
						orm_setkey(Businesses[NewBusinessID][ORM_ID], "BusinessSQL");
						

						UpdateObjectLabel(NewBusinessID, LABEL_TYPE_BIZ, .create = 1);
						SaveBusiness(NewBusinessID, 1);

						new type;
						switch(Businesses[NewBusinessID][bType])
						{
							case 1: type = 17;
							case 2: type = 45;
							case 3: type = 49;
							case 6: type = 55;
							case 10: type = 54;
							case 11: type = 23;
							case 12: type = 50;
							case 13: type = 9;
							case 14: type = 55;
							case 15: type = 48;
							case 16: type = 36;
							case 17: type = 22;
							case 18: type = 52;
							case 19: type = 31;
							default: type = -1;
						}
						if(type != -1)
							Businesses[NewBusinessID][bPickupID] = CreateDynamicPickup(1239, 23, Businesses[NewBusinessID][bExteriorX], Businesses[NewBusinessID][bExteriorY], Businesses[NewBusinessID][bExteriorZ], 0, 0, -1, 150.0);

						Player[playerid][BusinessExterior]--;
						Player[playerid][BusinessInterior]--;

						SpawnedBusinesses++;
						SendClientMessage(playerid, NICESKY, "Successfully created business!");
						format(string, sizeof(string), "Please now proceed to use /businesstype and /businessprice (ID: %d)", NewBusinessID);
						SendClientMessage(playerid, WHITE, string);
						SetPlayerInterior(playerid, Businesses[NewBusinessID][bExteriorID]);
						SetPlayerPos_Update(playerid, Businesses[NewBusinessID][bExteriorX], Businesses[NewBusinessID][bExteriorY], Businesses[NewBusinessID][bExteriorZ]);
					}
					else
					{
						SendClientMessage(playerid, WHITE, "Error: File already exists!");
					}
				}
				else
				{
					SendClientMessage(playerid, WHITE, "You must select an exterior and an interior first!");
				}
			}
		}
	}
	return 1;
}

command(wiretransfer, playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 1.5, Businesses[Player[playerid][InBusiness]][bInteractX], Businesses[Player[playerid][InBusiness]][bInteractY], Businesses[Player[playerid][InBusiness]][bInteractZ]) && Player[playerid][InBusiness] != 0)
		return SendClientMessage(playerid, GREY, "You must stand near the interaction point to do this.");

	new string[255], id, amount;
	if(sscanf(params, "ud", id, amount))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /wiretransfer [playerid] [amount]");
	}
	else
	{
		if(id == playerid)
			return SendClientMessage(playerid, -1, "You cannot wiretransfer yourself money.");
		if(IsPlayerConnectedEx(id))
		{
			if(Player[playerid][PlayingHours] < 2)
				return SendClientMessage(playerid, -1, "You cannot give money to someone while you have less than 2 playing hours.");

			if(Player[playerid][BankMoney] >= amount)
			{
				if(Businesses[Player[playerid][InBusiness]][bType] == 18)
				{
					if(Player[playerid][BankStatus] == 1)
						return SendClientMessage(playerid, WHITE, "Your bank account has been suspended by the authorities!");
					if(Player[id][BankStatus] == 1)
						return SendClientMessage(playerid, WHITE, "That bank account has been suspended by the authorities!");
					else
					{
						if(amount > 0 && amount < 2000001)
						{
							format(string, sizeof(string), "You have sent $%s to %s.", IntToFormattedStr(amount), GetName(id));
							SendClientMessage(playerid, WHITE, string);
							format(string, sizeof(string), "You have been wired $%s from %s.", IntToFormattedStr(amount), GetName(playerid));
							SendClientMessage(id, WHITE, string);
							format(string, sizeof(string), "WARNING: %s has wiretransfered $%s to %s.", GetName(playerid), IntToFormattedStr(amount), GetName(id));
							new tmpip1[128], tmpip2[128];

							if(amount >= 50000)
							{
								SendToAdmins(ADMINORANGE, string, 1);
								WarningLog(string);
							}


							GetPlayerIp(playerid, tmpip1, sizeof(tmpip1));
							GetPlayerIp(id, tmpip2, sizeof(tmpip2));
							format(string, sizeof(string), "[WIRETRANSFER] %s (IP: %s) has wiretransferred $%s ($%s) to %s (IP: %s) ($%s)", GetName(playerid), tmpip1, IntToFormattedStr(amount), IntToFormattedStr(Player[playerid][BankMoney] - amount), GetName(id), tmpip2, IntToFormattedStr(Player[id][BankMoney] + amount));
							MoneyLog(string);

							if(Player[playerid][PlayingHours] < 5 && amount >= 999 && Player[playerid][AdminLevel] < 1 )
							{
								format(string, sizeof(string), "WARNING: %s may possibly be money-farming, they've wiretransferred $%s to %s (less than 5 playing hours)", GetName(playerid), IntToFormattedStr(amount), GetName(id));
								SendToAdmins(ADMINORANGE, string, 0);
								WarningLog(string);
							}
							Player[playerid][BankMoney] -= amount;
							Player[id][BankMoney] += amount;
						}
						else
						{
							SendClientMessage(playerid, WHITE, "You're trying to give too much.");
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "You don't have that much money.");
			}
		}
	}
	return 1;
}

CMD:setglobalweather(playerid, params[])
{
	new weatherid;

	if(Player[playerid][AdminLevel] < 4)
		return 1;

	if(sscanf(params, "d", weatherid))
		return SendClientMessage(playerid, GREY, "SYNTAX: /setglobalweather [weatherid]");

	SetWeather(weatherid);
	GlobalWeather = weatherid;

	return 1;
}

command(a, playerid, params[])
{
	new message[128], string[255];

	if(Player[playerid][AdminLevel] < 1)
		return 1;

	if(sscanf(params, "s[128]", message))
		return SendClientMessage(playerid, GREY, "SYNTAX: /a [message]");

	else
	{
		format(string, sizeof(string), "[A] {0062FF}%s{B3D0FF}: %s", Player[playerid][AdminName], message);
		SendToAdmins(ADMINBLUE, string, 0);
		format(string, sizeof(string), "Admin %s: %s", Player[playerid][AdminName], message);
		OOCChatLog(string);

		format(string, sizeof(string), "12[A] %s: %s", Player[playerid][AdminName], message);
		CallRemoteFunction("IRC_Message", "s", string);
	}
	return 1;
}

command(calculate, playerid, params[])
{
	new Value1, Method[20], Value2, string[128];
	if(sscanf(params, "dds[20]", Value1, Value2, Method))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /calculate [value] [value] [method]");
		SendClientMessage(playerid, GREY, "Method: Add, Subtract, Multiply & Divide.");
	}
	else
	{
		if(strcmp(Method, "multiply", true) == 0)
		{
			new Sum = Value1*Value2;
			format(string, sizeof(string), "%d X (multiplied) %d = %d.", Value1, Value2, Sum);
			SendClientMessage(playerid, WHITE, string);
		}
		else if(strcmp(Method, "subtract", true) == 0)
		{
			new Sum = Value1-Value2;
			format(string, sizeof(string), "%d - (subtract) %d = %d.", Value1, Value2, Sum);
			SendClientMessage(playerid, WHITE, string);
		}
		else if(strcmp(Method, "divide", true) == 0)
		{
			new Sum = Value1/Value2;
			format(string, sizeof(string), "%d / (divide) %d = %d.", Value1, Value2, Sum);
			SendClientMessage(playerid, WHITE, string);
		}
		else if(strcmp(Method, "add", true) == 0)
		{
			new Sum = Value1+Value2;
			format(string, sizeof(string), "%d + (add) %d = %d.", Value1, Value2, Sum);
			SendClientMessage(playerid, WHITE, string);
		}
	}
	return 1;
}

command(fine, playerid, params[])
{
	new id, amount, Reason[128], string[255];
	if(sscanf(params, "uds[128]", id, amount, Reason))
	{
		if(Player[playerid][AdminLevel] >= 2)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /fine [playerid] [amount] [reason]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 2)
		{
			if(strlen(Reason) < 1)
			{
				SendClientMessage(playerid, GREY, "SYNTAX: /fine [playerid] [amount] [reason]");
			}
			else
			{
				if(!IsPlayerConnected(id))
					return SendClientMessage(playerid, -1, "That player is not connected.");

				if(Player[id][AdminLevel] < Player[playerid][AdminLevel] || playerid == id)
				{
					if(amount > 0 && amount < 99999999)
					{
						format(string, sizeof(string), "Fine: %s has been fined $%s by %s. Reason: \"%s\".", GetName(id), IntToFormattedStr(amount), Player[playerid][AdminName], Reason);
						SendToAdmins(LIGHTRED, string, 0);
						SendClientMessage(id, LIGHTRED, string);
						format(string, sizeof(string), "[FINE] %s has fined %s $%s for %s ($%s).", Player[playerid][AdminName], GetName(id), IntToFormattedStr(amount), Reason, IntToFormattedStr(Player[id][Money] - amount));
						MoneyLog(string);
						format(string, sizeof(string), "%s has fined %s $%s for %s.", Player[playerid][AdminName], GetName(id), IntToFormattedStr(amount), Reason);
						AdminActionsLog(string);
						Player[id][Money] -= amount;
						SavePlayerData(id);
						if(Player[id][AdminLevel] < 1)
							Player[playerid][AdminActions]++;
					}
				}
			}
		}
	}
	return 1;
}

command(award, playerid, params[])
{
	new id, amount, reason[128], string[255];

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(sscanf(params, "uds[128]", id, amount, reason))
		return SendClientMessage(playerid, GREY, "SYNTAX: /award [playerid] [amount] [reason]");

	if(!IsPlayerConnected(id))
		return SendClientMessage(playerid, WHITE, "That player isn't connected.");

	if(amount < 1)
		return SendClientMessage(playerid, WHITE, "Invalid amount!");

	else
	{
		format(string, sizeof(string), "Award: %s has been awarded $%s by %s. Reason: \"%s\".", GetName(id), IntToFormattedStr(amount), Player[playerid][AdminName], reason);
		SendClientMessageToAll(LIGHTRED, string);
		format(string, sizeof(string), "[AWARD] %s has rewarded %s $%s for %s ($%s).", Player[playerid][AdminName], GetName(id), IntToFormattedStr(amount), reason, IntToFormattedStr(Player[id][Money] + amount));
		MoneyLog(string);
		format(string, sizeof(string), "%s has rewarded %s $%s for %s.", Player[playerid][AdminName], GetName(id), IntToFormattedStr(amount), reason);
		AdminActionsLog(string);
		Player[id][Money] += amount;
		SavePlayerData(id);
	}

	return 1;
}


/* command(toggleooc, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][AdminLevel] >= 2)
	{
		if(oocenabled == 0)
		{
			format(string, sizeof(string), "%s has enabled the OOC channel.", GetName(playerid));
			oocenabled = 1;
			SendClientMessageToAll(LIGHTRED, string);
		}
		else if(oocenabled == 1)
		{
			format(string, sizeof(string), "%s has disabled the OOC channel.", GetName(playerid));
			oocenabled = 0;
			SendClientMessageToAll(LIGHTRED, string);
		}
	}
	return 1;
} */

command(acceptreport, playerid, params[])
{
	new id, string[255];

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(sscanf(params, "u", id))
		SendClientMessage(playerid, GREY, "SYNTAX: /acceptreport [playerid]");

	else
	{
		if(Player[playerid][AdminLevel] >= 2)
		{
			if(IsPlayerConnectedEx(id) &&  Player[id][ActiveReport] >= 1)
			{
				format(string, sizeof(string), "You have taken %s's report.", GetName(id));
				SendClientMessage(playerid, WHITE, string);

				format(string, sizeof(string), "{1195ED}REPORT TEXT: %s", Player[id][ReportText]);
				SendClientMessage(playerid, GREY, string);

				format(string, sizeof(string), "Admin %s has taken your report. Please note this could take a while to resolve!", Player[playerid][AdminName]);
				SendClientMessage(id, ADMINORANGE, string);

				format(string, sizeof(string), "REPORTS: %s has taken %s's report.", Player[playerid][AdminName], GetName(id));
				SendToAdmins(ADMINORANGE, string, 1);

				Player[id][ActiveReport] = 0;

				if(Player[id][AdminLevel] < 1)
					Player[playerid][AdminActions]++;

				format(string, sizeof(string), "%s has taken %s's report: %s", Player[playerid][AdminName], GetName(id), Player[id][ReportText]);
				AdminActionsLog(string);

				if(GetActiveReports() == 0 && ReportStatus == 1)
				{
					ReportStatus = 0;
					SendClientMessageToAll(LIGHTRED, "The volume of reports has been successfully addressed.");
					SendClientMessageToAll(LIGHTRED, "You may now use /(re)port for smaller issues / requests.");
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "There are no active reports from that player.");
			}
		}
	}
	return 1;
}

command(o, playerid, params[])
{
	if(GetPVarInt(playerid, "ShortCMDS") == 0)
		return cmd_ooc(playerid, params);
	return SendClientMessage(playerid, -1, "ShortCMDS are disabled, you must use /ooc");
}

command(reports, playerid, params[])
{
	#pragma unused params

	if(Player[playerid][AdminLevel] >= 2)
	{
		new string[128], Count;

		SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------------");
		SendClientMessage(playerid, WHITE, "Please use /acceptreport [playerid] to remove it from the list.");

		foreach(Player, i)
		{
			if(Player[i][ActiveReport] >= 1)
			{
				Count++;
				if(Player[i][ActiveReport] > 60)
				{
					format(string, sizeof(string), "REPORTER: %s (%d) | REPORT: %s", GetName(i), i, Player[i][ReportText]);
					SendClientMessage(playerid, RED, string);
				}
				else
				{
					format(string, sizeof(string), "REPORTER: %s (%d) | REPORT: %s", GetName(i), i, Player[i][ReportText]);
					SendClientMessage(playerid, GREY, string);
				}
			}
		}

		format(string, sizeof(string), "There are %d active reports!", Count);
		SendClientMessage(playerid, GREY, string);

		SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------------");
	}

	return 1;
}

command(bdeposit, playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 1.5, Businesses[Player[playerid][InBusiness]][bInteractX], Businesses[Player[playerid][InBusiness]][bInteractY], Businesses[Player[playerid][InBusiness]][bInteractZ]) && Player[playerid][InBusiness] != 0)
		return SendClientMessage(playerid, GREY, "You must stand near the interaction point to do this.");

	new Amount, string[255];
	if(!strcmp(params, "all", true))
	{
		Amount = Player[playerid][Money];
		
		new ip[25];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string, sizeof(string), "[BANK] %s (%s) has deposited $%s ($%s) into their bank account ($%s).", GetName(playerid), ip, IntToFormattedStr(Amount), IntToFormattedStr(Player[playerid][Money] - Amount), IntToFormattedStr(Player[playerid][BankMoney] + Amount));
		MoneyLog(string);
		Player[playerid][Money] -= Amount;
		Player[playerid][BankMoney] += Amount;
		format(string, sizeof(string), "You have successfully deposited $%d into your bank account.", Amount);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "{009900}Old balance: {FFFFFF}%s | {009900}New balance: {FFFFFF}%s", PrettyMoney(Player[playerid][BankMoney] - Amount), PrettyMoney(Player[playerid][BankMoney]));
		SendClientMessage(playerid, WHITE, string);
		SavePlayerData(playerid);
		return 1;
	}
	
	if(sscanf(params, "d", Amount))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /bdeposit [amount / all]");
	}
	else
	{
		if(Amount < 1)
			return SendClientMessage(playerid, WHITE, "You can't deposit negative amounts!");
		else
		{
			if(Businesses[Player[playerid][InBusiness]][bType] == 18)
			{
				if(Player[playerid][BankStatus] == 1)
				{
					SendClientMessage(playerid, WHITE, "Your bank account has been suspended by the authorities!");
				}
				else
				{
					if(Player[playerid][Money] < Amount)
					{
						SendClientMessage(playerid, WHITE, "You don't have that much to deposit in to your bank account.");
					}
					else
					{
						new ip[25];
						GetPlayerIp(playerid, ip, sizeof(ip));
						format(string, sizeof(string), "[BANK] %s (%s) has deposited $%s ($%s) into their bank account ($%s).", GetName(playerid), ip, IntToFormattedStr(Amount), IntToFormattedStr(Player[playerid][Money] - Amount), IntToFormattedStr(Player[playerid][BankMoney] + Amount));
						MoneyLog(string);
						Player[playerid][Money] -= Amount;
						Player[playerid][BankMoney] += Amount;
						format(string, sizeof(string), "You have successfully deposited $%d into your bank account.", Amount);
						SendClientMessage(playerid, WHITE, string);
						format(string, sizeof(string), "{009900}Old balance: {FFFFFF}%s | {009900}New balance: {FFFFFF}%s", PrettyMoney(Player[playerid][BankMoney] - Amount), PrettyMoney(Player[playerid][BankMoney]));
						SendClientMessage(playerid, WHITE, string);
						SavePlayerData(playerid);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "You have to be at the bank to complete such a transaction.");
			}
		}
	}
	return 1;
}

command(bwithdraw, playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 1.5, Businesses[Player[playerid][InBusiness]][bInteractX], Businesses[Player[playerid][InBusiness]][bInteractY], Businesses[Player[playerid][InBusiness]][bInteractZ]) && Player[playerid][InBusiness] != 0)
		return SendClientMessage(playerid, GREY, "You must stand near the interaction point to do this.");

	new Amount, string[255];
	
	if(!strcmp(params, "all", true))
	{
		Amount = Player[playerid][BankMoney];
		
		new ip[25];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string, sizeof(string), "[BANK] %s (%s) has withdrawn $%s ($%s) from their bank account ($%s).", GetName(playerid), ip, IntToFormattedStr(Amount), IntToFormattedStr(Player[playerid][Money] + Amount), IntToFormattedStr(Player[playerid][BankMoney] - Amount));
		MoneyLog(string);
		Player[playerid][Money] += Amount;
		Player[playerid][BankMoney] -= Amount;
		format(string, sizeof(string), "You have successfully withdrawn $%d from your bank account.", Amount);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "{009900}Old balance: {FFFFFF}%s | {009900}New balance: {FFFFFF}%s", PrettyMoney(Player[playerid][BankMoney] + Amount), PrettyMoney(Player[playerid][BankMoney]));
		SendClientMessage(playerid, WHITE, string);
		SavePlayerData(playerid);
		return 1;
	}
	
	if(sscanf(params, "d", Amount))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /bwithdraw [amount / all]");
	}
	else
	{
		if(Amount < 1)
			return SendClientMessage(playerid, WHITE, "You can't withdraw negative amounts!");
		else
		{
			if(Businesses[Player[playerid][InBusiness]][bType] == 18)
			{
				if(Player[playerid][BankStatus] == 1)
				{
					SendClientMessage(playerid, WHITE, "Your bank account has been suspended by the authorities!");
				}
				else
				{
					if(Amount > Player[playerid][BankMoney])
					{
						SendClientMessage(playerid, WHITE, "You don't have that much in your bank account.");
					}
					else
					{
						new ip[25];
						GetPlayerIp(playerid, ip, sizeof(ip));
						format(string, sizeof(string), "[BANK] %s (%s) has withdrawn $%s ($%s) from their bank account ($%s).", GetName(playerid), ip, IntToFormattedStr(Amount), IntToFormattedStr(Player[playerid][Money] + Amount), IntToFormattedStr(Player[playerid][BankMoney] - Amount));
						MoneyLog(string);
						Player[playerid][Money] += Amount;
						Player[playerid][BankMoney] -= Amount;
						format(string, sizeof(string), "You have successfully withdrawn $%d from your bank account.", Amount);
						SendClientMessage(playerid, WHITE, string);
						format(string, sizeof(string), "{009900}Old balance: {FFFFFF}%s | {009900}New balance: {FFFFFF}%s", PrettyMoney(Player[playerid][BankMoney] + Amount), PrettyMoney(Player[playerid][BankMoney]));
						SendClientMessage(playerid, WHITE, string);
						SavePlayerData(playerid);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "You have to be at the bank to complete such a transaction.");
			}
		}
	}
	return 1;
}

command(hbalance, playerid, params[]) return cmd_htake(playerid, params);

CMD:factionsafebalance(playerid, params[])
{
	if(Player[playerid][Group] == 0 || Player[playerid][GroupRank] < 5)
		return 1;

	if(Groups[Player[playerid][Group]][CommandTypes] == 1 && Player[playerid][GroupRank] < 8)
		return SendClientMessage(playerid, -1, "You must be above rank 8 to use this command");

	if(Player[playerid][InGroupHQ] != Player[playerid][Group])
	    return SendClientMessage(playerid, -1, "You must be in your group HQ to see anything!");

	if(!IsPlayerInRangeOfPoint(playerid, 5, Groups[Player[playerid][Group]][SafeX], Groups[Player[playerid][Group]][SafeY], Groups[Player[playerid][Group]][SafeZ]))
		return SendClientMessage(playerid, -1, "You must be near the faction safe to see the balance.");

	new id = Player[playerid][Group], res[128];
	format(res, sizeof(res), "Money: %s | Street Grade Materials: %s | Standard Grade Materials: %s | Military Grade Materials: %s", PrettyMoney(Groups[id][SafeMoney]), IntToFormattedStr(Groups[id][SavedMats][0]), IntToFormattedStr(Groups[id][SavedMats][1]), IntToFormattedStr(Groups[id][SavedMats][2]));
	SendClientMessage(playerid, GREY, res);
	format(res, sizeof(res), "Pot: %s | Cocaine: %s | Speed: %s", IntToFormattedStr(Groups[id][SavedPot]), IntToFormattedStr(Groups[id][SavedCrack]), IntToFormattedStr(Groups[id][SavedSpeed]));
	SendClientMessage(playerid, GREY, res);
	if(Groups[id][CommandTypes] == 7)
	{
		format(res, sizeof(res), "Chips: %s", IntToFormattedStr(Groups[id][Chips]));
		SendClientMessage(playerid, GREY, res);
	}
	return 1;
}

command(factionsafewithdraw, playerid, params[])
{
	new Amount, string[255], Item[128];

	if(Player[playerid][Group] == TaxGroup && Player[playerid][GroupRank] < 10)
		return 1;

	if(sscanf(params, "ds[128]", Amount, Item))
	{
		if(Player[playerid][Group] != 0 && Player[playerid][GroupRank] >= 5)
		{
			if(Groups[Player[playerid][Group]][CommandTypes] == 1 && Player[playerid][GroupRank] < 8)
				return SendClientMessage(playerid, -1, "You must be above rank 7 to use this command");
			SendClientMessage(playerid, GREY, "SYNTAX: /factionsafewithdraw [amount] [item]");
			format(string, sizeof(string), "There is currently $%d in your safe.", Groups[Player[playerid][Group]][SafeMoney]);
			SendClientMessage(playerid, GREY, string);
			format(string, sizeof(string), "There is currently %d Cocaine in your safe.", Groups[Player[playerid][Group]][SavedCrack]);
			SendClientMessage(playerid, GREY, string);
			format(string, sizeof(string), "There is currently %d pot in your safe.", Groups[Player[playerid][Group]][SavedPot]);
			SendClientMessage(playerid, GREY, string);
			format(string, sizeof(string), "There is currently %d Street Grade Materials in your safe.", Groups[Player[playerid][Group]][SavedMats][0]);
			SendClientMessage(playerid, GREY, string);
			format(string, sizeof(string), "There is currently %d Standard Grade Materials in your safe.", Groups[Player[playerid][Group]][SavedMats][1]);
			SendClientMessage(playerid, GREY, string);
			format(string, sizeof(string), "There is currently %d Military Grade Materials in your safe.", Groups[Player[playerid][Group]][SavedMats][2]);
			SendClientMessage(playerid, GREY, string);
			format(string, sizeof(string), "There is currently %d speed in your safe.", Groups[Player[playerid][Group]][SavedSpeed]);
			SendClientMessage(playerid, GREY, string);
			if(Groups[Player[playerid][Group]][CommandTypes] == 7)
			{
				format(string, sizeof(string), "There is currently %d chips in your safe.", Groups[Player[playerid][Group]][Chips]);
				SendClientMessage(playerid, GREY, string);
			}
			SendClientMessage(playerid, GREY, "Items: Money, Pot, Cocaine, StreetMats, StandardMats, MilitaryMats, speed");
		}
	}
	else
	{
		if(Player[playerid][Group] != 0 && Player[playerid][GroupRank] >= 5)
		{
			if(IsPlayerInRangeOfPoint(playerid, 5, Groups[Player[playerid][Group]][SafeX], Groups[Player[playerid][Group]][SafeY], Groups[Player[playerid][Group]][SafeZ]))
			{
				if(strcmp(Item, "money", true) == 0)
				{
					if(Groups[Player[playerid][Group]][SafeMoney] >= Amount)
					{
						if(Amount < 1)
						{
							SendClientMessage(playerid, WHITE, "You can't withdraw negative amounts!");
						}
						else
						{
							format(string, sizeof(string), "[GROUP] %s has withdrawn $%s ($%s) from their groupsafe ($%s).", GetName(playerid), IntToFormattedStr(Amount), IntToFormattedStr(Player[playerid][Money] + Amount), IntToFormattedStr(Groups[Player[playerid][Group]][SafeMoney] - Amount));
							MoneyLog(string);
							Player[playerid][Money] += Amount;
							Groups[Player[playerid][Group]][SafeMoney] -= Amount;
							format(string, sizeof(string), "You have withdrawn $%d from your group safe.", Amount);
							SendClientMessage(playerid, WHITE, string);
							SaveGroup(Player[playerid][Group]);
							SavePlayerData(playerid);
						}
					}
					else
					{
						SendClientMessage(playerid, WHITE, "Your group safe doesn't have that amount of money.");
					}
				}
				else if(strcmp(Item, "pot", true) == 0)
				{
					if(Groups[Player[playerid][Group]][SavedPot] >= Amount)
					{
						if(Amount < 1)
						{
							SendClientMessage(playerid, WHITE, "You can't draw out more than -1 (or less).");
						}
						else
						{
							Player[playerid][Pot] += Amount;
							Groups[Player[playerid][Group]][SavedPot] -= Amount;
							format(string, sizeof(string), "You have withdrawn %d grams of Pot from your group safe.", Amount);
							SendClientMessage(playerid, WHITE, string);
							SaveGroup(Player[playerid][Group]);
							SavePlayerData(playerid);
						}
					}
					else
					{
						SendClientMessage(playerid, WHITE, "Your group safe doesn't have that amount of Pot.");
					}
				}
				else if(strcmp(Item, "Cocaine", true) == 0)
				{
					if(Groups[Player[playerid][Group]][SavedCrack] >= Amount)
					{
						if(Amount < 1)
						{
							SendClientMessage(playerid, WHITE, "You can't draw out more than -1 (or less).");
						}
						else
						{
							Player[playerid][Cocaine] += Amount;
							Groups[Player[playerid][Group]][SavedCrack] -= Amount;
							format(string, sizeof(string), "You have withdrawn %d grams of Cocaine from your group safe.", Amount);
							SendClientMessage(playerid, WHITE, string);
							SaveGroup(Player[playerid][Group]);
							SavePlayerData(playerid);
						}
					}
					else
					{
						SendClientMessage(playerid, WHITE, "Your group safe doesn't have that amount of Crack.");
					}
				}
				else if(strcmp(Item, "streetmats", true) == 0)
				{
					if(Groups[Player[playerid][Group]][SavedMats][0] >= Amount)
					{
						if(Amount < 1)
						{
							SendClientMessage(playerid, WHITE, "You can't withdraw that much.");
						}
						else
						{
							Player[playerid][Materials][0] += Amount;
							Groups[Player[playerid][Group]][SavedMats][0] -= Amount;
							format(string, sizeof(string), "You have withdrawn %d Street Grade Materials from your group safe.", Amount);
							SendClientMessage(playerid, WHITE, string);
							SaveGroup(Player[playerid][Group]);
							SavePlayerData(playerid);
						}
					}
					else
					{
						SendClientMessage(playerid, WHITE, "Your group safe doesn't have that amount of Street Grade Materials.");
					}
				}
				else if(strcmp(Item, "standardmats", true) == 0)
				{
					if(Groups[Player[playerid][Group]][SavedMats][1] >= Amount)
					{
						if(Amount < 1)
						{
							SendClientMessage(playerid, WHITE, "You can't withdraw that much.");
						}
						else
						{
							Player[playerid][Materials][1] += Amount;
							Groups[Player[playerid][Group]][SavedMats][1] -= Amount;
							format(string, sizeof(string), "You have withdrawn %d Standard Grade Materials from your group safe.", Amount);
							SendClientMessage(playerid, WHITE, string);
							SaveGroup(Player[playerid][Group]);
							SavePlayerData(playerid);
						}
					}
					else
					{
						SendClientMessage(playerid, WHITE, "Your group safe doesn't have that amount of Standard Grade Materials.");
					}
				}
				else if(strcmp(Item, "militarymats", true) == 0)
				{
					if(Groups[Player[playerid][Group]][SavedMats][2] >= Amount)
					{
						if(Amount < 1)
						{
							SendClientMessage(playerid, WHITE, "You can't withdraw that much.");
						}
						else
						{
							Player[playerid][Materials][2] += Amount;
							Groups[Player[playerid][Group]][SavedMats][2] -= Amount;
							format(string, sizeof(string), "You have withdrawn %d Military Grade Materials from your group safe.", Amount);
							SendClientMessage(playerid, WHITE, string);
							SaveGroup(Player[playerid][Group]);
							SavePlayerData(playerid);
						}
					}
					else
					{
						SendClientMessage(playerid, WHITE, "Your group safe doesn't have that amount of Military Grade Materials.");
					}
				}
				else if(strcmp(Item, "speed", true) == 0)
				{
					if(Groups[Player[playerid][Group]][SavedSpeed] >= Amount)
					{
						if(Amount < 1)
						{
							SendClientMessage(playerid, WHITE, "You can't draw out more than -1 (or less).");
						}
						else
						{
							Player[playerid][Speed] += Amount;
							Groups[Player[playerid][Group]][SavedSpeed] -= Amount;
							format(string, sizeof(string), "You have withdrawn %d speed from your group safe.", Amount);
							SendClientMessage(playerid, WHITE, string);
							SaveGroup(Player[playerid][Group]);
							SavePlayerData(playerid);
						}
					}
					else
					{
						SendClientMessage(playerid, WHITE, "Your group safe doesn't have that amount of speed.");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "You must be at your safe to do this.");
			}
		}
	}
	return 1;
}

command(factionsafedeposit, playerid, params[])
{
	new Amount, string[128], Item[128];

	if(Player[playerid][Group] == TaxGroup && Player[playerid][GroupRank] < 8)
		return 1;

	if(sscanf(params, "ds[128]", Amount, Item))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /factionsafedeposit [amount] [item]");
		SendClientMessage(playerid, GREY, "Items: Money, Pot, Cocaine, StreetMats, StandardMats, MilitaryMats, speed");
	}
	else
	{
		if(Player[playerid][Group] != 0 && Player[playerid][GroupRank] >= 1)
		{
			if(IsPlayerInRangeOfPoint(playerid, 5, Groups[Player[playerid][Group]][SafeX], Groups[Player[playerid][Group]][SafeY], Groups[Player[playerid][Group]][SafeZ]))
			{
				if(Amount < 1)
					return SendClientMessage(playerid, WHITE, "You can't deposit negative amounts!");
				else if(strcmp(Item, "money", true) == 0)
				{
					if(Player[playerid][Money] >= Amount)
					{
						format(string, sizeof(string), "[GROUP] %s has deposited $%s ($%s) into their groupsafe ($%s).", GetName(playerid), IntToFormattedStr(Amount), IntToFormattedStr(Player[playerid][Money] - Amount), IntToFormattedStr(Groups[Player[playerid][Group]][SafeMoney] + Amount));
						MoneyLog(string);
						Player[playerid][Money] -= Amount;
						Groups[Player[playerid][Group]][SafeMoney] += Amount;
						format(string, sizeof(string), "You have deposited $%d into your group safe.", Amount);
						SendClientMessage(playerid, WHITE, string);
						SaveGroup(Player[playerid][Group]);
						SavePlayerData(playerid);
					}
					else
					{
						SendClientMessage(playerid, WHITE, "Your don't have that amount of Money.");
					}
				}
				else if(strcmp(Item, "cocaine", true) == 0)
				{
					if(Player[playerid][Cocaine] >= Amount)
					{
						Player[playerid][Cocaine] -= Amount;
						Groups[Player[playerid][Group]][SavedCrack] += Amount;
						format(string, sizeof(string), "You have deposited %d grams of Cocaine into your group safe.", Amount);
						SendClientMessage(playerid, WHITE, string);
						SaveGroup(Player[playerid][Group]);
						SavePlayerData(playerid);
					}
					else
					{
						SendClientMessage(playerid, WHITE, "Your don't have that amount of Cocaine.");
					}
				}
				else if(strcmp(Item, "pot", true) == 0)
				{
					if(Player[playerid][Pot] >= Amount)
					{
						Player[playerid][Pot] -= Amount;
						Groups[Player[playerid][Group]][SavedPot] += Amount;
						format(string, sizeof(string), "You have deposited %d grams of Pot into your group safe.", Amount);
						SendClientMessage(playerid, WHITE, string);
						SaveGroup(Player[playerid][Group]);
						SavePlayerData(playerid);
					}
					else
					{
						SendClientMessage(playerid, WHITE, "Your don't have that amount of Pot.");
					}
				}
				else if(strcmp(Item, "streetmats", true) == 0)
				{
					if(Player[playerid][Materials][0] >= Amount)
					{
						Player[playerid][Materials][0] -= Amount;
						Groups[Player[playerid][Group]][SavedMats][0] += Amount;
						format(string, sizeof(string), "You have deposited %d Street Grade Materials into your group safe.", Amount);
						SendClientMessage(playerid, WHITE, string);
						SaveGroup(Player[playerid][Group]);
						SavePlayerData(playerid);
					}
					else
					{
						SendClientMessage(playerid, WHITE, "Your don't have that amount of Street Grade Materials.");
					}
				}
				else if(strcmp(Item, "standardmats", true) == 0)
				{
					if(Player[playerid][Materials][1] >= Amount)
					{
						Player[playerid][Materials][1] -= Amount;
						Groups[Player[playerid][Group]][SavedMats][1] += Amount;
						format(string, sizeof(string), "You have deposited %d Standard Grade Materials into your group safe.", Amount);
						SendClientMessage(playerid, WHITE, string);
						SaveGroup(Player[playerid][Group]);
						SavePlayerData(playerid);
					}
					else
					{
						SendClientMessage(playerid, WHITE, "Your don't have that amount of Standard Grade Materials.");
					}
				}
				else if(strcmp(Item, "militarymats", true) == 0)
				{
					if(Player[playerid][Materials][2] >= Amount)
					{
						Player[playerid][Materials][2] -= Amount;
						Groups[Player[playerid][Group]][SavedMats][2] += Amount;
						format(string, sizeof(string), "You have deposited %d Military Grade Materials into your group safe.", Amount);
						SendClientMessage(playerid, WHITE, string);
						SaveGroup(Player[playerid][Group]);
						SavePlayerData(playerid);
					}
					else
					{
						SendClientMessage(playerid, WHITE, "Your don't have that amount of Military Grade Materials.");
					}
				}
				else if(strcmp(Item, "speed", true) == 0)
				{
					if(Player[playerid][Speed] >= Amount)
					{
						Player[playerid][Speed] -= Amount;
						Groups[Player[playerid][Group]][SavedSpeed] += Amount;
						format(string, sizeof(string), "You have deposited %d speed into your group safe.", Amount);
						SendClientMessage(playerid, WHITE, string);
						SaveGroup(Player[playerid][Group]);
						SavePlayerData(playerid);
					}
					else
					{
						SendClientMessage(playerid, WHITE, "Your don't have that amount of speed.");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "You must be at your safe to do this.");
			}
		}
	}
	return 1;
}

command(afk, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][AdminLevel] >= 4)
	{
		if(Player[playerid][AFKStat] == 1)
		{
			format(string, sizeof(string), "%s has been set to 'Available' (used /afk to resume gameplay)", GetName(playerid));
			SendToAdmins(ADMINORANGE, string, 0);
			Player[playerid][AFKStat] = 0;
			SendClientMessage(playerid, WHITE, "Your status has been set back to 'Available'.");
		}
		else
		{
			format(string, sizeof(string), "%s has been set to 'AFK' (using /afk).", GetName(playerid));
			SendToAdmins(ADMINORANGE, string, 0);
			Player[playerid][AFKStat] = 1;
			SendClientMessage(playerid, WHITE, "You have set your status to AFK.");
		}
	}
	return 1;
}

command(quitfaction, playerid, params[])
{
	new confirm[8];
	if(sscanf(params, "s[8]", confirm))
	    return SendClientMessage(playerid, YELLOW, "Are you sure you want to quit faction? Type /quitfaction confirm.");

	if(strcmp(confirm, "confirm", true))
	    return SendClientMessage(playerid, YELLOW, "Are you sure you want to quit faction? Type /quitfaction confirm.");

	if(Player[playerid][Group] >= 1)
	{
		new string[128];
		format(string, sizeof(string), "%s has left the faction (quit).", GetName(playerid));
		GroupMessage(playerid, ANNOUNCEMENT, string);
		format(string, sizeof(string), "You have quit %s.", Groups[Player[playerid][Group]][GroupName]);
		SendClientMessage(playerid, WHITE, string);
		if(Groups[Player[playerid][Group]][CommandTypes] == 1)
		{
			ResetPlayerWeaponsEx(playerid);
			SetPlayerArmour(playerid, 0.0);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 998);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 998);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 998);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 998);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 998);
			SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 998);
			ResetSkin(playerid);
		}

		if(Groups[Player[playerid][Group]][CommandTypes] == 9)
			Player[playerid][JoinGroupCD] = gettime() + 518400;

		Groups[Player[playerid][Group]][MemberCount]--;
		Player[playerid][Group] = 0;
		Player[playerid][GroupRank] = 0;
		Player[playerid][GangPayment] = 0;

	}
	else
	{
		SendClientMessage(playerid, WHITE, "You don't have a faction to quit.");
	}
	return 1;
}

CMD:accent(playerid, params[])
{
	new accent;

	if(sscanf(params, "d", accent))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /accent [Accent ID]");
		SendClientMessage(playerid, GREY, "IDs: [0] American, [1] Canadian, [2] Irish, [3] Australian, [4] English, [5] Scottish, [6] French, [7] Russian, [8] Spanish, [9] Italian");
		SendClientMessage(playerid, GREY, "[10] Gangsta, [11] Portuguese, [12] Southern, [13] Liberty City, [14] African, [15] Jamaican, [16] Punjabi, [17] Arabic, [18] Asian, [19] Korean");
		SendClientMessage(playerid, GREY, "[20] Welsh, [21] Vice City, [22] Chinese, [23] Japanese, [24] Swedish, [25] Dutch, [26] German, [27] Danish, [28] New Zealand, [29] Romanian");
		SendClientMessage(playerid, GREY, "[30] Polish, [31] South African, [32] Middle Eastern, [33] Norwegian, [34] Finnish, [35] Eastern European, [36] Israeli, [37] Turkish");
		return SendClientMessage(playerid, GREY, "[38] Hispanic, [39] Albanian");
	}

	if(accent < 0 || accent >= MAX_ACCENT)
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /accent [Accent ID]");
		SendClientMessage(playerid, GREY, "IDs: [0] American, [1] Canadian, [2] Irish, [3] Australian, [4] English, [5] Scottish, [6] French, [7] Russian, [8] Spanish, [9] Italian");
		SendClientMessage(playerid, GREY, "[10] Gangsta, [11] Portuguese, [12] Southern, [13] Liberty City, [14] African, [15] Jamaican, [16] Punjabi, [17] Arabic, [18] Asian, [19] Korean");
		SendClientMessage(playerid, GREY, "[20] Welsh, [21] Vice City, [22] Chinese, [23] Japanese, [24] Swedish, [25] Dutch, [26] German, [27] Danish, [28] New Zealand, [29] Romanian");
		SendClientMessage(playerid, GREY, "[30] Polish, [31] South African, [32] Middle Eastern, [33] Norwegian, [34] Finnish, [35] Eastern European, [36] Israeli, [37] Turkish");
		return SendClientMessage(playerid, GREY, "[38] Hispanic, [39] Albanian");
	}

	new string[128];

	Player[playerid][Accent] = accent;
	format(string, sizeof(string), "You are now talking in the %s accent!", accents[accent]);
	return SendClientMessage(playerid, -1, string);
}

CMD:v(playerid, params[])
{
	if(GetPVarInt(playerid, "ShortCMDS") == 0)
		return cmd_vip(playerid, params);
	else
	{
		SendClientMessage(playerid, -1, "ShortCMDS are disabled, you must use /vip");
		return 1;
	}
}

CMD:vip(playerid, params[])
{

	new end[255];

	if(VIPEnabled == 0 && Player[playerid][AdminDuty] < 1)
		return SendClientMessage(playerid, -1, "VIP chat is currently disabled.");

	if(Player[playerid][VipRank] == 0)
		return SendClientMessage(playerid, -1, "You must be a VIP to use this command!");

	if(Player[playerid][vMuted] == 1)
	{
		SendClientMessage(playerid, -1, "You have been muted from this channel by an admin.");
		new string[128];
		format(string, sizeof(string), "You will be unmuted in %d minute{s}", ((Player[playerid][vMutedTime] - gettime()) / 60));
		return SendClientMessage(playerid, -1, string);
	}

	if(Player[playerid][PrisonID] == 1)
		return SendClientMessage(playerid, WHITE, "You don't have access to /v while you're in admin prison!");

	if(isnull(params))
		return SendClientMessage(playerid, GREY, "SYNTAX; /(v)ip [message]");

	if(GetPlayerToggle(playerid, TOGGLE_VIP) == true)
		return SendClientMessage(playerid, WHITE, "You currently have VIP chat turned off. Please turn on VIP chat ((/toggles)) to talk.");

	switch(Player[playerid][VipRank])
	{
		case 1: format(end, sizeof(end), "[V] {D6917C}%s{F7D9D0}: %s", Player[playerid][NormalName], params);
		case 2: format(end, sizeof(end), "[V] {E0E0E0}%s{F7D9D0}: %s", Player[playerid][NormalName], params);
		case 3, 4: format(end, sizeof(end), "[V] {E0DD22}%s{F7D9D0}: %s", Player[playerid][NormalName], params);
		case 5: 
		{
			if(Player[playerid][Mask] == 1)
				format(end, sizeof(end), "[V] {%s}%s{F7D9D0}: %s", (Player[playerid][AdminDuty]) ? ("B31E43") : ("E0DD22"), Player[playerid][NormalName], params);
			else
				format(end, sizeof(end), "[V] {%s}%s{F7D9D0}: %s", (Player[playerid][AdminDuty]) ? ("B31E43") : ("E0DD22"), GetName(playerid), params);
		}
	}

	foreach(Player, i)
	{
		if(Player[i][VipRank] == 0)
			continue;

		if(GetPlayerToggle(i, TOGGLE_VIP) == true)
			continue;

		SendClientMessage(i, VIP_COLOUR, end);
	}

	format(end, sizeof(end), "[VIP] %s: %s", GetName(playerid), params);
	OOCChatLog(end);

	return 1;
}

command(buyvehicle, playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 1.5, Businesses[Player[playerid][InBusiness]][bInteractX], Businesses[Player[playerid][InBusiness]][bInteractY], Businesses[Player[playerid][InBusiness]][bInteractZ]) && Player[playerid][InBusiness] != 0)
		return SendClientMessage(playerid, GREY, "You must stand near the interaction point to do this.");

	if(Businesses[Player[playerid][InBusiness]][bType] == 6) // Grotti
	{
		DeletePVar(playerid, "BuyingVIPCar");
		ShowPlayerDialog(playerid, 346, DIALOG_STYLE_LIST, "Vehicle Dealership", "Sports\nFour-Wheel Drive\nLowriders\nTwo-Door\nFour-Door\nBikes\n", "Select", "Cancel");
	}
	else if(Businesses[Player[playerid][InBusiness]][bType] == 14) // Coutt & Schuttz
	{
		DeletePVar(playerid, "BuyingVIPCar");
		ShowPlayerDialog(playerid, 7100, DIALOG_STYLE_LIST, "Vehicle Dealership", "Sports\nFour-Wheel Drive\nLowriders\nTwo-Door\nFour-Door\nBikes", "Select", "Cancel");
	}
	else if(Businesses[Player[playerid][InBusiness]][bType] == 21)
	{
		DeletePVar(playerid, "BuyingVIPCar");
		ShowPlayerDialog(playerid, 8001, DIALOG_STYLE_LIST, "Van Dealership", "Moonbeam ($22,500)\nMule ($90,000)\nPony ($65,000)\nBurrito ($55,000)\nRumpo ($70,000)\nBenson ($65,000)\nBoxville ($60,000)", "Purchase", "Cancel");
	}
	return 1;
}

CMD:buybike(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 1.5, Businesses[Player[playerid][InBusiness]][bInteractX], Businesses[Player[playerid][InBusiness]][bInteractY], Businesses[Player[playerid][InBusiness]][bInteractZ]) && Player[playerid][InBusiness] != 0)
		return SendClientMessage(playerid, GREY, "You must stand near the interaction point to do this.");

	if(Businesses[Player[playerid][InBusiness]][bType] != 20)
		return 1;

	ShowPlayerDialog(playerid, 8000, DIALOG_STYLE_LIST, "Bike Shop", "BMX ($2,000)\nMountain Bike ($2,000)\nNormal Bike ($2,000)", "Purchase", "Cancel");
	return 1;
}

command(ticket, playerid, params[])
{
	new price, id, string[128];
	if(sscanf(params, "ud", id, price))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /ticket [playerid] [price]");
	}
	else
	{
		if(IsPlayerConnectedEx(id))
		{
			if(GetDistanceBetweenPlayers(playerid, id) < 7)
			{
				if(Groups[Player[playerid][Group]][CommandTypes] == 1)
				{
					if(GetPVarInt(playerid, "MDCTicket") != 1)
						return SendClientMessage(playerid, WHITE, "You don't have a ticket receipt to give!");

					if(price < 1)
						return SendClientMessage(playerid, WHITE, "You can't write a ticket for negative amounts!");

					if(price > 10000)
					    return SendClientMessage(playerid, WHITE, "You can't write a ticket for more than $10,000!");

					format(string, sizeof(string), "* %s hands a ticket receipt to %s.", GetNameEx(playerid), GetNameEx(id));
					NearByMessage(playerid, NICESKY, string);
					format(string, sizeof(string), "You have given a ticket receipt to %s, for $%d.", GetName(id), price);
					SendClientMessage(playerid, WHITE, string);
					format(string, sizeof(string), "You have been given a ticket, from LEO %s, the price is $%d. type /accept copticket to accept the ticket", GetName(playerid), price);
					SendClientMessage(id, ANNOUNCEMENT, string);
					Player[playerid][TicketPrice] = price;
					Player[playerid][Ticketing] = id;
					Player[id][BeingTicketed] = playerid;
					DeletePVar(playerid, "MDCTicket");
				}
				else
				{
					SendClientMessage(playerid, WHITE, "You're not a LEO.");
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "You're too far away.");
			}
		}
		else
		{
			SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
		}
	}
	return 1;
}

// command(buyvault, playerid, params[])
// {
	// if(isnull(params) || strcmp(params, "confirm", true))
		// return SendClientMessage(playerid, WHITE, "Please type /buyvault confirm, to confirm. The price is $1000.");

	// if(Player[playerid][InHouse] == 0)
		// return SendClientMessage(playerid, -1, "You're not inside any house.");

	// if(Player[playerid][InHouse] != Player[playerid][House] && Player[playerid][InHouse] != Player[playerid][House2])
		// return SendClientMessage(playerid, -1, "You must be inside your house to use this command.");

	// if(Houses[Player[playerid][InHouse]][VaultMoney] > -1)
		// return SendClientMessage(playerid, -1, "This house already has a vault installed!");

	// if(Player[playerid][Money] < 1000)
		// return SendClientMessage(playerid, -1, "You need $1000 for this.");

	// Player[playerid][Money] -= 1000;
	// Houses[Player[playerid][InHouse]][VaultMoney] = 1000;
	// SavePlayerData(playerid);
	// SaveHouse(Player[playerid][InHouse]);
	// SendClientMessage(playerid, WHITE, "You have successfully purchased a house vault! It has been installed and you have been charged $1000.");

	// return 1;
// }

command(tokens, playerid, params[])
{
	if(Player[playerid][VipRank] == 0)
		return 1;

	new id;

	if(isnull(params) || Player[playerid][AdminLevel] < 2)
		id = playerid;
	else if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /tokens [playerid]");

	if(!IsPlayerConnected(id))
		return SendClientMessage(playerid, WHITE, "That player isn't connected!");

	new string[128];

	format(string, sizeof(string), "%s: %d tokens", GetName(id), Player[id][VipTokens]);
	SendClientMessage(playerid, YELLOW, string);

	return 1;
}

CMD:remotetokens(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new name[MAX_PLAYER_NAME];

	if(sscanf(params, "s[24]", name))
		return SendClientMessage(playerid, GREY, "SYNTAX: /remotetokens [player]");

	if(!IsPlayerRegistered(name))
		return SendClientMessage(playerid, WHITE, "That player doesn't exist.");

	new string[128];
	format(string, sizeof(string), "%s: %d tokens", name, GetRemoteIntValue(name, "VipTokens"));
	SendClientMessage(playerid, YELLOW, string);
	return 1;
}

command(help, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][InBusiness] >= 1)
	{
		ShowPlayerDialog(playerid, 3260, DIALOG_STYLE_LIST, "Help Menu", "Commands\nAdministrators\nRules\nFrequently Asked Questions\nCommands For This Business", "Select", "Cancel");
	}
	else
	{
		ShowPlayerDialog(playerid, 3260, DIALOG_STYLE_LIST, "Help Menu", "Commands\nAdministrators\nRules\nFrequently Asked Questions\n", "Select", "Cancel");
	}
	return 1;
}

CMD:factioninvite(playerid, params[])
{
	new string[255];
	if(isnull(params))
	{
		return SendClientMessage(playerid, GREY, "SYNTAX: /factioninvite [accept/deny]");
	}

	if(Player[playerid][PendingInvite] == 0)
		return SendClientMessage(playerid, -1, "No pending faction invite");

	if(!strcmp(params, "accept", true))
	{

		Player[playerid][Group] = Player[playerid][PendingInvite];
		Player[playerid][GroupRank] = 1;
		format(string, sizeof(string), "Congratulations! You are now a part of Faction %s.", Groups[Player[playerid][Group]][GroupName]);
		SendClientMessage(playerid, ANNOUNCEMENT, string);
		SavePlayerData(playerid);
		format(string, sizeof(string), "%s has joined the faction (invitation).", GetName(playerid));
		GroupMessage(playerid, ANNOUNCEMENT, string);
		Player[playerid][PendingInvite] = 0;
		Groups[Player[playerid][Group]][MemberCount]++;
		new tmpip1[128];
		GetPlayerIp(playerid, tmpip1, sizeof(tmpip1));
		format(string, sizeof(string), "[FactionInvite] %s (IP: %s) has joined '%s'", GetName(playerid), tmpip1, Groups[Player[playerid][Group]][GroupName]);
		StatLog(string);

		if(Groups[Player[playerid][Group]][CommandTypes] == 1)
		{
			if(Jobs[Player[playerid][Job]][JobType] != JOB_MECHANIC && Jobs[Player[playerid][Job]][JobType] != JOB_DETECTIVE)
			{
				Player[playerid][Job] = 0;
			}

			if(Jobs[Player[playerid][Job2]][JobType] != JOB_MECHANIC && Jobs[Player[playerid][Job2]][JobType] != JOB_DETECTIVE)
			{
				Player[playerid][Job2] = 0;
			}
		}
	}
	else if(!strcmp(params, "deny", true))
	{
		Player[playerid][PendingInvite] = 0;
		SendClientMessage(playerid, WHITE, "You have denied the invitation to join the faction.");
	}
	return 1;
}

command(invite, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /invite [playerid]");
	}
	else
	{
		if((Player[playerid][GroupRank] >= 5 && Player[playerid][Group] != 0) || (Player[playerid][GroupRank] >= 4 && Groups[Player[playerid][Group]][CommandTypes] == 4))
		{
			if(IsPlayerConnectedEx(id) || id != playerid)
			{
				Player[id][PendingInvite] = Player[playerid][Group];
				format(string, sizeof(string), "You have invited %s to join your faction.", GetName(id));
				SendClientMessage(playerid, ANNOUNCEMENT, string);

				format(string, sizeof(string), "You have been invited to join %s, by %s (Type \"/factioninvite\" to join the group). ", Groups[Player[playerid][Group]][GroupName], GetName(playerid));
				SendClientMessage(id, YELLOW, string);
			}
			else
			{
				SendClientMessage(playerid, WHITE, "Player not connected or not logged in, or is you.");
			}
		}
	}
	return 1;
}

command(togphone, playerid, params[])
{
	if(Player[playerid][PrisonDuration] > 0 || Player[playerid][PrisonID] > 0)
		return SendClientMessage(playerid, WHITE, "You can't do that in prison!");

	if(PlayerOwnsPhone(playerid) == 0)
		return SendClientMessage(playerid, GREY, "Error, you don't have a phone.");

	if(Player[playerid][PhoneN] == -1)
		return SendClientMessage(playerid, GREY, "Error, you have not selected a phone. (/choosephone)");

	new status = strval(GetPhoneInfo(Player[playerid][PhoneN], "status"));

	if(strcmp(Player[playerid][NormalName], GetPhoneInfo(Player[playerid][PhoneN], "owner"), true))
	{
		Player[playerid][PhoneN] = -1;
		return SendClientMessage(playerid, GREY, "Error, your chosen phone does not belong to you.");
	}

	new query[128];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE phones SET status = '%d' WHERE owner = '%e' AND number = '%d'", !status, Player[playerid][NormalName], Player[playerid][PhoneN]);
	mysql_query(MYSQL_MAIN, query, false);

	if(status)
	{
		/*foreach(Player, i)
		{
			if(Player[i][Calling] == playerid) cmd_hangup(i, "toggedDaPhone");
		}*/
		if(IsPlayerOnPhone(playerid))
			cmd_hangup(playerid, "toggedDaPhone");
	}

	format(query, sizeof(query), "* %s has turned their phone %s.", GetNameEx(playerid), (status == 1) ? ("off") : ("on"));
	return NearByMessage(playerid, NICESKY, query);
}

command(pay, playerid, params[])
{
	new id, plmoney, string[255];
	sscanf(params, "dd", id, plmoney);
	if(id < MAX_PLAYERS)
	{
	    if(sscanf(params, "ud", id, plmoney))
			return SendClientMessage(playerid, GREY, "SYNTAX: /pay [playerid] [amount]");

		if(!IsPlayerConnectedEx(id))
			return SendClientMessage(playerid, -1, "That player is not connected or logged in.");
		
		if(Player[id][Mask] == 1)
	    	id = -1;
	}
	else
	    id = CheckIfMasked(id);

	if(id == -1)
		return SendClientMessage(playerid, -1, "You're too far away.");
		
	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, -1, "That player is not connected or logged in.");

	if(id == playerid)
		return SendClientMessage(playerid, -1, "You cannot pay yourself money.");

	if(Player[playerid][PlayingHours] < 2)
		return SendClientMessage(playerid, -1, "You cannot give money to someone while you have less than 2 playing hours.");

	if(Player[playerid][Money] >= plmoney)
	{
		if(IsPlayerConnectedEx(id) || id != playerid)
		{
			if(Spectator[id][SpecSpectatingPlayer] != -1)
			{
				SendClientMessage(playerid, WHITE, "You're too far away.");
			}
			else
			{
				if(plmoney > 0 && plmoney < 20001) // Because I fucking hate =<>==
				{
					if(GetDistanceBetweenPlayers(playerid, id) < 5)
					{
						format(string, sizeof(string), "You have paid $%s to %s.", IntToFormattedStr(plmoney), GetNameEx(id));
						SendClientMessage(playerid, WHITE, string);
						format(string, sizeof(string), "* %s has paid %s some money.", GetNameEx(playerid), GetNameEx(id));
						NearByMessage(id, NICESKY, string);
						new tmpip1[128], tmpip2[128];
						GetPlayerIp(playerid, tmpip1, sizeof(tmpip1));
						GetPlayerIp(id, tmpip2, sizeof(tmpip2));
						format(string, sizeof(string), "[PAY] %s (IP: %s) has paid %s ($%s) to %s (IP: %s) ($%s).", GetName(playerid), tmpip1, IntToFormattedStr(plmoney), IntToFormattedStr(Player[playerid][Money] - plmoney), GetName(id), tmpip2, IntToFormattedStr(Player[id][Money] + plmoney));
						MoneyLog(string);
						format(string, sizeof(string), "You have been paid $%s by %s.", IntToFormattedStr(plmoney), GetName(playerid));
						SendClientMessage(id, WHITE, string);
						if(Player[playerid][PlayingHours] < 5 && plmoney >= 999 && Player[playerid][AdminLevel] < 1)
						{
							format(string, sizeof(string), "WARNING: %s may possibly be money-farming, they've paid $%s to %s (less than 5 playing hours)", GetName(playerid), IntToFormattedStr(plmoney), GetName(id));
							SendToAdmins(ADMINORANGE, string, 0);
							LastFarm = playerid;
							WarningLog(string);
						}
						Player[playerid][Money] -= plmoney;
						Player[id][Money] += plmoney;
						SavePlayerData(playerid);
						SavePlayerData(id);
					}
					else
					{
						SendClientMessage(playerid, WHITE, "You're too far away.");
					}
				}
				else
				{
					SendClientMessage(playerid, WHITE, "You can't pay under $1, or over $20,000.");
				}
			}
		}
		else
		{
			SendClientMessage(playerid, WHITE, "Player not connected or not logged in, or is you.");
		}
	}
	else
	{
		SendClientMessage(playerid, WHITE, "You don't have enough cash! Write a check, or visit https://crearoleplay.com to purchase additional In-Game currency.");
	}
	return 1;
}

command(uninvite, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /uninvite [playerid]");
	}
	else
	{
		if((Player[playerid][GroupRank] >= 5 && Player[playerid][Group] != 0) || (Player[playerid][GroupRank] >= 4 && Groups[Player[playerid][Group]][CommandTypes] == 4))
		{
			if(IsPlayerConnectedEx(id) || id != playerid)
			{
				if(Player[id][Group] == Player[playerid][Group])
				{
					if(Player[playerid][GroupRank] > Player[id][GroupRank])
					{
						format(string, sizeof(string), "%s has left the faction (un-invited).", GetName(id));
						GroupMessage(id, ANNOUNCEMENT, string);
						format(string, sizeof(string), "You have uninvited player %s.", GetName(id));
						SendClientMessage(playerid, ANNOUNCEMENT, string);
						format(string, sizeof(string), "You have been uninvited from %s, by %s.", Groups[Player[playerid][Group]][GroupName], GetName(playerid));
						SendClientMessage(id, WHITE, string);
						format(string, sizeof(string), "[GROUP] %s (%d) has uninvited %s from %s.", GetName(playerid), Player[playerid][GroupRank], GetName(id), Groups[Player[playerid][Group]][GroupName]);
						StatLog(string);
						if(Groups[Player[id][Group]][CommandTypes] == 1)
						{
							ResetSkin(id);
							Player[id][CopDuty] = 0;

							ResetPlayerWeaponsEx(id);
							SetPlayerSkillLevel(id, WEAPONSKILL_SHOTGUN, 998);
							SetPlayerSkillLevel(id, WEAPONSKILL_SPAS12_SHOTGUN, 998);
							SetPlayerSkillLevel(id, WEAPONSKILL_MP5, 998);
							SetPlayerSkillLevel(id, WEAPONSKILL_AK47, 998);
							SetPlayerSkillLevel(id, WEAPONSKILL_M4, 998);
							SetPlayerSkillLevel(id, WEAPONSKILL_SNIPERRIFLE, 998);

							if(Player[id][HandTazer] > 0 || Player[id][GunTazer] > 0)
							{
								Player[id][HandTazer] = 0;
								Player[id][GunTazer] = 0;
								RemovePlayerAttachedObject(id, 0);
							}
						}

						if(Groups[Player[playerid][Group]][CommandTypes] == 9)
							Player[id][JoinGroupCD] = gettime() + 518400;

						Player[id][Group] = 0;
						Player[id][GroupRank] = 0;
						Player[id][GangPayment] = 0;
						Groups[Player[playerid][Group]][MemberCount]--;
						SavePlayerData(id);
					}
					else
					{
						SendClientMessage(playerid, WHITE, "You can't uninvite a higher rank.");
					}
				}
				else
				{
					SendClientMessage(playerid, WHITE, "Player is not in your group to un-invite.");
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "Player not connected or not logged in, or is you.");
			}
		}
	}
	return 1;
}

command(accept, playerid, params[])
{
	if(Player[playerid][Tied] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] == 1 || Player[playerid][AdminFrozen] == 1)
		return SendClientMessage(playerid, -1, "You can't do that right now, you're incapacitated!");

	new Usage[128], string[255];
	if(sscanf(params, "s[128]", Usage))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /accept [usage]");
		SendClientMessage(playerid, GREY, "Usages: BETAInvite, Handshake, HealRequest, DivorceRequest, Weapon, PartyInvite");
	}
	else
	{

		if(strcmp(Usage, "BETAInvite", true) == 0)
		{
			if(Player[playerid][PendingBETAInvite] >= 1)
			{
				Player[playerid][PendingBETAInvite] = 0;
				Player[playerid][Tester] = 1;
				SendClientMessage(playerid, WHITE, "Congratulations! You are now a tester.");
			}
			else
			{
				SendClientMessage(playerid, WHITE, "You do not have a pending invitation.");
			}
		}
		else if(strcmp(Usage, "vehicle", true) == 0)
		{
			new seller = GetPVarInt(playerid, "BuyCar_SellerID") - 1,
			price = GetPVarInt(seller, "SellCar_Price"), sql = GetPVarInt(playerid, "SellCar_SellerSQL"), idx = GetVIndex(sql), slot = GetFreeCarSlot(playerid);

			DeletePVar(playerid, "BuyCar_SellerID");
			DeletePVar(seller, "SellCar_Price");
			DeletePVar(seller, "SellCar_Timeout");
			DeletePVar(playerid, "SellCar_SellerSQL");

			if(!IsPlayerConnectedEx(seller))
				return SendClientMessage(playerid, WHITE, "That player is no longer online.");

			if(sql == 0)
				return SendClientMessage(playerid, -1, "No one offered to sell you a vehicle");

			if(GetPlayerVehCount(playerid) >= GetPlayerMaxVehicles(playerid))
				return SendClientMessage(playerid, -1, "You can't own anymore vehicles!");

			if(Player[playerid][BankMoney] < price)
				return SendClientMessage(playerid, -1, "You can't afford the vehicle");

			if(slot == -1)
				return SendClientMessage(playerid, -1, "You do not have any open slots.");

			new sSlot = -1;

			for(new i; i < 5; i++)
			{
				if(Player[seller][Cars][i] == sql)
				{
					sSlot = i;
					break;
				}
			}

			if(sSlot == -1)
				return SendClientMessage(playerid, -1, "The seller no longer has that vehicle");

			if(Player[playerid][AdminDuty] > 0 || Player[playerid][UnderCover] > 0 || Player[playerid][Mask] == 1)
				format(Veh[idx][Owner], 24 ,Player[playerid][NormalName]);
			else
				format(Veh[idx][Owner], 24 ,GetName(playerid));

			foreach(Player, i)
			{
				if(Player[i][TempKey] == sql)
					Player[i][TempKey] = 0;
			}

			Player[playerid][Cars][slot] = sql;
			Player[seller][Cars][sSlot] = 0;

			new sellerIP[21], buyerIP[21];
			GetPlayerIp(seller, sellerIP, sizeof(sellerIP));
			GetPlayerIp(playerid, buyerIP, sizeof(buyerIP));

			format(string, sizeof(string), "[CAR] %s (%s) has bought a car ($%s) (SQLID: %d) from %s (%s) for $%s ($%s).", GetName(playerid), buyerIP, IntToFormattedStr(Player[playerid][BankMoney] - price), sql, GetName(seller), sellerIP, IntToFormattedStr(price), IntToFormattedStr(Player[seller][BankMoney] + price));
			MoneyLog(string);
			Player[playerid][BankMoney] -= price;
			Player[seller][BankMoney] += price;

			if(Player[seller][PlayingHours] < 5)
			{
				format(string, sizeof(string), "WARNING: %s (%d) has sold a vehicle (%d) to %s (%d) for %s (under 5 playing hours).", GetName(seller), seller, sql, GetName(playerid), playerid, PrettyMoney(price));
				WarningLog(string);
				SendToAdmins(ADMINORANGE, string, 0);
			}

			SendClientMessage(playerid, -1, "You purchase the vehicle");
			SendClientMessage(seller, -1, "You sell the vehicle");

			SavePlayerData(playerid);
			SavePlayerData(seller);
			SaveVehicle(sql);

			if(!IsSQLVehicleSpawned(Player[playerid][Cars][slot]))
				SpawnVehicleSQL(Player[playerid][Cars][slot]);
		}
		else if(strcmp(Usage, "DivorceRequest", true) == 0)
		{
			new res = -1;

			if(strlen(Player[playerid][MarriedTo]) < 1)
				return SendClientMessage(playerid, WHITE, "You're not married.");
			
			foreach(Player, i)
			{
				if(Player[i][PendingDivorce] == playerid && Player[i][PendingDivorce] != -1)
				{
					res = i;
				}
			}

			if(res == -1)
				return SendClientMessage(playerid, -1, "Nobody sent you a divorce request.");
				
			if(IsPlayerConnectedEx(res))
			{
				format(string, sizeof(string), "%s has accepted your divorce request, you are no longer married.", GetName(playerid));
				SendClientMessage(res, WHITE, string);
				format(Player[res][MarriedTo], 255, "Nobody");
				format(Player[playerid][MarriedTo], 255, "Nobody");
				SendClientMessage(playerid, WHITE, "You are now divorced!");
			}
			else
			{
				SendClientMessage(playerid, WHITE, "You don't have a pending divorce request.");
			}
		}
		/*else if(strcmp(Usage, "GuardRequest", true) == 0)
		{
			if(Player[playerid][GuardOffer] != -1)
			{
				if(Player[playerid][Money] >= Player[Player[playerid][GuardOffer]][GuardPrice])
				{
					if(Player[playerid][PlayingHours] < 5 && Player[playerid][AdminLevel] < 1)
					{
						format(string, sizeof(string), "WARNING: %s may possibly be money-farming, they bought body armour for $%s from %s (less than 5 playing hours)", GetName(playerid), IntToFormattedStr(Player[Player[playerid][GuardOffer]][GuardPrice]), GetName(Player[playerid][GuardOffer]));
						SendToAdmins(ADMINORANGE, string, 0);
						LastFarm = playerid;
					}
					format(string, sizeof(string), "You have earned $%s as they accepted the guard request.", IntToFormattedStr(Player[Player[playerid][GuardOffer]][GuardPrice]));
					SendClientMessage(Player[playerid][GuardOffer], WHITE, string);
					format(string, sizeof(string), "[BODYGUARD] %s has been guarded ($%s) by %s for $%s ($%s).", GetName(playerid), IntToFormattedStr(Player[playerid][Money] - Player[Player[playerid][GuardOffer]][GuardPrice]), GetName(Player[playerid][GuardOffer]), IntToFormattedStr(Player[Player[playerid][GuardOffer]][GuardPrice]), IntToFormattedStr(Player[Player[playerid][GuardOffer]][Money]+Player[Player[playerid][GuardOffer]][GuardPrice]));
					MoneyLog(string);
					SendClientMessage(playerid, WHITE, "You've accepted the request and your armour has been filled to 50 percent.");
					Player[playerid][Money] -= Player[Player[playerid][GuardOffer]][GuardPrice];
					Player[Player[playerid][GuardOffer]][Money] += Player[Player[playerid][GuardOffer]][GuardPrice];
					SetPlayerArmour(playerid, 50);
					Player[Player[playerid][GuardOffer]][Guarding] = -1;
					Player[playerid][GuardOffer] = -1;
					Player[playerid][GuardPrice] = 0;
				}
			}
		}*/
		else if(strcmp(Usage, "CopTicket", true) == 0)
		{
			if(Player[playerid][BeingTicketed] >= 0)
			{
				if(IsPlayerConnectedEx(Player[playerid][BeingTicketed]))
				{
					new offence[64];
					new time[64];
					GetPVarString(Player[playerid][BeingTicketed], "MDC_Ticket_Time", time, sizeof(time));
					GetPVarString(Player[playerid][BeingTicketed], "MDC_Ticket_Offense", offence, sizeof(offence));
					format(string, sizeof(string), "[TICKET] %s has been ticketed by %s for $%s.", GetName(playerid), GetName(Player[playerid][BeingTicketed]), IntToFormattedStr(Player[Player[playerid][BeingTicketed]][TicketPrice]));
					MoneyLog(string);
					Player[playerid][Tickets] ++;
					SendClientMessage(playerid, WHITE, "You have accepted the ticket.");
					SendClientMessage(Player[playerid][BeingTicketed], WHITE, "The other party has accepted the ticket.");
					SendClientMessage(playerid, GREY, "--------------------------------------------------");
					format(string, sizeof(string), "Name: %s | Ticket reason: %s | Amount: %s", GetNameEx(playerid), offence, PrettyMoney(GetPVarInt(Player[playerid][BeingTicketed], "MDC_Ticket_Amount")));
					SendClientMessage(playerid, WHITE, string);
					format(string, sizeof(string), "Strikes issued: %d | Date issued: %s",  GetPVarInt(Player[playerid][BeingTicketed], "MDC_Ticket_Strikes"), time);
					SendClientMessage(playerid, -1, string);
					format(string, sizeof(string), "Issued by: %s", GetNameEx(Player[playerid][BeingTicketed]));
					SendClientMessage(playerid, -1, string);
					SendClientMessage(playerid, GREY, "--------------------------------------------------");
					DeletePVar(Player[playerid][BeingTicketed], "MDC_Ticket_Amount");
					DeletePVar(Player[playerid][BeingTicketed], "MDC_Ticket_Strikes");
					DeletePVar(Player[playerid][BeingTicketed], "MDC_Ticket_Offense");
					DeletePVar(Player[playerid][BeingTicketed], "MDC_Ticket_Time");
					Player[Player[playerid][BeingTicketed]][TicketPrice] = 0;
					Player[Player[playerid][BeingTicketed]][Ticketing] = -1;
					Player[playerid][BeingTicketed] = -1;
					SendClientMessage(playerid, -1, "Type /ticketdetails to see your ticket details again.");
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "You're not being ticketed.");
			}
		}
		/*else if(strcmp(Usage, "FactionInvite", true) == 0)
		{
			if(Player[playerid][PendingInvite] != 0 && (Player[playerid][PendingInvite] == 1 || Player[playerid][PendingInvite] == 2 || Player[playerid][PendingInvite] == 3 || Player[playerid][PendingInvite] == 5 || Player[playerid][PendingInvite] == 6))
			{
				format(string, sizeof(string), "%s has accepted an invitation to %s (%d).", GetName(playerid), Groups[Player[playerid][PendingInvite]][GroupName], Player[playerid][PendingInvite]);
				StatLog(string);
				Player[playerid][Group] = Player[playerid][PendingInvite];
				Player[playerid][GroupRank] = 1;
				format(string, sizeof(string), "Congratulations! You are now a part of Faction %s.", Groups[Player[playerid][Group]][GroupName]);
				SendClientMessage(playerid, ANNOUNCEMENT, string);
				SavePlayerData(playerid);
				format(string, sizeof(string), "%s has joined the faction (invitation).", GetName(playerid));
				GroupMessage(playerid, ANNOUNCEMENT, string);
				Player[playerid][PendingInvite] = 0;

				if(Groups[Player[playerid][Group]][CommandTypes] == 1)
				{
					if(Jobs[Player[playerid][Job]][JobType] != JOB_MECHANIC && Jobs[Player[playerid][Job]][JobType] != JOB_DETECTIVE)
					{
						Player[playerid][Job] = 0;
					}

					if(Jobs[Player[playerid][Job2]][JobType] != JOB_MECHANIC && Jobs[Player[playerid][Job2]][JobType] != JOB_DETECTIVE)
					{
						Player[playerid][Job2] = 0;
					}
				}
			}
			else if(Player[playerid][PendingInvite] != 0)
			{
				return cmd_groupinvite(playerid, "accept");
			}
		}*/
		else if(strcmp(Usage, "weapon", true) == 0)
		{
			if(IsPlayerInAnyVehicle(playerid))
				return SendClientMessage(playerid, -1, "You cannot do this while in a vehicle.");

			new id = GetPVarInt(playerid, "GiveWeapon_PlayerID"),
			weapon = GetPVarInt(playerid, "GiveWeapon_WeaponID");

			if (IsPlayerInAnyVehicle(id))
				return SendClientMessage(playerid, WHITE, "The giving player cannot be in a vehicle.");

			if(GetPVarInt(playerid, "GiveWeapon_Timeout") == 0)
				return SendClientMessage(playerid, -1, "No one is trying to give you a weapon.");

			DeletePVar(playerid, "GiveWeapon_Timeout");
			DeletePVar(playerid, "GiveWeapon_PlayerID");
			DeletePVar(playerid, "GiveWeapon_WeaponID");

			if(!PlayerHasWeapon(id, weapon))
				return SendClientMessage(playerid, -1, "The player no longer has the weapon.");

			if(!IsPlayerConnectedEx(id))
				return SendClientMessage(playerid, WHITE, "That player is no longer online.");

			AdjustWeapon(id, weapon, 0);

			GivePlayerWeaponEx(playerid, weapon);
			format(string, sizeof(string), "%s has handed %s a %s.", GetNameEx(id), GetNameEx(playerid), GetWeaponNameEx(weapon));
			NearByMessage(playerid, NICESKY, string);
			format(string, sizeof(string), "%s has handed %s a %s.", GetName(id), GetName(playerid), GetWeaponNameEx(weapon));
			StatLog(string);
			SavePlayerData(playerid);
			SavePlayerData(id);
		}
		/*else if(strcmp(Usage, "armour", true) == 0)
		{
			if(IsPlayerInAnyVehicle(playerid))
				return SendClientMessage(playerid, -1, "You cannot do this while in a vehicle.");

			new id = GetPVarInt(playerid, "GiveWeapon_PlayerID");
			// new Float: armour;
			// new Float: offer = GetPVarFloat(playerid, "GiveWeapon_Amount");
			// format(string, sizeof(string), "Armour = %0.f, Offer = %0.f", armour, offer);
			// SendClientMessage(playerid, WHITE, string);

			if(GetPVarInt(playerid, "GiveWeapon_Timeout") == 0)
				return SendClientMessage(playerid, -1, "No one is trying to give you a kevlar vest.");

			DeletePVar(playerid, "GiveWeapon_Timeout");
			DeletePVar(playerid, "GiveWeapon_PlayerID");
			// DeletePVar(playerid, "GiveWeapon_Amount");

			if(!IsPlayerConnectedEx(id))
				return SendClientMessage(playerid, WHITE, "That player is no longer online.");

			if(Player[id][Materials] < 150)
				return SendClientMessage(id, WHITE, "You don't have enough materials!");

			if(Player[id][IsAtEvent] != 0)
				return SendClientMessage(id, -1, "You can't create weapons in an event");

			if(Player[id][CanMakeGun] == 0)
				return SendClientMessage(id, WHITE, "Please wait your job reload time.");

			// GetPlayerArmour(id, armour);
			// if(armour < offer)
				// return SendClientMessage(playerid, WHITE, "The player no longer has the amount of armour offered.");

			SetPlayerArmour(playerid, 100);
			Player[id][Materials] -= 150;
			Player[id][ArmsDealerXP] += 150;
			Player[id][GunTime] = gettime() + WEAPON_CREATE_TIME;
			Player[id][CanMakeGun] = 0;
			// SetPlayerArmour(id, 0);
			format(string, sizeof(string), "%s has created a kevlar vest from their materials and passed it to %s.", GetNameEx(id), GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
			StatLog(string);
		}*/
		else if(strcmp(Usage, "house", true) == 0)
		{
			new id = GetPVarInt(playerid, "SellHouse_PlayerID"),
			house = GetPVarInt(playerid, "SellHouse_HouseID"),
			price = GetPVarInt(playerid, "SellHouse_Price"),
			fee = (price * 5) / 100;

			if(GetPVarInt(playerid, "SellHouse_Timeout") == 0)
				return SendClientMessage(playerid, -1, "No one is trying to sell you a house.");

			if(GetDistanceBetweenPlayers(id, playerid) > 6)
				return SendClientMessage(playerid, WHITE, "You're too far away from the player trying to sell you their house.");

			DeletePVar(playerid, "SellHouse_PlayerID");
			DeletePVar(playerid, "SellHouse_Price");
			DeletePVar(playerid, "SellHouse_HouseID");
			DeletePVar(playerid, "SellHouse_Timeout");

			if(Player[id][House] != house && Player[id][House2] != house)
				return SendClientMessage(playerid, -1, "The player no longer has the house.");

			if(Player[playerid][House] > 0)
				return SendClientMessage(playerid, -1, "You already own a house! You must abandon it first.");

			if(Player[playerid][BankMoney] < price + fee)
				return SendClientMessage(playerid, -1, "You do not have enough money in your bank to buy this house!");

			format(string, sizeof(string), "%s hands %s the keys to their house.", GetNameEx(id), GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);

			Houses[house][Keypad] = -1;
			Player[playerid][House] = house;
			if(Player[playerid][AdminDuty] < 1 && Player[playerid][UnderCover] < 1 && Player[playerid][Mask] < 1)
				format(Houses[house][hOwner], 128, "%s", GetName(playerid));
			else
			format(Houses[house][hOwner], 128, "%s", Player[playerid][NormalName]);

			if(Player[id][House] == house)
				Player[id][House] = 0;
			else
				Player[id][House2] = 0;

			format(Houses[house][KeyHolder1], 24, "Nobody");
			format(Houses[house][KeyHolder2], 24, "Nobody");

			format(string, sizeof(string), "[HOUSE] %s has bought a house ($%s) from %s for $%s ($%s). (Fee: %s)", GetName(playerid), IntToFormattedStr(Player[playerid][Money] - price), GetName(id), IntToFormattedStr(price), IntToFormattedStr(Player[id][Money] + price), PrettyMoney(fee));
			MoneyLog(string);

			format(string, sizeof(string), "[HOUSE] %s has sold House %d to %s.", GetName(id), house, GetName(playerid));
			StatLog(string);

			Player[playerid][BankMoney] -= price + fee;
			Player[id][BankMoney] += price;
			SaveHouse(house);
			SavePlayerData(playerid);
			SavePlayerData(id);
			AddToOwnerHistory(playerid, house);
		}
		else if(strcmp(Usage, "house2", true) == 0)
		{
			if(Player[playerid][VipRank] < 2)
				return SendClientMessage(playerid, -1, "You can't own a second house. (VIP Silver+ only)");

			new id = GetPVarInt(playerid, "SellHouse_PlayerID"),
			house = GetPVarInt(playerid, "SellHouse_HouseID"),
			price = GetPVarInt(playerid, "SellHouse_Price"),
			fee = (price * 5) / 100;

			if(GetPVarInt(playerid, "SellHouse_Timeout") == 0)
				return SendClientMessage(playerid, -1, "No one is trying to sell you a house.");

			if(GetDistanceBetweenPlayers(id, playerid) > 6)
				return SendClientMessage(playerid, WHITE, "You're too far away from the player trying to sell you their house.");

			DeletePVar(playerid, "SellHouse_PlayerID");
			DeletePVar(playerid, "SellHouse_Price");
			DeletePVar(playerid, "SellHouse_HouseID");
			DeletePVar(playerid, "SellHouse_Timeout");

			if(Player[id][House] != house && Player[id][House2] != house)
				return SendClientMessage(playerid, -1, "The player no longer has the house.");

			if(Player[playerid][House2] > 0)
				return SendClientMessage(playerid, -1, "You already own a house! You must abandon it first.");

			if(Player[playerid][BankMoney] < price + fee)
				return SendClientMessage(playerid, -1, "You do not have enough money in your bank to buy this house!");

			format(string, sizeof(string), "%s hands %s the keys to their house.", GetNameEx(id), GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);

			Houses[house][Keypad] = -1;
			Player[playerid][House2] = house;
			if(Player[playerid][AdminDuty] < 1 && Player[playerid][UnderCover] < 1 && Player[playerid][Mask] < 1)
				format(Houses[house][hOwner], 128, "%s", GetName(playerid));
			else
			format(Houses[house][hOwner], 128, "%s", Player[playerid][NormalName]);

			if(Player[id][House] == house)
				Player[id][House] = 0;
			else
				Player[id][House2] = 0;

			format(Houses[house][KeyHolder1], 24, "Nobody");
			format(Houses[house][KeyHolder2], 24, "Nobody");

			format(string, sizeof(string), "[HOUSE] %s has bought a house ($%s) from %s for $%s ($%s). (Fee: %s)", GetName(playerid), IntToFormattedStr(Player[playerid][Money] - price), GetName(id), IntToFormattedStr(price), IntToFormattedStr(Player[id][Money] + price), PrettyMoney(fee));
			MoneyLog(string);

			format(string, sizeof(string), "[HOUSE] %s has sold House %d to %s.", GetName(id), house, GetName(playerid));
			StatLog(string);

			Player[playerid][BankMoney] -= price + fee;
			Player[id][BankMoney] += price;
			SaveHouse(house);
			SavePlayerData(playerid);
			SavePlayerData(id);
		}
		else if(strcmp(Usage, "business", true) == 0)
		{
			new id = GetPVarInt(playerid, "SellBusiness_PlayerID"),
			business = GetPVarInt(playerid, "SellBusiness_BusinessID"),
			price = GetPVarInt(playerid, "SellBusiness_Price");

			if(GetPVarInt(playerid, "SellBusiness_Timeout") == 0)
				return SendClientMessage(playerid, -1, "No one is trying to sell you a business.");

			if(GetDistanceBetweenPlayers(id, playerid) > 6)
				return SendClientMessage(playerid, WHITE, "You're too far away from the player trying to sell you their business.");

			DeletePVar(playerid, "SellBusiness_PlayerID");
			DeletePVar(playerid, "SellBusiness_Price");
			DeletePVar(playerid, "SellBusiness_BusinessID");
			DeletePVar(playerid, "SellBusiness_Timeout");

			if(Player[id][Business] != business)
				return SendClientMessage(playerid, -1, "The player no longer has the business.");

			if(Player[playerid][Business] > 0)
				return SendClientMessage(playerid, -1, "You already own a business! You must abandon it first.");

			if(Player[playerid][BankMoney] < price)
				return SendClientMessage(playerid, -1, "You do not have enough money to buy this business!");

			format(string, sizeof(string), "%s hands %s the keys to their business.", GetNameEx(id), GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);

			Player[playerid][Business] = business;
			if(Player[playerid][AdminDuty] < 1 && Player[playerid][UnderCover] < 1 && Player[playerid][Mask] < 1)
				format(Businesses[business][bOwner], 128, "%s", GetName(playerid));
			else
			format(Businesses[business][bOwner], 128, "%s", Player[playerid][NormalName]);

			Player[id][Business] = 0;

			format(Businesses[business][bKeyOwner1], 25, "Nobody");
			format(Businesses[business][bKeyOwner2], 25, "Nobody");

			format(string, sizeof(string), "[BUSINESS] %s has bought a business ($%s) from %s for $%s ($%s).", GetName(playerid), IntToFormattedStr(Player[playerid][BankMoney] - price), GetName(id), IntToFormattedStr(price), IntToFormattedStr(Player[id][BankMoney] + price));
			MoneyLog(string);

			format(string, sizeof(string), "[BUSINESS] %s has sold Business %d to %s.", GetName(id), business, GetName(playerid));
			StatLog(string);

			Player[playerid][BankMoney] -= price;
			Player[id][BankMoney] += price;
			SaveBusiness(business);
			SavePlayerData(playerid);
			SavePlayerData(id);
		}
		else if(!strcmp(Usage, "count", true))
		{
			if(Player[playerid][ReqChipCount] == -1 || GetPVarInt(playerid, "ChipCountCD") < gettime())
				return 1;

			if(!IsPlayerConnectedEx(Player[playerid][ReqChipCount]))
				return SendClientMessage(playerid, WHITE, "That player is no longer online.");

			if(GetDistanceBetweenPlayers(Player[playerid][ReqChipCount], playerid) > 6)
				return SendClientMessage(playerid, WHITE, "The other party is too far away.");

			new res[128];
			format(res, sizeof(res), "* %s has counted %s's chips.", GetNameEx(Player[playerid][ReqChipCount]), GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, res);
			format(res, sizeof(res), "You counted %s chips.", IntToFormattedStr(Player[playerid][CasinoChips]));
			SendClientMessage(Player[playerid][ReqChipCount], -1, res);
			DeletePVar(playerid, "ChipCountCD");
			Player[playerid][ReqChipCount] = -1;
		}
		else if(!strcmp(Usage, "PartyInvite", true))
		{
			if(Player[playerid][PartyPendingInvite] == INVALID_PLAYER_ID)
				return SendClientMessage(playerid, WHITE, "You do not have a pending party invite.");

			new partyid = Player[playerid][PartyPendingInvite];
			Player[playerid][PartyPendingInvite] = INVALID_PLAYER_ID;

			if(Player[partyid][PlayerParty] == 0)
				return SendClientMessage(playerid, WHITE, "This party is no longer available.");

			if(Player[playerid][InPlayerParty] != INVALID_PLAYER_ID)
			{
				format(string, sizeof(string), "[P] %s has left the party. (Joined another party)", GetName(playerid));
				SendToPlayerParty(Player[playerid][InPlayerParty], GREEN, string);
			}

			format(string, sizeof(string), "[P] %s has joined the party. (Invitation)", GetName(playerid));
			SendToPlayerParty(partyid, GREEN, string);
			format(string, sizeof(string), "You have joined %s's party.", GetName(partyid));
			SendClientMessage(playerid, WHITE, string);
			Player[playerid][InPlayerParty] = partyid;
			Player[partyid][PartyTotalMemberCount] ++;
		}
	}
	return 1;
}


CMD:paytickets(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 5, TicketPos[0], TicketPos[1], TicketPos[2]))
		return SendClientMessage(playerid, -1, "You're not in range of the place to pay your ticket.");

	if(Groups[Player[playerid][InGroupHQ]][CommandTypes] != 1)
		return SendClientMessage(playerid, -1, "You must be inside the LSPD to use this command.");

	new amount = GetPlayerOwedTicketsAmount(GetName(playerid));

	if(amount < 1)
		return SendClientMessage(playerid, -1, "You don't have any tickets to pay.");

	if(Player[playerid][Money] < amount)
		return SendClientMessage(playerid, -1, "You don't have enough money to pay for your tickets.");

	new query[128];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE PoliceTickets SET Active = \'0\' WHERE offenderName = \'%e\'", GetName(playerid));
	mysql_query(MYSQL_MAIN, query, false);

	Groups[Player[playerid][InGroupHQ]][SafeMoney] += amount;
	Player[playerid][Money] -= amount;
	SendClientMessage(playerid, -1, "You've paid your ticket(s)");
	Player[playerid][Tickets] = 0;
	SavePlayerData(playerid);
	SaveGroup(Player[playerid][InGroupHQ]);
	if(Player[playerid][LicenseSuspended] > 0)
		SendClientMessage(playerid, NICESKY, "* The officer taking your payment reminds you that your license is suspended.");

	return 1;
}

command(safelocation, playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] == 9)
		return SendClientMessage(playerid, -1, "Use /movesafe.");

	#pragma unused params
	if(Player[playerid][GroupRank] >= 5 && Player[playerid][Group] != 0)
	{
		Groups[Player[playerid][Group]][SafeWorld] = GetPlayerVirtualWorld(playerid);
		DestroyDynamicPickup(Groups[Player[playerid][Group]][SafePickupID]);
		Groups[Player[playerid][Group]][SafeInteriorID] = GetPlayerInterior(playerid);
		GetPlayerPos(playerid, Groups[Player[playerid][Group]][SafeX], Groups[Player[playerid][Group]][SafeY], Groups[Player[playerid][Group]][SafeZ]);
		Groups[Player[playerid][Group]][SafePickupID] = CreateDynamicPickup(1239, 23, Groups[Player[playerid][Group]][SafeX], Groups[Player[playerid][Group]][SafeY], Groups[Player[playerid][Group]][SafeZ], Groups[Player[playerid][Group]][SafeWorld], -1, -1, 150.0);
		SendClientMessage(playerid, WHITE, "Success! You have relocated your group Safe's location.");
		SaveGroup(Player[playerid][Group]);
	}
	return 1;
}

command(createhouse, playerid, params[])
{
	new Usage[128], string[128], type;
	if(sscanf(params, "s[128]D(0)", Usage, type))
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /createhouse [usage] (type) *Only include type when using complete as first option*");
			SendClientMessage(playerid, GREY, "Usage: Interior, Exterior or Complete.");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
			if(strcmp(Usage, "exterior", true) == 0)
			{
				Player[playerid][HouseExterior]++;
				Player[playerid][hExtID] = GetPlayerInterior(playerid);
				Player[playerid][hExtVW] = GetPlayerVirtualWorld(playerid);
				GetPlayerPos(playerid, Player[playerid][hExtX], Player[playerid][hExtY], Player[playerid][hExtZ]);
				format(string, sizeof(string), "Exterior set! (X: %f, Y: %f, Z: %f).", Player[playerid][hExtX], Player[playerid][hExtY], Player[playerid][hExtZ]);
				SendClientMessage(playerid, WHITE, string);
			}
			if(strcmp(Usage, "interior", true) == 0)
			{
				Player[playerid][HouseInterior]++;
				Player[playerid][hIntID] = GetPlayerInterior(playerid);
				GetPlayerPos(playerid, Player[playerid][hIntX], Player[playerid][hIntY], Player[playerid][hIntZ]);
				format(string, sizeof(string), "Interior set! (X: %f, Y: %f, Z: %f).", Player[playerid][hIntX], Player[playerid][hIntY], Player[playerid][hIntZ]);
				SendClientMessage(playerid, WHITE, string);
			}
			if(strcmp(Usage, "complete", true) == 0)
			{
				if(Player[playerid][HouseInterior] > 0 || Player[playerid][HouseExterior] > 0)
				{
					new NewHouseID = SpawnedHouses+1;

					if(NewHouseID >= MAX_HOUSES)
					{
						SendClientMessage(playerid, WHITE, "Too many houses are currently spawned!");
					}
					else
					{
						if(!DoesHouseExist(NewHouseID))
						{
							Houses[NewHouseID][hInteriorID] = Player[playerid][hIntID];
							Houses[NewHouseID][hExteriorID] = Player[playerid][hExtID];
							Houses[NewHouseID][hInteriorX] = Player[playerid][hIntX];
							Houses[NewHouseID][hInteriorY] = Player[playerid][hIntY];
							Houses[NewHouseID][hInteriorZ] = Player[playerid][hIntZ];
							Houses[NewHouseID][hExteriorX] = Player[playerid][hExtX];
							Houses[NewHouseID][hExteriorY] = Player[playerid][hExtY];
							Houses[NewHouseID][hExteriorZ] = Player[playerid][hExtZ];
							Houses[NewHouseID][hExteriorVW] = Player[playerid][hExtVW];
							Houses[NewHouseID][HouseType] = type;
							Houses[NewHouseID][HouseStorageSize] = 50;
							format(Houses[NewHouseID][hOwner], 255, "Nobody");
							Houses[NewHouseID][LockStatus] = 0;
							Houses[NewHouseID][HPickupID] = CreateDynamicPickup(1273, 23, Houses[NewHouseID][hExteriorX], Houses[NewHouseID][hExteriorY], Houses[NewHouseID][hExteriorZ], Houses[NewHouseID][hExteriorVW], Houses[NewHouseID][hExteriorID], -1, 150.0);

							Houses[NewHouseID][ORM_ID] = orm_create("houses");
							orm_setkey(Houses[NewHouseID][ORM_ID], "HouseSQL");
							SetupHouseORM(NewHouseID);

							UpdateObjectLabel(NewHouseID, LABEL_TYPE_HOUSE, .create = 1);
							SaveHouse(NewHouseID, 1);

							Player[playerid][HouseExterior]--;
							Player[playerid][HouseInterior]--;

							SpawnedHouses++;
							SendClientMessage(playerid, NICESKY, "Successfully created house!");
							SetPlayerInterior(playerid, Houses[NewHouseID][hExteriorID]);
							SetPlayerPos_Update(playerid, Houses[NewHouseID][hExteriorX], Houses[NewHouseID][hExteriorY], Houses[NewHouseID][hExteriorZ]);
						}
						else
						{
							SendClientMessage(playerid, WHITE, "Error: File already exists!");
						}
					}
				}
				else
				{
					SendClientMessage(playerid, WHITE, "You must select an exterior and an interior first!");
				}
			}
		}
	}
	return 1;
}

command(vehname, playerid, params[])
{
	new value[128], results, strings[128];
	if(sscanf(params, "s[128]", value))
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /vehname [name]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
			SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------------");
			for(new i; i < sizeof(VehicleNames); i++)
			{
				if(strfind(VehicleNames[i], value, true) != -1)
				{
					if(results == 0)
					{
						format(strings, sizeof(strings), "%s", VehicleNames[i]);
					}
					else
					{
						format(strings, sizeof(strings), "%s, %s", strings, VehicleNames[i]);
					}

					results++;

					if(strlen(strings) > 118)
					{
						SendClientMessage(playerid, WHITE, "Too many results found! Please search more specified!");
						SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------------");
						return 1;
					}
				}
			}

			if(results == 0)
			{
				SendClientMessage(playerid, WHITE, "Sorry, no vehicles found.");
				SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------------");
			}
			else
			{
				SendClientMessage(playerid, WHITE, "Results:");
				SendClientMessage(playerid, WHITE, strings);
				SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------------");
			}
		}
	}
	return 1;
}

command(get, playerid, params[])
{
	new id, seatid, string[128], Float: ToX, Float: ToY, Float: ToZ;
	if(sscanf(params, "uD(-1)", id, seatid))
	{
		if(Player[playerid][AdminLevel] >= 2)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /get [playerid]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 2)
		{
			if(IsPlayerConnectedEx(id))
			{
				if(Spectator[id][SpecSpectatingPlayer] != -1)
				{
					SendClientMessage(playerid, WHITE, "You can't teleport a spectator.");
				}
				else if(Player[id][Hospitalized] != 0 && Player[id][Hospitalized] != -1)
				{
					SendClientMessage(playerid, WHITE, "You can't teleport a hospitalized player.");
				}
				else if(Player[id][Tutorial] != 0)
				{
					SendClientMessage(playerid, WHITE, "You can't teleport a player in the tutorial.");
				}
				else if(Player[id][AdminLevel] >= Player[playerid][AdminLevel] && id != playerid)
				{
					SendClientMessage(playerid, WHITE, "That person is a higher ranked admin than you, request them to teleport to you.");
				}
				else if (GetPlayerState(id) == 2)
				{
					if(Player[id][ActiveReport] >= 1)
					{
						SendClientMessage(playerid, RED, "This person has an active report. If you're taking it, please don't forget to use /acceptreport");
					}

					new Float:lastX, Float:lastY, Float:lastZ;
					GetPlayerPos(id, lastX, lastY, lastZ);
					SetPVarInt(id, "lastVW", GetPlayerVirtualWorld(id)+1);
					SetPVarInt(id, "lastInt", GetPlayerInterior(id)+1);
					SetPVarFloat(id, "lastX", lastX);
					SetPVarFloat(id, "lastY", lastY);
					SetPVarFloat(id, "lastZ", lastZ);

					GetPlayerPos(playerid, ToX, ToY, ToZ);
					SetPlayerInterior(id, GetPlayerInterior(playerid));
					SetPlayerVirtualWorld(id, GetPlayerVirtualWorld(playerid));
					new tmpcar = GetPlayerVehicleID(id);
					SetVehiclePos(tmpcar, ToX, ToY+2, ToZ);
					SetVehicleVirtualWorld(tmpcar, GetPlayerVirtualWorld(playerid));
					LinkVehicleToInterior(GetPlayerVehicleID(id), GetPlayerInterior(playerid));
					SetVehicleVirtualWorld(GetPlayerVehicleID(id), GetPlayerVirtualWorld(playerid));
					format(string, sizeof(string), "%s has teleported you over to him / her.", GetName(playerid));
					SendClientMessage(id, WHITE, string);
					format(string, sizeof(string), "You have teleported %s to you.", GetName(id));
					SendClientMessage(playerid, WHITE, string);

					Player[id][InBusiness] = Player[playerid][InBusiness];
					Player[id][InHouse] = Player[playerid][InHouse];
					Player[id][InGroupHQ] = Player[playerid][InGroupHQ];
					Player[id][InHotelRoom] = Player[playerid][InHotelRoom];
				}
				else
				{
					if(Player[id][ActiveReport] >= 1)
					{
						SendClientMessage(playerid, RED, "This person has an active report. If you're taking it, please don't forget to use /acceptreport");
					}

					new Float:lastX, Float:lastY, Float:lastZ;
					GetPlayerPos(id, lastX, lastY, lastZ);
					SetPVarInt(id, "lastVW", GetPlayerVirtualWorld(id)+1);
					SetPVarInt(id, "lastInt", GetPlayerInterior(id)+1);
					SetPVarFloat(id, "lastX", lastX);
					SetPVarFloat(id, "lastY", lastY);
					SetPVarFloat(id, "lastZ", lastZ);

					GetPlayerPos(playerid, ToX, ToY, ToZ);
					SetPlayerInterior(id, GetPlayerInterior(playerid));
					SetPlayerVirtualWorld(id, GetPlayerVirtualWorld(playerid));
					SetPlayerPos_Update(id, ToX, ToY+2, ToZ);
					format(string, sizeof(string), "%s has teleported you over to him / her.", GetName(playerid));
					SendClientMessage(id, WHITE, string);
					format(string, sizeof(string), "You have teleported %s to you.", GetName(id));
					SendClientMessage(playerid, WHITE, string);

					Player[id][InBusiness] = Player[playerid][InBusiness];
					Player[id][InHouse] = Player[playerid][InHouse];
					Player[id][InGroupHQ] = Player[playerid][InGroupHQ];
					Player[id][InHotelRoom] = Player[playerid][InHotelRoom];

					if(IsPlayerInAnyVehicle(playerid) && seatid != -1)
					{
						new vehicleid = GetPlayerVehicleID(playerid);
						if(seatid > 0 && seatid <= GetMaxVehicleSeats(vehicleid))
						{
							if(!IsPlayerInAnyVehicle(id))
							{
								if(!IsSeatOccupied(vehicleid, seatid))
								{
									PutPlayerInVehicle(id, vehicleid, seatid);
								}
							}
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
			}
		}
	}
	return 1;
}

command(gotopoint, playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new Interior, VW, Float: X, Float: Y, Float: Z;
	if(sscanf(params, "fffD(-73488)D(-73488)", Interior, X, Y, Z) && sscanf(params, "p<,>fffD(-73488)D(-73488)", X, Y, Z, Interior, VW))
		return SendClientMessage(playerid, GREY, "SYNTAX: /gotopoint [x] [y] [z] ([interior]) ([vw])");

	SetPlayerPos_Update(playerid, X, Y, Z);
	if(Interior != -73488)
		SetPlayerInterior(playerid, Interior);
	if(VW != -73488)
		SetPlayerVirtualWorld(playerid, VW);
	SendClientMessage(playerid, WHITE, "You have been teleported to the defined position.");
	return 1;
}

command(gtp, playerid, params[])
{
	new Interior, Float: X, Float: Y, Float: Z;
	if(sscanf(params, "fffd", X, Y, Z, Interior))
	{
	    if(Player[playerid][AdminLevel] > 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /gtp [x point] [y point] [z point] [Interior ID]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] > 1)
		{
		    SetPlayerPos(playerid, X, Y, Z);
		    SetPlayerInterior(playerid, Interior);
		    SendClientMessage(playerid, WHITE, "You have been teleported to the defined position.");
		}
	}
	return 1;
}

CMD:movepoint(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new Float:x, Float:y, Float:z;
	if(sscanf(params, "fff", x, y, z) && sscanf(params, "p<,>fff", x, y, z))
		return SendClientMessage(playerid, GREY, "SYNTAX: /movepoint [x] [y] [z]");

	new Float:x2, Float:y2, Float:z2;
	GetPlayerPos(playerid, x2, y2, z2);
	SetPlayerPos_Update(playerid, x2 + x, y2 + y, z2 + z);
	SendClientMessage(playerid, WHITE, "You have been teleported to the defined position.");
	return 1;
}

command(goto, playerid, params[])
{
	new id, seatid, string[128], Float: ToX, Float: ToY, Float: ToZ;
	if(sscanf(params, "uD(-1)", id, seatid))
	{
		if(Player[playerid][AdminLevel] >= 2)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /goto [playerid]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 2)
		{
			if(IsPlayerConnectedEx(id))
			{
				if(Spectator[id][SpecSpectatingPlayer] != -1)
				{
					SendClientMessage(playerid, WHITE, "You can't teleport to a spectator.");
				}
				else if(Player[id][Hospitalized] != 0 && Player[id][Hospitalized] != -1)
				{
					SendClientMessage(playerid, WHITE, "You can't teleport to a hospitalized player.");
				}
				else if(Player[id][Tutorial] != 0)
				{
					SendClientMessage(playerid, WHITE, "You can't teleport to a player in the tutorial.");
				}
				else
				{
					if(Player[id][ActiveReport] >= 1)
					{
						SendClientMessage(playerid, RED, "This person has an active report. If you're taking it, please don't forget to use /acceptreport");
					}

					new Float:lastX, Float:lastY, Float:lastZ, lastInt = GetPlayerInterior(playerid), lastVW = GetPlayerVirtualWorld(playerid);
					GetPlayerPos(playerid, lastX, lastY, lastZ);
					SetPVarInt(playerid, "lastInt", lastInt+1);
					SetPVarInt(playerid, "lastVW", lastVW+1);
					SetPVarFloat(playerid, "lastX", lastX);
					SetPVarFloat(playerid, "lastY", lastY);
					SetPVarFloat(playerid, "lastZ", lastZ);

					GetPlayerPos(id, ToX, ToY, ToZ);
					SetPlayerPosEx(playerid, ToX, ToY, ToZ, GetPlayerInterior(id), GetPlayerVirtualWorld(id));
					format(string, sizeof(string), "You have teleported to %s.", GetName(id));
					SendClientMessage(playerid, WHITE, string);

					/*Player[playerid][InBusiness] = Player[id][InBusiness];
					Player[playerid][InHouse] = Player[id][InHouse];
					Player[playerid][InGroupHQ] = Player[id][InGroupHQ];
					Player[playerid][InHotelRoom] = Player[id][InHotelRoom];*/

					if(!IsPlayerInAnyVehicle(playerid) && seatid != -1 && IsPlayerInAnyVehicle(id))
					{
						new vehicleid = GetPlayerVehicleID(id);
						if(seatid >= 0 && seatid <= GetMaxVehicleSeats(vehicleid))
						{
							if(!IsSeatOccupied(vehicleid, seatid))
							{
								PutPlayerInVehicle(playerid, vehicleid, seatid);
							}
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
			}
		}
	}
	return 1;
}

CMD:sellfish(playerid, params[])
{
	new x, string[255];

	if(Jobs[Player[playerid][Job]][JobType] == JOB_FISHERMAN)
		x = Player[playerid][Job];
	else if(Jobs[Player[playerid][Job2]][JobType] == JOB_FISHERMAN)
		x = Player[playerid][Job2];
	else SendClientMessage(playerid, -1, "You don't have the fisherman job!");

	if(!IsPlayerInRangeOfPoint(playerid, 5, Jobs[x][JobMiscLocationOneX], Jobs[x][JobMiscLocationOneY], Jobs[x][JobMiscLocationOneZ]) && !IsPlayerInRangeOfPoint(playerid, 5, Jobs[x][JobMiscLocationTwoX], Jobs[x][JobMiscLocationTwoY], Jobs[x][JobMiscLocationTwoZ]))
		return SendClientMessage(playerid, -1, "You are not close enough to the point to sell fish or no longer have the fishing job.");

	new calc;//Boost (x4) to (x6)
	if(Player[playerid][TotalBass] > 0)
		calc = Player[playerid][TotalBass] * 54;//40(x4);
	if(Player[playerid][TotalCod] > 0)
		calc += Player[playerid][TotalCod] * 81;//60(x4);
	if(Player[playerid][TotalSalmon] > 0)
		calc += Player[playerid][TotalSalmon] * 108;//80(x4);
	if(Player[playerid][TotalMackerel] > 0)
		calc += Player[playerid][TotalMackerel] * 135;//100(x4);
	if(Player[playerid][TotalTuna] > 0)
		calc += Player[playerid][TotalTuna] * 162;//120(x4);
	if(Player[playerid][TotalCarp] > 0)
		calc += Player[playerid][TotalCarp] * 189;//140(x4);
	if(Player[playerid][TotalHerring] > 0)
		calc += Player[playerid][TotalHerring] * 216;//160(x4);
	if(Player[playerid][TotalMarlin] > 0)
		calc += Player[playerid][TotalMarlin] * 540;//400(x4);
	if(Player[playerid][TotalMako] > 0)
		calc += Player[playerid][TotalMako] * 810;//600(x4);
	if(Player[playerid][TotalCrab] > 0)
		calc += Player[playerid][TotalCrab] * 1080;//800(x4);
	if(Player[playerid][TotalKraken] > 0)
		calc += Player[playerid][TotalKraken] * 27000;//20000(x4);

	Player[playerid][Money] += calc;

	Player[playerid][TotalBass] = 0;
	Player[playerid][TotalCod] = 0;
	Player[playerid][TotalSalmon] = 0;
	Player[playerid][TotalMackerel] = 0;
	Player[playerid][TotalTuna] = 0;
	Player[playerid][TotalCarp] = 0;
	Player[playerid][TotalHerring] = 0;
	Player[playerid][TotalMarlin] = 0;
	Player[playerid][TotalMako] = 0;
	Player[playerid][TotalCrab] = 0;
	Player[playerid][TotalKraken] = 0;

	format(string, sizeof(string), "* %s has sold their fish.", GetNameEx(playerid));
	NearByMessage(playerid, NICESKY, string);
	format(string, sizeof(string), "You have earned %s for all of your fish.", PrettyMoney(calc));
	SendClientMessage(playerid, WHITE, string);
	format(string, sizeof(string), "[FISH] %s has sold all of their fish for %s (%s).", GetName(playerid), PrettyMoney(calc), PrettyMoney(Player[playerid][Money] + calc));
	MoneyLog(string);
	SavePlayerData(playerid);
	PlayerPlaySound(playerid, 6200, 0, 0, 0);
	return 1;
}

CMD:checkfish(playerid, params[])
{
	new id;

	if(isnull(params) || Player[playerid][AdminLevel] < 2)
		id = playerid;
	else if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /checkfish [playerid]");

	if(!IsPlayerConnected(id))
		return SendClientMessage(playerid, -1, "That player is not connected");

	new str[128];

	SendClientMessage(playerid, GREY, "--------------------------------");

	if(id == playerid)
	    SendClientMessage(playerid, GREY, "FISH");
	else
	{
	    format(str, sizeof(str), "FISH (%s)", GetName(id));
	    SendClientMessage(playerid, GREY, str);
	}

	if(Player[id][TotalBass] > 0)
	{
	    format(str, sizeof(str), "Bass (%d)", Player[id][TotalBass]);
	    SendClientMessage(playerid, WHITE, str);
	}
	if(Player[id][TotalCod] > 0)
	{
	    format(str, sizeof(str), "Cod (%d)", Player[id][TotalCod]);
	    SendClientMessage(playerid, WHITE, str);
	}
	if(Player[id][TotalSalmon] > 0)
	{
	    format(str, sizeof(str), "Salmon (%d)", Player[id][TotalSalmon]);
	    SendClientMessage(playerid, WHITE, str);
	}
	if(Player[id][TotalMackerel] > 0)
	{
	    format(str, sizeof(str), "Mackerel (%d)", Player[id][TotalMackerel]);
	    SendClientMessage(playerid, WHITE, str);
	}
	if(Player[id][TotalTuna] > 0)
	{
	    format(str, sizeof(str), "Tuna (%d)", Player[id][TotalTuna]);
	    SendClientMessage(playerid, WHITE, str);
	}
	if(Player[id][TotalCarp] > 0)
	{
	    format(str, sizeof(str), "Carp (%d)", Player[id][TotalCarp]);
	    SendClientMessage(playerid, WHITE, str);
	}
	if(Player[id][TotalHerring] > 0)
	{
	    format(str, sizeof(str), "Herring (%d)", Player[id][TotalHerring]);
	    SendClientMessage(playerid, WHITE, str);
	}
	if(Player[id][TotalMarlin] > 0)
	{
	    format(str, sizeof(str), "Marlin (%d)", Player[id][TotalMarlin]);
	    SendClientMessage(playerid, WHITE, str);
	}
	if(Player[id][TotalMako] > 0)
	{
	    format(str, sizeof(str), "Mako Shark (%d)", Player[id][TotalMako]);
	    SendClientMessage(playerid, WHITE, str);
	}
	if(Player[id][TotalCrab] > 0)
	{
	    format(str, sizeof(str), "King Crab (%d)", Player[id][TotalCrab]);
	    SendClientMessage(playerid, WHITE, str);
	}
	if(Player[id][TotalKraken] > 0)
	{
	    format(str, sizeof(str), "Kraken (%d)", Player[id][TotalKraken]);
	    SendClientMessage(playerid, WHITE, str);
	}

	SendClientMessage(playerid, GREY, "--------------------------------");

	return 1;
}

CMD:fish(playerid, params[])
{
	if(Jobs[Player[playerid][Job]][JobType] != JOB_FISHERMAN && Jobs[Player[playerid][Job2]][JobType] != JOB_FISHERMAN)
	    return SendClientMessage(playerid, WHITE, "You don't have the Fisherman job!");

	new PartyCheck = 0;
	if(Player[playerid][InPlayerParty] != INVALID_PLAYER_ID)
	{
		new partyid = Player[playerid][InPlayerParty];
		if(GetPlayerSurfingVehicleID(playerid) == GetPlayerVehicleID(partyid) && IsInFishingBoat(GetPlayerVehicleID(partyid))) //Possibly check that boat is owned by party leader
			PartyCheck = 1;
	}

	if(!IsInFishingBoat(GetPlayerVehicleID(playerid)) && !PartyCheck)
	    return SendClientMessage(playerid, WHITE, "You need to be in a fishing boat to fish!");

	if(Player[playerid][FishingRod] < 1 || Player[playerid][FishingBait] < 1)
	    return SendClientMessage(playerid, WHITE, "You need a fishing rod and bait to fish!");

	if(!IsInFishingZone(playerid) || IsPlayerInRangeOfPoint(playerid, FishDeadZone[3], FishDeadZone[0], FishDeadZone[1], FishDeadZone[2]))
		return SendClientMessage(playerid, WHITE, "There are no fish around to catch!");

	if(IsPlayerInRangeOfPoint(playerid, 20, Player[playerid][FishPos][0], Player[playerid][FishPos][1], Player[playerid][FishPos][2]))
		return SendClientMessage(playerid, -1, "There are no more fish in this area, try moving farther away from where you last caught a fish.");

	if(Player[playerid][CantFish] > gettime() || Player[playerid][FishAttempts] >= 10)
		return SendClientMessage(playerid, WHITE, "Please wait your reload time (1 hour).");

    new totalfish = Player[playerid][TotalBass] + Player[playerid][TotalCod] + Player[playerid][TotalSalmon] + Player[playerid][TotalMackerel];
	totalfish += Player[playerid][TotalTuna] + Player[playerid][TotalCarp] + Player[playerid][TotalHerring] + Player[playerid][TotalMarlin];
	totalfish += Player[playerid][TotalMako] + Player[playerid][TotalCrab] + Player[playerid][TotalKraken];
	if(totalfish >= 10)
	    return SendClientMessage(playerid, WHITE, "You can only hold 10 fish at a time!");

	new string[128];
	format(string, sizeof(string), "You must wait %d seconds to fish again.", GetPVarInt(playerid, "FishTime") - gettime());
	if(GetPVarInt(playerid, "FishTime") > gettime())
		return SendClientMessage(playerid, -1, string);

	Player[playerid][FishAttempts]++;
	Player[playerid][FishingBait]--;
	Player[playerid][TotalFished] += 4;
	SetPVarInt(playerid, "FishTime", gettime() + 15);

	new veh;
	if(PartyCheck == 1)
		veh = GetPlayerSurfingVehicleID(playerid);
	else veh = GetPlayerVehicleID(playerid);

	if(!IsValidVehicle(veh))
		return SendClientMessage(playerid, WHITE, "You are not driving a boat or on a boat driven by a party leader.");

	new boat = GetVehicleModel(veh);
	GetVehiclePos(veh, Player[playerid][FishPos][0], Player[playerid][FishPos][1], Player[playerid][FishPos][2]);

	switch(Player[playerid][TotalFished])
	{
	    case 0 .. 99: //Level 0
	    {
			switch(random(100))
			{
			    case 0 .. 98:
			    {
			        format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
					SendClientMessage(playerid, WHITE, "You have caught a Bass!");
					Player[playerid][TotalBass]++;
			    }
			    case 99:
			    {
			    	format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
			    	format(string, sizeof(string), "* The fishing rod snaps ((%s))", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
					SendClientMessage(playerid, WHITE, "Your fishing rod snapped!");
					Player[playerid][FishingRod]--;
					Player[playerid][TotalFishingRodsBroken] ++;
			    }
			}
	    }
	    case 100 .. 199: //Level 1
	    {
			switch(random(100))
			{
			    case 0 .. 60:
			    {
			        format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
					SendClientMessage(playerid, WHITE, "You have caught a Bass!");
					Player[playerid][TotalBass]++;
			    }
			    case 61 .. 98:
			    {
					format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
					SendClientMessage(playerid, WHITE, "You have caught a Cod!");
					Player[playerid][TotalCod]++;
			    }
			    case 99:
			    {
			    	format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
			    	format(string, sizeof(string), "* The fishing rod snaps ((%s))", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
					SendClientMessage(playerid, WHITE, "Your fishing rod snapped!");
					Player[playerid][FishingRod]--;
					Player[playerid][TotalFishingRodsBroken] ++;
			    }
			}
	    }
	    case 200 .. 299: //Level 2
	    {
			switch(random(100))
			{
			    case 0 .. 50:
			    {
                    format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
					SendClientMessage(playerid, WHITE, "You have caught a Bass!");
					Player[playerid][TotalBass]++;
			    }
			    case 51 .. 80:
			    {
					format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
					SendClientMessage(playerid, WHITE, "You have caught a Cod!");
					Player[playerid][TotalCod]++;
			    }
			    case 81 .. 98:
			    {
					format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
					SendClientMessage(playerid, WHITE, "You have caught a Salmon!");
					Player[playerid][TotalSalmon]++;
			    }
			    case 99:
			    {
			    	format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
			    	format(string, sizeof(string), "* The fishing rod snaps ((%s))", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
					SendClientMessage(playerid, WHITE, "Your fishing rod snapped!");
					Player[playerid][FishingRod]--;
					Player[playerid][TotalFishingRodsBroken] ++;
			    }
			}
	    }
	    case 300 .. 399: //Level 3
	    {
	        switch(random(100))
			{
			    case 0 .. 30:
			    {
                    format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
					SendClientMessage(playerid, WHITE, "You have caught a Bass!");
					Player[playerid][TotalBass]++;
			    }
			    case 31 .. 50:
			    {
					format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
					SendClientMessage(playerid, WHITE, "You have caught a Cod!");
					Player[playerid][TotalCod]++;
			    }
			    case 51 .. 75:
			    {
					format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
					SendClientMessage(playerid, WHITE, "You have caught a Salmon!");
					Player[playerid][TotalSalmon]++;
			    }
			    case 76 .. 98:
			    {
					format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
					SendClientMessage(playerid, WHITE, "You have caught a Mackerel!");
					Player[playerid][TotalMackerel]++;
			    }
			    case 99:
			    {
			    	format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
			    	format(string, sizeof(string), "* The fishing rod snaps ((%s))", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
					SendClientMessage(playerid, WHITE, "Your fishing rod snapped!");
					Player[playerid][FishingRod]--;
					Player[playerid][TotalFishingRodsBroken] ++;
			    }
			}
	    }
	    case 400 .. 499: //Level 4
	    {
	        switch(random(100))
			{
			    case 0 .. 20:
			    {
                    format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
					SendClientMessage(playerid, WHITE, "You have caught a Bass!");
					Player[playerid][TotalBass]++;
			    }
			    case 21 .. 35:
			    {
					format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
					SendClientMessage(playerid, WHITE, "You have caught a Cod!");
					Player[playerid][TotalCod]++;
			    }
			    case 36 .. 50:
			    {
					format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
					SendClientMessage(playerid, WHITE, "You have caught a Salmon!");
					Player[playerid][TotalSalmon]++;
			    }
			    case 51 .. 75:
			    {
					format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
					SendClientMessage(playerid, WHITE, "You have caught a Mackerel!");
					Player[playerid][TotalMackerel]++;
			    }
			    case 76 .. 98:
			    {
					format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
					SendClientMessage(playerid, WHITE, "You have caught a Tuna!");
					Player[playerid][TotalTuna]++;
			    }
			    case 99:
			    {
			    	format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
			    	format(string, sizeof(string), "* The fishing rod snaps ((%s))", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
					SendClientMessage(playerid, WHITE, "Your fishing rod snapped!");
					Player[playerid][FishingRod]--;
					Player[playerid][TotalFishingRodsBroken] ++;
			    }
			}
	    }
	    case 500 .. 599: //Level 5
	    {
	        switch(random(100))
			{
				case 0 .. 20:
				{
					format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
					SendClientMessage(playerid, WHITE, "You have caught a Bass!");
					Player[playerid][TotalBass]++;
				}
				case 21 .. 35:
				{
					format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
					SendClientMessage(playerid, WHITE, "You have caught a Cod!");
					Player[playerid][TotalCod]++;
				}
				case 36 .. 50:
				{
					format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
					SendClientMessage(playerid, WHITE, "You have caught a Salmon!");
					Player[playerid][TotalSalmon]++;
				}
				case 51 .. 70:
				{
					format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
					SendClientMessage(playerid, WHITE, "You have caught a Mackerel!");
					Player[playerid][TotalMackerel]++;
				}
				case 71 .. 85:
				{
					format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
					SendClientMessage(playerid, WHITE, "You have caught a Tuna!");
					Player[playerid][TotalTuna]++;
				}
				case 86 .. 98:
				{
					format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
					SendClientMessage(playerid, WHITE, "You have caught a Carp!");
					Player[playerid][TotalCarp]++;
				}
				case 99:
				{
					format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
					format(string, sizeof(string), "* The fishing rod snaps ((%s))", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
					SendClientMessage(playerid, WHITE, "Your fishing rod snapped!");
					Player[playerid][FishingRod]--;
					Player[playerid][TotalFishingRodsBroken] ++;
				}
			}
	    }
	    case 600 .. 699: //Level 6
	    {
			if(boat == 473)
			{
				switch(random(100))
				{
					case 0 .. 20:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Bass!");
						Player[playerid][TotalBass]++;
					}
					case 21 .. 35:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Cod!");
						Player[playerid][TotalCod]++;
					}
					case 36 .. 50:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Salmon!");
						Player[playerid][TotalSalmon]++;
					}
					case 51 .. 70:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Mackerel!");
						Player[playerid][TotalMackerel]++;
					}
					case 71 .. 85:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Tuna!");
						Player[playerid][TotalTuna]++;
					}
					case 86 .. 98:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Carp!");
						Player[playerid][TotalCarp]++;
					}
					case 99:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						format(string, sizeof(string), "* The fishing rod snaps ((%s))", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "Your fishing rod snapped!");
						Player[playerid][FishingRod]--;
						Player[playerid][TotalFishingRodsBroken] ++;
					}
				}
			}
			else
			{
				switch(random(100))
				{
					case 0 .. 15:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Bass!");
						Player[playerid][TotalBass]++;
					}
					case 16 .. 25:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Cod!");
						Player[playerid][TotalCod]++;
					}
					case 26 .. 40:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Salmon!");
						Player[playerid][TotalSalmon]++;
					}
					case 41 .. 55:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Mackerel!");
						Player[playerid][TotalMackerel]++;
					}
					case 56 .. 70:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Tuna!");
						Player[playerid][TotalTuna]++;
					}
					case 71 .. 85:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Carp!");
						Player[playerid][TotalCarp]++;
					}
					case 86 .. 98:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Herring!");
						Player[playerid][TotalHerring]++;
					}
					case 99:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						format(string, sizeof(string), "* The fishing rod snaps ((%s))", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "Your fishing rod snapped!");
						Player[playerid][FishingRod]--;
						Player[playerid][TotalFishingRodsBroken] ++;
					}
				}
			}
	    }
	    case 700 .. 799: //Level 7
	    {
			if(boat == 473)
			{
				switch(random(100))
				{
					case 0 .. 20:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Bass!");
						Player[playerid][TotalBass]++;
					}
					case 21 .. 35:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Cod!");
						Player[playerid][TotalCod]++;
					}
					case 36 .. 50:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Salmon!");
						Player[playerid][TotalSalmon]++;
					}
					case 51 .. 70:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Mackerel!");
						Player[playerid][TotalMackerel]++;
					}
					case 71 .. 85:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Tuna!");
						Player[playerid][TotalTuna]++;
					}
					case 86 .. 98:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Carp!");
						Player[playerid][TotalCarp]++;
					}
					case 99:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						format(string, sizeof(string), "* The fishing rod snaps ((%s))", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "Your fishing rod snapped!");
						Player[playerid][FishingRod]--;
						Player[playerid][TotalFishingRodsBroken] ++;
					}
				}
			}
			else
			{
				switch(random(120))
				{
					case 0 .. 30:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Bass!");
						Player[playerid][TotalBass]++;
					}
					case 31 .. 44:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Cod!");
						Player[playerid][TotalCod]++;
					}
					case 45 .. 58:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Salmon!");
						Player[playerid][TotalSalmon]++;
					}
					case 59 .. 68:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Mackerel!");
						Player[playerid][TotalMackerel]++;
					}
					case 69 .. 86:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Tuna!");
						Player[playerid][TotalTuna]++;
					}
					case 87 .. 94:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Carp!");
						Player[playerid][TotalCarp]++;
					}
					case 95 .. 106:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Herring!");
						Player[playerid][TotalHerring]++;
					}
					case 107 .. 118:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Marlin!");
						Player[playerid][TotalMarlin]++;
					}
					case 119:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						format(string, sizeof(string), "* The fishing rod snaps ((%s))", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "Your fishing rod snapped!");
						Player[playerid][FishingRod]--;
						Player[playerid][TotalFishingRodsBroken] ++;
					}
				}
			}
	    }
	    case 800 .. 899: //Level 8
	    {
			if(boat == 473)
			{
				switch(random(100))
				{
					case 0 .. 20:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Bass!");
						Player[playerid][TotalBass]++;
					}
					case 21 .. 35:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Cod!");
						Player[playerid][TotalCod]++;
					}
					case 36 .. 50:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Salmon!");
						Player[playerid][TotalSalmon]++;
					}
					case 51 .. 70:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Mackerel!");
						Player[playerid][TotalMackerel]++;
					}
					case 71 .. 85:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Tuna!");
						Player[playerid][TotalTuna]++;
					}
					case 86 .. 98:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Carp!");
						Player[playerid][TotalCarp]++;
					}
					case 99:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						format(string, sizeof(string), "* The fishing rod snaps ((%s))", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "Your fishing rod snapped!");
						Player[playerid][FishingRod]--;
						Player[playerid][TotalFishingRodsBroken] ++;
					}
				}
			}
			else
			{
				switch(random(140))
				{
					case 0 .. 26:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Bass!");
						Player[playerid][TotalBass]++;
					}
					case 27 .. 38:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Cod!");
						Player[playerid][TotalCod]++;
					}
					case 39 .. 54:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Salmon!");
						Player[playerid][TotalSalmon]++;
					}
					case 55 .. 68:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Mackerel!");
						Player[playerid][TotalMackerel]++;
					}
					case 69 .. 82:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Tuna!");
						Player[playerid][TotalTuna]++;
					}
					case 83 .. 96:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Carp!");
						Player[playerid][TotalCarp]++;
					}
					case 97 .. 110:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Herring!");
						Player[playerid][TotalHerring]++;
					}
					case 111 .. 124:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Marlin!");
						Player[playerid][TotalMarlin]++;
					}
					case 125 .. 138:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Mako Shark!");
						Player[playerid][TotalMako]++;
					}
					case 139:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						format(string, sizeof(string), "* The fishing rod snaps ((%s))", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "Your fishing rod snapped!");
						Player[playerid][FishingRod]--;
						Player[playerid][TotalFishingRodsBroken] ++;
					}
				}
			}
	    }
	    case 900 .. 999: //Level 9
	    {
			if(boat == 473)
			{
				switch(random(100))
				{
					case 0 .. 20:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Bass!");
						Player[playerid][TotalBass]++;
					}
					case 21 .. 35:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Cod!");
						Player[playerid][TotalCod]++;
					}
					case 36 .. 50:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Salmon!");
						Player[playerid][TotalSalmon]++;
					}
					case 51 .. 70:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Mackerel!");
						Player[playerid][TotalMackerel]++;
					}
					case 71 .. 85:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Tuna!");
						Player[playerid][TotalTuna]++;
					}
					case 86 .. 98:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Carp!");
						Player[playerid][TotalCarp]++;
					}
					case 99:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						format(string, sizeof(string), "* The fishing rod snaps ((%s))", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "Your fishing rod snapped!");
						Player[playerid][FishingRod]--;
						Player[playerid][TotalFishingRodsBroken] ++;
					}
				}
			}
			else
			{
				switch(random(160))
				{
					case 0 .. 36:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Bass!");
						Player[playerid][TotalBass]++;
					}
					case 37 .. 54:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Cod!");
						Player[playerid][TotalCod]++;
					}
					case 55 .. 70:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Salmon!");
						Player[playerid][TotalSalmon]++;
					}
					case 71 .. 86:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Mackerel!");
						Player[playerid][TotalMackerel]++;
					}
					case 87 .. 98:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Tuna!");
						Player[playerid][TotalTuna]++;
					}
					case 99 .. 108:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Carp!");
						Player[playerid][TotalCarp]++;
					}
					case 109 .. 120:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Herring!");
						Player[playerid][TotalHerring]++;
					}
					case 121 .. 136:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Marlin!");
						Player[playerid][TotalMarlin]++;
					}
					case 137 .. 146:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Mako Shark!");
						Player[playerid][TotalMako]++;
					}
					case 147 .. 158:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a King Crab!");
						Player[playerid][TotalCrab]++;
					}
					case 159:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						format(string, sizeof(string), "* The fishing rod snaps ((%s))", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "Your fishing rod snapped!");
						Player[playerid][FishingRod]--;
						Player[playerid][TotalFishingRodsBroken] ++;
					}
				}
			}
	    }
	    default: //Level 10
	    {
			if(boat == 473)
			{
				switch(random(100))
				{
					case 0 .. 20:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Bass!");
						Player[playerid][TotalBass]++;
					}
					case 21 .. 35:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Cod!");
						Player[playerid][TotalCod]++;
					}
					case 36 .. 50:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Salmon!");
						Player[playerid][TotalSalmon]++;
					}
					case 51 .. 70:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Mackerel!");
						Player[playerid][TotalMackerel]++;
					}
					case 71 .. 85:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Tuna!");
						Player[playerid][TotalTuna]++;
					}
					case 86 .. 98:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Carp!");
						Player[playerid][TotalCarp]++;
					}
					case 99:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						format(string, sizeof(string), "* The fishing rod snaps ((%s))", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "Your fishing rod snapped!");
						Player[playerid][FishingRod]--;
						Player[playerid][TotalFishingRodsBroken] ++;
					}
				}
			}
			else
			{
				switch(random(1000))
				{
					case 0 .. 199:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Bass!");
						Player[playerid][TotalBass]++;
					}
					case 200 .. 399:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Cod!");
						Player[playerid][TotalCod]++;
					}
					case 400 .. 489:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Salmon!");
						Player[playerid][TotalSalmon]++;
					}
					case 490 .. 539:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Mackerel!");
						Player[playerid][TotalMackerel]++;
					}
					case 540 .. 649:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Tuna!");
						Player[playerid][TotalTuna]++;
					}
					case 650 .. 779:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Carp!");
						Player[playerid][TotalCarp]++;
					}
					case 781 .. 819:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Herring!");
						Player[playerid][TotalHerring]++;
					}
					case 820 .. 869:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Marlin!");
						Player[playerid][TotalMarlin]++;
					}
					case 870 .. 939:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a Mako Shark!");
						Player[playerid][TotalMako]++;
					}
					case 940 .. 997:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "You have caught a King Crab!");
						Player[playerid][TotalCrab]++;
					}
					case 780, 998:
					{
						switch(random(3))
						{
							case 0:
							{
								format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
								NearByMessage(playerid, NICESKY, string);
								SendClientMessage(playerid, WHITE, "You have caught The Kraken!");
								GameTextForPlayer(playerid, "RELEASE THE KRAKEN!", 3500, 3);
								Player[playerid][TotalKraken]++;
								Player[playerid][TotalKrakensCaught] ++;
								Mole("RELEASE THE KRAKEN!");
							}
							case 1:
							{
								format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
								NearByMessage(playerid, NICESKY, string);
								format(string, sizeof(string), "* The fishing rod snaps ((%s))", GetNameEx(playerid));
								NearByMessage(playerid, NICESKY, string);
								SendClientMessage(playerid, WHITE, "The Kraken broke your rod!");
								Player[playerid][FishingRod]--;
								Player[playerid][TotalFishingRodsBroken] ++;
							}
							case 2:
							{
								format(string, sizeof(string), "* %s has cast their fishing rod and gets pulled into the water.", GetNameEx(playerid));
								NearByMessage(playerid, NICESKY, string);
								format(string, sizeof(string), "* The fishing rod snaps ((%s))", GetNameEx(playerid));
								NearByMessage(playerid, NICESKY, string);
								SendClientMessage(playerid, WHITE, "The Kraken pulled you into the water and killed you!");
								SetPlayerHealth(playerid, -1);
								Player[playerid][FishingRod]--;
								Player[playerid][TotalFishingRodsBroken] ++;
								Mole("KRAKEN: 1, PUNY HUMAN: 0");
							}
						}
					}
					case 999:
					{
						format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						format(string, sizeof(string), "* The fishing rod snaps ((%s))", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
						SendClientMessage(playerid, WHITE, "Your fishing rod snapped!");
						Player[playerid][FishingRod]--;
						Player[playerid][TotalFishingRodsBroken] ++;
					}
				}
			}
	    }
	}

	if(Player[playerid][FishAttempts] >= 10)
	{
		Player[playerid][CantFish] = gettime() + FISH_INABILITY_TIME;
		Player[playerid][FishAgainAntiSpam] = 1;
	    SendClientMessage(playerid, WHITE, "You've fished enough for now. Fish again in 60 minutes!");
 	}

	if(Player[playerid][TotalFished] % 100 == 0 && Player[playerid][TotalFished] < 1001)
	{
		new level[128];
		format(level, sizeof(level), "You have levelled up in fishing! You are now level %d.", Player[playerid][TotalFished] / 100);
		SendClientMessage(playerid, YELLOW, "======================================================================================");
		SendClientMessage(playerid, YELLOW, level);
		SendClientMessage(playerid, YELLOW, "======================================================================================");
		JobLog(playerid, "Fisherman", Player[playerid][TotalFished] / 100, (Player[playerid][TotalFished] - 1) / 100);
	}

	return 1;
}

command(propose, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /propose [playerid]");
	}
	else
	{
		if(IsPlayerConnectedEx(id))
		{
			if(strcmp(Player[id][MarriedTo], "Nobody", true) == 0)
			{
				if(Businesses[Player[playerid][InBusiness]][bType] == 9 && Businesses[Player[id][InBusiness]][bType] == 9)
				{
					if(GetDistanceBetweenPlayers(playerid, id) < 7)
					{
						if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice1])
						{
							if(playerid == id)
								return SendClientMessage(playerid, WHITE, "You can't marry yourself!");
							format(string, sizeof(string), "You are proposing to %s! Wait for them to accept/decline your proposal.", GetName(id));
							SendClientMessage(playerid, WHITE, string);
							format(string, sizeof(string), "%s is proposing to you! Type 'Yes' (and only that) in character to accept their proposal.", GetName(playerid));
							SendClientMessage(id, WHITE, string);
							Player[id][PendingProposal] = playerid;
						}
						else
						{
							new price = Businesses[Player[playerid][InBusiness]][bProductPrice1];
							format(string, sizeof(string), "You need at least %s to pay for the essential church services.", PrettyMoney(price));
							SendClientMessage(playerid, WHITE, string);
						}
					}
					else
					{
						SendClientMessage(playerid, WHITE, "You're too far away!");
					}
				}
				else
				{
					SendClientMessage(playerid, WHITE, "You both have to be in a church to do this.");
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "That person is already married.");
			}
		}
		else
		{
			SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in or is you.");
		}
	}
	return 1;
}

command(divorce, playerid, params[])
{
	#pragma unused params
	if(strlen(Player[playerid][MarriedTo]) < 1)
	{
		SendClientMessage(playerid, WHITE, "You're not married.");
	}
	else
	{
		new string[128], tmp = GetPlayerID(Player[playerid][MarriedTo]);
		if(IsPlayerConnectedEx(tmp))
		{
			format(string, sizeof(string), "%s is requesting a divorce (type /accept divorcerequest to proceed).", GetName(playerid));
			SendClientMessage(tmp, WHITE, string);
			format(string, sizeof(string), "You have requested to divorce %s.", GetName(tmp));
			SendClientMessage(playerid, WHITE, string);
			Player[playerid][PendingDivorce] = tmp;
		}
		else
		{
			SendClientMessage(playerid, WHITE, "Your bride must submit to the divorce, and they aren't online.");
		}
	}
	return 1;
}

command(sban, playerid, params[])
{
	new id, reason[128], string[128];
	if(sscanf(params, "us[128]", id, reason))
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /sban [playerid] [reason]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
			if(IsPlayerConnected(id))
			{
				if(Player[id][AdminLevel] >= Player[playerid][AdminLevel])
				{
					SendClientMessage(playerid, WHITE, "You do not have the authority to do that (higher rank, or the same).");
				}
				else
				{
					if(strlen(reason) >= 1)
					{
						new IP[21];
						GetPlayerIp(id, IP, sizeof(IP));
						format(string, sizeof(string), "%s | %s | %s (SILENT) | %s", IP, GetName(id), reason, Player[playerid][AdminName]);
						BanLog(string);

						if(Player[id][AdminLevel] < 1)
							Player[playerid][AdminActions]++;

						format(string, sizeof(string), "WARNING: %s has been silently banned by %s, defined reason: %s", GetName(id), Player[playerid][AdminName], reason);
						SendToAdmins(ADMINORANGE, string, 0);
						Player[id][Banned] = 1;
						format(Player[id][BannedReason], 128, "%s", reason);
						format(Player[id][BannedBy], 128, "%s", Player[playerid][AdminName]);
						SavePlayerData(id);
						KickEx(id);
						AdminActionsLog(string);
					}
					else
					{
						SendClientMessage(playerid, GREY, "SYNTAX: /sban [playerid] [reason]");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
				return 1;
			}
		}
	}
	return 1;
}

public RandomEx(min, max)
{
	return random(max - min) + min;
}

public IsSeatOccupied(vehicleid, seatid)
{
	foreach(Player, i)
	{
		if(GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) == seatid)
			return 1;
	}
	return 0;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	new sql = GetVSQLID(vehicleid), idx = GetVIndex(sql);

	if(sql == 0)
		return 1;

	//Wtf is this trying to accomplish exactly Willy???????
	new groupid = Veh[idx][Group];
	// if(Veh[idx][Group] > 0 && !Player[playerid][AdminDuty] && !ispassenger && Groups[groupid][CommandTypes] != 8 && Groups[groupid][CommandTypes] != 1 && Player[playerid][Group] != Veh[idx][Group])
		// ClearAnimations(playerid);

	if(Veh[idx][Group] > 0 && !Player[playerid][AdminDuty] && !ispassenger && Groups[groupid][CommandTypes] == 1 && Player[playerid][Group] != Veh[idx][Group])
		ClearAnimations(playerid);

	if(Veh[idx][Group] > 0 && !Player[playerid][AdminDuty] && !ispassenger && Groups[groupid][CommandTypes] == 3 && Player[playerid][Group] != Veh[idx][Group])
		ClearAnimations(playerid);

	if(Groups[groupid][CommandTypes] == 8)
	{
		if(IsATruck(vehicleid) && !Player[playerid][DoingTruckerTest])
			ClearAnimations(playerid);
		else if(!IsATruck(vehicleid) && !Player[playerid][DoingDMVTest])
			ClearAnimations(playerid);
	}

	/* if(Veh[idx][Group] != 0 && !ispassenger && !Player[playerid][AdminDuty])
	{
		if(Groups[Veh[idx][Group]][CommandTypes] == 8 && !Player[playerid][DoingDMVTest] && !Player[playerid][DoingTruckerTest])
			ClearAnimations(playerid);
		else if(Groups[Veh[idx][Group]][CommandTypes] == 8 && Player[playerid][DoingDMVTest] && IsATruck(vehicleid))
			ClearAnimations(playerid);
		else if(Groups[Veh[idx][Group]][CommandTypes] == 8 && Player[playerid][DoingTruckerTest] && !IsATruck(vehicleid))
			ClearAnimations(playerid);
		else if(Veh[idx][Group] != Player[playerid][Group] && Groups[Veh[idx][Group]][CommandTypes] != 8)
			ClearAnimations(playerid);
	}

	if(Veh[idx][Group] != Player[playerid][Group] && Veh[idx][Group] != 0 && !ispassenger && !Player[playerid][AdminDuty])
		ClearAnimations(playerid); */

	if(ispassenger && doors == 1)
		ClearAnimations(playerid);

	if(!Player[playerid][AdminDuty] && (Veh[idx][Job] != 0 && Player[playerid][Job] != Veh[idx][Job] && Player[playerid][Job2] != Veh[idx][Job]))
		ClearAnimations(playerid);

	if(Jobs[Veh[idx][Job]][JobType] == JOB_PIZZABOY && !Player[playerid][AdminDuty])
	{
		if(Jobs[Player[playerid][Job]][JobType] != JOB_PIZZABOY && Jobs[Player[playerid][Job2]][JobType] != JOB_PIZZABOY)
			ClearAnimations(playerid);
		if(Player[playerid][PizzaCooldown] > gettime() && Player[playerid][PizzaRun] == 0)
		{
			SendClientMessage(playerid, WHITE, "Please wait your cooldown time before doing another pizza run.");
			ClearAnimations(playerid);
		}
	}

	if(Jobs[Veh[idx][Job]][JobType] == JOB_TRUCKER && !Player[playerid][AdminDuty])
	{
		if(Veh[idx][Model] == 403 && Player[playerid][TruckDelivery] != 1)
			ClearAnimations(playerid);
		else if(Veh[idx][Model] == 514 && Player[playerid][TruckDelivery] != 2)
			ClearAnimations(playerid);
		else if(Player[playerid][TruckDelivery] == 0)
			ClearAnimations(playerid);
		else if(ispassenger)
			ClearAnimations(playerid);
	}

	//if((Player[playerid][Job] != Veh[idx][Job] && Player[playerid][Job2] != Veh[idx][Job]) || (Veh[idx][Job] == 8 && (Player[playerid][PizzaCooldown] > gettime() && Player[playerid][PizzaRun] == 0)))
	//	ClearAnimations(playerid);

	if(Player[playerid][Cuffed] >= 1 && ispassenger)
	{
		ClearAnimations(playerid);
	}

	if (GetPlayerSurfingVehicleID(playerid) == vehicleid)
	{
		ClearAnimations(playerid);
	}


	if(GetPVarInt(playerid, "BleedingOutTime") > 0)
	{
		ClearAnimations(playerid);
		ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0, 1);
	}

	/*new model = GetVehicleModel(vehicleid);
	if(model == 598)
	{
		Player[playerid][GotInCopCar]++;
		ResetPlayerWeapons(playerid);
		GivePlayerSavedWeapons(playerid);
	}*/

	new model = GetVehicleModel(vehicleid);
	if(model == 495 && Veh[idx][Mod9] == 1087)
	{		
		RemoveVehicleComponent(GetPlayerVehicleID(playerid), 1087);
	}
	return 1;
}

stock SpectatorRefresh(playerid, otherplayer)
{
	if(Player[playerid][AdminLevel] >= 1)
	{
		if(otherplayer == INVALID_PLAYER_ID)
		{
			SetPlayerInterior(playerid, Spectator[playerid][SpecPlayerInterior]);
			SetPlayerPos_Update(playerid, Spectator[playerid][SpecPlayerX], Spectator[playerid][SpecPlayerY], Spectator[playerid][SpecPlayerZ]);
			SetPlayerVirtualWorld(playerid, Spectator[playerid][SpecPlayerWorld]);
			SetPlayerFacingAngle(playerid, Spectator[playerid][SpecPlayerAngle]);

			SetCameraBehindPlayer(playerid);

			Spectator[playerid][SpecSpectatingPlayer] = -1;
			Spectator[playerid][SpecSpectatingState] = -1;

			SetPlayerSkin(playerid, Player[playerid][LastSkin]);
			TogglePlayerControllable(playerid, true);

			SendClientMessage(playerid, WHITE, "You are no longer spectating; the specified player ID is unavailable.");

		}
		else
		{
			if(GetPlayerInterior(playerid) != GetPlayerInterior(otherplayer))
			{
				SetPlayerInterior(playerid, GetPlayerInterior(otherplayer));
				Spectator[playerid][SpecSpectatingState] = 0;
			}

			if(GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(otherplayer))
			{
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(otherplayer));
				Spectator[playerid][SpecSpectatingState] = 0;
			}

			if(IsPlayerInAnyVehicle(otherplayer) == 1 && Spectator[playerid][SpecSpectatingState] != 1)
			{
				PlayerSpectateVehicle(playerid, GetPlayerVehicleID(otherplayer));
				Spectator[playerid][SpecSpectatingState] = 1;
			}
			else if(!IsPlayerInAnyVehicle(otherplayer) && Spectator[playerid][SpecSpectatingState] != 2)
			{
				PlayerSpectatePlayer(playerid, otherplayer);
				Spectator[playerid][SpecSpectatingState] = 2;
			}
		}
	}
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(Player[playerid][AdminLevel] >= 2)
	{
		new Float: health, Float: armour, healthf, armourf, string[128];
		if(Spectator[playerid][SpecSpectatingPlayer] == -1)
		{
			GetPlayerPos(playerid, Spectator[playerid][SpecPlayerX], Spectator[playerid][SpecPlayerY], Spectator[playerid][SpecPlayerZ]);
			GetPlayerFacingAngle(playerid, Spectator[playerid][SpecPlayerAngle]);
			Spectator[playerid][SpecPlayerWorld] = GetPlayerVirtualWorld(playerid);
			Spectator[playerid][SpecPlayerInterior] = GetPlayerInterior(playerid);
		}

		format(string, sizeof(string), "You are now spectating player %s.", GetName(clickedplayerid));
		SendClientMessage(playerid, GREY, string);
		GetPlayerHealth(clickedplayerid, health);
		GetPlayerArmour(clickedplayerid, armour);
		healthf = floatround(health, floatround_ceil);
		armourf = floatround(armour, floatround_ceil);
		new sql = GetVSQLID(GetPlayerVehicleID(clickedplayerid));
		if(sql == 0 || !IsPlayerInAnyVehicle(clickedplayerid))
			format(string, sizeof(string), "Health: %d | Armour: %d | Money: %s | Bank: %s | Hours: %d | SQLID: None", healthf, armourf, IntToFormattedStr(Player[clickedplayerid][Money]), IntToFormattedStr(Player[clickedplayerid][BankMoney]), Player[clickedplayerid][PlayingHours]);
		else
			format(string, sizeof(string), "Health: %d | Armour: %d | Money: %s | Bank: %s | Hours: %d | SQLID: %d", healthf, armourf, IntToFormattedStr(Player[clickedplayerid][Money]), IntToFormattedStr(Player[clickedplayerid][BankMoney]), Player[clickedplayerid][PlayingHours], sql);
		SendClientMessage(playerid, WHITE, string);
		Spectator[playerid][SpecSpectatingPlayer] = clickedplayerid;
		TogglePlayerSpectating(playerid, true);

		if(IsPlayerInAnyVehicle(clickedplayerid))
		{
			PlayerSpectateVehicle(playerid, GetPlayerVehicleID(clickedplayerid));
			Spectator[playerid][SpecSpectatingState] = 1;
		}
		else
		{
			PlayerSpectatePlayer(playerid, clickedplayerid);
			Spectator[playerid][SpecSpectatingState] = 2;
		}

		Spectator[playerid][SpecSpectatingPlayer] = clickedplayerid;
		SpectatorRefresh(playerid, clickedplayerid);
	}
	/*
	else
	{
		new string[128];
		format(string, sizeof(string), "Type your message you want to send to %s or ## to cancel", GetName(clickedplayerid));
		SetPVarInt(playerid, "PMTarget", clickedplayerid + 1);
		SetPVarInt(playerid, "Pming", 1);
		SendClientMessage(playerid, -1, string);
	}
	*/

	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	StopAudioStreamForPlayer(playerid);
	if(Player[playerid][PotTimer] > gettime())
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
	SetPlayerArmedWeapon(playerid, 0);
	UpdatePlayerToys(playerid);
	
	if(Player[playerid][Headphones] > 0)
	{
		new string[128];
		format(string, sizeof(string), "* %s removes their headphones.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);
		Player[playerid][Headphones] = 0;
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(Player[playerid][Blindfolded] > 0)
	{
		SetPlayerDrunkLevel(playerid, 50000);
		SetPlayerCameraLookAt(playerid, -830.8118, -1360.3612, 87.0289);
	}

	new vehicleid = GetPlayerVehicleID(playerid);
	if(vehicleid != Player[playerid][PartyBusVehicle] && Player[playerid][PartyBussin] > 0)
	{
		KillTimer(Player[playerid][PartyBusTimer]);
		SendClientMessage(playerid, -1, "You have disabled party bus.");
		Player[playerid][PartyBussin] = 0;
	}

	if(newstate == PLAYER_STATE_DRIVER && oldstate == PLAYER_STATE_ONFOOT)
	{
		new VehID = GetPlayerVehicleID(playerid),
		sql = GetVSQLID(VehID), idx = GetVIndex(sql);
		if(sql != 0)
		{
			if(IsAHelicopter(GetPlayerVehicleID(playerid)) && Player[playerid][VipRank] < 2 && Veh[idx][Group] == 0 && Veh[idx][GangLink] == 0)
			{
				SendClientMessage(playerid, YELLOW, "You must be a VIP Silver+ to drive this vehicle!");
				RemovePlayerFromVehicle(playerid);
			}
			new string[128];
			if(Player[playerid][AdminDuty] > 0)
			{
				if(Veh[idx][VIP] > 0 && Veh[idx][VIP] < 5)
					format(string, sizeof(string), "(( You have entered a VIP rank %d vehicle [SQLID %d] ))", Veh[idx][VIP], sql);

				else if(Veh[idx][Group] != 0)
					format(string, sizeof(string), "(( You have entered a group vehicle owned by %s (%d) [SQLID %d] ))",  Groups[Veh[idx][Group]][GroupName] ,Veh[idx][Group], sql);
				else if(Veh[idx][GangLink] != 0)
					format(string, sizeof(string), "(( You have entered a gang vehicle owned by %s (%d) [SQLID %d] ))", Gangs[Veh[idx][GangLink]][GangName], Veh[idx][GangLink], sql);
				else
				{
					if(!strcmp(Veh[idx][Owner], "unowned"))
						format(string, sizeof(string), "(( You have entered an unowned vehicle [SQLID %d] ))", sql);
					else
					format(string, sizeof(string), "(( You have entered a vehicle owned by %s [SQLID %d] ))", Veh[idx][Owner] ,sql);
				}
			}
			else
			{
				if(Veh[idx][VIP] > 0 && Veh[idx][VIP] < 5)
				{
					if(Player[playerid][VipRank] < Veh[idx][VIP])
					{
						format(string, sizeof(string), "(( This vehicle is only For VIPs rank %d and up! ))", Veh[idx][VIP]);
						RemovePlayerFromVehicle(playerid);
					}
					else
					format(string, sizeof(string), "(( You have entered a rank %d VIP vehicle ))", Veh[idx][VIP]);
				}
				else if(Veh[idx][Group] != 0)
				{
					if(Groups[Veh[idx][Group]][CommandTypes] == 8 && (Player[playerid][DoingDMVTest] > 0 || Player[playerid][DoingTruckerTest] > 0))
					{
						if(GetPVarInt(playerid, "DT_CompletedTime") == 0)
						{
							format(string, sizeof(string), "(( You have entered a driving test vehicle. ))", Groups[Veh[idx][Group]][GroupName]);
						}
					}
					else if(Player[playerid][Group] != Veh[idx][Group] && Groups[Veh[idx][Group]][CommandTypes] == 1 || Player[playerid][Group] != Veh[idx][Group] && Groups[Veh[idx][Group]][CommandTypes] == 2 || Player[playerid][Group] != Veh[idx][Group] && Groups[Veh[idx][Group]][CommandTypes] == 3 || Player[playerid][Group] != Veh[idx][Group] && Groups[Veh[idx][Group]][CommandTypes] == 4)
					{
						format(string, sizeof(string), "(( This vehicles is only usable by %s ))", Groups[Veh[idx][Group]][GroupName]);
						RemovePlayerFromVehicle(playerid);
					}
					else
					format(string, sizeof(string), "(( You have entered a group vehicle. ))");
				}
				else if(Veh[idx][GangLink] != 0)
				{
					format(string, sizeof(string), "(( You have entered a gang vehicle. ))");
				}
				else if(Veh[idx][Job] != 0)
				{
					if(Veh[idx][Job] != Player[playerid][Job] && Veh[idx][Job] != Player[playerid][Job2])
					{
						format(string, sizeof(string), "(( This vehicle is only useable by a %s ))", Jobs[Veh[idx][Job]][JobName]);
						RemovePlayerFromVehicle(playerid);
					}
					else
					{
						if(Jobs[Veh[idx][Job]][JobType] == JOB_PIZZABOY)
						{
							if(gettime() > Player[playerid][PizzaCooldown])
								cmd_deliverpizza(playerid, "");
						}
						format(string, sizeof(string), "(( You have entered a vehicle for a %s ))", Jobs[Veh[idx][Job]][JobName]);
					}
				}
			}
			if(!isnull(string))
				SendClientMessage(playerid, -1, string);

			//Taxi

			if(Player[playerid][Job] == 10 && Veh[idx][Job] == 10)
			{
				foreach(Player, i)
				{
					if(i == playerid)
						continue;

					if(Player[i][TaxiCar] == GetPlayerVehicleID(playerid))
					{
						SendClientMessage(playerid, -1, "This taxi is already in use");
						RemovePlayerFromVehicle(playerid);
						break;
					}
				}
				if(Player[playerid][TaxiDuty] == 1)
				{
					DeletePVar(playerid, "TaxiDutyTimeout");
					SendClientMessage(playerid, -1, "You've re-eneterd your vehicle, you will remain on-duty");
				}
			}

			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(VehID, engine, lights, alarm, doors, bonnet, boot, objective);

			if(!IsABike(VehID) && engine != 1 && Veh[idx][Fuel] > 0 && Player[playerid][PlayingHours] < 10)
			{
				if(HasVehicleAccess(playerid, sql) || HasVJobKey(playerid, idx))
					SendClientMessage(playerid, YELLOW, "[TIP] Type /e to start the vehicle.");
				else
					SendClientMessage(playerid, YELLOW, "[TIP] Type /hotwire to attempt to start the vehicle.");
			}

			// if(!IsABike(VehID) && engine != 1 && Veh[idx][Fuel] > 0 && Player[playerid][PlayingHours] < 10 && (!strcmp(Veh[idx][Owner], GetName(playerid), false) || Player[playerid][TempKey] == sql))
				// SendClientMessage(playerid, YELLOW, "[TIP] Type /e to start the vehicle.");

			// if(!IsABike(VehID) && engine != 1 && Veh[idx][Fuel] > 0 && strcmp(Veh[idx][Owner], GetName(playerid), false) && Player[playerid][TempKey] != sql && Player[playerid][PlayingHours] < 10)
				// SendClientMessage(playerid, YELLOW, "[TIP] Type /hotwire to attempt to start the vehicle.");

			if(Veh[idx][Fuel] == 0)
				SendClientMessage(playerid, -1, "This vehicle is out of fuel");
		}

		if(Player[playerid][Cuffed] >= 1)
		{
			RemovePlayerFromVehicle(playerid);
			TogglePlayerControllable(playerid, false);
			SendClientMessage(playerid, WHITE, "You may not execute that action right now.");
		}
	}
	else if(oldstate == PLAYER_STATE_DRIVER && newstate == PLAYER_STATE_ONFOOT)
	{
		if(Player[playerid][ModShop] == 1)
		{
			Player[playerid][ModShop] = 0;
			SetPlayerPos_Update(playerid, SpawnX, SpawnY, SpawnZ);
			SetPlayerVirtualWorld(playerid, SpawnWorld);
			SetPlayerInterior(playerid, SpawnInt);
			SetPlayerFacingAngle(playerid, 0);
		}

		if(Player[playerid][InDerby] == 1)
		{
			SendClientMessage(playerid, -1, "You have left the derby because you exited the vehicle.");
			return cmd_leavederby(playerid, "exitedCar");
		}


		//Hide the fuel textdraw
		//TextDrawHideForPlayer(playerid, Player[playerid][FuelTD]);

		//Taxi
		if(Player[playerid][TaxiDuty] == 1 && Player[playerid][LastCarID] == Player[playerid][TaxiCar])
		{
			SetPVarInt(playerid, "TaxiDutyTimeout", gettime() + 30);
			SendClientMessage(playerid, -1, "You have 30 seconds to get back in your taxi");
		}
	}

	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{ /*
		new str[1024];
		DestroyDynamic3DTextLabel(Player[playerid][StatisticsTag]);
		Player[playerid][StatisticsTag] = CreateDynamic3DTextLabel(str, WHITE, 0.0, 0.0, 0.3, 15.0, playerid, INVALID_VEHICLE_ID, 1);
		UpdatePlayerLabel(playerid); */

		// not allowed: colt, silenced colt, deagle, combat, sawnoff
		if(GetPlayerWeapon(playerid) == 22 || GetPlayerWeapon(playerid) == 23 || GetPlayerWeapon(playerid) == 24 || GetPlayerWeapon(playerid) == 27 || GetPlayerWeapon(playerid) == 26)
		{
			SetPlayerArmedWeapon(playerid, 0);
			OnPlayerChangeWeapon(playerid, Player[playerid][LastWeapon], 0);
		}
		
		/*
		if(Player[playerid][WepSlot4] != 0)
			SetPlayerArmedWeapon(playerid, Player[playerid][WepSlot4]);
		else {
			SetPlayerArmedWeapon(playerid, 0);
			OnPlayerChangeWeapon(playerid, Player[playerid][LastWeapon], 0);
		}
		*/
		
		Player[playerid][LastCarID] = GetPlayerVehicleID(playerid);
		new sql = GetVSQLID(Player[playerid][LastCarID]), idx = GetVIndex(sql);

		if(Player[playerid][FavoriteStationSet] == 1 && newstate == PLAYER_STATE_DRIVER && sql != 0 && Veh[idx][radioState] > 0)
        {
            StopAudioStreamForPlayer(playerid);
            format(Veh[idx][radioUrl], 100, "%s", Player[playerid][FavoriteStation]);
			foreach(Player, i)
			{
				if(IsPlayerInVehicle(i, GetPlayerVehicleID(playerid)))
				{
					PlayAudioStreamForPlayer(i, Veh[idx][radioUrl]);
					if(GetPVarInt(i, "PlayingBoombox"))
						DeletePVar(i, "PlayingBoombox");
				}
			}
        }
        else if(sql != 0)
        {
            if(Veh[idx][radioState] == 1)
            {
                StopAudioStreamForPlayer(playerid);
                PlayAudioStreamForPlayer(playerid, Veh[idx][radioUrl]);
				if(GetPVarInt(playerid, "PlayingBoombox"))
					DeletePVar(playerid, "PlayingBoombox");
            }
        }

		if(GetPlayerVehicleSeat(playerid) == -1 || GetPlayerVehicleSeat(playerid) >= GetMaxVehicleSeats(vehicleid))
		{
			new warning[128];
			format(warning, sizeof(warning), "WARNING: %s (ID: %d) might be using modded vehicle textures. (SQLID: %d - SEATID: %d)", GetName(playerid), playerid, sql, GetPlayerVehicleSeat(playerid));
			SendToAdmins(ADMINORANGE, warning, 0);
			WarningLog(warning);
		}

		if(GetPlayerToggle(playerid, TOGGLE_VEH_NAMES) == false)
		{
			new vtext[60];
			format(vtext, sizeof(vtext), "~g~%s", vNames[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400]);
			GameTextForPlayer(playerid, vtext, 3000, 1);
		}

		//Car rain protection 1
		if(gettime() - GetPVarInt(playerid, "CarEnterTime") < 2 && !IsABoat(Player[playerid][LastCarID]) && Player[playerid][LastCarID] != 471 && !IsABike(Player[playerid][LastCarID])){
			new string[128];
			format(string, sizeof(string), "WARNING: %s (ID: %d) has entered a new vehicle within 2 seconds of entering a vehicle previously. (SQL: %d)", GetName(playerid), playerid, sql);
			SendToAdmins(ADMINORANGE, string, 0);
			WarningLog(string);
			new CO = GetPVarInt(playerid, "CarOffence");
			if(CO  && SavingStatus == 0)
			{
				if(Player[playerid][AdminLevel] == 0)
				{
					new IP[21];
					GetPlayerIp(playerid, IP, sizeof(IP));
					format(string, sizeof(string), "%s | %s | Car Teleport Hacking (1).", IP, GetName(playerid));
					BanLog(string);
					format(string, sizeof(string), "Ban: %s has been auto-banned. Defined reason: \"Car Teleport Hacking (1)\".", GetName(playerid));
					SendClientMessageToAll(LIGHTRED, string);
					print(string);
					Player[playerid][Banned] = 1;
					format(Player[playerid][BannedReason], 128, "Autoban: Car Teleport Hacking (1) [SQLID: %d]", sql);
					format(Player[playerid][BannedBy], 128, "System");
					SavePlayerData(playerid);
					Kick(playerid);
					format(string, sizeof(string), "banip %s", IP);
					SendRconCommand(string);
					new query[255];
					mysql_format(MYSQL_MAIN, query, sizeof(query), "INSERT INTO ipbans (IP, Timestamp, Reason) VALUES ('%e', '%e', '%e')", IP, GetDate(), Player[playerid][BannedReason]);
					new Cache:cache = mysql_query(MYSQL_MAIN, query);
					cache_delete(cache);
				}
			}
			else
			SetPVarInt(playerid, "CarOffence", 1);
		}
		SetPVarInt(playerid, "CarEnterTime", gettime());

	}

	if(newstate == PLAYER_STATE_ONFOOT)
	{
		StopAudioStreamForPlayer(playerid);
		
		if(GetPlayerToggle(playerid, TOGGLE_FUEL_BAR) == false)
		{
			DestroyPlayerProgressBar(playerid, vFuel[playerid]);
			vFuel[playerid] = INVALID_PLAYER_BAR_ID;
		}

		if(Player[playerid][OnTaxiCall] >= 0)
		{
			cmd_hangup(playerid, "taxicallend");
		}
	}

	if(newstate == PLAYER_STATE_DRIVER)
	{
		new VehID = GetPlayerVehicleID(playerid);

		if(!IsABike(VehID) && GetVSQLID(VehID) != 0 && GetPlayerToggle(playerid, TOGGLE_FUEL_BAR) == false)
		{
			vFuel[playerid] = CreatePlayerProgressBar(playerid, 548.5, 26.0, _, _, 0x00FF00FF, 100.0);
			ShowPlayerProgressBar(playerid, vFuel[playerid]);
		}
	}
	return 1;
}

public RefreshMaterials(playerid)
{
	Player[playerid][CompleteRun] = 0;
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	if(Player[playerid][DoingDMVTest] > 0 && Player[playerid][Checkpoint] > 0)
	{
		if(GetPlayerVehicleSeat(playerid) != 0)
			return SendClientMessage(playerid, -1, "You cannot attempt a test when you're not in the drivers seat."), cmd_endtest(playerid);

		new cp = Player[playerid][DrivingTestCP];
		if(DrivingTest[cp][0] == 0.00)
		{
			SendClientMessage(playerid, -1, "You have completed the test, head back inside and see if you passed!");
			DisablePlayerRaceCheckpoint(playerid);
			Player[playerid][Checkpoint] = 0;
			Player[playerid][DoingDMVTest] = 3;
			new Float:vehhealth;
			GetVehicleHealth(GetPlayerVehicleID(playerid), vehhealth);
			SetPVarInt(playerid, "DT_CarDamage", floatround(vehhealth, floatround_round));
			SetPVarInt(playerid, "DT_CompletedTime", gettime() - GetPVarInt(playerid, "DT_CompletedTime"));
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			return Player[playerid][DrivingTestCP] = -1;
		}
		if(DrivingTest[cp + 1][0] == 0.00)
			SetPlayerRaceCheckpoint(playerid, 1, DrivingTest[cp][0], DrivingTest[cp][1], DrivingTest[cp][2], 0.0, 0.0, 0.0, 3.0);
		else SetPlayerRaceCheckpoint(playerid, 0, DrivingTest[cp][0], DrivingTest[cp][1], DrivingTest[cp][2], DrivingTest[cp + 1][0], DrivingTest[cp + 1][1], DrivingTest[cp + 1][2], 3.0);
		Player[playerid][DrivingTestCP]++;
	}
	else if(Player[playerid][DoingTruckerTest] > 0 && Player[playerid][Checkpoint] > 0)
	{
		if(!IsPlayerInAnyVehicle(playerid))
			return SendClientMessage(playerid, -1, "You must be in your truck to do this.");

		new sql = GetVSQLID(GetPlayerVehicleID(playerid)), idx = GetVIndex(sql);
		if(!IsATruck(Veh[idx][Link]))
			return SendClientMessage(playerid, -1, "You must be in a truck to do this!");

		if(sql == 0)
			return SendClientMessage(playerid, RED, "THAT VEHICLE IS NOT SAVED.");

		new trailerid = GetVehicleTrailer(GetPlayerVehicleID(playerid));
		if(trailerid == 0)
			return SendClientMessage(playerid, -1, "You must have your trailer on at all times.");

		new cp = Player[playerid][TruckingTestCP];
		if(DrivingTest[cp][0] == 0.00)
		{
			SendClientMessage(playerid, -1, "You have completed the test, head back inside and see if you passed!");
			DisablePlayerRaceCheckpoint(playerid);
			Player[playerid][Checkpoint] = 0;
			Player[playerid][DoingTruckerTest] = 3;
			new Float:vehhealth;
			GetVehicleHealth(GetPlayerVehicleID(playerid), vehhealth);
			SetPVarInt(playerid, "TT_CarDamage", floatround(vehhealth, floatround_round));
			SetPVarInt(playerid, "TT_CompletedTime", gettime() - GetPVarInt(playerid, "TT_CompletedTime"));
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			SetVehicleToRespawn(trailerid);
			return Player[playerid][TruckingTestCP] = -1;
		}
		if(DrivingTest[cp + 1][0] == 0.00)
			SetPlayerRaceCheckpoint(playerid, 1, DrivingTest[cp][0], DrivingTest[cp][1], DrivingTest[cp][2], 0.0, 0.0, 0.0, 3.0);
		else SetPlayerRaceCheckpoint(playerid, 0, DrivingTest[cp][0], DrivingTest[cp][1], DrivingTest[cp][2], DrivingTest[cp + 1][0], DrivingTest[cp + 1][1], DrivingTest[cp + 1][2], 3.0);
		Player[playerid][TruckingTestCP]++;
	}
	else if(Player[playerid][RallyCP] >= 0 && Player[playerid][Checkpoint] > 0 && Player[playerid][InRally])
	{
		new string[128];
		if(Player[playerid][RallyCP] < TotalRallyCheckpoints)
		{
			DisablePlayerRaceCheckpoint(playerid);
			format(string, sizeof(string), "You have reached checkpoint #%d! Only %d to go.", Player[playerid][RallyCP]+1, TotalRallyCheckpoints - Player[playerid][RallyCP]);
			SendClientMessage(playerid, -1, string);
			Player[playerid][RallyCP]++;
			new cp = Player[playerid][RallyCP];
			if(cp != TotalRallyCheckpoints)
				SetPlayerRaceCheckpoint(playerid, 0, RallyCheckpoints[cp][0], RallyCheckpoints[cp][1], RallyCheckpoints[cp][2], RallyCheckpoints[cp+1][0], RallyCheckpoints[cp+1][1], RallyCheckpoints[cp+1][2], 10.0);
			else
				SetPlayerRaceCheckpoint(playerid, 1, RallyCheckpoints[cp][0], RallyCheckpoints[cp][1], RallyCheckpoints[cp][2], RallyCheckpoints[cp][0], RallyCheckpoints[cp][1], RallyCheckpoints[cp][2], 10.0);

			if(cp == 1 && RallyNos > 0 && IsPlayerInAnyVehicle(playerid))
				AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);

			if(Player[playerid][RallyCP] > RallyThirdCP)
				UpdateRallyLeaderboard(playerid);
		}
		else if(Player[playerid][RallyCP] == TotalRallyCheckpoints)
		{
			SendClientMessage(playerid, WHITE, "You have reached the final checkpoint! You're the winner!!");
			format(string, sizeof(string), "Congratulations to %s - they've won the race!", GetName(playerid));
			SendClientMessageToAll(LIGHTRED, string);
			OOCChatLog(string);

			EndRally();
		}
	}
	else if(Player[playerid][MatRunning] > 0)
	{
		new Float:x, Float:y, Float:z;
		GetPlayerObjectPos(playerid, MatObject[playerid], x, y, z);
		new randx = floatround(x) + RandomEx(-100, 100);
		new randy = floatround(y) + RandomEx(-100, 100);
		SetPlayerRaceCheckpoint(playerid, 0, randx, randy, z + 10, x, y, z, 10.0);
		Player[playerid][Checkpoint] = 1;
	}
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	if(Player[playerid][Map] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You have reached your desired destination.");
		Player[playerid][Map] = 0;
		Player[playerid][Checkpoint] = 0;
		DisablePlayerCheckpoint(playerid);
		return 1;
	}
	else
	{
		if(Player[playerid][Checkpoint] == 69)
		{
			DisablePlayerCheckpoint(playerid);
			SendClientMessage(playerid, WHITE, "Checkpoint reached!");
			Player[playerid][Checkpoint] = 0;
		}
		else
		{
			new sql = GetVSQLID(GetPlayerVehicleID(playerid)), idx = GetVIndex(sql);
			if(Player[playerid][TruckStage] > 0 && idx != -1 && Jobs[Veh[idx][Job]][JobType] == JOB_TRUCKER)
			{
				if(GetPlayerVehicleSeat(playerid) != 0)
					return SendClientMessage(playerid, -1, "You cannot attempt a trucker run when you're not in the drivers seat."), cmd_endtest(playerid);

				switch(Player[playerid][TruckStage])
				{
					case 1: SendClientMessage(playerid, -1, "Type /loadtruck to load your truck with supplies/fuel.");
					case 2: SendClientMessage(playerid, -1, "Type /deliver to unload and deliver your supplies/fuel.");
					case 3: SendClientMessage(playerid, -1, "Type /finishdelivery to complete your trucker delivery.");
					case 4: SendClientMessage(playerid, -1, "Type /quitdelivery to end your delivery.");
					default: return 1;
				}
				DisablePlayerCheckpoint(playerid);
				Player[playerid][Checkpoint] = 0;
			}

			if(Player[playerid][AttendingBackupCall] != -1)
			{
				Player[playerid][Checkpoint] = 0;
				Player[playerid][AttendingBackupCall] = -1;
				SendClientMessage(playerid, WHITE, "Backup checkpoint reached.");
				DisablePlayerCheckpoint(playerid);
				return 1;
			}

			if(Player[playerid][Harvesting] >= 1)
			{
				switch(Player[playerid][Harvesting])
				{
					case 1:
					{
						SendClientMessage(playerid, WHITE, "You have reached the first checkpoint! You have 4 remaining.");
						SetPlayerCheckpoint(playerid, Harvest2X, Harvest2Y, Harvest2Z, 10.0);
						Player[playerid][Harvesting] = 2;
					}
					case 2:
					{
						SendClientMessage(playerid, WHITE, "You have reached the second checkpoint! You have 3 remaining.");
						SetPlayerCheckpoint(playerid, Harvest3X, Harvest3Y, Harvest3Z, 10.0);
						Player[playerid][Harvesting] = 3;
					}
					case 3:
					{
						SendClientMessage(playerid, WHITE, "You have reached the third checkpoint! You have 2 remaining.");
						SetPlayerCheckpoint(playerid, Harvest4X, Harvest4Y, Harvest4Z, 10.0);
						Player[playerid][Harvesting] = 4;
					}
					case 4:
					{
						SendClientMessage(playerid, WHITE, "You have reached the forth checkpoint! You have 1 remaining.");
						SetPlayerCheckpoint(playerid, Harvest5X, Harvest5Y, Harvest5Z, 10.0);
						Player[playerid][Harvesting] = 5;
					}
					case 5:
					{
						SendClientMessage(playerid, WHITE, "You have reached the fifth checkpoint! You have 0 remaining.");
						DisablePlayerCheckpoint(playerid);
						Player[playerid][Checkpoint] = 0;
						Player[playerid][Harvesting] = 7;
						SendClientMessage(playerid, WHITE, "Now you have the drugs, please deliver them to a chemist / pharmacy business (use /deliver).");
					}
				}
			}

			if(Player[playerid][FindingHouse] >= 1)
			{
				Player[playerid][Checkpoint] = 0;
				Player[playerid][FindingHouse] = 0;
				DisablePlayerCheckpoint(playerid);
				SendClientMessage(playerid, WHITE, "You have reached your desired destination.");
			}

			if(Player[playerid][Detecting] >= 1)
			{
				DisablePlayerCheckpoint(playerid);
				SendClientMessage(playerid, WHITE, "You have reached the checkpoint.");
				Player[playerid][Detecting] = 0;
				Player[playerid][Checkpoint] = 0;
			}

			if(Player[playerid][FindingCar] == 1)
			{
				DisablePlayerCheckpoint(playerid);
				Player[playerid][FindingCar] = 0;
				Player[playerid][Checkpoint] = 0;
				SendClientMessage(playerid, WHITE, "You've reached the checkpoint.");
			}

			if(IsPlayerInRangeOfPoint(playerid, 3.0, DropCarX, DropCarY, DropCarZ))
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
					if(sql == 0)
						return 1;

					if(strcmp(Veh[idx][Owner], "unowned", true) && strcmp(Veh[idx][Owner], Player[playerid][NormalName], true))
						return SendClientMessage(playerid, WHITE, "You're unable to drop somebody else's vehicle.");
					
					if(!strcmp(Veh[idx][Owner], Player[playerid][NormalName], true))
					{
						new vid = GetPlayerVehicleID(playerid);
						new payment = floatround((GetVehicleBasePrice(GetVehicleModel(vid)) * 0.35), floatround_round);
						new string[128];
						format(string, sizeof(string), "You will receive 35 percent of the base price of your vehicle: {21DD00}%s", PrettyMoney(payment));
						SetPVarInt(playerid, "SellBackVehicle", payment);
						return ShowPlayerDialog(playerid, DIALOG_SELLBACKVEHICLE, DIALOG_STYLE_MSGBOX, "Confirm Vehicle Sale", string, "Sell", "Cancel");
					}

					else if(Veh[idx][Group] != 0 || Veh[idx][Job] != 0)
						SendClientMessage(playerid, WHITE, "You're unable to drop a faction or job specific vehicle.");

					else
					{
						//new Float:health;

						new string[128], playerscar, value;
						//GetVehicleHealth(playerscar, health);


						switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
						{
							case 400: value = 36; //Vehicle worth in materials
							case 401: value = 10;
							case 402: value = 16;
							case 403: value = 60;
							case 404: value = 28;
							case 405: value = 32;
							case 408: value = 100;
							case 409: value = 40;
							case 410: value = 10;
							case 411: value = 16;
							case 412: value = 16;
							case 413: value = 20;
							case 414: value = 44;
							case 415: value = 14;
							case 418: value = 40;
							case 419: value = 30;
							case 421: value = 32;
							case 422: value = 30;
							case 426: value = 26;
							case 429: value = 14;
							case 434: value = 8;
							case 436: value = 10;
							case 439: value = 12;
							case 440: value = 40;
							case 442: value = 44;
							case 445: value = 32;
							case 448: value = 6;
							case 451: value = 16;
							case 456: value = 50;
							case 458: value = 28;
							case 459: value = 40;
							case 461: value = 6;
							case 462: value = 4;
							case 463: value = 6;
							case 466: value = 24;
							case 467: value = 24;
							case 468: value = 6;
							case 471: value = 6;
							case 474: value = 24;
							case 475: value = 24;
							case 477: value = 14;
							case 478: value = 32;
							case 479: value = 34;
							case 480: value = 14;
							case 481: value = 2;
							case 482: value = 40;
							case 483: value = 46;
							case 489: value = 40;
							case 491: value = 28;
							case 492: value = 30;
							case 495: value = 42;
							case 496: value = 12;
							case 498: value = 42;
							case 499: value = 44;
							case 500: value = 14;
							case 505: value = 40;
							case 506: value = 16;
							case 507: value = 28;
							case 508: value = 55;
							case 509: value = 2;
							case 510: value = 4;
							case 514: value = 60;
							case 515: value = 70;
							case 516: value = 28;
							case 517: value = 26;
							case 518: value = 26;
							case 521: value = 6;
							case 522: value = 6;
							case 526: value = 10;
							case 527: value = 10;
							case 529: value = 20;
							case 531: value = 28;
							case 533: value = 26;
							case 534: value = 30;
							case 535: value = 24;
							case 536: value = 26;
							case 540: value = 28;
							case 541: value = 16;
							case 542: value = 22;
							case 543: value = 30;
							case 545: value = 24;
							case 546: value = 24;
							case 547: value = 26;
							case 549: value = 16;
							case 550: value = 28;
							case 551: value = 30;
							case 554: value = 34;
							case 555: value = 14;
							case 558: value = 14;
							case 559: value = 14;
							case 560: value = 18;
							case 561: value = 18;
							case 562: value = 14;
							case 565: value = 12;
							case 566: value = 22;
							case 567: value = 20;
							case 572: value = 5;
							case 575: value = 32;
							case 576: value = 34;
							case 579: value = 38;
							case 580: value = 42;
							case 581: value = 6;
							case 585: value = 28;
							case 586: value = 8;
							case 587: value = 14;
							case 589: value = 12;
							case 600: value = 18;
							case 602: value = 14;
							case 603: value = 22;
							case 604: value = 15;
							case 605: value = 15;
							case 609: value = 42;
							default: value = 5;
						}

						if(MatSafeClosed == 1)
						{
							SendClientMessage(playerid, -1, "Hey man, we don't want anything right now! Try again later!");
							Player[playerid][InabilityToDropCar] = gettime() + 900;
							Player[playerid][Checkpoint] = 0;
							DisablePlayerCheckpoint(playerid);
							SendClientMessage(playerid, -1, "You must wait 15 more minutes before you can try drop a car again.");
							return 1;
						}

						new cashmoney = value * 10;
						value *= 3;

						if(cashmoney > 0)
							format(string, sizeof(string), "You have delivered the vehicle to be dropped, and have earned %s.", PrettyMoney(cashmoney));
						else
							format(string, sizeof(string), "You have delivered the vehicle to be dropped, but earnt nothing.");

						SendClientMessage(playerid, WHITE, string);
						playerscar = GetPlayerVehicleID(playerid);
						SetPlayerPos_Update(playerid, DropCarX, DropCarY, DropCarZ);
						RemovePlayerFromVehicle(playerid);
						Player[playerid][Money] += cashmoney;
						MatSafeMaterials += value;
						dini_IntSet("Assets.ini", "MatSafeMaterials", MatSafeMaterials);

						if(MatSafeMaterials >= 2000)
						{
							MatSafeClosed = 1;
							dini_IntSet("Assets.ini", "MatSafeClosed", MatSafeClosed);
						}

						SetVehicleToRespawn(playerscar);
						Player[playerid][Checkpoint] = 0;
						DisablePlayerCheckpoint(playerid);
						Player[playerid][InabilityToDropCar] = gettime() + 3600;
						Player[playerid][TotalCarsDropped] ++;
						SendClientMessage(playerid, WHITE, "You will now have to wait 1 hour before you can drop another car!");
						SavePlayerData(playerid);
						if(Player[playerid][TotalCarsDropped] == 25)
						{
							SendClientMessage(playerid, PHONE, "SMS from Unknown: Hey, I see you've delivered a good amount of cars for recycling... If you want to make more cash hit me up.");
							SendClientMessage(playerid, WHITE, "You are now able to have the car jacker job! Use /map -> Jobs -> Car Jacker to find out where to join it.");
						}
					}
				}
			}

			if(Player[playerid][PizzaRun] > 0)
			{
				for(new i; i < MAX_HOUSES; i++)
				{
					if(playerid == PizzaOrderTaken[i] - 1)
					{
						if(IsPlayerInRangeOfPoint(playerid, 5.0, Houses[i][hExteriorX], Houses[i][hExteriorY], Houses[i][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 5.0, Businesses[GetHouseApartmentComplex(i)][bExteriorX], Businesses[GetHouseApartmentComplex(i)][bExteriorY], Businesses[GetHouseApartmentComplex(i)][bExteriorZ]))
						{
							if(Jobs[Player[playerid][Job]][JobType] != JOB_PIZZABOY && Jobs[Player[playerid][Job2]][JobType] != JOB_PIZZABOY)
							{
								Player[playerid][PizzaRun] = 0;
								Player[playerid][PizzaCooldown] = 0;
								Player[playerid][PizzaDist] = 0;
								Player[playerid][PizzaPay] = 0;
								Player[playerid][Checkpoint] = 0;

								DisablePlayerCheckpoint(playerid);
								return SendClientMessage(playerid, -1, "You have to have the Pizza Boy job to do this!");
							}

							if(!IsPlayerInAnyVehicle(playerid))
								return SendClientMessage(playerid, -1, "You must be on the pizza boy bike.");

							new job = (Jobs[Player[playerid][Job]][JobType] == JOB_PIZZABOY) ? (Player[playerid][Job]) : (Player[playerid][Job2]);

							if(sql == 0)
								return SendClientMessage(playerid, -1, "The vehicle must be a saved vehicle.");

							if(Jobs[Veh[idx][Job]][JobType] != JOB_PIZZABOY)
								return SendClientMessage(playerid, -1, "You have to be on the pizza boy bike to deliver the pizza.");


							new string[128];

							if(Player[playerid][PizzaTimeCheck] > gettime())
							{
								format(string, sizeof(string), "WARNING: %s has reached a pizza delivery checkpoint in under 15 seconds!", GetName(playerid));
								SendToAdmins(ADMINORANGE, string, 1);
								WarningLog(string);
							}

							new pay = 20 + (floatround(Player[playerid][PizzaDist], floatround_round) / 300);

							new sold_pizzas;

							if(PizzaOrder[i] < Player[playerid][PizzaRun])
							{
								Player[playerid][PizzaRun] -= PizzaOrder[i];
								sold_pizzas = PizzaOrder[i];
								PizzaOrder[i] = 0;
							}
							else
							{
								PizzaOrder[i] -= Player[playerid][PizzaRun];
								sold_pizzas = Player[playerid][PizzaRun];
								Player[playerid][PizzaRun] = 0;
							}

							PizzaOrderTaken[i] = 0;
							new id = GetPlayersID(Houses[i][hOwner]);
							if(id != INVALID_PLAYER_ID)
							{
								Player[id][Money] -= sold_pizzas * 20;
								format(string, sizeof(string), "A pizza boy has delivered %d pizzas to your house. (%d pizzas are still to be delivered)", sold_pizzas, PizzaOrder[i]);
								SendClientMessage(id, -1, string);
							}
							Houses[i][hPizzas] += sold_pizzas * 8;
							Player[playerid][PizzaDelivers]++;
							Player[playerid][Money] += sold_pizzas * 20;
							Player[playerid][PizzaPay] += pay;
							Player[playerid][PizzaTimeCheck] = gettime() + 15;

							format(string, sizeof(string), "You delivered a pizza and received %s.", PrettyMoney(sold_pizzas * 20));
							SendClientMessage(playerid, -1, string);

							if(Player[playerid][PizzaRun] > 0)
							{
								new point = GetPizzaPoint(playerid, Player[playerid][PizzaCP]), zone[MAX_ZONE_NAME];
								SetPlayerCheckpoint(playerid, pizzaDeliveries[point][0], pizzaDeliveries[point][1], pizzaDeliveries[point][2], 5);
								Get2DPosZone(pizzaDeliveries[point][0], pizzaDeliveries[point][1], zone, MAX_ZONE_NAME);
								format(string, sizeof(string), "Head to %s to deliver the next pizza. (%d remaining)", zone, Player[playerid][PizzaRun]);
								SendClientMessage(playerid, YELLOW, string);

								Player[playerid][PizzaDist] = GetDistanceBetweenPoints(Jobs[job][JobMiscLocationOneX], Jobs[job][JobMiscLocationOneY], Jobs[job][JobMiscLocationOneZ], pizzaDeliveries[point][0], pizzaDeliveries[point][1], pizzaDeliveries[point][2]);
								Player[playerid][PizzaCooldown] += 60;
								Player[playerid][PizzaCP] = point;
							}
							else
							{
								new zone[MAX_ZONE_NAME];
								Player[playerid][PizzaCooldown] = 0;
								Get2DPosZone(Jobs[job][JobMiscLocationOneX], Jobs[job][JobMiscLocationOneY], zone, MAX_ZONE_NAME);
								format(string, sizeof(string), "You have delivered all the pizzas! Head back to %s to collect your pay.", zone);
								SendClientMessage(playerid, YELLOW, string);
								SetPlayerCheckpoint(playerid, Jobs[job][JobMiscLocationOneX], Jobs[job][JobMiscLocationOneY], Jobs[job][JobMiscLocationOneZ], 5);
							}

							if(Player[playerid][PizzaDelivers] % 200 == 0 && Player[playerid][PizzaDelivers] < 601)
							{
								new level[128];
								format(level, sizeof(level), "You have levelled up in Pizza Boy! You are now level %d.", Player[playerid][PizzaDelivers] / 200);
								SendClientMessage(playerid, YELLOW, "======================================================================================");
								SendClientMessage(playerid, YELLOW, level);
								SendClientMessage(playerid, YELLOW, "======================================================================================");
								JobLog(playerid, "Pizza boy", Player[playerid][PizzaDelivers] / 200, (Player[playerid][PizzaDelivers] - 1) / 200);
							}

							return 1;
						}
					}
				}
				if(IsPlayerInRangeOfPoint(playerid, 5, pizzaDeliveries[Player[playerid][PizzaCP]][0], pizzaDeliveries[Player[playerid][PizzaCP]][1], pizzaDeliveries[Player[playerid][PizzaCP]][2]))
				{
					if(Jobs[Player[playerid][Job]][JobType] != JOB_PIZZABOY && Jobs[Player[playerid][Job2]][JobType] != JOB_PIZZABOY)
					{
						Player[playerid][PizzaRun] = 0;
						Player[playerid][PizzaCooldown] = 0;
						Player[playerid][PizzaDist] = 0;
						Player[playerid][PizzaPay] = 0;
						Player[playerid][Checkpoint] = 0;

						for(new i; i < MAX_HOUSES; i++)
							if(playerid == PizzaOrderTaken[i] - 1)
								PizzaOrderTaken[i] = 0;

						DisablePlayerCheckpoint(playerid);
						return SendClientMessage(playerid, -1, "You have to have the Pizza Boy job to do this!");
					}

					if(!IsPlayerInAnyVehicle(playerid))
						return SendClientMessage(playerid, -1, "You must be on the pizza boy bike.");

					new job = (Jobs[Player[playerid][Job]][JobType] == JOB_PIZZABOY) ? (Player[playerid][Job]) : (Player[playerid][Job2]);

					if(sql == 0)
						return SendClientMessage(playerid, -1, "The vehicle must be a saved vehicle.");

					if(Jobs[Veh[idx][Job]][JobType] != JOB_PIZZABOY)
						return SendClientMessage(playerid, -1, "You have to be on the pizza boy bike to deliver the pizza.");


					new string[128], pay = 35, tip;

					if(Player[playerid][PizzaTimeCheck] > gettime())
					{
						format(string, sizeof(string), "WARNING: %s has reached a pizza delivery checkpoint in under 15 seconds!", GetName(playerid));
						SendToAdmins(ADMINORANGE, string, 1);
						WarningLog(string);
					}

					pay += (floatround(Player[playerid][PizzaDist], floatround_round) / 300);
					tip = ((Player[playerid][PizzaCooldown] - gettime()) / 50) + random(3);

					if(tip < 0)
						tip = 0;

					Player[playerid][PizzaRun]--;
					Player[playerid][PizzaDelivers]++;
					Player[playerid][Money] += tip;
					Player[playerid][PizzaPay] += pay;
					Player[playerid][PizzaTimeCheck] = gettime() + 15;

					if(Player[playerid][PizzaDelivers] % 200 == 0 && Player[playerid][PizzaDelivers] < 601)
					{
						new level[128];
						format(level, sizeof(level), "You have levelled up in Pizza Boy! You are now level %d.", Player[playerid][PizzaDelivers] / 200);
						SendClientMessage(playerid, YELLOW, "======================================================================================");
						SendClientMessage(playerid, YELLOW, level);
						SendClientMessage(playerid, YELLOW, "======================================================================================");
						JobLog(playerid, "Pizza boy", Player[playerid][PizzaDelivers] / 200, (Player[playerid][PizzaDelivers] - 1) / 200);
					}

					format(string, sizeof(string), "You delivered a pizza and received a %s tip.", PrettyMoney(tip));
					SendClientMessage(playerid, -1, string);

					if(Player[playerid][PizzaRun] > 0)
					{
						new point = GetPizzaPoint(playerid, Player[playerid][PizzaCP]), zone[MAX_ZONE_NAME];
						SetPlayerCheckpoint(playerid, pizzaDeliveries[point][0], pizzaDeliveries[point][1], pizzaDeliveries[point][2], 5);
						Get2DPosZone(pizzaDeliveries[point][0], pizzaDeliveries[point][1], zone, MAX_ZONE_NAME);
						format(string, sizeof(string), "Head to %s to deliver the next pizza. (%d remaining)", zone, Player[playerid][PizzaRun]);
						SendClientMessage(playerid, YELLOW, string);

						Player[playerid][PizzaDist] = GetDistanceBetweenPoints(Jobs[job][JobMiscLocationOneX], Jobs[job][JobMiscLocationOneY], Jobs[job][JobMiscLocationOneZ], pizzaDeliveries[point][0], pizzaDeliveries[point][1], pizzaDeliveries[point][2]);
						Player[playerid][PizzaCooldown] += 60;
						Player[playerid][PizzaCP] = point;
					}
					else
					{
						new zone[MAX_ZONE_NAME];
						Player[playerid][PizzaCooldown] = 0;
						Get2DPosZone(Jobs[job][JobMiscLocationOneX], Jobs[job][JobMiscLocationOneY], zone, MAX_ZONE_NAME);
						format(string, sizeof(string), "You have delivered all the pizzas! Head back to %s to collect your pay.", zone);
						SendClientMessage(playerid, YELLOW, string);
						SetPlayerCheckpoint(playerid, Jobs[job][JobMiscLocationOneX], Jobs[job][JobMiscLocationOneY], Jobs[job][JobMiscLocationOneZ], 5);
					}
				}
			}
			if(Player[playerid][PizzaPay] > 0 || GetPVarInt(playerid, "HouseDeliveryFailed") == 1)
			{
				new job = (Jobs[Player[playerid][Job]][JobType] == JOB_PIZZABOY) ? (Player[playerid][Job]) : (Player[playerid][Job2]);
				if(IsPlayerInRangeOfPoint(playerid, 5, Jobs[job][JobMiscLocationOneX], Jobs[job][JobMiscLocationOneY], Jobs[job][JobMiscLocationOneZ]))
				{

					if(Jobs[Player[playerid][Job]][JobType] != JOB_PIZZABOY && Jobs[Player[playerid][Job2]][JobType] != JOB_PIZZABOY)
					{
						Player[playerid][PizzaRun] = 0;
						Player[playerid][PizzaCooldown] = 0;
						Player[playerid][PizzaDist] = 0;
						Player[playerid][PizzaPay] = 0;
						Player[playerid][Checkpoint] = 0;
						SetPVarInt(playerid, "HouseDeliveryFailed", 0);
						DisablePlayerCheckpoint(playerid);
						return SendClientMessage(playerid, -1, "You have to have the Pizza Boy job to do this!");
					}

					if(GetPVarInt(playerid, "HouseDeliveryFailed") == 1)
					{
						SetPVarInt(playerid, "HouseDeliveryFailed", 0);
						Player[playerid][PizzaPay] = 0;
						Player[playerid][PizzaDist] = 0;
						Player[playerid][PizzaCP] = 0;
						Player[playerid][PizzaTimeCheck] = 0;
						Player[playerid][Checkpoint] = 0;
						DisablePlayerCheckpoint(playerid);
						if(sql != 0 && Veh[idx][Job] == job)
							Veh[idx][Fuel] = 40;
						RemovePlayerFromVehicle(playerid);
						SetPlayerPos_Update(playerid, Jobs[job][JobMiscLocationOneX], Jobs[job][JobMiscLocationOneY], Jobs[job][JobMiscLocationOneZ]);
						return SetVehicleToRespawn(GetPlayerVehicleID(playerid));
					}

					if(sql == 0)
						return SendClientMessage(playerid, -1, "The vehicle must be a saved vehicle.");

					if(Veh[idx][Job] != job)
						return SendClientMessage(playerid, -1, "You have to be on the pizza boy bike to deliver the pizza.");

					new string[128];

					if(Player[playerid][PizzaTimeCheck] > gettime())
					{
						format(string, sizeof(string), "WARNING: %s has reached a pizza delivery checkpoint in under 15 seconds!", GetName(playerid));
						SendToAdmins(ADMINORANGE, string, 1);
						WarningLog(string);
					}

					format(string, sizeof(string), "You have successfully completed the delivery and have been paid %s.", PrettyMoney(Player[playerid][PizzaPay]));
					SendClientMessage(playerid, -1, string);
					Player[playerid][Money] += Player[playerid][PizzaPay];
					Player[playerid][PizzaPay] = 0;
					Player[playerid][PizzaDist] = 0;
					Player[playerid][PizzaCP] = 0;
					Player[playerid][PizzaTimeCheck] = 0;

					Veh[idx][Fuel] = 40;
					RemovePlayerFromVehicle(playerid);
					SetPlayerPos_Update(playerid, Jobs[job][JobMiscLocationOneX], Jobs[job][JobMiscLocationOneY], Jobs[job][JobMiscLocationOneZ]);
					SetVehicleToRespawn(GetPlayerVehicleID(playerid));

					SendClientMessage(playerid, YELLOW, "Get on another bike if you want to do more deliveries!");

					Player[playerid][Checkpoint] = 0;
					DisablePlayerCheckpoint(playerid);
				}
			}
		}
	}
	return 1;
}

//Start of event stuff

CMD:setupevent(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 4)
		return 1;

	ShowPlayerDialog(playerid, EVENT_CHOOSE, DIALOG_STYLE_LIST, "What kind of event do you wish to set up?", "Deathmatch\nTeam Deathmatch\nRally\nDerby", "Select", "Exit");
	return 1;
}

CMD:continue(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 4)
		return 1;

	switch(EditEvent[playerid][EventType])
	{
		case 1: OnDialogResponse(playerid, EVENT_CHOOSE, 1, 0, "Deathmatch");
		case 2: OnDialogResponse(playerid, EVENT_CHOOSE, 1, 1, "Team Deathmatch");
		case 3: OnDialogResponse(playerid, EVENT_CHOOSE, 1, 2, "Rally");
		case 4: OnDialogResponse(playerid, EVENT_CHOOSE, 1, 3, "Derby");
		default: SendClientMessage(playerid, -1, "You haven't started creating an event.");
	}
	return 1;
}

CMD:eventwinner(playerid, params[])
{
	new pid, string[128];

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(sscanf(params, "u", pid))
		return SendClientMessage(playerid, -1, "SYNTAX: /eventwinner [playerid]");

	if(CurrentEvent == 0)
		return SendClientMessage(playerid, -1, "There isn't an event currently going on.");

	if(eventType != 1)
		return SendClientMessage(playerid, -1, "There isn't a Deathmatch currently going on.");

	if(AutoPickWinner != 0)
		return SendClientMessage(playerid, -1, "The event options have been set to auto-pick the winner.");

	if(Player[pid][IsAtEvent] != 1)
		return SendClientMessage(playerid, -1, "That player isn't in the event.");

	CurrentEvent = 0;
	TextDrawHideForAll(EventTextDraw);
	format(string, sizeof(string), "Congratulations to %s - they've won the event!", GetName(pid));
	SendClientMessageToAll(LIGHTRED, string);
	ResetPlayerWeapons(pid);
	new MathsFlaw = floatround(Player[pid][LastHealth], floatround_ceil);
	SetPlayerHealth(pid, MathsFlaw);
	MathsFlaw = floatround(Player[pid][LastArmour], floatround_ceil);
	SetPlayerArmour(pid, MathsFlaw);
	Player[pid][Hospitalized] = 0;
	Player[pid][IsAtEvent] = 0;
	TogglePlayerControllable(pid, true);
	Player[pid][ResetTimer] = 1;
	ResetPlayerWeapons(pid);
	GivePlayerSavedWeapons(pid);
	Iter_Clear(EventPlayers);
	SendPlayerToSavedPos(pid);
	UpdatePlayerNameColour(pid);
	SendClientMessage(pid, WHITE, "Thanks for playing fair! Congratulations on winning the event.");
	
	stop UpdateEventTimer;
	return 1;
}

CMD:joinevent(playerid, params[])
{

	if(CurrentEvent != 1)
		return SendClientMessage(playerid, WHITE, "Sorry, it appears you have missed the event or one has not been started. Please wait until the next!");

	if(EventVip > 0 && Player[playerid][VipRank] < 1)
		return 1;

	if(eventType > 2 || eventType < 1)
		return SendClientMessage(playerid, -1, "Something went wrong. Report to an admin/developer");

	if(Player[playerid][AdminDuty] > 0)
		cmd_adminduty(playerid, "");

	if(GetPlayerInterior(playerid) > 0)
		return SendClientMessage(playerid, -1, "You can't join an event in an interior!");

	if(Player[playerid][IsAtEvent] != 0)
		return SendClientMessage(playerid, WHITE, "You are already participating in an event!");

	if(GetEventPlayerCount() >= maxPlayers && maxPlayers > 0)
		return SendClientMessage(playerid, -1, "This event has reached the maximum amount of players.");

	if(!IsPlayerSpawned(playerid))
		return SendClientMessage(playerid, WHITE, "You can't join as you're not currently spawned.");

	if(Player[playerid][PrisonID] == 1 && Player[playerid][PrisonDuration] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Tied] >= 1)
		return SendClientMessage(playerid, WHITE, "You can't participate as you're prisoned, jailed, cuffed, tied or tazed.");
	
	if(Player[playerid][Mask] == 1)
		return SendClientMessage(playerid, -1, "Remove your mask before joining the event.");

	if(Player[playerid][CopDuty] > 0)
		cmd_badge(playerid, "");

	GetPlayerHealth(playerid, Player[playerid][LastHealth]);
	GetPlayerArmour(playerid, Player[playerid][LastArmour]);

	new Float:lastX, Float:lastY, Float:lastZ, lastInt = GetPlayerInterior(playerid), lastVW = GetPlayerVirtualWorld(playerid);
	GetPlayerPos(playerid, lastX, lastY, lastZ);
	SetPVarInt(playerid, "lastInt", lastInt+1);
	SetPVarInt(playerid, "lastVW", lastVW+1);
	SetPVarFloat(playerid, "lastX", lastX);
	SetPVarFloat(playerid, "lastY", lastY);
	SetPVarFloat(playerid, "lastZ", lastZ);

	Player[playerid][LastSkin] = GetPlayerSkin(playerid);
	ResetPlayerWeapons(playerid);

	GivePlayerWeapon(playerid, EventWeapon1, 999999);
	GivePlayerWeapon(playerid, EventWeapon2, 999999);
	GivePlayerWeapon(playerid, EventWeapon3, 999999);
	GivePlayerWeapon(playerid, EventWeapon4, 999999);
	GivePlayerWeapon(playerid, EventWeapon5, 999999);

	SetPlayerHealth(playerid, EventHP);
	SetPlayerArmour(playerid, EventArmour);

	SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 999);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 999);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 999);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 999);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 999);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 999);

	switch(eventType)
	{
		case 1: //DM
		{
			SetPlayerSkin(playerid, EventSkin);
			SetPlayerInterior(playerid, EventInt);
			SetPlayerVirtualWorld(playerid, EventWorld);
			SetPlayerPos_Update(playerid, EventX, EventY, EventZ);
			Player[playerid][IsAtEvent] = 1;
			SendClientMessage(playerid, WHITE, "You have successfully joined the event. Please wait, the event will start shortly!");
			TogglePlayerControllable(playerid, false);

			if(Player[playerid][AdminDuty] < 1)
				SetPlayerColor(playerid, RED);

		}
		case 2: //TDM
		{
			switch(EventRand)
			{
				case 0:
				{
					EventRand = 1;
					Player[playerid][eventTeam] = 1;
					Player[playerid][TotalEventKills] = 0;
					SetPlayerTeam(playerid, 1);
					SetPlayerSkin(playerid, EventSkin);
					SetPlayerInterior(playerid, EventInt);
					SetPlayerVirtualWorld(playerid, EventWorld);
					SetPlayerPos_Update(playerid, EventX, EventY, EventZ);
					Player[playerid][IsAtEvent] = 1;
					SendClientMessage(playerid, WHITE, "You have successfully joined the event. You are on team one!");
					TogglePlayerControllable(playerid, false);
					if(Player[playerid][AdminDuty] < 1)
						SetPlayerColor(playerid, RED);

				}
				case 1:
				{
					EventRand = 0;
					Player[playerid][eventTeam] = 2;
					Player[playerid][TotalEventKills] = 0;
					SetPlayerTeam(playerid, 2);
					SetPlayerSkin(playerid, EventSkin2);
					SetPlayerInterior(playerid, EventInt);
					SetPlayerVirtualWorld(playerid, EventWorld);
					SetPlayerPos_Update(playerid, EventPos2[0], EventPos2[1], EventPos2[2]);
					Player[playerid][IsAtEvent] = 1;
					SendClientMessage(playerid, WHITE, "You have successfully joined the event. You are on team two!!");
					TogglePlayerControllable(playerid, false);
					if(Player[playerid][AdminDuty] < 1)
						SetPlayerColor(playerid, LIGHTGREEN);

				}
			}
		}
		default: SendClientMessage(playerid, -1, "Something went wrong. Your best bet is to just blame Chenko. (Line 36041)");
	}


	if(Player[playerid][AdminLevel] < 2)
		Player[playerid][Muted] = 1;
	new string[128];
	
	Iter_Add(EventPlayers, playerid);
	format(string, sizeof(string), "%s has joined an event.", GetName(playerid));
	NearByMessage(playerid, ANNOUNCEMENT, string);
	return 1;
}

timer UpdateEvent[15000]()
{
	if(CurrentEvent == 2)
	{
		new string[128];

		if(IsPlayerConnected(MostKills))
		{
			format(string, sizeof(string), "~n~~r~Kills Leader: ~w~%s (%d)~n~~n~~r~Players Remaining: ~w~%d~n~~n~", GetName(MostKills), Player[MostKills][eventKills], GetEventPlayerCount());
			TextDrawSetString(EventTextDraw, string);
		}
		else
		{
			new id;
			foreach(new i : EventPlayers)
			{
				if(Player[i][IsAtEvent] == 1)
				{
					if(Player[i][eventKills] > Player[id][eventKills])
						id = i;
				}
			}
			MostKills = id;
			format(string, sizeof(string), "~n~~r~Kills Leader: ~w~%s (%d)~n~~n~~r~Players Remaining: ~w~%d~n~~n~", GetName(MostKills), Player[MostKills][eventKills], GetEventPlayerCount());
			TextDrawSetString(EventTextDraw, string);
		}
	}
	else if(CurrentEvent == 0 && DerbyStatus >= 1)
	{
		switch(GetEventVehicleCount())
		{
			case 0:
			{
				SendClientMessageToAll(LIGHTRED, "The derby has been ended.");
				OOCChatLog("The derby has been ended.");
				EndDerby();
			}
			case 1:
			{
				new pid, string[128];

				pid = GetDerbyWinner();

				format(string, sizeof(string), "Congratulations to %s for winning the derby!", GetName(pid)) ;

				if(DerbyVip > 0)
					SendMessageToVip(LIGHTRED, string);
				else SendClientMessageToAll(LIGHTRED, string);
				SendClientMessage(pid, WHITE, "Congratulations on winning the derby!");

				EndDerby();
			}
		}
	}
	return 1;
}

stock DestroyEventVehicles()
{
	foreach(new i : EventVehicles)
	{
		DestroyVehicle(i);
	}
	Iter_Clear(EventVehicles);
	return 1;
}

stock IsEventVehicle(vehicleid)
{
	return Iter_Contains(EventVehicles, vehicleid);
}

stock GetEventPlayerCount()
{
	return Iter_Count(EventPlayers);
}

stock AddEventVehicle(vehicleid)
{
	return Iter_Add(EventVehicles, vehicleid);
}

stock RemoveEventVehicle(vehicleid)
{
	DestroyVehicle(vehicleid);
	return Iter_Remove(EventVehicles, vehicleid);
}

stock GetEventVehicleCount()
{
	return Iter_Count(EventVehicles);
}

stock GetDerbyWinner()
{
	new id = INVALID_PLAYER_ID;
    foreach(Player, i)
    {
        if(Player[i][InDerby] >= 1 && GetEventVehicleCount() == 1)
		{
            id = i;
			break;
        }
    }
    return id;
}

stock IsAnyEventHappening(Event = 0)
{
	if(Event == 0)
	{
		if(DerbyStatus > 0 || RallyInProgress > 0 || CurrentEvent > 0)
			return 1;
	}
	else
	{
		switch(Event)
		{
			case 1, 2:
			{
				if(DerbyStatus >= 1 || RallyInProgress >= 1)
					return 1;
			}
			case 3:
			{
				if(DerbyStatus >= 1 || CurrentEvent >= 1)
					return 1;
			}
			case 4:
			{
				if(CurrentEvent >= 1 || RallyInProgress >= 1)
					return 1;
			}
		}
	}
	return 0;
}

CMD:startevent(playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][AdminLevel] >= 4)
	{
		if(eventType == 0)
			return SendClientMessage(playerid, -1, "You forgot to save the event!");

		if(IsAnyEventHappening(1))
			return SendClientMessage(playerid, -1, "You can't start an event while another event is in progress.");

		if(eventType > 2 || eventType < 1)
			return SendClientMessage(playerid, -1, "Something went wrong. Report to a developer");

		if(CurrentEvent == 0)
		{
			format(string, sizeof(string), "%s has started an event with the following properties: Type: %d | Health: %d | Armour: %d | Int: %d | VW: %d ", \
			Player[playerid][AdminName], eventType, EventHP, EventArmour, EventInt, EventWorld);
			format(string, sizeof(string), "%s| Skin: %d | Skin2: %d | Weapon 1: %d | Weapon 2: %d | Weapon 3: %d | Weapon 4: %d | Weapond 5: %d | VIP: %d | MaxPlayers: %d | KillsToWin: %d | MaxDeaths: %d", string, EventSkin, EventSkin2, EventWeapon1, EventWeapon2, EventWeapon3, EventWeapon4, EventWeapon5, EventVip, maxPlayers, KillsToWin, maxDeaths);
			AdminActionsLog(string);

			CurrentEvent = 1;
			format(string, sizeof(string), "Server Admin %s has set up an event, type /joinevent to participate!", Player[playerid][AdminName]);
			if(EventVip > 0)
			{
				SendMessageToVip(LIGHTRED, string);
				SendMessageToVip(LIGHTRED, "STORE YOUR WEAPONS!! Weapons, money and skins will not be refunded if lost! THIS IS YOUR WARNING!");
				SendMessageToVip(LIGHTRED, "STORE YOUR WEAPONS!! Weapons, money and skins will not be refunded if lost! THIS IS YOUR WARNING!");
				SendMessageToVip(LIGHTRED, "STORE YOUR WEAPONS!! Weapons, money and skins will not be refunded if lost! THIS IS YOUR WARNING!");
			}
			else
			{
				SendClientMessageToAll(LIGHTRED, string);
				SendClientMessageToAll(LIGHTRED, "STORE YOUR WEAPONS!! Weapons, money and skins will not be refunded if lost! THIS IS YOUR WARNING!");
				SendClientMessageToAll(LIGHTRED, "STORE YOUR WEAPONS!! Weapons, money and skins will not be refunded if lost! THIS IS YOUR WARNING!");
				SendClientMessageToAll(LIGHTRED, "STORE YOUR WEAPONS!! Weapons, money and skins will not be refunded if lost! THIS IS YOUR WARNING!");
			}
		}
		else if(CurrentEvent == 1)
		{
			CurrentEvent = 2;
			format(string, sizeof(string), "Server Admin %s has started the event. Best of luck playing!", Player[playerid][AdminName]);
			if(EventVip > 0)
				SendMessageToVip(LIGHTRED, string);
			else
				SendClientMessageToAll(LIGHTRED, string);

			switch(eventType)
			{
				case 1:
				{
					format(string, sizeof(string), "~n~~r~Kills Leader: ~w~Nobody~n~~n~~r~Players Remaining: ~w~%d~n~~n~", GetEventPlayerCount());
					TextDrawSetString(EventTextDraw, string);
					UpdateEventTimer = repeat UpdateEvent[15000]();
				}
				case 2:
				{
					format(string, sizeof(string), "~n~~r~Team One Kills: ~w~%d~n~~n~~g~Team Two Kills: ~w~%d~n~~n~~y~Score Limit: ~w~%d~n~~n~", TeamKills[0], TeamKills[1], KillsToWin);
					TextDrawSetString(EventTextDraw, string);
				}
			}

			foreach(Player, i)
			{
				if(Player[i][IsAtEvent] == 1)
				{
					TextDrawShowForPlayer(i, EventTextDraw);
					TogglePlayerControllable(i, true);
					SendClientMessage(i, WHITE, "Good luck! You'll be refunded at the end, have fun.");
					Player[i][Muted] = 0;
				}
			}
		}
	}
	return 1;
}

CMD:startderby(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 4)
		return 1;

	if(IsAnyEventHappening(4))
		return SendClientMessage(playerid, -1, "You can't start an event while another event is in progress.");

	if(DerbyStatus != 1)
		return SendClientMessage(playerid, WHITE, "There hasn't been a derby setup or there is already one in progress.");

	SendClientMessageToAll(LIGHTRED, "LET THE DERBY BEGIN!!");
	OOCChatLog("LET THE DERBY BEGIN!!");
	DerbyStatus = 2;
	UpdateEventTimer = repeat UpdateEvent[20000]();

	foreach(Player, i)
	{
		if(Player[i][InDerby] == 1)
		{
			Player[i][Muted] = 0;
			TogglePlayerControllable(i, true);
		}
	}

	foreach(new i : EventVehicles)
	{
		SetVehicleParamsEx(i, 1, 1, 0, 0, 0, 0, 0);
	}
	return 1;
}

CMD:startrally(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 4)
		return 1;

	if(IsAnyEventHappening(3))
		return SendClientMessage(playerid, -1, "You can't start an event while another event is in progress.");

	if(RallyInProgress == 0)
		return SendClientMessage(playerid, WHITE, "There hasn't been a rally setup!");

	if(RallyInProgress == 2)
		return SendClientMessage(playerid, WHITE, "There is already a rally in progress!");

	new string[128];
	format(string, sizeof(string), "LET THE RACE BEGIN!!");
	SendClientMessageToAll(LIGHTRED, string);
	OOCChatLog(string);
	RallyInProgress = 2;

	foreach(Player, i)
	{
		if(!Player[i][InRally])
			continue;
		DisablePlayerCheckpoint(i);
		Player[i][RallyCP] = 0;
		Player[i][Checkpoint] = 1;
		Player[i][Muted] = 0;
		new cp = Player[i][RallyCP];
		SetPlayerRaceCheckpoint(i, 0, RallyCheckpoints[cp][0], RallyCheckpoints[cp][1], RallyCheckpoints[cp][2], RallyCheckpoints[cp+1][0], RallyCheckpoints[cp+1][1], RallyCheckpoints[cp+1][2], 10.0);
		PlayerPlaySound(i,3201,0.0,0.0,0.0);
		TogglePlayerControllable(i, true);
	}

	foreach(new i : EventVehicles)
	{
		SetVehicleParamsEx(i, 1, 1, 0, 0, 0, 0, 0);
	}
	return 1;
}

stock DestroyVehicleVehicles()
{
	foreach(new i : EventVehicles)
	{
		DestroyVehicle(i);
	}
	Iter_Clear(EventVehicles);
}

CMD:endevent(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 4)
		return 1;

	if(RallyInProgress == 0 && DerbyStatus == 0 && CurrentEvent == 0)
		return SendClientMessage(playerid, -1, "There isn't an active event.");

	new string[128], type[24];

	if(sscanf(params, "s[24]", type))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /endevent [type]");
		return SendClientMessage(playerid, -1, "Types: DM, TDM, Rally, Derby");
	}

	if(!strcmp(type, "dm", true) || !strcmp(type, "deathmatch", true) || !strcmp(type, "tdm", true) || !strcmp(type, "team deathmatch", true))
	{
		if(CurrentEvent == 0)
			return SendClientMessage(playerid, -1, "There hasn't been a DM or TDM started");

		foreach(Player, i)
		{
			if(Player[i][IsAtEvent] == 1)
			{
				TextDrawHideForPlayer(i, EventTextDraw);
				Player[i][eventKills] = 0;
				ResetPlayerWeapons(i);
				TogglePlayerControllable(i, true);
				SetPlayerPos_Update(i, GetPVarFloat(i, "lastX"), GetPVarFloat(i, "lastY"), GetPVarFloat(i, "lastZ"));
				SetPlayerInterior(i, GetPVarInt(i, "lastInt")-1);
				SetPlayerVirtualWorld(i, GetPVarInt(i, "lastVW")-1);
				Player[i][IsAtEvent] = 0;
				Player[i][eventTeam] = 0;
				Player[i][eventKills] = 0;
				Player[i][Muted] = 0;
				SetPlayerTeam(playerid, NO_TEAM);
				SetPlayerSkin(i, Player[i][LastSkin]);
				new MathsFlaw = floatround(Player[i][LastHealth], floatround_ceil);
				SetPlayerHealth(i, MathsFlaw);
				MathsFlaw = floatround(Player[i][LastArmour], floatround_ceil);
				SetPlayerArmour(i, MathsFlaw);
				GivePlayerSavedWeapons(i);
				UpdatePlayerNameColour(i);
			}
		}
		TeamKills[0] = 0;
		TeamKills[1] = 0;
		stop UpdateEventTimer;
		
		format(string, sizeof(string), "%s has closed the event.", Player[playerid][AdminName]);
		AdminActionsLog(string);
		format(string, sizeof(string), "%s has closed the event.", Player[playerid][AdminName]);
		SendClientMessageToAll(LIGHTRED, string);
		eventType = 0;
		CurrentEvent = 0;
		
		Iter_Clear(EventPlayers);
		
	}
	else if(!strcmp(type, "rally", true))
	{
		if(RallyInProgress == 0)
			return SendClientMessage(playerid, -1, "There isn't a rally in progress.");

		format(string, sizeof(string), "The rally race has been ended.");
		SendClientMessageToAll(LIGHTRED, string);
		OOCChatLog(string);
		eventType = 0;
		EndRally();
	}
	else if(!strcmp(type, "derby", true))
	{
		if(DerbyStatus == 0)
			return SendClientMessage(playerid, -1, "There isn't a derby in progress.");

		SendClientMessageToAll(LIGHTRED, "The derby has been ended.");
		OOCChatLog("The derby has been ended.");
		eventType = 0;
		EndDerby();
	}
	else return SendClientMessage(playerid, -1, "Invalid type");
	return 1;
}

stock EndDerby()
{
	foreach(Player, i)
	{
		if(Player[i][InDerby] == 1)
		{
			Player[i][InDerby] = 0;
			Player[i][Muted] = 0;
			new MathsFlaw = floatround(Player[i][LastHealth], floatround_ceil);
			SetPlayerHealth(i, MathsFlaw);
			MathsFlaw = floatround(Player[i][LastArmour], floatround_ceil);
			SetPlayerArmour(i, MathsFlaw);
			SendPlayerToSavedPos(i);
			TogglePlayerControllable(i, true);
			GivePlayerSavedWeapons(i);
			UpdatePlayerNameColour(i);
		}
	}
	DerbyStatus = 0;
	stop UpdateEventTimer;

	DestroyEventVehicles();
	return 1;
}

stock SendPlayerToSavedPos(playerid)
{
	SetPlayerPos_Update(playerid, GetPVarFloat(playerid, "lastX"), GetPVarFloat(playerid, "lastY"), GetPVarFloat(playerid, "lastZ"));
	SetPlayerInterior(playerid, GetPVarInt(playerid, "lastInt")-1);
	SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "lastVW")-1);
	return 1;
}

CMD:enterderby(playerid, params[])
{
	if((Player[playerid][PrisonID] == 1 && Player[playerid][PrisonDuration] >= 1) || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Tied] >= 1)
		return SendClientMessage(playerid, WHITE, "You can't participate as you're prisoned, jailed, cuffed, tied or tazed.");

	if(DerbyStatus != 1)
		return SendClientMessage(playerid, WHITE, "It appears you missed a derby or one has not started!");

	if(DerbyVip > 0 && Player[playerid][VipRank] < 1)
		return 1;

	if(GetPlayerInterior(playerid) != 0)
		return SendClientMessage(playerid, -1, "You can't join a derby in an interior.");

	if(Player[playerid][InDerby] == 1)
		return SendClientMessage(playerid, WHITE, "You're already in the derby!");

	if(GetEventVehicleCount() >= 35)
		return SendClientMessage(playerid, WHITE, "The derby has reached maximum participants!");
		
	if(Player[playerid][Mask] == 1)
		return SendClientMessage(playerid, -1, "Remove your mask before joining the derby.");

	new string[128], vid;
	Player[playerid][InDerby] = 1;
	if(Player[playerid][AdminLevel] < 2)
		Player[playerid][Muted] = 1;
	SendClientMessage(playerid, YELLOW, "You have entered the derby!");
	format(string, sizeof(string), "%s has joined a derby.", GetName(playerid));
	NearByMessage(playerid, ANNOUNCEMENT, string);

	if(GetEventVehicleCount() < 7)
		vid = CreateVehicle(DerbyVehicle, -1380.3313, 982.0480+(GetEventVehicleCount()*5), 1023.5380, 90.8006, random(255), random(255), -1);
	else if(GetEventVehicleCount() > 6 && GetEventVehicleCount() < 14)
		vid = CreateVehicle(DerbyVehicle, -1370.5394, 982.0480+((GetEventVehicleCount()-7)*5), 1023.5380, 90.8006, random(255), random(255), -1);
	else if(GetEventVehicleCount() > 13 && GetEventVehicleCount() < 21)
		vid = CreateVehicle(DerbyVehicle, -1360.4899, 982.0480+((GetEventVehicleCount()-14)*5), 1023.5380, 90.8006, random(255), random(255), -1);
	else if(GetEventVehicleCount() > 20 && GetEventVehicleCount() < 28)
		vid = CreateVehicle(DerbyVehicle,  -1420.0927, 982.0480+((GetEventVehicleCount()-21)*5), 1023.5380, 270.4668, random(255), random(255), -1);
	else if(GetEventVehicleCount() > 27 && GetEventVehicleCount() < 35)
		vid = CreateVehicle(DerbyVehicle,  -1430.0927, 982.0480+((GetEventVehicleCount()-28)*5), 1023.5380, 270.4668, random(255), random(255), -1);

	SavePlayerPos(playerid);

	SetPVarInt(playerid, "derbyCar", vid);
	ResetPlayerWeapons(playerid);
	GetPlayerHealth(playerid, Player[playerid][LastHealth]);
	GetPlayerArmour(playerid, Player[playerid][LastArmour]);
	SetVehicleParamsEx(vid, 1, 1, 0, 1, 0, 0, 0);
	SetVehicleVirtualWorld(vid, 7777);
	SetPlayerVirtualWorld(playerid, 7777);
	SetPlayerInterior(playerid, 15);
	PutPlayerInVehicle(playerid, vid, 0);
	LinkVehicleToInterior(vid, 15);
	if(Player[playerid][AdminDuty] < 1)
		SetPlayerColor(playerid, RED);
	TogglePlayerControllable(playerid, false);
	if(DerbyNos > 0)
		AddVehicleComponent(vid, 1010);

	AddEventVehicle(vid);
	return 1;
}

#define RALLY_LOW 1
#define RALLY_HIGH 2
stock GetRandomRallyPos()
{
	new pos = RandomEx(GetRallyPos(RALLY_LOW), GetRallyPos(RALLY_HIGH));
	if(RallyPosition[pos] == 1)
		return GetRandomRallyPos();

	return pos;
}

stock GetRallyPos(location)
{
	new res = -1;
	switch(location)
	{
		case 1:
		{
			for(new i; i < MAX_RALLY_VEHICLES; i++)
			{
				if(RallyPosition[i] == 0)
				{
					res = i;
					break;
				}
			}
		}
		case 2:
		{
			for(new i = MAX_RALLY_VEHICLES - 1; i >= 0; i--)
			{
				if(RallyPosition[i] == 0)
				{
					res = i;
					break;
				}
			}
		}
	}
	return res;
}

CMD:enterrally(playerid, params[])
{
	if((Player[playerid][PrisonID] == 1 && Player[playerid][PrisonDuration] >= 1) || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Tied] >= 1)
		return SendClientMessage(playerid, WHITE, "You can't participate as you're prisoned, jailed, cuffed, tied or tazed.");

	if(RallyInProgress != 1)
		return SendClientMessage(playerid, WHITE, "It appears you missed a rally or one has not started!");

	if(RallyVip > 0 && Player[playerid][VipRank] < 1)
		return 1;

	if(GetPlayerInterior(playerid) != 0)
		return SendClientMessage(playerid, -1, "You can't join a rally in an interior.");

	if(gettime() < Player[playerid][RallyCooldown])
	    return SendClientMessage(playerid, WHITE, "You must wait 15 seconds before you can rejoin the rally!");

	if(Player[playerid][InRally] == 1)
	    return SendClientMessage(playerid, WHITE, "You're already in the rally!");

	if(GetEventVehicleCount() >= 50 || GetRallyPos(RALLY_LOW) == -1)
	    return SendClientMessage(playerid, WHITE, "The rally has reached maximum participants!");
	
	if(Player[playerid][Mask] == 1)
		return SendClientMessage(playerid, -1, "Remove your mask before joining the rally.");

	new string[128], car_id, pos = GetRandomRallyPos();

	if(pos < 0 || pos > 49)
	    return SendClientMessage(playerid, WHITE, "The rally has reached maximum participants!");

	RallyPosition[pos] = 1;

	Player[playerid][Collisions] = 1;
	DisableRemoteVehicleCollisions(playerid, 1);
	Player[playerid][InRally] = 1;
	if(Player[playerid][AdminLevel] < 2)
		Player[playerid][Muted] = 1;
	format(string, sizeof(string), "You've entered the rally! This is going to be rally %d.", RallyCourse);
	SendClientMessage(playerid, YELLOW, string);
	format(string, sizeof(string), "%s has joined a rally.", GetName(playerid));
	NearByMessage(playerid, ANNOUNCEMENT, string);

	switch(RallyStartPos)
	{
		case 0:
		{
			if(pos < 5) // 826.0427,-2038.1694,12.8672
				car_id = CreateVehicle(RallyVehicle, 826.0427+(pos*5), -2040.1694, 13, 0, random(255), random(255), -1);
			else if(pos > 4 && pos < 10)
				car_id = CreateVehicle(RallyVehicle, 826.0427+((pos-5)*5), -2030.1694, 13, 0, random(255), random(255), -1);
			else if(pos > 9 && pos < 15)
				car_id = CreateVehicle(RallyVehicle, 826.0427+((pos-10)*5), -2020.1694, 13, 0, random(255), random(255), -1);
			else if(pos > 14 && pos < 20)
				car_id = CreateVehicle(RallyVehicle, 826.0427+((pos-15)*5), -2010.1694, 13, 0, random(255), random(255), -1);
			else if(pos > 19 && pos < 25)
				car_id = CreateVehicle(RallyVehicle, 826.0427+((pos-20)*5), -2000.1694, 13, 0, random(255), random(255), -1);
			else if(pos > 19 && pos < 30)
				car_id = CreateVehicle(RallyVehicle, 826.0427+((pos-25)*5), -1990.1694, 13, 0, random(255), random(255), -1);
			else if(pos > 24 && pos < 35)
				car_id = CreateVehicle(RallyVehicle, 826.0427+((pos-30)*5), -1980.1694, 13, 0, random(255), random(255), -1);
			else if(pos > 29 && pos < 40)
				car_id = CreateVehicle(RallyVehicle, 826.0427+((pos-35)*5), -1970.1694, 13, 0, random(255), random(255), -1);
			else if(pos > 34 && pos < 45)
				car_id = CreateVehicle(RallyVehicle, 826.0427+((pos-40)*5), -1960.1694, 13, 0, random(255), random(255), -1);
			else if(pos > 44 && pos < 50)
				car_id = CreateVehicle(RallyVehicle, 826.0427+((pos-45)*5), -1950.1694, 13, 0, random(255), random(255), -1);
		}
		case 1:
		{
			// -1563.6027, 729.1528, 6.7625, 0

			new Float:temp = 0;
			if(pos % 4 == 2 || pos % 4 == 3)
				temp = pos / 4 * 1;
			car_id = CreateVehicle(RallyVehicle, -1563.60 + ((pos % 4) * 7) + temp, 729.15 + ((pos / 4) * 10), 6.8, (temp > 0) ? (-5.00) : (0.00), random(255), random(255), -1);
		}
		case 2: //1785.54, 2192.70, 3.85, 180
		{
			new Float:temp = 0;
			if(pos % 4 == 2 || pos % 4 == 3)
				temp = 6;
			car_id = CreateVehicle(RallyVehicle, 1785.54 + ((pos % 4) * 6) + temp, 2192.70 - ((pos / 4) * 10), 4.0, 180.0, random(255), random(255), -1);
		}
	}

	new plate[32];

	new Float:lastX, Float:lastY, Float:lastZ, lastInt = GetPlayerInterior(playerid), lastVW = GetPlayerVirtualWorld(playerid);
	GetPlayerPos(playerid, lastX, lastY, lastZ);
	SetPVarInt(playerid, "lastInt", lastInt+1);
	SetPVarInt(playerid, "lastVW", lastVW+1);
	SetPVarFloat(playerid, "lastX", lastX);
	SetPVarFloat(playerid, "lastY", lastY);
	SetPVarFloat(playerid, "lastZ", lastZ);

	ResetPlayerWeapons(playerid);
	GetPlayerHealth(playerid, Player[playerid][LastHealth]);
	GetPlayerArmour(playerid, Player[playerid][LastArmour]);
	SetVehicleParamsEx(car_id, 1, 1, 0, 1, 0, 0, 0);
	format(plate, sizeof(plate), "{000000}RALLY %d", RallyCourse);
	SetVehicleNumberPlate(car_id, plate);
	SetVehicleVirtualWorld(car_id, 7777);
	SetPlayerVirtualWorld(playerid, 7777);
	PutPlayerInVehicle(playerid, car_id, 0);
	if(Player[playerid][AdminDuty] < 1)
		SetPlayerColor(playerid, RED);
	TogglePlayerControllable(playerid, false);
	// if(RallyNos > 0)
		// AddVehicleComponent(car_id, 1010);
	
	AddEventVehicle(car_id);

	TextDrawShowForPlayer(playerid, RallyLB);

	return 1;
}

stock DerbyMessage(colour, string[])
{
	foreach(Player, i)
	{
		if(Player[i][InDerby] == 1)
		{
			SendClientMessage(i, colour, string);
		}
	}
	return 1;
}

CMD:leavederby(playerid, params[])
{
	if(Player[playerid][InDerby] == 0)
		return SendClientMessage(playerid, WHITE, "There isn't a rally in progress that you can leave from!");

	new string[128], reason[24];

	if(isnull(params))
		format(reason, sizeof(reason), "Left");
	else if(strcmp(params, "health"))
		format(reason, sizeof(reason), "Destroyed");
	else if(strcmp(params, "exitedCar"))
		format(reason, sizeof(reason), "Exited Vehicle");

	Player[playerid][InDerby] = 0;
	Player[playerid][Muted] = 0;

	RemoveEventVehicle(GetPVarInt(playerid, "derbyCar"));
	DeletePVar(playerid, "derbyCar");

	GivePlayerSavedWeapons(playerid);
	SendClientMessage(playerid, WHITE, "You have left the derby!");
	new MathsFlaw = floatround(Player[playerid][LastHealth], floatround_ceil);
	SetPlayerHealth(playerid, MathsFlaw);
	MathsFlaw = floatround(Player[playerid][LastArmour], floatround_ceil);
	SetPlayerArmour(playerid, MathsFlaw);
	SendPlayerToSavedPos(playerid);
	TogglePlayerControllable(playerid, true);
	UpdatePlayerNameColour(playerid);
	format(string, sizeof(string), "%s is out of the derby! (%s)", GetName(playerid), reason);
	return DerbyMessage(YELLOW, string);
}

CMD:leaverally(playerid, params[])
{
	if(Player[playerid][InRally] == 0)
		return SendClientMessage(playerid, WHITE, "There isn't a rally in progress that you can leave from!");

	new str[128];
	format(str, sizeof(str), "%s is out of the rally! (left)", GetName(playerid));
	RallyMessage(YELLOW, str);

	Player[playerid][RallyCP] = 0;
	Player[playerid][Checkpoint] = 0;
	Player[playerid][InRally] = 0;
	Player[playerid][Muted] = 0;
	DisablePlayerRaceCheckpoint(playerid);
	Player[playerid][Collisions] = 0;
	DisableRemoteVehicleCollisions(playerid, 0);

	GivePlayerSavedWeapons(playerid);
	DestroyVehicle(GetPlayerVehicleID(playerid));
	SendClientMessage(playerid, WHITE, "You have left the rally!");
	new MathsFlaw = floatround(Player[playerid][LastHealth], floatround_ceil);
	SetPlayerHealth(playerid, MathsFlaw);
	MathsFlaw = floatround(Player[playerid][LastArmour], floatround_ceil);
	SetPlayerArmour(playerid, MathsFlaw);
	SendPlayerToSavedPos(playerid);
	TogglePlayerControllable(playerid, true);
	UpdatePlayerNameColour(playerid);
	TextDrawHideForPlayer(playerid, RallyLB);

	//Player[playerid][RallyCooldown] = gettime() + 15;

	return 1;
}

CMD:leaveevent(playerid, params[])
{
	if(Player[playerid][IsAtEvent] == 0)
		return SendClientMessage(playerid, WHITE, "You are not participating in an event!");

	if(eventType > 2 || eventType < 1)
		return SendClientMessage(playerid, -1, "The event you're in must be a TDM or DM event.");

	TextDrawHideForPlayer(playerid, EventTextDraw);
	new health = floatround(Player[playerid][LastHealth], floatround_ceil);
	SetPlayerHealth(playerid, health);
	health = floatround(Player[playerid][LastArmour], floatround_ceil);
	SetPlayerArmour(playerid, health);

	Player[playerid][Hospitalized] = 0;
	Player[playerid][IsAtEvent] = 0;
	Player[playerid][eventKills] = 0;
	Player[playerid][ResetTimer] = 1;
	TogglePlayerControllable(playerid, true);
	ResetPlayerWeapons(playerid);
	GivePlayerSavedWeapons(playerid);
	
	Iter_Remove(EventPlayers, playerid);
	
	SetPlayerTeam(playerid, NO_TEAM);
	SendPlayerToSavedPos(playerid);
	UpdatePlayerNameColour(playerid);
	SendClientMessage(playerid, WHITE, "Thanks for playing fair! Sad to see ya quiting on us!!");
	SetPlayerSkin(playerid, Player[playerid][LastSkin]);

	SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, (Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 2) ? (999) : (998));
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, (Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 2) ? (999) : (998));
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, (Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 2) ? (999) : (998));
	SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, (Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 2) ? (999) : (998));
	SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, (Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 2) ? (999) : (998));
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, (Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 2) ? (999) : (998));

	new string[128];
	format(string, sizeof(string), "%s has left the event.", GetName(playerid));
	MessageToEventPlayers(YELLOW, string);
	return 1;
}

//End of Event Stuff

stock SaveGroups()
{
	for(new i = 1; i < MAX_GROUPS; i++)
	{
		SaveGroup(i);
	}
	return 1;
}

stock SaveHouses()
{
	for(new i = 0; i < MAX_HOUSES; i++)
	{
		SaveHouse(i);
	}
	return 1;
}

stock SaveRadio(i)
{
	new string[128];
	format(string, sizeof(string), "Radios/Radio_%d.ini", i);
	if(fexist(string))
	{
		dini_IntSet(string, "Available", RadioSettings[i][Available]);
		dini_Set(string, "StationName", RadioSettings[i][StationName]);
		dini_Set(string, "URL", RadioSettings[i][URL]);
		printf("[system] Radio %d saved.", i);
	}
	return 1;
}

stock SaveBusinesses()
{
	for(new i = 1; i <= SpawnedBusinesses; i++)
	{
		SaveBusiness(i);
	}
	return 1;
}

public GivePlayerWeaponEx(playerid, weapon)
{
	switch(weapon)
	{
		case 0, 1:
		{
			if(Player[playerid][WepSlot0] > 0 && GetPlayerWeapon(playerid) != Player[playerid][WepSlot0])
				DetachWeaponFromPlayer(playerid, Player[playerid][WepSlot0]);

			Player[playerid][WepSlot0] = weapon;
			GivePlayerWeapon(playerid, weapon, 99999);
		}
		case 2, 3, 4, 5, 6, 7, 8, 9:
		{
			if(Player[playerid][WepSlot1] > 0 && GetPlayerWeapon(playerid) != Player[playerid][WepSlot1])
				DetachWeaponFromPlayer(playerid, Player[playerid][WepSlot1]);

			Player[playerid][WepSlot1] = weapon;
			GivePlayerWeapon(playerid, weapon, 99999);
		}
		case 22, 23, 24:
		{
			if(Player[playerid][WepSlot2] > 0 && GetPlayerWeapon(playerid) != Player[playerid][WepSlot2])
				DetachWeaponFromPlayer(playerid, Player[playerid][WepSlot2]);

			Player[playerid][WepSlot2] = weapon;
			GivePlayerWeapon(playerid, weapon, 99999);
		}
		case 25, 26, 27:
		{
			if(Player[playerid][WepSlot3] > 0 && GetPlayerWeapon(playerid) != Player[playerid][WepSlot3])
				DetachWeaponFromPlayer(playerid, Player[playerid][WepSlot3]);

			Player[playerid][WepSlot3] = weapon;
			GivePlayerWeapon(playerid, weapon, 99999);
		}
		case 28, 29, 32:
		{
			if(Player[playerid][WepSlot4] > 0 && GetPlayerWeapon(playerid) != Player[playerid][WepSlot4])
				DetachWeaponFromPlayer(playerid, Player[playerid][WepSlot4]);

			Player[playerid][WepSlot4] = weapon;
			GivePlayerWeapon(playerid, weapon, 99999);
		}
		case 30, 31:
		{
			if(Player[playerid][WepSlot5] > 0 && GetPlayerWeapon(playerid) != Player[playerid][WepSlot5])
				DetachWeaponFromPlayer(playerid, Player[playerid][WepSlot5]);

			Player[playerid][WepSlot5] = weapon;
			GivePlayerWeapon(playerid, weapon, 99999);
		}
		case 33, 34:
		{
			if(Player[playerid][WepSlot6] > 0 && GetPlayerWeapon(playerid) != Player[playerid][WepSlot6])
				DetachWeaponFromPlayer(playerid, Player[playerid][WepSlot6]);

			Player[playerid][WepSlot6] = weapon;
			GivePlayerWeapon(playerid, weapon, 99999);
		}
		case 35, 36, 37, 38:
		{
			if(Player[playerid][WepSlot7] > 0 && GetPlayerWeapon(playerid) != Player[playerid][WepSlot7])
				DetachWeaponFromPlayer(playerid, Player[playerid][WepSlot7]);

			Player[playerid][WepSlot7] = weapon;
			GivePlayerWeapon(playerid, weapon, 99999);
		}
		case 16, 17, 18, 39:
		{
			if(Player[playerid][WepSlot8] > 0 && GetPlayerWeapon(playerid) != Player[playerid][WepSlot8])
				DetachWeaponFromPlayer(playerid, Player[playerid][WepSlot8]);

			Player[playerid][WepSlot8] = weapon;
			GivePlayerWeapon(playerid, weapon, 99999);
		}
		case 41, 42, 43:
		{
			if(Player[playerid][WepSlot9] > 0 && GetPlayerWeapon(playerid) != Player[playerid][WepSlot9])
				DetachWeaponFromPlayer(playerid, Player[playerid][WepSlot9]);

			Player[playerid][WepSlot9] = weapon;
			GivePlayerWeapon(playerid, weapon, 99999);
		}
		case 10, 11, 12, 13, 14, 15:
		{
			if(Player[playerid][WepSlot10] > 0 && GetPlayerWeapon(playerid) != Player[playerid][WepSlot10])
				DetachWeaponFromPlayer(playerid, Player[playerid][WepSlot10]);

			Player[playerid][WepSlot10] = weapon;
			GivePlayerWeapon(playerid, weapon, 99999);
		}
		case 44, 45, 46:
		{
			if(Player[playerid][WepSlot11] > 0 && GetPlayerWeapon(playerid) != Player[playerid][WepSlot11])
				DetachWeaponFromPlayer(playerid, Player[playerid][WepSlot11]);

			Player[playerid][WepSlot11] = weapon;
			GivePlayerWeapon(playerid, weapon, 99999);
		}
		default:
		{
			//printf("[system] [error] GivePlayerWeaponEx() was unable to give weapon ID %d.", weapon);
		}
	}
	return 1;
}

stock IsPlayerAimingAtPlayer(playerid, aimid) { //From vortex 2

	new
	Float:Floats[7];

	GetPlayerPos(playerid, Floats[0], Floats[1], Floats[2]);
	GetPlayerPos(aimid, Floats[3], Floats[4], Floats[5]);
	new Float:Distance = floatsqroot(floatpower(floatabs(Floats[0]-Floats[3]), 2) + floatpower(floatabs(Floats[1]-Floats[4]), 2));
	if(Distance < 10.0) {

		GetPlayerFacingAngle(playerid, Floats[6]);
		Floats[0] += (Distance * floatsin(-Floats[6], degrees));
		Floats[1] += (Distance * floatcos(-Floats[6], degrees));
		Distance = floatsqroot(floatpower(floatabs(Floats[0]-Floats[3]), 2) + floatpower(floatabs(Floats[1]-Floats[4]), 2));

		if(Distance < 2.0) {

			return true;
		}
	}
	return false;
}

stock IsVehicleFacingPlayer(vehid, aimid, reverse = false) {

	new
	Float:Floats[7];

	GetVehiclePos(vehid, Floats[0], Floats[1], Floats[2]);
	GetPlayerPos(aimid, Floats[3], Floats[4], Floats[5]);
	new Float:Distance = floatsqroot(floatpower(floatabs(Floats[0]-Floats[3]), 2) + floatpower(floatabs(Floats[1]-Floats[4]), 2));
	if(Distance < 5.0) {

		GetVehicleZAngle(vehid, Floats[6]);
		if(reverse)
			Floats[6] += 180;

		Floats[0] += (Distance * floatsin(-Floats[6], degrees));
		Floats[1] += (Distance * floatcos(-Floats[6], degrees));
		Distance = floatsqroot(floatpower(floatabs(Floats[0]-Floats[3]), 2) + floatpower(floatabs(Floats[1]-Floats[4]), 2));

		if(Distance < 1.0) {

			return true;
		}
	}
	return false;
}

IsKeyJustDown(key, newkeys, oldkeys)
{
	if((newkeys & key) && !(oldkeys & key))  return 1;
	return 0;
}
public TimerClear(playerid)
{
	ClearAnimations(playerid,1);
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if ((newkeys==KEY_ACTION)&&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER)&&(GetVehicleModel(GetPlayerVehicleID(playerid)) == 525))
	{
		new Float:vehX, Float:vehY, Float:vehZ,
		v = NearestVehicle(playerid),
		pv = GetPlayerVehicleID(playerid);
		GetVehiclePos(v, vehX, vehY, vehZ);
		if(IsTrailerAttachedToVehicle(pv))
			DetachTrailerFromVehicle(pv);
		else if(IsPlayerInRangeOfPoint(playerid, 7, vehX, vehY, vehZ)){
			//SetPVarInt(playerid, "LastTow", v);
			AttachTrailerToVehicle(v, pv);
		}
		else
		SendClientMessage(playerid, -1, "You are not close enough to a car to tow it!");
	}

	if(IsKeyJustDown(KEY_WALK, newkeys, oldkeys) && strlen(Player[playerid][Walk]) > 0 && GetPVarInt(playerid, "WalkAnim") == 0 && GetPVarInt(playerid, "WalkCD") < gettime())
	{
		if(CantUseRightNow(playerid) == 1)
			return SendClientMessage(playerid, -1, "You can't do that right now, you're incapacitated!");
		if(Player[playerid][IsTabbed] < 2)
		{
			SetPVarInt(playerid, "WalkCD", gettime() + 8);
			SetPVarInt(playerid, "WalkAnim", 1);
			ApplyAnimation(playerid, "PED", Player[playerid][Walk], 4.0, 1, 1, 1, 1, 1, 1);
		}
	}
	if((oldkeys & KEY_WALK) && !(newkeys & KEY_WALK) && strlen(Player[playerid][Walk]) > 0 && GetPVarInt(playerid, "WalkAnim") == 1)
	{
		if(Player[playerid][Tied] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] == 1 || Player[playerid][AdminFrozen] == 1)
			return SendClientMessage(playerid, -1, "You can't do that right now, you're incapacitated!");
		DeletePVar(playerid, "WalkAnim");
		StopLoopingAnimation(playerid);
	}
	if(newkeys == KEY_JUMP && GetPVarInt(playerid, "WalkAnim") == 1)
	{
		if(Player[playerid][Tied] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] == 1 || Player[playerid][AdminFrozen] == 1)
			return SendClientMessage(playerid, -1, "You can't do that right now, you're incapacitated!");
		ClearAnimations(playerid);
		StopLoopingAnimation(playerid);
	}

	if(newkeys == KEY_SUBMISSION && Player[playerid][AdminLevel] > 0 && Player[playerid][EditDMVTest] >= 0)
	{
		new tmp = Player[playerid][EditDMVTest];
		if(tmp >= MAX_TEST_CHECKPOINTS)
			return SendClientMessage(playerid, -1, "You have reached the limit of checkpoints. Type {FFDF29}\"/finishtestedit\"{FFFFFF} to complete it.");

		GetPlayerPos(playerid, EditDrivingTest[playerid][tmp][0], EditDrivingTest[playerid][tmp][1], EditDrivingTest[playerid][tmp][2]);
		Player[playerid][EditDMVTest]++;
		new str[128];
		format(str, sizeof(str), "Marker %d has been placed. When complete, type {FFDF29}\"/finishtestedit\"{FFFFFF}", tmp);
		SendClientMessage(playerid, -1, str);
	}

	if(newkeys == KEY_SUBMISSION && Player[playerid][AdminLevel] > 0 && Player[playerid][EditTruckerTest] >= 0)
	{
		new tmp = Player[playerid][EditTruckerTest];
		if(tmp >= MAX_TEST_CHECKPOINTS)
			return SendClientMessage(playerid, -1, "You have reached the limit of checkpoints. Type {FFDF29}\"/finishtestedit\"{FFFFFF} to complete it.");

		GetPlayerPos(playerid, EditTruckingTest[playerid][tmp][0], EditTruckingTest[playerid][tmp][1], EditTruckingTest[playerid][tmp][2]);
		Player[playerid][EditTruckerTest]++;
		new str[128];
		format(str, sizeof(str), "Marker %d has been placed. When complete, type {FFDF29}\"/finishtestedit\"{FFFFFF}", tmp);
		SendClientMessage(playerid, -1, str);
	}

	if(newkeys == KEY_SUBMISSION && Player[playerid][AdminLevel] > 0 && Player[playerid][CreatingRally] >= 0)
	{
		cmd_rallycp(playerid, "");
	}

	if(IsKeyJustDown(KEY_YES, newkeys, oldkeys))
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 1)
		{
			if(Player[playerid][CopDuty] == 0)
				return 1;

			if(IsPlayerInAnyVehicle(playerid))
				return 1;

			if(GetPVarInt(playerid, "TaserSwitch") > gettime())
				return 1;

			if(Player[playerid][HandTazer] == 1)
				return SendClientMessage(playerid, -1, "Holster your handheld tazer first (/tazer).");
				
			new string[128];
			switch(Player[playerid][GunTazer])
			{
				case 0:
				{
					if(Player[playerid][Tied] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] == 1 || Player[playerid][AdminFrozen] == 1)
						return SendClientMessage(playerid, -1, "You can't do that right now, you're incapacitated!");

					Player[playerid][GunTazer] = 1;
					format(string, sizeof(string), "* %s unholsters their tazer.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
					SetPVarInt(playerid, "Old_Gun", Player[playerid][WepSlot2]);
					GivePlayerWeaponEx(playerid, 23);
				}
				case 1:
				{
					Player[playerid][GunTazer] = 0;
					format(string, sizeof(string), "* %s holsters their tazer.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);

					if(GetPVarInt(playerid, "Old_Gun") > 0)
						GivePlayerWeaponEx(playerid, GetPVarInt(playerid, "Old_Gun"));
					else
						AdjustWeapon(playerid, Player[playerid][WepSlot2], 0);
					DeletePVar(playerid, "Old_Gun");
				}
			}
			SetPVarInt(playerid,"TaserSwitch", gettime() + 5);
			if(IsPlayerInAnyVehicle(playerid))
				SetPlayerArmedWeapon(playerid, 0);
		}
	}

	if(IsKeyJustDown(KEY_NO, newkeys, oldkeys))
		if(Player[playerid][Group] != 1)
		{
			cmd_car(playerid, "lights");
			cmd_car(playerid, "engine");
		}
		else
		{
			if(LSPD_LastBackup == playerid)
				return 1;
			new str[4];
			format(str, sizeof(str), "%d", LSPD_LastBackup);
			cmd_acceptbackup(playerid, str);
		}

	if(newkeys & KEY_FIRE)
	{
		if(Player[playerid][Tutorial] >= 1)
		{

		}

		new string[128],NearestPlayer = GetClosestPlayer(playerid);

		if (Player[playerid][HandTazer] == 1 && GetPlayerWeapon(playerid) != WEAPON_SILENCED && !IsPlayerInAnyVehicle(playerid)){
			if(Player[playerid][CanTaze] > gettime())
				return SendClientMessage(playerid, -1, "Your tazer is on cooldown");
			Player[playerid][CanTaze] = gettime() + 3;
			if(Player[playerid][Cuffed] == 0)
			{
				if(GetDistanceBetweenPlayers(NearestPlayer, playerid) < 5)
				{
					if(Player[NearestPlayer][Tazed] == 0)
					{
						if(!IsPlayerInAnyVehicle(NearestPlayer))
						{
							if(Player[NearestPlayer][AdminDuty] > 0 && Player[playerid][AdminLevel] < 1)
								return 1;

							PlayerPlayNearbySound(playerid, 6003);
							ApplyAnimation(playerid,"KNIFE","knife_3",4.1,0,1,1,0,0,1);
							ApplyAnimation(NearestPlayer, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
							TogglePlayerControllable(NearestPlayer, false);
							ApplyAnimation(NearestPlayer, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
							Player[NearestPlayer][Tazed] = 1;
							format(string, sizeof(string), "* %s has stunned %s with their tazer.", GetNameEx(playerid), GetNameEx(NearestPlayer));
							NearByMessage(playerid, NICESKY, string);
							SendClientMessage(NearestPlayer, WHITE, "You have been tased. The effect will last for 12 seconds.");
							SetPVarInt(NearestPlayer, "TasedBro", gettime() + 12);
						}
						else
						{
							SendClientMessage(playerid, WHITE, "The suspect is in a vehicle, you can't tase whilst they're in a vehicle.");
						}
					}
					else
					{
						SendClientMessage(playerid, WHITE, "That player is already stunned.");
					}
				}
			}
		}
	}
	if((IsKeyJustDown(KEY_SPRINT, newkeys, oldkeys) || IsKeyJustDown(KEY_JUMP, newkeys, oldkeys)) && Player[playerid][IsInAnimation] == 2)
	{
		if(IsPlayerInAnyVehicle(playerid))
			return SendClientMessage(playerid, -1, "You can't stop an animation in a vehicle.");

		if(CantUseRightNow(playerid))
			return SendClientMessage(playerid, -1, "You can't do this right now!");

		ClearAnimations(playerid);
		StopLoopingAnimation(playerid);
		Player[playerid][IsInAnimation] = 0;
		TextDrawHideForPlayer(playerid, AnimationTextDraw);
	}
	if(IsKeyJustDown(KEY_SPRINT, newkeys, oldkeys) && Player[playerid][IsInAnimation] == 1)
	{
		if(GetPlayerSpeed(playerid, 0) != 0)
			return SendClientMessage(playerid, -1, "You must be standing still to do this.");
		if(GetPVarInt(playerid, "BleedingOutTime") == 0 && Player[playerid][Tied] == 0 && Player[playerid][Cuffed] == 0 && Player[playerid][Tazed] == 0 && Player[playerid][AdminFrozen] == 0 && Player[playerid][PassedOut] == 0)
		{
			ClearAnimations(playerid);
			StopLoopingAnimation(playerid);
			Player[playerid][IsInAnimation] = 0;
			TextDrawHideForPlayer(playerid, AnimationTextDraw);
		}
		else
			return SendClientMessage(playerid, -1, "You can't do this right now!");
	}
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_SPRUNK && Player[playerid][HadSprunk] > 0)
	{
		if(IsKeyJustDown(KEY_FIRE, newkeys, oldkeys))
		{
			Player[playerid][HadSprunk]--;

			if(Player[playerid][HadSprunk] == 4)
				AddHunger(playerid, 1);

			if(Player[playerid][HadSprunk] == 0)
			{
				TextDrawHideForPlayer(playerid, SprunkTextDraw), SendClientMessage(playerid, -1, "No more sprunk left!"), ClearAnimations(playerid);
			}
		}
	}

	if(IsKeyJustDown(KEY_SECONDARY_ATTACK, newkeys, oldkeys) && Player[playerid][HadSprunk] > 0)
	{
		TextDrawHideForPlayer(playerid, SprunkTextDraw);
		Player[playerid][HadSprunk] = 0;
	}

	if(IsKeyJustDown(Player[playerid][EnterKey], newkeys, oldkeys) && !IsPlayerInAnyVehicle(playerid))
	{
		if(Player[playerid][PrisonID] == 1)
		{
			//SendClientMessage(playerid, WHITE, "This feature isn't available whilst you're prisoned / jailed.");
		}
		else
		{
			//Houses interior to exterior
			for(new i = 0; i < sizeof(Houses); i++)
			{
				if(GetPlayerVirtualWorld(playerid) >= 55000 && GetPlayerVirtualWorld(playerid) < 65000 && IsPlayerInRangeOfPoint(playerid, 3, Houses[i][hInteriorX], Houses[i][hInteriorY], Houses[i][hInteriorZ]))
				{
					if(Player[playerid][InHouse] != 0)
					{
						if(Houses[Player[playerid][InHouse]][LockStatus] == 0 || Player[playerid][AdminDuty] > 0 || GetPVarInt(playerid, "VIEWING_HOUSE") == Player[playerid][InHouse])
						{
							if(GetPVarInt(playerid, "VIEWING_HOUSE") == Player[playerid][InHouse])
								DeletePVar(playerid, "VIEWING_HOUSE");
								
							StopAudioStreamForPlayer(playerid);
							SetPlayerVirtualWorld(playerid, Houses[Player[playerid][InHouse]][hExteriorVW]);
							SetPlayerInterior(playerid, Houses[Player[playerid][InHouse]][hExteriorID]);
							Streamer_UpdateEx(playerid, Houses[Player[playerid][InHouse]][hExteriorX], Houses[Player[playerid][InHouse]][hExteriorY], Houses[Player[playerid][InHouse]][hExteriorZ]);
							SetPlayerPos_Update(playerid, Houses[Player[playerid][InHouse]][hExteriorX], Houses[Player[playerid][InHouse]][hExteriorY], Houses[Player[playerid][InHouse]][hExteriorZ]);
							Player[playerid][InHouse] = 0;
							PlayerTextDrawHide(playerid, ExitTextdraw[playerid]);
							UpdatePlayerInGarage(playerid);
							if(GetPlayerVirtualWorld(playerid) == 0)
								SetPlayerWeather(playerid, GlobalWeather);
							
							return 1;
						}
						else
							return SendClientMessage(playerid, -1, "The door is locked.");
					}
					else
					{
						if(Houses[i][LockStatus] == 0 || Player[playerid][AdminDuty] > 0)
						{
							SetPlayerVirtualWorld(playerid, Houses[i][hExteriorVW]);
							SetPlayerInterior(playerid, Houses[i][hExteriorID]);
							Streamer_UpdateEx(playerid, Houses[i][hExteriorX], Houses[i][hExteriorY], Houses[i][hExteriorZ]);
							SetPlayerPos_Update(playerid, Houses[i][hExteriorX], Houses[i][hExteriorY], Houses[i][hExteriorZ]);
							UpdatePlayerInGarage(playerid);
							if(GetPlayerVirtualWorld(playerid) == 0)
								SetPlayerWeather(playerid, GlobalWeather);
							return 1;
						}
						else
							return SendClientMessage(playerid, -1, "The door is locked.");
					}
				}
			}
			//Houses exterior to interior
			for(new i = 0; i < sizeof(Houses); i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3, Houses[i][hExteriorX], Houses[i][hExteriorY], Houses[i][hExteriorZ]))
				{
					if(GetPlayerVirtualWorld(playerid) == Houses[i][hExteriorVW] && GetPlayerInterior(playerid) == Houses[i][hExteriorID])
					{
						if(Houses[i][LockStatus] == 0 || Player[playerid][AdminDuty] || GetPVarInt(playerid, "VIEWING_HOUSE") == i)
						{
							if(strcmp(Houses[i][hOwner], "Nobody", true) == 0)
							{
								SendClientMessage(playerid, WHITE, "This property is for sale!");
							}

							if(Houses[i][Radio] == 1)
							{
								PlayAudioStreamForPlayer(playerid, Houses[i][RadioURL]);
								if(GetPVarInt(playerid, "PlayingBoombox"))
									DeletePVar(playerid, "PlayingBoombox");
							}

							Player[playerid][InHouse] = i;
							if(Player[playerid][PlayingHours] < 20 && GetPlayerToggle(playerid, TOGGLE_EXIT_HELP) == false)
								PlayerTextDrawShow(playerid, ExitTextdraw[playerid]);
							SetPlayerVirtualWorld(playerid, 55000+i);
							SetPlayerInterior(playerid, Houses[i][hInteriorID]);
							Streamer_UpdateEx(playerid, Houses[i][hInteriorX], Houses[i][hInteriorY], Houses[i][hInteriorZ]);
							SetPlayerPos_Update(playerid, Houses[i][hInteriorX], Houses[i][hInteriorY], Houses[i][hInteriorZ]);
							SetPlayerWeather(playerid, 1);
							UpdatePlayerInGarage(playerid);
							if(Houses[i][GrowLightInstalled] > 0)
							{
								if(Houses[i][VentUpgrade] == 0)
								{
									switch(random(2))
									{
										case 0: SendClientMessage(playerid, NICESKY, "* A skunky smell wafts through the air.");
									}
								}
								else if(Houses[i][VentUpgrade] == 1)
								{
									switch(random(4))
									{
										case 0: SendClientMessage(playerid, NICESKY, "* A skunky smell wafts through the air.");
									}
								}
								else
								{
									switch(random(10))
									{
										case 0: SendClientMessage(playerid, NICESKY, "*A skunky smell wafts through the air.");
									}
								}
							}
							
							if(GetPVarInt(playerid, "VIEWING_HOUSE") == i)
							{
								Player[playerid][ViewingHouseTimer] = defer ViewingHouseEject(playerid);
								SendClientMessage(playerid, WHITE, "You have entered the house you are viewing. You have 5 minutes before you are ejected from the home.");
							}
							
							return 1;
						}
						else
						{
							SendClientMessage(playerid, WHITE, "This property is locked!");
						}
					}
				}
			}

			for(new i = 0; i < sizeof(Businesses); i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 2, Businesses[i][bExteriorX], Businesses[i][bExteriorY], Businesses[i][bExteriorZ]) && Player[playerid][InBusiness] == 0)
				{
					if(GetPlayerVirtualWorld(playerid) == 0)
					{
						if(Businesses[i][bLockStatus] == 0 || Player[playerid][AdminDuty])
						{
							SetPlayerVirtualWorld(playerid, 65000+i);
							if(Player[playerid][PlayingHours] < 20 && GetPlayerToggle(playerid, TOGGLE_EXIT_HELP) == false)
								PlayerTextDrawShow(playerid, ExitTextdraw[playerid]);
							SetPlayerInterior(playerid, Businesses[i][bInteriorID]);
							Streamer_UpdateEx(playerid, Businesses[i][bInteriorX], Businesses[i][bInteriorY], Businesses[i][bInteriorZ]);
							SetPlayerPos_Update(playerid, Businesses[i][bInteriorX], Businesses[i][bInteriorY], Businesses[i][bInteriorZ]);
							//SendClientMessage(playerid, YELLOW, "You've entered a Business. Type /help to see the extra commands available in here!");
							Player[playerid][InBusiness] = i;
							SetPlayerWeather(playerid, 1);
							UpdatePlayerInGarage(playerid);
							if(Businesses[i][bType] == 18)
							{
								new string[128];
								format(string, sizeof(string), "{009900}Balance: {FFFFFF}$%d", Player[playerid][BankMoney]);
								SendClientMessage(playerid, WHITE, string);
								SendClientMessage(playerid, YELLOW, "Bank Commands: /bdeposit, /bwithdraw, /wiretransfer, /redeemcheck, /bloan, /bpayloan");
								SendClientMessage(playerid, ORANGE, "Short on cash? Visit https://crearoleplay.com to learn how you can purchase In-Game currency.");
							}
							else SendClientMessage(playerid, YELLOW, "You've entered a Business. Type /help to see the extra commands available in here!");
							if(Businesses[i][Radio] == 1)
							{
								PlayAudioStreamForPlayer(playerid, Businesses[i][RadioURL]);
								if(GetPVarInt(playerid, "PlayingBoombox"))
									DeletePVar(playerid, "PlayingBoombox");
							}
							return 1;
						}
						else
						{
							SendClientMessage(playerid, WHITE, "This business is locked!");
						}
					}
				}
			}

			for(new i = 0; i < sizeof(Businesses); i++)
			{
				if(GetPlayerVirtualWorld(playerid) >= 65000 && GetPlayerVirtualWorld(playerid) < 75000 && IsPlayerInRangeOfPoint(playerid, 2, Businesses[i][bInteriorX], Businesses[i][bInteriorY], Businesses[i][bInteriorZ]))
				{
					if(Player[playerid][InBusiness] != 0)
					{
						if(Businesses[Player[playerid][InBusiness]][bLockStatus] == 1 && !Player[playerid][AdminDuty])
							return SendClientMessage(playerid, -1, "The door is locked.");

						if(Player[playerid][Group] == 12 && i == 86 && Player[playerid][OnTaxiCall] >= 0)
							cmd_hangup(playerid, "taxicallend");

						
						StopAudioStreamForPlayer(playerid);
						PlayerTextDrawHide(playerid, ExitTextdraw[playerid]);
						SetPlayerInterior(playerid, Businesses[Player[playerid][InBusiness]][bExteriorID]);
						Streamer_UpdateEx(playerid, Businesses[Player[playerid][InBusiness]][bExteriorX], Businesses[Player[playerid][InBusiness]][bExteriorY], Businesses[Player[playerid][InBusiness]][bExteriorZ]);
						SetPlayerPos_Update(playerid, Businesses[Player[playerid][InBusiness]][bExteriorX], Businesses[Player[playerid][InBusiness]][bExteriorY], Businesses[Player[playerid][InBusiness]][bExteriorZ]);
						Player[playerid][InBusiness] = 0;
						SetPlayerWeather(playerid, GlobalWeather);
						SetPlayerVirtualWorld(playerid, 0);
						UpdatePlayerInGarage(playerid);
						return 1;
					}
					else
					{
						if(Businesses[i][bLockStatus] == 1 && !Player[playerid][AdminDuty])
							return SendClientMessage(playerid, -1, "The door is locked.");

						if(Player[playerid][Group] == 12 && i == 86 && Player[playerid][OnTaxiCall] >= 0)
							cmd_hangup(playerid, "taxicallend");

						SetPlayerInterior(playerid, Businesses[i][bExteriorID]);
						Streamer_UpdateEx(playerid, Businesses[i][bExteriorX], Businesses[i][bExteriorY], Businesses[i][bExteriorZ]);
						SetPlayerPos_Update(playerid, Businesses[i][bExteriorX], Businesses[i][bExteriorY], Businesses[i][bExteriorZ]);
						SetPlayerWeather(playerid, GlobalWeather);
						SetPlayerVirtualWorld(playerid, 0);
						UpdatePlayerInGarage(playerid);
						return 1;
					}
				}
			}

			for(new i = 0; i < sizeof(Groups); i++)
			{
				if(GetPlayerVirtualWorld(playerid) >= 45000 && GetPlayerVirtualWorld(playerid) < 55000 && IsPlayerInRangeOfPoint(playerid, 3, Groups[i][HQInteriorX], Groups[i][HQInteriorY], Groups[i][HQInteriorZ]) || GetPlayerVirtualWorld(playerid) >= 45000 && GetPlayerVirtualWorld(playerid) < 55000 && IsPlayerInRangeOfPoint(playerid, 3, Groups[i][HQInterior2][0], Groups[i][HQInterior2][1], Groups[i][HQInterior2][2]))
				{
					if(GetPlayerInterior(playerid) == Groups[i][HQInteriorID])
					{
						if(Player[playerid][InGroupHQ] != 0)
						{
							if(Groups[Player[playerid][InGroupHQ]][HQLock] == 1 && !Player[playerid][AdminDuty])
								return SendClientMessage(playerid, -1, "The door is locked.");

							if(Player[playerid][Group] == 12 && i == 12 && Player[playerid][OnTaxiCall] >= 0)
								cmd_hangup(playerid, "taxicallend");

							SetPlayerVirtualWorld(playerid, 0);
							PlayerTextDrawHide(playerid, ExitTextdraw[playerid]);
							SetPlayerInterior(playerid, Groups[Player[playerid][InGroupHQ]][HQExteriorID]);
							Streamer_UpdateEx(playerid, Groups[Player[playerid][InGroupHQ]][HQExteriorX], Groups[Player[playerid][InGroupHQ]][HQExteriorY], Groups[Player[playerid][InGroupHQ]][HQExteriorZ]);
							SetPlayerPos_Update(playerid, Groups[Player[playerid][InGroupHQ]][HQExteriorX], Groups[Player[playerid][InGroupHQ]][HQExteriorY], Groups[Player[playerid][InGroupHQ]][HQExteriorZ]);
							Player[playerid][InGroupHQ] = 0;
							SetPlayerWeather(playerid, GlobalWeather);
							UpdatePlayerInGarage(playerid);
							return 1;
						}
						else
						{
							if(Groups[i][HQLock] == 1 && !Player[playerid][AdminDuty])
								return SendClientMessage(playerid, -1, "The door is locked.");

							if(Player[playerid][Group] == 12 && i == 12 && Player[playerid][OnTaxiCall] >= 0)
								cmd_hangup(playerid, "taxicallend");

							SetPlayerVirtualWorld(playerid, 0);
							SetPlayerInterior(playerid, Groups[i][HQExteriorID]);
							Streamer_UpdateEx(playerid, Groups[i][HQExteriorX], Groups[i][HQExteriorY], Groups[i][HQExteriorZ]);
							SetPlayerPos_Update(playerid, Groups[i][HQExteriorX], Groups[i][HQExteriorY], Groups[i][HQExteriorZ]);
							SetPlayerWeather(playerid, GlobalWeather);
							UpdatePlayerInGarage(playerid);
							return 1;
						}
					}
					else if(GetPlayerInterior(playerid) == Groups[i][HQInteriorID2])
					{
						if(GetPVarInt(playerid, "GroupHQ") != 0)
						{
							if(Groups[Player[playerid][InGroupHQ]][HQLock2] == 1 && !Player[playerid][AdminDuty])
								return SendClientMessage(playerid, -1, "The door is locked.");

							new g = Player[playerid][InGroupHQ];

							DeletePVar(playerid, "GroupHQ");
							SetPlayerVirtualWorld(playerid, Groups[g][HQExteriorVW2]);
							PlayerTextDrawHide(playerid, ExitTextdraw[playerid]);
							SetPlayerInterior(playerid, Groups[g][HQExteriorID2]);
							SetPlayerPos_Update(playerid, Groups[g][HQExterior2][0], Groups[g][HQExterior2][1], Groups[g][HQExterior2][2]);
							Player[playerid][InGroupHQ] = 0;
							SetPlayerWeather(playerid, GlobalWeather);
							UpdatePlayerInGarage(playerid);
							return 1;
						}
					}
				}
			}
			if (IsPlayerInRangeOfPoint(playerid, 3, VipLounge[0], VipLounge[1], VipLounge[2]))
			{
				if ((Player[playerid][VipRank] > 0)){
					SetPlayerInterior(playerid, VipLoungeInterior);
					SetPlayerVirtualWorld(playerid, VipLoungeVW);
					Streamer_UpdateEx(playerid, VipLounge[3], VipLounge[4], VipLounge[5]);
					SetPlayerPos_Update(playerid, VipLounge[3], VipLounge[4], VipLounge[5]);
					SetPlayerWeather(playerid, 1);
					if(Player[playerid][PlayingHours] < 20 && GetPlayerToggle(playerid, TOGGLE_EXIT_HELP) == false)
						PlayerTextDrawShow(playerid, ExitTextdraw[playerid]);
					SendClientMessage(playerid, WHITE, "Your VIP pass allowed you into the lounge");
					SendClientMessage(playerid, GREY, "VIP Commands: /locker");
					return 1;
				}
				else
				{
					SendClientMessage(playerid, WHITE, "You don't have a VIP membership!");
					SendClientMessage(playerid, WHITE, "Get yourself one from www.crearoleplay.com");
					return 1;
				}

			}
			if(IsPlayerInRangeOfPoint(playerid, 3, VipLounge[3], VipLounge[4], VipLounge[5]))
			{
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				PlayerTextDrawHide(playerid, ExitTextdraw[playerid]);
				Streamer_UpdateEx(playerid, VipLounge[0], VipLounge[1], VipLounge[2]);
				SetPlayerPos_Update(playerid, VipLounge[0], VipLounge[1], VipLounge[2]);
				SetPlayerWeather(playerid, GlobalWeather);
				return 1;
			}
			/*
			for(new i = 1; i<MAX_HOTEL_ROOMS; i++)
			{
				new idx = Player[playerid][InBusiness];
				if(IsPlayerInRangeOfPoint(playerid, 3, hRoom[idx][i][hrExtPos][0], hRoom[idx][i][hrExtPos][1], hRoom[idx][i][hrExtPos][2]) && GetPlayerVirtualWorld(playerid) == hRoom[idx][i][hrExtVW])
				{
					if(hRoom[idx][i][hrLockStatus] == 0 || Player[playerid][AdminDuty])
					{
						Streamer_UpdateEx(playerid, hRoom[idx][i][hrIntPos][0], hRoom[idx][i][hrIntPos][1], hRoom[idx][i][hrIntPos][2]);
						SetPlayerPos_Update(playerid, hRoom[idx][i][hrIntPos][0], hRoom[idx][i][hrIntPos][1], hRoom[idx][i][hrIntPos][2]);
						SetPlayerInterior(playerid, hRoom[idx][i][hrIntID]);
						SetPlayerVirtualWorld(playerid, hRoom[idx][i][hrIntVW]);
						Player[playerid][InHotelRoom] = i;
					}
					else
					{
						SendClientMessage(playerid, WHITE, "This hotel room is locked!");
					}
				}
				else if(IsPlayerInRangeOfPoint(playerid, 3, hRoom[idx][i][hrIntPos][0], hRoom[idx][i][hrIntPos][1], hRoom[idx][i][hrIntPos][2]) && GetPlayerVirtualWorld(playerid) == hRoom[idx][i][hrIntVW])
				{
					if(hRoom[idx][i][hrLockStatus] == 0 || Player[playerid][AdminDuty])
					{
						Streamer_UpdateEx(playerid, hRoom[idx][i][hrExtPos][0], hRoom[idx][i][hrExtPos][1], hRoom[idx][i][hrExtPos][2]);
						SetPlayerPos_Update(playerid, hRoom[idx][i][hrExtPos][0], hRoom[idx][i][hrExtPos][1], hRoom[idx][i][hrExtPos][2]);
						SetPlayerInterior(playerid, Businesses[idx][bInteriorID]);
						SetPlayerVirtualWorld(playerid, hRoom[idx][i][hrExtVW]);
						Player[playerid][InHotelRoom] = 0;
					}
					else
					{
						SendClientMessage(playerid, WHITE, "The door is locked!");
					}
				}
			}*/
			foreach(new h : Hotel)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3, Hotels[h][hExtPos][0], Hotels[h][hExtPos][1], Hotels[h][hExtPos][2]) && Hotels[h][hExteriorVW] == GetPlayerVirtualWorld(playerid) && Hotels[h][hExteriorInt] == GetPlayerInterior(playerid))
				{
					if(Hotels[h][hLock] == 1 && !Player[playerid][AdminDuty])
						return SendClientMessage(playerid, WHITE, "This hotel room is locked!");

					SetPlayerPos_Update(playerid, Hotels[h][hIntPos][0], Hotels[h][hIntPos][1], Hotels[h][hIntPos][2]);
					SetPlayerInterior(playerid, Hotels[h][hInteriorInt]);
					SetPlayerVirtualWorld(playerid, Hotels[h][hInteriorVW]);
					Player[playerid][InHotelRoom] = h;
					break;
				}
				else if(IsPlayerInRangeOfPoint(playerid, 3, Hotels[h][hIntPos][0], Hotels[h][hIntPos][1], Hotels[h][hIntPos][2]) && Hotels[h][hInteriorVW] == GetPlayerVirtualWorld(playerid) && Hotels[h][hInteriorInt] == GetPlayerInterior(playerid))
				{
					if(Hotels[h][hLock] == 1 && !Player[playerid][AdminDuty])
						return SendClientMessage(playerid, WHITE, "This hotel room is locked!");

					SetPlayerPos_Update(playerid, Hotels[h][hExtPos][0], Hotels[h][hExtPos][1], Hotels[h][hExtPos][2]);
					SetPlayerInterior(playerid, Hotels[h][hExteriorInt]);
					SetPlayerVirtualWorld(playerid, Hotels[h][hExteriorVW]);
					Player[playerid][InHotelRoom] = -1;
					break;
				}
			}
			for(new i = 0; i < sizeof(Groups); i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3, Groups[i][HQExteriorX], Groups[i][HQExteriorY], Groups[i][HQExteriorZ]))
				{
					if(GetPlayerInterior(playerid) == Groups[i][HQExteriorID] && GetPlayerVirtualWorld(playerid) == 0)
					{
						if(Groups[i][HQLock] == 0 || Player[playerid][AdminDuty])
						{
							Player[playerid][InGroupHQ] = i;
							SetPlayerVirtualWorld(playerid, 45000+i);
							if(Player[playerid][PlayingHours] < 20 && GetPlayerToggle(playerid, TOGGLE_EXIT_HELP) == false)
								PlayerTextDrawShow(playerid, ExitTextdraw[playerid]);
							SetPlayerInterior(playerid, Groups[i][HQInteriorID]);
							Streamer_UpdateEx(playerid, Groups[i][HQInteriorX], Groups[i][HQInteriorY], Groups[i][HQInteriorZ]);
							SetPlayerPos_Update(playerid, Groups[i][HQInteriorX], Groups[i][HQInteriorY], Groups[i][HQInteriorZ]);
							SetPlayerWeather(playerid, 1);
							if(Groups[i][CommandTypes] == 8)
							{
								if(Player[playerid][DoingDMVTest] == 3 || Player[playerid][DoingTruckerTest] == 3)
									SendClientMessage(playerid, -1, "Type {FFDF29}\"/gettestresults\"{FFFFFF} to get your test results.");
								else if(Player[playerid][CarLicense] == 0)
									SendClientMessage(playerid, -1, "Type {FFDF29}\"/starttest\"{FFFFFF} to begin your driving test.");
							}
							return 1;
						}
						else
						{
							SendClientMessage(playerid, WHITE, "This HQ is locked!");
						}
					}
				}
				else if(IsPlayerInRangeOfPoint(playerid, 3.0, Groups[i][HQExterior2][0], Groups[i][HQExterior2][1], Groups[i][HQExterior2][2]))
				{
					if(Groups[i][HQLock2] == 1 && !Player[playerid][AdminDuty])
						return SendClientMessage(playerid, -1, "This HQ is locked!");

					Player[playerid][InGroupHQ] = i;
					SetPVarInt(playerid, "GroupHQ", i);
					SetPlayerVirtualWorld(playerid, 45000+i);
					if(Player[playerid][PlayingHours] < 20 && GetPlayerToggle(playerid, TOGGLE_EXIT_HELP) == false)
						PlayerTextDrawShow(playerid, ExitTextdraw[playerid]);
					SetPlayerInterior(playerid, Groups[i][HQInteriorID2]);
					SetPlayerPos_Update(playerid, Groups[i][HQInterior2][0], Groups[i][HQInterior2][1], Groups[i][HQInterior2][2]);
					SetPlayerWeather(playerid, 1);
					return 1;
				}
			}
			
			// Prison entrances/exits
			if(IsPlayerInRangeOfPoint(playerid, 2, -505.8200,-523.3130,26.1042) && GetPlayerVirtualWorld(playerid) == 0) // ExteriorStaffPickup > InteriorStaffPickup
			{
				if(PrisonLockdown == 1 && Groups[Player[playerid][Group]][CommandTypes] != 1 && Player[playerid][AdminDuty] != 1)
					return SendClientMessage(playerid, -1, "Lockdown is in effect, all doors have been locked."); 
					
				Streamer_UpdateEx(playerid, -484.3624,-510.2009,-68.9141);
				SetPlayerPos_Update(playerid, -484.3624,-510.2009,-68.9141);
				SetPlayerWeather(playerid, 0);
				SetPlayerVirtualWorld(playerid, PRISON_VW);
			}
			if(IsPlayerInRangeOfPoint(playerid, 2, -484.3624,-510.2009,-68.9141) && GetPlayerVirtualWorld(playerid) == PRISON_VW) // InteriorStaffPickup > ExteriorStaffPickup
			{
				if(PrisonLockdown == 1 && Groups[Player[playerid][Group]][CommandTypes] != 1 && Player[playerid][AdminDuty] != 1)
					return SendClientMessage(playerid, -1, "Lockdown is in effect, all doors have been locked.");
					
				Streamer_UpdateEx(playerid, -505.8200,-523.3130,26.1042);
				SetPlayerPos_Update(playerid, -505.8200,-523.3130,26.1042);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerWeather(playerid, GlobalWeather);
			}
			
			if(IsPlayerInRangeOfPoint(playerid, 2, -534.7742,-546.0823,25.5234) && GetPlayerVirtualWorld(playerid) == 0) // ExteriorSideStaffPickup > InteriorSideStaffPickup
			{
				if(PrisonLockdown == 1 && Groups[Player[playerid][Group]][CommandTypes] != 1 && Player[playerid][AdminDuty] != 1)
					return SendClientMessage(playerid, -1, "Lockdown is in effect, all doors have been locked.");
					
				Streamer_UpdateEx(playerid, -473.0233,-502.2969,-68.9145);
				SetPlayerPos_Update(playerid, -473.0233,-502.2969,-68.9145);
				SetPlayerWeather(playerid, 0);
				SetPlayerVirtualWorld(playerid, PRISON_VW);
			}
			if(IsPlayerInRangeOfPoint(playerid, 2, -473.0233,-502.2969,-68.9145) && GetPlayerVirtualWorld(playerid) == PRISON_VW) // InteriorSideStaffPickup > ExteriorSideStaffPickup
			{
				if(PrisonLockdown == 1 && Groups[Player[playerid][Group]][CommandTypes] != 1 && Player[playerid][AdminDuty] != 1)
					return SendClientMessage(playerid, -1, "Lockdown is in effect, all doors have been locked.");
					
				Streamer_UpdateEx(playerid, -534.7742,-546.0823,25.5234);
				SetPlayerPos_Update(playerid, -534.7742,-546.0823,25.5234);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerWeather(playerid, GlobalWeather);
			}
			
			if(IsPlayerInRangeOfPoint(playerid, 2, -598.3393,-511.7646,25.5234) && GetPlayerVirtualWorld(playerid) == 0) // ExteriorPrisonYardPickup > InteriorPrisonYardPickup
			{
				if(PrisonLockdown == 1 && Groups[Player[playerid][Group]][CommandTypes] != 1 && Player[playerid][AdminDuty] != 1)
					return SendClientMessage(playerid, -1, "Lockdown is in effect, all doors have been locked.");
					
				Streamer_UpdateEx(playerid, -466.5263,-502.5333,-68.9145);
				SetPlayerPos_Update(playerid, -466.5263,-502.5333,-68.9145);
				SetPlayerWeather(playerid, 0);
				SetPlayerVirtualWorld(playerid, PRISON_VW);
			}
			if(IsPlayerInRangeOfPoint(playerid, 2, -466.5263,-502.5333,-68.9145) && GetPlayerVirtualWorld(playerid) == PRISON_VW)  // InteriorPrisonYardPickup > ExteriorPrisonYardPickup
			{
				if(PrisonLockdown == 1 && Groups[Player[playerid][Group]][CommandTypes] != 1 && Player[playerid][AdminDuty] != 1)
					return SendClientMessage(playerid, -1, "Lockdown is in effect, all doors have been locked.");
					
				Streamer_UpdateEx(playerid, -598.3393,-511.7646,25.5234);
				SetPlayerPos_Update(playerid, -598.3393,-511.7646,25.5234);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerWeather(playerid, GlobalWeather);
			}
		}
	}

	if(Player[playerid][BeingCalled] != -1 && Player[playerid][CellphoneConsole] == -1 && Player[playerid][IsSleeping] == 0)
	{
		if(IsKeyJustDown(KEY_CROUCH, newkeys, oldkeys) || IsKeyJustDown(KEY_ANALOG_RIGHT, newkeys, oldkeys))
		{
			if(strval(GetPhoneInfo(Player[playerid][PhoneN], "status")) == 0)
				return SendClientMessage(playerid, -1, "Your phone is off! Use /togphone to turn it on again.");
			
			if(IsPlayerOnPhone(playerid))
				return SendClientMessage(playerid, -1, "You're in a call already.");
			
			
			if(GetPVarInt(Player[playerid][BeingCalled], "CallingNumber") != Player[playerid][PhoneN])
			{
				new string[128];
				format(string, sizeof(string), "Use /choosephone to select the ringing phone. (%s - %d)", GetPhoneInfo(GetPVarInt(Player[playerid][BeingCalled], "CallingNumber"), "label"), GetPVarInt(Player[playerid][BeingCalled], "CallingNumber"));
				return SendClientMessage(playerid, WHITE, string);
			}

			PlayerPlayNearbySoundEx(playerid, 1143, 6, true);
			TextDrawHideForPlayer(playerid, CellPhoneTextDraw);
			TextDrawHideForPlayer(playerid, CellPhoneTextDrawInVehicle);
			Player[playerid][CellphoneConsole] = Player[playerid][BeingCalled];
			Player[Player[playerid][BeingCalled]][OnPhoneTime] = 1;
			Player[Player[playerid][BeingCalled]][CellphoneConsole] = playerid;
			SendClientMessage(playerid, WHITE, "You have picked up the phone.");
			SendClientMessage(Player[playerid][BeingCalled], WHITE, "The other person has answered.");
			Player[Player[playerid][BeingCalled]][CallConnectingTime] = -1;
			Player[Player[playerid][BeingCalled]][Calling] = -1;
			Player[Player[playerid][BeingCalled]][CallConnecting] = 0;
			new id = Player[playerid][BeingCalled];
			//Player[playerid][BeingCalled] = -1;
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			SetPlayerAttachedObject(playerid, 4, 330, 6);

			SetPVarString(playerid, "OnPhoneTo", GetContactName(Player[playerid][PhoneN], Player[id][PhoneN]));
			SetPVarString(id, "OnPhoneTo", GetContactName(Player[id][PhoneN], Player[playerid][PhoneN]));
		}
	}

	return 1;
}

stock AntiCheatBan(playerid)
{
	new string[128], WeaponN[128];
	GetWeaponName(GetPlayerWeapon(playerid), WeaponN, sizeof(WeaponN));
	new IP[21];
	GetPlayerIp(playerid, IP, sizeof(IP));
	format(string, sizeof(string), "%s | %s | Weapon hacking (%s).", IP, GetName(playerid), WeaponN);
	BanLog(string);
	LogLastBan(GetName(playerid), IP);
	format(string, sizeof(string), "Ban: %s has been auto-banned. Defined reason: \"Weapon hacking (%s)\".", GetName(playerid), WeaponN);
	SendClientMessageToAll(LIGHTRED, string);
	print(string);
	Player[playerid][Banned] = 1;
	format(Player[playerid][BannedReason], 128, "Autoban: Weapon hacking (%s)", WeaponN);
	format(Player[playerid][BannedBy], 128, "System");
	SavePlayerData(playerid);
	KickEx(playerid);
	format(string, sizeof(string), "banip %s", IP);
	SendRconCommand(string);
	new query[255];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "INSERT INTO ipbans (IP, Timestamp, Reason) VALUES ('%e', '%e', '%e')", IP, GetDate(), Player[playerid][BannedReason]);
	new Cache:cache = mysql_query(MYSQL_MAIN, query);
	cache_delete(cache);
	return 1;
}

/*forward IsPlayerSpawned(playerid);
public IsPlayerSpawned(playerid)
{
	new statex = GetPlayerState(playerid);

	if(Player[playerid][Hospitalized] != 1 && Player[playerid][Tutorial] != 1 && statex != PLAYER_STATE_NONE && statex != PLAYER_STATE_WASTED && statex != PLAYER_STATE_SPAWNED)
	{
		return true;
	}
	else
	{
		return false;
	}
}*/

stock ReturnWeapons(playerid, id)
{
	new string[128], WeaponName[128];
	if(Player[id][WepSlot0] > 0)
	{
		GetWeaponName(Player[id][WepSlot0], WeaponName, sizeof(WeaponName));
		format(string, sizeof(string), "- %s", WeaponName);
		SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot1] > 0)
	{
		GetWeaponName(Player[id][WepSlot1], WeaponName, sizeof(WeaponName));
		format(string, sizeof(string), "- %s", WeaponName);
		SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot2] > 0)
	{
		GetWeaponName(Player[id][WepSlot2], WeaponName, sizeof(WeaponName));
		format(string, sizeof(string), "- %s", WeaponName);
		SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot3] > 0)
	{
		GetWeaponName(Player[id][WepSlot3], WeaponName, sizeof(WeaponName));
		format(string, sizeof(string), "- %s", WeaponName);
		SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot4] > 0)
	{
		GetWeaponName(Player[id][WepSlot4], WeaponName, sizeof(WeaponName));
		format(string, sizeof(string), "- %s", WeaponName);
		SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot5] > 0)
	{
		GetWeaponName(Player[id][WepSlot5], WeaponName, sizeof(WeaponName));
		format(string, sizeof(string), "- %s", WeaponName);
		SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot6] > 0)
	{
		GetWeaponName(Player[id][WepSlot6], WeaponName, sizeof(WeaponName));
		format(string, sizeof(string), "- %s", WeaponName);
		SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot7] > 0)
	{
		GetWeaponName(Player[id][WepSlot7], WeaponName, sizeof(WeaponName));
		format(string, sizeof(string), "- %s", WeaponName);
		SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot8] > 0)
	{
		GetWeaponName(Player[id][WepSlot8], WeaponName, sizeof(WeaponName));
		format(string, sizeof(string), "- %s", WeaponName);
		SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot9] > 0)
	{
		GetWeaponName(Player[id][WepSlot9], WeaponName, sizeof(WeaponName));
		format(string, sizeof(string), "- %s", WeaponName);
		SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot10] > 0)
	{
		GetWeaponName(Player[id][WepSlot10], WeaponName, sizeof(WeaponName));
		format(string, sizeof(string), "- %s", WeaponName);
		SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot11] > 0)
	{
		GetWeaponName(Player[id][WepSlot11], WeaponName, sizeof(WeaponName));
		format(string, sizeof(string), "- %s", WeaponName);
		SendClientMessage(playerid, WHITE, string);
	}
	return 1;
}

encode_tires(tire1, tire2, tire3, tire4) {

	return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);

}

public OnPlayerUpdate(playerid)
{
	if(IsPlayerConnectedEx(playerid))
	{ /*
		new Float:health, Float:armour;
		GetPlayerHealth(playerid, health);
		GetPlayerArmour(playerid, armour);
		if(health != GetPVarFloat(playerid, "LastHealth") || armour != GetPVarFloat(playerid, "LastArmour"))
			UpdatePlayerLabel(playerid); */

		Player[playerid][IsTabbed] = 0;

		if(Player[playerid][LastWeapon] != GetPlayerWeapon(playerid))
		{
			OnPlayerChangeWeapon(playerid, Player[playerid][LastWeapon], GetPlayerWeapon(playerid));
			Player[playerid][LastWeapon] = GetPlayerWeapon(playerid);
		}

		if(GetPlayerMoney(playerid) != Player[playerid][Money])
		{
			ResetPlayerMoney(playerid);
			GivePlayerMoney(playerid, Player[playerid][Money]);
		}

		if(Player[playerid][Hospitalized] >= 1 || GetPlayerState(playerid) == 2)
		{
			SetPlayerArmedWeapon(playerid, 0);
		}

		/*
		if(IsPlayerInAnyVehicle(playerid) && IsABike(GetPlayerVehicleID(playerid)) && !IsPlayerInDynamicArea(playerid, SkateparkZone))
		{
			new Float:vPX, Float:vPY, Float:vPZ, Float:pLength;
			GetVehicleVelocity(GetPlayerVehicleID(playerid), vPX, vPY, vPZ);

			if(floatcmp(vPX , 0.24) == 1 || floatcmp(vPY, 0.24) == 1 || floatcmp(vPX, -0.24) == -1 || floatcmp(vPY, -0.24) == -1)
			{
				pLength = floatsqroot((vPX * vPX) + (vPY * vPY) + (vPZ * vPZ));

				vPX = (vPX / pLength) * 0.24;
				vPY = (vPY / pLength) * 0.24;

				if(IsPlayerInAnyVehicle(playerid))
					SetVehicleVelocity(GetPlayerVehicleID(playerid), vPX, vPY, vPZ);
			}
		}
		*/
	}
	return 1;
}

public MinutesToSeconds(minutes)
{
	return minutes*60;
}

public SecondsToMinutes(seconds)
{
	return seconds/60;
}

stock GetPlayerSpeed(playerid, get3d)
{
	new Float:x, Float:y, Float:z;
	if(IsPlayerInAnyVehicle(playerid))
		GetVehicleVelocity(GetPlayerVehicleID(playerid), x, y, z);
	else
		GetPlayerVelocity(playerid, x, y, z);

	return SpeedCheck(x, y, z, 100.0, get3d);
}

//public OneHourPublic()
task OneHourPublic[3600000]()
{
	CleanYellowPages();

	new tmp, string[128], date = getdate(), Day, Month, Year;
	getdate(Year, Month, Day);
	foreach(Player, i)
	{
		if(Player[i][VipRenew] == 1)
		{
			tmp = Player[i][VipTime] - gettime();
			tmp = tmp / 3600;
			SendClientMessage(i, PINK, "Your VIP grace period will expire soon!!");
			format(string, sizeof(string), "You have %d hours to renew your VIP or you will lose all VIP privileges!!", tmp);
			SendClientMessage(i, PINK, string);
		}

		new total_orders;
		for(new b = 1; b < MAX_BUSINESSES; b++)
		{
			if(Businesses[b][bType] != 16)
				continue;

			total_orders++;
		}

		#if defined MTG_HALLOWEEN
		if(Player[i][GainedHalloweenPrize] == 0 && Player[i][InHalloweenMaze] == 0)
		{
			switch(random(5))
			{
				case 0: SendClientMessage(i, PINK, "Have you taken a shot at the Halloween Maze yet? (/trickortreat)");
				case 1: SendClientMessage(i, PINK, "Why haven't you conquered the Halloween Maze yet? (/trickortreat)");
				case 2: SendClientMessage(i, PINK, "Everyone else has already done the Halloween Maze, why haven't you? (/trickortreat)");
				case 3: SendClientMessage(i, PINK, "My Grandma completed the Halloween Maze, why haven't you? (/trickortreat)");
				case 4: SendClientMessage(i, PINK, "I heard they are giving away burritos and broom sticks at the Hallowen Maze!! (/trickortreat)");
			}
		}
		#endif
		
		//Loyalty Day Resets
		if(CurrentLoyaltyDay != date)
		{
			Player[i][LoyaltyDailyStreak] = 0;
			SendClientMessage(i, COLOR_LOYALTY, "[LOYALTY] The loyalty day has changed and your playing hour streak has been reset.");
			if(Player[i][LastLoyaltyYear] == Year) //If last streak year is the current year
			{
				if(Player[i][LastLoyaltyDay] != (date - 1) && Player[i][LastLoyaltyDay] != date && Player[i][LoyaltyStreak] > 0)	//If their last date is not yesterday, reset
				{	
					format(string, sizeof(string), "%s has lost their loyalty streak of %d days.", GetName(i), Player[i][LoyaltyStreak]);
					LoyaltyLog(string);
					
					Player[i][LoyaltyStreak] = 0;	
					SendClientMessage(i, COLOR_LOYALTY, "[LOYALTY] You have lost your crea loyalty program streak!");
				}
			}
			else if(Player[i][LastLoyaltyYear] == (Year - 1)) //If last streak year was last year
			{
				if(date == 1 && Player[i][LastLoyaltyDay] < 365 && Player[i][LoyaltyStreak] > 0) //If current date is Jan 1 and last streak day isn't at least Dec 31 (Have to use less than because sometimes Dec 31 is 366th day)
				{
					format(string, sizeof(string), "%s has lost their loyalty streak of %d days.", GetName(i), Player[i][LoyaltyStreak]);
					LoyaltyLog(string);
					
					Player[i][LoyaltyStreak] = 0;	
					SendClientMessage(i, COLOR_LOYALTY, "[LOYALTY] You have lost your crea loyalty program streak!");
				}
			}
			SetPlayerScore(i, Player[i][LoyaltyStreak]);
		}
	}
	
	if(CurrentLoyaltyDay != date)
		CurrentLoyaltyDay = date;

	//Crowdfund Check
	new hour, minute, second;
	gettime(hour, minute, second);
	if(hour == 0)
		CrowdfundProjectCheck();
		
	return 1;
}

//public OneMinutePublic()
task OneMinutePublic[60000]()
{
	new hour, minute, second, string[128];
	gettime(hour, minute, second);

	if(Itter_Count(Player) > MaxPlayersThisHour) 
	{
		MaxPlayersThisHour = Itter_Count(Player);
	}
	
	if(minute == 59)
	{
		//Hour player count data
		
		new year, month, day;
		getdate(year, month, day);
		
		new timeString[32];
		format(timeString, sizeof(timeString), "%02d:%02d", hour, minute);
		
		mysql_format(MYSQL_MAIN, string, sizeof(string), "INSERT INTO playercount_data (MaxPlayers, Time, Year, Month, Day) VALUES (%d, '%e', %d, %d, %d)", MaxPlayersThisHour, timeString, year, month, day);
		mysql_query(MYSQL_MAIN, string);
		MaxPlayersThisHour = 0;
	}
	
	if(minute == 0 || minute == 10 || minute == 20 || minute == 30 || minute == 40 || minute == 50)
	{
		new tmpint = random(10);
		switch(tmpint)
		{
			case 0: format(string, sizeof(string), "{9FD7F5}Visit the crea SA:MP forums at http://www.crearoleplay.com!");
			case 1: format(string, sizeof(string), "{9FD7F5}Make sure you're aware of all our rules by visiting the forums at http://www.crearoleplay.com!");
			case 2: format(string, sizeof(string), "{9FD7F5}Do you need to report another player for breaking the rules? Do it at http://www.crearoleplay.com!");
			case 3: format(string, sizeof(string), "{9FD7F5}/help will show you a list of all the available commands on the crea SA:MP server!");
			case 4: format(string, sizeof(string), "{9FD7F5}Use /report to contact the on-duty admin with any issues/problems you may have!");
			case 5: format(string, sizeof(string), "{9FD7F5}If you need extra help, you can request it by using the /ask command!");
			case 6: format(string, sizeof(string), "{9FD7F5}You can ask for help with game script-related issues by talking in our /n channel!");
			case 7: format(string, sizeof(string), "{9FD7F5}If you're looking for a business and/or job, use /map. It's your own personal tour guide!");
			case 8: format(string, sizeof(string), "{9FD7F5}If you are warned and make a new account make sure to /report and transfer your warns!");
			case 9: format(string, sizeof(string), "{9FD7F5}Did you know we have a Discord server? Find the info at www.crearoleplay.com");
		}

		foreach(Player, i)
		{
			if(Player[i][PlayingHours] > 10)
				continue;
			SendClientMessage(i, WHITE, "===============================================================================================");
			SendClientMessage(i, WHITE, string);
		}
	}

	for(new i; i < MAX_RECENT_ADS; i++)
	{
		if(RecentAdTime[i] != 0 && RecentAdTime[i] < gettime())
		{
			RecentAdTime[i] = 0;
			format(RecentAds[i], 255, "No advertisement listed.");
		}
	}

	for(new i; i < MAX_HOUSES; i++)
	{
		if(Houses[i][GrowLightInstalled])
		{
			for(new x; x < 2; x++)
			{
				switch(Houses[i][PotGrow][x])
				{
					case 0: continue;
					case 1:
					{
						if(Houses[i][PotTime][x] < gettime() && Houses[i][PotTime][x] != 0)
						{
							Houses[i][PotGrow][x] = 2;
							Houses[i][PotTime][x] = gettime() + (3600 * 3);
						}
					}
					case 2:
					{
						if(Houses[i][PotTime][x] < gettime() && Houses[i][PotTime][x] != 0)
						{
							Houses[i][PotGrow][x] = 3;
							Houses[i][PotTime][x] = 0;
						}
					}
				}
			}
		}
	}

	foreach(Player, i)
	{
		if(GetPVarInt(i, "SMS_Alert") < 5)
		{
			SetPVarInt(i, "SMS_Alert", GetPVarInt(i, "SMS_Alert") + 1);
			continue;
		}

		SetPVarInt(i, "SMS_Alert", 0);

		mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT * FROM phones WHERE owner = '%s' AND status = '1'", Player[i][NormalName]);
		new Cache:cache = mysql_query(MYSQL_MAIN, string), count = cache_get_row_count(), idx;

		if(count == 0)
		{
			cache_delete(cache);
			continue;
		}

		while(idx < count)
		{
			cache_set_active(cache);
			new phonename[32];
			cache_get_field_content(idx, "label", phonename);
			mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT * FROM phonesmshistory WHERE phone = '%d' AND seen = '0' AND deleted = '0'", cache_get_field_content_int(idx, "number"));
			new Cache:cache2 = mysql_query(MYSQL_MAIN, string);

			if(cache_get_row_count() == 0)
			{
				cache_delete(cache2);
				idx++;
				continue;
			}
                        
			if(Player[i][PrisonDuration] > 0 || Player[i][PrisonID] > 0)
		        return 1;
			format(string, sizeof(string), "You have unread message(s) on your phone! (%s)", phonename);
			SendClientMessage(i, WHITE, string);

			cache_delete(cache2);
			idx++;
		}

		cache_delete(cache);
	}

	/*foreach(Player, i)
	{
		if(Player[i][PlayingHours] > 10)
			continue;
		if(Player[i][PlayingHours] == 10 && Player[i][LastSkin] == 0)
		{
			SendClientMessage(i, RED, "You have more than ten playing hours but have not changed out of your newbie skin.");
			SendClientMessage(i, RED, "A random skin has now been selected for you. You can purchase new skins at any clothing store.");
			new tmpint = random(9), skin;
			switch(tmpint)
			{
				case 0: skin = 2;
				case 1: skin = 16;
				case 2: skin = 26;
				case 3: skin = 35;
				case 4: skin = 54;
				case 5: skin = 65;
				case 6: skin = 96;
				case 7: skin = 167;
				case 8: skin = 193;
				case 9: skin = 222;
			}
			SetPlayerSkin(i, skin);
			Player[i][LastSkin] = skin;
		}
	}*/

	if(minute == 0)
	{
		SetWorldTime(hour + 4);
		format(string, sizeof(string), "The time is now %02d:00.", (hour + 4 >= 24) ? ((hour + 4) - 24) : (hour + 4));
		SendClientMessageToAll(COLOR_WHITE, string);
	}

	for(new i; i < MAX_BILLBOARDS; i++)
	{
		if(Billboards[i][TimeLeft] < gettime() && Billboards[i][TimeLeft] != 0)
		{
			if(strcmp(Billboards[i][Creator], "Nobody", true))
				ResetBillboard(i);
		}
	}

	foreach(Player, i)
	{

		SetPlayerTime(i, hour + 4, minute);
		
		if(Player[i][nMuted] == 1)
		{
			if(gettime() >= Player[i][nMutedTime])
			{
				Player[i][nMuted] = 0;
				Player[i][nMutedTime] = 0;
			}
		}

		if(Player[i][vMuted] == 1)
		{
			if(gettime() >= Player[i][vMutedTime])
			{
				Player[i][vMuted] = 0;
				Player[i][vMutedTime] = 0;
			}
		}

		if(gettime() >= Player[i][reportBan][0] && Player[i][reportBan][0] != 0)
		{
			Player[i][reportBan][0] = 0;
		}

		if(gettime() >= Player[i][askBan][0] && Player[i][askBan][0] != 0)
		{
			Player[i][askBan][0] = 0;
		}

		DeletePVar(i, "CarOffence");

		if(Jobs[Player[i][Job]][JobType] == JOB_TRUCKER && !Player[i][TruckLicense])
			Player[i][Job] = 0;

		if(Jobs[Player[i][Job2]][JobType] == JOB_TRUCKER && !Player[i][TruckLicense])
			Player[i][Job2] = 0;
	}
	if(GetActiveReports() >= 1)
	{
		new count = 0;
		foreach(Player, i)
		{
			if(Player[i][ActiveReport] < 1)
				continue;
			
			format(string, sizeof(string), "Report from %s (%d) - %d minutes ago", GetName(i), i, (gettime() - Player[i][ReportTime]) / 60);
			if((gettime() - Player[i][ReportTime]) / 60 < 5)
				SendToAdmins(GREEN, string, 1);
			else
			{
				SendToAdmins(RED, string, 1);
				count++;
			}
		}
		if(count > 0)
		{
			format(string, sizeof(string), "*** There are %d reports older than five minutes. ***", count);
			CallRemoteFunction("IRC_Message", "s", string);
		}
	}

	foreach(Player, i)
	{
		if(IsPlayerInAnyVehicle(i))
		{
			new veh = GetPlayerVehicleID(i), sql = GetVSQLID(veh), idx = GetVIndex(sql), Float:vH;
			new engine, lights, alarm, doors, bonnet, boot, objective;
			if(idx != -1)
			{
				GetVehicleParamsEx(Veh[idx][Link], engine, lights, alarm, doors, bonnet, boot, objective);
				GetVehicleHealth(Veh[idx][Link], vH);
			}

			if(500 >= vH && idx != -1)
			{
				if(engine == 1 || engine == -1)
				{
					switch(random(5000))
					{
						case 1337:
						{
							format(string, sizeof(string), "* The car engine stalls and shuts off. ((%s))", GetName(i));
							SetVehicleParamsEx(Veh[idx][Link], 0, lights, alarm, doors, bonnet, boot, objective);
						}
					}
				}
			}
		}
		// These checks happen in case the weather has changed (admin or randomly) or their drunk level changed (admin or booze)
		if(Player[i][PotTimer] > 0)
		{
			SetPlayerWeather(i, 2009);
			SetPlayerDrunkLevel(i, 10000);
		}

		if(Player[i][CocaineTimer] > 0)
		{
			SetPlayerWeather(i, 9);
			SetPlayerDrunkLevel(i, 40000);
		}
	}

	ModDutyWarning++;
	if(ModDutyWarning > 5 && GetOnlineMods() == 0)
	{
		ModDutyWarning = 0;
		SendToAdmins(-1, "There are no moderators online! (/modduty)", 0);
	}

	/*AdminDutyWarning++;
	if(AdminDutyWarning > 15 && GetOnlineAdmins() == 0 && PlayerCreationDisabled == 0)
	{
		AdminDutyWarning = 0;
		PlayerCreationDisabled = 1;
		SendToAdmins(-1, "There are no rank 3+ admin online, new player creation is disabled.", 0);
		SendToAdmins(-1, "To enable player creation, use /helloplayers", 0);
	}*/

	PCDWarning++;
	if(PCDWarning > 14 && PlayerCreationDisabled == 1)
	{
		PCDWarning = 0;
		SendToAdmins(RED, "Player creation is DISABLED. Use /unlockcreation to enable player creation.", 0);
	}

	TimerBomb();
	return 1;
}

task OneSecondPublic[1000]()
{
	//604800 is 7 days in seconds
	if((gettime() % 604800) < 2 && raffleCD < gettime())
	{
		raffleCD = gettime() + 5;
		raffleWinner();
	}

	if(VipRaffleInfo[0][rActive] && (VipRaffleInfo[0][rDrawDate] < gettime() && VipRaffleInfo[0][rDrawDate] != 0))
	{
		VIPRaffleWinner();
		VipRaffleInfo[0][rDrawDate] = 0;
		VipRaffleInfo[0][rActive] = 0;
	}

	if(SavingStatus && gettime() > SavingTime)
	{
		SavingStatus = 0;
		foreach(Player, i)
		{
			if(Player[i][Tied] || Player[i][Cuffed] || Player[i][AdminFrozen])
				continue;

			TogglePlayerControllable(i, true);
		}
		SendClientMessageToAll(LIGHTRED, "Save complete!");
	}

	if(AdCanBePlaced < 50)
	{
		AdCanBePlaced++;
	}

	for(new i; i < MAX_STASH; i++)
	{
		if(GlobalStash[i][Object] == 0)
			continue;

		if(GlobalStash[i][Timer] < gettime() && GlobalStash[i][Timer] != 0)
		{
			if(GlobalStash[i][Code] == 0)
			{
				ResetStashBag(i, .delete_phone = 1);
			}
			else
			{
				GlobalStash[i][Code] = 0;
				GlobalStash[i][Timer] = gettime() + 1800;
			}
		}
	}
}

ptask OneSecondPublicPlayer[1000](i)
{
	if(Player[i][ActiveReport] > 0)
		Player[i][ActiveReport]++;

	new hour, minute, second, time = gettime();
	gettime(hour, minute, second);

	Player[i][SpamCount] = 0;

	Player[i][IsTabbed] ++;

	if(Player[i][IsAtEvent] == 1 && CurrentEvent == 1)
		TogglePlayerControllable(i, false);

	if(Player[i][IsAtEvent] < 1 && GetPlayerTeam(i) != NO_TEAM)
		SetPlayerTeam(i, NO_TEAM);

	if(GetPVarInt(i, "FRESH_SPAWNED_NEW_ACCOUNT") > 0)
	{
		SetPVarInt(i, "FRESH_SPAWNED_NEW_ACCOUNT", GetPVarInt(i, "FRESH_SPAWNED_NEW_ACCOUNT") + 1);

		if(GetPVarInt(i, "FRESH_SPAWNED_NEW_ACCOUNT") > 5)
			DeletePVar(i, "FRESH_SPAWNED_NEW_ACCOUNT");
	}

	
	if(GetPVarInt(i, "START_TUTORIAL") == 1)
	{
		DeletePVar(i, "START_TUTORIAL");
		PutPlayerInTutorial(i, 1);
	}

	if(GetPVarInt(i, "MovingStashTooFar") > 0)
	{
		DeletePVar(i, "MovingStashTooFar");
		CancelEdit(i);
	}

	if(Player[i][PotTimer] < time && Player[i][PotTimer] != 0)
	{
		SendClientMessage(i, -1, "Your pot high has gone away");
		Player[i][PotTimer] = 0;

		if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_SMOKE_CIGGY)
			ClearAnimations(i, 1);

		if(Player[i][PotTimer] == 0)
		{
			SetPlayerWeather(i, GlobalWeather);
			SetPlayerDrunkLevel(i, 0);
		}
		else
		{
			SetPlayerWeather(i, 9);
			SetPlayerDrunkLevel(i, 40000);
		}
	}

	if(Player[i][CocaineTimer] < time && Player[i][CocaineTimer] != 0)
	{
		SendClientMessage(i, -1, "Your cocaine high has gone away");
		Player[i][CocaineTimer] = 0;
		if(Player[i][CocaineTimer] == 0)
		{
			SetPlayerWeather(i, GlobalWeather);
			SetPlayerDrunkLevel(i, 0);
		}
		else
		{
			SetPlayerWeather(i, 2009);
			SetPlayerDrunkLevel(i, 10000);
		}
	}

	if(Player[i][SpeedTimer] < time && Player[i][SpeedTimer] != 0)
	{
		Player[i][SpeedTimer] = 0;
		SetPlayerSkillLevel(i, WEAPONSKILL_SHOTGUN, (Groups[Player[i][Group]][CommandTypes] == 1 || Groups[Player[i][Group]][CommandTypes] == 2) ? (999) : (998));
		SetPlayerSkillLevel(i, WEAPONSKILL_SPAS12_SHOTGUN, (Groups[Player[i][Group]][CommandTypes] == 1 || Groups[Player[i][Group]][CommandTypes] == 2) ? (999) : (998));
		SetPlayerSkillLevel(i, WEAPONSKILL_MP5, (Groups[Player[i][Group]][CommandTypes] == 1 || Groups[Player[i][Group]][CommandTypes] == 2) ? (999) : (998));
		SetPlayerSkillLevel(i, WEAPONSKILL_AK47, (Groups[Player[i][Group]][CommandTypes] == 1 || Groups[Player[i][Group]][CommandTypes] == 2) ? (999) : (998));
		SetPlayerSkillLevel(i, WEAPONSKILL_M4, (Groups[Player[i][Group]][CommandTypes] == 1 || Groups[Player[i][Group]][CommandTypes] == 2) ? (999) : (998));
		SetPlayerSkillLevel(i, WEAPONSKILL_SNIPERRIFLE, (Groups[Player[i][Group]][CommandTypes] == 1 || Groups[Player[i][Group]][CommandTypes] == 2) ? (999) : (998));
		SendClientMessage(i, -1, "Your speed high has run out!");
	}

	if(GetPVarInt(i, "FishTime") < time && GetPVarInt(i, "FishTime") != 0)
	{
		if(Player[i][FishAttempts] < 10)
			SendClientMessage(i, -1, "You can now cast your rod again!");
		SetPVarInt(i, "FishTime", 0);
	}

	if(Player[i][LicenseSuspended] > 0 && Player[i][LicenseSuspended] < time)
	{
		Player[i][LicenseSuspended] = 0;
		new query[128];
		mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE PoliceTickets SET StrikesExpired = \'1\' WHERE offenderName = \'%e\'", GetName(i));
		mysql_query(MYSQL_MAIN, query, false);
		SendClientMessage(i, YELLOW, "Your license has been unsuspended.");
	}

	if(GetPVarInt(i, "ChipCountCD") < time && Player[i][ReqChipCount] != -1)
	{
		SendClientMessage(Player[i][ReqChipCount], -1, "The offer has timed out.");
		DeletePVar(i, "ChipCountCD");
		Player[i][ReqChipCount] = -1;
	}

	if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK && Player[i][HasJetpack] == 0 && Player[i][AdminLevel] < 1)
	{
		new string[128], IP[21];
		GetPlayerIp(i, IP, sizeof(IP));
		format(string, sizeof(string), "Ban: %s has been auto-banned. Defined reason: \"Hacking (jetpack)\".", GetName(i));
		SendClientMessageToAll(LIGHTRED, string);
		Player[i][Banned] = 1;
		format(Player[i][BannedReason], 128, "Autoban: Hacking (jetpack)");
		format(Player[i][BannedBy], 128, "System");
		SavePlayerData(i);
		KickEx(i);
		format(string, sizeof(string), "banip %s", IP);
		SendRconCommand(string);
		new query[255];
		mysql_format(MYSQL_MAIN, query, sizeof(query), "INSERT INTO ipbans (IP, Timestamp, Reason) VALUES ('%e', '%e', '%e')", IP, GetDate(), Player[i][BannedReason]);
		new Cache:cache = mysql_query(MYSQL_MAIN, query);
		cache_delete(cache);
		
	}

	if(GetPVarInt(i, "TaxiDutyTimeout") < time && Player[i][TaxiDuty] == 1 && !IsPlayerInVehicle(i, Player[i][TaxiCar]))
	{
		SendClientMessage(i, -1, "You've been out of your taxi too long, you're now off duty");
		Player[i][TaxiDuty] = 0;
		SetVehicleToRespawn(Player[i][TaxiCar]);
		Player[i][TaxiCar] = 0;
	}

	//Mod Request ActiveQuestion Notify
	if(GetPVarInt(i, "ActiveQuestion") != 0 && GetPVarInt(i, "ActiveQuestion") < time)
		GameTextForPlayer(i, "Remember to /mfinish after you're done!", 1100, 1);

	if(Player[i][Cuffed] >= 1)
	{
		Player[i][Cuffed]++;
		if(Player[i][Cuffed] >= 1800)
		{
			new string[128];
			Player[i][Cuffed] = 0;
			TogglePlayerControllable(i, true);
			SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
			format(string, sizeof(string), "* The cuffs around my wrists break ((%s))", GetNameEx(i));
			NearByMessage(i, NICESKY, string);
		}
	}

	if(Player[i][PizzaCooldown] < time && Player[i][PizzaCooldown] != 0)
	{
		if(Player[i][PizzaRun] > 0)
		{
			SendClientMessage(i, -1, "The pizza has gone cold - you've taken too long to deliver!");
			new zone[MAX_ZONE_NAME], string[128], job = (Jobs[Player[i][Job]][JobType] == JOB_PIZZABOY) ? (Player[i][Job]) : (Player[i][Job2]);
			if(Player[i][PizzaPay] > 0)
			{
				Get2DPosZone(Jobs[job][JobMiscLocationOneX], Jobs[job][JobMiscLocationOneY], zone, MAX_ZONE_NAME);
				format(string, sizeof(string), "Head back to %s to get your pay.", zone);
				SendClientMessage(i, YELLOW, string);
				SetPlayerCheckpoint(i, Jobs[job][JobMiscLocationOneX], Jobs[job][JobMiscLocationOneY], Jobs[job][JobMiscLocationOneZ], 5);
			}
			else
			{
				Player[i][Checkpoint] = 0;
				DisablePlayerCheckpoint(i);
			}
			Player[i][PizzaCooldown] = 0;
			Player[i][PizzaRun] = 0;
			Player[i][PizzaDist] = 0;
			PlayerTextDrawHide(i, Player[i][PizzaTimer]);
		}
		else if(Player[i][CantDeliverPizza] == 1)
		{
			SendClientMessage(i, -1, "You can do pizza deliveries again!");
			Player[i][CantDeliverPizza] = 0;
			Player[i][PizzaCooldown] = 0;
			PlayerTextDrawHide(i, Player[i][PizzaTimer]);
		}
	}

	if(GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerSpeed(i, 0) >= 230 && Player[i][AdminLevel] < 1)
	{
		if(! IsAHelicopter(GetPlayerVehicleID(i)))
		{
			if(Player[i][SpeedHackWarnTime] == 0)
			{
				if(GetVehicleModel(GetPlayerVehicleID(i)) != 522 && GetVehicleModel(GetPlayerVehicleID(i)) != 521 && GetVehicleModel(GetPlayerVehicleID(i)) != 520)
				{
					new string[128];
					format(string, sizeof(string), "WARNING: %s may possibly be speed-hacking: they have a %d ping and are driving at %d KM/H.", GetName(i), GetPlayerPing(i), GetPlayerSpeed(i, 0));
					SendToAdmins(ADMINORANGE, string, 1);
					WarningLog(string);

					Player[i][SpeedHackWarnTime]++;
					Player[i][SpeedHacksWarn]++;

					if(Player[i][SpeedHacksWarn] >= MAX_SPEED_HACK_WARNINGS)
					{
						new IP[21];
						GetPlayerIp(i, IP, sizeof(IP));						
						format(string, sizeof(string), "Ban: %s has been auto-banned. Defined reason: \"Speed hacking\".", GetName(i));
						SendClientMessageToAll(LIGHTRED, string);
						Player[i][Banned] = 1;
						format(Player[i][BannedReason], 128, "Autoban: Speed hacking");
						format(Player[i][BannedBy], 128, "System");
						SavePlayerData(i);
						KickEx(i);
						Player[i][SpeedHackWarnTime] = 0;
						Player[i][SpeedHacksWarn] = 0;
						format(string, sizeof(string), "banip %s", IP);
						SendRconCommand(string);
						new query[255];
						mysql_format(MYSQL_MAIN, query, sizeof(query), "INSERT INTO ipbans (IP, Timestamp, Reason) VALUES ('%e', '%e', '%e')", IP, GetDate(), Player[i][BannedReason]);
						new Cache:cache = mysql_query(MYSQL_MAIN, query);
						cache_delete(cache);
					}
				}
			}
		}
	}

	if(Player[i][ACWarnTime] >= 1)
	{
		Player[i][ACWarnTime]++;
		if(Player[i][ACWarnTime] >= 10)
		{
			Player[i][ACWarnTime] = 0;
			Player[i][AnticheatWarns] = 0;
		}
	}

	if(Player[i][SpeedHackWarnTime] >= 1)
	{
		Player[i][SpeedHackWarnTime]++;
		if(Player[i][SpeedHackWarnTime] >= 3)
		{
			Player[i][SpeedHackWarnTime] = 0;
			Player[i][SpeedHacksWarn] = 0;
		}
	}
	// Medic Related //

	/*if(Player[i][EMSAccepted] != -1)
		DeathClock(i, Player[i][EMSAccepted], 1);

	if(Player[i][EMSAccepted] != -1 && Player[i][Checkpoint] == 6969)
	{
		new Float:x, Float:y, Float:z, target = Player[i][EMSAccepted];

		if(Player[target][InHouse] != 0)
		{
			new hId = Player[target][InHouse];
			x = Houses[hId][hExteriorX];
			y = Houses[hId][hExteriorY];
			z = Houses[hId][hExteriorZ];
		}
		else if(Player[target][InBusiness] != 0)
		{
			new bId = Player[target][InBusiness];
			x = Businesses[bId][bExteriorX];
			y = Businesses[bId][bExteriorY];
			z = Businesses[bId][bExteriorZ];
		}
		else if(Player[target][InGroupHQ] != 0)
		{
			new gId = Player[target][InBusiness];
			x = Groups[gId][HQExteriorX];
			y = Groups[gId][HQExteriorY];
			z = Groups[gId][HQExteriorZ];
		}
		else
			GetPlayerPos(target, x, y, z);

		if(IsPlayerInRangeOfPoint(i, 8, x, y, z))
		{
			DisablePlayerCheckpoint(i);
			SendClientMessage(i, -1, "You've arrvied at your patient!");
			Player[i][Checkpoint] = 0;
		}
	}*/

	/*if(GetPVarInt(i, "BleedingOutTime") > 0)
	{
		SetPVarInt(i, "BleedingOutTime", GetPVarInt(i, "BleedingOutTime") - 1);
		new string[128];
		switch(GetPVarInt(i, "BleedingOutTime"))
		{
			case 15:
			{
				format(string, sizeof(string), "* %s's skin begins to look pale", GetName(i));
				NearByMessage(i, NICESKY, string);
			}
			case 0:
			{
				format(string, sizeof(string), "* %s has lost all signs of life", GetName(i));
				SetPVarInt(i, "CompleteDeath", 1);

				NearByMessage(i, NICESKY, string);
				SetPlayerHealth(i, -1);
				SetPVarInt(i, "Hacky_IgnoreFirstDeath", 1);
				OnPlayerDeath(i, i, 0);
			}
		}
		DeathClock(i, i, 0);
	}*/


	// endof MEDIX //

	if(Player[i][PizzaCooldown] >= time)
	{
		new pizzatimer[20];
		format(pizzatimer, sizeof(pizzatimer), "%s%d", (((Player[i][PizzaCooldown] - time) % 60) < 10) ? ("0") : (""), (Player[i][PizzaCooldown]-time) % 60);
		format(pizzatimer, sizeof(pizzatimer), "Pizza timer~n~%d:%s", (Player[i][PizzaCooldown] - time) / 60, pizzatimer);//(Player[i][PizzaCooldown]-gettime()) % 60);
		PlayerTextDrawSetString(i, Player[i][PizzaTimer], pizzatimer);
		PlayerTextDrawShow(i, Player[i][PizzaTimer]);
	}
	else if(Player[i][PizzaCooldown] == 0)
	{
		PlayerTextDrawHide(i, Player[i][PizzaTimer]);
	}

	
	if(IsPlayerInAnyVehicle(i) && GetPlayerToggle(i, TOGGLE_SPEEDO) == false && GetPVarInt(i, "DeathClockToggle") == 0)
	{
		new string[60];
		format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~ ~R~%d KM/H", ((GetPlayerSpeed(i, 0) * 16) / 10));
		GameTextForPlayer(i, string, 2000, 3); //SHOULD STOP FLASHING?!?!?!?!
	}

	if(Player[i][AttendingBackupCall] != -1)
	{
		if(!IsPlayerInAnyVehicle(i))
			return 1;

		new veh = GetPlayerVehicleID(i);
		new sql = GetVSQLID(veh), idx = GetVIndex(sql);

		if(veh == INVALID_VEHICLE_ID)
			return 1;

		if(sql == 0)
			return 1;

		if(Groups[Veh[idx][Group]][CommandTypes] != Groups[Player[i][Group]][CommandTypes])
			return 1;

		if(IsPlayerConnectedEx(Player[i][AttendingBackupCall]))
		{
			GetPlayerPos(Player[i][AttendingBackupCall], Player[Player[i][AttendingBackupCall]][LastX], Player[Player[i][AttendingBackupCall]][LastY], Player[Player[i][AttendingBackupCall]][LastZ]);
			SetPlayerCheckpoint(i, Player[Player[i][AttendingBackupCall]][LastX], Player[Player[i][AttendingBackupCall]][LastY], Player[Player[i][AttendingBackupCall]][LastZ], 20.0);
		}
		else
		{
			Player[i][AttendingBackupCall] = -1;
			SendClientMessage(i, WHITE, "Checkpoint Destroyed - The backup call you were attending unexpectedly disconnected.");
			Player[i][Checkpoint] = 0;
			DisablePlayerCheckpoint(i);
		}
	}

	if(Player[i][TrackCooldown] > 0 && Player[i][TrackCooldown] < time && Player[i][IsTabbed] < 2)
	{
		SendClientMessage(i, WHITE, "You can now track a player again.");
		Player[i][TrackCooldown] = 0;
	}

	//Fuel n Stuff
	new sql = GetVSQLID(GetPlayerVehicleID(i)), idx = GetVIndex(sql);

	if(Player[i][InDerby] >= 1)
	{
		if(IsPlayerInAnyVehicle(i) && sql == 0)
		{
			new vid = GetPlayerVehicleID(i), Float:health;
			GetVehicleHealth(vid, health);

			if(IsEventVehicle(vid))
			{
				if(health < 300)
					cmd_leavederby(i, "health");
			}
		}
	}

	if(IsPlayerInAnyVehicle(i) && sql != 0 && GetPlayerVehicleSeat(i) == 0)
	{
		if(Veh[idx][damageState] == 0)
		{
			GetVehicleHealth(Veh[idx][Link], Veh[idx][vHealth]);
			//printf("Vehicle HP: %f", Veh[idx][vHealth]);

			if(Veh[idx][vHealth] < 400 && Veh[idx][vHealth] != -5) // -5 check is if it a bomb blowing the vehicle up
			{
				SetVehicleHealth(Veh[idx][Link],400);
				Veh[idx][vHealth] = 400;
				new engine, lights, alarm, doors, bonnet, boot, ojective;
				SendClientMessage(i, YELLOW, "Your vehicle has taken too much damage and ceases to move! (( Find a mechanic! ))");
				Veh[idx][damageState] = 1;
				GetVehicleParamsEx(Veh[idx][Link], engine, lights, alarm, doors, bonnet, boot, ojective);
				SetVehicleParamsEx(Veh[idx][Link], 0, lights, alarm, doors, bonnet, boot, ojective);
			}
		}

		if(GetPlayerToggle(i, TOGGLE_FUEL_BAR) == false)
		{
			if(Veh[idx][Fuel] > 0)
			{
				SetPlayerProgressBarValue(i, vFuel[i], Veh[idx][Fuel]);
				UpdatePlayerProgressBar(i, vFuel[i]);
			}
			else
			{
				SetPlayerProgressBarValue(i, vFuel[i], 0);
				UpdatePlayerProgressBar(i, vFuel[i]);
			}
		}
		RefreshHunger(i);
	}


	//Vehicle Sellcar timeout

	if(GetPVarInt(i, "SellCar_Timeout") < time && GetPVarInt(i, "SellCar_Timeout") != 0 && GetPVarInt(i, "SellCar_Target") != 0)
	{
		new seller = GetPVarInt(i, "SellCar_Target") - 1;
		SendClientMessage(seller, -1, "The offer to sell the car has timed out");
		DeletePVar(i, "SellCar_Timeout");
		DeletePVar(i, "SellCar_SellerSQL");
	}

	//Give Weapon Timeout

	if(GetPVarInt(i, "GiveWeapon_Timeout") < time && GetPVarInt(i, "GiveWeapon_Timeout") != 0)
	{
		new id = GetPVarInt(i, "GiveWeapon_PlayerID");
		SendClientMessage(id, -1, "The offer to give the weapon has timed out");
		DeletePVar(i, "GiveWeapon_WeaponID");
		DeletePVar(i, "GiveWeapon_Timeout");
		DeletePVar(i, "GiveWeapon_PlayerID");
	}

	//Sell House Timeout

	if(GetPVarInt(i, "SellHouse_Timeout") < time && GetPVarInt(i, "SellHouse_Timeout") != 0)
	{
		new id = GetPVarInt(i, "SellHouse_PlayerID");
		SendClientMessage(id, -1, "The offer to sell the house has timed out");
		DeletePVar(i, "SellHouse_PlayerID");
		DeletePVar(i, "SellHouse_Price");
		DeletePVar(i, "SellHouse_HouseID");
		DeletePVar(i, "SellHouse_Timeout");
	}

	//Vehicle Car Start

	if(GetPVarInt(i, "StartTimer") <= time && GetPVarInt(i, "StartTimer") != 0)
	{
		StartCar(i, GetPVarInt(i, "StartVehID"));
		DeletePVar(i, "StartTimer");
	}

	if(Player[i][ResetTimer] >= 1)
	{
		Player[i][ResetTimer]++;

		if(Player[i][ResetTimer] == 2)// && GetPVarInt(i, "BleedingOutTime") == 0)
		{
			if(Player[i][AdminDuty] >= 1)
			{
				SetPlayerSkin(i, Player[i][AdminSkin]);
			}
			else
			{
				SetPlayerSkin(i, Player[i][LastSkin]);
			}
			TogglePlayerControllable(i, true);
		}
	}

	if(Player[i][Cuffed] == 1)
	{
		TogglePlayerControllable(i, false);
	}

	if(Spotlight != -1)
	{
		if(Player[i][Checkpoint] == 0 || Player[i][SpotlightEffect] == 1)
		{
			if(IsPlayerConnectedEx(Spotlight))
			{
				new Float: StarX, Float: StarY, Float: StarZ;
				GetPlayerPos(Spotlight, StarX, StarY, StarZ);

				SetPlayerCheckpoint(i, StarX, StarY, StarZ, 10.0);

				if(Player[i][SpotlightEffect] == 0)
				{
					Player[i][Checkpoint] = 1;
					Player[i][SpotlightEffect] = 1;
				}
			}
			else
			{
				Spotlight = -1;
				Player[i][Checkpoint] = 0;
				Player[i][SpotlightEffect] = 0;
				DisablePlayerCheckpoint(i);
			}
		}
	}

	Player[i][SecondsLoggedIn]++;

	if(Player[i][CarModDelay] >= 1)
	{
		Player[i][CarModDelay]++;

		if(Player[i][CarModDelay] == CAR_MOD_DELAY_TIME)
		{
			Player[i][CarModDelay] = 0;
			SendClientMessage(i, WHITE, "You may now fix, NOS or park your vehicle again.");
		}
	}

	if(Player[i][Tied] >= 1)
	{
		Player[i][TiedTime]++;
		if(Player[i][TiedTime] >= 1800)
		{
			TogglePlayerControllable(i, true);
			Player[i][Tied] = 0;
			Player[i][TiedTime] = 0;
			SendClientMessage(i, GREY, "The rope has now broken.");

			if(Player[i][Blindfolded] >= 1)
			{
				Player[i][Blindfolded] = 0;
				SetPlayerDrunkLevel(i, 0);
				SetCameraBehindPlayer(i);
			}
		}
	}

	if(Player[i][OnPayphone] > 0 && !IsPlayerNearPayphone(i))
	{
		cmd_hangup(i, "droppedPhone");
	}

	if(IsPlayerOnPhone(i) && Player[i][CellphoneConsole] == -1 && Player[i][CallConnecting] > 0)
	{
		Player[i][CallConnecting]++;
		if(Player[i][CallConnecting] == 15)
		{
			Player[i][CallConnecting] = 0;
			cmd_hangup(i, "noAnswer");
		}
	}

	if(Player[i][VIPPass] > 0 && Player[i][VIPPassTime] < time)
	{
		Player[i][VIPPass] = 0;
		Player[i][VIPPassTime] = 0;
		SendClientMessage(i, WHITE, "Your VIP pass has expired!");
	}

	if(Player[i][SecondsLoggedIn] >= 3600)
	{
		new string[128], PayCheque;	
		mysql_format(MYSQL_MAIN, string, sizeof(string), "INSERT INTO PlayerActivity (pSQLID, pName) VALUES ('%d', '%e')", Player[i][pSQL_ID], Player[i][NormalName]);
		mysql_query(MYSQL_MAIN, string, false);

		Player[i][SecondsLoggedIn] = 0;
		//VIP Bonus
		if(Player[i][VipRank] == 0)
			PayCheque = ((Player[i][BankMoney] / 1000) * 1) + 5000;
		else if(Player[i][VipRank] == 1)
			PayCheque = ((Player[i][BankMoney] / 1000) * 2) + 5000;
		else if(Player[i][VipRank] == 2)
			PayCheque = ((Player[i][BankMoney] / 1000) * 3) + 5000;
		else if(Player[i][VipRank] >= 3)
			PayCheque = ((Player[i][BankMoney] / 1000) * 4) + 5000;
		
		//Admin Set bonus
		new Float:bonus;
		if(time < PaycheckBonusTimeleft)
		{
			if(Player[i][PlayingHours] < PaycheckHours || PaycheckHours <= 0)
			{
				bonus = float(PaycheckBonus);
				bonus = floatdiv(bonus, 100);
				bonus = floatmul(float(PayCheque), bonus);
				PayCheque += floatround(bonus, floatround_round);
			}
		}
		
		//Loyalty Bonus
		new Float:loyatlyBonus;
		if(Player[i][LoyaltyPaycheckBoostTimeLeft] > 0)
		{
			loyatlyBonus = float(Player[i][LoyaltyPaycheckBoost]);
			loyatlyBonus = floatdiv(loyatlyBonus, 100);
			loyatlyBonus = floatmul(float(PayCheque), loyatlyBonus);
			PayCheque += floatround(loyatlyBonus, floatround_round);
			Player[i][LoyaltyPaycheckBoostTimeLeft] --;
			format(string, sizeof(string), "[LOYALTY] You have gained %s due to your %d percent loyalty bonus. (%d hours left)", PrettyMoney(floatround(loyatlyBonus, floatround_round)), Player[i][LoyaltyPaycheckBoost], Player[i][LoyaltyPaycheckBoostTimeLeft]);
			SendClientMessage(i, COLOR_LOYALTY, string);
		}
		
		if(PayCheque > 20000)
			PayCheque = 20000;

		if(PayCheque >= 1)
		{
			if(Player[i][PlayingHours] > 25 && Player[i][HungerEnabled] != 1)
				Player[i][HungerEnabled] = 1;

			if(Player[i][PlayingHours] == 25 && Player[i][HungerEnabled] != 1)
			{
				Player[i][HungerEnabled] = 1;
				Player[i][HungerLevel] = 100;

				SetPlayerProgressBarValue(i, Hunger[i], Player[i][HungerLevel]);
				UpdatePlayerProgressBar(i, Hunger[i]);
				RefreshHunger(i);

				SendClientMessage(i, GREY, "---------------------------------------------------------------------------------");
				SendClientMessage(i, WHITE, "Hunger is now enabled for your character. Every 7.2 minutes you will lose 1 percent of your hunger.");
				SendClientMessage(i, WHITE, "To regain hunger, you need to eat food. Go to any restaurant and buy food to raise your hunger bar.");
				SendClientMessage(i, WHITE, "You can go to the hospital and get medical kits to heal wounds and such.");
				SendClientMessage(i, GREY, "---------------------------------------------------------------------------------");
			}
			
			Player[i][PlayingHours]++;
			
			if(Player[i][PrisonID] > 1)
			{
				new str[128];
				format(str, sizeof(str), "You have been given a paycheck of %d tickets because you are in prison.", PrisonPaycheck);
				SendClientMessage(i, ANNOUNCEMENT, "----------------------------------------------------------------------------");
				SendClientMessage(i, -1, str);
				SendClientMessage(i, ANNOUNCEMENT, "----------------------------------------------------------------------------");
				Player[i][PrisonTickets] += PrisonPaycheck;
			}
			else
			{
				SendClientMessage(i, ANNOUNCEMENT, "----------------------------------------------------------------------------");
				SendClientMessage(i, WHITE, "Your paycheck has arrived!");

				if(Player[i][LoanNotPaid] != 1)
					Player[i][BankMoney] += PayCheque;
				else
				{
					new str[128];
					Player[i][Loan] -= PayCheque;
					if(Player[i][Loan] < 1)
					{
						Player[i][Loan] = 0;
					}
					format(str, sizeof(str), "NOTICE: The Bank of Los Santos has taken your paycheck to pay off your loan! Remainder to be paid: %s", PrettyMoney(Player[i][Loan]));
					SendClientMessage(i, ORANGE, str);
				}
				
				if(Player[i][LoanNotPaid] != 1)
				{
					new Float:Taxable, Float:new_tax, bank = Player[i][BankMoney];

					if(Player[i][House] != 0 || Player[i][House2] != 0)
					{
						if(bank >= 1 && bank <= 150000) new_tax = float(Tax);
						else if(bank >= 150001 && bank <= 300000) new_tax = float(Tax) * 1.25;
						else if(bank >= 300001 && bank <= 400000) new_tax = float(Tax) * 1.50;
						else if(bank >= 400001 && bank <= 500000) new_tax = float(Tax) * 1.75;
						else new_tax = float(Tax) * 2.00;

						Taxable = (PayCheque / 100) * floatround(new_tax);
						format(string, sizeof(string), "You have been charged %s tax at %.2f%s.", PrettyMoney(floatround(Taxable)), new_tax, "%%");
					}
					else // visitor tax (owns no house)
					{
						if(bank >= 1 && bank <= 150000) new_tax = float(Tax);
						else if(bank >= 150001 && bank <= 300000) new_tax = float(Tax) * 1.25;
						else if(bank >= 300001 && bank <= 400000) new_tax = float(Tax) * 1.50;
						else if(bank >= 400001 && bank <= 500000) new_tax = float(Tax) * 1.75;
						else new_tax = float(Tax) * 2.00;

						Taxable = (PayCheque / 100) * (new_tax + 5.0); //plus additional 5% visitor tax
						format(string, sizeof(string), "You have been charged %s tax at %.2f%s.", PrettyMoney(floatround(Taxable)), new_tax + 5.0, "%%");
					}

					if(Taxable > 1 && Taxable < 100000)
					{
						Player[i][BankMoney] -= floatround(Taxable);
						SendClientMessage(i, GREY, string);
						Groups[TaxGroup][SafeMoney] += floatround(Taxable);
					}
				}
				if(Player[i][Loan] == 0)
					Player[i][LoanNotPaid] = 0;
					
				if(Player[i][PlayingHours] % 5 == 0 && GetNumberOfTickets(i) == 0)
				{
					new daysleft = 7 - ((gettime() % 604800) / 86400);
					if(daysleft == 0)
						format(string, sizeof(string), "[AD] Don't forget to enter the raffle! Buy tickets at your local 24/7. The raffle will be drawn in less than a day!");
					else
						format(string, sizeof(string), "[AD] Don't forget to enter the raffle! Buy tickets at your local 24/7. The raffle will be drawn in %d days!", daysleft);
					SendClientMessage(i, GREEN, string);
				}

				format(string, sizeof(string), "You have earned $%s.", IntToFormattedStr(PayCheque));
				SendClientMessage(i, GREY, string);
				//Microtransactions
				//format(string, sizeof(string), "$%s not enough? Go to the In-Game Purchases section at https://crearoleplay.com to purchase more In-Game currency!", IntToFormattedStr(PayCheque));
				SendClientMessage(i, ORANGE, string);
				if(bonus > 0)
				{
					format(string, sizeof(string), "You have earned %s more due to a %d percent paycheck boost!", PrettyMoney(floatround(bonus, floatround_round)), PaycheckBonus);
					SendClientMessage(i, GREEN, string);
				}

				if (Player[i][VipRank] > 0) {
					switch(Player[i][VipRank])
					{
						case 0:	SendClientMessage(i, ORANGE, "Buying a VIP membership will give you an increase on your pay cheques. Check it out! https://crearoleplay.com");
						case 1:
						{
							SendClientMessage(i, YELLOW, "You've got 10 percent interest added due to your VIP membership.");
							SendClientMessage(i, YELLOW, "You have earned 2 VIP tokens for use in the VIP locker. ((/tokens))");
							Player[i][VipTokens] += 2;
						}
						case 2:
						{
							SendClientMessage(i, YELLOW, "You've got 20 percent interest added due to your VIP membership.");
							SendClientMessage(i, YELLOW, "You have earned 3 VIP tokens for use in the VIP locker. ((/tokens))");
							Player[i][VipTokens] += 3;
						}
						default:
						{
							SendClientMessage(i, YELLOW, "You've got 30 percent interest added due to your VIP membership.");
							SendClientMessage(i, YELLOW, "You have earned 4 VIP tokens for use in the VIP locker. ((/tokens))");
							Player[i][VipTokens] += 4;
						}
					}
					//SendClientMessage(i, YELLOW, "You have earned 2 VIP tokens for use in the VIP locker.");
					//Player[i][VipTokens] += 2;
				}
				new bonusCheque;

				if (Groups[Player[i][Group]][CommandTypes] == 1 && Player[i][GroupRank] > 0)
				{
					new rank = Player[i][GroupRank] - 1;

					if(rank < 0)
						rank = 0;

					bonusCheque = LSPDBonus[rank];

					if(Groups[Player[i][Group]][SafeMoney] < bonusCheque)
					{
						SendClientMessage(i, YELLOW, "LSPD Safe empty!");
					}
					else
					{
						format(string, sizeof(string), "You have collected %s from the LSPD Safe.", PrettyMoney(bonusCheque));
						SendClientMessage(i, GREY, string);
						Player[i][BankMoney] += bonusCheque;
						Groups[Player[i][Group]][SafeMoney] -= bonusCheque;
					}

				}
				if(Groups[Player[i][Group]][CommandTypes] == 3 && Player[i][GroupRank] > 0)
				{
					new rank = Player[i][GroupRank] - 1;
					bonusCheque = LSMDBonus[rank];

					if(Groups[Player[i][Group]][SafeMoney] < bonusCheque)
					{
						SendClientMessage(i, YELLOW, "LSMD Safe empty!");
					}
					else
					{
						format(string, sizeof(string), "You have collected %s from the LSMD Safe.", PrettyMoney(bonusCheque));
						SendClientMessage(i, GREY, string);
						Player[i][BankMoney] += bonusCheque;
						Groups[Player[i][Group]][SafeMoney] -= bonusCheque;
					}
				}
				if(Groups[Player[i][Group]][CommandTypes] == 4 && Player[i][GroupRank] > 0)
				{
					new rank = Player[i][GroupRank] - 1;
					bonusCheque = CouncilBonus[rank];
					if(Groups[Player[i][Group]][SafeMoney] < bonusCheque)
					{
						SendClientMessage(i, YELLOW, "City Hall safe empty!");
					}
					else
					{
						format(string, sizeof(string), "You have collected %s from the City Hall Safe.", PrettyMoney(bonusCheque));
						SendClientMessage(i, GREY, string);
						Player[i][BankMoney] += bonusCheque;
						Groups[Player[i][Group]][SafeMoney] -= bonusCheque;
					}
				}
				if(Groups[Player[i][Group]][CommandTypes] == 5 && Player[i][GroupRank] > 0)
				{
					new rank = Player[i][GroupRank] - 1;
					bonusCheque = MediaBonus[rank];
					if(Groups[Player[i][Group]][SafeMoney] < bonusCheque)
					{
						SendClientMessage(i, YELLOW, "LSNN safe empty!");
					}
					else
					{
						format(string, sizeof(string), "You have collected %s from the LSNN Safe.", PrettyMoney(bonusCheque));
						SendClientMessage(i, GREY, string);
						Player[i][BankMoney] += bonusCheque;
						Groups[Player[i][Group]][SafeMoney] -= bonusCheque;
					}
				}
				
				
				SendClientMessage(i, WHITE, "Please visit the bank to withdraw your money.");
				SendClientMessage(i, ANNOUNCEMENT, "----------------------------------------------------------------------------");
			}

			//Loyalty System
			new day, month, year, date;
			getdate(year, month, day), date = getdate();
			Player[i][LoyaltyDailyStreak] ++;
			Player[i][LoyaltyDailyStreakDay] = date;
			if(Player[i][LoyaltyDailyStreak] == MinimumHoursForStreak)
			{
				Player[i][LoyaltyStreak] ++;
				format(string, sizeof(string), "[LOYALTY] You have extended your crea loyalty program streak to %d days!", Player[i][LoyaltyStreak]);
				SendClientMessage(i, COLOR_LOYALTY, string);
				format(string, sizeof(string), "%s has extended their loyalty streak to %d days.", GetName(i), Player[i][LoyaltyStreak]);
				LoyaltyLog(string);
				SetPlayerScore(i, Player[i][LoyaltyStreak]);
				if(Player[i][LoyaltyStreak] >= 3)
					GiveOutLoyaltyReward(i);
					
				if(Player[i][LoyaltyStreak] >= 100 && Player[i][LoyaltyNTag] == 0)
				{
					SendClientMessage(i, COLOR_LOYALTY, "Congratulations on 100+ days of crea loyalty! You have unlocked the exclusive loyalty N-Tag.");
					Player[i][LoyaltyNTag] = 1;
				}
			}
			else if((MinimumHoursForStreak - Player[i][LoyaltyDailyStreak]) > 0)
			{
				Player[i][LastLoyaltyDay] = date;
				Player[i][LastLoyaltyMonth] = month;
				Player[i][LastLoyaltyYear] = year;
				format(string, sizeof(string), "[LOYALTY] You need %d more hours played today to extend your crea loyalty program streak.", (MinimumHoursForStreak - Player[i][LoyaltyDailyStreak]));
				SendClientMessage(i, COLOR_LOYALTY, string);				
			}
				
				
			if(Player[i][LoyaltyVipHoursLeft] > 0)
			{
				Player[i][LoyaltyVipHoursLeft] --;
				
				if(Player[i][LoyaltyVipHoursLeft] <= 0)
				{
					Player[i][LoyaltyVipRank] = 0;
					
					if(Player[i][VipTime] < gettime()) //Make sure it doesnt get rid of VIP by accident.
					{
						Player[i][VipRank] = 0;
						SendClientMessage(i, COLOR_LOYALTY, "[LOYALTY] Your Loyalty VIP subscription has run out!");
					}
				}
			}
				
			if(Player[i][LoyaltyPendingVip] > 0)
			{
				if(Player[i][VipTime] > gettime() && Player[i][VipRank] == 0)
					Player[i][VipTime] = 0;
				
				Player[i][LoyaltyVipRank] = Player[i][LoyaltyPendingVip];
				Player[i][VipRank] = Player[i][LoyaltyPendingVip];
				Player[i][LoyaltyVipHoursLeft] += Player[i][LoyaltyPendingVipHours];
				
				Player[i][LoyaltyPendingVipHours] = 0;
				Player[i][LoyaltyPendingVip] = 0;
					
				format(string, sizeof(string), "[LOYALTY] Your Loyalty VIP subscription is now active for %d hours.", Player[i][LoyaltyVipHoursLeft]);
				SendClientMessage(i, COLOR_LOYALTY, string);
			}
			SavePlayerData(i);
		}
		else
		{
			SendClientMessage(i, WHITE, "You're too poor to obtain a paycheck.");
		}
	}

	if(Player[i][CantFish] < time)
	{
		if(Player[i][FishAgainAntiSpam] >= 1)
		{
			Player[i][FishAttempts] = 0;
			Player[i][FishAgainAntiSpam] = 0;
			SendClientMessage(i, WHITE, "You can now fish again.");
		}
	}

	if(Player[i][GarbageCooldown] < time && Player[i][GarbageCooldown] != 0)
	{
		SendClientMessage(i, WHITE, "You can now do another garbage run.");
		Player[i][GarbageCooldown] = 0;
	}

	if(Player[i][CompleteRun] >= 1)
	{
		Player[i][CompleteRun]++;
		if(Player[i][CompleteRun] >= 55)
		{
			Player[i][CompleteRun] = 0;
		}
	}

	if(Spectator[i][SpecSpectatingPlayer] > -1)
	{
		SpectatorRefresh(i, Spectator[i][SpecSpectatingPlayer]);
	}

	if(Player[i][BeingCalled] != -1)
	{
		new string[128];
		if(Player[Player[i][BeingCalled]][CallConnectingTime] != -1)
		{
			Player[Player[i][BeingCalled]][CallConnectingTime] = 1;
		}
		else
		{
			switch(Player[Player[i][BeingCalled]][CallConnectingTime])
			{
				case 5:
				{
					if(strval(GetPhoneInfo(GetPVarInt(Player[i][BeingCalled], "CallingNumber"), "vibrate")) == 1 && strval(GetPhoneInfo(GetPVarInt(Player[i][BeingCalled], "CallingNumber"), "ringtone")) == 0)
					{
						format(string, sizeof(string), "* %s's phone proceeds to vibrate...", GetNameEx(i));
						NearByMessage(i, NICESKY, string);
					}
					else if(strval(GetPhoneInfo(GetPVarInt(Player[i][BeingCalled], "CallingNumber"), "ringtone")) != 0)
					{
						format(string, sizeof(string), "* %s's phone proceeds to ring...", GetNameEx(i));
						NearByMessage(i, NICESKY, string);
					}
					TextDrawShowForPlayer(i, CellPhoneTextDraw);
					Player[Player[i][BeingCalled]][CallConnectingTime] ++;
				}
				case 10:
				{
					Player[Player[i][BeingCalled]][CallConnectingTime] = -1;
					Player[Player[i][BeingCalled]][Calling] = -1;
					Player[i][BeingCalled] = -1;
					TextDrawHideForPlayer(i, CellPhoneTextDraw);
					PlayerPlayNearbySoundEx(i, 1143, 6, true);
				}
			}
		}
	}

	if(Player[i][InabilityToDropCar] < gettime() && Player[i][InabilityToDropCar] != 0)
	{
		Player[i][InabilityToDropCar] = 0;
		SendClientMessage(i, WHITE, "You can now drop cars again.");
	}

	if(Player[i][Hospitalized] >= 1 && Player[i][AdminDuty] == 0 && Player[i][IsAtEvent] == 0 && Player[i][InRally] == 0 && Player[i][InDerby] == 0)
	{
		Player[i][HospitalTime]++;

		if(Player[i][HospitalTime] >= 11)
		{
			if(Player[i][PrisonID] == 2)
			{
				Player[i][SolitaryDuration] = 300;
				SendClientMessage(i, RED, "You have been severely injured in prison and have been sent to solitary confinement for 5 minutes.");
				Player[i][Hospitalized] = 0;
			    Player[i][HospitalTime] = 0;
			    SetCameraBehindPlayer(i);
			    SetPlayerHealth(i, 100);
			    SetPlayerArmour(i, 0);
			    SetPlayerDrunkLevel(i, 0);
			    SetPlayerInterior(i, 0);
			    TogglePlayerControllable(i, true);
			    UpdatePlayerNameColour(i);
			    FindSolitaryForPlayer(i);				
			}
			else
			{
				Player[i][Hospitalized] = 0;
				Player[i][HospitalTime] = 0;
				SetCameraBehindPlayer(i);
				SetPlayerHealth(i, 100);
				SetPlayerArmour(i, 0);
				SetPlayerDrunkLevel(i, 0);
				SetPlayerVirtualWorld(i, 0);
				SetPlayerInterior(i, 0);
				TogglePlayerControllable(i, true);
				Player[i][Muted] = 0;
				Player[i][ResetTimer] = 1;
				Player[i][InBusiness] = 0;
				Player[i][InHouse] = 0;
				Player[i][InGroupHQ] = 0;
				Player[i][Blindfolded] = 0;
				Player[i][Gagged] = 0;
				Player[i][Tied] = 0;
				Player[i][Cuffed] = 0;
				Player[i][TotalDeaths] ++;
				UpdatePlayerNameColour(i);

				Player[i][Collisions] = 0;
				DisableRemoteVehicleCollisions(i, 0);

				// Halloween
				/*if(GetPVarInt(i, "KILLED_BY_JASON") == 1)
				{
					if(GetPVarFloat(i, "JASON_ARMOUR") > 0)
					{
						SetPlayerArmour(i, GetPVarFloat(i, "JASON_ARMOUR"));
						DeletePVar(i, "JASON_ARMOUR");
					}

					new string[128];
					format(string, sizeof(string), "[HALLOWEEN] %s has won $250 for being killed by jason.", GetName(i));
					StatLog(string);
					SetPlayerPos_Update(i, -2816.7637, -1529.3911, 140.8438);
					SetPlayerCheckpoint(i, -2191.4473, -2272.2432, 30.6250, 5);
					Player[i][Checkpoint] = 1;
					DeletePVar(i, "KILLED_BY_JASON");
					Player[i][KilledByJason] ++;
					defer SetHallowenAnimation(i);

					if(Player[i][KilledByJason] == 0)
					{
						Player[i][Money] += 250;
						SendClientMessage(i, NICESKY, "* You wake up inside a mysterious cabin with a headache.");
						SendClientMessage(i, NICESKY, "There appears to be an extra $250 dollars in your pocket and a map with a nearby location marked in red. (Red checkpoint)");
					}
					else
					{
						SendClientMessage(i, NICESKY, "* You wake up inside a mysterious cabin with a headache.");
						SendClientMessage(i, NICESKY, "There is a map in your pocket with a nearby location marked in red. (Red checkpoint)");
					}
				}*/
				new b = GetClosestBusiness(i, 17);
				SetPlayerPos_Update(i, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ]);

				Player[i][Money] -= 250;

				SendClientMessage(i, ANNOUNCEMENT, "You have been released from Hospital.");
				SendClientMessage(i, WHITE, "You have been charged $250 as your medical bill. Be more careful in the future!");
				SendClientMessage(i, WHITE, "((You have lost 30 minutes memory due to your death to prevent RKing.)) ");

				if(IsHungerEnabledForPlayer(i))
				{
					if(Player[i][HungerLevel] - 25 < 0)
						Player[i][HungerLevel] = 0;
					else
						Player[i][HungerLevel] -= 25;

					ShowPlayerProgressBar(i, Hunger[i]);
					SetPlayerProgressBarValue(i, Hunger[i], Player[i][HungerLevel]);
					UpdatePlayerProgressBar(i, Hunger[i]);
					RefreshHunger(i);
				}
			}
		}
	}

	if(GetPVarInt(i, "TasedBro") < time && Player[i][Tazed] == 1)
	{
		TogglePlayerControllable(i, true);
		//SetPlayerDrunkLevel(i, 0);
		Player[i][Tazed] = 0;
	}

	if(Player[i][PrisonID] >= 1)
	{
		if(Player[i][PrisonDuration] >= 1)
		{
			new string[128];

			if(Player[i][IsTabbed] < 2 && Player[i][PrisonID] == 1)
				Player[i][PrisonDuration]--;
			else if(Player[i][PrisonID] == 2 && Player[i][AdminDuty] < 1)
				Player[i][PrisonDuration]--;

			if(Player[i][PrisonID] == 1)
			{
				format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~ ~R~%d seconds (%d minutes)", Player[i][PrisonDuration], SecondsToMinutes(Player[i][PrisonDuration]));
				GameTextForPlayer(i, string, 2000, 3); //SHOULD STOP FLASHING!??!!?!
			}
			
			if(Player[i][PrisonID] == 1)
			{
				Player[i][PrisonQuestionTimer]++;

				if(Player[i][PrisonQuestionAnswering] == 1)
				{
					Player[i][PrisonQuestionAnswerTime]++;
				}

				if(Player[i][PrisonQuestionAnswerTime] == 30)
				{
					SendClientMessage(i, RED, "You've been kicked for not answering the question in time.");
					Player[i][PrisonQuestionAnswerTime] = 0;
					Player[i][PrisonQuestionAnswering] = 0;
					Player[i][PrisonDuration] += 60;
					KickEx(i);
				}

				if(Player[i][PrisonQuestionTimer] == 180)
				{
					new rand = random(sizeof(AfkQuestions));

					Player[i][PrisonQuestionAnswering] = 1;
					SetPVarInt(i, "qid", rand);
					ShowPlayerDialog(i, PRISON_QUESTION, DIALOG_STYLE_INPUT, "Prison AFK Check", AfkQuestions[rand][0], "Enter", "Cancel");
				}
			}
		}
		else
		{
			if(Player[i][PrisonID] == 1)
			{
				Player[i][PrisonDuration] = 0;
				Player[i][PrisonID] = 0;
				SetPlayerPos_Update(i, SpawnX, SpawnY, SpawnZ);
				SetPlayerVirtualWorld(i, SpawnWorld);
				SetPlayerInterior(i, SpawnInt);
				SendClientMessage(i, WHITE, "You have been released from admin prison.");
				TogglePlayerControllable(i, true);
			}
			else
			{
				if(GetPVarInt(i, "Prison_Message_Sent") != 1 && Player[i][PrisonLifer] == 0)
				{
					Player[i][PrisonDuration] = 0;
					SendClientMessage(i, WHITE, "Your sentence has finished, head to the interaction point and type /leaveprison.");
					SetPVarInt(i, "Prison_Message_Sent", 1);
				} 
			}
		}
		
		if(Player[i][SolitaryDuration] > 0)
				Player[i][SolitaryDuration]--;
				
		if(Player[i][SolitaryDuration] == 0 && Player[i][PrisonID] == 2)
		{
			SendClientMessage(i, WHITE, "You have been released from solitary confinement.");
			Solitary[GetPVarInt(i, "Solitary_Number")][Occupied] = 0;
			DeletePVar(i, "Solitary_Number");
			switch(random(4))
			{
				case 0: SetPlayerPos_Update(i, -450.8701,-499.6483,-68.9141);
				case 1: SetPlayerPos_Update(i, -450.4854,-495.3702,-68.9141);
				case 2: SetPlayerPos_Update(i, -450.5961,-491.4702,-68.9137);
				case 3: SetPlayerPos_Update(i, -450.6216,-487.2357,-68.9137);
			}
			SetPlayerVirtualWorld(i, PRISON_VW);
			Player[i][SolitaryDuration] = -1;
		}
	}
	if(Player[i][CanMakeGun] == 0 && Player[i][GunTime] < time)
	{
		Player[i][CanMakeGun] = 1;
		SendClientMessage(i, WHITE, "You can now create another gun.");
	}
	if(Player[i][CanDeliver] == 0 && Player[i][DeliverTime] < time)
	{
		Player[i][CanDeliver] = 1;
		SendClientMessage(i, WHITE, "You can now sell supplies again.");
	}
	if(Player[i][VipTime] < time && Player[i][VipRenew] != 1 && Player[i][VipRank] > 0 && Player[i][VipRank] < 5 && Player[i][LoyaltyVipRank] == 0)
	{
		Player[i][VipTime] = time + 259260;
		Player[i][VipRenew] = 1;
		SendClientMessage(i, PINK, "Your VIP has expired!");
		SendClientMessage(i, PINK, "You have 72 hours to renew your VIP or you will lose all VIP privileges!!");
	}
	if(Player[i][VipTime] < time && Player[i][VipRenew] == 1 && Player[i][VipRank] > 0 && Player[i][VipRank] < 5)
	{
		SendClientMessage(i, PINK, "Your VIP has expired! To access your perks, please purchase VIP again.");
		Player[i][VipRank] = 0;
		Player[i][VipRenew] = 0;
		Player[i][Job2] = 0;

		if(Player[i][PlayingHours] < 2 )
			format(Player[i][nTag], 32, "%s", OOCRanks[Rank1]);
		else if(Player[i][PlayingHours] < 75)
			format(Player[i][nTag], 32, "%s", OOCRanks[Rank2]);
		else if(Player[i][PlayingHours] < 250)
			format(Player[i][nTag], 32, "%s", OOCRanks[Rank3]);
		else if(Player[i][PlayingHours] < 750)
			format(Player[i][nTag], 32, "%s", OOCRanks[Rank4]);
		else if(Player[i][PlayingHours] < 1250)
			format(Player[i][nTag], 32, "%s", OOCRanks[Rank5]);
		else if(Player[i][PlayingHours] < 2000)
			format(Player[i][nTag], 32, "%s", OOCRanks[Rank6]);
		else
			format(Player[i][nTag], 32, "%s", OOCRanks[Rank7]);

		SavePlayerData(i);
	}
	//Car Rain protection 2
	new vID = GetPlayerVehicleID(i);
	if(vID != 0 && vID != Player[i][LastCarID] && Player[i][InRally] < 1 && Player[i][InDerby] < 1)
	{
		new string[128];
		format(string, sizeof(string), "WARNING: %s (ID: %d) is in a vehicle that does not match their last car's ID. (SQL: %d)", GetName(i), i, GetVSQLID(vID));
		SendToAdmins(ADMINORANGE, string, 0);
		WarningLog(string);
		Player[i][LastCarID] = vID;
		new CO = GetPVarInt(i, "CarOffence");
		if(CO && SavingStatus == 0)
		{
			if(Player[i][AdminLevel] == 0)
			{
				new IP[21];
				GetPlayerIp(i, IP, sizeof(IP));
				format(string, sizeof(string), "%s | %s | Car Teleport Hacking (2).", IP, GetName(i));
				BanLog(string);
				format(string, sizeof(string), "Ban: %s has been auto-banned. Defined reason: \"Car Teleport Hacking (2)\".", GetName(i));
				SendClientMessageToAll(LIGHTRED, string);
				print(string);
				Player[i][Banned] = 1;
				format(Player[i][BannedReason], 128, "Autoban: Car Teleport Hacking (2) [SQLID: %d]", GetVSQLID(vID));
				format(Player[i][BannedBy], 128, "System");
				SavePlayerData(i);
				Kick(i);
				format(string, sizeof(string), "banip %s", IP);
				SendRconCommand(string);
				new query[255];
				mysql_format(MYSQL_MAIN, query, sizeof(query), "INSERT INTO ipbans (IP, Timestamp, Reason) VALUES ('%e', '%e', '%e')", IP, GetDate(), Player[i][BannedReason]);
				new Cache:cache = mysql_query(MYSQL_MAIN, query);
				cache_delete(cache);
			}
		}
		else
			SetPVarInt(i, "CarOffence", 1);
	}
	if(GetPVarInt(i, "VehicleAlarmTime") > time)
	{
		new engine, lights, alarm, doors, boot, bonnet, objective;
		GetVehicleParamsEx(GetPVarInt(i, "VehicleAlarm"), engine, lights, alarm, doors, boot, bonnet, objective);
		SetVehicleParamsEx(GetPVarInt(i, "VehicleAlarm"), engine, !lights, alarm, doors, boot, bonnet, objective);
	}
	if(GetPVarInt(i, "VehicleAlarmTime") <= time)
	{
		new engine, lights, alarm, doors, boot, bonnet, objective;
		GetVehicleParamsEx(GetPVarInt(i, "VehicleAlarm"), engine, lights, alarm, doors, boot, bonnet, objective);
		SetVehicleParamsEx(GetPVarInt(i, "VehicleAlarm"), engine, lights, 0, doors, boot, bonnet, objective);
		DeletePVar(i, "VehicleAlarm");
		DeletePVar(i, "VehicleAlarmTime");
	}

	if(Player[i][HotelRoomID] != -1)
	{
		new id = Player[i][HotelRoomID];
		if(time + HOTEL_WARNING_TIME > Hotels[id][hTimeLeft] && Player[i][HotelRoomWarning] < 1)
		{
			Player[i][HotelRoomWarning] = 1;
			SendClientMessage(i, YELLOW, "You have less than 2 days left on your hotel room! You need to get to the hotel and pay your rent to keep your room!");
		}
		if(time > Hotels[id][hTimeLeft])
		{
			SendClientMessage(i, YELLOW, "You have failed to pay your hotel rent and have been evicted!");
			Player[i][HotelRoomID] = -1;
		}
	}

	if(GetPlayerSpeed(i, 0) == 0 && Player[i][IsInAnimation] == 2)
	{
		Player[i][IsInAnimation] = 0;
		TextDrawHideForPlayer(i, AnimationTextDraw);
	}
	
	if(Player[i][LoanTime] < gettime() && Player[i][Loan] > 0 && Player[i][LoanNotPaid] == 0)
	{
		new string[128];
		SendClientMessage(i, ANNOUNCEMENT, "----------------------------------------------------------------------------");
		SendClientMessage(i, RED, "You have failed to pay back your loan in time.");
		SendClientMessage(i, RED, "The bank will now start seizing your income until it has been paid fully.");
		format(string, sizeof(string), "Remaining amount to be paid: %s", PrettyMoney(Player[i][Loan]));
		SendClientMessage(i, ORANGE, string);
		SendClientMessage(i, ANNOUNCEMENT, "----------------------------------------------------------------------------");
		Player[i][LoanNotPaid] = 1;
		Player[i][CannotLoanTime] = gettime() + 2592000;
	}
	
	if(Player[i][IsTabbed] > 2 && Player[i][Mask] == 1)
		SetPlayerChatBubble(i, "PAUSED", PLAYERACTIONS, 10, 1000);
	
	if(Player[i][BeingDraggedBy] != -1)
 	{
 		if(IsPlayerConnectedEx(Player[i][BeingDraggedBy]))
 		{
 			SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(Player[i][BeingDraggedBy]));
 			SetPlayerInterior(i, GetPlayerInterior(Player[i][BeingDraggedBy]));
 			GetPlayerPos(Player[i][BeingDraggedBy], Player[i][LastX], Player[i][LastY], Player[i][LastZ]);
 			SetPlayerPos_Update(i, Player[i][LastX], Player[i][LastY], Player[i][LastZ]);
 		}
 		else
 		{
 			Player[i][BeingDraggedBy] = -1;
 			SendClientMessage(i, WHITE, "The person who was dragging you has disconnected.");
 		}
 	}
	return 1;
}

ptask SpikerCheckPlayer[200](i)
{
	if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
	{
		for(new s=0;s<MAX_SPIKES;s++)
		{
			if(SpikeStrips[s][sX] == 0.0 && SpikeStrips[s][sY] == 0.0 && SpikeStrips[s][sZ] == 0.0)
				continue;

			if(VehicleToPoint(2.0, GetPlayerVehicleID(i), SpikeStrips[s][sX], SpikeStrips[s][sY], SpikeStrips[s][sZ]))
			{
				new panels, doors, lights, tires;
				GetVehicleDamageStatus(GetPlayerVehicleID(i), panels, doors, lights, tires);
				tires = encode_tires(1, 1, 1, 1);
				UpdateVehicleDamageStatus(GetPlayerVehicleID(i),  panels, doors, lights, tires);
			}
		}
	}
	return 1;
}

stock IsPlayerConnectedEx(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(Player[playerid][Authenticated] == 1)
		{
			return 1;
		}
		else
		{
			return 0;
		}
	}
	else
	{
		return 0;
	}
}

public OnEnterExitModShop(playerid, enterexit, interiorid)
{
	if(enterexit == 0)
	{
		new veh = GetPlayerVehicleID(playerid);
		SetPlayerInterior(playerid, 0);
		Player[playerid][ModShop] = 0;
		SetVehicleHealth(veh, GetPVarFloat(playerid, "ModShop_VehicleHealth"));

		if(GetPVarInt(playerid, "REMOVE_CAR_MODS") == 1)
		{
			if(GetVehicleComponentInSlot(veh, CARMODTYPE_NITRO) != 0)
				RemoveVehicleComponent(veh, GetVehicleComponentInSlot(veh, CARMODTYPE_NITRO));

			if(GetVehicleComponentInSlot(veh, CARMODTYPE_HYDRAULICS) != 0)
				RemoveVehicleComponent(veh, GetVehicleComponentInSlot(veh, CARMODTYPE_HYDRAULICS));
			DeletePVar(playerid, "REMOVE_CAR_MODS");
		}

		if(GetPVarInt(playerid, "InWheelArchAngels") == 1 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			SetVehiclePos(veh, ModShopExitPos[0], ModShopExitPos[1], ModShopExitPos[2]);
			SetVehicleZAngle(veh, ModShopExitPos[3]);
			DeletePVar(playerid, "InWheelArchAngels");
		}
	}
	else if(enterexit == 1)
	{
		if(interiorid == 3)
			SetPVarInt(playerid, "InWheelArchAngels", 1);

		Player[playerid][ModShop] = 1;
		new Float:health;
		GetVehicleHealth(GetPlayerVehicleID(playerid), health);
		SetPVarFloat(playerid, "ModShop_VehicleHealth", health);
	}

	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	if(GetPlayerToggle(forplayerid, TOGGLE_NAME_TAGS) == true || Player[playerid][Mask] == 1 && Player[forplayerid][AdminDuty] < 1)
	{
		ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
		for(new i; i < 10; i++)
		{
			if(Player[playerid][MaskShowTag][i] == forplayerid)
				ShowPlayerNameTagForPlayer(forplayerid, playerid, 1);
		}
	}
	return 1;
}
/*public MyHttpResponse(index, response_code, data[])
{

}*/

stock VehicleToPoint(Float:radi, vehicleid, Float:x, Float:y, Float:z)
{
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetVehiclePos(vehicleid, oldposx, oldposy, oldposz);
	tempposx = (oldposx -x);
	tempposy = (oldposy -y);
	tempposz = (oldposz -z);
	if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
	{
		return 1;
	}
	return 0;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	if(Spectator[forplayerid][SpecSpectatingPlayer] == playerid)
		PlayerSpectatePlayer(forplayerid, playerid);
	return 1;
}

public MinutesToHours(minutes)
{
	return minutes / 60;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	return 1;
}

stock UpdateAnalysis()
{
	if(fexist("VisitorAnalysis.ini"))
	{
		dini_IntSet("VisitorAnalysis.ini", "MaxVisitors", MaxVisitors);
		dini_IntSet("VisitorAnalysis.ini", "MaxRegistered", MaxRegistered);
		dini_IntSet("VisitorAnalysis.ini", "MaxLoggedIn", MaxLoggedIn);
		dini_IntSet("VisitorAnalysis.ini", "TotalConnections", TotalConnections);
		dini_IntSet("VisitorAnalysis.ini", "FriendReferals", FriendReferals);
		dini_IntSet("VisitorAnalysis.ini", "SAMPForumReferals", SAMPForumReferals);
		dini_IntSet("VisitorAnalysis.ini", "YoutubeReferals", YoutubeReferals);
		dini_IntSet("VisitorAnalysis.ini", "GoogleReferals", GoogleReferals);
		dini_IntSet("VisitorAnalysis.ini", "OtherReferals", OtherReferals);
	}
	else
	{
		dini_Create("VisitorAnalysis.ini");
		dini_IntSet("VisitorAnalysis.ini", "MaxVisitors", 0);
		dini_IntSet("VisitorAnalysis.ini", "MaxRegistered", 0);
		dini_IntSet("VisitorAnalysis.ini", "MaxLoggedIn", 0);
		dini_IntSet("VisitorAnalysis.ini", "TotalConnections", 0);
		dini_IntSet("VisitorAnalysis.ini", "SAMPForumReferals", 0);
		dini_IntSet("VisitorAnalysis.ini", "YoutubeReferals", 0);
		dini_IntSet("VisitorAnalysis.ini", "GoogleReferals", 0);
		dini_IntSet("VisitorAnalysis.ini", "OtherReferals", 0);
	}
	return 1;
}

stock StripNewLine(string[])
{
	new len = strlen(string);
	if (string[0]==0)
		return ;
	if ((string[len - 1] == '\n') || (string[len - 1] == '\r'))
	{
		string[len - 1] = 0;
		if (string[0]==0)
			return ;
		if ((string[len - 2] == '\n') || (string[len - 2] == '\r'))
			string[len - 2] = 0;
	}
}

public QuizText(string[])
{
	foreach(Player, i)
	{
		if(GetPlayerToggle(i, TOGGLE_QUIZ) == false)
		{
			SendClientMessage(i, LIGHTRED, string);
		}
	}
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

stock IntToFormattedStr(integer)
{
	new value[20], string[20];

	valstr(value, integer);

	new charcount;

	for(new i = strlen(value); i >= 0; i --)
	{
		format(string, sizeof(string), "%c%s", value[i], string);
		if(charcount == 3)
		{
			if(i != 0)
				format(string, sizeof(string), ",%s", string);
			charcount = 0;
		}
		charcount ++;
	}

	return string;
}

stock PlayerFacePlayer(playerid, targetplayerid)
{
	new Float: Angle;
	GetPlayerFacingAngle(playerid, Angle);
	SetPlayerFacingAngle(targetplayerid, Angle+180);
	return true;
}

command(remotefine, playerid, params[])
{
	new name[128], reason[128], amount, tmpint, string[128];

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(sscanf(params, "s[128]ds[128]", name, amount, reason))
		return SendClientMessage(playerid, GREY, "SYNTAX: /remotefine [player name] [amount] [reason]");

	if(IsPlayerConnectedEx(GetPlayerID(name)))
		return cmd_fine(playerid, params);

	if(!IsPlayerRegistered(name))
		return SendClientMessage(playerid, WHITE, "That player doesn't exist.");

	if(amount < 99999999 && amount > 0)
	{
		mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT Money FROM playeraccounts WHERE NormalName = '%e'", name);
		new Cache:data = mysql_query(MYSQL_MAIN, string);

		if(!cache_get_row_count())
			return SendClientMessage(playerid, WHITE, "An error occured while remote fining that player.");

		tmpint = cache_get_field_content_int(0, "Money");
		cache_delete(data);

		new query[255];
		mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE playeraccounts SET Money = '%d' WHERE NormalName = '%e'", (tmpint - amount), name);
		mysql_tquery(MYSQL_MAIN, query, "OnQueryFinish", "dddss", THREAD_REMOTE_FINE, playerid, amount, name, reason);
	}
	else
		SendClientMessage(playerid, WHITE, "Invalid fine amount.");
	return 1;
}

command(remoteprison, playerid, params[])
{
	new name[128], minutes, reason[128];

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(sscanf(params, "s[128]ds[128]", name, minutes, reason))
		return SendClientMessage(playerid, GREY, "SYNTAX: /remoteprison [player name] [minutes] [reason]");

	if(IsPlayerConnectedEx(GetPlayerID(name)))
		return cmd_prison(playerid, params);

	if(!IsPlayerRegistered(name))
		return SendClientMessage(playerid, WHITE, "That player doesn't exist.");

	if(GetRemoteAdminLevel(name) >= Player[playerid][AdminLevel])
		return SendClientMessage(playerid, -1, "You can't prison a higher level administrator.");

	new query[384];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE playeraccounts SET PrisonDuration = '%d', PrisonID = '%d', PrisonReason = '%e' WHERE NormalName = '%e'", MinutesToSeconds(minutes), (minutes == 0) ? (0) : (1), (minutes == 0) ? ("") : (reason), name);
	mysql_tquery(MYSQL_MAIN, query, "OnQueryFinish", "dddss", THREAD_REMOTE_PRISON, playerid, minutes, name, reason);
	return 1;
}

command(setpin, playerid, params[])
{
	new pin;

	if(Player[playerid][AdminLevel] < 1)
		return 1;

	if(sscanf(params, "d", pin))
		return SendClientMessage(playerid, GREY, "SYNTAX: /setpin [pin]");

	else
		ShowPlayerDialog(playerid, 9844, DIALOG_STYLE_INPUT, "Authentication (Admin PIN)", "Please enter your current admin PIN.", "Done", "Cancel");

	return 1;
}

command(setgender, playerid, params[])
{
	new id, gender[7], string[128];

	if(Player[playerid][AdminLevel] < 3)
		return 1;

	if(sscanf(params, "us[7]", id, gender))
		return SendClientMessage(playerid, GREY, "SYNTAX: /setgender [playerid] [gender (male/female)]");

	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, -1, "That player is not online.");

	else
	{
		if(!strcmp(gender, "male", true))
		{
			format(string, sizeof(string), "%s has set %s gender to %s (was %d).", Player[playerid][AdminName], GetName(id), gender, Player[id][Gender]);
			StatLog(string);
			SavePlayerData(id);
			Player[id][Gender] = 1;
		}

		else if(!strcmp(gender, "female", true))
		{
			format(string, sizeof(string), "%s has set %s gender to %s (was %d).", Player[playerid][AdminName], GetName(id), gender, Player[id][Gender]);
			StatLog(string);
			SavePlayerData(id);
			Player[id][Gender] = 2;
		}
		else
		return SendClientMessage(playerid, -1, "You must pick male or female!");

		format(string, sizeof(string), "You have set %s gender to %s.", GetName(id), gender);
		SendClientMessage(playerid, WHITE, string);
	}

	return 1;
}

command(remotesetgender, playerid, params[])
{
	new name[32], gender[128];

	if(Player[playerid][AdminLevel] < 3)
		return 1;

	if(sscanf(params, "s[32]s[128]", name, gender))
		return SendClientMessage(playerid, GREY, "SYNTAX: /remotesetgender [player name] [gender (1-2)]");

	if(IsPlayerConnectedEx(GetPlayerID(name)))
		return cmd_setgender(playerid, params);

	if(!IsPlayerRegistered(name))
		return SendClientMessage(playerid, WHITE, "That player doesn't exist.");

	new genderint, oldgender = GetRemoteIntValue(name, "Gender"), query[255];
	if(!strcmp(gender, "male", true))
		genderint = 1;
	else if(!strcmp(gender, "female", true))
		genderint = 2;
	else
		return SendClientMessage(playerid, -1, "You must pick male or female!");

	mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE playeraccounts SET Gender = '%d' WHERE NormalName = '%e'", genderint, name);
	mysql_tquery(MYSQL_MAIN, query, "OnQueryFinish", "dddss", THREAD_REMOTE_SET_GENDER, playerid, genderint, name, (oldgender == 1) ? ("Male") : ("Female"));
	return 1;
}

command(remoteset, playerid, params[])
{
	new name[32], usage[128], value, string[255], tmp;

	if(Player[playerid][AdminLevel] < 3)
		return 1;

	if(sscanf(params, "s[32]s[128]d", name, usage, value))
		return SendClientMessage(playerid, GREY, "SYNTAX: /remoteset [player name] [usage] [value]");

	if(IsPlayerConnectedEx(GetPlayerID(name)))
		return cmd_set(playerid, params);

	if(!IsPlayerRegistered(name))
		return SendClientMessage(playerid, WHITE, "That player doesn't exist.");

	new valid_column_array[][] =
	{
		"LastWorld", "LastInterior", "LastHealth", "LastArmour", "LastSkin", "Group", "GroupRank",
		"House", "House2", "Money", "Age", "BankMoney", "Job", "Job2", "streetmats", "standardmats", "militarymats", "Cocaine", "Pot", "Speed",
		"Business", "PlayingHours", "CollectedFish", "Rope", "Rags", "FailedHits", "SuccessfulHits",
		"FightBox", "FightKungfu", "FightGrabkick", "FightKneehead", "FightElbow", "WalkieTalkie", "PlayerSkinSlot1",
		"PlayerSkinSlot2", "PlayerSkinSlot3", "AdminSkin", "Accent", "WalkieFrequency",
		"CheckBalance", "TempbanLevel", "TotalFished", "ArmsDealerXP", "Deliveries", "PizzaDelivers", "Identity", "FishingRod",
		"EngineParts", "NosBottle", "HydroKit", "CarLicense", "TruckLicense", "VipTime", "nMutedLevel", "vMutedLevel", "VipTokens"
	};

	new bool:valid = false;
	for(new i; i < sizeof(valid_column_array); i++)
	{
		if(!strcmp(valid_column_array[i], usage, true))
		{
			valid = true;
			break;
		}
	}

	if(valid == false)
	{
		SendClientMessage(playerid, WHITE, "You have chosen an invalid option. The following options are valid:");
		for(new i; i < sizeof(valid_column_array); i += 5)
		{
			if(i + 4 < sizeof(valid_column_array))
				format(string, sizeof(string), "%s %s %s %s %s", valid_column_array[i], valid_column_array[i + 1], valid_column_array[i + 2], valid_column_array[i + 3], valid_column_array[i + 4]);
			else if(i + 3 < sizeof(valid_column_array))
				format(string, sizeof(string), "%s %s %s %s", valid_column_array[i], valid_column_array[i + 1], valid_column_array[i + 2], valid_column_array[i + 3]);
			else if(i + 2 < sizeof(valid_column_array))
				format(string, sizeof(string), "%s %s %s", valid_column_array[i], valid_column_array[i + 1], valid_column_array[i + 2]);
			else if(i + 1 < sizeof(valid_column_array))
				format(string, sizeof(string), "%s %s", valid_column_array[i], valid_column_array[i + 1]);
			else
				format(string, sizeof(string), "%s", valid_column_array[i]);

			SendClientMessage(playerid, GREY, string);
		}
	}

	if(strfind(usage, "skin", true) != -1)
	{
		if(value > MAX_SKINS || value < 0)
			return SendClientMessage(playerid, WHITE, "Valid skin IDs are between 0 and"#MAX_SKINS".");
	}

	if(!IsValidColumn("playeraccounts", usage))
		return SendClientMessage(playerid, WHITE, "An error occured while looking for that column in the database.");

	new query[384];
	tmp = GetRemoteIntValue(name, usage);
	SetPVarInt(playerid, "THREAD_REMOTE_SET_OLD_VALUE", tmp);

	mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE playeraccounts SET `%e` = '%d' WHERE NormalName = '%e'", usage, value, name);
	mysql_tquery(MYSQL_MAIN, query, "OnQueryFinish", "dddss", THREAD_REMOTE_SET, playerid, value, name, usage);
	return 1;
}

command(agotohouse, playerid, params[])
{
	new houseid, usage[128], string[128], tmpint;

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(sscanf(params, "dS(ext)[128]", houseid, usage))
		return SendClientMessage(playerid, GREY, "SYNTAX: /agotohouse [houseid] ([usage])");

	if(!DoesHouseExist(houseid))
		return SendClientMessage(playerid, -1, "Invalid house ID!");

	else
	{
		if(strlen(usage) > 0 && strcmp(usage, "ext", true))
		{
			if(!strcmp(usage, "interior", true) || !strcmp(usage, "int", true))
			{
				SetPlayerInterior(playerid, Houses[houseid][hInteriorID]);
				SetPlayerPos_Update(playerid, Houses[houseid][hInteriorX], Houses[houseid][hInteriorY], Houses[houseid][hInteriorZ]);
				tmpint = 55000 + houseid;
				SetPlayerVirtualWorld(playerid, tmpint);
				format(string, sizeof(string), "You have been teleported to House %d interior.", houseid);
				SendClientMessage(playerid, WHITE, string);
			}
			else
			return SendClientMessage(playerid, -1, "Invalid usage! Use \"int\" or \"interior\".");
		}

		else
		{
			SetPlayerInterior(playerid, Houses[houseid][hExteriorID]);
			SetPlayerPos_Update(playerid, Houses[houseid][hExteriorX], Houses[houseid][hExteriorY], Houses[houseid][hExteriorZ]);
			SetPlayerVirtualWorld(playerid, Houses[houseid][hExteriorVW]);
			format(string, sizeof(string), "You have been teleported to House %d exterior.", houseid);
			SendClientMessage(playerid, WHITE, string);
		}
	}

	return 1;
}

command(agotobusiness, playerid, params[])
{
	new businessid, usage[128], string[128], tmpint;

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(sscanf(params, "dS(ext)[128]", businessid, usage))
		return SendClientMessage(playerid, GREY, "SYNTAX: /agotobusiness [businessid] ([usage])");

	if(!DoesBusinessExist(businessid))
		return SendClientMessage(playerid, -1, "Invalid business ID!");

	else
	{
		if(strlen(usage) > 0 && strcmp(usage, "ext", true))
		{
			if(!strcmp(usage, "interior", true) || !strcmp(usage, "int", true))
			{
				SetPlayerInterior(playerid, Businesses[businessid][bInteriorID]);
				SetPlayerPos_Update(playerid, Businesses[businessid][bInteriorX], Businesses[businessid][bInteriorY], Businesses[businessid][bInteriorZ]);
				tmpint = 65000 + businessid;
				SetPlayerVirtualWorld(playerid, tmpint);
				format(string, sizeof(string), "You have been teleported to Business %d interior.", businessid);
				SendClientMessage(playerid, WHITE, string);
			}
			else
			return SendClientMessage(playerid, -1, "Invalid usage! Use \"int\" or \"interior\".");
		}

		else
		{
			SetPlayerInterior(playerid, Businesses[businessid][bExteriorID]);
			SetPlayerPos_Update(playerid, Businesses[businessid][bExteriorX], Businesses[businessid][bExteriorY], Businesses[businessid][bExteriorZ]);
			SetPlayerVirtualWorld(playerid, 0);
			format(string, sizeof(string), "You have been teleported to Business %d exterior.", businessid);
			SendClientMessage(playerid, WHITE, string);
		}
	}

	return 1;
}

command(checkhouse, playerid, params[])
{
	new houseid, string[128], lstring[128], rstring[128], bstring[128];

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(sscanf(params, "d", houseid))
		return SendClientMessage(playerid, GREY, "SYNTAX: /checkhouse [houseid]");

	if(!DoesHouseExist(houseid))
		return SendClientMessage(playerid, -1, "Invalid house ID!");

	else
	{
		SendClientMessage(playerid, GREY, "--------------------------------------------------------------------------------------");

		if(Houses[houseid][LockStatus] == 1)
			format(lstring, sizeof(lstring), "Locked");
		else
			format(lstring, sizeof(lstring), "Unlocked");

		format(string, sizeof(string), "House ID: %d | Owner: %s | Price: $%s | Door: %s", houseid, Houses[houseid][hOwner], IntToFormattedStr(Houses[houseid][HousePrice]), lstring);
		SendClientMessage(playerid, WHITE, string);

		if(Houses[houseid][RadioInstalled] == 1)
			format(rstring, sizeof(rstring), "Yes");
		else
			format(rstring, sizeof(rstring), "No");

		if(Houses[houseid][Workbench] == 1)
			format(bstring, sizeof(string), "Yes");
		else
			format(bstring, sizeof(bstring), "No");

		format(string, sizeof(string), "Players with keys: %s | %s | KPP: %d", Houses[houseid][KeyHolder1], Houses[houseid][KeyHolder2], Houses[houseid][Keypad]);
		SendClientMessage(playerid, -1, string);

		/*new contents[255], temp[128], fix;
		strcpy(contents, Houses[houseid][HouseStorage], 500);
		while(!isnull(contents))
		{
			fix++;
			if(fix > 55)
				break;

			for(new i; i < strlen(contents); i++)
			{
				if(contents[i] == '|')
				{
					strmid(temp, contents, 0, i);
					strdel(contents, 0, (i + 1 > strlen(contents)) ? (i) : (i + 1));

					SendClientMessage(playerid, GREY, temp);
					break;
				}

			}
		}*/
		SendClientMessage(playerid, -1, GetStorageString(houseid, CONTAINER_TYPE_HOUSE));
		SendClientMessage(playerid, GREY, "--------------------------------------------------------------------------------------");
	}

	return 1;
}


command(checkbusiness, playerid, params[])
{
	new businessid, string[128], lstring[128], dstring[128], rstring[128];

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(sscanf(params, "d", businessid))
		return SendClientMessage(playerid, GREY, "SYNTAX: /checkbusiness [businessid]");

	format(string, sizeof(string), "Businesses/Business_%d.ini", businessid);

	if(!DoesBusinessExist(businessid))
		return SendClientMessage(playerid, -1, "Invalid business ID!");

	else
	{
		SendClientMessage(playerid, GREY, "--------------------------------------------------------------------------------------");

		if(Businesses[businessid][bLockStatus] == 1)
			format(lstring, sizeof(lstring), "Locked");
		else
			format(lstring, sizeof(lstring), "Unlocked");


		format(string, sizeof(string), "Business: %s (%d) | Type: %d | Owner: %s | Price: $%s | %s", Businesses[businessid][bName], businessid, Businesses[businessid][bType], Businesses[businessid][bOwner], IntToFormattedStr(Businesses[businessid][bPrice]), lstring);
		SendClientMessage(playerid, WHITE, string);

		if(Businesses[businessid][bSupplyStatus] == 0)
			format(dstring, sizeof(dstring), "Open for deliveries");
		else
			format(dstring, sizeof(dstring), "Closed for deliveries");

		if(Businesses[businessid][RadioInstalled] == 1)
			format(rstring, sizeof(rstring), "Yes");
		else
			format(rstring, sizeof(rstring), "No");

		format(string, sizeof(string), "Supplies: %s ($%d, %s) | %s | Garbage: %d (%s) | Radio: %s", IntToFormattedStr(Businesses[businessid][bSupplies]), Businesses[businessid][bSupplyPrice], IntToFormattedStr(Businesses[businessid][bMaxSupplies]), dstring, Businesses[businessid][BusinessTrashAmount], (Businesses[businessid][BusinessTrashStatus] == 1) ? ("Closed") : ("Open"), rstring);
		SendClientMessage(playerid, WHITE, string);

		format(string, sizeof(string), "Street Grade Materials: %s | Standard Grade Materials: %s | Military Grade Materials: %s | ", IntToFormattedStr(Businesses[businessid][bMaterials][0]), IntToFormattedStr(Businesses[businessid][bMaterials][1]), IntToFormattedStr(Businesses[businessid][bMaterials][2]));
		format(string, sizeof(string), "%sCocaine: %s | Pot: %s | Speed: %s | Upgraded: %s", string, IntToFormattedStr(Businesses[businessid][bCocaine]), IntToFormattedStr(Businesses[businessid][bPot]), IntToFormattedStr(Businesses[businessid][bSpeed]), (Businesses[businessid][bLinkedGroup] > 0) ? ("Yes") : ("No"));
		SendClientMessage(playerid, WHITE, string);

		new bWep1 = Businesses[businessid][Weapons][0],
		bWep2 = Businesses[businessid][Weapons][1];

		if(bWep1 != 0 || bWep2 != 0)
		{
			format(string, sizeof(string), "Weapon 1: %s (%d) | Weapon 2: %s (%d)", (bWep1 != 0) ? GetWeaponNameEx(bWep1) : ("None"),
			 bWep1, (bWep2 != 0) ? GetWeaponNameEx(bWep2) : ("None"), bWep2);
			SendClientMessage(playerid, WHITE, string);
		}

		if(Businesses[businessid][bType] == 16)
		{
			format(string, sizeof(string), "Gas Volume: %d", Businesses[businessid][GasVolume]);
			SendClientMessage(playerid, WHITE, string);
		}

		format(string, sizeof(string), "Key Owner 1: %s | Key Owner 2: %s", Businesses[businessid][bKeyOwner1], Businesses[businessid][bKeyOwner2]);
		SendClientMessage(playerid, WHITE, string);

		SendClientMessage(playerid, GREY, "--------------------------------------------------------------------------------------");
	}

	return 1;
}

command(listmyfaction, playerid, params[])
{
	new string [128];

	if(!Player[playerid][Group])
		return SendClientMessage(playerid, -1, "You are not in a faction!");

	else
	{
		SendClientMessage(playerid, GREY, "------------------------------------------------------------");
		format(string, sizeof(string), "Faction: %s -- Members", Groups[Player[playerid][Group]][GroupName]);
		SendClientMessage(playerid, WHITE, string);
		SendClientMessage(playerid, GREY, "------------------------------------------------------------");

		foreach(Player, i)
		{
			if(Player[i][Group] == Player[playerid][Group] && Player[i][AdminDuty] < 1)
			{
				switch(Player[i][GroupRank])
				{
					case 0: format(string, sizeof(string), "Name: %s | Rank: %s (%d)", Player[i][NormalName], Groups[Player[i][Group]][RankName0], Player[i][GroupRank]);
					case 1: format(string, sizeof(string), "Name: %s | Rank: %s (%d)", Player[i][NormalName], Groups[Player[i][Group]][RankName1], Player[i][GroupRank]);
					case 2: format(string, sizeof(string), "Name: %s | Rank: %s (%d)", Player[i][NormalName], Groups[Player[i][Group]][RankName2], Player[i][GroupRank]);
					case 3: format(string, sizeof(string), "Name: %s | Rank: %s (%d)", Player[i][NormalName], Groups[Player[i][Group]][RankName3], Player[i][GroupRank]);
					case 4: format(string, sizeof(string), "Name: %s | Rank: %s (%d)", Player[i][NormalName], Groups[Player[i][Group]][RankName4], Player[i][GroupRank]);
					case 5: format(string, sizeof(string), "Name: %s | Rank: %s (%d)", Player[i][NormalName], Groups[Player[i][Group]][RankName5], Player[i][GroupRank]);
					case 6: format(string, sizeof(string), "Name: %s | Rank: %s (%d)", Player[i][NormalName], Groups[Player[i][Group]][RankName6], Player[i][GroupRank]);
					case 7: format(string, sizeof(string), "Name: %s | Rank: %s (%d)", Player[i][NormalName], Groups[Player[i][Group]][RankName7], Player[i][GroupRank]);
					case 8: format(string, sizeof(string), "Name: %s | Rank: %s (%d)", Player[i][NormalName], Groups[Player[i][Group]][RankName8], Player[i][GroupRank]);
					case 9: format(string, sizeof(string), "Name: %s | Rank: %s (%d)", Player[i][NormalName], Groups[Player[i][Group]][RankName9], Player[i][GroupRank]);
					case 10: format(string, sizeof(string), "Name: %s | Rank: %s (%d)", Player[i][NormalName], Groups[Player[i][Group]][RankName10], Player[i][GroupRank]);
				}
				SendClientMessage(playerid, WHITE, string);
			}
		}

		SendClientMessage(playerid, GREY, "------------------------------------------------------------");
	}

	return 1;
}

command(listskins, playerid, params[])
{
	new string[128];

	if(!Player[playerid][Group])
		return SendClientMessage(playerid, -1, "You are not in a group!");

	else
	{
		SendClientMessage(playerid, GREY, "------------------------------------------------------------");
		format(string, sizeof(string), "Group: %s -- Skins", Groups[Player[playerid][Group]][GroupName]);
		SendClientMessage(playerid, WHITE, string);
		SendClientMessage(playerid, GREY, "------------------------------------------------------------");
		format(string, sizeof(string), "Skin 0: %d", Groups[Player[playerid][Group]][Skin0]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Skin 1: %d", Groups[Player[playerid][Group]][Skin1]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Skin 2: %d", Groups[Player[playerid][Group]][Skin2]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Skin 3: %d", Groups[Player[playerid][Group]][Skin3]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Skin 4: %d", Groups[Player[playerid][Group]][Skin4]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Skin 5: %d", Groups[Player[playerid][Group]][Skin5]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Skin 6: %d", Groups[Player[playerid][Group]][Skin6]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Skin 7: %d", Groups[Player[playerid][Group]][Skin7]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Skin 8: %d", Groups[Player[playerid][Group]][Skin8]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Skin 9: %d", Groups[Player[playerid][Group]][Skin9]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Skin 10: %d", Groups[Player[playerid][Group]][Skin10]);
		SendClientMessage(playerid, WHITE, string);
		SendClientMessage(playerid, GREY, "------------------------------------------------------------");
	}

	return 1;
}

command(listranks, playerid, params[])
{
	new string[128];

	if(!Player[playerid][Group])
		return SendClientMessage(playerid, -1, "You are not in a group!");

	else
	{
		SendClientMessage(playerid, GREY, "------------------------------------------------------------");
		format(string, sizeof(string), "Group: %s -- Ranks", Groups[Player[playerid][Group]][GroupName]);
		SendClientMessage(playerid, WHITE, string);
		SendClientMessage(playerid, GREY, "------------------------------------------------------------");
		format(string, sizeof(string), "Rank 0: %s", Groups[Player[playerid][Group]][RankName0]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Rank 1: %s", Groups[Player[playerid][Group]][RankName1]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Rank 2: %s", Groups[Player[playerid][Group]][RankName2]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Rank 3: %s", Groups[Player[playerid][Group]][RankName3]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Rank 4: %s", Groups[Player[playerid][Group]][RankName4]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Rank 5: %s", Groups[Player[playerid][Group]][RankName5]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Rank 6: %s", Groups[Player[playerid][Group]][RankName6]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Rank 7: %s", Groups[Player[playerid][Group]][RankName7]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Rank 8: %s", Groups[Player[playerid][Group]][RankName8]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Rank 9: %s", Groups[Player[playerid][Group]][RankName9]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Rank 10: %s", Groups[Player[playerid][Group]][RankName10]);
		SendClientMessage(playerid, WHITE, string);
		SendClientMessage(playerid, GREY, "------------------------------------------------------------");
	}

	return 1;
}

command(createfaction, playerid, params[])
{
	new usage[128], string[128];

	if(Player[playerid][AdminLevel] < 5)
		return 1;

	if(sscanf(params, "s[128]", usage))
		return SendClientMessage(playerid, GREY, "SYNTAX: /createfaction [exterior / interior / complete]");

	if(!strcmp(usage, "exterior", true))
	{
		Player[playerid][gexterior]++;
		Player[playerid][gextid] = GetPlayerInterior(playerid);
		GetPlayerPos(playerid, Player[playerid][gextx], Player[playerid][gexty], Player[playerid][gextz]);
		format(string, sizeof(string), "Exterior set! (X: %f, Y: %f, Z: %f).", Player[playerid][gextx], Player[playerid][gexty], Player[playerid][gextz]);
		SendClientMessage(playerid, WHITE, string);
	}

	else if(!strcmp(usage, "interior", true))
	{
		Player[playerid][ginterior]++;
		Player[playerid][gintid] = GetPlayerInterior(playerid);
		GetPlayerPos(playerid, Player[playerid][gintx], Player[playerid][ginty], Player[playerid][gintz]);
		format(string, sizeof(string), "Interior set! (X: %f, Y: %f, Z: %f).", Player[playerid][gintx], Player[playerid][ginty], Player[playerid][gintz]);
		SendClientMessage(playerid, WHITE, string);
	}

	else if(!strcmp(usage, "complete", true))
	{
		if(Player[playerid][gexterior] > 0 || Player[playerid][ginterior] > 0)
		{
			new newgroupid = SpawnedGroups+1;

			if(newgroupid >= MAX_GROUPS)
				return SendClientMessage(playerid, -1, "Too many groups are currently spawned!");

			else
			{
				if(!DoesFactionExist(newgroupid))
				{
					format(Groups[newgroupid][GroupName], 255, "Group Name");
					Groups[newgroupid][HQExteriorID] = Player[playerid][gextid];
					Groups[newgroupid][HQExteriorX] = Player[playerid][gextx];
					Groups[newgroupid][HQExteriorY] = Player[playerid][gexty];
					Groups[newgroupid][HQExteriorZ] = Player[playerid][gextz];
					Groups[newgroupid][HQInteriorID] = Player[playerid][gintid];
					Groups[newgroupid][HQInteriorX] = Player[playerid][gintx];
					Groups[newgroupid][HQInteriorY] = Player[playerid][ginty];
					Groups[newgroupid][HQInteriorZ] = Player[playerid][gintz];
					Groups[newgroupid][HQLock] = 0;
					Groups[newgroupid][HQPickupID] = CreateDynamicPickup(1239, 23, Groups[newgroupid][HQExteriorX], Groups[newgroupid][HQExteriorY], Groups[newgroupid][HQExteriorZ], -1, -1, -1, 150.0);
					Groups[newgroupid][SafePickupID] = CreateDynamicPickup(1239, 23, Groups[newgroupid][SafeX], Groups[newgroupid][SafeY], Groups[newgroupid][SafeZ], Groups[newgroupid][SafeWorld], -1, -1, 150.0);

					Groups[newgroupid][ORM_ID] = orm_create("factions");
					orm_setkey(Groups[newgroupid][ORM_ID], "FactionSQL");
					SetupFactionORM(newgroupid);

					UpdateObjectLabel(newgroupid, LABEL_TYPE_FACTION, .create = 1);
					SaveGroup(newgroupid, 1);

					Player[playerid][gexterior]--;
					Player[playerid][ginterior]--;
					SpawnedGroups++;
					SendClientMessage(playerid, NICESKY, "Successfully created group!");
					SetPlayerInterior(playerid, Groups[newgroupid][HQExteriorID]);
					SetPlayerPos_Update(playerid, Groups[newgroupid][HQExteriorX], Groups[newgroupid][HQExteriorY], Groups[newgroupid][HQExteriorZ]);
				}
				else
					return SendClientMessage(playerid, -1, "File already exists!");
			}
		}
		else
			return SendClientMessage(playerid, -1, "You must select an exterior and an interior first!");
	}
	else
		return SendClientMessage(playerid, -1, "Please select either \"exterior\",\"interior\", or \"complete\".");

	return 1;
}

command(movefaction, playerid, params[])
{
	new groupid, usage[128], string[128], hq;

	if(Player[playerid][AdminLevel] < 5)
		return 1;

	if(sscanf(params, "ds[128]d", groupid, usage, hq))
		return SendClientMessage(playerid, GREY, "SYNTAX: /movefaction [factionid] [exterior / interior] [1/2]");

	if(!DoesFactionExist(groupid))
		return SendClientMessage(playerid, -1, "Invalid group ID!");

	else
	{
		switch(hq)
		{
			case 1:
			{
				if(!strcmp(usage, "exterior", true))
				{
					new type;
					switch(Groups[groupid][CommandTypes])
					{
						case 1: type = 30;
						case 7: type = 25;
						case 8: type = 55;
						default: type = -1;
					}

					DestroyDynamicPickup(Groups[groupid][HQPickupID]);
					Groups[groupid][HQExteriorID] = 0;
					GetPlayerPos(playerid, Groups[groupid][HQExteriorX], Groups[groupid][HQExteriorY], Groups[groupid][HQExteriorZ]);
					format(string, sizeof(string), "You have successfully moved Group %s's 1st exterior.", Groups[groupid][GroupName]);
					SendClientMessage(playerid, WHITE, string);
					Groups[groupid][HQPickupID] = CreateDynamicPickup(1239, 23, Groups[groupid][HQExteriorX], Groups[groupid][HQExteriorY], Groups[groupid][HQExteriorZ], 0, 0, -1, 150.0);

					if(type != -1)
					{
						DestroyDynamicMapIcon(Groups[groupid][mapIcon]);
						Groups[groupid][mapIcon] = CreateDynamicMapIcon(Groups[groupid][HQExteriorX], Groups[groupid][HQExteriorY], Groups[groupid][HQExteriorZ], type, 0, .streamdistance = 150);
					}

					UpdateObjectLabel(groupid, LABEL_TYPE_FACTION, .create = 1);
					SaveGroup(groupid);
				}

				else if(!strcmp(usage, "interior", true))
				{
					Groups[groupid][HQInteriorID] = GetPlayerInterior(playerid);
					GetPlayerPos(playerid, Groups[groupid][HQInteriorX], Groups[groupid][HQInteriorY], Groups[groupid][HQInteriorZ]);
					format(string, sizeof(string), "You have successfully moved Group %s's 1st interior.", Groups[groupid][GroupName]);
					SendClientMessage(playerid, WHITE, string);
					SaveGroup(groupid);
				}
				else
				return SendClientMessage(playerid, -1, "Invalid usage! It must be \"exterior\" or \"interior\".");
			}
			case 2:
			{
				if(!strcmp(usage, "exterior", true))
				{
					new type;
					switch(Groups[groupid][CommandTypes])
					{
						case 1: type = 30;
						case 7: type = 25;
						case 8: type = 55;
						default: type = -1;
					}

					DestroyDynamicPickup(Groups[groupid][HQPickup2]);
					Groups[groupid][HQExteriorID2] = GetPlayerInterior(playerid);
					GetPlayerPos(playerid, Groups[groupid][HQExterior2][0], Groups[groupid][HQExterior2][1], Groups[groupid][HQExterior2][2]);
					Groups[groupid][HQExteriorVW2] = GetPlayerVirtualWorld(playerid);
					format(string, sizeof(string), "You have successfully moved Group %s's 2nd exterior.", Groups[groupid][GroupName]);
					SendClientMessage(playerid, WHITE, string);
					Groups[groupid][HQPickup2] = CreateDynamicPickup(1239, 23, Groups[groupid][HQExterior2][0], Groups[groupid][HQExterior2][1], Groups[groupid][HQExterior2][2], Groups[groupid][HQExteriorVW2], Groups[groupid][HQExteriorID2], -1, 150.0);

					if(type != -1)
					{
						DestroyDynamicMapIcon(Groups[groupid][HQMapIcon2]);
						Groups[groupid][HQMapIcon2] = CreateDynamicMapIcon(Groups[groupid][HQExterior2][0], Groups[groupid][HQExterior2][1], Groups[groupid][HQExterior2][2], type, 0, .streamdistance = 150);
					}
					UpdateObjectLabel(groupid, LABEL_TYPE_FACTION, .create = 1);
					SaveGroup(groupid);
				}
				else if(!strcmp(usage, "interior", true))
				{
					Groups[groupid][HQInteriorID2] = GetPlayerInterior(playerid);
					GetPlayerPos(playerid, Groups[groupid][HQInterior2][0], Groups[groupid][HQInterior2][1], Groups[groupid][HQInterior2][2]);
					format(string, sizeof(string), "You have successfully moved Group %s's 2nd interior.", Groups[groupid][GroupName]);
					SendClientMessage(playerid, WHITE, string);
					SaveGroup(groupid);
				}
			}
			default: return SendClientMessage(playerid, -1, "HQ must be 1 or 2.");
		}
	}

	return 1;
}

command(gotofaction, playerid, params[])
{
	new groupid, usage[128], string[128], tmpint;

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(sscanf(params, "dS(ext)[128]", groupid, usage))
		return SendClientMessage(playerid, GREY, "SYNTAX: /agotogroup [groupid] ([usage])");

	format(string, sizeof(string), "Groups/Group_%d.ini", groupid);

	if(!DoesFactionExist(groupid))
		return SendClientMessage(playerid, -1, "Invalid group ID!");

	else
	{
		if(strlen(usage) > 0 && strcmp(usage, "ext", true))
		{
			if(!strcmp(usage, "interior", true) || !strcmp(usage, "int", true))
			{
				SetPlayerInterior(playerid, Groups[groupid][HQInteriorID]);
				SetPlayerPos_Update(playerid, Groups[groupid][HQInteriorX], Groups[groupid][HQInteriorY], Groups[groupid][HQInteriorZ]);
				tmpint = 45000 + groupid;
				SetPlayerVirtualWorld(playerid, tmpint);
				format(string, sizeof(string), "You have been teleported to Group %d interior.", groupid);
				SendClientMessage(playerid, WHITE, string);
			}

			else
				return SendClientMessage(playerid, -1, "Invalid usage! Use \"int\" or \"interior\".");
		}

		else
		{
			SetPlayerInterior(playerid, Groups[groupid][HQExteriorID]);
			SetPlayerPos_Update(playerid, Groups[groupid][HQExteriorX], Groups[groupid][HQExteriorY], Groups[groupid][HQExteriorZ]);
			SetPlayerVirtualWorld(playerid, 0);
			format(string, sizeof(string), "You have been teleported to Group %d exterior.", groupid);
			SendClientMessage(playerid, WHITE, string);
		}
	}

	return 1;
}

command(checkfaction, playerid, params[])
{
	new groupid, string[128], lstring[128];

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(sscanf(params, "d", groupid))
		return SendClientMessage(playerid, GREY, "SYNTAX: /checkfaction [groupid]");

	format(string, sizeof(string), "Groups/Group_%d.ini", groupid);

	if(!DoesFactionExist(groupid))
		return SendClientMessage(playerid, -1, "Invalid group ID!");

	else
	{
		SendClientMessage(playerid, GREY, "--------------------------------------------------------------------------------------");

		if(Groups[groupid][HQLock] == 1)
			format(lstring, sizeof(lstring), "Locked");
		else
		format(lstring, sizeof(lstring), "Unlocked");

		format(string, sizeof(string), "Group: %s (%d) | CommandType: %d | %s", Groups[groupid][GroupName], groupid, Groups[groupid][CommandTypes], lstring);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Vault: $%s | Pot: %s | Cocaine: %s | Street Grade Materials: %d | Standard Grade Materials: %d | Military Grade Materials: %d | Speed: %d", IntToFormattedStr(Groups[groupid][SafeMoney]), IntToFormattedStr(Groups[groupid][SavedPot]), IntToFormattedStr(Groups[groupid][SavedCrack]), Groups[groupid][SavedMats][0], Groups[groupid][SavedMats][1], Groups[groupid][SavedMats][2], Groups[groupid][SavedSpeed]);
		SendClientMessage(playerid, WHITE, string);
		SendClientMessage(playerid, GREY, "--------------------------------------------------------------------------------------");
	}

	return 1;
}

command(remoteban, playerid, params[])
{
	new playername[128], reason[128];

	if(Player[playerid][AdminLevel] < 3)
		return 1;

	if(sscanf(params, "s[128]s[128]", playername, reason))
		return SendClientMessage(playerid, GREY, "SYNTAX: /remoteban [playername] [reason]");

	if(!IsPlayerRegistered(playername))
		return SendClientMessage(playerid, WHITE, "That player doesn't exist.");

	if(Player[playerid][AdminLevel] <= GetRemoteAdminLevel(playername))
		return SendClientMessage(playerid, -1, "You can't ban a higher level administrator.");

	else
	{
		new query[384];
		mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE playeraccounts SET Banned = '1', BannedReason = '%e', BannedBy = '%e' WHERE NormalName = '%e'", reason, Player[playerid][AdminName], playername);
		mysql_tquery(MYSQL_MAIN, query, "OnQueryFinish", "dddss", THREAD_REMOTE_BAN, playerid, 0, playername, reason);
	}
	return 1;
}

command(remotewarn, playerid, params[])
{
	new name[32], reason[255], string[128];

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(sscanf(params, "s[32]s[255]", name, reason))
		return SendClientMessage(playerid, GREY, "SYNTAX: /remotewarn [player name] [reason]");

	if(IsPlayerConnectedEx(GetPlayerID(name)))
		return cmd_warn(playerid, params);

	if(!IsPlayerRegistered(name))
		return SendClientMessage(playerid, WHITE, "That player doesn't exist.");

	if(strlen(reason) > 50)
		return SendClientMessage(playerid, -1, "Reasons must be under 50 characters.");

	new query[384];
	if(!strcmp(GetRemoteStringValue(name, "Warning1"), "None", true))
	{
		format(string, sizeof(string), "%s (from %s) (%s)", reason, Player[playerid][AdminName], GetDate());

		mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE playeraccounts SET Warning1 = '%e', RemoteWarn = '1' WHERE NormalName = '%e'", string, name);
		mysql_tquery(MYSQL_MAIN, query, "OnQueryFinish", "dddss", THREAD_REMOTE_WARN, playerid, 1, name, reason);
	}

	else if(!strcmp(GetRemoteStringValue(name, "Warning2"), "None", true))
	{
		format(string, sizeof(string), "%s (from %s) (%s)", reason, Player[playerid][AdminName], GetDate());

		mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE playeraccounts SET Warning2 = '%e', RemoteWarn = '1' WHERE NormalName = '%e'", string, name);
		mysql_tquery(MYSQL_MAIN, query, "OnQueryFinish", "dddss", THREAD_REMOTE_WARN, playerid, 2, name, reason);
	}

	else if(!strcmp(GetRemoteStringValue(name, "Warning3"), "None", true))
	{
		format(string, sizeof(string), "%s (from %s) (%s)", reason, Player[playerid][AdminName], GetDate());

		mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE playeraccounts SET Warning3 = '%e', RemoteWarn = '1' WHERE NormalName = '%e'", string, name);
		mysql_tquery(MYSQL_MAIN, query, "OnQueryFinish", "dddss", THREAD_REMOTE_WARN, playerid, 3, name, reason);
	}
	else SendClientMessage(playerid, WHITE, "This player already has three warnings and has already been banned.");
	return 1;
}

command(unbanip, playerid, params[])
{
	new IP[21], string[128];

	if(Player[playerid][AdminLevel] < 4)
		return 1;

	if(sscanf(params, "s[21]", IP))
		return SendClientMessage(playerid, GREY, "SYNTAX: /unbanip [ip]");

	if(strlen(IP) > 5)
	{
		format(string, sizeof(string), "unbanip %s", IP);
		SendRconCommand(string);
		format(string, sizeof(string), "You have successfully unbanned IP %s.", IP);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "WARNING: %s has unbanned IP %s.", Player[playerid][AdminName], IP);
		SendToAdmins(ADMINORANGE, string, 0);
		SendRconCommand("reloadbans");
		SendClientMessage(playerid, WHITE, "IP unbanned and bans list reloaded.");
		format(string, sizeof(string), "%s | IP unbanned | %s", IP, Player[playerid][AdminName]);
		UnbanLog(string);
		format(string, sizeof(string), "Unban: %s has unbanned IP %s.", Player[playerid][AdminName], IP);
		AdminActionsLog(string);
		Player[playerid][AdminActions]++;

		new query[128];
		mysql_format(MYSQL_MAIN, query, sizeof(query), "DELETE FROM ipbans WHERE IP = '%e'", IP);
		mysql_query(MYSQL_MAIN, query, false);
	}

	else
	return SendClientMessage(playerid, -1, "Invalid IP address!");

	return 1;
}

command(unban, playerid, params[])
{
	new playername[128];

	if(Player[playerid][AdminLevel] < 4)
		return 1;

	if(sscanf(params, "s[128]", playername))
		return SendClientMessage(playerid, GREY, "SYNTAX: /unban [playername]");

	if(!IsPlayerRegistered(playername))
		return SendClientMessage(playerid, WHITE, "That player doesn't exist.");

	if(GetRemoteIntValue(playername, "Banned") < 1)
		return SendClientMessage(playerid, -1, "Player is not banned!");

	new query[384];

	if(GetRemoteIntValue(playername, "TempbanLevel") >= 3)
		mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE playeraccounts SET Banned = '-1', BannedReason = 'None', BannedBy = 'None', TempbanTime = '0', TempbanLevel = '0', Warning1 = 'None', Warning2 = 'None', Warning3 = 'None' WHERE NormalName = '%e'", playername);
	else
		mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE playeraccounts SET Banned = '-1', BannedReason = 'None', BannedBy = 'None' WHERE NormalName = '%e'", playername);

	mysql_tquery(MYSQL_MAIN, query, "OnQueryFinish", "dddss", THREAD_UNBAN, playerid, 0, playername, "");
	return 1;
}

command(banip, playerid, params[])
{
	new IP[21], string[128];

	if(Player[playerid][AdminLevel] < 3)
		return 1;
	new reason[128];
	if(sscanf(params, "s[21]s[128]", IP, reason))
		return SendClientMessage(playerid, GREY, "SYNTAX: /banip [ip] [reason]");

	if(strlen(IP) > 5)
	{
		format(string, sizeof(string), "banip %s", IP);
		SendRconCommand(string);
		format(string, sizeof(string), "You have successfully banned IP %s.", IP);
		Player[playerid][AdminActions]++;
		format(string, sizeof(string), "%s | IP banned | %s", IP, Player[playerid][AdminName]);
		BanLog(string);
		format(string, sizeof(string), "Ban: %s has banned IP %s.", Player[playerid][AdminName], IP);
		AdminActionsLog(string);
		format(string, sizeof(string), "WARNING: %s has banned IP %s. Reason: %s", Player[playerid][AdminName], IP, reason);
		SendToAdmins(ADMINORANGE, string, 0);

		new query[255];
		mysql_format(MYSQL_MAIN, query, sizeof(query), "INSERT INTO ipbans (IP, Timestamp, Reason) VALUES ('%e', '%e', '%e')", IP, GetDate(), reason);
		new Cache:cache = mysql_query(MYSQL_MAIN, query);
		new sql = cache_insert_id();
		cache_delete(cache);

		format(string, sizeof(string), "IP Ban #%d has successfully been recorded.", sql);
		SendClientMessage(playerid, GREY, string);
	}

	else
	return SendClientMessage(playerid, -1, "Invalid IP address!");

	return 1;
}

command(reloadbans, playerid, params[])
{
	new string[128];

	if(Player[playerid][AdminLevel] < 4)
		return 1;

	else
	{
		SendRconCommand("reloadbans");
		SendClientMessage(playerid, WHITE, "Bans list reloaded.");
		format(string, sizeof(string), "WARNING: %s has reloaded the bans list.", Player[playerid][AdminName]);
		SendToAdmins(ADMINORANGE, string, 0);
		format(string, sizeof(string), "Bans: %s has reloaded the bans list.", Player[playerid][AdminName]);
		AdminActionsLog(string);
	}

	return 1;
}

CMD:remotecheck(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;
	new name[MAX_PLAYER_NAME];
	if(sscanf(params, "s[24]", name))
		return SendClientMessage(playerid, -1, "SYNTAX: /remotecheck [player name]");
	ShowRemoteStatistics(playerid, name);
	return 1;
}

command(asellhouse, playerid, params[])
{
	new houseid, string[128];

	if(Player[playerid][AdminLevel] < 5)
		return 1;

	if(sscanf(params, "d", houseid))
		return SendClientMessage(playerid, GREY, "SYNTAX: /asellhouse [houseid]");

	if(houseid < 1 || houseid > MAX_HOUSES)
		return SendClientMessage(playerid, -1, "Invalid house ID!");

	if(!DoesHouseExist(houseid))
		return SendClientMessage(playerid, -1, "That house doesn't exist!");

	else
	{
		if(IsPlayerRegistered(Houses[houseid][hOwner]))
		{
			new h = -1;
			if(GetRemoteIntValue(Houses[houseid][hOwner], "House") == houseid)
				h = 1;
			else if(GetRemoteIntValue(Houses[houseid][hOwner], "House2") == houseid)
				h = 2;
			else
			{
				format(string, sizeof(string), "Player %s does not have either House or House2 with this house id(%d)", Houses[houseid][hOwner], houseid);
				SendClientMessage(playerid, WHITE, string);
			}
			if(h != -1)
			{
				new query[255];
				mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE playeraccounts SET House%s = '0' WHERE NormalName = '%e'", (h == 2) ? (IntToFormattedStr(2)) : (""), Houses[houseid][hOwner]);
				mysql_tquery(MYSQL_MAIN, query, "OnQueryFinish", "dddss", THREAD_ASELLHOUSE, playerid, h, Houses[houseid][hOwner], "");
			}
		}
		else
			SendClientMessage(playerid, LIGHTRED, "Unable to set house for owner to 0!");

		format(Houses[houseid][hOwner], 128, "Nobody");
		format(Houses[houseid][KeyHolder1], 24, "Nobody");
		format(Houses[houseid][KeyHolder2], 24, "Nobody");
		format(string, sizeof(string), "You have sold house %d.", houseid);
		SendClientMessage(playerid, WHITE, string);
		Houses[houseid][LockStatus] = 1;
		UpdateObjectLabel(houseid, LABEL_TYPE_HOUSE, .create = 1);
		Houses[houseid][hFakeOwner] = 0;
		SaveHouse(houseid);
		DestroyDynamicPickup(Houses[houseid][HPickupID]);
		Houses[houseid][HPickupID] = CreateDynamicPickup(1273, 23, Houses[houseid][hExteriorX], Houses[houseid][hExteriorY], Houses[houseid][hExteriorZ], Houses[houseid][hExteriorVW], Houses[houseid][hExteriorID], -1, 150.0);
	}

	return 1;
}

command(asellbusiness, playerid, params[])
{
	new businessid, string[128];

	if(Player[playerid][AdminLevel] < 5)
		return 1;

	if(sscanf(params, "d", businessid))
		return SendClientMessage(playerid, GREY, "SYNTAX: /asellbusiness [businessid]");

	if(businessid < 1 || businessid > MAX_BUSINESSES)
		return SendClientMessage(playerid, -1, "Invalid business ID!");

	if(!DoesBusinessExist(businessid))
		return SendClientMessage(playerid, -1, "That business doesn't exist!");

	else
	{
		if(IsPlayerRegistered(Businesses[businessid][bOwner]))
		{
			mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE playeraccounts SET Business = '0' WHERE NormalName = '%e'", Businesses[businessid][bOwner]);
			mysql_tquery(MYSQL_MAIN, string, "OnQueryFinish", "dddss", THREAD_ASELLBUSINESS, playerid, 0, Businesses[businessid][bOwner], "");
		}
		else
			SendClientMessage(playerid, LIGHTRED, "Unable to set business for owner to 0!");

		format(Businesses[businessid][bOwner], 128, "Nobody");
		format(string, sizeof(string), "You have sold business %d.", businessid);
		SendClientMessage(playerid, WHITE, string);
		Businesses[businessid][bLockStatus] = 1;
		SaveBusiness(businessid);
		DestroyDynamicPickup(Businesses[businessid][bPickupID]);
		Businesses[businessid][bPickupID] = CreateDynamicPickup(1239, 23, Businesses[businessid][bExteriorX], Businesses[businessid][bExteriorY], Businesses[businessid][bExteriorZ], 0, -1, -1, 150.0);
	}

	return 1;
}

command(remotewiretransfer, playerid, params[])
{
	new playername[128], amount, string[255];

	if(Player[playerid][GroupRank] < 6)
		return SendClientMessage(playerid, -1, "You do not have sufficient privileges to use this command.");

	if(sscanf(params, "s[128]d", playername, amount))
		return SendClientMessage(playerid, GREY, "SYNTAX: /remotewiretransfer [playername] [amount]");

	if(Groups[Player[playerid][Group]][SafeMoney] < amount)
		return SendClientMessage(playerid, -1, "There isn't that much money in the group safe!");

	if(amount < 1)
		return SendClientMessage(playerid, WHITE, "You can't transfer negative amounts!");

	if(!IsPlayerRegistered(playername))
		return SendClientMessage(playerid, WHITE, "That player doesn't exist.");

	if(IsPlayerConnectedEx(GetPlayerID(playername)))
	{
		if(Player[GetPlayerID(playername)][BankStatus] == 1)
			return SendClientMessage(playerid, WHITE, "That bank account has been suspended by the authorities!");
		format(string, sizeof(string), "WARNING: %s has remotewiretransferred $%s to %s.", GetName(playerid), IntToFormattedStr(amount), playername);
		SendToAdmins(ADMINORANGE, string, 0);
		WarningLog(string);
		format(string, sizeof(string), "You have remotewiretransferred $%s to %s.", IntToFormattedStr(amount), playername);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "[WIRETRANSFER] %s has remotewiretransferred $%s ($%s) to %s ($%s).", GetName(playerid), IntToFormattedStr(amount), IntToFormattedStr(Groups[Player[playerid][Group]][SafeMoney] - amount), playername, IntToFormattedStr(Player[GetPlayerID(playername)][BankMoney] + amount));
		MoneyLog(string);
		format(string, sizeof(string), "%s has remotewiretransferred $%s to you.", GetName(playerid), IntToFormattedStr(amount));
		SendClientMessage(GetPlayerID(playername), WHITE, string);
		Groups[Player[playerid][Group]][SafeMoney] -= amount;
		Player[GetPlayerID(playername)][BankMoney] += amount;
	}
	else
	{
		if(GetRemoteIntValue(playername, "BankStatus") == 1)
			return SendClientMessage(playerid, WHITE, "That bank account has been suspended by the authorities!");

		Groups[Player[playerid][Group]][SafeMoney] -= amount;
		new tmpint = GetRemoteIntValue(playername, "BankMoney");
		mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE playeraccounts SET BankMoney = '%d' WHERE NormalName = '%e'", tmpint + amount, playername);
		mysql_tquery(MYSQL_MAIN, string, "OnQueryFinish", "dddss", THREAD_REMOTE_WIRETRANSFER, playerid, amount, playername, "");
	}

	return 1;
}

command(newbie, playerid, params[])
{
	new message[128], string[255], tmp[24], tag[24];

	if(sscanf(params, "s[128]", message))
		return SendClientMessage(playerid, GREY, "SYNTAX: /n(ewbie) [message]");

	if(Player[playerid][nMuted] == 1)
	{
		SendClientMessage(playerid, -1, "You have been muted from this channel by an admin.");
		format(string, sizeof(string), "You will be unmuted in %d minute(s)", ((Player[playerid][nMutedTime] - gettime()) / 60));
		return SendClientMessage(playerid, -1, string);
	}
	if(Player[playerid][PrisonDuration] > 0 && Player[playerid][PrisonID] == 1)
		return SendClientMessage(playerid, -1, "You can't talk in Newbie Chat while prisoned!");

	if(NewbieEnabled == 0 && Player[playerid][AdminDuty] < 1)
		return SendClientMessage(playerid, -1, "Newbie chat is currently disabled.");

	format(string, sizeof(string), "Please wait %d seconds before submitting another message.", Player[playerid][CanUseNewbie] - gettime());
	if(Player[playerid][CanUseNewbie] > gettime())
		return SendClientMessage(playerid, WHITE, string);

	if(GetPlayerToggle(playerid, TOGGLE_NEWBIE) == true)
		return SendClientMessage(playerid, WHITE, "You currently have newbie chat turned off. Please turn on newbie chat ((/toggles)) to pose a question.");

	/*if(Player[playerid][AdminDuty] == 1)
		format(string, sizeof(string), "{00945D}[N] Admin %s: %s", GetName(playerid), message);

	else
	{
		format(tag, sizeof(tag),Player[playerid][nTag]);
		if(strcmp(tag, "Scripter") && strcmp(tag, "Tester") && strcmp(tag, "VIP") && strcmp(tag, "Admin") && strcmp(tag, "Moderator"))
			format(string, sizeof(string), "[N] %s {00EEAD}%s{BAFFE0}: %s", GetOOCRank(playerid), GetName(playerid), message);
		else
			format(string, sizeof(string), "[N] %s {00EEAD}%s{BAFFE0}: %s", Player[playerid][nTag], GetName(playerid), message);
	}*/

	format(tmp, sizeof(tmp),Player[playerid][nTag]);
	if(strcmp(tmp, "Developer") && strcmp(tmp, "Tester") && strcmp(tmp, "VIP") && strcmp(tmp, "Admin") && strcmp(tmp, "Moderator") && strcmp(tmp, "The Loyal"))
		format(tag, sizeof(tag), GetOOCRank(playerid));
	else
		format(tag, sizeof(tag), tmp);

	foreach(Player, i)
	{
		if(GetPlayerToggle(i, TOGGLE_NEWBIE) == false)
		{
			if(Player[playerid][AdminLevel] > 0)
			{
				//[N] MTG-Legend 012345678901234567890123: 87 characters remaining
				new splitpos = 100 - (15+strlen(tag)+strlen(GetName(playerid)));
				if(strlen(message) > splitpos)
				{
					new str1[87], str2[87];
					strsplit(message, str1, str2, splitpos);
					// strmid(str1, message, 0, 86);
					// strmid(str2, message, 86, 172);

					if(Player[playerid][AdminDuty] == 1)
					{
						format(string, sizeof(string), "{00945D}[N] Admin %s: %s", Player[playerid][AdminName], str1);
						SendClientMessage(i, NEWBIE_CHAT, string);
						format(string, sizeof(string), "{00945D}[N] Admin %s: %s", Player[playerid][AdminName], str2);
						SendClientMessage(i, NEWBIE_CHAT, string);
					}
					else
					{
						format(string, sizeof(string), "[N] %s {00EEAD}%s{BAFFE0}: %s", tag, Player[playerid][NormalName], str1);
						SendClientMessage(i, NEWBIE_CHAT, string);
						format(string, sizeof(string), "[N] %s {00EEAD}%s{BAFFE0}: %s", tag, Player[playerid][NormalName], str2);
						SendClientMessage(i, NEWBIE_CHAT, string);
					}
				}
				else
				{
					if(Player[playerid][AdminDuty] == 1)
						format(string, sizeof(string), "{00945D}[N] Admin %s: %s", Player[playerid][AdminName], message);
					else
						format(string, sizeof(string), "[N] %s {00EEAD}%s{BAFFE0}: %s", tag, Player[playerid][NormalName], message);
					SendClientMessage(i, NEWBIE_CHAT, string);
				}
			}
			else
			{
				format(string, sizeof(string), "[N] %s {00EEAD}%s{BAFFE0}: %s", tag, Player[playerid][NormalName], message);
				if(strlen(string) > 128)
					return SendClientMessage(playerid, -1, "That message is too long, shorten it.");

				SendClientMessage(i, NEWBIE_CHAT, string);
			}
		}
	}

	if(Player[playerid][Developer] < 1 && Player[playerid][AdminLevel] < 1)
	{
		Player[playerid][CanUseNewbie] = gettime() + 30;
		//SetTimerEx("RefreshNewbieChatForPlayer", 30000, false, "d", playerid);
	}

	format(string, sizeof(string), "[N] %s %s: %s", tag, GetName(playerid), message);
	OOCChatLog(string);

	return 1;
}

//NEW ooc
command(ooc, playerid, params[])
{
	new message[128], string[255], tmp[24], tag[24];

	if(sscanf(params, "s[128]", message))
		return SendClientMessage(playerid, GREY, "SYNTAX: /o(oc) [message]");

	if(Player[playerid][nMuted] == 1)
	{
		SendClientMessage(playerid, -1, "You have been muted from /newbie by an admin, and thus, /ooc as well.");
		format(string, sizeof(string), "You will be unmuted in %d minute(s)", ((Player[playerid][nMutedTime] - gettime()) / 60));
		return SendClientMessage(playerid, -1, string);
	}

	//if(NewbieEnabled == 0 && Player[playerid][AdminDuty] < 1)
		//return SendClientMessage(playerid, -1, "Newbie chat is currently disabled.");


	//FIX THIS
	if(GetPlayerToggle(playerid, TOGGLE_NEWBIE) == true)
		return SendClientMessage(playerid, WHITE, "You currently have OOC chat turned off. Please turn on OOC chat ((/toggles)) to speak here.");

	/*if(Player[playerid][AdminDuty] == 1)
		format(string, sizeof(string), "{00945D}[N] Admin %s: %s", GetName(playerid), message);

	else
	{
		format(tag, sizeof(tag),Player[playerid][nTag]);
		if(strcmp(tag, "Scripter") && strcmp(tag, "Tester") && strcmp(tag, "VIP") && strcmp(tag, "Admin") && strcmp(tag, "Moderator"))
			format(string, sizeof(string), "[N] %s {00EEAD}%s{BAFFE0}: %s", GetOOCRank(playerid), GetName(playerid), message);
		else
			format(string, sizeof(string), "[N] %s {00EEAD}%s{BAFFE0}: %s", Player[playerid][nTag], GetName(playerid), message);
	}*/

	format(tmp, sizeof(tmp),Player[playerid][nTag]);
	if(strcmp(tmp, "Developer") && strcmp(tmp, "Tester") && strcmp(tmp, "VIP") && strcmp(tmp, "Admin") && strcmp(tmp, "Moderator") && strcmp(tmp, "The Loyal"))
		format(tag, sizeof(tag), GetOOCRank(playerid));
	else
		format(tag, sizeof(tag), tmp);

	foreach(Player, i)
	{
		if(GetPlayerToggle(i, TOGGLE_NEWBIE) == false)
		{
			if(Player[playerid][AdminLevel] > 0)
			{
				//[N] MTG-Legend 012345678901234567890123: 87 characters remaining
				new splitpos = 100 - (15+strlen(tag)+strlen(GetName(playerid)));
				if(strlen(message) > splitpos)
				{
					new str1[87], str2[87];
					strsplit(message, str1, str2, splitpos);
					// strmid(str1, message, 0, 86);
					// strmid(str2, message, 86, 172);

					if(Player[playerid][AdminDuty] == 1)
					{
						format(string, sizeof(string), "{cecece}[O] Admin %s: %s", Player[playerid][AdminName], str1);
						SendClientMessage(i, WHITE, string);
						format(string, sizeof(string), "{cecece}[O] Admin %s: %s", Player[playerid][AdminName], str2);
						SendClientMessage(i, WHITE, string);
					}
					else
					{
						format(string, sizeof(string), "[O] %s {cadbed}%s{ffffff}: %s", tag, Player[playerid][NormalName], str1);
						SendClientMessage(i, WHITE, string);
						format(string, sizeof(string), "[O] %s {cadbed}%s{ffffff}: %s", tag, Player[playerid][NormalName], str2);
						SendClientMessage(i, WHITE, string);
					}
				}
				else
				{
					if(Player[playerid][AdminDuty] == 1)
						format(string, sizeof(string), "{cecece}[O] Admin %s: %s", Player[playerid][AdminName], message);
					else
						format(string, sizeof(string), "[O] %s {cadbed}%s{ffffff}: %s", tag, Player[playerid][NormalName], message);
					SendClientMessage(i, WHITE, string);
				}
			}
			else
			{
				format(string, sizeof(string), "[O] %s {cadbed}%s{ffffff}: %s", tag, Player[playerid][NormalName], message);
				if(strlen(string) > 128)
					return SendClientMessage(playerid, -1, "That message is too long, shorten it.");

				SendClientMessage(i, WHITE, string);
			}
		}
	}

	format(string, sizeof(string), "[O] %s %s: %s", tag, GetName(playerid), message);
	OOCChatLog(string);

	return 1;
}

stock GetOOCRank(playerid)
{
	new rstring[32];
	if(Player[playerid][PlayingHours] < 2 )
		format(rstring, sizeof(rstring), "%s", OOCRanks[Rank1]);
	else if(Player[playerid][PlayingHours] < 75)
		format(rstring, sizeof(rstring), "%s", OOCRanks[Rank2]);
	else if(Player[playerid][PlayingHours] < 250)
		format(rstring, sizeof(rstring), "%s", OOCRanks[Rank3]);
	else if(Player[playerid][PlayingHours] < 750)
		format(rstring, sizeof(rstring), "%s", OOCRanks[Rank4]);
	else if(Player[playerid][PlayingHours] < 1250)
		format(rstring, sizeof(rstring), "%s", OOCRanks[Rank5]);
	else if(Player[playerid][PlayingHours] < 2000)
		format(rstring, sizeof(rstring), "%s", OOCRanks[Rank6]);
	else
		format(rstring, sizeof(rstring), "%s", OOCRanks[Rank7]);
	return rstring;
}

command(viphns, playerid, params[])
{
	if(Player[playerid][AdminLevel] > 6)
	{
		if(isnull(params))
			return SendClientMessage(playerid, -1, "SYNTAX: /viphns [vip level]");
		new level = strval(params);

		if(level < 1 || level > 4)
			return SendClientMessage(playerid, -1, "The level must be between 1 and 4!");

		new type[24], time = 1;
		switch(level)
		{
			case 1: format(type, sizeof(type), "Bronze");
			case 2: format(type, sizeof(type), "Silver");
			case 3: format(type, sizeof(type), "Gold");
			case 4: {format(type, sizeof(type), "Gold+"), time = 3;}
		}

		if(VipHnS == 0)
		{
			new string[128];
			VipHnS = 1;
			VipLevel = level;
			GetPlayerPos(playerid, VipHnSX, VipHnSY, VipHnSZ);
			VipHnSWorld = GetPlayerVirtualWorld(playerid);
			VipHnSInterior = GetPlayerInterior(playerid);
			format(string, sizeof(string), "EVENT: A %d Month VIP %s Subscription has gone missing! Be the first to find it and it is yours to keep!", time, type);
			SendClientMessageToAll(LIGHTRED, string);
			format(string, sizeof(string), "%s has started a VIP Hide and Seek event.", GetName(playerid));
			VIPHnSLabel = CreateDynamic3DTextLabel("YOU FOUND ME!\n{FFFFFF}Use /foundit to redeem.", YELLOW, 10, VipHnSX, VipHnSY, VipHnSZ, .worldid = VipHnSWorld, .interiorid = VipHnSInterior, .testlos = 1);
			AdminActionsLog(string);
		}
		else
		{
			new string[128];
			VipHnS = 0;
			DestroyDynamic3DTextLabel(VIPHnSLabel);
			VipHnSX = -1;
			VipHnSY = -1;
			VipHnSZ = -1;
			VipHnSWorld = -1;
			VipHnSInterior = -1;
			format(string, sizeof(string), "EVENT: OLLY OLLY OXEN FREE! You were taking too long and the subscription got bored, so it decided to return home.");
			SendClientMessageToAll(LIGHTRED, string);
			format(string, sizeof(string), "%s has ended a VIP Hide and Seek event.", GetName(playerid));
			AdminActionsLog(string);
		}
	}
	return 1;
}

command(foundit, playerid, params[])
{
	new string[128];
	if(VipHnS == 1)
	{
		if(Player[playerid][VipRank] > 1)
			SendClientMessage(playerid, WHITE, "You already own VIP Silver+! This event is not for you.");
		else if(IsPlayerInRangeOfPoint(playerid, 5, VipHnSX, VipHnSY, VipHnSZ) && GetPlayerVirtualWorld(playerid) == VipHnSWorld && GetPlayerInterior(playerid) == VipHnSInterior)
		{
			VipHnS = 0;
			DestroyDynamic3DTextLabel(VIPHnSLabel);
			VipHnSX = -1;
			VipHnSY = -1;
			VipHnSZ = -1;
			VipHnSWorld = -1;
			VipHnSInterior = -1;
			Player[playerid][VipRank] = VipLevel;
			if(VipLevel < 4)
				Player[playerid][VipTime] = gettime() + 2592000;
			else Player[playerid][VipTime] = gettime() + 7776000;
			format(string, sizeof(string), "[EVENT] %s has found the missing VIP subscription! Congratulations on winning the event!", GetName(playerid));
			SendClientMessageToAll(LIGHTRED, string);
			StatLog(string);
		}
	}
	return 1;
}


// Fuel Related

CMD:indicators(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			return SendClientMessage(playerid, -1, "You must be the driver of a vehicle to use this command");

	if(Player[playerid][Tied] == 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] == 1 || Player[playerid][AdminFrozen] == 1)
	    return SendClientMessage(playerid, -1, "You can't do this as you're cuffed, tazed or tied!");

	new veh = GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, panels, tires, objective, string[128], sql = GetVSQLID(veh), idx = GetVIndex(sql);
	GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);

	if(sql == 0)
		return 1;

	if(idx == -1)
		return 1;

	if(isnull(params))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /indicators [option]");
		SendClientMessage(playerid, GREY, "Options: off, left, right, emergency");
		return 1;
	}

	if(!strcmp(params, "off", true))
	{
		if(Veh[idx][IndicatorType] == INDICATOR_TYPE_OFF)
			return SendClientMessage(playerid, WHITE, "This vehicle does not have it's indicator lights turned on.");

		stop Veh[idx][IndicatorTimer];
		Veh[idx][IndicatorType] = INDICATOR_TYPE_OFF;
		GetVehicleDamageStatus(veh, panels, doors, lights, tires);
		UpdateVehicleDamageStatus(veh, panels, doors, encode_lights(0, 0, 0, 0), tires);
		format(string, sizeof(string), "* %s turns off the vehicle's indicator lights.", GetNameEx(playerid));
		SetPlayerChatBubble(playerid, string, PLAYERACTIONS, 15, 4000);
	}
	else if(!strcmp(params, "left", true))
	{
		if(lights == 0)
			SetVehicleParamsEx(veh, engine, 1, alarm, doors, bonnet, boot, objective);

		GetVehicleDamageStatus(veh, panels, doors, lights, tires);
		UpdateVehicleDamageStatus(veh, panels, doors, encode_lights(0, 0, 0, 0), tires);

		stop Veh[idx][IndicatorTimer];
		UpdateVehicleDamageStatus(veh, panels, doors, encode_lights(1, 1, 0, 0), tires);
		Veh[idx][IndicatorStep] = 1;
		Veh[idx][IndicatorType] = INDICATOR_TYPE_LEFT;
		Veh[idx][IndicatorTimer] = repeat Veh_IndicatorLights(veh);
		format(string, sizeof(string), "* %s turns on the vehicle's left indicator light.", GetNameEx(playerid));
		SetPlayerChatBubble(playerid, string, PLAYERACTIONS, 15, 4000);
	}
	else if(!strcmp(params, "right", true))
	{
		if(lights == 0)
			SetVehicleParamsEx(veh, engine, 1, alarm, doors, bonnet, boot, objective);

		GetVehicleDamageStatus(veh, panels, doors, lights, tires);
		UpdateVehicleDamageStatus(veh, panels, doors, encode_lights(0, 0, 0, 0), tires);

		stop Veh[idx][IndicatorTimer];
		UpdateVehicleDamageStatus(veh, panels, doors, encode_lights(0, 0, 1, 1), tires);
		Veh[idx][IndicatorStep] = 1;
		Veh[idx][IndicatorType] = INDICATOR_TYPE_RIGHT;
		Veh[idx][IndicatorTimer] = repeat Veh_IndicatorLights(veh);
		format(string, sizeof(string), "* %s turns on the vehicle's right indicator light.", GetNameEx(playerid));
		SetPlayerChatBubble(playerid, string, PLAYERACTIONS, 15, 4000);

	}
	else if(!strcmp(params, "emergency", true))
	{
		if(lights == 0)
			SetVehicleParamsEx(veh, engine, 1, alarm, doors, bonnet, boot, objective);

		GetVehicleDamageStatus(veh, panels, doors, lights, tires);
		UpdateVehicleDamageStatus(veh, panels, doors, encode_lights(0, 0, 0, 0), tires);

		stop Veh[idx][IndicatorTimer];
		UpdateVehicleDamageStatus(veh, panels, doors, encode_lights(1, 0, 1, 0), tires);
		Veh[idx][IndicatorStep] = 1;
		Veh[idx][IndicatorType] = INDICATOR_TYPE_EMERG;
		Veh[idx][IndicatorTimer] = repeat Veh_IndicatorLights[500](veh);
		format(string, sizeof(string), "* %s turns on the vehicle's emergency indicator lights.", GetNameEx(playerid));
		SetPlayerChatBubble(playerid, string, PLAYERACTIONS, 15, 4000);
	}
	else
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /indicators [option]");
		SendClientMessage(playerid, GREY, "Options: off, left, right, emergency");
		return 1;
	}

	return 1;
}

timer Veh_IndicatorLights[750](veh)
{
	new idx = GetVIndex(GetVSQLID(veh)), panels, doors, lights, tires;
	GetVehicleDamageStatus(veh, panels, doors, lights, tires);

	if(idx == -1)
	{
		return 1;
	}

	switch(Veh[idx][IndicatorType])
	{
		case INDICATOR_TYPE_LEFT:
		{
			if(Veh[idx][IndicatorStep] == 0)
			{
				UpdateVehicleDamageStatus(veh, panels, doors, encode_lights(1, 1, 0, 0), tires);
				Veh[idx][IndicatorStep] = 1;
			}
			else
			{
				UpdateVehicleDamageStatus(veh, panels, doors, encode_lights(0, 0, 0, 0), tires);
				Veh[idx][IndicatorStep] = 0;
			}
		}
		case INDICATOR_TYPE_RIGHT:
		{
			if(Veh[idx][IndicatorStep] == 0)
			{
				UpdateVehicleDamageStatus(veh, panels, doors, encode_lights(0, 0, 1, 1), tires);
				Veh[idx][IndicatorStep] = 1;
			}
			else
			{
				UpdateVehicleDamageStatus(veh, panels, doors, encode_lights(0, 0, 0, 0), tires);
				Veh[idx][IndicatorStep] = 0;
			}
		}
		case INDICATOR_TYPE_EMERG:
		{
			if(Veh[idx][IndicatorStep] == 0)
			{
				UpdateVehicleDamageStatus(veh, panels, doors, encode_lights(1, 0, 1, 0), tires);
				Veh[idx][IndicatorStep] = 1;
			}
			else
			{
				UpdateVehicleDamageStatus(veh, panels, doors, encode_lights(0, 0, 0, 0), tires);
				Veh[idx][IndicatorStep] = 0;
			}
		}
		case INDICATOR_TYPE_SIRENS:
		{
			if(Veh[idx][IndicatorStep] == 0)
			{
				UpdateVehicleDamageStatus(veh, panels, doors, encode_lights(1, 0, 0, 0), tires);
				Veh[idx][IndicatorStep] = 1;
			}
			else
			{
				UpdateVehicleDamageStatus(veh, panels, doors, encode_lights(0, 0, 1, 0), tires);
				Veh[idx][IndicatorStep] = 0;
			}
		}
		default: stop Veh[idx][IndicatorTimer];
	}
	return 1;
}

encode_lights(light1, light2, light3, light4)
{
    return light1 | (light2 << 1) | (light3 << 2) | (light4 << 3);
}

CMD:carwindow(playerid, params[])
{
	new veh = GetPlayerVehicleID(playerid);
	
	if(isnull(params))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /carwindow [window]");
		SendClientMessage(playerid, GREY, "Options: fl, fr, rl, rr");
		return 1;
	}
	
	new sql = GetVSQLID(veh), idx = GetVIndex(sql);
	
	if(IsABike(Veh[idx][Link]))
		return SendClientMessage(playerid, WHITE, "This vehicle does not have windows.");
		
	new frontLeft, frontRight, rearLeft, rearRight, string[128];
	GetVehicleParamsCarWindows(veh, frontLeft, frontRight, rearLeft, rearRight);
	if(!strcmp(params, "fl", true))
	{
		if(GetPlayerVehicleSeat(playerid) != 0)
			return SendClientMessage(playerid, WHITE, "You can't reach that window's controls!");
		
		if(frontLeft == 0) 
		{
			format(string, sizeof(string), "* %s closes the front left window of the vehicle.", GetNameEx(playerid));
			frontLeft = 1;
		}
		else 
		{
			format(string, sizeof(string), "* %s opens the front left window of the vehicle.", GetNameEx(playerid));
			frontLeft = 0;
		}
	
		SetVehicleParamsCarWindows(veh, frontLeft, frontRight, rearLeft, rearRight);
	}
	else if(!strcmp(params, "fr", true))
	{
		if(GetPlayerVehicleSeat(playerid) != 0 && GetPlayerVehicleSeat(playerid) != 1)
			return SendClientMessage(playerid, WHITE, "You can't reach that window's controls!");
		
		if(frontRight == 0) 
		{
			format(string, sizeof(string), "* %s closes the front right window of the vehicle.", GetNameEx(playerid));
			frontRight = 1;
		}
		else 
		{
			format(string, sizeof(string), "* %s opens the front right window of the vehicle.", GetNameEx(playerid));
			frontRight = 0;
		}
	
		SetVehicleParamsCarWindows(veh, frontLeft, frontRight, rearLeft, rearRight);
	}
	else if(!strcmp(params, "rl", true))
	{
		if(GetPlayerVehicleSeat(playerid) != 0 && GetPlayerVehicleSeat(playerid) != 2)
			return SendClientMessage(playerid, WHITE, "You can't reach that window's controls!");
		
		if(rearLeft == 0) 
		{
			format(string, sizeof(string), "* %s closes the rear left window of the vehicle.", GetNameEx(playerid));
			rearLeft = 1;
		}
		else 
		{
			format(string, sizeof(string), "* %s opens the rear left window of the vehicle.", GetNameEx(playerid));
			rearLeft = 0;
		}
	
		SetVehicleParamsCarWindows(veh, frontLeft, frontRight, rearLeft, rearRight);
	}
	else if(!strcmp(params, "rr", true))
	{
		if(GetPlayerVehicleSeat(playerid) != 0 && GetPlayerVehicleSeat(playerid) != 3)
			return SendClientMessage(playerid, WHITE, "You can't reach that window's controls!");
		
		if(rearRight == 0) 
		{
			format(string, sizeof(string), "* %s closes the rear left window of the vehicle.", GetNameEx(playerid));
			rearRight = 1;
		}
		else 
		{
			format(string, sizeof(string), "* %s opens the rear left window of the vehicle.", GetNameEx(playerid));
			rearRight = 0;
		}
	
		SetVehicleParamsCarWindows(veh, frontLeft, frontRight, rearLeft, rearRight);
	}
	else
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /carwindow [window]");
		SendClientMessage(playerid, GREY, "Options: fl, fr, rl, rr");
		return 1;
	}
	return 1;
}

CMD:car(playerid, params[])
{
	new veh = GetPlayerVehicleID(playerid), Float:Pos[3],
	engine, lights, alarm, doors, bonnet, boot, objective, string[128], sql = GetVSQLID(veh), idx = GetVIndex(sql);
	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);

	if(isnull(params))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /car [option]");
		SendClientMessage(playerid, GREY, "Options: Engine, Lights, Trunk/Boot, Hood");
		return 1;
	}

	if(Player[playerid][Tied] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] == 1 || Player[playerid][AdminFrozen] == 1)
	    return SendClientMessage(playerid, -1, "You can't do this as you're cuffed, tazed or tied!");

	if(IsPlayerInAnyVehicle(playerid))
	{
		if(IsABike(Veh[idx][Link]))
			return SendClientMessage(playerid, -1, "You can't do that on a bike!");
	}

	// Engine
	if(!strcmp(params, "Engine", true))
	{
		if(sql == 0)
			return 1;

		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			return SendClientMessage(playerid, -1, "You must be the driver of a vehicle to use this command");

		if(bonnet == 1)
			return SendClientMessage(playerid, -1, "Your hood is currently open, please close it before starting the engine.");

		if(Veh[idx][Hood] == 1)
			return SendClientMessage(playerid, -1, "Your vehicle hood is currently not locked in place, please open then shut the hood.");

		if(Veh[idx][Fuel] < 1 && Player[playerid][AdminDuty] == 0)
			return SendClientMessage(playerid, -1, "The vehicle has no fuel!");

		if(Veh[idx][damageState] == 1 && Player[playerid][AdminDuty] == 0)
			return SendClientMessage(playerid, -1, "The vehicle requires a fix before it can be started");

		if(Groups[Veh[idx][Group]][CommandTypes] != 8 || (!Player[playerid][DoingDMVTest] && !Player[playerid][DoingTruckerTest]))
		{
			if(!HasVehicleAccess(playerid, sql) && HasVJobKey(playerid, idx) == 0)
				return SendClientMessage(playerid, -1, "You don't have the keys to this vehicle");
		}

		if(_:Player[playerid][TruckLoadTimer] > -1 && Jobs[Veh[idx][Job]][JobType] == JOB_TRUCKER)
			return SendClientMessage(playerid, -1, "You must wait 20 seconds before you can start the engine. (You are loading your truck!)");

		if(_:Player[playerid][TruckUnloadTimer] > -1  && Jobs[Veh[idx][Job]][JobType] == JOB_TRUCKER)
			return SendClientMessage(playerid, -1, "You must wait 20 seconds before you can start the engine. (You are unloading your truck!)");

		if(engine == 0 || engine == -1)
		{
			format(string, sizeof(string), "* %s puts their key in the vehicle and turns it", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
			SetPVarInt(playerid, "StartTimer", gettime() + 2);
			//printf("StartTimer set as %d", GetPVarInt(playerid, "StartTimer"));
			SetPVarInt(playerid, "StartVehID", veh);
			//printf("StartVehID set as %d", GetPVarInt(playerid, "StartVehID"));
		}
		else
		{
			SetVehicleParamsEx(veh, 0, lights, alarm, doors, bonnet, boot, objective);
			format(string, sizeof(string), "* %s turns the key in the vehicle and removes it", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
			format(string, sizeof(string), "* The vehicle engine stops ((%s))", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
	}

	// Lights
	else if(!strcmp(params, "Lights", true))
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			return SendClientMessage(playerid, -1, "You must be the driver of a vehicle to use this command");

		if(sql == 0)
			return 1;

		if(idx == -1)
			return 1;

		if(lights == 1)
		{
			SetVehicleParamsEx(veh, engine, 0, alarm, doors, bonnet, boot, objective);
			format(string, sizeof(string), "* %s has switched off their high beams", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
		else
		{
			SetVehicleParamsEx(veh, engine, 1, alarm, doors, bonnet, boot, objective);
			format(string, sizeof(string), "* %s has switched on their high beams", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
	}

	/// Trunk
	else if(!strcmp(params, "Trunk", true) || !strcmp(params, "Boot", true))
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			if(boot == 1)
				return SendClientMessage(playerid, -1, "The trunk is already opened!");

			if(Veh[idx][Trunk] == 1)
				return SendClientMessage(playerid, -1, "The trunk is already unlocked!");

			Veh[idx][Trunk] = 1;
			SendClientMessage(playerid, YELLOW, "[TIP] Type '/car trunk' outside the car to open the trunk");
			format(string, sizeof(string), "* The vehicle %s pops up slightly ((%s)) ", strtolower(params), GetNameEx(playerid));
			return NearByMessage(playerid, NICESKY, string);
		}

		if(gettime() < GetPVarInt(playerid, "CarReload"))
			return SendClientMessage(playerid, -1, "Please wait the allotted 2 seconds to finish your last vehicle related action.");

		veh = NearestVehicle(playerid);
		sql = GetVSQLID(veh);

		if(sql == 0)
			return SendClientMessage(playerid, -1, "There is currently no vehicles in range to open the trunk of.");

		if(!IsVehicleFacingPlayer(veh, playerid, true))
			return SendClientMessage(playerid, -1, "You must be at the back of the vehicle to open the trunk.");

		GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);

		idx = GetVIndex(sql);

		if(IsABike(Veh[idx][Link]))
			return SendClientMessage(playerid, -1, "You can't do that to a bike!");

		if(boot == 1)
		{
			SetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, 0, objective);
			format(string, sizeof(string), "* %s has closed the %s of the vehicle.", GetNameEx(playerid), strtolower(params));
			NearByMessage(playerid, NICESKY, string);
			Veh[idx][Trunk] = 0;
		}
		else
		{
			if(!HasVehicleAccess(playerid, sql) && !Veh[idx][Trunk])
				return SendClientMessage(playerid, -1, "You don't have the keys to this vehicle");

			SetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, 1, objective);
			if(!Veh[idx][Trunk])
				format(string, sizeof(string), "* %s has unlocked the %s of their vehicle and opens it", GetNameEx(playerid), strtolower(params));
			else
			format(string, sizeof(string), "* %s has popped open the %s of the vehicle", GetNameEx(playerid), strtolower(params));
			NearByMessage(playerid, NICESKY, string);
		}
	}

	// Hood
	else if(!strcmp(params, "Hood", true))
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				return SendClientMessage(playerid, -1, "You must be the driver of a vehicle to use this command");

			if(Veh[idx][Hood] == 1)
				return SendClientMessage(playerid, -1, "Your hood is already unlocked.");

			Veh[idx][Hood] = 1;
			SendClientMessage(playerid, YELLOW, "[TIP] Type '/car hood' outside the vehicle to open the hood");
			format(string, sizeof(string), "* The vehicle hood pops up slightly ((%s)) ", GetNameEx(playerid));
			return NearByMessage(playerid, NICESKY, string);
		}

		if(gettime() < GetPVarInt(playerid, "CarReload"))
			return SendClientMessage(playerid, -1, "Please wait the allotted 2 seconds to finish your last vehicle related action.");

		veh = NearestVehicle(playerid);
		sql = GetVSQLID(veh);

		if(sql == 0)
			return SendClientMessage(playerid, -1, "There is currently no vehicles in range to open the hood of.");

		if(!IsVehicleFacingPlayer(veh, playerid))
			return SendClientMessage(playerid, -1, "You must be in front of the vehicle to open the hood.");

		GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);

		idx = GetVIndex(sql);

		if(bonnet == 1)
		{
			SetVehicleParamsEx(veh, engine, lights, alarm, doors, 0, boot, objective);
			format(string, sizeof(string), "* %s has closed their hood", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
			Veh[idx][Hood] = 0;
		}
		else if(Veh[idx][Hood])
		{
			SetVehicleParamsEx(veh, engine, lights, alarm, doors, 1, boot, objective);
			format(string, sizeof(string), "* %s has opened their hood", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
		else
		SendClientMessage(playerid, -1, "Your hood is not unlocked, please go into the vehicle and unlock it");
		SetPVarInt(playerid, "CarReload", gettime() + 2);
	}
	/*else if(!strcmp(params, "window", true))
	{
		if(!IsPlayerInAnyVehicle(playerid))
			return SendClientMessage(playerid, -1, "You're not in a vehicle.");

		if(IsAnyBike(veh))
			return SendClientMessage(playerid, -1, "Bikes don't have windows.");

		if(Veh[idx][windowStatus] == 1)
		{
			format(string, sizeof(string), "* %s has rolled up their window", GetNameEx(playerid));
			Veh[idx][windowStatus] = 0;
		}
		else
		{
			format(string, sizeof(string), "* %s has rolled down their window", GetNameEx(playerid));
			Veh[idx][windowStatus] = 1;
		}
		NearByMessage(playerid, NICESKY, string);
		return 1;
	}*/
	else
		return SendClientMessage(playerid, -1, "Invalid option");

	return 1;
}

stock StartCar(playerid, vehid)
{
	new Float:health;
	GetVehicleHealth(vehid, health);

	if(health <= 400 && Player[playerid][AdminDuty] == 0)
		return 1;

	new engine, lights, alarm, doors, bonnet, boot, objective, string[128];
	GetVehicleParamsEx(vehid, engine, lights, alarm, doors, bonnet, boot, objective);

	if(_:Player[playerid][TruckLoadTimer] > -1 || _:Player[playerid][TruckUnloadTimer] > -1)
		return SendClientMessage(playerid, -1, "Don't even think about cheating, mate.");

	new sql = GetVSQLID(vehid), idx = GetVIndex(sql);
	if(sql != 0 && Groups[Veh[idx][Group]][CommandTypes] == 8 && (Player[playerid][DoingDMVTest] > 0 || Player[playerid][DoingTruckerTest] > 0))
		StartTest(playerid);

	if(500 >= health)
	{
		switch(random(5))
		{
			case 0:
			{
				format(string, sizeof(string), "* The engine fails to start and stalls. ((%s))", GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, string);
			}
			default:
			{
				SetVehicleParamsEx(vehid, 1, lights, alarm, doors, bonnet, boot, objective);
				format(string, sizeof(string), "* The vehicle engine starts ((%s))", GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, string);				
				DetonateIgnitionBomb(sql, vehid);
			}
		}
	}
	else
	{
		SetVehicleParamsEx(vehid, 1, lights, alarm, doors, bonnet, boot, objective);
		format(string, sizeof(string), "* The vehicle engine starts ((%s))", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);
		DetonateIgnitionBomb(sql, vehid);
	}
	return 1;
}

//forward FuelUpdate();
//public FuelUpdate()
task FuelUpdate[54000]()
{
	new engine, lights, alarm, doors, bonnet, boot, objective;

	for(new i; i < MAX_VEHICLES; i++)
	{
		new sql = GetVSQLID(i), idx = GetVIndex(sql);

		if(!IsSQLVehicleSpawned(sql))
			continue;

		GetVehicleParamsEx(Veh[idx][Link], engine, lights, alarm, doors, bonnet, boot, objective);

		if(IsABike(Veh[idx][Link]) == 1)
			continue;

		if(engine == 0 || engine == -1)
			continue;

		if(Veh[idx][Fuel] < 0)
			continue;

		Veh[idx][Fuel]--;

		if(Veh[idx][Fuel] == 0)
			SetVehicleParamsEx(Veh[idx][Link], 0, lights, alarm, doors, bonnet, boot, objective);

	}
	return 1;
}

stock IsAnyBike(veh) //Check for ANY type of bike / quad
{
	switch(GetVehicleModel(veh))
	{
		case 509, 481, 510, 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 471:
			return 1;
	}
	return 0;
}

stock IsABike(veh) // Checks for BMX / mtn bikes
{
	switch(GetVehicleModel(veh))
	{
		case 481, 509, 510:
		return 1;
	}
	return 0;
}

stock IsATruck(veh)
{
	switch(GetVehicleModel(veh))
	{
		case 403, 514, 515:
		return 1;
	}
	return 0;
}

stock IsABoat(carid)
{
	new modelid = GetVehicleModel(carid);
	if(modelid == 430 || modelid == 446 || modelid == 452 || modelid == 453 || modelid == 454 || modelid == 472 || modelid == 473 || modelid == 484 || modelid == 493 || modelid == 595)
	{
		return 1;
	}
	return 0;
}

stock IsInFishingBoat(carid)
{
	new modelid = GetVehicleModel(carid);
	if(modelid == 446 || modelid == 452 || modelid == 453 || modelid == 454 || modelid == 473 || modelid == 484 || modelid == 493 || modelid == 595)
	{
		return 1;
	}
	return 0;
}

stock IsInFishingZone(playerid)
{
	new temp[28];
	for(new i = 0; i < sizeof(FishingZones); i++)
	{
		if(IsPlayerInZone(playerid, FishingZones[i]) || GetPlayer2DZone(playerid, temp, 28) == 0)
		    return 1;
	}
	return 0;
}

CMD:addpump(playerid, params[])
{
	if(Businesses[Player[playerid][Business]][bType] == 16)
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);

		CreateGasPump(playerid, Player[playerid][Business], x, y, z);
	}

	return 1;
}

CMD:removepump(playerid, params[])
{
	if(Businesses[Player[playerid][Business]][bType] != 16)
		return 1;

	new pump = strval(params), biz = Player[playerid][Business];

	if(isnull(params) || !IsNumeric(params) || pump < 1 || pump > MAX_PUMPS)
	{
		new string[128];
		format(string, sizeof(string), "SYNTAX: /removepump [pumpid (1 - %d)]", MAX_PUMPS);
		return SendClientMessage(playerid, GREY, string);
	}

	pump--;

	if(Businesses[biz][GasPump][pump] != 1)
		return SendClientMessage(playerid, -1, "That gas pump has not been created!");

	DestroyDynamic3DTextLabel(Businesses[biz][GasText][pump]);
	Businesses[biz][GasPump][pump] = 0;
	Businesses[biz][GasX][pump] = 0.00;
	Businesses[biz][GasY][pump] = 0.00;
	Businesses[biz][GasZ][pump] = 0.00;
	SaveBusiness(Player[playerid][Business]);

	return 1;
}

CMD:refuel(playerid, params[])
{
	if(IsABoat(GetPlayerVehicleID(playerid)))
	{
		new veh = GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective, id = -1, pump = -1, sql = GetVSQLID(veh), idx = GetVIndex(sql);

		if(IsABike(veh))
			return SendClientMessage(playerid, -1, "You can't fuel this vehicle!");

		if(!IsPlayerInAnyVehicle(playerid))
			return SendClientMessage(playerid, -1, "You must be in a vehicle to fuel it!");

		if(Veh[idx][Fuel] == 100)
			return SendClientMessage(playerid, -1, "Your vehicle has full fuel");

		GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);

		if(engine == 1)
			return SendClientMessage(playerid, -1, "You must stop your vehicle to fuel it!");

		IsPlayerInRangeOfGasPump(playerid, 10.0, id, pump);

		if(id == -1 || pump == -1)
			return SendClientMessage(playerid, -1, "You're not near a gas station");

		new iAmount;

		if(sscanf(params, "i", iAmount))
			iAmount = (100 - Veh[idx][Fuel]);

		if(iAmount > 100 || iAmount < 1)
			return SendClientMessage(playerid, -1, "You cannot put more than 100, or less than 1 units in your vehicle.");

		if((iAmount + Veh[idx][Fuel]) > 100)
			return SendClientMessage(playerid, -1, "You cannot have more than 100 fuel.");
 
		if(EmptyGasStations)
			return SendClientMessage(playerid, -1, "This gas station is empty!");
			
		new price = (iAmount * Businesses[id][bProductPrice5]),
		szStr[128];

		format(szStr, sizeof(szStr), "You cannot afford to fuel your vehicle [Price: %s]", PrettyMoney(price));

		if(Player[playerid][Money] < price && Veh[idx][Group] == 0)
			return SendClientMessage(playerid, -1, szStr);
		else if(Groups[Veh[idx][Group]][CommandTypes] > 0 && Groups[Veh[idx][Group]][PayForFuel] == 0)
		{
			if(Groups[Veh[idx][Group]][SafeMoney] < price)
				return SendClientMessage(playerid, -1, "The faction cannot afford to pay the fuel.");
		}
		
		if(Veh[idx][Group] == 0 || Groups[Veh[idx][Group]][PayForFuel] == 1)
			Player[playerid][Money] -= price;
		else
			Groups[Veh[idx][Group]][SafeMoney] -= price;

		format(szStr, sizeof(szStr), "* %s has refueled their vehicles gas tank.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, szStr);
		if(Veh[idx][Group] != 1)
			format(szStr, sizeof(szStr), "You refueled your vehicle costing %s", PrettyMoney(price));
		else
			format(szStr, sizeof(szStr), "You refueled your vehicle costing the LSPD %s", PrettyMoney(price));
		SendClientMessage(playerid, YELLOW, szStr);

		AddToStorage(id, CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, price);
		Veh[idx][Fuel] = Veh[idx][Fuel] + iAmount;
	}
	else
	{
		if(IsPlayerInAnyVehicle(playerid))
			return SendClientMessage(playerid, -1, "You cannot be inside a vehicle to refill it.");

		if(Player[playerid][Refilling])
			return SendClientMessage(playerid, -1, "You are already refilling a vehicle.");

		new Float:vpos[3], veh = Player[playerid][LastCarID], sql = GetVSQLID(veh), idx = GetVIndex(sql), string[128];

		GetVehiclePos(veh, vpos[0], vpos[1], vpos[2]);
		if(!IsPlayerInRangeOfVehicle(playerid, veh, 3.0))
			return SendClientMessage(playerid, -1, "You must be standing close by the car you were last driving.");

		if(IsABike(veh))
			return SendClientMessage(playerid, -1, "You can't fuel this vehicle!");

		if(IsABoat(veh))
			return SendClientMessage(playerid, -1, "You must be in the boat to refuel it.");

		if(Veh[idx][Fuel] >= 100)
			return SendClientMessage(playerid, -1, "That vehicle is already full.");

		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);

		if(engine == 1)
			return SendClientMessage(playerid, -1, "You must stop your vehicle to fuel it!");

		new id = -1, pump = -1;

		IsPlayerInRangeOfGasPump(playerid, 10.0, id, pump);

		if(id == -1 || pump == -1)
			return SendClientMessage(playerid, -1, "You're not near a gas station");

		foreach(Player, i)
		{
			if(GetPVarInt(i, "refillcarid") == veh)
			{
				SendClientMessage(playerid, WHITE, "Someone else is already refueling this vehicle.");
				return 1;
			}
		}

		new amount;
		if(sscanf(params, "i", amount))
			amount = (100 - Veh[idx][Fuel]);

		if(amount < 1 || amount > 100)
			return SendClientMessage(playerid, -1, "You cannot put it less than 1 litre or more than 100 litres in the vehicle.");

		if(amount + Veh[idx][Fuel] > 100)
			return SendClientMessage(playerid, -1, "You cannot put more than 100 litres in the vehicle.");

		new price = amount * Businesses[id][bProductPrice5];
		if(Groups[Veh[idx][Group]][CommandTypes] > 0)
		{
			if(price > Groups[Veh[idx][Group]][SafeMoney])
			{
				format(string, sizeof(string), "The faction cannot afford the fuel cost. (%s)", PrettyMoney(price));
				return SendClientMessage(playerid, YELLOW, string);
			}
		}
		else if(price > Player[playerid][Money])
		{
			format(string, sizeof(string), "You cannot afford the fuel cost. (%s)", PrettyMoney(price));
			return SendClientMessage(playerid, YELLOW, string);
		}

		format(string, sizeof(string), "* %s grabbed the nozzle on the gas pump and inserted it into the vehicle.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);

		SetPVarInt(playerid, "refillcaramount", amount);
		SetPVarInt(playerid, "refillcarbiz", id);
		SetPVarInt(playerid, "refillcarpump", pump);
		SetPVarInt(playerid, "refillcarid", veh);

		Player[playerid][Refilling] = 1;
		Player[playerid][RefuelTimer] = repeat RefuelGas[1000](playerid);
	}
	return 1;
}

CMD:refill(playerid, params[])
{
	if(IsABoat(GetPlayerVehicleID(playerid)))
	{
		if(Player[playerid][GasCans] < 1)
			return SendClientMessage(playerid, -1, "You need a gas can to use this command.");

		if(Player[playerid][GasFull] < 1)
			return SendClientMessage(playerid, -1, "Your gas can is empty!");

		new sql = GetVSQLID(GetPlayerVehicleID(playerid)), idx = GetVIndex(sql);

		if(sql == 0)
			return 1;

		new string[128];
		format(string, sizeof(string), "* %s fills the vehicles tank with fuel.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);

		if(Veh[idx][Fuel] > 100)
			return SendClientMessage(playerid, -1, "The vehicle is already full of fuel.");

		if(Veh[idx][Fuel] + Player[playerid][GasFull] > 100)
		{
			new diff = (Veh[idx][Fuel] + Player[playerid][GasFull]) - 100;
			Veh[idx][Fuel] = 100;
			Player[playerid][GasFull] = diff;
		}
		else
		{
			Veh[idx][Fuel] += Player[playerid][GasFull];
			Player[playerid][GasFull] = 0;
		}
	}
	else
	{
		if(IsPlayerInAnyVehicle(playerid))
			return SendClientMessage(playerid, -1, "You cannot put fuel into your vehicle when you're inside it.");

		if(Player[playerid][Refilling])
			return SendClientMessage(playerid, -1, "You can't do that when you're already refueling the vehicle.");

		if(Player[playerid][GasCans] < 1)
			return SendClientMessage(playerid, -1, "You need a gas can to use this command.");

		if(Player[playerid][GasFull] < 1)
			return SendClientMessage(playerid, -1, "Your gas can is empty!");

		new veh = Player[playerid][LastCarID];

		if(IsABoat(veh))
			return SendClientMessage(playerid, -1, "You must be in the boat to refuel it.");

		if(IsABike(veh))
			return SendClientMessage(playerid, -1, "Bikes don't need fuel.");

		if(!IsPlayerInRangeOfVehicle(playerid, veh, 3.0))
			return SendClientMessage(playerid, -1, "You are not within range of the last vehicle you entered.");

		new sql = GetVSQLID(veh), idx = GetVIndex(sql), engine, lights, alarm, doors, bonnet, boot, objective;

		if(sql == 0)
			return 1;

		GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
		if(engine == 1)
			return SendClientMessage(playerid, -1, "You can't put fuel into the vehicle when the engine is on.");

		if(Veh[idx][Fuel] >= 100)
			return SendClientMessage(playerid, -1, "The vehicle is already full of fuel.");

		new string[128];
		format(string, sizeof(string), "* %s starts to fill the vehicles tank with fuel from their gas can.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);

		SetPVarInt(playerid, "refillcarid", veh);
		Player[playerid][Refilling] = 2;
		Player[playerid][RefuelTimer] = repeat RefuelGas[2000](playerid);
	}
	return 1;
}

timer RefuelGas[2000](playerid)
{
	if(Player[playerid][Refilling] == 1)
	{
		new price, string[128], amount = GetPVarInt(playerid, "refillcaramount"), veh = GetPVarInt(playerid, "refillcarid"), id = GetPVarInt(playerid, "refillcarbiz"), pump = GetPVarInt(playerid, "refillcarpump"), sql = GetVSQLID(veh), idx = GetVIndex(sql);

		if(IsPlayerInRangeOfVehicle(playerid, veh, 3.0) && !IsPlayerInAnyVehicle(playerid) && IsPlayerInRangeOfPoint(playerid, 10.0, Businesses[id][GasX][pump], Businesses[id][GasY][pump], Businesses[id][GasZ][pump]) && Businesses[id][GasPump][pump] == 1)
		{
			if(EmptyGasStations)
			{
				Player[playerid][Refilling] = 0;
				DeletePVar(playerid, "refillcarid");
				return SendClientMessage(playerid, -1, "There is no more fuel in this gas station!");
			}

			if(amount + Veh[idx][Fuel] > 100)
			{
				amount = 100 - Veh[idx][Fuel];

				price = amount * Businesses[id][bProductPrice5];
				Player[playerid][Refilling] = 0;

				if(Groups[Veh[idx][Group]][CommandTypes] == 1)
				{
					Veh[idx][Fuel] = 100;
					Groups[Veh[idx][Group]][SafeMoney] -= price;
					AddToStorage(id, CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, price);
				}
				else if(price <= Player[playerid][Money])
				{
					Veh[idx][Fuel] = 100;
					Player[playerid][Money] -= price;
					AddToStorage(id, CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, price);
				}
				else
				{
					if(Groups[Veh[idx][Group]][CommandTypes] == 1)
						SendClientMessage(playerid, -1, "The LSPD can not afford the rest of the cost of fuel.");
					else
						SendClientMessage(playerid, -1, "You can not afford the rest of the cost of fuel.");
					Player[playerid][Refilling] = 0;
				}

				if(Player[playerid][Refilling] == 0)
				{
					DeletePVar(playerid, "refillcarid");
					stop Player[playerid][RefuelTimer];
					format(string, sizeof(string), "* %s takes the nozzle out of the vehicle and hooks it back on the gas pump.", GetNameEx(playerid));
					NearByMessage(playerid, NICESKY, string);
				}
				PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);

			}
			else
			{
				if(amount < 10)
				{
					price = amount * Businesses[id][bProductPrice5];

					Player[playerid][Refilling] = 0;

					if(Groups[Veh[idx][Group]][CommandTypes] == 1)
					{
						Veh[idx][Fuel] += amount;
						Groups[Veh[idx][Group]][SafeMoney] -= price;
						AddToStorage(id, CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, price);
					}
					else if(price <= Player[playerid][Money])
					{
						Veh[idx][Fuel] += amount;
						Player[playerid][Money] -= price;
						AddToStorage(id, CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, price);
					}
					else
					{
						if(Groups[Veh[idx][Group]][CommandTypes] == 1)
							SendClientMessage(playerid, -1, "The LSPD can not afford the rest of the cost of fuel.");
						else
							SendClientMessage(playerid, -1, "You can not afford the rest of the cost of fuel.");
						Player[playerid][Refilling] = 0;
					}

					if(Player[playerid][Refilling] == 0)
					{
						DeletePVar(playerid, "refillcarid");
						stop Player[playerid][RefuelTimer];
						format(string, sizeof(string), "* %s takes the nozzle out of the vehicle and hooks it back on the gas pump.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
					}
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				}
				else
				{
					price = 10 * Businesses[id][bProductPrice5];

					amount -= 10;
					SetPVarInt(playerid, "refillcaramount", amount);

					if(amount < 1)
						Player[playerid][Refilling] = 0;

					if(Groups[Veh[idx][Group]][CommandTypes] == 1)
					{
						Veh[idx][Fuel] += 10;
						Groups[Veh[idx][Group]][SafeMoney] -= price;
						AddToStorage(id, CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, price);
					}
					else if(price <= Player[playerid][Money])
					{
						Veh[idx][Fuel] += 10;
						Player[playerid][Money] -= price;
						AddToStorage(id, CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, price);
					}
					else
					{
						if(Groups[Veh[idx][Group]][CommandTypes] == 1)
							SendClientMessage(playerid, -1, "The LSPD can not afford the rest of the cost of fuel.");
						else
							SendClientMessage(playerid, -1, "You can not afford the rest of the cost of fuel.");
						Player[playerid][Refilling] = 0;
					}

					if(Player[playerid][Refilling] == 0)
					{
						DeletePVar(playerid, "refillcarid");
						stop Player[playerid][RefuelTimer];
						format(string, sizeof(string), "* %s takes the nozzle out of the vehicle and hooks it back on the gas pump.", GetNameEx(playerid));
						NearByMessage(playerid, NICESKY, string);
					}
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
				}
			}
		}
		else
			SendClientMessage(playerid, -1, "You are not near your vehicle, not near a gas pump or are inside a vehicle and the action has been cancelled."), Player[playerid][Refilling] = 0, DeletePVar(playerid, "refillcarid");
	}

	if(Player[playerid][Refilling] == 2)
	{
		new veh = GetPVarInt(playerid, "refillcarid");

		if(IsPlayerInRangeOfVehicle(playerid, veh, 3.0))
		{
			new sql = GetVSQLID(veh), idx = GetVIndex(sql), string[128];

			if(Player[playerid][GasFull] > 0)
			{
				new amount;
				if(Player[playerid][GasFull] > 5)
					amount = 5;
				else
					amount = Player[playerid][GasFull];

				if(Veh[idx][Fuel] + amount > 100)
				{
					amount = (Veh[idx][Fuel] + amount) - 100;
					Veh[idx][Fuel] = 100;
					Player[playerid][GasFull] -= amount;
				}
				else
				{
					Veh[idx][Fuel] += amount;
					Player[playerid][GasFull] -= amount;
				}

				if(Player[playerid][GasFull] < 1|| Veh[idx][Fuel] >= 100)
				{
					format(string, sizeof(string), "* %s finishes filling up the vehicle with their gas can.", GetNameEx(playerid));
					stop Player[playerid][RefuelTimer];
					NearByMessage(playerid, NICESKY, string);
					DeletePVar(playerid, "refillcarid");
					Player[playerid][Refilling] = 0;
				}
				else
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
			}
			else
			{
				Player[playerid][Refilling] = 0;
			}
		}
		else
		{
			new string[128];
			DeletePVar(playerid, "refillcarid");
			stop Player[playerid][RefuelTimer];
			format(string, sizeof(string), "* %s stops filling up the vehicle with the gas can.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
			Player[playerid][Refilling] = 0;
			SendClientMessage(playerid, -1, "You are no longer near the vehicle you are refilling and has been automatically stopped.");
		}
	}
	return 1;
}

stock CreateGasPump(playerid, biz, Float:x, Float:y, Float:z) // Doesn't create an object, just a 3dtext
{
	new tmp[100];

	if(!DoesBusinessExist(biz))
		return SendClientMessage(playerid, -1, "Invalid business ID");

	new pump = -1;
	for(new i; i < MAX_PUMPS; i++)
	{
		if(Businesses[biz][GasPump][i] == 0)
			pump = i;
	}

	if(pump == -1)
		return SendClientMessage(playerid, -1, "This business already has the maximum amount of gas pumps created.");

	Businesses[biz][GasPump][pump] = 1;
	Businesses[biz][GasX][pump] = x;
	Businesses[biz][GasY][pump] = y;
	Businesses[biz][GasZ][pump] = z;
	// Businesses[biz][GasVolume] = 0;
	//Businesses[biz][GasPrice] = 25;
	SaveBusiness(biz);
	format(tmp, sizeof(tmp), "Gas Station\nPrice: $%d per unit\n/refuel", Businesses[biz][bProductPrice5]);
	Businesses[Player[playerid][Business]][GasText][pump] = CreateDynamic3DTextLabel(tmp, YELLOW, Businesses[biz][GasX][pump], Businesses[biz][GasY][pump], Businesses[biz][GasZ][pump], 40.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0);

	SendClientMessage(playerid, -1, "Pump Added!");
	return 0;
}

stock InitGasStations()
{
	new tmp[100];
	for(new i; i < MAX_BUSINESSES; i++)
	{
		if(Businesses[i][bType] != 16)
			continue;

		for(new x; x < MAX_PUMPS; x++)
		{
			if(Businesses[i][GasPump][x] == 1)
			{
				format(tmp, sizeof(tmp), "Gas Station\nPrice: $%d per unit\n/refuel", Businesses[i][bProductPrice5]);
				Businesses[i][GasText][x] = CreateDynamic3DTextLabel(tmp, YELLOW, Businesses[i][GasX][x], Businesses[i][GasY][x], Businesses[i][GasZ][x], 40.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0);
			}
		}
	}
	return 1;
}

command(remotechangeviplevel, playerid, params[])
{
	new playername[128], level;

	if(Player[playerid][AdminLevel] < 3)
		return 1;

	if(sscanf(params, "s[128]d", playername, level))
		return SendClientMessage(playerid, GREY, "SYNTAX: /remotechangeviplevel [playername] [level]");

	if(level < 0 || level > 5)
		return SendClientMessage(playerid, -1, "VIP level must be between 0 and 5!");

	if(!IsPlayerRegistered(playername))
		return SendClientMessage(playerid, WHITE, "That player doesn't exist.");

	else
	{
		if(level > 4 && GetRemoteAdminLevel(playername) < 1)
			return SendClientMessage(playerid, WHITE, "Only admins can have a VIP rank of 5.");

		new time, query[255];
		if(level == 4)
			time = gettime() + 7776000;
		else if(level < 4)
			time = gettime() + 2592000;

		mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE playeraccounts SET VipRank = '%d', VipTime = '%d', VipRenew = '0' WHERE NormalName = '%e'", level, time, playername);
		mysql_tquery(MYSQL_MAIN, query, "OnQueryFinish", "dddss", THREAD_REMOTE_VIP_LEVEL, playerid, level, playername, "");
		
		if(level == 0)
		{
			new string[128];
			mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE playeraccounts SET Job2 = '0' WHERE  NormalName = '%e'", playername);
			mysql_query(MYSQL_MAIN, string, false);
		}
	}

	return 1;
}

command(changeviplevel, playerid, params[])
{
	new id, level, string[128];

	if(Player[playerid][AdminLevel] < 3)
		return 1;

	if(sscanf(params, "ud", id, level))
		return SendClientMessage(playerid, GREY, "SYNTAX: /changeplayerviplevel [playerid] [level]");

	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, -1, "That player isn't connected!");

	if(level < 0 || level > 5)
		return SendClientMessage(playerid, -1, "VIP level must be between 0 and 5!");
	else
	{
		if(level < 5)
			Player[id][VipRank] = level;
		else if(Player[id][AdminLevel] > 0)
			Player[id][VipRank] = level;
		else
			return SendClientMessage(playerid, -1, "Only admins can have a VIP rank of 5.");
		if(level < 4)
			Player[id][VipTime] = gettime() + 2592000; // 2592000 is 30 days in seconds.
		else
			Player[id][VipTime] = gettime() + 7776000; // 7776000 is 90 days in seconds.

		if(level == 0)
		{
			Player[id][VipTime] = 0;
			Player[id][Job2] = 0;
		}
		
		Player[id][VipRenew] = 0;
		format(string, sizeof(string), "%s has changed %s VIP level to %d.", Player[playerid][AdminName], GetName(id), level);
		SendToAdmins(ADMINORANGE, string, 0);
		format(string, sizeof(string), "%s has changed %s VIP level to %d.", Player[playerid][AdminName], GetName(id), level);
		AdminActionsLog(string);
		format(string, sizeof(string), "%s has had their VIP level changed to %d.", GetName(id), level);
			
		foreach(Player, i)
		{
			if(Player[i][VipRank] > 0 && GetPlayerToggle(i, TOGGLE_VIP) == false)
				SendClientMessage(i, VIP_CHAT, string);
		}
		
		if(Player[id][LoyaltyVipHoursLeft] > 0)
		{
			format(string, sizeof(string), "%s has lost %d hours of %d level loyalty VIP. (Purchased VIP)", GetName(id), Player[id][LoyaltyVipHoursLeft], Player[id][LoyaltyVipRank]);
			SendClientMessage(playerid, WHITE, string);
			LoyaltyLog(string);
			
			Player[id][LoyaltyVipHoursLeft] = 0;
			Player[id][LoyaltyVipRank] = 0;
		}
		
		if(Player[id][LoyaltyPendingVipHours] > 0)
		{
			format(string, sizeof(string), "%s has lost %d hours of %d level pending loyalty VIP. (Purchased VIP)", GetName(id), Player[id][LoyaltyPendingVipHours], Player[id][LoyaltyPendingVip]);
			SendClientMessage(playerid, WHITE, string);
			LoyaltyLog(string);
			
			Player[id][LoyaltyPendingVipHours] = 0;
			Player[id][LoyaltyPendingVip] = 0;
		}
	}

	return 1;
}

command(agotojob, playerid, params[])
{
	new jobid, jobloc[128], string[128];

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(sscanf(params, "dS(joinpos)[128]", jobid, jobloc))
		return SendClientMessage(playerid, GREY, "SYNTAX: /agotojob [jobid] ([usage])");

	if(jobid < 1 || jobid > MAX_JOBS)
	{
		format(string, sizeof(string), "Job ID must be between 1 and %d!", MAX_JOBS);
		return SendClientMessage(playerid, -1, string);
	}

	if(!DoesJobExist(jobid))
		return SendClientMessage(playerid, -1, "Invalid job ID!");

	else
	{
		if(strlen(jobloc) > 0 && strcmp(jobloc, "joinpos", true))
		{
			if(!strcmp(jobloc, "location1", true))
			{
				SetPlayerInterior(playerid, Jobs[jobid][JobMiscLocationOneInterior]);
				SetPlayerVirtualWorld(playerid, Jobs[jobid][JobMiscLocationOneWorld]);
				SetPlayerPos_Update(playerid, Jobs[jobid][JobMiscLocationOneX], Jobs[jobid][JobMiscLocationOneY], Jobs[jobid][JobMiscLocationOneZ]);
				format(string, sizeof(string), "You have been teleported to Job %d misc location one.", jobid);
				SendClientMessage(playerid, WHITE, string);
			}
			else if(!strcmp(jobloc, "location2", true))
			{
				SetPlayerInterior(playerid, Jobs[jobid][JobMiscLocationTwoInterior]);
				SetPlayerVirtualWorld(playerid, Jobs[jobid][JobMiscLocationTwoWorld]);
				SetPlayerPos_Update(playerid, Jobs[jobid][JobMiscLocationTwoX], Jobs[jobid][JobMiscLocationTwoY], Jobs[jobid][JobMiscLocationTwoZ]);
				format(string, sizeof(string), "You have been teleported to Job %d misc location two.", jobid);
				SendClientMessage(playerid, WHITE, string);
			}
			else
			return SendClientMessage(playerid, -1, "Invalid usage! Use \"location1\" or \"location2\".");
		}

		else
		{
			SetPlayerInterior(playerid, Jobs[jobid][JobJoinPosInterior]);
			SetPlayerVirtualWorld(playerid, Jobs[jobid][JobJoinPosWorld]);
			SetPlayerPos_Update(playerid, Jobs[jobid][JobJoinPosX], Jobs[jobid][JobJoinPosY], Jobs[jobid][JobJoinPosZ]);
			format(string, sizeof(string), "You have been teleported to Job %d join position.", jobid);
			SendClientMessage(playerid, WHITE, string);
		}
	}

	return 1;
}

command(call, playerid, params[])
{
	if(Player[playerid][PhoneN] == -1)
		return SendClientMessage(playerid, -1, "You don't have a phone!");

	new number = -1, string[128];

	if(isnull(params))
		return SendClientMessage(playerid, GREY, "SYNTAX: /call [number]");

	if(!IsNumeric(params))
		number = GetContactNumber(Player[playerid][PhoneN], params);
	else
		number = strval(params);

	if(number == -1) return 1;

	if(number == Player[playerid][PhoneN])
		return SendClientMessage(playerid, -1, "You can't call yourself!");

	if(strval(GetPhoneInfo(Player[playerid][PhoneN], "status")) == 0)
		return SendClientMessage(playerid, -1, "Your phone is off! Use /togphone to turn it on again.");

	if(IsPlayerOnPhone(playerid))
		return SendClientMessage(playerid, -1, "You're already on a call!");

	if(Player[playerid][Tied] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] == 1)
		return SendClientMessage(playerid, -1, "You can't do that, you're incapacitated!");

	if(Player[playerid][PrisonDuration] > 0 || Player[playerid][PrisonID] > 0)
		return SendClientMessage(playerid, WHITE, "You can't do that in prison!");

	if(GetPVarInt(playerid, "CallCD") > gettime())
		return 1;

	//if(29 < GetPVarInt(playerid, "BleedingOutTime") < 46)
	//	return SendClientMessage(playerid, -1, "You can't use the phone until you've bled out for 15 seconds.");

	if(Player[playerid][Gagged] == 1)
		return SendClientMessage(playerid, -1, "You can't do that, your mouth is covered!");

	if(number < 0)
	    return 1;

	PlayerPlaySound(playerid, 3600, 0, 0, 0);
	for(new a; a < MAX_PAYPHONES; a++)
	{
		if(number == PayphoneNumbers[a])
		{
			foreach(Player, x)
			{
				if(Player[x][CallingPayphone] == PayphoneNumbers[a] || Player[x][OnPayphone] == PayphoneNumbers[a])
					return SendClientMessage(playerid, -1, "That payphone is in use!");

				for(new i; i < MAX_PAYPHONES; i++)
				{
					format(string, sizeof(string), "* A nearby payphone starts to ring.. ((/answer))");
					if(PayphoneNumbers[i] == PayphoneNumbers[a])
					{
						if(IsPlayerInRangeOfPoint(x, 10, Payphones[i][0], Payphones[i][1], Payphones[i][2]))
							SendClientMessage(x, NICESKY, string);
					}
				}
			}

			SaveCall(Player[playerid][PhoneN], number, 1);
			Player[playerid][CallConnecting] = 1;
			Player[playerid][CallingPayphone] = PayphoneNumbers[a];
			format(string, sizeof(string), "* %s takes out their phone and presses a few numbers.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
			SetPlayerAttachedObject(playerid, 4, 330, 6);
			return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		}
	}

	if(number == 911)
	{
		//if(GetPVarInt(playerid, "BleedingOutTime") == 0)
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		SetPlayerAttachedObject(playerid, 4, 330, 6);
		//PlayNearbySound(playerid,3600);
		Player[playerid][CellphoneConsole] = 911;
		return SendClientMessage(playerid, WHITE, "You've called Emergency services, please select the department you desire (i.e: LSPD, LSMD)");

	}
	
	if(number == 666)
	{
		DetonateRemoteBomb(playerid);
		return 1;
	}
	/* else if(number == 611)Player[playerid][Calling]
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		SetPlayerAttachedObject(playerid, 4, 330, 6);

		Player[playerid][CallConnecting] = 1;
		Player[playerid][CallingTaxi] = 1;

		format(string, sizeof(string), "* %s takes out their cellphone and presses a few numbers.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);

		foreach(Player, i)
		{
			if(Player[i][InGroupHQ] == 12) //PCC TAXI GROUP
			{
				SendClientMessage(i, NICESKY, "* The company's phone would start to ring..");
				if(Player[i][Group] == 12)
					SendClientMessage(i, -1, "Type /answer to answer the company phone.");

			}
			else if(Player[i][InBusiness] == 86) //PCC TAXI BUSINESS
			{
				SendClientMessage(i, NICESKY, "* The company's phone would start to ring..");
				if(Player[i][Group] == 12)
					SendClientMessage(i, -1, "Type /answer to answer the company phone.");

			}
			else
			{
				new sql = GetVSQLID(GetPlayerVehicleID(i)), idx  = GetVIndex(sql);
				if(sql == 0)
					continue;

				if(Veh[idx][Group] == 12)
				{
					SendClientMessage(i, NICESKY, "* The company's phone would start to ring..");
					if(Player[i][Group] == 12)
						SendClientMessage(i, -1, "Type /answer to answer the company phone.");
				}
			}
		}
	}*/
	else
	{
		if(!IsExistingPhoneNumber(number) || strval(GetPhoneInfo(number, "status")) == 0)
			return SendClientMessage(playerid, YELLOW, "The number you are trying to reach is currently unavailable.");

		new query[128];
		mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM phones WHERE number = '%d'", number);
		new Cache:cache = mysql_query(MYSQL_MAIN, query);

		new name[25];
		cache_get_field_content(0, "owner", name);
		cache_delete(cache);
	
		if(!strcmp(name, "Stashed_Phone", true))
		{
			new Float:pos[3];
			for(new i; i < MAX_STASH; i++)
			{
				if(GlobalStash[i][ItemAmount] == number)
				{
					pos[0] = GlobalStash[i][StashX];
					pos[1] = GlobalStash[i][StashY];
					pos[2] = GlobalStash[i][StashZ];
					break;
				}
			}
			
			foreach(Player, i)
			{
				if(!IsPlayerInRangeOfPoint(i, 5, pos[0], pos[1], pos[2]))
					continue;
				
				if(strval(GetPhoneInfo(number, "vibrate")) == 1 && strval(GetPhoneInfo(number, "ringtone")) == 0)
					SendClientMessage(i, NICESKY, "* A cellphone can be heard vibrating nearby.");
				else
				{
					PlayerPlayNearbySoundEx(i, GetRingtoneSound(number), 5, true);
					SendClientMessage(i, NICESKY, "* A cellphone can be heard ringing nearby.");
				}
				SetPVarInt(i, "StashPhoneMusic", 1);
			}
	
			SaveCall(Player[playerid][PhoneN], number, 1);
			SaveCall(number, Player[playerid][PhoneN], 0);
			Player[playerid][CallConnecting] = 1;
			SetPVarInt(playerid, "CallingNumber", number);
			format(string, sizeof(string), "* %s takes out their phone and presses a few numbers.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			SetPlayerAttachedObject(playerid, 4, 330, 6);
			Player[playerid][Calling] = 10000;
			//PlayNearbySound(playerid,3600);
			SetPVarInt(playerid, "CallCD", gettime() + 2);
			return 1;
		}
		
		new id = GetPlayerIDEx(name);
		if(!IsPlayerConnectedEx(id) || Player[id][PrisonDuration] > 0 || Player[id][PrisonID] > 0 || Spectator[id][SpecSpectatingPlayer] != -1 || Spectator[id][SpecSpectatingVehicle] != -1)
			return SendClientMessage(playerid, YELLOW, "The number you are trying to reach is currently unavailable.");

		if(IsPlayerOnPhone(id) || Player[id][BeingCalled] >= 0)
			return SendClientMessage(playerid, -1, "The line you're trying to call is busy.");

		if(IsNumberBlocked(number, Player[playerid][PhoneN]))
			return SendClientMessage(playerid, YELLOW, "The number you are trying to reach is currently unavailable.");

		SaveCall(Player[playerid][PhoneN], number, 1);
		SaveCall(number, Player[playerid][PhoneN], 0);
		Player[playerid][CallConnecting] = 1;
		Player[playerid][Calling] = id;
		Player[id][BeingCalled] = playerid;
		SetPVarInt(playerid, "CallingNumber", number);
		format(string, sizeof(string), "* %s takes out their phone and presses a few numbers.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);
		if(strval(GetPhoneInfo(number, "vibrate")) == 1 && strval(GetPhoneInfo(number, "ringtone")) == 0)
		{
			format(string, sizeof(string), "* %s's phone starts to vibrate...", GetNameEx(id));
			NearByMessage(id, NICESKY, string);
		}
		else if(strval(GetPhoneInfo(number, "ringtone")) != 0)
		{
			format(string, sizeof(string), "* %s's phone starts to ring...", GetNameEx(id));
			NearByMessage(id, NICESKY, string);
		}

		SetPVarString(id, "OnPhoneTo", GetContactName(number, Player[playerid][PhoneN]));
		format(string, sizeof(string), "Incoming call on %s from %s...", GetPhoneInfo(number, "label"), GetContactName(number, Player[playerid][PhoneN]));

		SendClientMessage(id, WHITE, string);

		if(IsPlayerInAnyVehicle(id))
			TextDrawShowForPlayer(id, CellPhoneTextDrawInVehicle);
		else
			TextDrawShowForPlayer(id, CellPhoneTextDraw);

		Player[id][CallConnectingTime] = 1;
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		SetPlayerAttachedObject(playerid, 4, 330, 6);
		//PlayNearbySound(playerid,3600);
		SetPVarInt(playerid, "CallCD", gettime() + 2);

		if(strval(GetPhoneInfo(number, "ringtone")) != 0)
		{
			PlayerPlayNearbySoundEx(id, GetRingtoneSound(Player[id][PhoneN]), 6, true);
		}
		return SendClientMessage(playerid, WHITE, "You can use the 'T' chat to proceed to talk.");
	}
}

command(untie, playerid, params[])
{
	new id, string[128];
	sscanf(params, "d", id);
	if(id < MAX_PLAYERS)
	{
		if(sscanf(params, "u", id))
			return SendClientMessage(playerid, GREY, "SYNTAX: /untie [playerid]");

		if(!IsPlayerConnectedEx(id))
			return SendClientMessage(playerid, -1, "That player is not connected or logged in.");
			
		if(Player[id][Mask] == 1)
	    	id = -1;
	}
	else
	    id = CheckIfMasked(id);
	
	if(id == -1)
		return SendClientMessage(playerid, -1, "That player is too far away!");
		
	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, -1, "That player isn't connected!");

	if(Player[playerid][Tied] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] == 1 || Player[playerid][AdminFrozen] == 1)
		return SendClientMessage(playerid, -1, "You can't do that right now, you're incapacitated!");

	if(Player[id][Tied] == 0)
		return SendClientMessage(playerid, -1, "That player isn't tied up!");

	if(GetDistanceBetweenPlayers(playerid, id) > 6)
		return SendClientMessage(playerid, -1, "That player is too far away!");

	format(string, sizeof(string), "* %s has attempted to untie %s and succeeded.", GetNameEx(playerid), GetNameEx(id));
	NearByMessage(playerid, NICESKY, string);
	Player[id][Tied] = 0;
	SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
	TogglePlayerControllable(id, true);
	return 1;
}

command(setfrequency, playerid, params[])
{
	new frequency, string[128];

	if(sscanf(params, "d", frequency))
		return SendClientMessage(playerid, GREY, "SYNTAX: /setfrequency [id]");

	if(Player[playerid][WalkieTalkie] < 1)
		return SendClientMessage(playerid, -1, "You must purchase a Walkie Talkie from a 24/7 first.");

	if(frequency < 1 || frequency > 100000)
		return SendClientMessage(playerid, -1, "Radio frequencies must be greater than zero and less than 100,000.");

	else
	{
		Player[playerid][WalkieFrequency] = frequency;
		format(string, sizeof(string), "You have changed your frequency to #%d.", frequency);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "* %s changed their walkie talkie frequency.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);
	}

	return 1;
}

/*command(phone, playerid, params[])
{
	if(Player[playerid][PhoneN] == -1)
		return SendClientMessage(playerid, -1, "You don't own a mobile phone!");

	if(Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] == 1 || Player[playerid][Tied] >= 1)
		return SendClientMessage(playerid, -1, "You can't do that, you're incapacitated!");

	if(Player[playerid][PrisonDuration] > 0 || Player[playerid][PrisonID] > 0)
		return SendClientMessage(playerid, -1, "You can't do that while in prison!");

	if(Player[playerid][Gagged] == 1)
		return SendClientMessage(playerid, -1, "You can't do that, your mouth is covered!");

	else
	ShowPlayerDialog(playerid, 4512, DIALOG_STYLE_LIST, "Phone Menu", "Applications\nAccount Related\n", "Select", "Cancel");

	return 1;
}*/

command(freeze, playerid, params[])
{
	new id, string[128];

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /freeze [playerid]");

	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, -1, "That player isn't connected.");

	if((Player[playerid][AdminLevel] <= Player[id][AdminLevel]) && (id != playerid))
		return SendClientMessage(playerid, -1, "You can't freeze a higher level administrator.");

	if(Player[id][Cuffed] >= 1 || Player[id][Tazed] == 1 || Player[id][AdminFrozen] == 1 || Player[id][Tied] >= 1)
	{
		Player[id][Cuffed] = 0;
		Player[id][Tazed] = 0;
		Player[id][Tied] = 0;
		Player[id][AdminFrozen] = 0;
		SetPlayerHealth(id, Player[id][AdminFrozenHealth]);
		TogglePlayerControllable(id, true);
		format(string, sizeof(string), "You have been unfrozen by Admin %s.", Player[playerid][AdminName]);
		SendClientMessage(id, YELLOW, string);
		format(string, sizeof(string), "You have unfrozen %s.", GetName(id));
	}

	else
	{
		GetPlayerHealth(id, Player[id][AdminFrozenHealth]);
		Player[id][AdminFrozen] = 1;
		SetPlayerHealth(id, 500000);
		TogglePlayerControllable(id, false);
		format(string, sizeof(string), "You have been frozen by Admin %s.", Player[playerid][AdminName]);
		SendClientMessage(id, YELLOW, string);
		format(string, sizeof(string), "You have frozen %s.", GetName(id));
	}
	SendClientMessage(playerid, WHITE, string);

	return 1;
}

//Cop Related
CMD:takebadge(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 1)
		return SendClientMessage(playerid, -1, "You must be in the LSPD to use this command");

	if(Player[playerid][GroupRank] < 4)
		return SendClientMessage(playerid, -1, "You must be rank 4 or higher to use this command!");

	new target, tmp[128];

	if(sscanf(params, "u", target))
		return SendClientMessage(playerid, GREY, "SYNTAX: /takebadge [id/name]");

	if(!IsPlayerConnectedEx(target))
		return SendClientMessage(playerid, -1, "That player is offline");

	if(GetDistanceBetweenPlayers(playerid, target) > 5.0)
		return SendClientMessage(playerid, -1, "That player is too far away");

	format(tmp, sizeof(tmp), "* %s has taken away %s's badge", GetNameEx(playerid), GetNameEx(target));
	NearByMessage(playerid, NICESKY, tmp);

	Player[target][PDBadge] = 0;
	return 1;
}

CMD:givebadge(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 1 && Groups[Player[playerid][Group]][CommandTypes] != 3)
		return SendClientMessage(playerid, -1, "You must be in the LSPD to use this command");

	if(Player[playerid][GroupRank] < 4)
		return SendClientMessage(playerid, -1, "You must be rank 4 or higher to use this command!");

	new target, tmp[128], badge;

	if(sscanf(params, "ui", target, badge))
		return SendClientMessage(playerid, GREY, "SYNTAX: /givebadge [id/name] [badge]");

	if(!IsPlayerConnectedEx(target))
		return SendClientMessage(playerid, -1, "That player is offline");

	if(GetDistanceBetweenPlayers(playerid, target) > 5.0)
		return SendClientMessage(playerid, -1, "That player is too far away");

	format(tmp, sizeof(tmp), "* %s has given %s badge #%i", GetNameEx(playerid), GetNameEx(target), badge);
	NearByMessage(playerid, NICESKY, tmp);

	Player[target][PDBadge] = badge;
	return 1;
}

CMD:showbadge(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 1)
		return SendClientMessage(playerid, -1, "You must be in the LSPD to use this command");

	new target, tmp[128];

	if(sscanf(params, "u", target))
		return SendClientMessage(playerid, GREY, "SYNTAX: /showbadge [id/name]");

	if(!IsPlayerConnectedEx(target))
		return SendClientMessage(playerid, -1, "That player is offline");

	if(GetDistanceBetweenPlayers(playerid, target) > 5.0)
		return SendClientMessage(playerid, -1, "That player is too far away");

	format(tmp, sizeof(tmp), "* %s has shown %s their badge", GetNameEx(playerid), GetNameEx(target));
	NearByMessage(playerid, NICESKY, tmp);

	if(Groups[Player[playerid][Group]][CommandTypes] == 1)
		SendClientMessage(target, LSPD_COLOR, "~ [ Los Santos Police Department ] ~");
	else
		SendClientMessage(target, YELLOW, "~ [ Federal Bureau of Investigation ] ~");


	if(Groups[Player[playerid][Group]][CommandTypes] == 1){
		switch(Player[playerid][GroupRank])
		{
			case 0: format(tmp, sizeof(tmp), "~ [ %s %s Badge #%d ] ~", Groups[Player[playerid][Group]][RankName0], GetNormalNameEx(playerid), Player[playerid][PDBadge]);
			case 1: format(tmp, sizeof(tmp), "~ [ %s %s Badge #%d ] ~", Groups[Player[playerid][Group]][RankName1], GetNormalNameEx(playerid), Player[playerid][PDBadge]);
			case 2: format(tmp, sizeof(tmp), "~ [ %s %s Badge #%d ] ~", Groups[Player[playerid][Group]][RankName2], GetNormalNameEx(playerid), Player[playerid][PDBadge]);
			case 3: format(tmp, sizeof(tmp), "~ [ %s %s Badge #%d ] ~", Groups[Player[playerid][Group]][RankName3], GetNormalNameEx(playerid), Player[playerid][PDBadge]);
			case 4: format(tmp, sizeof(tmp), "~ [ %s %s Badge #%d ] ~", Groups[Player[playerid][Group]][RankName4], GetNormalNameEx(playerid), Player[playerid][PDBadge]);
			case 5: format(tmp, sizeof(tmp), "~ [ %s %s Badge #%d ] ~", Groups[Player[playerid][Group]][RankName5], GetNormalNameEx(playerid), Player[playerid][PDBadge]);
			case 6: format(tmp, sizeof(tmp), "~ [ %s %s Badge #%d ] ~", Groups[Player[playerid][Group]][RankName6], GetNormalNameEx(playerid), Player[playerid][PDBadge]);
			case 7: format(tmp, sizeof(tmp), "~ [ %s %s Badge #%d ] ~", Groups[Player[playerid][Group]][RankName7], GetNormalNameEx(playerid), Player[playerid][PDBadge]);
			case 8: format(tmp, sizeof(tmp), "~ [ %s %s Badge #%d ] ~", Groups[Player[playerid][Group]][RankName8], GetNormalNameEx(playerid), Player[playerid][PDBadge]);
			case 9: format(tmp, sizeof(tmp), "~ [ %s %s Badge #%d ] ~", Groups[Player[playerid][Group]][RankName9], GetNormalNameEx(playerid), Player[playerid][PDBadge]);
			case 10: format(tmp, sizeof(tmp), "~ [ %s %s Badge #%d ] ~", Groups[Player[playerid][Group]][RankName10], GetNormalNameEx(playerid), Player[playerid][PDBadge]);
		}
	}
	else{
		switch(Player[playerid][GroupRank])
		{
			case 0: format(tmp, sizeof(tmp), "~ [ %s %s ] ~", Groups[Player[playerid][Group]][RankName0], GetNameEx(playerid));
			case 1: format(tmp, sizeof(tmp), "~ [ %s %s ] ~", Groups[Player[playerid][Group]][RankName1], GetNameEx(playerid));
			case 2: format(tmp, sizeof(tmp), "~ [ %s %s ] ~", Groups[Player[playerid][Group]][RankName2], GetNameEx(playerid));
			case 3: format(tmp, sizeof(tmp), "~ [ %s %s ] ~", Groups[Player[playerid][Group]][RankName3], GetNameEx(playerid));
			case 4: format(tmp, sizeof(tmp), "~ [ %s %s ] ~", Groups[Player[playerid][Group]][RankName4], GetNameEx(playerid));
			case 5: format(tmp, sizeof(tmp), "~ [ %s %s ] ~", Groups[Player[playerid][Group]][RankName5], GetNameEx(playerid));
			case 6: format(tmp, sizeof(tmp), "~ [ %s %s ] ~", Groups[Player[playerid][Group]][RankName6], GetNameEx(playerid));
		}
	}

	SendClientMessage(target, GREY, tmp);
	return 1;
}

CMD:w(playerid, params[])
{
	if(GetPVarInt(playerid, "ShortCMDS") == 0)
		return cmd_whisper(playerid, params);
	else
	{
		SendClientMessage(playerid, -1, "ShortCMDS are disabled, you must use /whisper");
		return 1;
	}
}

command(whisper, playerid, params[])
{
	new id, message[170], string[255];

	sscanf(params, "ds[170]", id, message);
	if(id < MAX_PLAYERS)
	{
	    if(sscanf(params, "us[170]", id, message))
			return SendClientMessage(playerid, GREY, "SYNTAX: /whisper [playerid] [message]");

		if(!IsPlayerConnectedEx(id))
			return SendClientMessage(playerid, -1, "That player is not connected or logged in.");
			
		if(Player[id][Mask] == 1)
	    	id = -1;
	}
	else
	    id = CheckIfMasked(id);

 	if(id == -1)
 		return SendClientMessage(playerid, -1, "That player is too far away!");
 
	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, -1, "That player isn't connected!");

	if(Player[playerid][Gagged] == 1)
		return SendClientMessage(playerid, -1, "You can't do that, your mouth is covered!");

	if(Player[playerid][PrisonID] == 1)
		return SendClientMessage(playerid, WHITE, "You may not use this channel right now.");

	if(GetDistanceBetweenPlayers(playerid, id) > 2 || Spectator[id][SpecSpectatingPlayer] != -1)
		return SendClientMessage(playerid, -1, "That player is too far away!");

	else
	{
		// Whisper sent to 01234567879012345678790123: 83 characters left
		#if defined MTG_PLAGUE
		if(Player[playerid][VirusCount] >= PLAGUE_SPEECH_MIN)
			format(message, strlen(message) + 1, "%s", MixUpSentence(message, Player[playerid][VirusCount], strlen(message) + 1));
		#endif
		new splitpos = 110 - (18+strlen(GetName(playerid)));
		if(strlen(message) > splitpos)
		{
			new str1[83], str2[83];
			strsplit(message, str1, str2, splitpos);
			// strmid(str1, message, 0, 82);
			// strmid(str2, message, 82, 165);
			format(string, sizeof(string), "Whisper sent to %s: %s", GetNameEx(id), str1);
			SendClientMessage(playerid, WHISPER, string);
			format(string, sizeof(string), "Whisper sent to %s: %s", GetNameEx(id), str2);
			SendClientMessage(playerid, WHISPER, string);
			format(string, sizeof(string), "Whisper from %s: %s", GetNameEx(playerid), str1);
			SendClientMessage(id, WHISPER, string);
			format(string, sizeof(string), "Whisper from %s: %s", GetNameEx(playerid), str2);
			SendClientMessage(id, WHISPER, string);
		}

		else
		{
			format(string, sizeof(string), "Whisper sent to %s: %s", GetNameEx(id), message);
			SendClientMessage(playerid, WHISPER, string);
			format(string, sizeof(string), "Whisper from %s: %s", GetNameEx(playerid), message);
			SendClientMessage(id, WHISPER, string);
		}

		foreach(Player, i)
		{
			if(Spectator[i][SpecSpectatingPlayer] == id)
			{
				format(string, sizeof(string), "[WHISPER %s to %s] %s", GetName(playerid), GetName(id), message);
				SendClientMessage(i, WHISPER, string);
			}
			if(Spectator[i][SpecSpectatingPlayer] == playerid)
			{
				format(string, sizeof(string), "[WHISPER %s to %s] %s", GetName(playerid), GetName(id), message);
				SendClientMessage(i, WHISPER, string);
			}
		}

		format(string, sizeof(string), "* %s has whispered something to %s", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		format(string, sizeof(string), "[WHISPER] %s (%d) to %s (%d): %s", GetNameEx(playerid), playerid, GetNameEx(id), id, message);
		ICChatLog(string);
	}

	return 1;
}

command(drag, playerid, params[])
{
	new id, string[128];
	
	sscanf(params, "d", id);
	if(id < MAX_PLAYERS)
	{
	    if(sscanf(params, "u", id)) 
			return SendClientMessage(playerid, GREY, "SYNTAX: /drag [playerid]");

		if(!IsPlayerConnectedEx(id))
			return SendClientMessage(playerid, -1, "That player is not connected or logged in.");
			
		if(Player[id][Mask] == 1)
	    	id = -1;
	}
	else
	    id = CheckIfMasked(id);

 	if(id == -1)
 		return SendClientMessage(playerid, -1, "That player is too far away!");
 
	if(playerid == id)
		return SendClientMessage(playerid, -1, "You cannot drag yourself!");

	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, -1, "That player isn't connected!");

	if(GetDistanceBetweenPlayers(playerid, id) > 5)
		return SendClientMessage(playerid, -1, "That player is too far away!");

	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "You must be outside your vehicle to start dragging a player!");

	if(Player[id][AdminDuty] > 0 && Player[playerid][AdminLevel] < 1)
		return SendClientMessage(playerid, WHITE, "You can't drag an on-duty admin!");

	if(GetPVarInt(id, "BleedingOutTime") == 0)
	{
		if(Player[id][Cuffed] == 0 && Player[id][Tied] == 0)
			return SendClientMessage(playerid, -1, "You can't drag someone who isn't restrained!");

		if(Player[id][Cuffed] == 2)
			return SendClientMessage(playerid, -1, "You don't need to drag this person as they have been OOCly unfrozen.");
	}
	else
	{
		if(Groups[Player[playerid][Group]][CommandTypes] != 3)
			return SendClientMessage(playerid, -1, "You can't drag this person unless you're in the LSMD.");
	}

	if(IsPlayerInAnyVehicle(id))
		return SendClientMessage(playerid, -1, "You can't drag someone who is in a vehicle!");

	if(Player[playerid][Tied] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] == 1 || Player[playerid][AdminFrozen] == 1)
		return SendClientMessage(playerid, -1, "You can't do that right now, you're incapacitated!");

	Player[id][BeingDraggedBy] = playerid;
	format(string, sizeof(string), "You have started to drag %s.", GetName(id));
	SendClientMessage(playerid, WHITE, string);
	format(string, sizeof(string), "* %s grabs hold of %s and starts dragging them.", GetNameEx(playerid), GetNameEx(id));
	NearByMessage(playerid, NICESKY, string);
	
//	Player[id][BeingDraggedTimer] = repeat DraggingTimer[1000](id);
	return 1;
}
/*
timer DraggingTimer[1000](playerid)
{
	if(IsPlayerConnectedEx(Player[playerid][BeingDraggedBy]))
	{
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(Player[playerid][BeingDraggedBy]));
		SetPlayerInterior(playerid, GetPlayerInterior(Player[playerid][BeingDraggedBy]));
		GetPlayerPos(Player[playerid][BeingDraggedBy], Player[playerid][LastX], Player[playerid][LastY], Player[playerid][LastZ]);
		SetPlayerPos_Update(playerid, Player[playerid][LastX], Player[playerid][LastY], Player[playerid][LastZ]);
	}
	else
	{
		Player[playerid][BeingDraggedBy] = -1;
		SendClientMessage(playerid, WHITE, "The person who was dragging you has disconnected.");
		stop Player[playerid][BeingDraggedTimer];
	}
	return 1;
}
*/
command(detain, playerid, params[])
{
	new id, seat, string[128];

	sscanf(params, "dd", id, seat);
	if(id < MAX_PLAYERS)
	{
	    if(sscanf(params, "ud", id, seat))
			return SendClientMessage(playerid, GREY, "SYNTAX: /detain [playerid] [seat (1-3)]");

		if(!IsPlayerConnectedEx(id))
			return SendClientMessage(playerid, -1, "That player is not connected or logged in.");
			
		if(Player[id][Mask] == 1)
	    	id = -1;
	}
	else
	    id = CheckIfMasked(id);
	    	
 	if(id == -1)
 		return SendClientMessage(playerid, -1, "That player is too far away!");
		
	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, -1, "That player isn't connected!");

	if(GetDistanceBetweenPlayers(playerid, id) > 5)
		return SendClientMessage(playerid, -1, "That player is too far away!");

	if(Player[id][Cuffed] == 0 && Player[id][Tied] == 0)
		return SendClientMessage(playerid, -1, "You can't detain a player who isn't restrained!");

	if(Player[id][BeingDraggedBy] > -1)
		return SendClientMessage(playerid, -1, "You have to stop dragging the player before you can detain them!");

	if(seat < 1 || seat > 3)
		return SendClientMessage(playerid, -1, "Valid seat IDs are either 1, 2 or 3.");

	if(IsSeatOccupied(GetPlayerVehicleID(playerid), seat) > 0)
		return SendClientMessage(playerid, -1, "That seat is occupied!");

	if(playerid == id)
		return SendClientMessage(playerid, -1, "You can't detain yourself!");

	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, WHITE, "You can't detain somebody from inside a car!");

	if(IsPlayerInAnyVehicle(id))
		return SendClientMessage(playerid, WHITE, "You can't detain somebody who is inside a car!");

	if(Player[playerid][Tied] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] == 1 || Player[playerid][AdminFrozen] == 1)
		return SendClientMessage(playerid, -1, "You can't do that right now, you're incapacitated!");

	if(GetPVarInt(playerid, "LastDetain") > gettime())
		return SendClientMessage(playerid, -1, "You have to wait 5 seconds before you can detain another person to a vehicle");

	new Float:Pos[3];
	GetVehiclePos(Player[playerid][LastCarID], Pos[0], Pos[1], Pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 5, Pos[0], Pos[1], Pos[2]))
		return SendClientMessage(playerid, -1, "You are not close enough to your last car");

	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(Player[playerid][LastCarID], engine, lights, alarm, doors, bonnet, boot, objective);
	if(doors == 1)
		return SendClientMessage(playerid, -1, "Your last car must be unlocked to do this!");

	else
	{
		Player[id][LastCarID] = Player[playerid][LastCarID];
		PutPlayerInVehicle(id, Player[playerid][LastCarID], seat);
		format(string, sizeof(string), "* %s has been detained into the vehicle by %s.", GetNameEx(id), GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);
	}

	SetPVarInt(playerid, "LastDetain", gettime() + 5);

	return 1;
}

CMD:oocuntie(playerid, params[])
{
	new id, string[128];

	sscanf(params, "d", id);
	if(id < MAX_PLAYERS)
	{
	    if(sscanf(params, "u", id))
			return SendClientMessage(playerid, GREY, "SYNTAX: /oocuntie [playerid]");

		if(!IsPlayerConnectedEx(id))
			return SendClientMessage(playerid, -1, "That player is not connected or logged in.");
			
		if(Player[id][Mask] == 1)
	    	id = -1;
	}
	else
	    id = CheckIfMasked(id);
	if(id == -1)
		return SendClientMessage(playerid, -1, "That player is too far away!");
 
	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, -1, "That player isn't connected!");

	if(GetDistanceBetweenPlayers(playerid, id) > 5)
		return SendClientMessage(playerid, -1, "That player is too far away!");

	if(Player[id][Tied] == 0)
		return SendClientMessage(playerid, -1, "That player isn't tied!");

	if(Player[id][Tied] >= 2)
		return SendClientMessage(playerid, -1, "That player is already OOCly untied.");

	if(playerid == id)
		return SendClientMessage(playerid, -1, "You can't OOCly untie yourself!");

	if(Player[playerid][Tied] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] == 1 || Player[playerid][AdminFrozen] == 1)
		return SendClientMessage(playerid, -1, "You can't do that right now, you're incapacitated!");

	Player[id][Tied] = 2;
	TogglePlayerControllable(id, true);
	ClearAnimations(id);
	format(string, sizeof(string), "You have OOCly untied %s.", GetName(id));
	SendClientMessage(playerid, -1, string);
	format(string, sizeof(string), "You have been OOCly untied by %s.", GetName(playerid));
	SendClientMessage(id, -1, string);
	return 1;
}

command(tie, playerid, params[])
{
	new id, string[128];

	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /tie [playerid]");

	sscanf(params, "d", id);
	if(id < MAX_PLAYERS)
	{
	    if(sscanf(params, "u", id))
			return SendClientMessage(playerid, GREY, "SYNTAX: /tie [playerid]");

		if(!IsPlayerConnectedEx(id))
			return SendClientMessage(playerid, -1, "That player is not connected or logged in.");
			
		if(Player[id][Mask] == 1)
	    	id = -1;
	}
	else
	    id = CheckIfMasked(id);
 	if(id == -1)
 		return SendClientMessage(playerid, -1, "That player is too far away!");
 
	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, -1, "That player isn't connected!");

	if(GetDistanceBetweenPlayers(playerid, id) > 5)
		return SendClientMessage(playerid, -1, "That player is too far away!");

	if(Player[id][Tied] >= 1 || Player[id][Cuffed] >= 1)
		return SendClientMessage(playerid, -1, "That player is already incapacitated!");

	if(playerid == id)
		return SendClientMessage(playerid, -1, "You can't tie yourself up!");

	if((GetPlayerVehicleID(playerid) != GetPlayerVehicleID(id) || GetPlayerState(playerid) != 2) && GetPlayerSpecialAction(id) != SPECIAL_ACTION_HANDSUP)
		return SendClientMessage(playerid, -1, "That player doesn't have their hands up or you're not in the same vehicle as them.");

	if(Player[playerid][Tied] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] == 1 || Player[playerid][AdminFrozen] == 1)
		return SendClientMessage(playerid, -1, "You can't do that right now, you're incapacitated!");

	if(Player[playerid][Rope] < 1)
		return SendClientMessage(playerid, -1, "You don't have any rope!");

	if(Player[id][AdminDuty] > 0 && Player[playerid][AdminLevel] < 1)
		return SendClientMessage(playerid, WHITE, "You can't tie an on-duty admin!");

	format(string, sizeof(string), "* %s has attempted to tie %s and succeeded.", GetNameEx(playerid), GetNameEx(id));
	NearByMessage(playerid, NICESKY, string);
	Player[id][Tied] = 1;
	TogglePlayerControllable(id, false);
	Player[playerid][Rope]--;
	GetPlayerHealth(id, Player[id][AdminFrozenHealth]);
	SetPlayerSpecialAction(id, SPECIAL_ACTION_CUFFED);

	foreach(Player, i)
	{
		if(Player[i][BeingDraggedBy] == id)
		{
			format(string, sizeof(string), "* %s has stopped dragging %s.", GetNameEx(id), GetNameEx(i));
			NearByMessage(id, NICESKY, string);
			Player[i][BeingDraggedBy] = -1;
			
	//		stop Player[i][BeingDraggedTimer];
			break;
		}
	}
	return 1;
}

stock IsGroupSkin(skinid)
{
	for(new i = 0; i < MAX_GROUPS; i++)
	{
		if(Groups[i][Skin0] == skinid || Groups[i][Skin1] == skinid || Groups[i][Skin2] == skinid || Groups[i][Skin3] == skinid || Groups[i][Skin4] == skinid || Groups[i][Skin5] == skinid || Groups[i][Skin6] == skinid || Groups[i][Skin7] == skinid || Groups[i][Skin8] == skinid || Groups[i][Skin9] == skinid || Groups[i][Skin10] == skinid)
			return i;
	}
	return 0;
}

command(ban, playerid, params[])
{
	new id, reason[128], string[128];
	
	if(Player[playerid][AdminLevel] < 3)
		return 1;

	if(sscanf(params, "us[128]", id, reason))
		return SendClientMessage(playerid, GREY, "SYNTAX: /ban [playerid] [reason]");

	if(!IsPlayerConnected(id))
		return SendClientMessage(playerid, -1, "That player isn't connected!");

	if(Player[playerid][AdminLevel] < Player[id][AdminLevel])
		return SendClientMessage(playerid, -1, "You cannot ban a higher level administrator!");

	else
	{
		new IP[21];
		GetPlayerIp(id, IP, sizeof(IP));
		format(string, sizeof(string), "You have successfully banned %s. Defined reason: \"%s\".", Player[id][NormalName], reason);
		SendClientMessage(playerid, WHITE, string);
		Player[playerid][AdminActions]++;
		format(string, sizeof(string), "%s | %s | Banned for \"%s\" | %s",  Player[id][NormalName], IP, reason, Player[playerid][AdminName]);
		BanLog(string);
		format(string, sizeof(string), "Ban: %s has banned %s. Defined reason: \"%s\".", Player[playerid][AdminName],  Player[id][NormalName], reason);
		SendToAdmins(LIGHTRED, string, 0);
		NearByMessage(id, LIGHTRED, string);
		AdminActionsLog(string);
		LogLastBan(Player[id][NormalName], IP);
		Player[id][Banned] = 1;
		format(Player[id][BannedReason], 128, "%s", reason);
		format(Player[id][BannedBy], 128, "%s", Player[playerid][AdminName]);
		BanMessage(id);
	
		KickEx(id);
	}

	return 1;
}

command(givecheck, playerid, params[])
{
	new id, money, string[255];

	sscanf(params, "dd", id, money);
	if(id < MAX_PLAYERS)
	{
	    if(sscanf(params, "ud", id, money))
			return SendClientMessage(playerid, GREY, "SYNTAX: /givecheck [playerid] [amount]");

		if(!IsPlayerConnectedEx(id))
			return SendClientMessage(playerid, -1, "That player is not connected or logged in.");
			
		if(Player[id][Mask] == 1)
	    	id = -1;
	}
	else
	    id = CheckIfMasked(id);
 	if(id == -1)
		return SendClientMessage(playerid, -1, "You're too far away!");

	if(money < 1 || money > 150000)
		return SendClientMessage(playerid, -1, "You can't write a check for that amount!");

	if(money > Player[playerid][BankMoney])
		return SendClientMessage(playerid, -1, "You don't have that much money in your bank account! Visit https://crearoleplay.com to purchase additional In-Game currency.");

	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, -1, "That player isn't connected!");

	if(GetDistanceBetweenPlayers(playerid, id) > 5)
		return SendClientMessage(playerid, -1, "You're too far away!");

	if(Player[playerid][PlayingHours] < 2)
		return SendClientMessage(playerid, -1, "You cannot give money to someone while you have less than 2 playing hours.");
		
	if(Player[id][PlayingHours] < 2)
		return SendClientMessage(playerid, -1, "You cannot give money to someone who has less than 2 playing hours.");

	else
	{
		format(string, sizeof(string), "You have given $%s to %s. This has been taken from your bank balance.", IntToFormattedStr(money), GetNameEx(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "You have been given a check for $%s from %s.", IntToFormattedStr(money), GetNameEx(playerid));
		SendClientMessage(id, WHITE, string);
		SendClientMessage(id, WHITE, "You must visit the bank and use /redeemcheck to redeem the check balance.");

		if(Player[playerid][PlayingHours] < 5 && money >= 999 && Player[playerid][AdminLevel] < 1)
		{
			format(string, sizeof(string), "WARNING: %s may possibly be money-farming, they wrote a check for $%s to %s (less than 5 playing hours)", GetName(playerid), IntToFormattedStr(money), GetName(id));
			SendToAdmins(ADMINORANGE, string, 0);
			WarningLog(string);
			LastFarm = playerid;
		}

		new IP1[128], IP2[128];
		GetPlayerIp(playerid, IP1, sizeof(IP1));
		GetPlayerIp(id, IP2, sizeof(IP2));
		format(string, sizeof(string), "[CHECK] %s (IP: %s) wrote a check for $%s ($%s) to %s (IP: %s) ($%s).", GetName(playerid), IP1, IntToFormattedStr(money), IntToFormattedStr(Player[playerid][BankMoney] - money), GetName(id), IP2, IntToFormattedStr(Player[id][CheckBalance] + money));
		MoneyLog(string);
		format(string, sizeof(string), "* %s signs a check and gives it to %s.", GetNameEx(playerid), GetNameEx(id));
		NearByMessage(playerid, NICESKY, string);
		Player[playerid][BankMoney] -= money;
		Player[id][CheckBalance] += money;
	}

	return 1;
}

CMD:pmblock(playerid, params[])
{
	new target;
	if(sscanf(params, "u", target))
		return SendClientMessage(playerid, -1, "SYNTAX: /pmblock [playerid]");

	if(!IsPlayerConnectedEx(target))
		return SendClientMessage(playerid, -1, "That player is no longer connected");

	new string[128];
	if(BlockedPM[playerid][target] == true)
	{
		format(string, sizeof(string), "You have unblocked %s from messaging you.", GetName(target));
		SendClientMessage(playerid, -1, string);
		BlockedPM[playerid][target] = false;
	}
	else
	{
		format(string, sizeof(string), "You have blocked %s from messaging you! (Temporary)", GetName(target));
		SendClientMessage(playerid, -1, string);
		BlockedPM[playerid][target] = true;
	}
	return 1;
}

command(pm, playerid, params[])
{
	if(GetPlayerToggle(playerid, TOGGLE_PMS) == true && Player[playerid][AdminLevel] < 2)
		return SendClientMessage(playerid, -1, "You can't PM when your PM's are toggled off. (/toggles)");

	new id, message[160], string[255];

	if(sscanf(params, "us[160]", id, message))
		return SendClientMessage(playerid, GREY, "SYNTAX: /pm [playerid] [message]");

	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, -1, "That player isn't connected!");

	if(strlen(message) < 1)
		return SendClientMessage(playerid, GREY, "SYNTAX: /pm [playerid] [message]");

	if(GetPlayerToggle(id, TOGGLE_PMS) == true && Player[playerid][AdminLevel] < 2)
		return SendClientMessage(playerid, -1, "That player has disabled PMs!");

	if(Player[id][AFKStat] == 1)
		return SendClientMessage(playerid, -1, "This administrator is away from their keyboard right now.");

	if(BlockedPM[id][playerid] == true && Player[playerid][AdminLevel] < 2)
		return SendClientMessage(playerid, -1, "That player has you blocked!");

	if(BlockedPM[playerid][id] == true && Player[playerid][AdminLevel] < 2)
		return SendClientMessage(playerid, -1, "You can't PM a player you have blocked!");

	else
	{
		//You have sent 012345678901234567890123 (ID: 012): 78 characters remaining
		new splitpos = 110 - (30+strlen(GetName(playerid)));
		if(strlen(message) > splitpos)
		{
			new str1[78], str2[78];
			strsplit(message, str1, str2, splitpos);
			// strmid(str1, message, 0, 77);
			// strmid(str2, message, 77, 155);
			format(string, sizeof(string), "You have sent %s (ID: %d): %s ", GetName(id), id, str1);
			SendClientMessage(playerid, PLAYERCOM, string);
			format(string, sizeof(string), "You have sent %s (ID: %d): %s ", GetName(id), id, str2);
			SendClientMessage(playerid, PLAYERCOM, string);
			if(Player[playerid][Mask] == 1)
				format(string, sizeof(string), "PM from %s (ID: %d): %s", Player[playerid][NormalName], playerid, str1);
			else
				format(string, sizeof(string), "PM from %s (ID: %d): %s", GetName(playerid), playerid, str1);
			SendClientMessage(id, PLAYERCOM_SEND, string);
			if(Player[playerid][Mask] == 1)
				format(string, sizeof(string), "PM from %s (ID: %d): %s", Player[playerid][NormalName], playerid, str2);
			else
				format(string, sizeof(string), "PM from %s (ID: %d): %s", GetName(playerid), playerid, str2);
			SendClientMessage(id, PLAYERCOM_SEND, string);
		}

		else
		{
			format(string, sizeof(string), "You have sent %s (ID: %d): %s ", GetName(id), id, message);
			SendClientMessage(playerid, PLAYERCOM, string);
			if(Player[playerid][Mask] == 1)
				format(string, sizeof(string), "PM from %s (ID: %d): %s", Player[playerid][NormalName], playerid, message);
			else
				format(string, sizeof(string), "PM from %s (ID: %d): %s", GetName(playerid), playerid, message);
			SendClientMessage(id, PLAYERCOM_SEND, string);
			format(string, sizeof(string), "PM: %s (ID: %d) to %s (ID: %d): %s", GetName(playerid), playerid, GetName(id), id, message);
		}
		/*
		foreach(Player, i)
		{
			if(Spectator[i][SpecSpectatingPlayer] == id)
			{
				format(string, sizeof(string), "[PM %s to %s] %s", GetName(playerid), GetName(id), message);
				SendClientMessage(i, PLAYERCOM_SEND, string);
			}
			if(Spectator[i][SpecSpectatingPlayer] == playerid)
			{
				format(string, sizeof(string), "[PM %s to %s] %s", GetName(playerid), GetName(id), message);
				SendClientMessage(i, PLAYERCOM, string);
			}
		}
		*/
		format(string, sizeof(string), "[PM] %s (%d) to %s (%d): %s", GetName(playerid), playerid, GetName(id), id, message);
		PMsLog(string);
	}

	return 1;
}

command(confiscate, playerid, params[])
{
	new id, item[128], string[128];

	if(Groups[Player[playerid][Group]][CommandTypes] != 1 && Player[playerid][AdminLevel] < 2)
		return 1;
	
	sscanf(params, "ds[128]", id, item);
	if(id < MAX_PLAYERS)
	{
	    if(sscanf(params, "us[128]", id, item))
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /confiscate [playerid] [item]");
			SendClientMessage(playerid, GREY, "Items: cocaine, streetmats, standardmats, militarymats, phone, pot, walkietalkie, weapons, speed, potseeds, armour");
			return SendClientMessage(playerid, GREY, "Items: prisontickets, prisonweapons, cigarettes, dice, lighter");
		}
		
		if(!IsPlayerConnectedEx(id))
			return SendClientMessage(playerid, -1, "That player is not connected or logged in.");
			
		if(Player[id][Mask] == 1)
	    	id = -1;
	}
	else
	    id = CheckIfMasked(id);

 	if(id == -1)
 		return SendClientMessage(playerid, -1, "You're too far away!");
 
	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, -1, "That player isn't connected!");

	if(GetDistanceBetweenPlayers(playerid, id) > 5 && !Player[playerid][AdminDuty])
		return SendClientMessage(playerid, -1, "You're too far away!");

	if(playerid == id)
		return SendClientMessage(playerid, -1, "You can't confiscate items from yourself!");

	else
	{
		if(!strcmp(item, "cocaine", true))
		{
			if(Player[id][Cocaine] > 0)
			{
				if(Player[playerid][AdminLevel] > 1)
				{
					format(string, sizeof(string), "%s has confiscated %s's cocaine (%d grams).", Player[playerid][AdminName], GetName(id), Player[id][Cocaine]);
					AdminActionsLog(string);
					format(string, sizeof(string), "[ADMIN] %s has confiscated %s's cocaine (%d grams) (%d to %d).", Player[playerid][AdminName], GetName(id), Player[id][Cocaine], Player[playerid][Cocaine], Player[playerid][Cocaine]+Player[id][Cocaine]);
					StatLog(string);
				}

				else
				{
					format(string, sizeof(string), "[LEO] %s has confiscated %s's cocaine (%d grams) (%d to %d).", GetName(playerid), GetName(id), Player[id][Cocaine], Player[playerid][Cocaine], Player[playerid][Cocaine]+Player[id][Cocaine]);
					StatLog(string);
				}

				format(string, sizeof(string), "* %s has confiscated %s's cocaine (%d grams).", GetNameEx(playerid), GetNameEx(id), Player[id][Cocaine]);
				NearByMessage(playerid, NICESKY, string);
				Player[playerid][Cocaine] += Player[id][Cocaine];
				format(string, sizeof(string), "You have confiscated %s's cocaine (%d grams).", GetNameEx(id), Player[id][Cocaine]);
				Player[id][Cocaine] = 0;
				SendClientMessage(playerid, WHITE, string);
				format(string, sizeof(string), "%s has confiscated your cocaine.", GetNameEx(playerid));
				SendClientMessage(id, WHITE, string);
			}

			else
			SendClientMessage(playerid, WHITE, "There is no cocaine to confiscate!");
		}

		else if(!strcmp(item, "streetmats", true))
		{
			if(Player[id][Materials][0] > 0)
			{
				if(Player[playerid][AdminLevel] > 1)
				{
					format(string, sizeof(string), "%s has confiscated %s's street grade materials (%d street grade  materials).", Player[playerid][AdminName], GetName(id), Player[id][Materials][0]);
					AdminActionsLog(string);
					format(string, sizeof(string), "[ADMIN] %s has confiscated %s's street grade materials (%d materials) (%d to %d).", Player[playerid][AdminName], GetName(id), Player[id][Materials][0], Player[playerid][Materials][0], Player[playerid][Materials][0]+Player[id][Materials][0]);
					StatLog(string);
				}

				else
				{
					format(string, sizeof(string), "[LEO] %s has confiscated %s's street grade materials (%d street grade materials) (%d to %d).", GetName(playerid), GetName(id), Player[id][Materials][0], Player[playerid][Materials][0], Player[playerid][Materials][0]+Player[id][Materials][0]);
					StatLog(string);
				}

				format(string, sizeof(string), "* %s has confiscated %s's street grade materials (%d street grade materials).", GetNameEx(playerid), GetNameEx(id), Player[id][Materials][0]);
				NearByMessage(playerid, NICESKY, string);
				Player[playerid][Materials][0] += Player[id][Materials][0];
				format(string, sizeof(string), "You have confiscated %s's street grade materials (%d street grade materials).", GetNameEx(id), Player[id][Materials][0]);
				Player[id][Materials][0] = 0;
				SendClientMessage(playerid, WHITE, string);
				format(string, sizeof(string), "%s has confiscated your street grade materials.", GetNameEx(playerid));
				SendClientMessage(id, WHITE, string);
			}

			else
			SendClientMessage(playerid, WHITE, "There are no street grade materials to confiscate!");
		}
		else if(!strcmp(item, "standardmats", true))
		{
			if(Player[id][Materials][1] > 0)
			{
				if(Player[playerid][AdminLevel] > 1)
				{
					format(string, sizeof(string), "%s has confiscated %s's standard grade materials (%d standard grade  materials).", Player[playerid][AdminName], GetName(id), Player[id][Materials][1]);
					AdminActionsLog(string);
					format(string, sizeof(string), "[ADMIN] %s has confiscated %s's standard grade materials (%d standard grade materials) (%d to %d).", Player[playerid][AdminName], GetName(id), Player[id][Materials][1], Player[playerid][Materials][1], Player[playerid][Materials][1]+Player[id][Materials][1]);
					StatLog(string);
				}

				else
				{
					format(string, sizeof(string), "[LEO] %s has confiscated %s's standard grade materials (%d standard grade materials) (%d to %d).", GetName(playerid), GetName(id), Player[id][Materials][1], Player[playerid][Materials][1], Player[playerid][Materials][1]+Player[id][Materials][1]);
					StatLog(string);
				}

				format(string, sizeof(string), "* %s has confiscated %s's standard grade materials (%d standard grade materials).", GetNameEx(playerid), GetNameEx(id), Player[id][Materials][1]);
				NearByMessage(playerid, NICESKY, string);
				Player[playerid][Materials][1] += Player[id][Materials][1];
				format(string, sizeof(string), "You have confiscated %s's standard grade materials (%d standard grade materials).", GetNameEx(id), Player[id][Materials][1]);
				Player[id][Materials][1] = 0;
				SendClientMessage(playerid, WHITE, string);
				format(string, sizeof(string), "%s has confiscated your standard grade materials.", GetNameEx(playerid));
				SendClientMessage(id, WHITE, string);
			}

			else
			SendClientMessage(playerid, WHITE, "There are no standard grade materials to confiscate!");
		}
		else if(!strcmp(item, "militarymats", true))
		{
			if(Player[id][Materials][2] > 0)
			{
				if(Player[playerid][AdminLevel] > 1)
				{
					format(string, sizeof(string), "%s has confiscated %s's military grade materials (%d military grade  materials).", Player[playerid][AdminName], GetName(id), Player[id][Materials][2]);
					AdminActionsLog(string);
					format(string, sizeof(string), "[ADMIN] %s has confiscated %s's military grade materials (%d military grade materials) (%d to %d).", Player[playerid][AdminName], GetName(id), Player[id][Materials][2], Player[playerid][Materials][2], Player[playerid][Materials][2]+Player[id][Materials][2]);
					StatLog(string);
				}

				else
				{
					format(string, sizeof(string), "[LEO] %s has confiscated %s's military grade materials (%d military grade materials) (%d to %d).", GetName(playerid), GetName(id), Player[id][Materials][2], Player[playerid][Materials][2], Player[playerid][Materials][2]+Player[id][Materials][2]);
					StatLog(string);
				}

				format(string, sizeof(string), "* %s has confiscated %s's military grade materials (%d military grade materials).", GetNameEx(playerid), GetNameEx(id), Player[id][Materials][2]);
				NearByMessage(playerid, NICESKY, string);
				Player[playerid][Materials][2] += Player[id][Materials][2];
				format(string, sizeof(string), "You have confiscated %s's military grade materials (%d military grade materials).", GetNameEx(id), Player[id][Materials][2]);
				Player[id][Materials][2] = 0;
				SendClientMessage(playerid, WHITE, string);
				format(string, sizeof(string), "%s has confiscated your military grade materials.", GetNameEx(playerid));
				SendClientMessage(id, WHITE, string);
			}

			else
			SendClientMessage(playerid, WHITE, "There are no military grade materials to confiscate!");
		}
		else if(!strcmp(item, "phone", true))
		{
			if(!PlayerOwnsPhone(playerid))
				SendClientMessage(playerid, WHITE, "There is no phone to confiscate!");

			else
			{
				if(Player[playerid][AdminLevel] > 1)
				{
					format(string, sizeof(string), "%s has confiscated %s's phone.", Player[playerid][AdminName], GetName(id));
					AdminActionsLog(string);
					format(string, sizeof(string), "[ADMIN] %s has confiscated %s's phone (%d to -1).", Player[playerid][AdminName], GetName(id), Player[id][PhoneN]);
					StatLog(string);
				}

				else
				{
					format(string, sizeof(string), "[LEO] %s has confiscated %s's phone(s) (%d to -1).", GetName(playerid), GetName(id), Player[id][PhoneN]);
					StatLog(string);
				}

				format(string, sizeof(string), "* %s has confiscated %s's phone(s).", GetNameEx(playerid), GetNameEx(id));
				NearByMessage(playerid, NICESKY, string);
				format(string, sizeof(string), "%s has confiscated your phone(s).", GetNameEx(playerid));
				SendClientMessage(id, WHITE, string);

				mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE phones SET owner = '%e' WHERE owner = '%e'", Player[playerid][NormalName], Player[id][NormalName]);
				mysql_query(MYSQL_MAIN, string, false);
			}
		}

		else if(!strcmp(item, "pot", true))
		{
			if(Player[id][Pot] > 0)
			{
				if(Player[playerid][AdminLevel] > 1)
				{
					format(string, sizeof(string), "%s has confiscated %s's pot (%d grams).", Player[playerid][AdminName], GetName(id), Player[id][Pot]);
					AdminActionsLog(string);
					format(string, sizeof(string), "[ADMIN] %s has confiscated %s's pot (%d grams) (%d to %d).", Player[playerid][AdminName], GetName(id), Player[id][Pot], Player[playerid][Pot], Player[playerid][Pot]+Player[id][Pot]);
					StatLog(string);
				}

				else
				{
					format(string, sizeof(string), "[LEO] %s has confiscated %s's pot (%d grams) (%d to %d).", GetName(playerid), GetName(id), Player[id][Pot], Player[playerid][Pot], Player[playerid][Pot]+Player[id][Pot]);
					StatLog(string);
				}

				format(string, sizeof(string), "* %s has confiscated %s's pot (%d grams).", GetNameEx(playerid), GetNameEx(id), Player[id][Pot]);
				NearByMessage(playerid, NICESKY, string);
				Player[playerid][Pot] += Player[id][Pot];
				format(string, sizeof(string), "You have confiscated %s's pot (%d grams).", GetNameEx(id), Player[id][Pot]);
				Player[id][Pot] = 0;
				SendClientMessage(playerid, WHITE, string);
				format(string, sizeof(string), "%s has confiscated your pot.", GetNameEx(playerid));
				SendClientMessage(id, WHITE, string);
			}

			else
			SendClientMessage(playerid, WHITE, "There is no Pot to confiscate!");
		}

		else if(!strcmp(item, "speed", true))
		{
			if(Player[id][Speed] > 0)
			{
				if(Player[playerid][AdminLevel] > 1)
				{
					format(string, sizeof(string), "%s has confiscated %s's speed (%d pills).", Player[playerid][AdminName], GetName(id), Player[id][Speed]);
					AdminActionsLog(string);
					format(string, sizeof(string), "[ADMIN] %s has confiscated %s's speed (%d pills) (%d to %d).", Player[playerid][AdminName], GetName(id), Player[id][Speed], Player[playerid][Speed], Player[playerid][Speed]+Player[id][Speed]);
					StatLog(string);
				}

				else
				{
					format(string, sizeof(string), "[LEO] %s has confiscated %s's speed (%d pills) (%d to %d).", GetName(playerid), GetName(id), Player[id][Speed], Player[playerid][Speed], Player[playerid][Speed]+Player[id][Speed]);
					StatLog(string);
				}

				format(string, sizeof(string), "* %s has confiscated %s's speed (%d pills).", GetNameEx(playerid), GetNameEx(id), Player[id][Speed]);
				NearByMessage(playerid, NICESKY, string);
				Player[playerid][Speed] += Player[id][Speed];
				format(string, sizeof(string), "You have confiscated %s's speed (%d pills).", GetNameEx(id), Player[id][Speed]);
				Player[id][Speed] = 0;
				SendClientMessage(playerid, WHITE, string);
				format(string, sizeof(string), "%s has confiscated your speed.", GetNameEx(playerid));
				SendClientMessage(id, WHITE, string);
			}

			else
			SendClientMessage(playerid, WHITE, "There is no speed to confiscate!");
		}

		else if(!strcmp(item, "potseeds", true))
		{
			if(Player[id][PotSeeds] > 0)
			{
				if(Player[playerid][AdminLevel] > 1)
				{
					format(string, sizeof(string), "%s has confiscated %s's pot seeds (%d seeds).", Player[playerid][AdminName], GetName(id), Player[id][PotSeeds]);
					AdminActionsLog(string);
					format(string, sizeof(string), "[ADMIN] %s has confiscated %s's pot seeds (%d seeds) (%d to %d).", Player[playerid][AdminName], GetName(id), Player[id][PotSeeds], Player[playerid][PotSeeds], Player[playerid][PotSeeds]+Player[id][PotSeeds]);
					StatLog(string);
				}

				else
				{
					format(string, sizeof(string), "[LEO] %s has confiscated %s's pot seeds (%d seeds) (%d to %d).", GetName(playerid), GetName(id), Player[id][PotSeeds], Player[playerid][PotSeeds], Player[playerid][PotSeeds]+Player[id][PotSeeds]);
					StatLog(string);
				}

				format(string, sizeof(string), "* %s has confiscated %s's pot seeds (%d seeds).", GetNameEx(playerid), GetNameEx(id), Player[id][PotSeeds]);
				NearByMessage(playerid, NICESKY, string);
				Player[playerid][PotSeeds] += Player[id][PotSeeds];
				format(string, sizeof(string), "You have confiscated %s's pot seeds (%d seeds).", GetNameEx(id), Player[id][PotSeeds]);
				Player[id][PotSeeds] = 0;
				SendClientMessage(playerid, WHITE, string);
				format(string, sizeof(string), "%s has confiscated your pot seeds.", GetNameEx(playerid));
				SendClientMessage(id, WHITE, string);
			}

			else
			SendClientMessage(playerid, WHITE, "There is no pot seeds to confiscate!");
		}

		else if(!strcmp(item, "walkietalkie", true))
		{
			if(Player[id][WalkieTalkie] < 1)
				SendClientMessage(playerid, WHITE, "There is no walkietalkie to confiscate!");

			else
			{
				if(Player[playerid][AdminLevel] > 1)
				{
					format(string, sizeof(string), "%s has confiscated %s's walkie talkie.", Player[playerid][AdminName], GetName(id));
					AdminActionsLog(string);
					format(string, sizeof(string), "[ADMIN] %s has confiscated %s's walkie talkie.", Player[playerid][AdminName], GetName(id));
					StatLog(string);
				}

				else
				{
					format(string, sizeof(string), "[LEO] %s has confiscated %s's walkie talkie.", GetName(playerid), GetName(id));
					StatLog(string);
				}

				format(string, sizeof(string), "* %s has confiscated %s's walkie talkie.", GetNameEx(playerid), GetNameEx(id));
				NearByMessage(playerid, NICESKY, string);
				Player[id][WalkieTalkie] = 0;
				Player[id][WalkieFrequency] = 0;
				format(string, sizeof(string), "%s has confiscated your walkie talkie.", GetNameEx(playerid));
				SendClientMessage(id, WHITE, string);
				format(string, sizeof(string), "You have taken %s's WalkieTalkie (#%i)", GetNameEx(id), Player[id][WalkieFrequency]);
				SendClientMessage(playerid, -1, string);
			}
		}

		else if(!strcmp(item, "weapons", true))
		{
			if(Player[playerid][AdminLevel] > 1)
			{
				format(string, sizeof(string), "%s has confiscated %s's weapons.", Player[playerid][AdminName], GetName(id));
				AdminActionsLog(string);
				format(string, sizeof(string), "[ADMIN] %s has confiscated %s's weapons.", Player[playerid][AdminName], GetName(id));
				StatLog(string);
			}

			else
			{
				format(string, sizeof(string), "[LEO] %s has confiscated %s's weapons.", GetName(playerid), GetName(id));
				StatLog(string);
			}

			format(string, sizeof(string), "* %s has confiscated %s's weapons.", GetNameEx(playerid), GetNameEx(id));
			NearByMessage(playerid, NICESKY, string);
			ResetPlayerWeaponsEx(id);
			format(string, sizeof(string), "%s has confiscated your weapons.", GetNameEx(playerid));
			SendClientMessage(id, WHITE, string);
		}
		else if(!strcmp(item, "prisontickets", true))
		{
			if(Player[playerid][AdminLevel] > 1)
			{
				format(string, sizeof(string), "%s has confiscated %s's prison tickets.", Player[playerid][AdminName], GetName(id));
				AdminActionsLog(string);
				format(string, sizeof(string), "[ADMIN] %s has confiscated %s's prison tickets.", Player[playerid][AdminName], GetName(id));
				StatLog(string);
			}

			else
			{
				format(string, sizeof(string), "[LEO] %s has confiscated %s's prison tickets.", GetName(playerid), GetName(id));
				StatLog(string);
			}

			format(string, sizeof(string), "* %s has confiscated %s's prison tickets.", GetNameEx(playerid), GetNameEx(id));
			NearByMessage(playerid, NICESKY, string);
			Player[id][PrisonTickets] = 0;
			format(string, sizeof(string), "%s has confiscated your prison tickets.", GetNameEx(playerid));
			SendClientMessage(id, WHITE, string);
		}
		else if(!strcmp(item, "prisonweapons", true))
		{
			if(Player[playerid][AdminLevel] > 1)
			{
				format(string, sizeof(string), "%s has confiscated %s's prison weapons.", Player[playerid][AdminName], GetName(id));
				AdminActionsLog(string);
				format(string, sizeof(string), "[ADMIN] %s has confiscated %s's prison weapons.", Player[playerid][AdminName], GetName(id));
				StatLog(string);
			}

			else
			{
				format(string, sizeof(string), "[LEO] %s has confiscated %s's prison weapons.", GetName(playerid), GetName(id));
				StatLog(string);
			}

			format(string, sizeof(string), "* %s has confiscated %s's prison weapons.", GetNameEx(playerid), GetNameEx(id));
			NearByMessage(playerid, NICESKY, string);
			Player[id][PrisonScrewdriver] = 0;
			Player[id][PrisonShank] = 0;
			Player[id][PrisonRazor] = 0;
			format(string, sizeof(string), "%s has confiscated your prison weapons.", GetNameEx(playerid));
			SendClientMessage(id, WHITE, string);
		}
		else if(!strcmp(item, "cigarettes", true))
		{
			if(Player[id][Cigarettes] > 0)
			{
				if(Player[playerid][AdminLevel] > 1)
				{
					format(string, sizeof(string), "%s has confiscated %s's cigarettes (%d).", Player[playerid][AdminName], GetName(id), Player[id][Cigarettes]);
					AdminActionsLog(string);
					format(string, sizeof(string), "[ADMIN] %s has confiscated %s's cigarettes (%d).", Player[playerid][AdminName], GetName(id), Player[id][Cigarettes]);
					StatLog(string);
				}

				else
				{
					format(string, sizeof(string), "[LEO] %s has confiscated %s's cigarettes (%d).", GetName(playerid), GetName(id), Player[id][Cigarettes]);
					StatLog(string);
				}

				format(string, sizeof(string), "* %s has confiscated %s's cigarettes (%d).", GetNameEx(playerid), GetNameEx(id), Player[id][Cigarettes]);
				NearByMessage(playerid, NICESKY, string);
				format(string, sizeof(string), "You have confiscated %s's cigarettes (%d).", GetNameEx(id), Player[id][Cigarettes]);
				Player[id][Cigarettes] = 0;
				SendClientMessage(playerid, WHITE, string);
				format(string, sizeof(string), "%s has confiscated your cigarettes.", GetName(playerid));
				SendClientMessage(id, WHITE, string);
			}

			else
			SendClientMessage(playerid, WHITE, "There is no cigarettes to confiscate!");
		}
		else if(!strcmp(item, "dice", true))
		{
			if(Player[playerid][AdminLevel] > 1)
			{
				format(string, sizeof(string), "%s has confiscated %s's dice.", Player[playerid][AdminName], GetName(id));
				AdminActionsLog(string);
				format(string, sizeof(string), "[ADMIN] %s has confiscated %s's dice.", Player[playerid][AdminName], GetName(id));
				StatLog(string);
			}

			else
			{
				format(string, sizeof(string), "[LEO] %s has confiscated %s's dice.", GetName(playerid), GetName(id));
				StatLog(string);
			}

			format(string, sizeof(string), "* %s has confiscated %s's dice.", GetNameEx(playerid), GetNameEx(id));
			NearByMessage(playerid, NICESKY, string);
			Player[id][PrisonDice] = 0;
			format(string, sizeof(string), "%s has confiscated your dice.", GetNameEx(playerid));
			SendClientMessage(id, WHITE, string);
		}
		else if(!strcmp(item, "lighter", true))
		{
			if(Player[playerid][AdminLevel] > 1)
			{
				format(string, sizeof(string), "%s has confiscated %s's lighter.", Player[playerid][AdminName], GetName(id));
				AdminActionsLog(string);
				format(string, sizeof(string), "[ADMIN] %s has confiscated %s's lighter.", Player[playerid][AdminName], GetName(id));
				StatLog(string);
			}

			else
			{
				format(string, sizeof(string), "[LEO] %s has confiscated %s's lighter.", GetName(playerid), GetName(id));
				StatLog(string);
			}

			format(string, sizeof(string), "* %s has confiscated %s's lighter.", GetNameEx(playerid), GetNameEx(id));
			NearByMessage(playerid, NICESKY, string);
			Player[id][PrisonLighter] = 0;
			format(string, sizeof(string), "%s has confiscated your lighter.", GetNameEx(playerid));
			SendClientMessage(id, WHITE, string);
		}
		
		else if(!strcmp(item, "Armour", true))
		{
			if(Player[id][HasArmour] < 1)
				SendClientMessage(playerid, WHITE, "There is no armour to confiscate!");

			else
			{
				if(Player[playerid][AdminLevel] > 1)
				{
					format(string, sizeof(string), "%s has confiscated %s's armour.", Player[playerid][AdminName], GetName(id));
					AdminActionsLog(string);
					format(string, sizeof(string), "[ADMIN] %s has confiscated %s's armour.", Player[playerid][AdminName], GetName(id));
					StatLog(string);
				}

				else
				{
					format(string, sizeof(string), "[LEO] %s has confiscated %s's armour.", GetName(playerid), GetName(id));
					StatLog(string);
				}

				format(string, sizeof(string), "* %s has confiscated %s's kevlar vest.", GetNameEx(playerid), GetNameEx(id));
				NearByMessage(playerid, NICESKY, string);
				Player[id][HasArmour] = 0;
				format(string, sizeof(string), "%s has confiscated your armour.", GetNameEx(playerid));
				SendClientMessage(id, WHITE, string);
				format(string, sizeof(string), "You have taken %s's armour", GetNameEx(id));
				SendClientMessage(playerid, -1, string);
			}
		}
	}
	return 1;
}

CMD:listbadges(playerid, params[])
{
	new string [128];

	if(Groups[Player[playerid][Group]][CommandTypes] != 1 && Groups[Player[playerid][Group]][CommandTypes] != 3)
		return SendClientMessage(playerid, -1, "You are not in the LSPD or LSMD!");

	else
	{
		SendClientMessage(playerid, GREY, "------------------------------------------------------------");
		format(string, sizeof(string), "%s -- Members", Groups[Player[playerid][Group]][GroupName]);
		SendClientMessage(playerid, WHITE, string);
		SendClientMessage(playerid, GREY, "------------------------------------------------------------");

		foreach(Player, i)
		{
			if(Player[i][Group] == Player[playerid][Group] && Player[i][AdminDuty] < 1)
			{
				switch(Player[i][GroupRank])
				{
					case 0: format(string, sizeof(string), "Badge #%d: %s %s", Player[i][PDBadge], Groups[Player[i][Group]][RankName0], Player[i][NormalName]);
					case 1: format(string, sizeof(string), "Badge #%d: %s %s", Player[i][PDBadge], Groups[Player[i][Group]][RankName1], Player[i][NormalName]);
					case 2: format(string, sizeof(string), "Badge #%d: %s %s", Player[i][PDBadge], Groups[Player[i][Group]][RankName2], Player[i][NormalName]);
					case 3: format(string, sizeof(string), "Badge #%d: %s %s", Player[i][PDBadge], Groups[Player[i][Group]][RankName3], Player[i][NormalName]);
					case 4: format(string, sizeof(string), "Badge #%d: %s %s", Player[i][PDBadge], Groups[Player[i][Group]][RankName4], Player[i][NormalName]);
					case 5: format(string, sizeof(string), "Badge #%d: %s %s", Player[i][PDBadge], Groups[Player[i][Group]][RankName5], Player[i][NormalName]);
					case 6:	format(string, sizeof(string), "Badge #%d: %s %s", Player[i][PDBadge], Groups[Player[i][Group]][RankName6], Player[i][NormalName]);
					case 7: format(string, sizeof(string), "Badge #%d: %s %s", Player[i][PDBadge], Groups[Player[i][Group]][RankName7], Player[i][NormalName]);
					case 8: format(string, sizeof(string), "Badge #%d: %s %s", Player[i][PDBadge], Groups[Player[i][Group]][RankName8], Player[i][NormalName]);
					case 9: format(string, sizeof(string), "Badge #%d: %s %s", Player[i][PDBadge], Groups[Player[i][Group]][RankName9], Player[i][NormalName]);
					case 10: format(string, sizeof(string), "Badge #%d: %s %s", Player[i][PDBadge], Groups[Player[i][Group]][RankName10], Player[i][NormalName]);
				}
				SendClientMessage(playerid, WHITE, string);
			}
		}

		SendClientMessage(playerid, GREY, "------------------------------------------------------------");
	}
	return 1;
}

command(sms, playerid, params[])
{
	new input[32], message[255], string[128];

	if(sscanf(params, "s[32]s[128]", input, message))
		return SendClientMessage(playerid, GREY, "SYNTAX: /sms [number] [message]");

	if(!strcmp(input, "*", true))
	{
		mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT * FROM phonecontacts WHERE number = '%d'", Player[playerid][PhoneN]);
		new Cache:cache = mysql_query(MYSQL_MAIN, string), count = cache_get_row_count(), idx;

		SetPVarInt(playerid, "SMSSpam", 1);
		while (idx < count)
		{
			cache_set_active(cache);

			new number = cache_get_field_content_int(idx, "contactnumber");

			new text[255];
			format(text, sizeof(text), "%d %s", number, message);
			cmd_sms(playerid, text);

			idx ++;
		}
		cache_delete(cache);
		SetPVarInt(playerid, "SMSSpam", 0);
		return 1;
	}

	new number;
	if(!IsNumeric(input))
		number = GetContactNumber(Player[playerid][PhoneN], input);
	else
		number = strval(input);

	if(number == Player[playerid][PhoneN])
		return SendClientMessage(playerid, WHITE, "You can't SMS yourself!");

	if(Player[playerid][PhoneN] == -1)
		return SendClientMessage(playerid, WHITE, "You don't have a phone!");

	if(strlen(message) < 1)
		return SendClientMessage(playerid, GREY, "SYNTAX: /sms [number] [message]");

	if(strval(GetPhoneInfo(Player[playerid][PhoneN], "status")) == 0)
		return SendClientMessage(playerid, WHITE, "You have to turn on your phone first!");

	if(Player[playerid][PrisonDuration] > 0)
	    return SendClientMessage(playerid, WHITE, "You can't use this in prison/jail!");

	if(number < 0)
	    return 1;

	if(strval(TRUCKER_NUMBER) == number)
	{
		format(string, sizeof(string), "SMS to %s: %s", GetContactName(Player[playerid][PhoneN], number), message);
		SendClientMessage(playerid, PHONE, string);
		PlayerPlaySound(playerid, 21001, 0.00, 0.00, 0.00);

		TruckerBossReply(playerid, message);

		format(string, sizeof(string), "* %s presses a few buttons on their phone, sending a message.", GetNameEx(playerid));
		return NearByMessage(playerid, NICESKY, string);
	}

	if(!IsExistingPhoneNumber(number))
		return 1;

	new id = GetPlayerIDEx(GetPhoneInfo(number, "owner")), send = 1, connected = IsPlayerConnected(id);

	// if(!IsPlayerConnected(id))
		// return SendClientMessage(playerid, WHITE, "The owner of the phone isn't online.");

	if(strval(GetPhoneInfo(number, "status")) != 1 || IsNumberBlocked(number, Player[playerid][PhoneN]) || (connected && (Player[id][PrisonDuration] > 0 || Player[id][PrisonID] > 0)))
		strins(message, "{DE3737}!MESSAGE NOT DELIVERED! ", 0), send = 0;


	SaveSMS(Player[playerid][PhoneN], number, 0, message);
	PlayerPlaySound(playerid, 21001, 0.00, 0.00, 0.00);

	if(send)
	{
		SaveSMS(number, Player[playerid][PhoneN], 1, message);
		if(IsPlayerConnectedEx(id))
		{
			PlayerPlaySound(id, 21000, 0.00, 0.00, 0.00);
			if(strval(GetPhoneInfo(number, "vibrate")) == 1 && Spectator[id][SpecSpectatingPlayer] == -1 && Spectator[id][SpecSpectatingVehicle] == -1)
			{
				format(string, sizeof(string), "* %s's phone vibrates..",  GetNameEx(id));
				NearByMessage(id, NICESKY, string);
			}
			format(string, sizeof(string), "You got a message on your phone \"%s\".", GetPhoneInfo(number, "label"));
			SendClientMessage(id, WHITE, string);
		}
	}

	foreach(Player, x)
	{
		if(Spectator[x][SpecSpectatingPlayer] == id)
		{
			format(string, sizeof(string), "SMS: %d (%s) to %d (%s): %s",  Player[playerid][PhoneN], GetName(playerid), number, GetPhoneInfo(number, "owner"), message);
			SendClientMessage(x, PURPLE, string);
		}
		if(Spectator[x][SpecSpectatingPlayer] == playerid)
		{
			format(string, sizeof(string), "SMS: %d (%s) to %d (%s): %s",  Player[playerid][PhoneN], GetName(playerid), number, GetPhoneInfo(number, "owner"), message);
			SendClientMessage(x, PURPLE, string);
		}
	}

	format(string, sizeof(string), "SMS: %s (%d) to %s (%d): %s", GetNameEx(playerid), Player[playerid][PhoneN], GetPhoneInfo(number, "owner"), number, message);
	ICChatLog(string);

	if(GetPVarInt(playerid, "SMSSpam") > 1)
		return 1;

	if(GetPVarInt(playerid, "SMSSpam") == 1)
		SetPVarInt(playerid, "SMSSpam", 2);
	format(string, sizeof(string), "* %s presses a few buttons on their phone, sending a message.", GetNameEx(playerid));
	return NearByMessage(playerid, NICESKY, string);
}

CMD:bail(playerid, params[])
{
	if(Player[playerid][PrisonID] < 2)
		return SendClientMessage(playerid, WHITE, "You must be in prison to use this command!");

	if(Player[playerid][PrisonDuration] < 1)
		return SendClientMessage(playerid, WHITE, "Your sentence has already finished, go to the interaction point and type /leaveprison.");
		
	if(Player[playerid][PrisonID] == 1)
		return SendClientMessage(playerid, WHITE, "You're in admin jail, not IC jail. Go read the rules instead.");
	
	if(Player[playerid][CannotBail] == 1)
		return SendClientMessage(playerid, -1, "You have been denied the ability to bail by the LSPD.");
		
	new crimes = GetPlayerNumCrimes(Player[playerid][NormalName], 0) + GetPlayerNumCrimes(Player[playerid][NormalName], 1), cost;

	switch(crimes)
	{
		case 0 .. 10: cost = crimes * 500;
		case 11 .. 20: cost = crimes * 750;
		case 21 .. 50: cost = crimes * 1000;
		default: cost = crimes * 2000;
	}

	if(Player[playerid][BankMoney] < cost)
		return SendClientMessage(playerid, -1, "You do not have enough money in your bank to pay for your bail.");

	new string[128];
	if(strcmp(params, "confirm", true))
	{
		format(string, sizeof(string), "Are you sure you wish to pay %s for your bail? If so, type \"/bail confirm\".", PrettyMoney(cost));
		return SendClientMessage(playerid, -1, string);
	}

	Player[playerid][BankMoney] -= cost;
	Groups[1][SafeMoney] += cost;
	format(string, sizeof(string), "SMS from Bank of Los Santos: Your bail transaction has been completed and funds have been taken from your account.");
	SendClientMessage(playerid, PHONE, string);

	Player[playerid][PrisonDuration] = 0;
	Player[playerid][PrisonID] = 0;
	
	SetPlayerPos_Update(playerid, -501.2555,-519.9586,25.5234);
	SetPlayerFacingAngle(playerid, 270.9771);
	SetPlayerVirtualWorld(playerid, SpawnWorld);
	SendClientMessage(playerid, WHITE, "You have been released from prison.");
	return 1;
}

//NEW CAR SYSTEM

CMD:savevehicle(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 4)
		return 1;

	new Float:x, Float:y, Float:z, veh = GetPlayerVehicleID(playerid), Float:angle;

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "You're not in a vehicle");

	GetVehiclePos(veh, x, y, z);
	GetVehicleZAngle(veh, angle);

	for(new i; i < MAX_VEHICLES; i++)
	{
		if(Veh[i][Link] == veh)
			return SendClientMessage(playerid,  -1, "Vehicle already exists in database");
	}

	new cell = GetEmptyVCell();
	if(cell == -1)
		return SendClientMessage(playerid, -1, "You cannot save this vehicle at this time. There are no free cells.");

	new query[256], Cache:cache;
	mysql_format(MYSQL_MAIN, query, sizeof(query), "INSERT INTO vehicles (sqlid, model, x, y, z, angle) VALUES (%d, %d, %f, %f, %f, %f)", 0, GetVehicleModel(veh), x, y, z, angle);
	cache = mysql_query(MYSQL_MAIN, query);

	Veh[cell][SQLID] = cache_insert_id();
	cache_delete(cache);

	Veh[cell][Model] = GetVehicleModel(veh);

	Veh[cell][Color1] = -1;

	Veh[cell][Color2] = -1;

	Veh[cell][Group] = 0;

	Veh[cell][Job] = 0;

	Veh[cell][vX] = x;

	Veh[cell][vY] = y;

	Veh[cell][vZ] = z;

	Veh[cell][vAngle] = angle;

	Veh[cell][vInt] = 0;

	Veh[cell][vVWorld] = 0;

	Veh[cell][Mod0] = 0;

	Veh[cell][Mod1] = 0;

	Veh[cell][Mod2] = 0;

	Veh[cell][Mod3] = 0;

	Veh[cell][Mod4] = 0;

	Veh[cell][Mod5] = 0;

	Veh[cell][Mod6] = 0;

	Veh[cell][Mod7] = 0;

	Veh[cell][Mod8] = 0;

	Veh[cell][Mod9] = 0;

	Veh[cell][Mod10] = 0;

	Veh[cell][Mod11] = 0;

	Veh[cell][Mod12] = 0;

	Veh[cell][Mod13] = 0;

	Veh[cell][Respawn] = VEHICLE_DEFAULT_RESPAWN;

	format(Veh[cell][Owner], 24, "unowned");

	// Veh[cell][Weapons][0] = -1;

	// Veh[cell][Weapons][1] = -1;

	// Veh[cell][Weapons][2] = -1;

	Veh[cell][vHealth] = 1000;

	Veh[cell][Fuel] = 100;

	format(Veh[cell][VName], 50, "New Vehicle");

	new plate[32];
	RandomLicensePlate(plate);
	format(Veh[cell][Plate], 32, plate);

	Veh[cell][Link] = veh;

	Veh[cell][spawnState] = 1;

	Veh[cell][TrunkContents] = 1;

	SaveVehicle(Veh[cell][SQLID]);
	format(query, sizeof(query), "%s has saved a vehicle. (SQLID: %d)", Player[playerid][AdminName], Veh[cell][SQLID]);
	AdminActionsLog(query);
	format(query, sizeof(query), "You've saved vehicle (SQLID: %d)", Veh[cell][SQLID]);
	return SendClientMessage(playerid, -1, query);
}

stock LoadVehicles()
{
	new Cache:cache, count, cell = 0;
	cache = mysql_query(MYSQL_MAIN, "SELECT * FROM vehicles WHERE owner = 'unowned' AND spawnstate = '1'");
	count = cache_get_row_count();
	printf("%d vehicles loaded", count);

	while(cell < count)
	{
		cache_set_active(cache);

		Veh[cell][spawnState] = cache_get_field_content_int(cell, "spawnstate");

		cache_get_field_content(cell, "owner", Veh[cell][Owner], 1, 24);

		Veh[cell][SQLID] = cache_get_field_content_int(cell, "sqlid");

		Veh[cell][Model] = cache_get_field_content_int(cell, "model");

		Veh[cell][Color1] = cache_get_field_content_int(cell, "color1");

		Veh[cell][Color2] = cache_get_field_content_int(cell, "color2");

		Veh[cell][Group] = cache_get_field_content_int(cell, "groupid");

		Veh[cell][Job] = cache_get_field_content_int(cell, "jobid");

		Veh[cell][vX] = cache_get_field_content_float(cell, "x");

		Veh[cell][vY] = cache_get_field_content_float(cell, "y");

		Veh[cell][vZ] = cache_get_field_content_float(cell, "z");

		Veh[cell][vAngle] = cache_get_field_content_float(cell, "angle");

		Veh[cell][vInt] = cache_get_field_content_int(cell, "interior");

		Veh[cell][vVWorld] = cache_get_field_content_int(cell, "virtualworld");

		Veh[cell][Mod0] = cache_get_field_content_int(cell, "mod0");

		Veh[cell][Mod1] = cache_get_field_content_int(cell, "mod1");

		Veh[cell][Mod2] = cache_get_field_content_int(cell, "mod2");

		Veh[cell][Mod3] = cache_get_field_content_int(cell, "mod3");

		Veh[cell][Mod4] = cache_get_field_content_int(cell, "mod4");

		Veh[cell][Mod5] = cache_get_field_content_int(cell, "mod5");

		Veh[cell][Mod6] = cache_get_field_content_int(cell, "mod6");

		Veh[cell][Mod7] = cache_get_field_content_int(cell, "mod7");

		Veh[cell][Mod8] = cache_get_field_content_int(cell, "mod8");

		Veh[cell][Mod9] = cache_get_field_content_int(cell, "mod9");

		Veh[cell][Mod10] = cache_get_field_content_int(cell, "mod10");

		Veh[cell][Mod11] = cache_get_field_content_int(cell, "mod11");

		Veh[cell][Mod12] = cache_get_field_content_int(cell, "mod12");

		Veh[cell][Mod13] = cache_get_field_content_int(cell, "mod13");

		Veh[cell][Respawn] = cache_get_field_content_int(cell, "respawn");

		Veh[cell][PaintJob] = cache_get_field_content_int(cell, "paintjob");

		cache_get_field_content(cell, "vname", Veh[cell][VName], 1, 50);

		cache_get_field_content(cell, "plate", Veh[cell][Plate], 1, 32);

		cache_get_field_content(cell, "trunkcontents", Veh[cell][TrunkContents], 1, 255);

		if(!strlen(Veh[cell][Plate]))
			RandomLicensePlate(Veh[cell][Plate]);

		cache_set_active(cache);

		Veh[cell][Fuel] = cache_get_field_content_int(cell, "fuel");

		Veh[cell][VIP] = cache_get_field_content_int(cell, "VIP");

		Veh[cell][vHealth] = cache_get_field_content_int(cell, "health");

		Veh[cell][lockState] = cache_get_field_content_int(cell, "lockstate");

		Veh[cell][impounded] = cache_get_field_content_int(cell, "impounded");

		Veh[cell][ImpoundCount] = cache_get_field_content_int(cell, "impoundcount");

		cache_get_field_content(cell, "impoundtime", Veh[cell][ImpoundTime], 64);

		Veh[cell][RadioInstalled] = cache_get_field_content_int(cell, "radio");

		Veh[cell][Registered] = cache_get_field_content_int(cell, "registered");

		Veh[cell][GangLink] = cache_get_field_content_int(cell, "ganglink");
		
		Veh[cell][SirenType] = cache_get_field_content_int(cell, "SirenType");
		
		Veh[cell][GunRack][0] = cache_get_field_content_int(cell, "GunRack0");

		Veh[cell][GunRack][1] = cache_get_field_content_int(cell, "GunRack1");
		if(Veh[cell][spawnState] == 1)
			SpawnVehicleSQL(Veh[cell][SQLID]);

		cell++;
	}
	cache_delete(cache);
	return 1;
}

CMD:checkvehicle(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(isnull(params) || !IsNumeric(params) || !IsValidSQL(strval(params)) || strval(params) == 0)
		return SendClientMessage(playerid, -1, "SYNTAX: /checkvehicle [sqlid]");

	if(!IsSQLVehicleSpawned(strval(params)))
		return SendClientMessage(playerid, -1, "Vehicle isn't spawned");

	new string[128], sql = strval(params), idx = GetVIndex(sql), Float:vhealth;
	GetVehicleHealth(Veh[idx][Link], vhealth);

	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(Veh[idx][Link], engine, lights, alarm, doors, bonnet, boot, objective);

	format(string, sizeof(string), "---------------- SQLID: %d ----------------", sql);
	SendClientMessage(playerid, -1, string);
	format(string, sizeof(string), "Owner: %s | Fuel: %d/100 | Health: %d | Lockstate: %s | Engine: %s", Veh[idx][Owner], Veh[idx][Fuel], floatround(vhealth), (Veh[idx][lockState] == 0) ? ("Unlocked") : ("Locked") , (engine == 1) ? ("On") : ("Off"));
	SendClientMessage(playerid, -1, string);
	// format(string, sizeof(string), "Weapon 1: %s | Weapon 2: %s | Weapon 3: %s", (Veh[idx][Weapons][0] > -1) ? (IntToFormattedStr(Veh[idx][Weapons][0])) : ("None"), (Veh[idx][Weapons][1] > -1) ? (IntToFormattedStr(Veh[idx][Weapons][1])) : ("None"), (Veh[idx][Weapons][2] > -1) ? (IntToFormattedStr(Veh[idx][Weapons][2])) : ("None"));
	// SendClientMessage(playerid, -1, string);
	SendClientMessage(playerid, -1, "-------------------------------------------------");
	return 1;
}

CMD:editvehicle(playerid, params[])
{
	new veh, sql ,string[255];
	if(Player[playerid][AdminLevel] < 4)
		return 1;

	if(isnull(params))
	{
		veh = GetPlayerVehicleID(playerid);
		sql = GetVSQLID(veh);
	}
	else
	sql = strval(params);

	if(sql == 0)
		return SendClientMessage(playerid, -1, "That vehicle isn't saved in the database");

	if(!IsValidSQL(sql))
		return SendClientMessage(playerid, -1, "Invalid SQLID.");

	SetPVarInt(playerid, "Edit_Vehicle", sql);

	if(VehicleEdit[playerid][SQLID] == 0)
	{
		new Cache:cache, query[128];
		format(query, sizeof(query), "SELECT * FROM vehicles WHERE sqlid = '%d'", sql);
		cache = mysql_query(MYSQL_MAIN, query);

		VehicleEdit[playerid][spawnState] = cache_get_field_content_int(0, "spawnstate");

		cache_get_field_content(0, "owner", VehicleEdit[playerid][Owner], 1, 24);

		VehicleEdit[playerid][SQLID] = cache_get_field_content_int(0, "sqlid");

		VehicleEdit[playerid][Model] = cache_get_field_content_int(0, "model");

		VehicleEdit[playerid][Color1] = cache_get_field_content_int(0, "color1");

		VehicleEdit[playerid][Color2] = cache_get_field_content_int(0, "color2");

		VehicleEdit[playerid][Group] = cache_get_field_content_int(0, "groupid");

		VehicleEdit[playerid][Job] = cache_get_field_content_int(0, "jobid");

		VehicleEdit[playerid][vX] = cache_get_field_content_float(0, "x");

		VehicleEdit[playerid][vY] = cache_get_field_content_float(0, "y");

		VehicleEdit[playerid][vZ] = cache_get_field_content_float(0, "z");

		VehicleEdit[playerid][vAngle] = cache_get_field_content_float(0, "angle");

		VehicleEdit[playerid][vInt] = cache_get_field_content_int(0, "interior");

		VehicleEdit[playerid][vVWorld] = cache_get_field_content_int(0, "virtualworld");

		VehicleEdit[playerid][Mod0] = cache_get_field_content_int(0, "mod0");

		VehicleEdit[playerid][Mod1] = cache_get_field_content_int(0, "mod1");

		VehicleEdit[playerid][Mod2] = cache_get_field_content_int(0, "mod2");

		VehicleEdit[playerid][Mod3] = cache_get_field_content_int(0, "mod3");

		VehicleEdit[playerid][Mod4] = cache_get_field_content_int(0, "mod4");

		VehicleEdit[playerid][Mod5] = cache_get_field_content_int(0, "mod5");

		VehicleEdit[playerid][Mod6] = cache_get_field_content_int(0, "mod6");

		VehicleEdit[playerid][Mod7] = cache_get_field_content_int(0, "mod7");

		VehicleEdit[playerid][Mod8] = cache_get_field_content_int(0, "mod8");

		VehicleEdit[playerid][Mod9] = cache_get_field_content_int(0, "mod9");

		VehicleEdit[playerid][Mod10] = cache_get_field_content_int(0, "mod10");

		VehicleEdit[playerid][Mod11] = cache_get_field_content_int(0, "mod11");

		VehicleEdit[playerid][Mod12] = cache_get_field_content_int(0, "mod12");

		VehicleEdit[playerid][Mod13] = cache_get_field_content_int(0, "mod13");

		VehicleEdit[playerid][Respawn] = cache_get_field_content_int(0, "respawn");

		// VehicleEdit[playerid][Weapons][0] = cache_get_field_content_int(0, "weapon1");

		// VehicleEdit[playerid][Weapons][1] = cache_get_field_content_int(0, "weapon2");

		// VehicleEdit[playerid][Weapons][2] = cache_get_field_content_int(0, "weapon3");

		VehicleEdit[playerid][PaintJob] = cache_get_field_content_int(0, "paintjob");

		cache_get_field_content(0, "vname", VehicleEdit[playerid][VName], 1, 50);

		cache_get_field_content(0, "plate", VehicleEdit[playerid][Plate], 1, 32);

		VehicleEdit[playerid][Fuel] = cache_get_field_content_int(0, "fuel");

		VehicleEdit[playerid][VIP] = cache_get_field_content_int(0, "VIP");

		VehicleEdit[playerid][vHealth] = cache_get_field_content_int(0, "health");

		VehicleEdit[playerid][lockState] = cache_get_field_content_int(0, "lockstate");

		VehicleEdit[playerid][impounded] = cache_get_field_content_int(0, "impounded");

		VehicleEdit[playerid][ImpoundCount] = cache_get_field_content_int(0, "impoundcount");

		cache_get_field_content(0, "impoundtime", VehicleEdit[playerid][ImpoundTime], 64);

		VehicleEdit[playerid][RadioInstalled] = cache_get_field_content_int(0, "radio");

		VehicleEdit[playerid][Registered] = cache_get_field_content_int(0, "registered");

		VehicleEdit[playerid][GangLink] = cache_get_field_content_int(0, "ganglink");

		cache_get_field_content(0, "trunkcontents", VehicleEdit[playerid][TrunkContents], 1, 255);

		cache_delete(cache);

		new idx = GetVIndex(sql);

		if(idx != -1)
		{
			// VehicleEdit[playerid][Weapons][0] = Veh[idx][Weapons][0];
			// VehicleEdit[playerid][Weapons][1] = Veh[idx][Weapons][1];
			// VehicleEdit[playerid][Weapons][2] = Veh[idx][Weapons][2];
			VehicleEdit[playerid][Color1] = Veh[idx][Color1];
			VehicleEdit[playerid][Color2] = Veh[idx][Color2];
			VehicleEdit[playerid][vHealth] = Veh[idx][vHealth];
			VehicleEdit[playerid][lockState] = Veh[idx][lockState];
			VehicleEdit[playerid][PaintJob] = Veh[idx][PaintJob];
			VehicleEdit[playerid][Fuel] = Veh[idx][Fuel];
			VehicleEdit[playerid][Registered] = Veh[idx][Registered];
			VehicleEdit[playerid][GangLink] = Veh[idx][GangLink];
			VehicleEdit[playerid][TrunkContents] = Veh[idx][TrunkContents];
			VehicleEdit[playerid][RadioInstalled] = Veh[idx][RadioInstalled];
			format(VehicleEdit[playerid][VName], 50, Veh[idx][VName]);
			format(VehicleEdit[playerid][Plate], 32, Veh[idx][Plate]);
			VehicleEdit[playerid][Mod0] = Veh[idx][Mod0];
			VehicleEdit[playerid][Mod1] = Veh[idx][Mod1];
			VehicleEdit[playerid][Mod2] = Veh[idx][Mod2];
			VehicleEdit[playerid][Mod3] = Veh[idx][Mod3];
			VehicleEdit[playerid][Mod4] = Veh[idx][Mod4];
			VehicleEdit[playerid][Mod5] = Veh[idx][Mod5];
			VehicleEdit[playerid][Mod6] = Veh[idx][Mod6];
			VehicleEdit[playerid][Mod7] = Veh[idx][Mod7];
			VehicleEdit[playerid][Mod8] = Veh[idx][Mod8];
			VehicleEdit[playerid][Mod9] = Veh[idx][Mod9];
			VehicleEdit[playerid][Mod10] = Veh[idx][Mod10];
			VehicleEdit[playerid][Mod11] = Veh[idx][Mod11];
			VehicleEdit[playerid][Mod12] = Veh[idx][Mod12];
			VehicleEdit[playerid][Mod13] = Veh[idx][Mod13];
		}

		format(string, sizeof(string), "Edit Vehicle (SQLID %d)", sql);

		return ShowPlayerDialog(playerid, EDIT_VEHICLE_MAIN, DIALOG_STYLE_LIST, string, EditVehicleString(playerid), "Edit", "Exit");
	}

	ShowPlayerDialog(playerid, EDIT_VEHICLE_SESSION, DIALOG_STYLE_MSGBOX, "Delete Session Data", "You did not save your edits to the vehicle in your previous Session.\nOn the next dialog screen you will get to choose whether to resume \nyour previous session or start a new one.", "Continue", "Cancel");

	return 1;
}

stock GetVSQLID(vehicle)
{
	for(new i; i < MAX_VEHICLES; i++)
	{
		if(Veh[i][Link] == vehicle)
			return Veh[i][SQLID];
	}
	return 0;
}

stock GetVIndex(sqlid)
{
	if(sqlid == 0)
		return -1;

	for(new i; i < MAX_VEHICLES; i++)
	{
		if(sqlid == Veh[i][SQLID])
			return i;
	}
	return -1;
}

stock SaveVehicle(sqlid, playerid = INVALID_PLAYER_ID)
{

	//printf("Vehicle Saving (SQLID: %d, PID: %d)", sqlid, playerid);
	new query[1500], idx = GetVIndex(sqlid);

	if(idx != -1)
	{
		mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE vehicles SET model = '%d' , color1 = '%d' , color2 = '%d' , groupid = '%d' , jobid = '%d' , owner = '%e' , vname = '%e', respawn = '%d', x = '%f', y = '%f', z = '%f', angle = '%f'",
		Veh[idx][Model], Veh[idx][Color1], Veh[idx][Color2], Veh[idx][Group], Veh[idx][Job], strtolower(Veh[idx][Owner]), Veh[idx][VName] ,Veh[idx][Respawn], Veh[idx][vX], Veh[idx][vY], Veh[idx][vZ], Veh[idx][vAngle]);

		mysql_format(MYSQL_MAIN, query, sizeof(query), "%s,interior = '%d', virtualworld = '%d', plate = '%e', mod0 = '%d', mod1 = '%d', mod2 = '%d', mod3 = '%d', mod4 = '%d', mod5 = '%d', mod6 = '%d', mod7 = '%d', mod8 = '%d', mod9 = '%d'",
		query ,Veh[idx][vInt], Veh[idx][vVWorld], Veh[idx][Plate], Veh[idx][Mod0], Veh[idx][Mod1], Veh[idx][Mod2], Veh[idx][Mod3], Veh[idx][Mod4], Veh[idx][Mod5], Veh[idx][Mod6], Veh[idx][Mod7], Veh[idx][Mod8], Veh[idx][Mod9]);

		mysql_format(MYSQL_MAIN, query, sizeof(query), "%s, mod10 = '%d', mod11 = '%d', mod12 = '%d', mod13 = '%d', paintjob = '%d', vip = '%d', lockstate = '%d', health = '%f', spawnstate = '%d', fuel = '%d', impounded = '%d'",
		query, Veh[idx][Mod10], Veh[idx][Mod11], Veh[idx][Mod12], Veh[idx][Mod13], Veh[idx][PaintJob], Veh[idx][VIP], Veh[idx][lockState], Veh[idx][vHealth],Veh[idx][spawnState],Veh[idx][Fuel], Veh[idx][impounded]);

		format(query, sizeof(query), "%s, radio = '%d', registered = '%d' , ganglink = '%d', trunkcontents = '%s', impoundcount = '%d', ImpoundTime = '%s', SirenType = '%d', GunRack0 = '%d', GunRack1 = '%d' WHERE sqlid = '%d'", query, Veh[idx][RadioInstalled], Veh[idx][Registered], Veh[idx][GangLink], Veh[idx][TrunkContents], Veh[idx][ImpoundCount], Veh[idx][ImpoundTime], Veh[idx][SirenType], Veh[idx][GunRack][0], Veh[idx][GunRack][1], sqlid);
	}

	else if(playerid != INVALID_PLAYER_ID)
	{
		mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE vehicles SET model = '%d' , color1 = '%d' , color2 = '%d' , groupid = '%d' , jobid = '%d' , owner = '%e' , vname = '%e', respawn = '%d', x = '%f', y = '%f', z = '%f', angle = '%f'",
		VehicleEdit[playerid][Model], VehicleEdit[playerid][Color1], VehicleEdit[playerid][Color2], VehicleEdit[playerid][Group], VehicleEdit[playerid][Job], strtolower(VehicleEdit[playerid][Owner]), VehicleEdit[playerid][VName] ,VehicleEdit[playerid][Respawn], VehicleEdit[playerid][vX], VehicleEdit[playerid][vY], VehicleEdit[playerid][vZ], VehicleEdit[playerid][vAngle]);

		mysql_format(MYSQL_MAIN, query, sizeof(query), "%s,interior = '%d', virtualworld = '%d', plate = '%e', mod0 = '%d', mod1 = '%d', mod2 = '%d', mod3 = '%d', mod4 = '%d', mod5 = '%d', mod6 = '%d', mod7 = '%d', mod8 = '%d', mod9 = '%d'",
		query ,VehicleEdit[playerid][vInt], VehicleEdit[playerid][vVWorld], VehicleEdit[playerid][Plate], VehicleEdit[playerid][Mod0], VehicleEdit[playerid][Mod1], VehicleEdit[playerid][Mod2], VehicleEdit[playerid][Mod3], VehicleEdit[playerid][Mod4], VehicleEdit[playerid][Mod5], VehicleEdit[playerid][Mod6], VehicleEdit[playerid][Mod7], VehicleEdit[playerid][Mod8], VehicleEdit[playerid][Mod9]);

		mysql_format(MYSQL_MAIN, query, sizeof(query), "%s, mod10 = '%d', mod11 = '%d', mod12 = '%d', mod13 = '%d', paintjob = '%d', vip = '%d', lockstate = '%d', health = '%f', spawnstate = '%d', fuel = '%d', impounded = '%d'",
		query, VehicleEdit[playerid][Mod10], VehicleEdit[playerid][Mod11], VehicleEdit[playerid][Mod12], VehicleEdit[playerid][Mod13], VehicleEdit[playerid][PaintJob], VehicleEdit[playerid][VIP], VehicleEdit[playerid][lockState], VehicleEdit[playerid][vHealth],VehicleEdit[playerid][spawnState],VehicleEdit[playerid][Fuel], VehicleEdit[playerid][impounded]);

		format(query, sizeof(query), "%s, radio = '%d', registered = '%d', ganglink = '%d', trunkcontents = '%s', impoundcount = '%d', ImpoundTime = '%s', SirenType = '%d' WHERE sqlid = '%d'", query, VehicleEdit[playerid][RadioInstalled], VehicleEdit[playerid][Registered], VehicleEdit[playerid][GangLink], VehicleEdit[playerid][TrunkContents], VehicleEdit[playerid][ImpoundCount], Veh[idx][ImpoundTime], VehicleEdit[playerid][SirenType], sqlid);
	}

	//printf("Vehicle Saved (SQLID: %d, PID: %d)", sqlid, playerid);

	mysql_query(MYSQL_MAIN, query, false);
}

stock SpawnVehicleSQL(sql)
{
	if(!IsValidSQL(sql))
		return 1;

	new idx = GetVIndex(sql);

	if(Veh[idx][Link] > 0)
		DestroyVehicle(Veh[idx][Link]);

	new color1 = Veh[idx][Color1], color2 = Veh[idx][Color2], Float:angle = Veh[idx][vAngle], respawn = Veh[idx][Respawn];

	Veh[idx][Link] = CreateVehicle(Veh[idx][Model], Veh[idx][vX], Veh[idx][vY], Veh[idx][vZ], angle, color1, color2, respawn, (Veh[idx][SirenType] == 0) ? (0) : (1));
	
	if(Veh[idx][SirenType] == POLICE_LIGHT_TYPE_LIGHTBAR)
		AttachSirensToVehicle(Veh[idx][Link], POLICE_LIGHT_TYPE_LIGHTBAR);
	
	SetVehicleNumberPlate(Veh[idx][Link], Veh[idx][Plate]);

	if(Veh[idx][Mod0] != 0)
		AddVehicleComponent(Veh[idx][Link], Veh[idx][Mod0]);

	if(Veh[idx][Mod1] != 0)
		AddVehicleComponent(Veh[idx][Link], Veh[idx][Mod1]);

	if(Veh[idx][Mod2] != 0)
		AddVehicleComponent(Veh[idx][Link], Veh[idx][Mod2]);

	if(Veh[idx][Mod3] != 0)
		AddVehicleComponent(Veh[idx][Link], Veh[idx][Mod3]);

	if(Veh[idx][Mod4] != 0)
		AddVehicleComponent(Veh[idx][Link], Veh[idx][Mod4]);

	if(Veh[idx][Mod5] != 0)
		AddVehicleComponent(Veh[idx][Link], Veh[idx][Mod5]);

	if(Veh[idx][Mod6] != 0)
		AddVehicleComponent(Veh[idx][Link], Veh[idx][Mod6]);

	if(Veh[idx][Mod7] != 0)
		AddVehicleComponent(Veh[idx][Link], Veh[idx][Mod7]);

	if(Veh[idx][Mod8] != 0)
		AddVehicleComponent(Veh[idx][Link], Veh[idx][Mod8]);

	if(Veh[idx][Mod9] != 0)
		AddVehicleComponent(Veh[idx][Link], Veh[idx][Mod9]);

	if(Veh[idx][Mod10] != 0)
		AddVehicleComponent(Veh[idx][Link], Veh[idx][Mod10]);

	if(Veh[idx][Mod11] != 0)
		AddVehicleComponent(Veh[idx][Link], Veh[idx][Mod11]);

	if(Veh[idx][Mod12] != 0)
		AddVehicleComponent(Veh[idx][Link], Veh[idx][Mod12]);

	if(Veh[idx][Mod13] != 0)
		AddVehicleComponent(Veh[idx][Link], Veh[idx][Mod13]);
	/*
	if(Veh[idx][damageState] == 1 || Veh[idx][vHealth] <= 400)
	{
		Veh[idx][damageState] = 1;
		SetVehicleHealth(Veh[idx][Link], 400);
	}
	else
		SetVehicleHealth(Veh[idx][Link], Veh[idx][vHealth]);*/
	//SetVehicleHealth(Veh[idx][Link], 1000);
	if(!strcmp(Veh[idx][Owner], "unowned") && (Veh[idx][Group] == 0 || Groups[Veh[idx][Group]][CommandTypes] == 8) && Veh[idx][GangLink] == 0)
	{
		Veh[idx][vHealth] = 1000;
		Veh[idx][damageState] = 0;
		SetVehicleHealth(Veh[idx][Link], 1000);
		Veh[idx][Color1] = random(255);
		Veh[idx][Color2] = random(255);
	}
	else
	{
		if(Veh[idx][vHealth] > 400)
		{
			SetVehicleHealth(Veh[idx][Link], Veh[idx][vHealth]);
			Veh[idx][damageState] = 0;
		}
		else
		{
			SetVehicleHealth(Veh[idx][Link], 400);
			Veh[idx][vHealth] = 400;
			Veh[idx][damageState] = 1;
		}
	}

	ChangeVehicleColor(Veh[idx][Link], Veh[idx][Color1], Veh[idx][Color2]);
	ChangeVehiclePaintjob(Veh[idx][Link], Veh[idx][PaintJob]);
	SetVehicleVirtualWorld(Veh[idx][Link], Veh[idx][vVWorld]);
	LinkVehicleToInterior(Veh[idx][Link], Veh[idx][vInt]);

	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(Veh[idx][Link], engine, lights, alarm, doors, bonnet, boot, objective);
	if(strcmp(Veh[idx][Owner], "unowned", true))
	{
		if(IsABike(Veh[idx][Link]))
		{
			SetVehicleParamsEx(Veh[idx][Link], false, lights, alarm, false, bonnet, boot, objective);
			Veh[idx][lockState] = 0;
		}
		else
		{
			SetVehicleParamsEx(Veh[idx][Link], engine, lights, alarm, 1, bonnet, boot, objective);
			Veh[idx][lockState] = 1;
		}
	}
	else
	{
		if(IsABike(Veh[idx][Link]))
		{
			SetVehicleParamsEx(Veh[idx][Link], 0, lights, alarm, 0, bonnet, boot, objective);
			Veh[idx][lockState] = 1;
		}
		else if((Veh[idx][Group] > 0 && Groups[Veh[idx][Group]][CommandTypes] != 8) || Veh[idx][GangLink] > 0)
		{
			SetVehicleParamsEx(Veh[idx][Link], engine, lights, alarm, 1, bonnet, boot, objective);
			Veh[idx][lockState] = 1;
		}
		else
		{
			SetVehicleParamsEx(Veh[idx][Link], engine, lights, alarm, 0, bonnet, boot, objective);
			Veh[idx][lockState] = 0;
		}
	}

	if(!strcmp(Veh[idx][Owner], "unowned") && Veh[idx][Group] == 0 && Veh[idx][Fuel] < 25)
	{
		Veh[idx][Fuel] = 25;
	}

	if(Jobs[Veh[idx][Job]][JobType] == JOB_PIZZABOY && Veh[idx][Fuel] < 40)
		Veh[idx][Fuel] = 40;

	if(Jobs[Veh[idx][Job]][JobType] == JOB_TRUCKER && Veh[idx][Fuel] < 25)
		Veh[idx][Fuel] = 25;

	if(Groups[Veh[idx][Group]][CommandTypes] == 8 && Veh[idx][Fuel] < 15)
		Veh[idx][Fuel] = 15;

	//STATIC INTERIORS FTL. .. Will make it dynamic later.
	if(GetVehicleModel(Veh[idx][Link] == 427))
		Veh[idx][attachedInteriorType] = 1;
	else
		Veh[idx][attachedInteriorType] = 0;

	Veh[idx][intCap] = 0;
	Veh[idx][attachedInteriorLock] = 1;

	//Veh[idx][windowStatus] = 0; //Up
	Veh[idx][spawnState] = 1;

	if(Veh[idx][impounded] == 1)
		return 2;

	return 1;
}

stock GetActivePlayerVehicles(playerid)
{
	new active, sql, idx;
	for(new i; i < 5; i++)
	{
		sql = Player[playerid][Cars][i];
		if(Player[playerid][Cars][i] == 0)
			continue;
		idx = GetVIndex(sql);
		if(Veh[idx][Link] != 0 && Veh[idx][Link] != INVALID_VEHICLE_ID)
			active++;
	}
	return active;
}

stock DespawnVehicleSQL(sql)
{
	if(!IsValidSQL(sql))
	{
		//print("Vehicle not valid.");
		return 1;
	}

	new idx = GetVIndex(sql);
	if(IsSQLVehicleSpawned(sql))
		GetVehicleHealth(Veh[idx][Link], Veh[idx][vHealth]);
	SaveVehicle(sql);

	DestroyVehicle(Veh[idx][Link]);
	Veh[idx][Link] = 0;
	Veh[idx][spawnState] = 0;

	return 1;
}

stock UnloadPlayerVehicles(playerid)
{
	for(new i; i < 5; i++)
	{
		if(Player[playerid][Cars][i] != 0)
		{
			if(IsSQLVehicleSpawned(Player[playerid][Cars][i]))
				DespawnVehicleSQL(Player[playerid][Cars][i]);
			ResetVCell(GetVIndex(Player[playerid][Cars][i]));
			Player[playerid][Cars][i] = 0;
		}
	}
	return 1;
}

stock LoadPlayerVehicles(playerid)
{
	new name[24], slot, maxslot = GetPlayerMaxVehicles(playerid), spawned, imped;

	if(Player[playerid][AdminDuty] > 0)
		format(name, sizeof(name), Player[playerid][NormalName]);
	else
		GetPlayerName(playerid, name, sizeof(name));

	new Cache:cache, query[128], count, cell, row;
	mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM vehicles WHERE owner = '%e'", name);
	cache = mysql_query(MYSQL_MAIN, query);
	count = cache_get_row_count();

	while(row < count)
	{
		cell = GetEmptyVCell();

		if(cell == -1)
		{
			SendClientMessage(playerid, -1, "You cannot have more vehicles spawned at this time. There are no free cells.");
			break;
		}

		if(slot > 4)
		{
			SendClientMessage(playerid, -1, "You have more than 5 vehicles in this database, please contact an Administrator about this.");
			break;
		}

		Veh[cell][spawnState] = cache_get_field_content_int(row, "spawnstate");

		cache_get_field_content(row, "owner", Veh[cell][Owner], 1, 24);

		Veh[cell][SQLID] = cache_get_field_content_int(row, "sqlid");

		Veh[cell][Model] = cache_get_field_content_int(row, "model");

		Veh[cell][Color1] = cache_get_field_content_int(row, "color1");

		Veh[cell][Color2] = cache_get_field_content_int(row, "color2");

		Veh[cell][Group] = cache_get_field_content_int(row, "groupid");

		Veh[cell][Job] = cache_get_field_content_int(row, "jobid");

		Veh[cell][vX] = cache_get_field_content_float(row, "x");

		Veh[cell][vY] = cache_get_field_content_float(row, "y");

		Veh[cell][vZ] = cache_get_field_content_float(row, "z");

		Veh[cell][vAngle] = cache_get_field_content_float(row, "angle");

		Veh[cell][vInt] = cache_get_field_content_int(row, "interior");

		Veh[cell][vVWorld] = cache_get_field_content_int(row, "virtualworld");

		Veh[cell][Mod0] = cache_get_field_content_int(row, "mod0");

		Veh[cell][Mod1] = cache_get_field_content_int(row, "mod1");

		Veh[cell][Mod2] = cache_get_field_content_int(row, "mod2");

		Veh[cell][Mod3] = cache_get_field_content_int(row, "mod3");

		Veh[cell][Mod4] = cache_get_field_content_int(row, "mod4");

		Veh[cell][Mod5] = cache_get_field_content_int(row, "mod5");

		Veh[cell][Mod6] = cache_get_field_content_int(row, "mod6");

		Veh[cell][Mod7] = cache_get_field_content_int(row, "mod7");

		Veh[cell][Mod8] = cache_get_field_content_int(row, "mod8");

		Veh[cell][Mod9] = cache_get_field_content_int(row, "mod9");

		Veh[cell][Mod10] = cache_get_field_content_int(row, "mod10");

		Veh[cell][Mod11] = cache_get_field_content_int(row, "mod11");

		Veh[cell][Mod12] = cache_get_field_content_int(row, "mod12");

		Veh[cell][Mod13] = cache_get_field_content_int(row, "mod13");

		Veh[cell][Respawn] = cache_get_field_content_int(row, "respawn");

		// Veh[cell][Weapons][0] = cache_get_field_content_int(row, "weapon1");

		// Veh[cell][Weapons][1] = cache_get_field_content_int(row, "weapon2");

		// Veh[cell][Weapons][2] = cache_get_field_content_int(row, "weapon3");

		Veh[cell][PaintJob] = cache_get_field_content_int(row, "paintjob");

		cache_get_field_content(row, "vname", Veh[cell][VName], 1, 50);

		cache_get_field_content(row, "plate", Veh[cell][Plate], 1, 32);

		Veh[cell][Fuel] = cache_get_field_content_int(row, "fuel");

		Veh[cell][VIP] = cache_get_field_content_int(row, "VIP");

		Veh[cell][vHealth] = cache_get_field_content_int(row, "health");

		Veh[cell][lockState] = cache_get_field_content_int(row, "lockstate");

		Veh[cell][impounded] = cache_get_field_content_int(row, "impounded");

		Veh[cell][RadioInstalled] = cache_get_field_content_int(row, "radio");

		Veh[cell][Registered] = cache_get_field_content_int(row, "registered");

		Veh[cell][ImpoundCount] = cache_get_field_content_int(row, "impoundcount");

		cache_get_field_content(row, "impoundtime", Veh[cell][ImpoundTime], 64);

		cache_get_field_content(row, "trunkcontents", Veh[cell][TrunkContents], 1, 255);

		Player[playerid][Cars][slot] = Veh[cell][SQLID];
		
		Veh[cell][GunRack][0] = cache_get_field_content_int(row, "GunRack0");
		
		Veh[cell][GunRack][1] = cache_get_field_content_int(row, "GunRack1");
		
		row++;
		slot++;
	}
	cache_delete(cache);

	for(new i = 0; i < slot; i++)
	{
		if(Player[playerid][Cars][i] == 0 || (Veh[GetVIndex(Player[playerid][Cars][i])][VIP] == 5 && Player[playerid][VipRank] < 1))
			continue;

		if(spawned < maxslot)
		{
			if(SpawnVehicleSQL(Player[playerid][Cars][i]) == 2)
				imped++;
			else
				spawned++;
		}
		else
			break;
	}

	if(imped != 0)
		SendClientMessage(playerid, -1, "You have an impounded vehicle, type /impoundlist");

	return 1;
}

stock GetNearestCarSQL(playerid) // pretty much the same as the function below, but returns any car, even if its unowned.
{
	new sql, Float:dist = 9999, Float:tmpdis;
	new Float:px, Float:py, Float:pz,
	Float:cx, Float:cy, Float:cz;

	GetPlayerPos(playerid, px, py, pz);
	new vw = GetPlayerVirtualWorld(playerid);

	for(new i; i < MAX_VEHICLES; i++)
	{
		if(GetVehicleVirtualWorld(Veh[i][Link]) != vw)
			continue;

		if(Veh[i][Link] == INVALID_VEHICLE_ID || Veh[i][Link] == 0)
			continue;

		GetVehiclePos(Veh[i][Link], cx, cy, cz);
		tmpdis = floatsqroot(floatpower(floatabs(floatsub(px,cx)),2)+floatpower(floatabs(floatsub(py,cy)),2)+floatpower(floatabs(floatsub(pz,cz)),2));
		if(tmpdis < dist)
		{
			dist = tmpdis;
			sql = Veh[i][SQLID];
		}
	}
	return sql;
}

stock GetNearestOwnedCarSQLID(playerid) // Returns the nearest owned vehicle, usefull for someting say a trunk, you can then combind it with IsPlayerInRangeOfPoint .. Hmm
{
	new sql, Float:dist = 9999, Float:tmpdis;
	new Float:px, Float:py, Float:pz,
	Float:cx, Float:cy, Float:cz;

	GetPlayerPos(playerid, px, py, pz);

	for(new i; i < MAX_VEHICLES; i++)
	{
		if(!strcmp(Veh[i][Owner], "unowned"))
			continue;

		if(Veh[i][Link] == INVALID_VEHICLE_ID || Veh[i][Link] == 0)
			continue;

		GetVehiclePos(Veh[i][Link], cx, cy, cz);

		tmpdis = floatsqroot(floatpower(floatabs(floatsub(px,cx)),2)+floatpower(floatabs(floatsub(py,cy)),2)+floatpower(floatabs(floatsub(pz,cz)),2));

		if(tmpdis < dist)
		{
			dist = tmpdis;
			sql = Veh[i][SQLID];
		}
	}
	if(sql == 0)
		return 0;
	return sql;
}

stock GetWeaponType(weapon)
{
	switch(weapon)
	{
		case 0, 1: return 0;
		case 2, 3, 4, 5, 6, 7, 8, 9: return 1;
		case 22, 23, 24: return 2;
		case 25, 26, 27: return 3;
		case 28, 29, 32: return 4;
		case 30, 31: return 5;
		case 33, 34: return 6;
		case 35, 36, 37, 38: return 7;
		case 16, 17, 18, 39: return 8;
		case 41, 42, 43: return 9;
		case 10, 11, 12, 13, 14, 15: return 10;
		case 44, 45, 46: return 11;
	}
	return -1;
}

CMD:parkcar(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "You're not in a vehicle!");

	new sql = GetVSQLID(GetPlayerVehicleID(playerid));

	if(sql == 0)
		return SendClientMessage(playerid, -1, "This is not a saved vehicle");

	if(GetPlayerSpeed(playerid, 0) != 0)
		return SendClientMessage(playerid, -1, "Your vehicle must be completely stopped.");

	new idx = GetVIndex(sql);

	if(Veh[idx][vHealth] <= 400 && Player[playerid][AdminLevel] < 4)
		return SendClientMessage(playerid, -1, "Your vehicle must be repaired before it can be parked.");

	if(!strcmp(Veh[idx][Owner], "unowned", false) && Veh[idx][Group] == 0 && Veh[idx][GangLink] == 0 && Player[playerid][AdminLevel] < 4)
		if(Player[playerid][AdminLevel] >= 2)
			return SendClientMessage(playerid, -1, "This vehicle isn't owned by a player");
		else
			return 1;

	if(strcmp(Veh[idx][Owner], "unowned", false))
	{
		new slot = -1;

		for(new i; i < 5; i++)
		{
			if(Player[playerid][Cars][i] == sql)
			{
				slot = i;
			}
		}

		if(Veh[idx][impounded])
		{
			if(Groups[Player[playerid][Group]][CommandTypes] != 1 || Player[playerid][GroupRank] < 4)
				return SendClientMessage(playerid, -1, "You don't have the keys to this vehicle");
		}
		else
		{
			if(slot == -1 && Player[playerid][AdminLevel] < 4)
				return SendClientMessage(playerid, -1, "You don't own this vehicle");
		}
	}
	else
	{
		if(!HasVehicleAccess(playerid, sql))
			return SendClientMessage(playerid, -1, "You don't have the keys to this vehicle");
	}

	if(IsPlayerInParkcarBanZone(playerid) && !Player[playerid][AdminDuty])
		return SendClientMessage(playerid, WHITE, "You can't park this here!");

	GetVehiclePos(GetPlayerVehicleID(playerid), Veh[idx][vX] , Veh[idx][vY] , Veh[idx][vZ]);
	GetVehicleZAngle(GetPlayerVehicleID(playerid), Veh[idx][vAngle]);
	Veh[idx][vInt] = GetPlayerInterior(playerid);
	Veh[idx][vVWorld] = GetPlayerVirtualWorld(playerid);
	SaveVehicle(sql);

	SendClientMessage(playerid, -1, "You have parked your vehicle");

	new string[128];
	format(string, sizeof(string), "[PARKCAR] %s has parked vehicle %d (Group: %d | Gang: %d)", GetName(playerid), sql, Veh[idx][Group], Veh[idx][GangLink]);
	StatLog(string);
	return 1;
}

stock IsVehicleOwner(playerid, sql)
{
	new temp = -1;
	for(new i; i < 5; i++)
	{
		if(Player[playerid][Cars][i] == sql)
			temp = 1;
	}
	if(temp == -1)
		return 0;
	else
	return 1;
}

stock HasVKey(playerid, sql)
{
	new temp = -1;
	for(new i; i < 5; i++)
	{
		if(Player[playerid][Cars][i] == sql || Player[playerid][TempKey] == sql)
			temp = 1;
	}
	if(temp == -1)
		return 0;
	else
	return 1;
}

stock HasVGroupKey(playerid, idx)
{
	if(Veh[idx][Group] == Player[playerid][Group] && Player[playerid][Group] != 0)
		return 1;

	if(Veh[idx][GangLink] == Player[playerid][Gang] && Player[playerid][Gang] != 0 && DoesPlayerHavePerms(playerid, PERM_VEHICLES))
		return 1;

	return 0;
}

stock HasVJobKey(playerid, idx)
{
	if(Player[playerid][Job] == Veh[idx][Job] && Player[playerid][Job] != 0)
		return 1;

	if(Player[playerid][Job2] == Veh[idx][Job] && Player[playerid][Job2] != 0)
		return 1;

	return 0;
}

stock HasVehicleAccess(playerid, sql)
{
	new idx = GetVIndex(sql);
	if(idx == -1)
		return 0;

	if(Player[playerid][AdminDuty])
		return 1;

	if(Veh[idx][impounded] == 0)
	{
		if(HasVKey(playerid, sql) || HasVGroupKey(playerid, idx))// || HasVJobKey(playerid, idx))
			return 1;
	}
	else
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 1 && Player[playerid][GroupRank] >= 4)
			return 1;
	}
	return 0;
}

CMD:sellcar(playerid, params[])
{
	new target, price, string[256], end[256];

	sscanf(params, "di", target, price);
	if(target < MAX_PLAYERS)
	{
	    if(sscanf(params, "ui", target, price))
			return SendClientMessage(playerid, GREY, "SYNTAX: /sellcar [player] [price]");

		if(!IsPlayerConnectedEx(target))
			return SendClientMessage(playerid, -1, "That player is not connected or logged in.");
			
		if(Player[target][Mask] == 1)
	    	target = -1;
	}
	else
	    target = CheckIfMasked(target);
 	if(target == -1)
 		return SendClientMessage(playerid, -1, "That player is too far away!");
 
	if(GetPVarInt(target, "SellCar_Timeout") > gettime())
		return SendClientMessage(playerid, -1, "Wait until your current car sale with this person times out, before you make another.");

	if(!IsPlayerConnectedEx(target))
		return SendClientMessage(playerid, -1, "That player isn't connected");

	if(Player[playerid][PlayingHours] < 2)
		return SendClientMessage(playerid, -1, "You are not allowed to sell vehicles until you have 2 playing hours.");

	if(GetDistanceBetweenPlayers(playerid, target) > 5.0)
		return SendClientMessage(playerid, -1, "That player is too far away!");

	if(target == playerid)
		return SendClientMessage(playerid, -1, "You can't sell yourself a vehicle");

	if(price < 1)
		return SendClientMessage(playerid, WHITE, "You can't sell a car for negative amounts!");

	for(new i; i < 5; i++)
	{
		if(Player[playerid][Cars][i] > 0)
		{
			new idx = GetVIndex(Player[playerid][Cars][i]);
			if(Veh[idx][Link] == 0 || Veh[idx][Link] == INVALID_VEHICLE_ID)
				format(string, sizeof(string), "{F55858}[ %s ] %s\n", vNames[Veh[idx][Model] - 400] ,Veh[idx][VName]);
			else
			format(string, sizeof(string), "{87E359}[ %s ] %s\n", vNames[Veh[idx][Model] - 400] ,Veh[idx][VName]);
		}
		else
		format(string, sizeof(string), "Empty\n");
		strcat(end, string);
	}

	SetPVarInt(playerid, "SellCar_Price", price);
	SetPVarInt(playerid, "SellCar_Target", target + 1);
	SetPVarInt(target, "BuyCar_SellerID", playerid + 1);
	ShowPlayerDialog(playerid, VEHICLE_SELLCAR, DIALOG_STYLE_LIST, "Vehicle List" ,end, "Select", "Cancel");

	return 1;
}

CMD:lock(playerid, params[])
{
	if(!IsPlayerInRangeOfCar(playerid, 5))
        return SendClientMessage(playerid, -1, "You're not near a vehicle!");

	new sql = GetNearestCarSQL(playerid), idx = GetVIndex(sql),
	engine, lights, alarm, doors, bonnet, boot, objective, string[128];
	GetVehicleParamsEx(Veh[idx][Link], engine, lights, alarm, doors, bonnet, boot, objective);

	if(HasVehicleAccess(playerid, sql))
	{
		if(Veh[idx][windowState] == 1)
			return SendClientMessage(playerid, -1, "You can't lock this vehicle, its window is smashed!");

		if(IsABike(Veh[idx][Link]))
		{
			new Float:x, Float:y, Float:z;
			GetVehicleVelocity(Veh[idx][Link], x, y, z);

			new Float:bike_speed = floatsqroot(((x * x) + (y * y)) + (z * z)) * 100;
			bike_speed = floatround(bike_speed);

			// printf("%f, %f, %f, %f", x, y, z, bike_speed);

			if(floatcmp(bike_speed, 3.0) == 1)
				return SendClientMessage(playerid, -1, "You can't lock/unlock your bike while it's moving!");

			if(engine == 1)
			{
				format(string, sizeof(string), "* %s puts a wheel lock onto the bike.", GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, string);
				SetVehicleParamsEx(Veh[idx][Link], 0, lights, alarm, doors, bonnet, boot, objective);
			}
			else
			{
				format(string, sizeof(string), "* %s takes the wheel lock off of the bike.", GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, string);
				SetVehicleParamsEx(Veh[idx][Link], 1, lights, alarm, doors, bonnet, boot, objective);
			}
		}
		else
		{
			if(doors == 1)
			{
				format(string, sizeof(string), "* %s unlocks their vehicle", GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, string);
				SetVehicleParamsEx(Veh[idx][Link],engine, lights, alarm, 0, bonnet, boot, objective);
				Veh[idx][lockState] = 0;
			}
			else
			{
				format(string, sizeof(string), "* %s locks their vehicle", GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, string);
				SetVehicleParamsEx(Veh[idx][Link],engine, lights, alarm, 1, bonnet, boot, objective);
				Veh[idx][lockState] = 1;
			}
		}

		new Float:Pos[3];

		GetVehiclePos(Veh[idx][Link], Pos[0], Pos[1], Pos[2]);
		PlayNearbySound(Pos[0], Pos[1], Pos[2], 1145, false);
	}
	else
		return SendClientMessage(playerid, -1, "You don't have the keys for this vehicle");
	return 1;
}

CMD:callcar(playerid, params[])
{
	if(Player[playerid][Checkpoint] != 0)
		return SendClientMessage(playerid, -1, "You already have an active checkpoint");

	new string[255], end[255];

	for(new i; i < 5; i++)
	{
		if(Player[playerid][Cars][i] > 0)
		{
			new idx = GetVIndex(Player[playerid][Cars][i]);
			if(Veh[idx][Link] == 0 || Veh[idx][Link] == INVALID_VEHICLE_ID)
			{
				if(Veh[idx][impounded] == 0)
					format(string, sizeof(string), "{F55858}[ %s ] %s\n", vNames[Veh[idx][Model] - 400] ,Veh[idx][VName]);
				else
				format(string, sizeof(string), "{F55858}[ %s ] %s [IMPOUNDED]\n", vNames[Veh[idx][Model] - 400] ,Veh[idx][VName]);
			}
			else
			{
				if(Veh[idx][impounded] == 0)
					format(string, sizeof(string), "{87E359}[ %s ] %s\n", vNames[Veh[idx][Model] - 400] ,Veh[idx][VName]);
				else
				format(string, sizeof(string), "{87E359}[ %s ] %s [IMPOUNDED]\n", vNames[Veh[idx][Model] - 400] ,Veh[idx][VName]);
			}
		}
		else
		format(string, sizeof(string), "Empty\n");
		strcat(end, string);
	}

	ShowPlayerDialog(playerid, VEHICLE_CALLCAR, DIALOG_STYLE_LIST, "Track Vehicle", end, "Find", "Cancel");
	return 1;
}

CMD:getcar(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new sqlid;
	if(isnull(params))
		return SendClientMessage(playerid, GREY, "SYNTAX: /getcar [sqlid]");

	sqlid = strval(params);
	new idx = GetVIndex(sqlid), string[128];

	if(!IsValidSQL(sqlid))
		return SendClientMessage(playerid, -1, "Invalid SQLID");

	if(!IsSQLVehicleSpawned(sqlid))
		return SendClientMessage(playerid, -1, "Vehicle isn't spawned");

	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);

	format(string, sizeof(string), "You have teleported vehicle SQLID %d to you", sqlid);
	SendClientMessage(playerid, -1, string);

	SetVehiclePos(Veh[idx][Link], x, y + 2, z);
	SetVehicleVirtualWorld(Veh[idx][Link], GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(Veh[idx][Link], GetPlayerInterior(playerid));

	return 1;
}

CMD:gotocar(playerid, params[])
{
	new sqlid;

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(isnull(params))
		return SendClientMessage(playerid, GREY, "SYNTAX: /gotocar[sqlid]");

	sqlid = strval(params);
	new idx = GetVIndex(sqlid), string[128];

	if(!IsValidSQL(sqlid))
		return SendClientMessage(playerid, -1, "Invalid SQLID");

	if(!IsSQLVehicleSpawned(sqlid))
		return SendClientMessage(playerid, -1, "Vehicle isn't spawned");

	new Float:x, Float:y, Float:z;
	GetVehiclePos(Veh[idx][Link], x, y, z);

	format(string, sizeof(string), "You have teleported to vehicleid SQLID %d", sqlid);
	SendClientMessage(playerid, -1, string);

	SetPlayerPos_Update(playerid, x, y, z + 3);

	return 1;
}

CMD:fixcar(playerid, params[])
{
	if(gettime() < GetPVarInt(playerid, "CarReload"))
		return SendClientMessage(playerid, -1, "Please wait the allotted 2 seconds to finish your last vehicle related action.");

	//if(Player[playerid][Job] != 2 && Player[playerid][Job2] != 2)
		//return SendClientMessage(playerid, -1, "You must be a mechanic to use this command");
	
	if(Jobs[Player[playerid][Job]][JobType] != JOB_MECHANIC && Jobs[Player[playerid][Job2]][JobType] != JOB_MECHANIC)
		return SendClientMessage(playerid, -1, "You must be a mechanic to use this command");

	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "You must be outside the vehicle");

	if(GetPlayerSpeed(playerid, 0) != 0)
		return SendClientMessage(playerid, -1, "Your vehicle must be completely stopped");

	if(Player[playerid][EngineParts] < 1)
	    return SendClientMessage(playerid, WHITE, "You have no engine parts to repair your car!");

	if(Player[playerid][Toolkit] < 1)
	    return SendClientMessage(playerid, WHITE, "You need a toolkit to repair the vehicle.");

	if(GetPVarInt(playerid, "MechanicReload") > gettime()){
		new string[128];
		format(string, sizeof(string), "You must wait %d seconds before you can do this again.", GetPVarInt(playerid, "MechanicReload") - gettime());
		return SendClientMessage(playerid, -1, string);
	}

	new veh = NearestVehicle(playerid), sql = GetVSQLID(veh), Float:cX, Float:cY, Float:cZ;
	GetVehiclePos(veh, cX, cY, cZ);

	if(sql == 0 && Player[playerid][AdminLevel] > 0 && IsPlayerInRangeOfPoint(playerid, 4.0, cX, cY, cZ))
	{
		SendClientMessage(playerid, -1, "You've repaired your admin vehicle");
		RepairVehicle(veh);
		return 1;
	}

	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);

	if(bonnet != 1)
		return SendClientMessage(playerid, -1, "The hood must be up to repair the vehicle");

	if(!IsVehicleFacingPlayer(veh, playerid))
		return SendClientMessage(playerid, -1, "You must be in front of the vehicle to fix it.");

	if(engine == 1)
		return SendClientMessage(playerid, -1, "You must turn off the engine to repair the vehicle.");

	switch(random(100))
	{
		case 0 .. 98:
		{
			new idx = GetVIndex(sql);

			if(Jobs[Veh[idx][Job]][JobType] == JOB_TRUCKER)
				return SendClientMessage(playerid, -1, "You must take the truck back to the depot and let them fix it.");

			RepairVehicle(veh);
			Veh[idx][vHealth] = 1000;
			SetVehicleHealth(veh, Veh[idx][vHealth]);

			if(Groups[Veh[idx][Group]][CommandTypes] == 1)
			{
				if(GetVehicleModel(Veh[idx][Link]) == 427 || GetVehicleModel(Veh[idx][Link]) == 528 || GetVehicleModel(Veh[idx][Link]) == 601)
				{
					Veh[idx][vHealth] = 5000;
					SetVehicleHealth(veh, Veh[idx][vHealth]);
				}
			}

			new string[128];
			format(string, sizeof(string), "* %s repairs the vehicle", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
			PlayerPlayNearbySound(playerid, 1133);
			if(IsABike(veh) && engine == 0)
				SetVehicleParamsEx(veh, 1, lights, alarm, doors, bonnet, boot, objective);
			else
				SetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);

			Veh[idx][damageState] = 0;
			Veh[idx][windowState] = 0;

			Player[playerid][EngineParts]--;
			Player[playerid][TotalCarsFixed] ++;

			SetPVarInt(playerid, "MechanicReload", gettime() + MECHANIC_RELOAD_TIME);
			SetPVarInt(playerid, "CarReload", gettime() + 2);
		}
		default:
		{
			new idx = GetVIndex(sql);

			if(Jobs[Veh[idx][Job]][JobType] == JOB_TRUCKER)
				return SendClientMessage(playerid, -1, "You must take the truck back to the depot and let them fix it.");

			new string[128];
			format(string, sizeof(string), "* %s tried to repair the vehicle, but broke their toolkit.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
			Player[playerid][Toolkit]--;
			Player[playerid][TotalToolkitsBroken] ++;
		}
	}

	return 1;
}

CMD:refillgascan(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
	    return SendClientMessage(playerid, -1, "You can't do this from inside a vehicle!");

	if(Player[playerid][GasCans] < 1)
	    return SendClientMessage(playerid, -1, "You don't have a gas can to refill!");

	if(Player[playerid][GasFull] >= 25)
	    return SendClientMessage(playerid, -1, "Your gas can is already full!");

	new new_fuel = (isnull(params)) ? (25 - Player[playerid][GasFull]) : (strval(params));

	if(new_fuel + Player[playerid][GasFull] > 25)
		new_fuel = 25 - Player[playerid][GasFull];

	new biz_id = -1, pump_id = -1, price, string[128];
	for(new i; i < MAX_BUSINESSES; i++)
	{
		for(new x; x < MAX_PUMPS; x++)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 10.0, Businesses[i][GasX][x], Businesses[i][GasY][x], Businesses[i][GasZ][x]))
				continue;

			if(Businesses[i][GasPump][x] != 1)
			{
				SendClientMessage(playerid, WHITE, "That pump is no longer functioning.");
				continue;
			}

			if(EmptyGasStations)
			{
				SendClientMessage(playerid, WHITE, "There is no gas in this gas pump!");
				continue;
			}

			biz_id = i;
			pump_id = x;
			break;
		}
	}

	if(biz_id == -1 || pump_id == -1)
		return SendClientMessage(playerid, -1, "You're not near a gas station");

	price = new_fuel * Businesses[biz_id][bProductPrice5];
	if(Player[playerid][Money] < price)
	    return SendClientMessage(playerid, -1, "You don't have enough money to refill your gas can!");

	Player[playerid][GasFull] += new_fuel;
	Player[playerid][Money] -= price;
//	Businesses[biz_id][bVault] += price;
	AddToStorage(biz_id, CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, price);

	format(string, sizeof(string), "* %s has refilled their gas can.", GetNameEx(playerid));
	NearByMessage(playerid, NICESKY, string);
	format(string, sizeof(string), "You refilled your gas can to %d%s, costing you %s.", Player[playerid][GasFull] * 4, "%%", PrettyMoney(price));
	SendClientMessage(playerid, YELLOW, string);
	return 1;
}

stock IsPlayerInRangeOfGasPump(playerid, Float:range, &businessid, &pumpid)
{
	new b = -1, p = -1;
	for(new i; i < MAX_BUSINESSES; i++)
	{
		if(Businesses[i][bType] != 16)
			continue;

		for(new x; x < MAX_PUMPS; x++)
		{
			if(Businesses[i][GasPump][x] != 1)
				continue;

			if(!IsPlayerInRangeOfPoint(playerid, range, Businesses[i][GasX][x], Businesses[i][GasY][x], Businesses[i][GasZ][x]))
				continue;

			b = i;
			p = x;
		}
	}
	businessid = b;
	pumpid = p;
	return 1;
}


CMD:vsearch(playerid, params[]) // Needs to be improved (dialogs?)
{
	new target;

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(sscanf(params, "u", target))
		return SendClientMessage(playerid, GREY, "SYNTAX: /vsearch [player]");

	new string[128];
	for(new i; i < 5; i++)
	{
		if(Player[target][Cars][i] != 0)
		{
			format(string, sizeof(string), "Slot %d: %d", i + 1, Player[target][Cars][i]);
		}
		else
		format(string, sizeof(string), "Slot %d: Empty", i + 1);
		SendClientMessage(playerid, -1, string);
	}
	return 1;
}

/*CMD:hotwire(playerid, params[])
{
	if(GetPVarInt(playerid, "hotwireCD") > gettime())
		return SendClientMessage(playerid, -1, "You can't do that right now");

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "You're not in a vehicle");

	if(Player[playerid][Tied] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] == 1 || Player[playerid][AdminFrozen] == 1)
	    return SendClientMessage(playerid, -1, "You can't do this as you're cuffed, tazed or tied!");

	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		return SendClientMessage(playerid, -1, "You must be the driver of a vehicle to use this command");

	new sql = GetNearestCarSQL(playerid), idx = GetVIndex(sql);

	if(sql == 0)
		return SendClientMessage(playerid, -1, "That vehicle isn't saved in the database");

	if(IsABike(Veh[idx][Link]))
		return SendClientMessage(playerid, -1, "You can't hotwire a bike!");

	new engine, lights, alarm, doors, boot ,bonnet, objective;
	GetVehicleParamsEx(Veh[idx][Link], engine, lights, alarm, doors, boot ,bonnet, objective);

	if(Veh[idx][Fuel] < 1 && Player[playerid][AdminDuty] == 0)
		return SendClientMessage(playerid, -1, "The vehicle has no fuel!");

	if(Veh[idx][damageState] == 1)
		return SendClientMessage(playerid, -1, "The vehicle requires a fix before it can be started");

	if(engine == 1)
		return SendClientMessage(playerid, -1, "No point in hotwiring a started vehicle");

	new string[128];
	format(string, sizeof(string), "* %s starts playing with wires in the vehicle.", GetNameEx(playerid));
	NearByMessage(playerid, NICESKY, string);

	SetPVarInt(playerid, "HotwireTime", gettime() + 1);
	SetPVarInt(playerid, "HotwireVehID", GetPlayerVehicleID(playerid));
	return 1;
}*/

CMD:givekey(playerid, params[])
{
	new target, string[256], end[256];

	if(sscanf(params, "u", target))
		return SendClientMessage(playerid, GREY, "SYNTAX: /givekey [playerid]");

	if(!IsPlayerConnectedEx(target))
		return SendClientMessage(playerid, -1, "That player isn't connected!");

	if(GetDistanceBetweenPlayers(playerid, target) > 5.0)
		return SendClientMessage(playerid, -1, "That player is too far away!");

	if(target == playerid)
		return SendClientMessage(playerid, -1, "You can't give yourself keys!");

	if(Player[target][TempKey] != 0)
	{
		format(string, sizeof(string), "%s has tried to give you keys, but you already have some (( /dropkey ))", GetName(playerid));
		SendClientMessage(target, YELLOW, string);
		SendClientMessage(playerid, YELLOW, "That player already has some keys");
		return 1;
	}

	for(new i; i < 5; i++)
	{
		if(Player[playerid][Cars][i] > 0)
		{
			new idx = GetVIndex(Player[playerid][Cars][i]);
			if(Veh[idx][Link] == 0 || Veh[idx][Link] == INVALID_VEHICLE_ID)
				format(string, sizeof(string), "{F55858}[ %s ] %s\n", vNames[Veh[idx][Model] - 400] ,Veh[idx][VName]);
			else
			format(string, sizeof(string), "{87E359}[ %s ] %s\n", vNames[Veh[idx][Model] - 400] ,Veh[idx][VName]);
		}
		else
		format(string, sizeof(string), "Empty\n");
		strcat(end, string);
	}
	ShowPlayerDialog(playerid, VEHICLE_GIVEKEYS, DIALOG_STYLE_LIST, "Vehicle List" ,end, "Select", "Cancel");
	SetPVarInt(playerid, "GiveKey_Target", target + 1);
	return 1;
}


CMD:dropkey(playerid, params[])
{
	if(!Player[playerid][TempKey])
		return SendClientMessage(playerid, -1, "You do not have a lent key");

	new string[128];
	SendClientMessage(playerid, -1, "You drop your lent car keys");
	format(string, sizeof(string), "%s has dropped their lent car keys.", GetNameEx(playerid));
	NearByMessage(playerid, NICESKY, string);

	foreach(Player, i)
	{
		for(new j; j < 5; j++)
		{
			if(playerid == Player[i][SpareKeys][j])
			{
				Player[i][SpareKeys][j] = -1;
				break;
			}
		}
	}

	Player[playerid][TempKey] = 0;
	return 1;
}

CMD:vdetails(playerid, params[]) // Needs to be improved (dialogs?)
{
	new option[24], end[32];

	if(sscanf(params, "s[24]s[32]", option, end))
	{
		SendClientMessage(playerid, GREY, "SYNTAX /vdetails [option] [value]");
		return SendClientMessage(playerid, -1, "Options: vname"); //plate
	}

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "You must be in a vehicle to use this command");

	new sql = GetVSQLID(GetPlayerVehicleID(playerid)), idx = GetVIndex(sql);

	if(sql == 0)
		return SendClientMessage(playerid, -1, "This vehicle isn't in the database");

	new slot = -1;
	for(new i; i < 5; i++)
	{
		if(Player[playerid][Cars][i] == sql)
		{
			slot++;
			break;
		}
	}

	if(slot == -1)
		return SendClientMessage(playerid, -1, "You don't own this vehicle");

	if(strfind(end, "'") != -1)
		return SendClientMessage(playerid, -1, "Your plate or vname contains invalid characters.");

	if(!strcmp(option, "vname"))
	{
		format(Veh[idx][VName], 32, "%s", DB_Escape(end));
		SendClientMessage(playerid, -1, "You've changed the vehicles name");
	}
	/*else if(!strcmp(option, "plate"))
	{
		format(Veh[idx][Plate], 32, "%s", DB_Escape(end));
		SendClientMessage(playerid, -1, "You've changed the vehicles plate");
	}*/
	else
		return SendClientMessage(playerid, -1, "Invalid option");

	return 1;
}

stock GetFreeCarSlot(playerid)
{
	new slot = -1;
	for(new i; i < 5; i++)
	{
		if(Player[playerid][Cars][i] == 0)
		{
			slot = i;
			break;
		}
	}
	return slot;
}

stock SaveVMods(sql)
{
	new query[500], idx = GetVIndex(sql);
	format(query, sizeof(query), "UPDATE vehicles SET mod0 = '%d', mod1 = '%d', mod2 = '%d', mod3 = '%d', mod4 = '%d', mod5 = '%d', mod6 = '%d', mod7 = '%d', mod8 = '%d', mod9 = '%d', mod10 = '%d'",Veh[idx][Mod0],Veh[idx][Mod1],Veh[idx][Mod2],Veh[idx][Mod3],Veh[idx][Mod4],Veh[idx][Mod5],Veh[idx][Mod6],Veh[idx][Mod7],Veh[idx][Mod8],Veh[idx][Mod9], Veh[idx][Mod10]);
	format(query, sizeof(query), "%s, mod11 = '%d', mod12 = '%d', mod13 = '%d', color1 = '%d', color2 = '%d' WHERE sqlid = '%d'", query, Veh[idx][Mod11], Veh[idx][Mod12], Veh[idx][Mod13], Veh[idx][Color1], Veh[idx][Color2], sql);

	mysql_query(MYSQL_MAIN, query, false);
}

stock EditVehicleString(playerid)
{
	new string2[900];
	format(string2, sizeof(string2), "Edit Model	{FF5930}(%d)\nEdit Color1	{F55858}(%d)\nEdit Color2	{F55858}(%d)\nEdit Group	{FF5930}(%d)\nEdit Job	{FF5930}(%d)\nEdit VIP    	{FF5930}(%d)",
	VehicleEdit[playerid][Model], VehicleEdit[playerid][Color1], VehicleEdit[playerid][Color2], VehicleEdit[playerid][Group], VehicleEdit[playerid][Job], VehicleEdit[playerid][VIP]);

	format(string2, sizeof(string2), "%s\nEdit Plate	{FF5930}(%s)\nEdit Fuel:	{FF5930}(%d)\nEdit Interior	{FF5930}(%d)",
	string2, VehicleEdit[playerid][Plate], VehicleEdit[playerid][Fuel], VehicleEdit[playerid][vInt]);

	format(string2, sizeof(string2), "%s\nEdit VWorld	{FF5930}(%d)\nEdit Respawn	{FF5930}(%d)\nEdit Owner	{FF5930}(%s)\nEdit VName	{FF5930}(%s)\nUpdate Position\nMods\nEdit Trunk\n{%s}Despawn/Spawn\nEdit Health		(%f)\nEdit Lock			(%d)\nEdit Paintjob			(%d)\nEdit Radio			(%d)\nRegistered			%s\nGang Link			(%d)\nImpound Counter	(%d)\n\n{%s}Impounded\nSave Changes\n{F55858}Delete Vehicle\n", string2, VehicleEdit[playerid][vVWorld], VehicleEdit[playerid][Respawn],
	VehicleEdit[playerid][Owner], VehicleEdit[playerid][VName], (VehicleEdit[playerid][spawnState] == 1)  ? ("87E359") : ("F55858"), VehicleEdit[playerid][vHealth], VehicleEdit[playerid][lockState], VehicleEdit[playerid][PaintJob], VehicleEdit[playerid][RadioInstalled], (VehicleEdit[playerid][Registered]) ? ("{87E359}Yes{FFFFFF}") : ("{F55858}No{FFFFFF}"), VehicleEdit[playerid][GangLink], VehicleEdit[playerid][ImpoundCount], (VehicleEdit[playerid][impounded]) ? ("87E359") : ("F55858"));
	return string2;
}

stock GetPlayerVehCount(playerid)
{
	new count;
	for(new i; i < 5; i++)
	{
		if(Player[playerid][Cars][i] != 0)
			count++;
	}
	return count;
}


stock GetPlayerVehicleCount(name[])
{
	new Cache:cache, query[128], count;

	mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM vehicles WHERE owner = '%e'", name);
	cache = mysql_query(MYSQL_MAIN, query);
	count = cache_get_row_count();
	cache_delete(cache);
	return count;
}

stock RestoreVMods(sql)
{
	new idx = GetVIndex(sql);

	SetVehicleNumberPlate(Veh[idx][Link], Veh[idx][Plate]);

	if(Veh[idx][Mod0] != -1 || Veh[idx][Mod0] != 0)
		AddVehicleComponent(Veh[idx][Link], Veh[idx][Mod0]);

	if(Veh[idx][Mod1] != -1 || Veh[idx][Mod1] != 0)
		AddVehicleComponent(Veh[idx][Link], Veh[idx][Mod1]);

	if(Veh[idx][Mod2] != -1 || Veh[idx][Mod2] != 0)
		AddVehicleComponent(Veh[idx][Link], Veh[idx][Mod2]);

	if(Veh[idx][Mod3] != -1 || Veh[idx][Mod3] != 0)
		AddVehicleComponent(Veh[idx][Link], Veh[idx][Mod3]);

	if(Veh[idx][Mod4] != -1 || Veh[idx][Mod4] != 0)
		AddVehicleComponent(Veh[idx][Link], Veh[idx][Mod4]);

	if(Veh[idx][Mod5] != -1 || Veh[idx][Mod5] != 0)
		AddVehicleComponent(Veh[idx][Link], Veh[idx][Mod5]);

	if(Veh[idx][Mod6] != -1 || Veh[idx][Mod6] != 0)
		AddVehicleComponent(Veh[idx][Link], Veh[idx][Mod6]);

	if(Veh[idx][Mod7] != -1 || Veh[idx][Mod7] != 0)
		AddVehicleComponent(Veh[idx][Link], Veh[idx][Mod7]);

	if(Veh[idx][Mod8] != -1 || Veh[idx][Mod8] != 0)
		AddVehicleComponent(Veh[idx][Link], Veh[idx][Mod8]);

	if(Veh[idx][Mod9] != -1 || Veh[idx][Mod9] != 0)
		AddVehicleComponent(Veh[idx][Link], Veh[idx][Mod9]);

	if(Veh[idx][Mod10] != -1 || Veh[idx][Mod10] != 0)
		AddVehicleComponent(Veh[idx][Link], Veh[idx][Mod10]);

	if(Veh[idx][Mod11] != -1 || Veh[idx][Mod11] != 0)
		AddVehicleComponent(Veh[idx][Link], Veh[idx][Mod11]);

	if(Veh[idx][Mod12] != -1 || Veh[idx][Mod12] != 0)
		AddVehicleComponent(Veh[idx][Link], Veh[idx][Mod12]);

	if(Veh[idx][Mod13] != -1 || Veh[idx][Mod13] != 0)
		AddVehicleComponent(Veh[idx][Link], Veh[idx][Mod13]);
}

stock ResetVMods(sql)
{
	new query[500], idx = GetVIndex(sql);

	RemoveVehicleComponent(Veh[idx][Link],Veh[idx][Mod0] );
	RemoveVehicleComponent(Veh[idx][Link],Veh[idx][Mod1] );
	RemoveVehicleComponent(Veh[idx][Link],Veh[idx][Mod2] );
	RemoveVehicleComponent(Veh[idx][Link],Veh[idx][Mod3] );
	RemoveVehicleComponent(Veh[idx][Link],Veh[idx][Mod4] );
	RemoveVehicleComponent(Veh[idx][Link],Veh[idx][Mod5] );
	RemoveVehicleComponent(Veh[idx][Link],Veh[idx][Mod6] );
	RemoveVehicleComponent(Veh[idx][Link],Veh[idx][Mod7] );
	RemoveVehicleComponent(Veh[idx][Link],Veh[idx][Mod8] );
	RemoveVehicleComponent(Veh[idx][Link],Veh[idx][Mod9] );
	RemoveVehicleComponent(Veh[idx][Link],Veh[idx][Mod10] );
	RemoveVehicleComponent(Veh[idx][Link],Veh[idx][Mod11] );
	RemoveVehicleComponent(Veh[idx][Link],Veh[idx][Mod12] );
	RemoveVehicleComponent(Veh[idx][Link],Veh[idx][Mod13] );

	Veh[idx][Mod0] = 0;
	Veh[idx][Mod1] = 0;
	Veh[idx][Mod2] = 0;
	Veh[idx][Mod3] = 0;
	Veh[idx][Mod4] = 0;
	Veh[idx][Mod5] = 0;
	Veh[idx][Mod6] = 0;
	Veh[idx][Mod7] = 0;
	Veh[idx][Mod8] = 0;
	Veh[idx][Mod9] = 0;
	Veh[idx][Mod10] = 0;
	Veh[idx][Mod11] = 0;
	Veh[idx][Mod12] = 0;
	Veh[idx][Mod13] = 0;

	format(query, sizeof(query), "UPDATE vehicles SET mod0 = '0', mod1 = '0', mod2 = '0', mod3 = '0', mod4 = '0', mod5 = '0', mod6 = '0', mod7 = '0', mod8 = '0', mod9 = '0', mod10 = '0'");

	format(query, sizeof(query), "%s, mod11 = '0', mod12 = '0', mod13 = '0' WHERE sqlid = '%d'", query ,sql);

	mysql_query(MYSQL_MAIN, query, false);
}

stock GetWeaponNameEx(weaponid)
{
	new string[32];
	GetWeaponName(weaponid, string, sizeof(string));
	return string;
}

stock IsVehicleEmpty(carid)
{
	foreach(Player, i)
	{
		if(IsPlayerInVehicle(i, carid))
			return 1;
	}
	return 0;
}
/*
CMD:resetdealercars(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 5)
		return 1;

	if(isnull(params))
		return SendClientMessage(playerid, -1, "SYNTAX: /resetdealercars [dealership]");

	if(!strcmp(params, "upper", true))
		UpperDealerCars = 0;
	else if(!strcmp(params, "lower", true))
		LowerDealerCars = 0;
	else SendClientMessage(playerid, -1, "Valid Options: upper, lower");
	return 1;
}*/

stock PurchaseCar(playerid, carid, price, dealership)
{
	new cell = GetEmptyVCell(), string[128];
	if(cell == -1)
		return SendClientMessage(playerid, -1, "You cannot purchase this vehicle at this time. There are no free cells.");

	if(Player[playerid][VipRank] > 0 && GetPVarInt(playerid, "BuyingVIPCar") == 0)
		price = (price * 9) / 10;

	if(Player[playerid][Money] < price)
		return SendClientMessage(playerid, -1, "You can't afford this vehicle. Visit https://crearoleplay.com to learn how to purchase In-Game currency, or to learn about VIP vehicle discounts.");

	if(GetPlayerVehCount(playerid) >= GetPlayerMaxVehicles(playerid))
		return SendClientMessage(playerid, -1, "You can't own anymore vehicles! VIP players can carry more than 3 cars. Visit https://crearoleplay.com to learn how to subscribe to VIP.");

	new slot = GetFreeCarSlot(playerid);

	new query[256], Cache:cache;

 	if(Player[playerid][AdminDuty] < 1)
		mysql_format(MYSQL_MAIN, query, sizeof(query), "INSERT INTO vehicles (sqlid, owner, model ,x, y, z) VALUES ('%d', '%e', '%d' ,'%f', '%f', '%f')", 0, GetName(playerid), carid ,OwnedCarSpawnX, OwnedCarSpawnY, OwnedCarSpawnZ);
	else
		mysql_format(MYSQL_MAIN, query, sizeof(query), "INSERT INTO vehicles (sqlid, owner, model ,x, y, z) VALUES ('%d', '%e', '%d' ,'%f', '%f', '%f')", 0, Player[playerid][NormalName], carid ,OwnedCarSpawnX, OwnedCarSpawnY, OwnedCarSpawnZ);

	cache = mysql_query(MYSQL_MAIN, query);

	Veh[cell][SQLID] = cache_insert_id();
	Player[playerid][Cars][slot] = Veh[cell][SQLID];
	cache_delete(cache);

	Veh[cell][Model] = carid;

	Veh[cell][Color1] = 0;

	Veh[cell][Color2] = 1;

	Veh[cell][PaintJob] = -1;

	if(GetPVarInt(playerid, "BuyingVIPCar") == 1)
		Veh[cell][VIP] = 5;

	Veh[cell][Group] = 0;

	Veh[cell][Job] = 0;

	/*if(dealership == 0)
	{
		new PlusX = (UpperDealerCars * 4) + 1;
		if(UpperDealerCars < 10)
		{

			Veh[cell][vX] = 2148.7827 - PlusX;

			Veh[cell][vY] = 1398.1410;

			Veh[cell][vZ] = 10.5176;

			Veh[cell][vAngle] = 180.000;

			UpperDealerCars++;
		}
		else
		{
			PlusX = ((UpperDealerCars - 10) * 4) + 1;

			Veh[cell][vX] = 2100.6167 + PlusX;

			Veh[cell][vY] = 1408.7355;

			Veh[cell][vZ] = 10.5252;

			Veh[cell][vAngle] = 360.0000;

			UpperDealerCars++;
		}

		if(UpperDealerCars == 20)
			UpperDealerCars = 0;

		Veh[cell][lockState] = 1;

	}
	else if(dealership == 1)
	{
		new PlusY = (LowerDealerCars * 4) + 1;

		if(LowerDealerCars < 25)
		{
			Veh[cell][vX] = 1730.6244;

			Veh[cell][vY] = 1884.7961 + PlusY;

			Veh[cell][vZ] = 10.5255;

			Veh[cell][vAngle] = 90.00000;

			LowerDealerCars++;
		}
		else
		{
			PlusY = ((LowerDealerCars - 25) * 4) + 1;

			Veh[cell][vX] = 1742.4003;

			Veh[cell][vY] = 2021.6123 - PlusY;

			Veh[cell][vZ] = 10.5251;

			Veh[cell][vAngle] = 271.0000;

			LowerDealerCars++;
		}

		if(LowerDealerCars == 45)
			LowerDealerCars = 0;

		Veh[cell][lockState] = 1;
	}*/
	if(dealership == 0)
	{
		Veh[cell][vX] = OwnedCarSpawnX + random(5);

		Veh[cell][vY] = OwnedCarSpawnY  + random(5);

		Veh[cell][vZ] = OwnedCarSpawnZ;
	}
	else if(dealership == 1)
	{
		Veh[cell][vX] = OwnedCarSpawn2X + random(5);

		Veh[cell][vY] = OwnedCarSpawn2Y + random(5);

		Veh[cell][vZ] = OwnedCarSpawn2Z;
	}
	else if(dealership == 2)
	{
		Veh[cell][vX] = BikeSpawn[0];

		Veh[cell][vY] = BikeSpawn[1];

		Veh[cell][vZ] = BikeSpawn[2];

		Veh[cell][vAngle] = 90.000;

		Veh[cell][lockState] = 0;
	}
	else if(dealership == 3)
	{
		Veh[cell][vX] = VanSpawn[0];

		Veh[cell][vY] = VanSpawn[1];

		Veh[cell][vZ] = VanSpawn[2];

		Veh[cell][lockState] = 1;
	}

	Veh[cell][vInt] = 0;

	Veh[cell][vVWorld] = 0;

	Veh[cell][Mod0] = 0;

	Veh[cell][Mod1] = 0;

	Veh[cell][Mod2] = 0;

	Veh[cell][Mod3] = 0;

	Veh[cell][Mod4] = 0;

	Veh[cell][Mod5] = 0;

	Veh[cell][Mod6] = 0;

	Veh[cell][Mod7] = 0;

	Veh[cell][Mod8] = 0;

	Veh[cell][Mod9] = 0;

	Veh[cell][Mod10] = 0;

	Veh[cell][Mod11] = 0;

	Veh[cell][Mod12] = 0;

	Veh[cell][Mod13] = 0;

	Veh[cell][Respawn] = -1;

	if(Player[playerid][AdminDuty] > 0 || Player[playerid][UnderCover] > 0 || Player[playerid][Mask] == 1)
		format(Veh[cell][Owner], 24, "%s", Player[playerid][NormalName]);
	else
		format(Veh[cell][Owner], 24, "%s", GetName(playerid));

	// Veh[cell][Weapons][0] = -1;

	// Veh[cell][Weapons][1] = -1;

	// Veh[cell][Weapons][2] = -1;

	Veh[cell][vHealth] = 1000;

	Veh[cell][Fuel] = 100;

	Veh[cell][Registered] = 0;

	Veh[cell][RadioInstalled] = 0;

	Veh[cell][ImpoundCount] = 0;

	Veh[cell][TrunkContents] = 0;

	format(Veh[cell][VName], 50, "New Vehicle");

	new plate[32];
	RandomLicensePlate(plate);
	format(Veh[cell][Plate], 32, plate);

	//Veh[cell][Bomb] = -1;

	Veh[cell][Link] = 0;

	if(Player[playerid][VipRank] > 0 && GetPVarInt(playerid, "BuyingVIPCar") == 0)
		SendClientMessage(playerid, YELLOW, "You have saved 10 percent of the price on this car!");

	Player[playerid][Money] -= price;
//	Businesses[Player[playerid][InBusiness]][bVault] += price;
	AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, price);

	SpawnVehicleSQL(Player[playerid][Cars][slot]);
	SaveVehicle(Veh[cell][SQLID]);

	//SendClientMessage(playerid, -1, "You've purchased a vehicle!");

	if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
		ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Vehicle Help", "{FFFFFF}You have purchased a vehicle! You can use a vehicle to store weapons in your trunk or drive around to any location you desire.\nYour vehicle will be right outside the dealership and you can use /callcar if there is more than one vehicle.\nOnce you find it use /lock to unlock the car and get inside using the F key on your keyboad.\n\n{009900}Commands:{FFFFFF}\n/e\n/lock\n/vstore\n/vtake\n/car", "Okay", "");
	else SendClientMessage(playerid, -1, "You've purchased a vehicle!");

	SavePlayerData(playerid);
	format(string, sizeof(string), "%s has purchased a %d for %d.", GetName(playerid), carid, price);
	StatLog(string);

	return 1;
}

stock PurchaseVipCar(playerid, carid, price)
{
	new cell = GetEmptyVCell(), string[128];
	if(cell == -1)
		return SendClientMessage(playerid, -1, "You cannot purchase this vehicle at this time. There are no free cells.");

	if(Player[playerid][Money] < price)
		return SendClientMessage(playerid, -1, "You can't afford this vehicle. Visit https://crearoleplay.com to learn how to purchase In-Game currency.");

	if(GetPlayerVehCount(playerid) >= GetPlayerMaxVehicles(playerid))
		return SendClientMessage(playerid, -1, "You can't own anymore vehicles!");

	new slot = GetFreeCarSlot(playerid);

	new query[256], Cache:cache;

 	if(Player[playerid][AdminDuty] < 1)
		mysql_format(MYSQL_MAIN, query, sizeof(query), "INSERT INTO vehicles (sqlid, owner, model ,x, y, z) VALUES ('%d', '%e', '%d' ,'%f', '%f', '%f')", 0, GetName(playerid), carid ,OwnedCarSpawnX, OwnedCarSpawnY, OwnedCarSpawnZ);
	else
		mysql_format(MYSQL_MAIN, query, sizeof(query), "INSERT INTO vehicles (sqlid, owner, model ,x, y, z) VALUES ('%d', '%e', '%d' ,'%f', '%f', '%f')", 0, Player[playerid][NormalName], carid ,OwnedCarSpawnX, OwnedCarSpawnY, OwnedCarSpawnZ);

	cache = mysql_query(MYSQL_MAIN, query);

	Veh[cell][SQLID] = cache_insert_id();
	Player[playerid][Cars][slot] = Veh[cell][SQLID];
	cache_delete(cache);
	Veh[cell][Model] = carid;

	Veh[cell][Color1] = 0;

	Veh[cell][Color2] = 1;

	Veh[cell][PaintJob] = -1;

	Veh[cell][VIP] = 5;

	Veh[cell][Group] = 0;

	Veh[cell][Job] = 0;

	Veh[cell][vX] = VipCarSpawn[0];

	Veh[cell][vY] = VipCarSpawn[1];

	Veh[cell][vZ] = VipCarSpawn[2];

	Veh[cell][vAngle] = 0;

	Veh[cell][vInt] = 0;

	Veh[cell][vVWorld] = 0;

	Veh[cell][Mod0] = 0;

	Veh[cell][Mod1] = 0;

	Veh[cell][Mod2] = 0;

	Veh[cell][Mod3] = 0;

	Veh[cell][Mod4] = 0;

	Veh[cell][Mod5] = 0;

	Veh[cell][Mod6] = 0;

	Veh[cell][Mod7] = 0;

	Veh[cell][Mod8] = 0;

	Veh[cell][Mod9] = 0;

	Veh[cell][Mod10] = 0;

	Veh[cell][Mod11] = 0;

	Veh[cell][Mod12] = 0;

	Veh[cell][Mod13] = 0;

	Veh[cell][Respawn] = -1;

	Veh[cell][lockState] = 1;

	if(Player[playerid][AdminDuty] > 0 || Player[playerid][UnderCover] > 0 || Player[playerid][Mask] == 1)
		format(Veh[cell][Owner], 24, "%s", Player[playerid][NormalName]);
	else
		format(Veh[cell][Owner], 24, "%s", GetName(playerid));

	// Veh[cell][Weapons][0] = -1;

	// Veh[cell][Weapons][1] = -1;

	// Veh[cell][Weapons][2] = -1;

	Veh[cell][vHealth] = 1000;

	Veh[cell][Fuel] = 100;

	Veh[cell][Registered] = 0;

	Veh[cell][RadioInstalled] = 0;

	Veh[cell][ImpoundCount] = 0;

	Veh[cell][TrunkContents] = 0;

	format(Veh[cell][VName], 50, "New Vehicle");

	new plate[32];
	RandomLicensePlate(plate);
	format(Veh[cell][Plate], 32, plate);

	//Veh[cell][Bomb] = -1;

	Veh[cell][Link] = 0;

	Player[playerid][Money] -= price;
//	Businesses[Player[playerid][InBusiness]][bVault] += price;
	AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, price);

	SpawnVehicleSQL(Player[playerid][Cars][slot]);
	SaveVehicle(Veh[cell][SQLID]);

	//SendClientMessage(playerid, -1, "You've purchased a vehicle!");

	if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
		ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Vehicle Help", "{FFFFFF}You have purchased a vehicle! You can use a vehicle to store weapons in your trunk or drive around to any location you desire.\nYour vehicle will be right outside the dealership and you can use /callcar if there is more than one vehicle.\nOnce you find it use /lock to unlock the car and get inside using the F key on your keyboad.\n\n{009900}Commands:{FFFFFF}\n/e\n/lock\n/vstore\n/vtake\n/car", "Okay", "");
	else SendClientMessage(playerid, -1, "You've purchased a vehicle!");

	SavePlayerData(playerid);
	format(string, sizeof(string), "%s has purchased a %d for %d.", GetName(playerid), carid, price);
	StatLog(string);

	return 1;
}

stock PurchaseBoat(playerid, carid, price)
{
	new cell = GetEmptyVCell(), string[128];
	if(cell == -1)
		return SendClientMessage(playerid, -1, "You cannot purchase this vehicle at this time. There are no free cells.");

	if(Player[playerid][VipRank] > 0 && GetPVarInt(playerid, "BuyingVIPCar") == 0)
		price = (price * 9) / 10;

	if(Player[playerid][Money] < price)
		return SendClientMessage(playerid, -1, "You can't afford this vehicle. Visit https://crearoleplay.com to learn how to purchase In-Game currency.");

	if(GetPlayerVehCount(playerid) >= GetPlayerMaxVehicles(playerid))
		return SendClientMessage(playerid, -1, "You can't own anymore vehicles!");

	new slot = GetFreeCarSlot(playerid);

	new query[256], Cache:cache;

 	if(Player[playerid][AdminDuty] < 1)
		mysql_format(MYSQL_MAIN, query, sizeof(query), "INSERT INTO vehicles (sqlid, owner, model ,x, y, z) VALUES ('%d', '%e', '%d' ,'%f', '%f', '%f')", 0, GetName(playerid), carid ,OwnedCarSpawnX, OwnedCarSpawnY, OwnedCarSpawnZ);
	else
		mysql_format(MYSQL_MAIN, query, sizeof(query), "INSERT INTO vehicles (sqlid, owner, model ,x, y, z) VALUES ('%d', '%e', '%d' ,'%f', '%f', '%f')", 0, Player[playerid][NormalName], carid ,OwnedCarSpawnX, OwnedCarSpawnY, OwnedCarSpawnZ);

	cache = mysql_query(MYSQL_MAIN, query);

	Veh[cell][SQLID] = cache_insert_id();
	Player[playerid][Cars][slot] = Veh[cell][SQLID];
	cache_delete(cache);

	Veh[cell][Model] = carid;

	Veh[cell][Color1] = 0;

	Veh[cell][Color2] = 1;

	Veh[cell][PaintJob] = -1;

	if(GetPVarInt(playerid, "BuyingVIPCar") == 1)
		Veh[cell][VIP] = 5;

	Veh[cell][Group] = 0;

	Veh[cell][Job] = 0;

	Veh[cell][vX] = OwnedBoatSpawnX;

	Veh[cell][vY] = OwnedBoatSpawnY;

	Veh[cell][vZ] = OwnedBoatSpawnZ;

	Veh[cell][vAngle] = 270;

	Veh[cell][vInt] = 0;

	Veh[cell][vVWorld] = 0;

	Veh[cell][Mod0] = 0;

	Veh[cell][Mod1] = 0;

	Veh[cell][Mod2] = 0;

	Veh[cell][Mod3] = 0;

	Veh[cell][Mod4] = 0;

	Veh[cell][Mod5] = 0;

	Veh[cell][Mod6] = 0;

	Veh[cell][Mod7] = 0;

	Veh[cell][Mod8] = 0;

	Veh[cell][Mod9] = 0;

	Veh[cell][Mod10] = 0;

	Veh[cell][Mod11] = 0;

	Veh[cell][Mod12] = 0;

	Veh[cell][Mod13] = 0;

	Veh[cell][Respawn] = -1;

	Veh[cell][lockState] = 1;

	if(Player[playerid][AdminDuty] > 0 || Player[playerid][UnderCover] > 0 || Player[playerid][Mask] == 1)
		format(Veh[cell][Owner], 24, "%s", Player[playerid][NormalName]);
	else
		format(Veh[cell][Owner], 24, "%s", GetName(playerid));

	// Veh[cell][Weapons][0] = -1;

	// Veh[cell][Weapons][1] = -1;

	// Veh[cell][Weapons][2] = -1;

	Veh[cell][vHealth] = 1000;

	Veh[cell][Fuel] = 100;

	Veh[cell][Registered] = 0;

	Veh[cell][RadioInstalled] = 0;

	Veh[cell][ImpoundCount] = 0;

	Veh[cell][TrunkContents] = 0;

	format(Veh[cell][VName], 50, "New Vehicle");

	new plate[32];
	RandomLicensePlate(plate);
	format(Veh[cell][Plate], 32, plate);

	Veh[cell][Link] = 0;

	if(Player[playerid][VipRank] > 0 && GetPVarInt(playerid, "BuyingVIPCar") == 1)
		SendClientMessage(playerid, YELLOW, "You have saved 10 percent of the price on this car!");

	Player[playerid][Money] -= price;
//	Businesses[Player[playerid][InBusiness]][bVault] += price;
	AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, price);

	SpawnVehicleSQL(Player[playerid][Cars][slot]);
	SaveVehicle(Veh[cell][SQLID]);

	//SendClientMessage(playerid, -1, "You've purchased a vehicle!");

	if(Player[playerid][PlayingHours] < 15 && GetPlayerToggle(playerid, TOGGLE_BIZ_TIPS) == false)
		ShowPlayerDialog(playerid, BUSINESS_HELP, DIALOG_STYLE_MSGBOX, "Vehicle Help", "{FFFFFF}You have purchased a vehicle! You can use a vehicle to store weapons in your trunk or drive around to any location you desire.\nYour vehicle will be right outside the dealership and you can use /callcar if there is more than one vehicle.\nOnce you find it use /lock to unlock the car and get inside using the F key on your keyboad.\n\n{009900}Commands:{FFFFFF}\n/e\n/lock\n/vstore\n/vtake\n/car", "Okay", "");
	else SendClientMessage(playerid, -1, "You've purchased a vehicle!");

	SavePlayerData(playerid);
	format(string, sizeof(string), "%s has purchased a %d for %d.", GetName(playerid), carid, price);
	StatLog(string);

	return 1;
}

stock SetVehicleMod(sql, slot, component)
{
	new idx = GetVIndex(sql);
	switch(slot)
	{
		case 0:
		{
			if(IsSQLVehicleSpawned(sql))
			{
				if(component != 0)
					AddVehicleComponent(Veh[idx][Link], component);
				else
				RemoveVehicleComponent(Veh[idx][Link], Veh[idx][Mod0]);
			}

			Veh[idx][Mod0] = component;
		}
		case 1:
		{
			if(IsSQLVehicleSpawned(sql))
			{
				if(component != 0)
					AddVehicleComponent(Veh[idx][Link], component);
				else
				RemoveVehicleComponent(Veh[idx][Link], Veh[idx][Mod1]);
			}

			Veh[idx][Mod1] = component;
		}
		case 2:
		{
			if(IsSQLVehicleSpawned(sql))
			{
				if(component != 0)
					AddVehicleComponent(Veh[idx][Link], component);
				else
				RemoveVehicleComponent(Veh[idx][Link], Veh[idx][Mod2]);
			}

			Veh[idx][Mod2] = component;
		}
		case 3:
		{
			if(IsSQLVehicleSpawned(sql))
			{
				if(component != 0)
					AddVehicleComponent(Veh[idx][Link], component);
				else
				RemoveVehicleComponent(Veh[idx][Link], Veh[idx][Mod3]);
			}

			Veh[idx][Mod3] = component;
		}
		case 4:
		{
			if(IsSQLVehicleSpawned(sql))
			{
				if(component != 0)
					AddVehicleComponent(Veh[idx][Link], component);
				else
				RemoveVehicleComponent(Veh[idx][Link], Veh[idx][Mod4]);
			}

			Veh[idx][Mod4] = component;
		}
		case 5:
		{
			if(IsSQLVehicleSpawned(sql))
			{
				if(component != 0)
					AddVehicleComponent(Veh[idx][Link], component);
				else
				RemoveVehicleComponent(Veh[idx][Link], Veh[idx][Mod5]);
			}

			Veh[idx][Mod5] = component;
		}
		case 6:
		{
			if(IsSQLVehicleSpawned(sql))
			{
				if(component != 0)
					AddVehicleComponent(Veh[idx][Link], component);
				else
				RemoveVehicleComponent(Veh[idx][Link], Veh[idx][Mod6]);
			}

			Veh[idx][Mod6] = component;
		}
		case 7:
		{
			if(IsSQLVehicleSpawned(sql))
			{
				if(component != 0)
					AddVehicleComponent(Veh[idx][Link], component);
				else
				RemoveVehicleComponent(Veh[idx][Link], Veh[idx][Mod7]);
			}

			Veh[idx][Mod7] = component;
		}
		case 8:
		{
			if(IsSQLVehicleSpawned(sql))
			{
				if(component != 0)
					AddVehicleComponent(Veh[idx][Link], component);
				else
				RemoveVehicleComponent(Veh[idx][Link], Veh[idx][Mod8]);
			}

			Veh[idx][Mod8] = component;
		}
		case 9:
		{
			if(IsSQLVehicleSpawned(sql))
			{
				if(component != 0)
					AddVehicleComponent(Veh[idx][Link], component);
				else
				RemoveVehicleComponent(Veh[idx][Link], Veh[idx][Mod9]);
			}

			Veh[idx][Mod9] = component;
		}
		case 10:
		{
			if(IsSQLVehicleSpawned(sql))
			{
				if(component != 0)
					AddVehicleComponent(Veh[idx][Link], component);
				else
				RemoveVehicleComponent(Veh[idx][Link], Veh[idx][Mod10]);
			}

			Veh[idx][Mod10] = component;
		}
		case 11:
		{
			if(IsSQLVehicleSpawned(sql))
			{
				if(component != 0)
					AddVehicleComponent(Veh[idx][Link], component);
				else
				RemoveVehicleComponent(Veh[idx][Link], Veh[idx][Mod11]);
			}

			Veh[idx][Mod11] = component;
		}
		case 12:
		{
			if(IsSQLVehicleSpawned(sql))
			{
				if(component != 0)
					AddVehicleComponent(Veh[idx][Link], component);
				else
				RemoveVehicleComponent(Veh[idx][Link], Veh[idx][Mod12]);
			}

			Veh[idx][Mod12] = component;
		}
		case 13:
		{
			if(IsSQLVehicleSpawned(sql))
			{
				if(component != 0)
					AddVehicleComponent(Veh[idx][Link], component);
				else
				RemoveVehicleComponent(Veh[idx][Link], Veh[idx][Mod13]);
			}

			Veh[idx][Mod13] = component;
		}
	}
	return 1;
}

stock GetPlayerMaxVehicles(playerid)
{
	if(Player[playerid][VipRank] == 1)
		return 3;
	else if(Player[playerid][VipRank] == 2)
		return 4;
	else if(Player[playerid][VipRank] > 2)
		return 5;
	else
	return 2;

}

stock GetPlayerMaxVehiclesByName(name[])
{
	new rank = GetRemoteIntValue(name, "VipRank");

	if(rank == 1)
		return 3;
	else if(rank == 2)
		return 4;
	else if(rank > 2)
		return 5;
	else
	return 2;
}

stock DB_Escape(text[])
{
	new
	ret[MAX_INI_ENTRY_TEXT * 2],
	ch,
	i,
	j;
	while ((ch = text[i++]) && j < sizeof (ret))
	{
		if (ch == '\'') //'
		{
			if (j < sizeof (ret) - 2)
			{
				ret[j++] = '\'';
				ret[j++] = '\''; //'
			}
		}
		else if (j < sizeof (ret))
		{
			ret[j++] = ch;
		}
		else
		{
			j++;
		}
	}
	ret[sizeof (ret) - 1] = '\0';
	return ret;
}

CMD:unmodcar(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "You're not in a vehicle!");

	new sql = GetVSQLID(GetPlayerVehicleID(playerid));

	if(sql == 0)
		return SendClientMessage(playerid, -1, "This is not a saved vehicle");

	new idx = GetVIndex(sql);

	new slot = -1;

	for(new i; i < 5; i++)
	{
		if(Player[playerid][Cars][i] == sql)
		{
			slot = i;
		}
	}

	if(Groups[Player[playerid][Group]][CommandTypes] == 1 && Player[playerid][GroupRank] < 9 && Groups[Veh[idx][Group]][CommandTypes] == 1)
		return SendClientMessage(playerid, WHITE, "You don't have sufficient rank to do this!");

	if(slot == -1 && (Player[playerid][Group] != Veh[idx][Group] || Veh[idx][Group] == 0))
		return SendClientMessage(playerid, -1, "You do not have ownership of this vehicle.");

	Veh[idx][Color1] = -1;
	Veh[idx][Color2] = -1;
	Veh[idx][PaintJob] = -1;
	Veh[idx][Mod0] = 0;
	Veh[idx][Mod1] = 0;
	Veh[idx][Mod2] = 0;
	Veh[idx][Mod3] = 0;
	Veh[idx][Mod4] = 0;
	Veh[idx][Mod5] = 0;
	Veh[idx][Mod6] = 0;
	Veh[idx][Mod7] = 0;
	Veh[idx][Mod8] = 0;
	Veh[idx][Mod9] = 0;
	Veh[idx][Mod10] = 0;
	Veh[idx][Mod11] = 0;
	Veh[idx][Mod12] = 0;
	Veh[idx][Mod13] = 0;

	DespawnVehicleSQL(sql);
	SpawnVehicleSQL(sql);

	return 1;
}

CMD:removepaintjob(playerid)
{
	if(!PlayerHasJob(playerid, JOB_MECHANIC))
		return SendClientMessage(playerid, WHITE, "Only mechanics can do this, sorry.");

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, WHITE, "You must be in a car to do this.");

	new sql = GetVSQLID(GetPlayerVehicleID(playerid)), idx = GetVIndex(sql);
	if(sql == 0)
		return SendClientMessage(playerid, WHITE, "This is an invalid car.");

	if(GetPlayerVehicleSeat(playerid) != 0)
		return SendClientMessage(playerid, WHITE, "You must be in the drivers seat.");

	if(Veh[idx][PaintJob] == -1)
		return SendClientMessage(playerid, WHITE, "This vehicle does not have a paintjob.");

	ChangeVehiclePaintjob(GetPlayerVehicleID(playerid), 3);
	Veh[idx][PaintJob] = -1;
	SendClientMessage(playerid, WHITE, "You removed the paintjob on the vehicle.");
	return 1;
}

CMD:colourcar(playerid, params[])
{
	if(GetPVarInt(playerid, "CCV") > 0)
	{
		PlayerTextDrawHide(playerid, CarPreviewText[playerid]);
		for(new i; i < 4; i++)
			TextDrawHideForPlayer(playerid, CarPreview[i]);
		CancelSelectTextDraw(playerid);
		DeletePVar(playerid, "CCV");
		return 1;
	}

	new col1, col2;
	if(sscanf(params, "dd", col1, col2))
		return SendClientMessage(playerid, GREY, "SYNTAX: /colourcar [col1] [col2]");

	if(col1 < 0 || col1 > 256 || col2 < 0 || col2 > 256)
		return SendClientMessage(playerid, GREY, "Please choose colours between 0 and 256");

	if(!GetPlayerVehicleID(playerid))
		return SendClientMessage(playerid, GREY, "You must be in a vehicle to use this command.");

	if(Player[playerid][Job] != 2 && Player[playerid][Job2] != 2)
		return SendClientMessage(playerid, GREY, "You must be mechanic to use this command.");

	if(GetPlayerVehicleSeat(playerid) != 0)
		return SendClientMessage(playerid, -1, "You must be the driver of a vehicle to use this command");

	new sql = GetVSQLID(GetPlayerVehicleID(playerid)), idx = GetVIndex(sql);

	if(!strcmp(Veh[idx][Owner], "unowned") && (Veh[idx][Group] == 0 || Veh[idx][Group] != Player[playerid][Group]) && (Veh[idx][GangLink] == 0 || Veh[idx][GangLink] != Player[playerid][Gang]))
		return SendClientMessage(playerid, GREY, "You must be in a player or faction owned vehicle to colour it.");

	if(Player[playerid][HasSprayCans] < 1)
		return SendClientMessage(playerid, GREY, "You need to buy spray cans from a 24/7 to use this command.");


	CarPreviewText[playerid] = CreatePlayerTextDraw(playerid, 235.500000, 134.099990, "_");
	PlayerTextDrawLetterSize(playerid, CarPreviewText[playerid], 0.000000, 27.185556);
	PlayerTextDrawTextSize(playerid, CarPreviewText[playerid], 150.000000, 220.000000);
	PlayerTextDrawFont(playerid, CarPreviewText[playerid], TEXT_DRAW_FONT_MODEL_PREVIEW);
	PlayerTextDrawSetPreviewModel(playerid, CarPreviewText[playerid], GetVehicleModel(GetPlayerVehicleID(playerid)));
	PlayerTextDrawSetPreviewRot(playerid, CarPreviewText[playerid], -10.0, 0.0, -20.0, 1.0);
	PlayerTextDrawSetPreviewVehCol(playerid, CarPreviewText[playerid], col1, col2);

	SetPVarInt(playerid, "CCVID", GetPlayerVehicleID(playerid));
	SetPVarInt(playerid, "CCVC1", col1);
	SetPVarInt(playerid, "CCVC2", col2);
	SetPVarInt(playerid, "CCV", 1);

	PlayerTextDrawShow(playerid, CarPreviewText[playerid]);
	for(new i; i < 4; i++)
		TextDrawShowForPlayer(playerid, CarPreview[i]);
	SelectTextDraw(playerid, WHITE);
	return 1;
}

CMD:abandoncar(playerid, params[])
{
	new string[255], end[255];

	for(new i; i < 5; i++)
	{
		if(Player[playerid][Cars][i] > 0)
		{
			new idx = GetVIndex(Player[playerid][Cars][i]);
			if(Veh[idx][Link] == 0 || Veh[idx][Link] == INVALID_VEHICLE_ID)
				format(string, sizeof(string), "{F55858}[ %s ] %s\n", vNames[Veh[idx][Model] - 400] ,Veh[idx][VName]);
			else
			format(string, sizeof(string), "{87E359}[ %s ] %s\n", vNames[Veh[idx][Model] - 400] ,Veh[idx][VName]);
		}
		else
		format(string, sizeof(string), "Empty\n");
		strcat(end, string);
	}
	ShowPlayerDialog(playerid, VEHICLE_ABANDON, DIALOG_STYLE_LIST, "Vehicle Abandon", end, "Abandon", "Close");
	return 1;
}

stock IsPlayerNearVehicle(playerid, vehicleid, Float:range)
{
	new Float:vPos[3];

	new sql = Veh[vehicleid][SQLID];

	if(sql == 0)
		return 0;

	new idx = GetVIndex(sql);

	GetVehiclePos(Veh[idx][Link], vPos[0], vPos[1], vPos[2]);

	if(IsPlayerInRangeOfPoint(playerid, range, vPos[0], vPos[1], vPos[2]))
		return 1;
	else
	return 0;
}

stock IsVehicleAttachedToVehicle(id)
{
	for(new i; i < MAX_VEHICLES; i++)
	{
		if(GetVehicleTrailer(i) == id && IsValidVehicle(i))
			return 1;
	}
	return 0;
}

CMD:respawnclosestcars(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 4)
		return 1;

	new Float:range;
	sscanf(params, "F(15)", range);

	for(new i; i<MAX_VEHICLES; i++)
	{
		if(IsPlayerNearVehicle(playerid, i, range) && IsSQLVehicleSpawned(Veh[i][SQLID]) && IsVehicleEmpty(Veh[i][Link]) == 0 && IsVehicleAttachedToVehicle(i) == 0)
		{
			DespawnVehicleSQL(Veh[i][SQLID]);
			SpawnVehicleSQL(Veh[i][SQLID]);
		}
	}
	SendClientMessage(playerid, -1, "All vehicles near you have been respawned.");
	return 1;
}

CMD:respawnjobcars(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 4)
		return 1;

	if(isnull(params) || !IsNumeric(params))
		return SendClientMessage(playerid, GREY, "SYNTAX: /respawnjobcars [job id]");

	new job = strval(params);

	for(new i; i<MAX_VEHICLES; i++)
	{
		if(Veh[i][Job] == job && IsSQLVehicleSpawned(Veh[i][SQLID]) && IsVehicleEmpty(Veh[i][Link]) == 0 && IsVehicleAttachedToVehicle(i) == 0)
		{
			DespawnVehicleSQL(Veh[i][SQLID]);
			SpawnVehicleSQL(Veh[i][SQLID]);
		}
	}
	SendClientMessage(playerid, -1, "All unoccupied Job vehicles respawned.");
	return 1;
}

CMD:respawnfactioncars(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 4)
		return 1;

	if(isnull(params))
		return SendClientMessage(playerid, GREY, "SYNTAX: /respawnfactioncars [factionid]");

	new group = strval(params);

	for(new i; i < MAX_VEHICLES; i++)
	{

		if(Veh[i][Group] == group && IsSQLVehicleSpawned(Veh[i][SQLID]) && IsVehicleEmpty(Veh[i][Link]) == 0 && IsVehicleAttachedToVehicle(i) == 0)
		{
			DespawnVehicleSQL(Veh[i][SQLID]);
			SpawnVehicleSQL(Veh[i][SQLID]);
		}
	}
	SendClientMessage(playerid, -1, "All unoccupied faction vehicles respawned");
	return 1;
}

CMD:respawnallcars(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 4)
		return 1;

	for(new i; i < MAX_VEHICLES; i++)
	{
		if(IsSQLVehicleSpawned(Veh[i][SQLID]))
		{
			DespawnVehicleSQL(Veh[i][SQLID]);
			SpawnVehicleSQL(Veh[i][SQLID]);
		}
	}
	SendClientMessage(playerid, -1, "Vehicles respawned");
	return 1;
}

CMD:respawnplayerscars(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 4)
		return 1;

	new id;
	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /respawnplayerscars [playerid]");

	new idx;
	for(new i; i < 5; i++)
	{
		if(Player[id][Cars][i] > 0)
		{
			idx = GetVIndex(Player[id][Cars][i]);
			if(IsSQLVehicleSpawned(Veh[idx][SQLID]))
			{
				DespawnVehicleSQL(Veh[idx][SQLID]);
				SpawnVehicleSQL(Veh[idx][SQLID]);
			}
		}
	}
	new res[128];
	format(res, sizeof(res), "You have respawned all of %s's vehicles.", GetName(id));
	SendClientMessage(playerid, -1, res);
	return 1;
}

CMD:lsmd(playerid, params[])
{
	if(Player[playerid][MDuty] == 0)
		return SendClientMessage(playerid, -1, "You must be on LSMD duty to use this command. /mduty");

	if(Groups[Player[playerid][Group]][CommandTypes] == 3)
	{
		if(Groups[Player[playerid][InGroupHQ]][CommandTypes] == 3 || Businesses[Player[playerid][InBusiness]][bType] == 17)
		{
			ShowPlayerDialog(playerid, 9864, DIALOG_STYLE_LIST, "LSMD Menu", "Clothing", "Select", "Cancel");
		}
		else
		{
			SendClientMessage(playerid, WHITE, "You have to be inside your HQ or a medical center.");
		}
	}
	return 1;
}

command(finebank, playerid, params[])
{
	new id, amount, Reason[128], string[128];
	if(sscanf(params, "uds[128]", id, amount, Reason))
	{
		if(Player[playerid][AdminLevel] >= 2)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /finebank [playerid] [amount] [reason]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 2)
		{
			if(strlen(Reason) < 1)
			{
				SendClientMessage(playerid, GREY, "SYNTAX: /finebank [playerid] [amount] [reason]");
			}
			else
			{
				if(Player[id][AdminLevel] < Player[playerid][AdminLevel])
				{
					if(amount < 99999999)
					{
						format(string, sizeof(string), "Fine: %s has been fined $%s by %s, defined reason: %s", GetName(id), IntToFormattedStr(amount), Player[playerid][AdminName], Reason);
						SendToAdmins(LIGHTRED, string, 0);
						Player[id][BankMoney] -= amount;
						format(string, sizeof(string), "%s has fined %s $%s for %s.", Player[playerid][AdminName], GetName(id), IntToFormattedStr(amount), Reason);
						AdminActionsLog(string);
					}
				}
			}
		}
	}
	return 1;
}

CMD:cradio(playerid, params[])
{
	new option[24];
	if(sscanf(params, "s[24]", option))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /cradio [option]");
		SendClientMessage(playerid, GREY, "Options: toggle, station, favestation, tune");
		return 1;
	}

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "You must be in a vehicle to use this command");

	if(GetPlayerVehicleSeat(playerid) != 0 && GetPlayerVehicleSeat(playerid) != 1)
		return SendClientMessage(playerid, -1, "You must be in a front seat of a vehicle to use this command");

	new vehicleid = GetPlayerVehicleID(playerid), sql = GetVSQLID(GetPlayerVehicleID(playerid)), idx = GetVIndex(sql), string[255], end[255];
	
	if((GetVehicleModel(vehicleid) == 481) && (GetVehicleModel(vehicleid) == 509) && (GetVehicleModel(vehicleid) == 510)) //Bikes Models.
		 return SendClientMessage(playerid, -1, "This vehicle type doesn't support radios.");


	if(sql == 0)
		return 1;

	if(Veh[idx][RadioInstalled] == 0)
		return SendClientMessage(playerid, -1, "This vehicle does not have a radio.");

	if(!strcmp(option, "toggle", true))
	{
		Veh[idx][radioState] = (Veh[idx][radioState]) ? (0) : (1);
		format(string, sizeof(string), (Veh[idx][radioState]) ? ("* %s has switched the radio on.") : ("* %s has switched the radio off."), GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);
		if(Veh[idx][radioState] > 0)
		{
			if(Player[playerid][FavoriteStationSet] > 0)
			{
				new found = -1;
				for(new i; i < MAX_RADIO_STATIONS; i++)
				{
					if(!strcmp(Player[playerid][FavoriteStation], RadioSettings[i][URL], true))
					{
						found = i;
						break;
					}
				}

				if(found == -1)
					return SendClientMessage(playerid, -1, "Unabled to find your favourite radio station. Choose a new one!");

				format(Veh[idx][radioUrl], 255, Player[playerid][FavoriteStation]);
				foreach(Player, i)
				{
					if(IsPlayerInVehicle(i, GetPlayerVehicleID(playerid)))
					{
						PlayAudioStreamForPlayer(i, Veh[idx][radioUrl]);
						if(GetPVarInt(i, "PlayingBoombox"))
							DeletePVar(i, "PlayingBoombox");
					}
				}
				format(string, sizeof(string), "* %s changes their radio station to '%s'", GetNameEx(playerid), RadioSettings[found][StationName]);
				NearByMessage(playerid, NICESKY, string);
			}
		}
		else
		{
			foreach(Player, i)
			{
				if(IsPlayerInVehicle(i, GetPlayerVehicleID(playerid)))
					StopAudioStreamForPlayer(i);
			}
		}
	}
	else if(!strcmp(option, "station", true))
	{
		if(Veh[idx][radioState] == 0)
			return SendClientMessage(playerid, -1, "The radio must be on to change the station");

		for(new i; i < MAX_RADIO_STATIONS; i++)
		{
			if(RadioSettings[i][Available] > 0)
			{
				format(string, sizeof(string), "%s\n", RadioSettings[i][StationName]);
				strcat(end, string);
			}
		}
		ShowPlayerDialog(playerid, RADIO_STATIONS, DIALOG_STYLE_LIST, "Radio Stations", end, "Select", "Close");
	}
	else if(!strcmp(option, "favestation", true))
	{
		for(new i; i < MAX_RADIO_STATIONS; i++)
		{
			if(RadioSettings[i][Available] > 0)
			{
				format(string, sizeof(string), "%s\n", RadioSettings[i][StationName]);
				strcat(end, string);
			}
		}
		strcat(end, "Remove\n");
		ShowPlayerDialog(playerid, FAVE_RADIO_STATION, DIALOG_STYLE_LIST, "Radio Stations", end, "Select", "Close");
	}
	else if(!strcmp(option, "tune", true))
	{
		if(Veh[idx][radioState] == 0)
			return SendClientMessage(playerid, -1, "The radio must be on to change the station");

		if(Player[playerid][VipRank] < 1)
			return SendClientMessage(playerid, -1, "Tuning your radio is a VIP perk!");

		ShowPlayerDialog(playerid, TUNE_RADIO_STATION, DIALOG_STYLE_INPUT, "Radio Stations", "Enter the URL for the radio stream.", "Select", "Close");
	}
	else
		return SendClientMessage(playerid, -1, "Invalid option");

	return 1;
}

command(remotetempban, playerid, params[])
{
	new playername[128], days, reason[128];

	if(Player[playerid][AdminLevel] < 3)
		return 1;

	if(sscanf(params, "s[128]ds[128]", playername, days, reason))
		return SendClientMessage(playerid, GREY, "SYNTAX: /remotetempban [playername] [days] [reason]");

	if(IsPlayerConnectedEx(GetPlayerID(playername)))
		return cmd_tempban(playerid, params);

	if(!IsPlayerRegistered(playername))
		return SendClientMessage(playerid, WHITE, "That player doesn't exist.");

	if(Player[playerid][AdminLevel] < GetRemoteAdminLevel(playername))
		return SendClientMessage(playerid, WHITE, "You can't do that to a higher level administrator.");

	if(GetRemoteIntValue(playername, "TempbanLevel") >= 2)
		return SendClientMessage(playerid, WHITE, "That player has already been tempbanned twice. The recommended course of action is a /ban.");

	else
	{
		new IP[21], tempban = GetRemoteIntValue(playername, "TempbanLevel");
		format(IP, sizeof(IP), GetRemoteStringValue(playername, "LastIP"));
		tempban ++;

		new query[384];
		mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE playeraccounts SET TempbanLevel = '%d', TempbanTime = '%d', Banned = '3', BannedBy = '%e', BannedReason = '%e' WHERE NormalName = '%e'", tempban, ((days * 86400) + gettime()), Player[playerid][AdminName], reason, playername);
		mysql_tquery(MYSQL_MAIN, query, "OnQueryFinish", "dddss", THREAD_REMOTE_TEMPBAN, playerid, days, playername, reason);
	}

	return 1;
}

command(tempban, playerid, params[])
{
	new id, days, reason[128], string[255];

	if(Player[playerid][AdminLevel] < 3)
		return 1;

	if(sscanf(params, "uds[128]", id, days, reason))
		return SendClientMessage(playerid, GREY, "SYNTAX: /tempban [playerid] [days] [reason]");

	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, WHITE, "That player isn't connected!");

	if(Player[playerid][AdminLevel] < Player[id][AdminLevel])
		return SendClientMessage(playerid, WHITE, "You can't do that to a higher level administrator.");

	if(Player[id][TempbanLevel] >= 2)
		return SendClientMessage(playerid, WHITE, "That player has already been tempbanned twice. The recommended course of action is a /ban.");

	else
	{
		new IP[21];
		format(IP, sizeof(IP), Player[id][LastIP]);

		new tmpint = days * 86400;
		Player[id][Banned] = 3;
		Player[id][TempbanLevel]++;
		Player[id][TempbanTime] = gettime() + tmpint;
		format(Player[id][BannedBy], 128, "%s", Player[playerid][AdminName]);
		format(Player[id][BannedReason], 128, "%s", reason);

		format(string, sizeof(string), "%s | %s | Tempbanned for %d days for \"%s\" | %s",  Player[id][NormalName], IP, days, reason, Player[playerid][AdminName]);
		BanLog(string);
		format(string, sizeof(string), "Tempban: %s has tempbanned %s for %d days. Defined reason: \"%s\".", Player[playerid][AdminName],  Player[id][NormalName], days, reason);
		AdminActionsLog(string);
		format(string, sizeof(string), "Tempban: %s has tempbanned %s for %d days. Defined reason: \"%s\".", Player[playerid][AdminName],  Player[id][NormalName], days, reason);
		SendToAdmins(ADMINORANGE, string, 0);
		LogLastBan( Player[id][NormalName], IP);
		Player[playerid][AdminActions]++;
		TempBanMessage(id);
		KickEx(id);
	}

	return 1;
}

CMD:resetwarn(playerid, params[])
{
	new id, warn, string[128];

	if(Player[playerid][AdminLevel] < 3)
		return 1;

	if(sscanf(params, "ud", id, warn))
		return SendClientMessage(playerid, GREY, "SYNTAX: /resetwarn [playerid] [warn slot]");

	if(!IsPlayerConnected(id))
		return SendClientMessage(playerid, WHITE, "That player isn't connected!");

	if(warn < 1 || warn > 2)
		return SendClientMessage(playerid, -1, "Invalid warn slot. (1-2)");

	switch(warn)
	{
		case 1:
		{
			if(strcmp(Player[id][Warning1], "None", true))
			{
				if(strcmp(Player[id][Warning2], "None", true))
				{
					format(Player[id][Warning1], 255, "%s", Player[id][Warning2]);
					format(Player[id][Warning2], 255, "None");
				}
				else format(Player[id][Warning1], 255, "None");

				format(string, sizeof(string), "You have reset %s's first warning.",  Player[id][NormalName]);
				SendClientMessage(playerid, -1, string);
				format(string, sizeof(string), "Warning: %s has reset %s's first warning.", Player[playerid][AdminName],  Player[id][NormalName]);
				AdminActionsLog(string);
			}
			else return SendClientMessage(playerid, -1, "That player doesnt have a warning in slot 1.");
		}
		case 2:
		{
			if(strcmp(Player[id][Warning2], "None", true))
			{
				format(Player[id][Warning2], 255, "None");

				format(string, sizeof(string), "You have reset %s's second warning.", Player[id][NormalName]);
				SendClientMessage(playerid, -1, string);
				format(string, sizeof(string), "Warning: %s has reset %s's second warning.", Player[playerid][AdminName], Player[id][NormalName]);
				AdminActionsLog(string);
			}
			else return SendClientMessage(playerid, -1, "That player deosnt have a warning in slot 2.");
		}
	}
	return 1;
}

command(resetwarns, playerid, params[])
{
	new id, string[255];

	if(Player[playerid][AdminLevel] < 3)
		return 1;

	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /resetwarns [playerid]");

	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, WHITE, "That player isn't connected!");

	if(IsPlayerConnectedEx(id))
	{
		format(Player[id][Warning1], 255, "None");
		format(Player[id][Warning2], 255, "None");
		format(Player[id][Warning3], 255, "None");
		format(string, sizeof(string), "You have reset %s's warnings.", Player[id][NormalName]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Warning: %s has reset %s's warnings.", Player[playerid][AdminName], Player[id][NormalName]);
		AdminActionsLog(string);
	}

	return 1;
}

command(resetnmutes, playerid, params[])
{
	new id, string[255];

	if(Player[playerid][AdminLevel] < 3)
		return 1;

	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /resetnmutes [playerid]");

	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, WHITE, "That player isn't connected!");

	else
	{
		Player[id][nMutedLevel] = 0;
		Player[id][nMutedTime] = 0;
		Player[id][nMuted] = 0;
		format(string, sizeof(string), "You have reset %s's nmute level.", Player[id][NormalName]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "nMute: %s has reset %s's nmutes.", Player[playerid][AdminName], Player[id][NormalName]);
		AdminActionsLog(string);
	}

	return 1;
}

command(resetvmutes, playerid, params[])
{
	new id, string[255];

	if(Player[playerid][AdminLevel] < 3)
		return 1;

	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /resetvmutes [playerid]");

	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, WHITE, "That player isn't connected!");

	else
	{
		Player[id][vMutedLevel] = 0;
		Player[id][vMutedTime] = 0;
		Player[id][vMuted] = 0;
		format(string, sizeof(string), "You have reset %s's vmute level.", Player[id][NormalName]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "nMute: %s has reset %s's vmutes.", Player[playerid][AdminName], Player[id][NormalName]);
		AdminActionsLog(string);
	}

	return 1;
}

CMD:noscar(playerid, params[]){

	if(Player[playerid][Job] != 2 && Player[playerid][Job2] != 2)
		return SendClientMessage(playerid, -1, "You must be a mechanic to use this command!");

	if(!GetPlayerVehicleID(playerid))
		return SendClientMessage(playerid, -1, "You must be in a vehicle to use this command!");

	if(IsPlayerInInvalidNosVehicle(playerid))
		return SendClientMessage(playerid, -1, "You cannot modify this vehicle.");

	if(Player[playerid][NosBottle] < 1)
	    return SendClientMessage(playerid, WHITE, "You need a NOS bottle to do this!");

	if(Player[playerid][Toolkit] < 1)
		return SendClientMessage(playerid, -1, "You need a toolkit to install a NOS bottle.");

	if(Player[playerid][CarModDelay] >= 1)
		return SendClientMessage(playerid, WHITE, "You must wait 60 seconds before doing that again!");

	new sql = GetVSQLID(GetPlayerVehicleID(playerid)), idx = GetVIndex(sql);

	if(!strcmp(Veh[idx][Owner], "unowned") && (Veh[idx][Group] && Veh[idx][Group] != Player[playerid][Group]))
		return SendClientMessage(playerid, GREY, "You must be in a player or faction owned vehicle to mod it.");

	switch(random(100))
	{
		case 0 .. 98:
		{
			AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
			PlayerPlayNearbySound(playerid,1133);
			Veh[idx][Mod5] = 1010;
			SaveVehicle(sql);

			Player[playerid][NosBottle]--;
		}
		default:
		{
			SendClientMessage(playerid, -1, "Your toolkit broke.");
			Player[playerid][Toolkit]--;
			Player[playerid][TotalToolkitsBroken] ++;
		}
	}

	return SendClientMessage(playerid, -1, "NOS has been added to the vehicle!");
}

CMD:uninstallnos(playerid, params[]){

	if(Player[playerid][Job] != 2 && Player[playerid][Job2] != 2)
		return SendClientMessage(playerid, -1, "You must be a mechanic to use this command!");

	if(!GetPlayerVehicleID(playerid))
		return SendClientMessage(playerid, -1, "You must be in a vehicle to use this command!");

	if(Player[playerid][NosBottle] > 0)
	    return SendClientMessage(playerid, WHITE, "You already have a NOS bottle on you, you can't hold any more!");

	if(Player[playerid][Toolkit] < 1)
		return SendClientMessage(playerid, -1, "You need a toolkit to install a NOS bottle.");

	if(Player[playerid][CarModDelay] >= 1)
		return SendClientMessage(playerid, WHITE, "You must wait 60 seconds before doing that again!");

	new sql = GetVSQLID(GetPlayerVehicleID(playerid)), idx = GetVIndex(sql);

	if(!strcmp(Veh[idx][Owner], "unowned") && (Veh[idx][Group] && Veh[idx][Group] != Player[playerid][Group]))
		return SendClientMessage(playerid, GREY, "You must be in a player or faction owned vehicle to mod it.");

	if(GetVehicleComponentInSlot(Veh[idx][Link], CARMODTYPE_NITRO) == 0)
		return SendClientMessage(playerid, -1, "This vehicle does not have NOS installed.");

	switch(random(100))
	{
		case 0 .. 98:
		{
			RemoveVehicleComponent(GetPlayerVehicleID(playerid), GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), CARMODTYPE_NITRO));
			PlayerPlayNearbySound(playerid,1133);
			Veh[idx][Mod5] = 0;
			SaveVehicle(sql);

			Player[playerid][NosBottle]++;
		}
		default:
		{
			SendClientMessage(playerid, -1, "Your toolkit broke.");
			Player[playerid][Toolkit]--;
			Player[playerid][TotalToolkitsBroken] ++;
		}
	}

	return SendClientMessage(playerid, -1, "NOS has been removed from the vehicle!");
}

CMD:hydcar(playerid, params[]){

	if(Player[playerid][Job] != 2 && Player[playerid][Job2] != 2)
		return SendClientMessage(playerid, -1, "You must be a mechanic to use this command!");

	if(!GetPlayerVehicleID(playerid))
		return SendClientMessage(playerid, -1, "You must be in a vehicle to use this command!");

	if(IsPlayerInInvalidNosVehicle(playerid))
		return SendClientMessage(playerid, -1, "You cannot modify this vehicle.");

	if(Player[playerid][HydroKit] < 1)
	    return SendClientMessage(playerid, WHITE, "You need a hydraulics kit to use this!");

	if(Player[playerid][Toolkit] < 1)
		return SendClientMessage(playerid, -1, "You need a toolkit to install hydraulics.");

	if(Player[playerid][CarModDelay] >= 1)
		return SendClientMessage(playerid, WHITE, "You must wait 60 seconds before doing that again!");

	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 495)
		return SendClientMessage(playerid, -1, "You cannot install hydrolics on a Sandking.");
		
	new sql = GetVSQLID(GetPlayerVehicleID(playerid)), idx = GetVIndex(sql);

	if(!strcmp(Veh[idx][Owner], "unowned") && (Veh[idx][Group] && Veh[idx][Group] != Player[playerid][Group]))
		return SendClientMessage(playerid, GREY, "You must be in a player or faction owned vehicle to mod it.");

	switch(random(100))
	{
		case 0 .. 98:
		{
			AddVehicleComponent(GetPlayerVehicleID(playerid), 1087);
			PlayerPlayNearbySound(playerid,1133);
			Veh[idx][Mod9] = 1087;
			SaveVehicle(sql);

			Player[playerid][HydroKit]--;
		}
		default:
		{
			SendClientMessage(playerid, -1, "Your toolkit broke.");
			Player[playerid][Toolkit]--;
			Player[playerid][TotalToolkitsBroken] ++;
		}
	}

	return SendClientMessage(playerid, -1, "Hydraulics have been added to the vehicle!");
}

CMD:uninstallhyd(playerid, params[]){

	if(Player[playerid][Job] != 2 && Player[playerid][Job2] != 2)
		return SendClientMessage(playerid, -1, "You must be a mechanic to use this command!");

	if(!GetPlayerVehicleID(playerid))
		return SendClientMessage(playerid, -1, "You must be in a vehicle to use this command!");

	if(Player[playerid][HydroKit] > 1)
	    return SendClientMessage(playerid, WHITE, "You already have a Hydraulics kit on you, you can't hold another one!");

	if(Player[playerid][Toolkit] < 1)
		return SendClientMessage(playerid, -1, "You need a toolkit to uninstall hydraulics.");

	if(Player[playerid][CarModDelay] >= 1)
		return SendClientMessage(playerid, WHITE, "You must wait 60 seconds before doing that again!");

	new sql = GetVSQLID(GetPlayerVehicleID(playerid)), idx = GetVIndex(sql);

	if(!strcmp(Veh[idx][Owner], "unowned") && (Veh[idx][Group] && Veh[idx][Group] != Player[playerid][Group]))
		return SendClientMessage(playerid, GREY, "You must be in a player or faction owned vehicle to mod it.");

	if(Veh[idx][Mod9] != 1087)
		return SendClientMessage(playerid, -1, "This vehicle does not have hydraluics installed.");

	switch(random(100))
	{
		case 0 .. 98:
		{
			RemoveVehicleComponent(GetPlayerVehicleID(playerid), 1087);
			PlayerPlayNearbySound(playerid,1133);
			Veh[idx][Mod9] = 0;
			SaveVehicle(sql);

			Player[playerid][HydroKit]++;
		}
		default:
		{
			SendClientMessage(playerid, -1, "Your toolkit broke.");
			Player[playerid][Toolkit]--;
			Player[playerid][TotalToolkitsBroken] ++;
		}
	}

	return SendClientMessage(playerid, -1, "Hydraulics have been removed from the vehicle!");
}

CMD:snd(playerid, params[]){
	new id;

	if(sscanf(params, "d", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /snd [sound]");

	if(Player[playerid][AdminLevel] < 4)
		return 1;

	return PlayerPlaySound(playerid,id,0.0,0.0,0.0);
}

CMD:nsnd(playerid, params[]){
	new id;

	if(sscanf(params, "d", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /nsnd [sound]");

	if(Player[playerid][AdminLevel] < 4)
		return 1;

	return PlayerPlayNearbySound(playerid,id);
}

CMD:xsnd(playerid, params[]){
	new id, range;

	if(Player[playerid][AdminLevel] < 4)
		return 1;

	if(sscanf(params, "dd", id, range))
		return SendClientMessage(playerid, GREY, "SYNTAX: /xsnd [sound] [range]");

	return PlayerPlayNearbySoundEx(playerid,id,range);
}

CMD:asnd(playerid, params[]){
	new id;

	if(sscanf(params, "d", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /asnd [sound]");

	if(Player[playerid][AdminLevel] < 4)
		return 1;

	return PlaySoundForAll(id);
}

stock PlayerPlayNearbySound(playerid, sound, bool:useDist = true){

	new Float:Pos[2][3];

	GetPlayerPos(playerid, Pos[0][0], Pos[0][1], Pos[0][2]);

	foreach(Player, i)
	{
		if(IsPlayerInRangeOfPoint(i, 12, Pos[0][0], Pos[0][1], Pos[0][2]))
		{
			if(useDist){
				GetPlayerPos(i, Pos[1][0], Pos[1][1], Pos[1][2]);
				PlayerPlaySound(i,sound, Pos[0][0] - Pos[0][0], Pos[0][1] - Pos[0][1], Pos[0][2] - Pos[0][2]);
			}
			else
			PlayerPlaySound(i,sound,0.0,0.0,0.0);
		}
	}
	return 1;
}

stock PlayerPlayNearbySoundEx(playerid, sound, range, bool:useDist = true){

	new Float:Pos[2][3];

	GetPlayerPos(playerid, Pos[0][0], Pos[0][1], Pos[0][2]);

	foreach(Player, i)
	{
		if(IsPlayerInRangeOfPoint(i, range, Pos[0][0], Pos[0][1], Pos[0][2]))
		{
			if(useDist){
				GetPlayerPos(i, Pos[1][0], Pos[1][1], Pos[1][2]);
				PlayerPlaySound(i,sound, Pos[0][0] - Pos[0][0], Pos[0][1] - Pos[0][1], Pos[0][2] - Pos[0][2]);
			}
			else
			PlayerPlaySound(i,sound,0.0,0.0,0.0);
		}
	}
	return 1;
}

stock PlaySoundForAll(sound){
	foreach(Player, i)
		PlayerPlaySound(i,sound,0.0,0.0,0.0);
	return 1;
}

stock PlayNearbySound(Float:x, Float:y, Float:z, sound, bool:useDist = true){

	new Float:Pos[3];

	foreach(Player, i)
	{
		if(IsPlayerInRangeOfPoint(i, 12, x, y, z))
		{
			if(useDist){
				GetPlayerPos(i, Pos[0], Pos[1], Pos[2]);
				PlayerPlaySound(i,sound,x - Pos[0], y - Pos[1], z - Pos[2]);
			}
			else
			PlayerPlaySound(i,sound,0.0,0.0,0.0);
		}
	}
	return 1;
}

stock PlayNearbySoundEx(Float:x, Float:y, Float:z, sound, range, bool:useDist = true)
{
	new Float:Pos[3];

	foreach(Player, i)
	{
		if(IsPlayerInRangeOfPoint(i, range, x, y, z))
		{
			if(useDist)
			{
				GetPlayerPos(i, Pos[0], Pos[1], Pos[2]);
				PlayerPlaySound(i,sound,x - Pos[0], y - Pos[1], z - Pos[2]);
			}
			else
			PlayerPlaySound(i,sound,0.0,0.0,0.0);
		}
	}
	return 1;
}

CMD:htake(playerid, params[])
{
	if(Player[playerid][InHouse] == 0)
		return SendClientMessage(playerid, -1, "You're not inside any house.");

	if(Player[playerid][House] == 0 && Player[playerid][House2] == 0 && Player[playerid][HouseKey] == 0 && (Player[playerid][CopDuty] != 1 || Player[playerid][GroupRank] <= 5) && Player[playerid][AdminDuty] < 1)
		return SendClientMessage(playerid, WHITE, "You don't own a house or don't have a house key!");

	if(Player[playerid][InHouse] != Player[playerid][House] && Player[playerid][InHouse] != Player[playerid][House2] && Player[playerid][InHouse] != Player[playerid][HouseKey] && (Player[playerid][CopDuty] != 1 || Player[playerid][GroupRank] <= 5) && Player[playerid][AdminDuty] < 1)
		return SendClientMessage(playerid, WHITE, "You aren't inside your house or don't have a key to this house!");

	new string[64];
	format(string, sizeof(string), "House Storage (%d/%d)", CalculateContainerWeight(Player[playerid][InHouse], CONTAINER_TYPE_HOUSE), Houses[Player[playerid][InHouse]][HouseStorageSize]);
	ShowPlayerDialog(playerid, HOUSE_TAKE, DIALOG_STYLE_LIST, string, GetStorageString(Player[playerid][InHouse], CONTAINER_TYPE_HOUSE), "Take", "Exit");
	return 1;
}

CMD:hstore(playerid, params[])
{
	if(Player[playerid][InHouse] == 0)
		return SendClientMessage(playerid, -1, "You're not inside any house.");

	if(Player[playerid][House] == 0 && Player[playerid][House2] == 0 && Player[playerid][HouseKey] == 0)
		return SendClientMessage(playerid, WHITE, "You don't own a house or don't have keys to a house!");

	if(Player[playerid][PlayingHours] < 2)
		return SendClientMessage(playerid, -1, "You need 2 playing hours before you can deposit into houses.");

	if(Player[playerid][InHouse] != Player[playerid][House] && Player[playerid][InHouse] != Player[playerid][House2] && Player[playerid][InHouse] != Player[playerid][HouseKey] && Player[playerid][AdminDuty] < 1)
		return SendClientMessage(playerid, WHITE, "You aren't inside your house or don't have keys to this house!");

	if(GetPVarInt(playerid, "StoreTimer") > gettime())
		return 1;

	new item_name[32], item_amount, item_type, PlayerItemAmount;
	if(sscanf(params, "s[32]d", item_name, item_amount))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /hstore [item] [amount]");
		SendClientMessage(playerid, GREY, "Types: money, speed, cocaine, pot, weapon, streetmats, standardmats, militarymats, potseeds, poorkevlar, standardkevlar, militarykevlar");
		return SendClientMessage(playerid, GREY, "Types: bomb, tent");
	}

	item_type = GetItemTypeFromName(item_name);
		
	if(item_type == ITEM_TYPE_ARMOUR_POOR || item_type == ITEM_TYPE_ARMOUR_STANDARD || item_type == ITEM_TYPE_ARMOUR_MILITARY)
		item_amount = 1;
		
	if(item_amount < 1)
		return SendClientMessage(playerid, WHITE, "Invalid item amount.");

	if(item_type == ITEM_TYPE_NONE)
	{
		return SendClientMessage(playerid, WHITE, "Invalid item name.");
	}

	if(item_type != ITEM_TYPE_WEAPON && item_type != ITEM_TYPE_ARMOUR_POOR && item_type != ITEM_TYPE_ARMOUR_STANDARD && item_type != ITEM_TYPE_ARMOUR_MILITARY)
	{
	    PlayerItemAmount = GetPlayerItemAmount(playerid, item_type);
	    if( PlayerItemAmount < item_amount)
		    return SendClientMessage(playerid, WHITE, "You don't have that amount on you.");
    }

	SetPVarInt(playerid, "StoreTimer", gettime() + 3);
	if(item_type == ITEM_TYPE_WEAPON)
	{
		item_amount = GetPlayerWeapon(playerid);
		if(!PlayerHasWeapon(playerid, item_amount))
			return 1;
		if(item_amount == 0 || item_amount == 46)
			return SendClientMessage(playerid, WHITE, "You can't store that weapon.");
	}
	
	if(item_type == ITEM_TYPE_ARMOUR_POOR)
	{
		if(Player[playerid][HasArmour] != 100)
			return SendClientMessage(playerid, -1, "You don't have a poor kevlar vest to store.");
	}
	if(item_type == ITEM_TYPE_ARMOUR_STANDARD)
	{
		if(Player[playerid][HasArmour] != 115)
			return SendClientMessage(playerid, -1, "You don't have a standard kevlar vest to store.");		
	}
	if(item_type == ITEM_TYPE_ARMOUR_MILITARY)
	{
		if(Player[playerid][HasArmour] != 130)
			return SendClientMessage(playerid, -1, "You don't have a military kevlar vest to store.");		
	}
	if(item_type == ITEM_TYPE_BOMB)
	{
		if(Player[playerid][Bomb] < 1)
			return SendClientMessage(playerid, -1, "You don't have a bomb to store.");
	}
	if(item_type == ITEM_TYPE_TENT)
	{
		if(Player[playerid][Tent] < 1)
			return SendClientMessage(playerid, -1, "You don't have a tent to store.");
	}

	if((CalculateContainerWeight(Player[playerid][InHouse], CONTAINER_TYPE_HOUSE) + GetItemWeight(item_type, item_amount)) > Houses[Player[playerid][InHouse]][HouseStorageSize])
		return SendClientMessage(playerid, -1, "There isn't enough room in this house to store that.");

	AddToStorage(Player[playerid][InHouse], CONTAINER_TYPE_HOUSE, item_type, item_amount);
	RemoveItemFromPlayer(playerid, item_type, item_amount);

	new string[128];
	if(item_type == ITEM_TYPE_WEAPON)
		format(string, sizeof(string), "* %s has stored a weapon in the house.", GetNameEx(playerid));
	else if(item_type == ITEM_TYPE_ARMOUR_POOR || item_type == ITEM_TYPE_ARMOUR_STANDARD || item_type == ITEM_TYPE_ARMOUR_MILITARY)
		format(string, sizeof(string), "* %s has stored a kevlar vest in the house.", GetNameEx(playerid));
	else if(item_type == ITEM_TYPE_TENT)
		format(string, sizeof(string), "* %s has stored a tent in the house.", GetNameEx(playerid));
	else format(string, sizeof(string), "* %s has stored some %s in the house.", GetNameEx(playerid), strtolower(GetItemName(item_type)));
	NearByMessage(playerid, NICESKY, string);

	if(item_type == ITEM_TYPE_WEAPON)
		format(string, sizeof(string), "You have stored a %s in the house.", GetWeaponNameEx(item_amount));
	else if(item_type == ITEM_TYPE_ARMOUR_POOR || item_type == ITEM_TYPE_ARMOUR_STANDARD || item_type == ITEM_TYPE_ARMOUR_MILITARY)
		format(string, sizeof(string), "You have stored a kevlar vest in the house.");
	else format(string, sizeof(string), "You have stored %d %s in the house.", item_amount, strtolower(GetItemName(item_type)));
	SendClientMessage(playerid, WHITE, string);

	if(item_type == ITEM_TYPE_WEAPON)
		format(string, sizeof(string), "[HOUSE] %s has stored a %s (%d) in house id %d.", GetName(playerid), GetWeaponNameEx(item_amount), item_amount, Player[playerid][InHouse]);
	else format(string, sizeof(string), "[HOUSE] %s has stored %s (%d) in house id %d. (New Inv Amount: %d)", GetName(playerid), GetItemName(item_type), item_amount, Player[playerid][InHouse], GetPlayerItemAmount(playerid, item_type));
	StatLog(string);
	StorageLog(string);
	return 1;
}

CMD:buyclothes(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 1.5, Businesses[Player[playerid][InBusiness]][bInteractX], Businesses[Player[playerid][InBusiness]][bInteractY], Businesses[Player[playerid][InBusiness]][bInteractZ]) && Player[playerid][InBusiness] != 0)
		return SendClientMessage(playerid, GREY, "You must stand near the interaction point to do this.");

	DeletePVar(playerid, "ClothingSlot");
	if(Businesses[Player[playerid][InBusiness]][bType] != 2)
		return SendClientMessage(playerid, -1, "You are not in a clothing store!");
	if(Businesses[Player[playerid][InBusiness]][bSupplies] < 15)
		return SendClientMessage(playerid, WHITE, "This store is out of supplies!");
	if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice1])
		return SendClientMessage(playerid, -1, "You cannot afford a pair of clothing!");
	if(Player[playerid][House] > 0 || Player[playerid][House2] > 0){
		new string[255];
		format(string, sizeof(string), "Slot 1: %d\nSlot 2: %d\nSlot 3: %d", Player[playerid][PlayerSkinSlot1], Player[playerid][PlayerSkinSlot2], Player[playerid][PlayerSkinSlot3]);
		ShowPlayerDialog(playerid, BUY_CLOTHES_HOUSE, DIALOG_STYLE_LIST, "House Slot:", string, "Choose", "Cancel");
	}
	else
	{
		if(Player[playerid][Gender] == 1)
			ShowModelSelectionMenu(playerid, SkinLists[Player[playerid][Race]], "Select Skin to Purchase", RED, WHITE);
		else ShowModelSelectionMenu(playerid, SkinLists[Player[playerid][Race]] + 4, "Select Skin to Purchase", RED, WHITE);
		return 1;
	}
	return 1;
}

CMD:legacybuyclothes(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 1.5, Businesses[Player[playerid][InBusiness]][bInteractX], Businesses[Player[playerid][InBusiness]][bInteractY], Businesses[Player[playerid][InBusiness]][bInteractZ]) && Player[playerid][InBusiness] != 0)
		return SendClientMessage(playerid, GREY, "You must stand near the interaction point to do this.");

	DeletePVar(playerid, "ClothingSlot");
	if(Businesses[Player[playerid][InBusiness]][bType] != 2)
		return SendClientMessage(playerid, -1, "You are not in a clothing store!");
	if(Businesses[Player[playerid][InBusiness]][bSupplies] < 15)
		return SendClientMessage(playerid, WHITE, "This store is out of supplies!");
	if(Player[playerid][Money] < Businesses[Player[playerid][InBusiness]][bProductPrice1])
		return SendClientMessage(playerid, -1, "You cannot afford a pair of clothing!");
	if(Player[playerid][House] > 0 || Player[playerid][House2] > 0){
		new string[255];
		format(string, sizeof(string), "Slot 1: %d\nSlot 2: %d\nSlot 3: %d", Player[playerid][PlayerSkinSlot1], Player[playerid][PlayerSkinSlot2], Player[playerid][PlayerSkinSlot3]);
		ShowPlayerDialog(playerid, BUY_CLOTHES_HOUSE, DIALOG_STYLE_LIST, "House Slot:", string, "Choose", "Cancel");
	}
	else
	{
		new string[255];
		SetPVarInt(playerid, "BUY_CLOTHES_NO_TDS", 1);
		format(string, sizeof(string), "Please enter the ID of the skin you'd like to buy (0 - 300)\n\nIt will cost you %s for your new skin.", PrettyMoney(Businesses[Player[playerid][InBusiness]][bProductPrice1]));
		ShowPlayerDialog(playerid, BUY_CLOTHES, DIALOG_STYLE_INPUT, "Enter skin ID", string, "Set", "Cancel");
	}
	return 1;
}

CMD:listfskins(playerid, params[]){

	new string[128], groupid;

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(sscanf(params, "d", groupid))
		return SendClientMessage(playerid, GREY, "SYNTAX: /listfskins [factionid]");

	if(!DoesFactionExist(groupid))
		return SendClientMessage(playerid, -1, "That is not a valid faction id.");

	else
	{
		SendClientMessage(playerid, GREY, "------------------------------------------------------------");
		format(string, sizeof(string), "Group: %s -- Skins", Groups[groupid][GroupName]);
		SendClientMessage(playerid, WHITE, string);
		SendClientMessage(playerid, GREY, "------------------------------------------------------------");
		format(string, sizeof(string), "Skin 0: %d", Groups[groupid][Skin0]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Skin 1: %d", Groups[groupid][Skin1]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Skin 2: %d", Groups[groupid][Skin2]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Skin 3: %d", Groups[groupid][Skin3]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Skin 4: %d", Groups[groupid][Skin4]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Skin 5: %d", Groups[groupid][Skin5]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Skin 6: %d", Groups[groupid][Skin6]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Skin 7: %d", Groups[groupid][Skin7]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Skin 8: %d", Groups[groupid][Skin8]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Skin 9: %d", Groups[groupid][Skin9]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Skin 10: %d", Groups[groupid][Skin10]);
		SendClientMessage(playerid, WHITE, string);
		SendClientMessage(playerid, GREY, "------------------------------------------------------------");
	}

	return 1;
}

command(changerank, playerid, params[])
{
	new id, rank, string[255];

	if(sscanf(params, "ud", id, rank))
		return SendClientMessage(playerid, GREY, "SYNTAX: /changerank [playerid] [rank]");

	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, WHITE, "That player isn't connected!");

	if(Player[playerid][Group] != Player[id][Group])
		return SendClientMessage(playerid, WHITE, "You're not in the same group as that player!");

	if(Player[id][GroupRank] >= Player[playerid][GroupRank])
		return SendClientMessage(playerid, WHITE, "You cannot change the rank of an equal or higher level player!");

	if(Groups[Player[playerid][Group]][CommandTypes] == 9 && Player[playerid][GroupRank] < 6)
		return SendClientMessage(playerid, -1, "You must be rank 6 or higher to change ranks.");

	if(Player[playerid][GroupRank] < 5)
		return SendClientMessage(playerid, WHITE, "You do not have sufficient privileges to use this command.");

	if(rank >= Player[playerid][GroupRank])
		return SendClientMessage(playerid, WHITE, "You cannot promote someone to a higher rank than yourself!");

	if(rank < 1 || rank > 10)
		return SendClientMessage(playerid, WHITE, "Invalid rank! Ranks must be between 1 and 10.");

	else
	{
		format(string, sizeof(string), "[GROUP] %s has changed %s's rank to %d (was %d).", GetName(playerid), GetName(id), rank, Player[id][GroupRank]);
		StatLog(string);
		format(string, sizeof(string), "You have altered %s's rank to %d (was %d).", GetName(id), rank, Player[id][GroupRank]);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Your rank has been changed from %d to %d by %s.", Player[id][GroupRank], rank, GetName(playerid));
		SendClientMessage(id, WHITE, string);
		Player[id][GroupRank] = rank;
	}

	return 1;
}

command(whereami, playerid, params[])
{
	new Float:x, Float:y, Float:z, string[255];

	GetPlayerPos(playerid, x, y, z);
	format(string, sizeof(string), "You are here: %f, %f, %f (VW: %d / Int: %d)", x, y, z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	SendClientMessage(playerid, WHITE, string);

	return 1;
}

command(carz, playerid, params[])
{
	new Float:z, string[255];

	if(IsPlayerInAnyVehicle(playerid) == 0)
		return 1;
	GetVehicleZAngle(Player[playerid][LastCarID], z);
	format(string, sizeof(string), "Vehicle facing %0.f.", z);
	SendClientMessage(playerid, WHITE, string);

	return 1;
}

command(whattime, playerid, params[])
{
	new hour, minute, second, string[128];

	gettime(hour, minute, second);
	format(string, sizeof(string), "The current time is %02d:%02d:%02d (%d).", hour, minute, second, gettime());
	SendClientMessage(playerid, WHITE, string);

	return 1;
}

command(togglevip, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][AdminLevel] >= 2)
	{
		if(VIPEnabled == 1)
		{
			VIPEnabled = 0;
			format(string, sizeof(string), "%s has disabled VIP Chat.", Player[playerid][AdminName]);
			SendMessageToVip(LIGHTRED, string);
			AdminActionsLog(string);
		}
		else
		{
			VIPEnabled = 1;
			format(string, sizeof(string), "%s has enabled VIP Chat.", Player[playerid][AdminName]);
			SendMessageToVip(LIGHTRED, string);
			AdminActionsLog(string);
		}
	}
	return 1;
}

CMD:factionname(playerid, params[]){
	new string[255], groupid, name[255];

	if(Player[playerid][AdminLevel] < 5)
		return 1;

	if(sscanf(params, "ds[255]", groupid, name))
		return SendClientMessage(playerid, GREY, "SYNTAX: /factionname [faction ID] [New Name]");

	if(!DoesFactionExist(groupid))
		return SendClientMessage(playerid, -1, "That is not a valid faction id.");

	if(strlen(name) < 3 || strlen(name) > 25)
		return SendClientMessage(playerid, WHITE, "You must use a name that is above 3 characters, and no longer than 26.");

	if(!(strfind(name, "~", true) || strfind(name, "=", true)))
		return SendClientMessage(playerid, WHITE, "Invalid character! Names can only be alphanumeric.");

	format(string, sizeof(string), "You have changed %s to %s.", Groups[groupid][GroupName], name);
	format(Groups[groupid][GroupName], 255, "%s", name);
	SendClientMessage(playerid, WHITE, string);
	UpdateObjectLabel(groupid, LABEL_TYPE_FACTION, .create = 1);
	SaveGroup(groupid);

	return 1;
}

//CMD:ooc(playerid, params[]) return SendClientMessage(playerid, WHITE, "This command is never, ever coming back.");

CMD:wt(playerid, params[])
{
	if(isnull(params))
		return SendClientMessage(playerid, GREY, "SYNTAX: /wt [msg]");

	if(Player[playerid][WalkieTalkie] == 0)
		return SendClientMessage(playerid, -1, "You don't own a walkietalkie!");

	if(Player[playerid][Gagged] == 1)
		return SendClientMessage(playerid, -1, "You can't do that, your mouth is covered!");

	if(Player[playerid][WalkieFrequency] == 0)
		return SendClientMessage(playerid, -1, "You must first set a frequency, type /setfrequency");

	if(Player[playerid][Tied] || Player[playerid][Tazed] || Player[playerid][Cuffed] >= 1 || (Player[playerid][PrisonID] > 0 && Player[playerid][PrisonDuration] > 0))
		return SendClientMessage(playerid, -1, "You cannot do this right now.");

	if(GetPlayerToggle(playerid,  TOGGLE_WALKIE) == true)
		return SendClientMessage(playerid, -1, "Your walkie-talkie is currently turned off. Use /toggles to turn it on.");

	#if defined MTG_PLAGUE
	if(Player[playerid][VirusCount] >= PLAGUE_SPEECH_MIN)
		format(params, strlen(params) + 1, "%s", MixUpSentence(params, Player[playerid][VirusCount], strlen(params) + 1));
	#endif
	new msg[128], inRange[MAX_PLAYERS], string[150];
	format(msg, sizeof(msg), "[Walkie] %s says: %s", GetNameEx(playerid), params);
	format(string, sizeof(string), "[Walkie][%d] %s says: %s", Player[playerid][WalkieFrequency], GetName(playerid), params);
	ICChatLog(string);

	new Float:pos[6];

	GetPlayerPos(playerid, pos[3], pos[4], pos[5]);
	if(Player[playerid][InHouse] > 0)
	{
		new id = Player[playerid][InHouse];
		pos[3] = Houses[id][hExteriorX];
		pos[4] = Houses[id][hExteriorY];
		pos[5] = Houses[id][hExteriorZ];
	}

	if(Player[playerid][InBusiness] > 0)
	{
		new id = Player[playerid][InBusiness];
		pos[3] = Businesses[id][bExteriorX];
		pos[4] = Businesses[id][bExteriorY];
		pos[5] = Businesses[id][bExteriorZ];
	}

	if(Player[playerid][InGroupHQ] > 0)
	{
		new id = Player[playerid][InGroupHQ];
		pos[3] = Groups[id][HQExteriorX];
		pos[4] = Groups[id][HQExteriorY];
		pos[5] = Groups[id][HQExteriorZ];
	}

	if(Player[playerid][InGangHQ] > 0)
	{
		new id = Player[playerid][InGangHQ];
		pos[3] = Gangs[id][ExtPos][0];
		pos[4] = Gangs[id][ExtPos][1];
		pos[5] = Gangs[id][ExtPos][2];
	}

	foreach(Player, i)
	{
		if(!(Player[i][WalkieFrequency] == Player[playerid][WalkieFrequency]) || GetPlayerToggle(playerid,  TOGGLE_WALKIE) == true || !Player[playerid][WalkieTalkie])
			continue;

		if(Player[i][PrisonID] > 0 && Player[i][PrisonDuration] > 0)
			continue;

		if((Player[playerid][InHouse] == Player[i][InHouse] && Player[playerid][InHouse] > 0) || (Player[playerid][InBusiness] == Player[i][InBusiness] && Player[playerid][InBusiness] > 0) || (Player[playerid][InGroupHQ] == Player[i][InGroupHQ] && Player[playerid][InGroupHQ] > 0) || (Player[playerid][InGangHQ] == Player[i][InGangHQ] && Player[playerid][InGangHQ] > 0))
		{
			inRange[i] = 1;
		}

		GetPlayerPos(i, pos[0], pos[1], pos[2]);
		if(Player[i][InHouse] > 0)
		{
			new id = Player[i][InHouse];
			pos[0] = Houses[id][hExteriorX];
			pos[1] = Houses[id][hExteriorY];
			pos[2] = Houses[id][hExteriorZ];
		}

		if(Player[i][InBusiness] > 0)
		{
			new id = Player[i][InBusiness];
			pos[0] = Businesses[id][bExteriorX];
			pos[1] = Businesses[id][bExteriorY];
			pos[2] = Businesses[id][bExteriorZ];
		}

		if(Player[i][InGroupHQ] > 0)
		{
			new id = Player[i][InGroupHQ];
			pos[0] = Groups[id][HQExteriorX];
			pos[1] = Groups[id][HQExteriorY];
			pos[2] = Groups[id][HQExteriorZ];
		}

		if(Player[i][InGangHQ] > 0)
		{
			new id = Player[i][InGangHQ];
			pos[0] = Gangs[id][ExtPos][0];
			pos[1] = Gangs[id][ExtPos][1];
			pos[2] = Gangs[id][ExtPos][2];
		}

		if(GetDistanceBetweenPoints(pos[0], pos[1], pos[2], pos[3], pos[4], pos[5]) > WT_RANGE)
			continue;

		GetPlayerPos(i, pos[0], pos[1], pos[2]);
		foreach(Player, j)
		{
			if(IsPlayerInRangeOfPoint(j, 5, pos[0], pos[1], pos[2]) && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(j))
				inRange[j] = 1;
		}
	}

	foreach(Player, i)
	{
		if(!inRange[i])
			continue;

		if(Player[i][WalkieFrequency] == Player[playerid][WalkieFrequency] && GetPlayerToggle(playerid,  TOGGLE_WALKIE) == false && Player[playerid][WalkieTalkie])
			SendClientMessage(i, WT_ORANGE, msg);
		else
			SendClientMessage(i, GREY, msg);
	}
	return 1;
}

CMD:lowwt(playerid, params[])
{
	if(isnull(params))
		return SendClientMessage(playerid, GREY, "SYNTAX: /lowwt [msg]");

	if(Player[playerid][WalkieTalkie] == 0)
		return SendClientMessage(playerid, -1, "You don't own a walkietalkie!");

	if(Player[playerid][Gagged] == 1)
		return SendClientMessage(playerid, -1, "You can't do that, your mouth is covered!");

	if(Player[playerid][WalkieFrequency] == 0)
		return SendClientMessage(playerid, -1, "You must first set a frequency, type /setfrequency");

	if(Player[playerid][Tied] || Player[playerid][Tazed] || Player[playerid][Cuffed] >= 1 || (Player[playerid][PrisonID] > 0 && Player[playerid][PrisonDuration] > 0))
		return SendClientMessage(playerid, -1, "You cannot do this right now.");

	if(GetPlayerToggle(playerid,  TOGGLE_WALKIE) == true)
		return SendClientMessage(playerid, -1, "Your walkie-talkie is currently turned off. Use /toggles to turn it on.");

	#if defined MTG_PLAGUE
	if(Player[playerid][VirusCount] >= PLAGUE_SPEECH_MIN)
		format(params, strlen(params) + 1, "%s", MixUpSentence(params, Player[playerid][VirusCount], strlen(params) + 1));
	#endif
	new msg[128], inRange[MAX_PLAYERS], string[150];
	format(msg, sizeof(msg), "[Walkie] %s whispers: %s", GetNameEx(playerid), params);
	format(string, sizeof(string), "[Walkie][%d] %s whispers: %s", Player[playerid][WalkieFrequency], GetName(playerid), params);
	ICChatLog(string);

	new Float:pos[6];

	GetPlayerPos(playerid, pos[3], pos[4], pos[5]);
	if(Player[playerid][InHouse] > 0)
	{
		new id = Player[playerid][InHouse];
		pos[3] = Houses[id][hExteriorX];
		pos[4] = Houses[id][hExteriorY];
		pos[5] = Houses[id][hExteriorZ];
	}

	if(Player[playerid][InBusiness] > 0)
	{
		new id = Player[playerid][InBusiness];
		pos[3] = Businesses[id][bExteriorX];
		pos[4] = Businesses[id][bExteriorY];
		pos[5] = Businesses[id][bExteriorZ];
	}

	if(Player[playerid][InGroupHQ] > 0)
	{
		new id = Player[playerid][InGroupHQ];
		pos[3] = Groups[id][HQExteriorX];
		pos[4] = Groups[id][HQExteriorY];
		pos[5] = Groups[id][HQExteriorZ];
	}

	if(Player[playerid][InGangHQ] > 0)
	{
		new id = Player[playerid][InGangHQ];
		pos[3] = Gangs[id][ExtPos][0];
		pos[4] = Gangs[id][ExtPos][1];
		pos[5] = Gangs[id][ExtPos][2];
	}

	foreach(Player, i)
	{
		if(!(Player[i][WalkieFrequency] == Player[playerid][WalkieFrequency]) || GetPlayerToggle(i,  TOGGLE_WALKIE) == true || !Player[playerid][WalkieTalkie])
			continue;

		if(Player[i][PrisonID] > 0 && Player[i][PrisonDuration] > 0)
			continue;

		if((Player[playerid][InHouse] == Player[i][InHouse] && Player[playerid][InHouse] > 0) || (Player[playerid][InBusiness] == Player[i][InBusiness] && Player[playerid][InBusiness] > 0) || (Player[playerid][InGroupHQ] == Player[i][InGroupHQ] && Player[playerid][InGroupHQ] > 0) || (Player[playerid][InGangHQ] == Player[i][InGangHQ] && Player[playerid][InGangHQ] > 0))
		{
			inRange[i] = 1;
		}

		GetPlayerPos(i, pos[0], pos[1], pos[2]);
		if(Player[i][InHouse] > 0)
		{
			new id = Player[i][InHouse];
			pos[0] = Houses[id][hExteriorX];
			pos[1] = Houses[id][hExteriorY];
			pos[2] = Houses[id][hExteriorZ];
		}

		if(Player[i][InBusiness] > 0)
		{
			new id = Player[i][InBusiness];
			pos[0] = Businesses[id][bExteriorX];
			pos[1] = Businesses[id][bExteriorY];
			pos[2] = Businesses[id][bExteriorZ];
		}

		if(Player[i][InGroupHQ] > 0)
		{
			new id = Player[i][InGroupHQ];
			pos[0] = Groups[id][HQExteriorX];
			pos[1] = Groups[id][HQExteriorY];
			pos[2] = Groups[id][HQExteriorZ];
		}

		if(Player[i][InGangHQ] > 0)
		{
			new id = Player[i][InGangHQ];
			pos[0] = Gangs[id][ExtPos][0];
			pos[1] = Gangs[id][ExtPos][1];
			pos[2] = Gangs[id][ExtPos][2];
		}

		if(GetDistanceBetweenPoints(pos[0], pos[1], pos[2], pos[3], pos[4], pos[5]) > WT_RANGE)
			continue;

		GetPlayerPos(i, pos[0], pos[1], pos[2]);
		foreach(Player, j)
		{
			if(IsPlayerInRangeOfPoint(j, 2, pos[0], pos[1], pos[2]) && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(j))
				inRange[j] = 1;
		}
	}

	foreach(Player, i)
	{
		if(!inRange[i])
			continue;

		if(Player[i][WalkieFrequency] == Player[playerid][WalkieFrequency] && GetPlayerToggle(i,  TOGGLE_WALKIE) == false && Player[playerid][WalkieTalkie])
			SendClientMessage(i, WT_ORANGE, msg);
		else
			SendClientMessage(i, GREY, msg);
	}
	return 1;
}

//Raffle stuff
stock loadRaffle(){

	new Cache:cache = mysql_query(MYSQL_MAIN, "SELECT * FROM raffleStats");

	rafflePrice = cache_get_field_content_int(0, "price");
	raffleBonus = cache_get_field_content_int(0, "bonus");
	rafflePot = cache_get_field_content_int(0, "pot");
	toggedRaffle =  cache_get_field_content_int(0, "enabled");

	cache_delete(cache);

	print("Raffle stats loaded");
	return 1;
}

stock saveRaffle(){

	new query[128];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE raffleStats SET price = '%d' , pot = '%d' , enabled = '%d', bonus = '%d'",  rafflePrice, rafflePot, toggedRaffle, raffleBonus);
	mysql_query(MYSQL_MAIN, query, false);

	print("Raffle saved.");

	return 1;
}

stock GetNumberOfTickets(playerid){

	new Cache:cache, query[128], count;
	if(Player[playerid][UnderCover] > 0 || Player[playerid][AdminDuty] > 0)
		mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM Raffle WHERE name = '%e'", Player[playerid][NormalName]);
	else
	mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM Raffle WHERE name = '%e'", GetName(playerid));
	cache = mysql_query(MYSQL_MAIN, query);
	count = cache_get_row_count();
	cache_delete(cache);
	return count;
}

stock GetTicketMax(playerid){
	if(Player[playerid][VipRank] < 4)
		return 1 + Player[playerid][VipRank];

	return 4;
}


stock raffleWinner()
{
	new chosenNumber = random(99) + 1;
	new query[255];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT name FROM Raffle WHERE number = '%d'", chosenNumber);
	new Cache:cache = mysql_query(MYSQL_MAIN, query), winners = cache_get_row_count();
	new string[128];

	if(winners < 1)
	{
		rafflePot += raffleBonus;
		raffleBonus = 0;
		cache_delete(cache);
		mysql_query(MYSQL_MAIN, "INSERT INTO raffleWinners (name, valid) VALUES ('NO WINNER', '-1')", false);
		SendToAdmins(RED, "Nobody won the lottery!", 1);
		mysql_query(MYSQL_MAIN, "DELETE FROM Raffle", false);
		foreach(Player, i)
		{
			Player[i][LottoTicket] = 0;
		}
		mysql_query(MYSQL_MAIN, "UPDATE playeraccounts SET LottoTicket = '0'", false);
		return 1;
	}

	new idx = 0;
	while(idx < winners)
	{
		cache_set_active(cache);
		new name[25];
		cache_get_field_content(idx, "name", name, 1, 25);

		new prizemoney = rafflePot / winners;
		new bank, bank2;
		if(IsPlayerRegistered(name))
		{
			format(string, sizeof(string), "Congratulations on winning the lottery! $%d has been deposited into your bank!", prizemoney);

			new id = GetPlayerIDEx(name);

			if(!IsPlayerConnectedEx(id))
			{
				bank = GetRemoteIntValue(name, "BankMoney");
				bank += prizemoney;
				mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE playeraccounts SET BankMoney = '%d', Note = '%e' WHERE NormalName = '%e'", bank, string, name);
				mysql_query(MYSQL_MAIN, query, false);
			}
			else
			{
				bank = Player[id][BankMoney];
				bank2 = Player[id][BankMoney] + prizemoney;
				Player[id][BankMoney] += prizemoney;
				SendClientMessage(id, YELLOW, string);
				SavePlayerData(id);
			}
		}
		mysql_format(MYSQL_MAIN, query, sizeof(query), "INSERT INTO raffleWinners (name, prize) VALUES ('%e', '%d')", name, prizemoney);
		mysql_query(MYSQL_MAIN, query, false);

		format(string, sizeof(string), "%s has won %d from the lottery!", name, prizemoney);
		SendToAdmins(RED, string, 0);

		format(string, sizeof(string), "[LOTTO] %s has won %s from winning the lottery! BankMoney = %s (was %s)", name, PrettyMoney(prizemoney), PrettyMoney(bank2), PrettyMoney(bank));
		MoneyLog(string);

		idx++;
	}

	cache_delete(cache);
	mysql_query(MYSQL_MAIN, "DELETE FROM Raffle", false);

	new RaffleMole[][] =
	{
		"Ugggghhhh! I never win the damn lottery.",
		"Ah shit, I forgot to buy tickets again.",
		"Damnit, another loss to me. Thanks lottery!",
		"Lottery? Hello? Are you avoiding me?",
		"Screw you, lottery, just let me win the damn cash!" };

	format(string, sizeof(string), "%s", RaffleMole[random(sizeof(RaffleMole))]);
	Mole(string);

	rafflePot = DEFAULT_RAFFLE_START + raffleBonus;
	raffleBonus = 0;

	foreach(Player, i)
	{
		Player[i][LottoTicket] = 0;
	}
	mysql_query(MYSQL_MAIN, "UPDATE playeraccounts SET LottoTicket = '0'", false);
	return saveRaffle();
}

CMD:cleartickets(playerid, params[]){

	if(Player[playerid][AdminLevel] < 5)
		return 1;

	mysql_query(MYSQL_MAIN, "DELETE FROM raffle", false);

	return SendClientMessage(playerid, -1, "All current lottery tickets have been deleted.");
}

CMD:togglelottery(playerid, params[]){

	if(Player[playerid][AdminLevel] < 5)
		return 1;

	if(toggedRaffle){
		toggedRaffle = 0;
		return SendClientMessage(playerid, -1, "Purchasing lottery tickets is now {FF0000}OFF{FFFFFF}.");
	}

	toggedRaffle = 1;
	return SendClientMessage(playerid, -1, "Purchasing lottery tickets is now {40FF00}ON{FFFFFF}.");
}

CMD:lottery(playerid, params[]){

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new Cache:cache = mysql_query(MYSQL_MAIN, "SELECT * FROM Raffle"),
	count = cache_get_row_count(),
	string[128];
	cache_delete(cache);

	if(toggedRaffle)
		SendClientMessage(playerid, -1, "Purchasing lottery tickets is: {40FF00}ON{FFFFFF}.");
	else
	SendClientMessage(playerid, -1, "Purchasing lottery tickets is: {FF0000}OFF{FFFFFF}.");

	format(string, sizeof(string), "Tickets currently cost $%d.", rafflePrice);
	SendClientMessage(playerid, -1, string);

	format(string, sizeof(string), "There are currently %d tickets sold.", count);
	SendClientMessage(playerid, -1, string);

	format(string, sizeof(string), "There is currently $%d in the pot.", rafflePot);
	return SendClientMessage(playerid, -1, string);
}

CMD:vipraffle(playerid, params[]){

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new Cache:cache = mysql_query(MYSQL_MAIN, "SELECT * FROM VipRaffle"),
	count = cache_get_row_count(),
	string[128];
	cache_delete(cache);

	if(VipRaffleInfo[0][rActive])
		SendClientMessage(playerid, -1, "Purchasing VIP raffle tickets is: {40FF00}ON{FFFFFF}.");
	else
	SendClientMessage(playerid, -1, "Purchasing VIP raffle tickets is: {FF0000}OFF{FFFFFF}.");

	format(string, sizeof(string), "Tickets currently cost $%d.", VipRaffleInfo[0][rEntryFee]);
	SendClientMessage(playerid, -1, string);

	format(string, sizeof(string), "There are currently %d tickets sold.", count);
	SendClientMessage(playerid, -1, string);

	format(string, sizeof(string), "There is currently $%d in the pot.", VipRaffleInfo[0][rMoney]);
	SendClientMessage(playerid, -1, string);

	format(string, sizeof(string), "There is currently %d street grade materials in the pot.", VipRaffleInfo[0][rMaterials1]);
	SendClientMessage(playerid, -1, string);

	format(string, sizeof(string), "There is currently %d standard grade materials in the pot.", VipRaffleInfo[0][rMaterials2]);
	SendClientMessage(playerid, -1, string);

	format(string, sizeof(string), "There is currently %d military grade materials in the pot.", VipRaffleInfo[0][rMaterials3]);
	SendClientMessage(playerid, -1, string);

	format(string, sizeof(string), "There is currently %d cocaine in the pot.", VipRaffleInfo[0][rCocaine]);
	SendClientMessage(playerid, -1, string);

	format(string, sizeof(string), "There is currently %d pot in the pot.", VipRaffleInfo[0][rPot]);
	SendClientMessage(playerid, -1, string);

	format(string, sizeof(string), "There is currently %d speed in the pot.", VipRaffleInfo[0][rSpeed]);
	SendClientMessage(playerid, -1, string);

	format(string, sizeof(string), "There is currently %d VIP tokens in the pot.", VipRaffleInfo[0][rTokens]);
	SendClientMessage(playerid, -1, string);

	if(VipRaffleInfo[0][rDrawDate] != 0)
		format(string, sizeof(string), "The raffle will be drawn in %d days.", (VipRaffleInfo[0][rDrawDate] - gettime()) / 86400);
	else
		format(string, sizeof(string), "There is no set time for the VIP raffle to be drawn.");
	return SendClientMessage(playerid, -1, string);
}

CMD:ticketprice(playerid, params[]){

	if(Player[playerid][AdminLevel] < 5)
		return 1;

	new price;

	if(sscanf(params, "d", price))
		return SendClientMessage(playerid, GREY, "SYNTAX: /ticketprice [price]");


	if(price < 50)
		return SendClientMessage(playerid, -1, "Minimum ticket price is $50.");
	rafflePrice = price;
	saveRaffle();

	return SendClientMessage(playerid, -1, "You have updated the raffle ticket price!");
}

CMD:listlotterywinners(playerid, params[]){

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new Cache:cache = mysql_query(MYSQL_MAIN, "SELECT * FROM raffleWinners ORDER BY SQLID DESC"),
	count = cache_get_row_count(),
	row,
	string[128],
	field[24];

	if(count == 0 || !cache_is_valid(cache))
	{
		cache_delete(cache);
		return SendClientMessage(playerid, GREY, "No winners found.");
	}

	SendClientMessage(playerid, -1, "-----------------------------------------------------");
	SendClientMessage(playerid, -1, "WINNERS:");

	if(count > 5){
		format(string, sizeof(string), "Only the most recent 5 winners have been displayed of the total %d.", count);
		SendClientMessage(playerid, GREY, string);
	}
	while(row < 5){

		format(string, sizeof(string), "");

		if(cache_get_field_content_int(row, "valid") == -1)
			strcat(string, "{FF0000}");
		else
			strcat(string, "{40FF00}");

		cache_get_field_content(row, "name", field);
		strcat(string, field);

		strcat(string, " ($");
		cache_get_field_content(row, "prize", field);
		strcat(string, field);
		strcat(string, ")");

		SendClientMessage(playerid, -1, string);
		row ++;
	}

	SendClientMessage(playerid, -1, "-----------------------------------------------------");
	cache_delete(cache);
	return 1;
}

CMD:listviprafflewinners(playerid, params[]){

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new Cache:cache = mysql_query(MYSQL_MAIN, "SELECT * FROM VipRaffleWinners ORDER BY SQLID DESC"), count = cache_get_row_count(), string[128], row;

	if(count == 0 || !cache_is_valid(cache))
	{
		cache_delete(cache);
		return SendClientMessage(playerid, GREY, "No winners found.");
	}

	SendClientMessage(playerid, -1, "-----------------------------------------------------");
	SendClientMessage(playerid, -1, "WINNERS:");

	if(count > 5){
		format(string, sizeof(string), "Only the most recent 5 winners have been displayed of the total %d.", count);
		SendClientMessage(playerid, GREY, string);
	}
	while(row < 5){
		cache_get_field_content(row, "name", string);
		SendClientMessage(playerid, -1, string);
		row++;
	}

	SendClientMessage(playerid, -1, "-----------------------------------------------------");
	cache_delete(cache);
	return 1;
}

CMD:highestz(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new highest, Float:hiZ;
	new Float:x, Float:y, Float:z;
	foreach(Player, i)
	{
		if(GetPlayerInterior(i) != 0)
			continue;

		if(GetPlayerVirtualWorld(i) != 0)
			continue;

		GetPlayerPos(i, x, y, z);
		if (z > hiZ){
			highest = i;
			hiZ = z;
		}
	}
	new string[128];
	format(string, sizeof(string), "%s (%d) has the highest Z Cord", GetName(highest), highest);
	SendClientMessage(playerid, YELLOW, string);

	return 1;
}


/*
CMD:taxiduty(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "You must be in a taxi to go on duty");

	new sql = GetVSQLID(GetPlayerVehicleID(playerid)),
	idx = GetVIndex(sql);

	if(sql == 0)
		return 1;

	if(Veh[idx][Job] != 10)
		return SendClientMessage(playerid, -1, "Your current vehicle is not a taxi");

	SendClientMessage(playerid, YELLOW, "You're now on duty as a taxi driver");
	Player[playerid][TaxiDuty] = 1;
	Player[playerid][TaxiCar] = GetPlayerVehicleID(playerid);
	return 1;
}

CMD:service(playerid, params[])
{
	new option[12];
	if(isnull(params))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /service [option]");
		SendClientMessage(playerid, GREY, "Options: taxi");
		return 1;
	}

	if(!strcmp(option, "taxi", true))
	{
		if(GetOnlineTaxiDrivers() == 0)
			return SendClientMessage(playerid, -1, "There are no taxi drivers On-duty");

	}
	else
	return SendClientMessage(playerid, -1, "Invalid option");

	return 1;
}
*/
//Random

stock GetOnlineTaxiDrivers()
{
	new count;
	foreach(Player, i)
	{
		if(Player[i][TaxiDuty] == 1)
			count++;
	}
	return count;
}

CMD:vwreset(playerid, params[])
{
	if(GetPlayerInterior(playerid) != 0)
		return SendClientMessage(playerid, -1, "Must be in interior 0 for this to work, contact an admin");

	if(GetPlayerVirtualWorld(playerid) == 0)
		return SendClientMessage(playerid, -1, "Your virtual world is already 0");

	if(Player[playerid][InHalloweenMaze] == 1)
		return SendClientMessage(playerid, WHITE, "You can't do this in the maze.");

	if(Player[playerid][Tutorial] == 1)
		return SendClientMessage(playerid, -1, "You're in tutorial");

	if(Player[playerid][InBusiness] != 0 || Player[playerid][InHouse] != 0 || Player[playerid][InGroupHQ] != 0 || Player[playerid][InHotelRoom] != 0)
		return SendClientMessage(playerid, -1, "You can't use this command inside a business, house, group HQ or hotel room.");
		
	if(Player[playerid][InRally] > 0)
		return cmd_leaverally(playerid, params);

	SetPlayerVirtualWorld(playerid, 0);
	Player[playerid][InHouse] = 0;
	Player[playerid][InBusiness] = 0;
	Player[playerid][InGroupHQ] = 0;
	Player[playerid][InHotelRoom] = 0;	
	SendClientMessage(playerid, -1, "Your virtual world has been reset");
	return 1;
}

//House stuffz

CMD:abandonhouse(playerid, params[])
{
	if(Player[playerid][House] == 0)
		return SendClientMessage(playerid, -1, "You do not own a house!");

	new confirm[8];
	if(sscanf(params, "s[8]", confirm) || strcmp(confirm, "confirm", true))
		return SendClientMessage(playerid, -1, "Please type {C70000}/abandonhouse confirm {FFFFFF}to confirm this action.");

	new string[128];
	format(string, sizeof(string), "[HOUSE] %s has abandoned House %d.", GetName(playerid), Player[playerid][House]);
	StatLog(string);
	format(Houses[Player[playerid][House]][hOwner], 255, "Nobody");
	Houses[Player[playerid][House]][Keypad] = -1;
	SendClientMessage(playerid, WHITE, "You have now abandoned your house.");
	SaveHouse(Player[playerid][House]);
	DestroyDynamicPickup(Houses[Player[playerid][House]][HPickupID]);
	Houses[Player[playerid][House]][HPickupID] = CreateDynamicPickup(1273, 23, Houses[Player[playerid][House]][hExteriorX], Houses[Player[playerid][House]][hExteriorY], Houses[Player[playerid][House]][hExteriorZ], Houses[Player[playerid][House]][hExteriorVW], Houses[Player[playerid][House]][hExteriorID], -1, 150.0);
	Player[playerid][House] = 0;
	UpdateObjectLabel(Player[playerid][House], LABEL_TYPE_HOUSE, .create = 0);
	Houses[Player[playerid][House]][hFakeOwner] = 0;
	SaveHouse(Player[playerid][House]);
	return 1;
}

CMD:abandonvhouse(playerid, params[])
{
	if(Player[playerid][House2] == 0)
		return SendClientMessage(playerid, -1, "You do not own a house!");

	new confirm[8];
	if(sscanf(params, "s[8]", confirm) || strcmp(confirm, "confirm", true))
		return SendClientMessage(playerid, -1, "Please type {C70000}/abandonvhouse confirm {FFFFFF}to confirm this action.");

	new string[128];
	format(string, sizeof(string), "[HOUSE] %s has abandoned House %d.", GetName(playerid), Player[playerid][House2]);
	StatLog(string);
	format(Houses[Player[playerid][House2]][hOwner], 255, "Nobody");
	Houses[Player[playerid][House2]][Keypad] = -1;
	SendClientMessage(playerid, WHITE, "You have now abandoned your house.");
	SaveHouse(Player[playerid][House2]);
	DestroyDynamicPickup(Houses[Player[playerid][House2]][HPickupID]);
	Houses[Player[playerid][House2]][HPickupID] = CreateDynamicPickup(1273, 23, Houses[Player[playerid][House2]][hExteriorX], Houses[Player[playerid][House2]][hExteriorY], Houses[Player[playerid][House2]][hExteriorZ], Houses[Player[playerid][House2]][hExteriorVW], Houses[Player[playerid][House2]][hExteriorID], -1, 150.0);
	Player[playerid][House2] = 0;
	UpdateObjectLabel(Player[playerid][House2], LABEL_TYPE_HOUSE, .create = 0);
	Houses[Player[playerid][House2]][hFakeOwner] = 0;
	SaveHouse(Player[playerid][House2]);
	return 1;
}

/* CMD:lockhouse(playerid, params[])
{
	new string[128];
	if(Player[playerid][House] == 0 && Player[playerid][House2] == 0 && Player[playerid][HouseKey] == 0)
		return SendClientMessage(playerid, -1, "You do not own a house.");

	new h = Player[playerid][House], h2 = Player[playerid][House2], h3 = Player[playerid][HouseKey];

	//if((!IsPlayerInRangeOfPoint(playerid, 5, Houses[h][hInteriorX], Houses[h][hInteriorY], Houses[h][hInteriorZ]) || GetPlayerInterior(playerid) != Houses[h][hInteriorID]) && (!IsPlayerInRangeOfPoint(playerid, 5, Houses[h][hExteriorX], Houses[h][hExteriorY], Houses[h][hExteriorZ]) || GetPlayerInterior(playerid) != Houses[h][hExteriorID]))
	//	return SendClientMessage(playerid, -1, "You are not close enough to your house door.");

	if((IsPlayerInRangeOfPoint(playerid, 5, Houses[h][hInteriorX], Houses[h][hInteriorY], Houses[h][hInteriorZ]) && GetPlayerInterior(playerid) == Houses[h][hInteriorID]) || (IsPlayerInRangeOfPoint(playerid, 5, Houses[h][hExteriorX], Houses[h][hExteriorY], Houses[h][hExteriorZ]) && GetPlayerInterior(playerid) == Houses[h][hExteriorID]))
	{
		if(Player[playerid][InHouse] != h && Player[playerid][InHouse] != h2 && Player[playerid][InHouse] != h3)
			return 1;

		if(Houses[Player[playerid][House]][LockStatus] == 1)
		{
			Houses[Player[playerid][House]][LockStatus] = 0;
			format(string, sizeof(string), "%s takes their keys from their pocket and unlocks their house.", GetNameEx(playerid));
			return NearByMessage(playerid, NICESKY, string);
		}

		Houses[Player[playerid][House]][LockStatus] = 1;
		format(string, sizeof(string), "%s takes their keys from their pocket and locks their house.", GetNameEx(playerid));
		return NearByMessage(playerid, NICESKY, string);
	}
	else if((IsPlayerInRangeOfPoint(playerid, 5, Houses[h2][hInteriorX], Houses[h2][hInteriorY], Houses[h2][hInteriorZ]) && GetPlayerInterior(playerid) == Houses[h2][hInteriorID]) || (IsPlayerInRangeOfPoint(playerid, 5, Houses[h2][hExteriorX], Houses[h2][hExteriorY], Houses[h2][hExteriorZ]) && GetPlayerInterior(playerid) == Houses[h2][hExteriorID]))
	{
		if(Player[playerid][InHouse] != h && Player[playerid][InHouse] != h2 && Player[playerid][InHouse] != h3)
			return 1;

		if(Houses[Player[playerid][House2]][LockStatus] == 1)
		{
			Houses[Player[playerid][House2]][LockStatus] = 0;
			format(string, sizeof(string), "%s takes their keys from their pocket and unlocks their house.", GetNameEx(playerid));
			return NearByMessage(playerid, NICESKY, string);
		}

		Houses[Player[playerid][House2]][LockStatus] = 1;
		format(string, sizeof(string), "%s takes their keys from their pocket and locks their house.", GetNameEx(playerid));
		return NearByMessage(playerid, NICESKY, string);
	}
	else if((IsPlayerInRangeOfPoint(playerid, 5, Houses[h3][hInteriorX], Houses[h3][hInteriorY], Houses[h3][hInteriorZ]) && GetPlayerInterior(playerid) == Houses[h3][hInteriorID]) || (IsPlayerInRangeOfPoint(playerid, 5, Houses[h3][hExteriorX], Houses[h3][hExteriorY], Houses[h3][hExteriorZ]) && GetPlayerInterior(playerid) == Houses[h3][hExteriorID]))
	{
		if(Player[playerid][InHouse] != h && Player[playerid][InHouse] != h2 && Player[playerid][InHouse] != h3)
			return 1;

		if(Houses[Player[playerid][HouseKey]][LockStatus] == 1)
		{
			Houses[Player[playerid][HouseKey]][LockStatus] = 0;
			format(string, sizeof(string), "%s takes their keys from their pocket and unlocks the house.", GetNameEx(playerid));
			return NearByMessage(playerid, NICESKY, string);
		}

		Houses[Player[playerid][HouseKey]][LockStatus] = 1;
		format(string, sizeof(string), "%s takes their keys from their pocket and locks the house.", GetNameEx(playerid));
		return NearByMessage(playerid, NICESKY, string);
	}
	else
		SendClientMessage(playerid, -1, "You're not close enough to your house door.");
	return 1;
} */

CMD:lockhouse(playerid, params[])
{
	new string[128], id;

	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "You can't do this from a vehicle.");

	if(Player[playerid][InHouse] > 0)
	{
		id = Player[playerid][InHouse];

		if(Player[playerid][House] != id && Player[playerid][House2] != id && Player[playerid][HouseKey] != id)
			return SendClientMessage(playerid, -1, "This is not your house!");

		if(!IsPlayerInRangeOfPoint(playerid, 5, Houses[id][hInteriorX], Houses[id][hInteriorY], Houses[id][hInteriorZ]))
			return SendClientMessage(playerid, -1, "You are not close enough to your door!");

		switch(Houses[id][LockStatus])
		{
			case 0:
			{
				Houses[id][LockStatus] = 1;
				format(string, sizeof(string), "%s takes their keys from their pocket and locks the house.", GetNameEx(playerid));
				return NearByMessage(playerid, NICESKY, string);
			}
			default:
			{
				Houses[id][LockStatus] = 0;
				format(string, sizeof(string), "%s takes their keys from their pocket and unlocks the house.", GetNameEx(playerid));
				return NearByMessage(playerid, NICESKY, string);
			}
		}
	}
	else
	{
		id = NearestHouse(playerid);

		if(!IsPlayerInRangeOfPoint(playerid, 5, Houses[id][hExteriorX], Houses[id][hExteriorY], Houses[id][hExteriorZ]))
			return SendClientMessage(playerid, -1, "You are not near any house!");

		if(Player[playerid][House] != id && Player[playerid][House2] != id &&  Player[playerid][HouseKey] != id)
			return SendClientMessage(playerid, -1, "This is not your house!");

		switch(Houses[id][LockStatus])
		{
			case 0:
			{
				Houses[id][LockStatus] = 1;
				format(string, sizeof(string), "%s takes their keys from their pocket and locks the house.", GetNameEx(playerid));
				return NearByMessage(playerid, NICESKY, string);
			}
			default:
			{
				Houses[id][LockStatus] = 0;
				format(string, sizeof(string), "%s takes their keys from their pocket and unlocks the house.", GetNameEx(playerid));
				return NearByMessage(playerid, NICESKY, string);
			}
		}
	}
	return 1;
}

stock NearestHouse(playerid)
{
	new houseid, Float:dist = 1000, Float:tmpdis;

	new Float:x, Float:y, Float:z;
	new Float:px, Float:py, Float:pz;
	GetPlayerPos(playerid, px, py, pz);
	new vw = GetPlayerVirtualWorld(playerid);
	for(new v = 0; v < MAX_HOUSES; v++)
	{
		if(Houses[v][hExteriorVW] != vw)
			continue;

		x = Houses[v][hExteriorX],
		y = Houses[v][hExteriorY],
		z = Houses[v][hExteriorZ];

		tmpdis = floatsqroot(floatpower(floatabs(floatsub(px,x)),2)+floatpower(floatabs(floatsub(py,y)),2)+floatpower(floatabs(floatsub(pz,z)),2));
		if(tmpdis < dist)
		{
			dist = tmpdis;
			houseid = v;
		}
	}
	return houseid;
}
//House keypads
CMD:buykp(playerid, params[])
{
	if(Player[playerid][House] == 0 && Player[playerid][House2] == 0)
		return SendClientMessage(playerid, -1, "You don't own a house");

	new hId = NearestHouse(playerid);

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, Houses[hId][hExteriorX], Houses[hId][hExteriorY], Houses[hId][hExteriorZ]))
		return SendClientMessage(playerid, -1, "You're too far from any houses");

	if(Player[playerid][House] != hId && Player[playerid][House2] != hId)
		return SendClientMessage(playerid, -1, "You don't own this house");

	if(Houses[hId][Keypad] != 0)
		return SendClientMessage(playerid, -1, "This house already has a keypad");

	if(Player[playerid][Money] < 1000)
		return SendClientMessage(playerid, -1, "You can't afford the keypad! ($1,000)");

	Houses[hId][Keypad] = -1;
	Player[playerid][Money] -= 1000;
	SendClientMessage(playerid, -1, "You've purchased a keypad for this house ($1,000) Use /setkp");
	SaveHouse(hId);
	return 1;
}

CMD:setkp(playerid, params[])
{
	new hId = NearestHouse(playerid);

	if(isnull(params))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /setkp [code (4)]");
		SendClientMessage(playerid, GREY, "Use -1 for disabled lock");
		return 1;
	}

	if(strlen(params) != 4 && strval(params) != -1)
		return SendClientMessage(playerid, -1, "Your code must be 4 numbers");

	if(!IsNumeric(params) && strval(params) != -1)
		return SendClientMessage(playerid, -1, "Your code must contain all numbers");

	if(strval(params) == 0)
		return SendClientMessage(playerid, -1, "Your code must not equal 0");

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, Houses[hId][hExteriorX], Houses[hId][hExteriorY], Houses[hId][hExteriorZ]))
		return SendClientMessage(playerid, -1, "You're too far from any houses");

	if(Player[playerid][House] != hId && Player[playerid][House2] != hId)
		return SendClientMessage(playerid, -1, "You don't own this house");

	if(Houses[hId][Keypad] == 0)
		return SendClientMessage(playerid, -1, "This house has no Keypad installed");

	new string[129];
	format(string, sizeof(string), "* %s enters some numbers into the keypad", GetNameEx(playerid));
	NearByMessage(playerid, NICESKY, string);
	Houses[hId][Keypad] = strval(params);
	Houses[hId][LockStatus] = 1;
	if(strval(params) != -1)
		SendClientMessage(playerid, YELLOW, "# The door is now locked");
	return 1;
}
CMD:kpp(playerid, params[])
{
	new hId = NearestHouse(playerid);

	if(isnull(params))
	{
		return SendClientMessage(playerid, GREY, "SYNTAX: /kpp [code]");
	}

	if(GetPVarInt(playerid, "KppCD") > gettime())
		return SendClientMessage(playerid, -1, "You can't do that yet");

	SetPVarInt(playerid, "KppCD", gettime() + 2);

	if(GetPlayerInterior(playerid) == 0)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 5.0, Houses[hId][hExteriorX], Houses[hId][hExteriorY], Houses[hId][hExteriorZ]))
			return SendClientMessage(playerid, -1, "You're too far from any houses");
	}
	else if(Player[playerid][InHouse] == 0)
		return SendClientMessage(playerid, -1, "You're not in a house");

	if(GetPlayerInterior(playerid) != 0)
		hId = Player[playerid][InHouse];

	if(Houses[hId][Keypad] == 0)
		return SendClientMessage(playerid, -1, "This house has no Keypad installed");

	if(Houses[hId][Keypad] == -1)
		return SendClientMessage(playerid, -1, "The houses keypad is disabled");

	new string[128];

	format(string, sizeof(string), "* %s enters some numbers into the keypad", GetNameEx(playerid));
	NearByMessage(playerid, NICESKY, string);
	new val[32];
	valstr(val, Houses[hId][Keypad]);
	if(Houses[hId][Keypad] != strval(params) || strcmp(val, params, false))
	{
		format(string, sizeof(string), "Incorrect password (( %s ))", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);
		return 1;
	}

	switch(Houses[hId][LockStatus])
	{
		case 0:{
			Houses[hId][LockStatus] = 1;
			format(string, sizeof(string), "The door locks (( %s ))", GetNameEx(playerid));
		}
		case 1:{
			Houses[hId][LockStatus] = 0;
			format(string, sizeof(string), "The door unlocks (( %s ))", GetNameEx(playerid));
		}
	}

	NearByMessage(playerid, NICESKY, string);
	return 1;
}

command(remotechangeadminlevel, playerid, params[])
{
	new playername[128], level, string[256];

	if(Player[playerid][AdminLevel] < 7)
		return 1;

	if(sscanf(params, "s[128]d", playername, level))
		return SendClientMessage(playerid, GREY, "SYNTAX: /remotechangeadminlevel [playername] [level]");

	if(level < 0)
		return SendClientMessage(playerid, WHITE, "You can't set a player to a negative admin level!");


	if(!IsPlayerRegistered(playername))
		return SendClientMessage(playerid, WHITE, "That player doesn't exist.");

	if(level >= GetRemoteAdminLevel(playername))
		return SendClientMessage(playerid, WHITE, "This command is only to be used for demotions!");

	else
	{
		mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE playeraccounts SET AdminLevel = '%d', AdminDuty = '0' WHERE NormalName = '%e'", level, playername);
		mysql_tquery(MYSQL_MAIN, string, "OnQueryFinish", "dddss", THREAD_REMOTE_CHANGE_ADMINLEVEL, playerid, level, playername, "");
	}
	return 1;
}

CMD:lastcar(playerid, params[])
{

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new seatid;
	if(sscanf(params, "D(0)", seatid))
		return SendClientMessage(playerid, GREY, "SYNTAX: /lastcar [seatid]");

	if(seatid < 0 || seatid > GetMaxVehicleSeats(Player[playerid][LastCarID]))
		PutPlayerInVehicle(playerid, Player[playerid][LastCarID], 0);

	PutPlayerInVehicle(playerid, Player[playerid][LastCarID], seatid);

	return SendClientMessage(playerid, -1, "You have been put in the last vehicle you were in!");
}

CMD:getlastcar(playerid)
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new Float:x, Float:y, Float:z, Float:a, vehicleid = Player[playerid][LastCarID];

	if(IsVehicleOccupied(vehicleid))
		return SendClientMessage(playerid, -1, "That vehicle is occupied.");

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	SetVehiclePos(vehicleid, x, y, z);
	SetVehicleZAngle(vehicleid, a);

	SendClientMessage(playerid, -1, "You have teleported your last car to you.");
	return 1;
}

stock IsVehicleOccupied(vehicleid)
{
	foreach(Player, i)
	{
		if(!IsPlayerInVehicle(i, vehicleid))
			continue;

		return 1;
	}
	return 0;
}

CMD:setsupplyprice(playerid, params[])
{
	if(Player[playerid][Business] == 0)
		return SendClientMessage(playerid, -1, "You don't have a business.");

	if(Player[playerid][InBusiness] == 0)
		return SendClientMessage(playerid, -1, "You are not in a business.");

	if(Player[playerid][Business] != Player[playerid][InBusiness])
		return SendClientMessage(playerid, -1, "You must be in your own business to use this.");

	new price;
	if(sscanf(params, "d", price))
	    return SendClientMessage(playerid, GREY, "SYNTAX: /setsupplyprice [price]");

	if(price < 8)
	    return SendClientMessage(playerid, WHITE, "You must set the price to $8 or higher!");

	new string[128];
	Businesses[Player[playerid][Business]][bSupplyPrice] = price;
	format(string, sizeof(string), "You have set the delivery supplies price to %s.", PrettyMoney(price));
	SendClientMessage(playerid, WHITE, string);
	SaveBusiness(Player[playerid][Business]);
	return 1;
}

CMD:setmaxsupplies(playerid, params[])
{
	if(Player[playerid][Business] == 0)
		return SendClientMessage(playerid, -1, "You don't have a business.");

	if(Player[playerid][InBusiness] == 0)
		return SendClientMessage(playerid, -1, "You are not in your business.");

	if(Player[playerid][Business] != Player[playerid][InBusiness])
		return SendClientMessage(playerid, -1, "You must be in your own business to use this.");

	new amount;
	if(sscanf(params, "d", amount))
	    return SendClientMessage(playerid, GREY, "SYNTAX: /setmaxsupplies [amount]");

	if(amount < 0)
	    return SendClientMessage(playerid, WHITE, "You cannot set it below 0! Set to 0 if you want no limit.");

	new string[128];
	Businesses[Player[playerid][Business]][bMaxSupplies] = amount;
	format(string, sizeof(string), "You have set the max supplies to %s.", IntToFormattedStr(amount));
	SendClientMessage(playerid, WHITE, string);
	SaveBusiness(Player[playerid][Business]);
	return 1;
}

stock BusinessTakeDeliveries(type)
{
	if(type == 12) return 1;
	if(type == 1) return 1;
	if(type == 2) return 1;
	if(type == 3) return 1;
	if(type == 5) return 1;
	if(type == 15) return 1;
	if(type == 16) return 1;
	if(type == 19) return 1;
	return 0;
}

command(sellsupplies, playerid, params[])
{
	if(Jobs[Player[playerid][Job]][JobType] != JOB_DELIVERER && Jobs[Player[playerid][Job2]][JobType] != JOB_DELIVERER)
		return SendClientMessage(playerid, WHITE, "You're not a deliverer!");

	if(Player[playerid][SupplyT] < 1)
		return SendClientMessage(playerid, WHITE, "You don't have any supplies to sell!");

	if(Player[playerid][CanDeliver] == 0)
		return SendClientMessage(playerid, WHITE, "Please wait your job reload time.");

	if(!IsPlayerInRangeOfPoint(playerid, 1.5, Businesses[Player[playerid][InBusiness]][bInteractX], Businesses[Player[playerid][InBusiness]][bInteractY], Businesses[Player[playerid][InBusiness]][bInteractZ]) && Player[playerid][InBusiness] != 0)
		return SendClientMessage(playerid, GREY, "You must stand near the interaction point to do this.");

	// if(Businesses[Player[playerid][InBusiness]][bType] != 12 && Businesses[Player[playerid][InBusiness]][bType] != 1 && Businesses[Player[playerid][InBusiness]][bType] != 2 && Businesses[Player[playerid][InBusiness]][bType] != 3 && Businesses[Player[playerid][InBusiness]][bType] != 5 && Businesses[Player[playerid][InBusiness]][bType] != 15 && Businesses[Player[playerid][InBusiness]][bType] != 16 && Businesses[Player[playerid][InBusiness]][bType] != 19)
	if(BusinessTakeDeliveries(Businesses[Player[playerid][InBusiness]][bType]) == 0)
		return SendClientMessage(playerid, WHITE, "This business doesn't buy supplies from deliverers!");

	if(Businesses[Player[playerid][InBusiness]][bSupplyStatus] == 1)
		return SendClientMessage(playerid, WHITE, "The business you're trying to sell supplies to isn't accepting deliveries!");

	if(Player[playerid][SupplyT] != Businesses[Player[playerid][InBusiness]][bType] && Player[playerid][SupplyT2] != Businesses[Player[playerid][InBusiness]][bType])
		return SendClientMessage(playerid, WHITE, "You're not in the business you selected to sell supplies to!");

	if(IsItemInStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, Player[playerid][Supplies] * Businesses[Player[playerid][InBusiness]][bSupplyPrice]) < (Player[playerid][Supplies] * Businesses[Player[playerid][InBusiness]][bSupplyPrice]))
		return SendClientMessage(playerid, WHITE, "The business you're trying to sell supplies to doesn't have enough money to pay you!");

	if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1000 && Businesses[Player[playerid][InBusiness]][bType] == 16)
		return SendClientMessage(playerid, WHITE, "This business is already fully stocked.");

	if(Businesses[Player[playerid][InBusiness]][bSupplies] + Player[playerid][Supplies] > Businesses[Player[playerid][InBusiness]][bMaxSupplies] && Businesses[Player[playerid][InBusiness]][bMaxSupplies] != 0)
		return SendClientMessage(playerid, WHITE, "This business no longer accepts deliveries.");

	if(Businesses[Player[playerid][InBusiness]][BusinessTrashAmount] >= 2000)
		return SendClientMessage(playerid, WHITE, "This business is unable to accept supplies until its garbage is picked up.");

	new string[128];
	new money = Player[playerid][Supplies] * Businesses[Player[playerid][InBusiness]][bSupplyPrice];
	
	if(strcmp(params, "confirm", true))
	{
		format(string, sizeof(string), "Are you sure you want to sell these supplies here for %s. (%s / supply)", PrettyMoney(money),  PrettyMoney(Businesses[Player[playerid][InBusiness]][bSupplyPrice]));
		return ShowPlayerDialog(playerid, DELIVER_SUPPLIES, DIALOG_STYLE_MSGBOX, "Are you sure?", string, "Yes", "No");
	}	
	
	format(string, sizeof(string), "[BUSINESS] %s sold %d supplies to Business %d for $%d", GetName(playerid), Player[playerid][Supplies], Player[playerid][InBusiness], money);
	StatLog(string);
//	Businesses[Player[playerid][InBusiness]][bVault] -= Player[playerid][Supplies] * Businesses[Player[playerid][InBusiness]][bSupplyPrice];
	RemoveFromStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, (Player[playerid][Supplies] * Businesses[Player[playerid][InBusiness]][bSupplyPrice]));
	Player[playerid][Money] += money;
	Businesses[Player[playerid][InBusiness]][bSupplies] += Player[playerid][Supplies];
	format(string, sizeof(string), "You have earned %s for selling %d supplies.", PrettyMoney(money), Player[playerid][Supplies]);
	SendClientMessage(playerid, WHITE, string);
	Player[playerid][SupplyT] = 0;
	Player[playerid][SupplyT2] = 0;
	Player[playerid][Supplies] = 0;
	Player[playerid][Deliveries]++;

	if(Player[playerid][Deliveries] % 50 == 0 && Player[playerid][Deliveries] < 501)
	{
		new level[128];
		format(level, sizeof(level), "You have levelled up in Deliverer! You are now level %d.", Player[playerid][Deliveries] / 50);
		SendClientMessage(playerid, YELLOW, "======================================================================================");
		SendClientMessage(playerid, YELLOW, level);
		SendClientMessage(playerid, YELLOW, "======================================================================================");
		JobLog(playerid, "Deliverer", Player[playerid][Deliveries] / 50, (Player[playerid][Deliveries] - 1) / 50);
	}
	SaveBusiness(Player[playerid][InBusiness]);
	return 1;
}

CMD:trash(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new id;
	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /trash [id]");

	if(!IsPlayerConnected(id))
		return SendClientMessage(playerid, -1, "That player is not connected.");

	if(Player[id][ActiveReport] < 1)
		return SendClientMessage(playerid, WHITE, "There are no active reports from that player.");

	new string[255];

	Player[id][ActiveReport] = 0;

	format(string, sizeof(string), "REPORT TRASHED: %s", Player[id][ReportText]);
	SendClientMessage(playerid, RED, string);

	format(string, sizeof(string), "REPORTS: %s has trashed %s's report.", Player[playerid][AdminName], GetName(id));
	SendToAdmins(ADMINORANGE, string, 1);


	if(GetActiveReports() == 0 && ReportStatus == 1)
	{
		ReportStatus = 0;
		SendClientMessageToAll(LIGHTRED, "The volume of reports has been successfully addressed.");
		SendClientMessageToAll(LIGHTRED, "You may now use /(re)port for smaller issues / requests.");
	}

	format(string, sizeof(string), "%s has trashed %s's report: %s", Player[playerid][AdminName], GetName(id), Player[id][ReportText]);
	AdminActionsLog(string);

	return 1;
}

CMD:endlottery(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 5)
		return 1;

	return raffleWinner();
}

CMD:disguise(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 5)
		return 1;
	return ShowPlayerDialog(playerid, 3435, DIALOG_STYLE_LIST, "Admin Undercover", "LSPD Uniform\nCustom Skin\nCustom Name\nRandom skin", "Proceed", "Cancel");
}

CMD:dropweapon(playerid, params[])
{
	if(Player[playerid][GunTazer] == 1)
		return SendClientMessage(playerid, -1, "Put your tazer away first.");
		
	new string[128], weapon = GetPlayerWeapon(playerid);
	if(weapon == 0)
		return 1;

	AdjustWeapon(playerid, weapon, 0);
	format(string, sizeof(string), "%s has dropped their %s.", GetNameEx(playerid), GetWeaponNameEx(weapon));
	return NearByMessage(playerid, NICESKY, string);
}

CMD:listjobs(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new string[128];

	SendClientMessage(playerid, -1, "JOBS:");
	SendClientMessage(playerid, WHITE, "------------------------------------------------------------");
	for(new i = 1; i < MAX_JOBS; i++){
		if(isnull(Jobs[i][JobName]))
			break;
		format(string, sizeof(string), "%d - %s", i, Jobs[i][JobName]);
		SendClientMessage(playerid, -1, string);
	}
	return SendClientMessage(playerid, WHITE, "------------------------------------------------------------");
}

CMD:giveweapon(playerid, params[])
{
	if(Player[playerid][Tied] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] == 1)
		return SendClientMessage(playerid, -1, "You can't do that right now, you're incapacitated!");

	new id;
	sscanf(params, "d", id);
	if(id < MAX_PLAYERS)
	{
	    if(sscanf(params, "u", id))
			return SendClientMessage(playerid, GREY, "SYNTAX: /giveweapon [id]");
		
		if(!IsPlayerConnectedEx(id))
			return SendClientMessage(playerid, -1, "That player is not connected or logged in.");
			
		if(Player[id][Mask] == 1)
	    	id = -1;
	}
	else
	    id = CheckIfMasked(id);
 	if(id == -1)
 		return SendClientMessage(playerid, -1, "You're too far away or in a vehicle.");
 
	if(id == playerid)
		return SendClientMessage(playerid, -1, "You cannot give yourself a gun.");

	if(GetPVarInt(id, "GiveWeapon_Timeout") > gettime())
		return SendClientMessage(playerid, -1, "Wait until your current offer to this person has ended, before making another offer.");

	if(!IsPlayerConnectedEx(id))
		return 1;

	if(Player[id][PlayingHours] < 2)
		return SendClientMessage(playerid, -1, "You cannot sell weapons to someone who has less than 2 playing hours.");

	if(GetDistanceBetweenPlayers(id, playerid) > 6 || IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, WHITE, "You're too far away or in a vehicle.");

	if(Player[playerid][GunTazer] == 1)
		return SendClientMessage(playerid, -1, "Put your tazer away first.");
		
	new string[128], weapon = GetPlayerWeapon(playerid);

	if(weapon == 46)
		return SendClientMessage(playerid, WHITE, "You can't trade that!");

	if(weapon == 0)
		return 1;

	SetPVarInt(id, "GiveWeapon_PlayerID", playerid);
	SetPVarInt(id, "GiveWeapon_Timeout", gettime() + 15);
	SetPVarInt(id, "GiveWeapon_WeaponID", weapon);

	format(string, sizeof(string), "%s has offered you a %s. ((type /accept weapon to receive the weapon.))", GetNameEx(playerid), GetWeaponNameEx(weapon));
	SendClientMessage(id, NICESKY, string);

	format(string, sizeof(string), "You have offered %s a %s.", GetNameEx(id), GetWeaponNameEx(weapon));
	return SendClientMessage(playerid, NICESKY, string);
}

CMD:hradio(playerid, params[])
{
	new hId = Player[playerid][InHouse];

	if(!PlayerHasHouseKey(playerid, hId) && hId != 0)
		return SendClientMessage(playerid, -1, "You are not in your house!");

	if(isnull(params))
	{
		SendClientMessage(playerid, -1, "SYNTAX: /hradio [option]");
		SendClientMessage(playerid, -1, "Options: toggle, station, tune");
		return 1;
	}

	if(Houses[hId][RadioInstalled] == 0)
		return SendClientMessage(playerid, WHITE, "This house doesn't have a radio installed in it!");

	new str[128], string[255], end[255];

	if(!strcmp(params, "toggle", true))
	{
		if(Houses[hId][Radio] == 0)
		{
			format(str, sizeof(str), "%s has turned on their house radio", GetNameEx(playerid));
			Houses[hId][Radio] = 1;
		}
		else
		{
			format(str, sizeof(str), "%s has turned off their house radio", GetNameEx(playerid));
			foreach(Player, i)
			{
				if(Player[i][InHouse] == hId)
					StopAudioStreamForPlayer(i);
			}
			Houses[hId][Radio] = 0;
		}
		NearByMessage(playerid, NICESKY, str);
	}
	else if(!strcmp(params, "station", true))
	{
		if(Houses[hId][Radio] == 0)
			return SendClientMessage(playerid, -1, "The houses radio must be on!");

		for(new i; i < MAX_RADIO_STATIONS; i++)
		{
			if(RadioSettings[i][Available] > 0)
			{
				format(string, sizeof(string), "%s\n", RadioSettings[i][StationName]);
				strcat(end, string);
			}
		}
		ShowPlayerDialog(playerid, H_RADIO_STATIONS, DIALOG_STYLE_LIST, "House Radio", end, "Play", "Exit");
	}
	else if(!strcmp(params, "tune", true))
	{
		if(Houses[hId][Radio] == 0)
			return SendClientMessage(playerid, -1, "The houses radio must be on!");

		if(Player[playerid][VipRank] < 1)
			return SendClientMessage(playerid, -1, "Tuning your house radio is a VIP perk!");
		ShowPlayerDialog(playerid, H_RADIO_TUNE, DIALOG_STYLE_INPUT, "House Radio Station", "Enter the URL for the radio stream.", "Select", "Close");
	}
	else
		return SendClientMessage(playerid, -1, "Invalid option");
	return 1;
}

CMD:bradio(playerid, params[])
{
	new bId = Player[playerid][InBusiness];

	if(bId == 0)
		return SendClientMessage(playerid, -1, "You must be inside a business.");

	if(Businesses[bId][bLinkedGroup] > 0 && Player[playerid][Business] != bId)
	{
		if(Player[playerid][Group] != Businesses[bId][bLinkedGroup])
			return SendClientMessage(playerid, -1, "You are not a part of this business.");
	}
	else if(bId == Gangs[Player[playerid][Gang]][HQLinkID])
	{
		if(!DoesPlayerHavePerms(playerid, PERM_GRADIO))
			return SendClientMessage(playerid, RED, "Permission denied.");
	}
	else
	{
		if(!PlayerHasBusinessKey(playerid, bId))
			return SendClientMessage(playerid, -1, "You are not in your business!");
	}

	if(isnull(params))
	{
		SendClientMessage(playerid, -1, "SYNTAX: /bradio [option]");
		SendClientMessage(playerid, -1, "Options: toggle, station, tune");
		return 1;
	}

	if(Businesses[bId][RadioInstalled] == 0)
		return SendClientMessage(playerid, WHITE, "This business doesn't have a radio installed in it!");

	new str[128], string[255], end[255];

	if(!strcmp(params, "toggle", true))
	{
		if(Businesses[bId][Radio] == 0)
		{
			format(str, sizeof(str), "%s has turned on their business radio", GetNameEx(playerid));
			Businesses[bId][Radio] = 1;
		}
		else
		{
			format(str, sizeof(str), "%s has turned off their business radio", GetNameEx(playerid));
			foreach(Player, i)
			{
				if(Player[i][InBusiness] == bId)
					StopAudioStreamForPlayer(i);
			}
			Businesses[bId][Radio] = 0;
		}
		NearByMessage(playerid, NICESKY, str);
	}
	else if(!strcmp(params, "station", true))
	{
		if(Businesses[bId][Radio] == 0)
			return SendClientMessage(playerid, -1, "The businesses radio must be on!");

		for(new i; i < MAX_RADIO_STATIONS; i++)
		{
			if(RadioSettings[i][Available] > 0)
			{
				format(string, sizeof(string), "%s\n", RadioSettings[i][StationName]);
				strcat(end, string);
			}
		}
		ShowPlayerDialog(playerid, B_RADIO_STATIONS, DIALOG_STYLE_LIST, "Business Radio", end, "Play", "Exit");
	}
	else if(!strcmp(params, "tune", true))
	{
		if(Businesses[bId][Radio] == 0)
			return SendClientMessage(playerid, -1, "The businesses radio must be on!");

		if(Player[playerid][VipRank] < 1)
			return SendClientMessage(playerid, -1, "Tuning your business radio is a VIP perk!");
			
		ShowPlayerDialog(playerid, B_RADIO_TUNE, DIALOG_STYLE_INPUT, "Business Radio Station", "Enter the URL for the radio stream.", "Select", "Close");
	}
	else
		return SendClientMessage(playerid, -1, "Invalid option");
	return 1;
}

CMD:oocuncuff(playerid, params[])
{
	new id, string[128];

	if(Groups[Player[playerid][Group]][CommandTypes] != 1)
		return 1;

	sscanf(params, "d", id);
	if(id < MAX_PLAYERS)
	{
		if(sscanf(params, "u", id))
			return SendClientMessage(playerid, GREY, "SYNTAX: /oocuncuff [playerid]");

		if(!IsPlayerConnectedEx(id))
			return SendClientMessage(playerid, -1, "That player is not connected or logged in.");
			
		if(Player[id][Mask] == 1)
	    	id = -1;
	}
	else
	    id = CheckIfMasked(id);
 	if(id == -1)
 		return SendClientMessage(playerid, -1, "That player is too far away!");
 
	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, -1, "That player isn't connected!");

	if(GetDistanceBetweenPlayers(playerid, id) > 5)
		return SendClientMessage(playerid, -1, "That player is too far away!");

	if(Player[id][Cuffed] == 0)
		return SendClientMessage(playerid, -1, "That player isn't cuffed!");

	if(Player[id][Cuffed] == 2)
		return SendClientMessage(playerid, -1, "That player is already OOCly uncuffed.");

	if(playerid == id)
		return SendClientMessage(playerid, -1, "You can't OOCly uncuff yourself!");

	if(Player[playerid][Tied] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] == 1 || Player[playerid][AdminFrozen] == 1)
		return SendClientMessage(playerid, -1, "You can't do that right now, you're incapacitated!");

	Player[id][Cuffed] = 2;
	TogglePlayerControllable(id, true);
	ClearAnimations(id);
	format(string, sizeof(string), "You have OOCly uncuffed %s.", GetName(id));
	SendClientMessage(playerid, -1, string);
	format(string, sizeof(string), "You have been OOCly uncuffed by %s.", GetName(playerid));
	SendClientMessage(id, -1, string);
	return 1;
}

command(cuff, playerid, params[])
{
	new id, string[128];

	sscanf(params, "d", id);
	if(id < MAX_PLAYERS)
	{
	    if(sscanf(params, "u", id))
			return SendClientMessage(playerid, GREY, "SYNTAX: /cuff [playerid]");

		if(!IsPlayerConnectedEx(id))
			return SendClientMessage(playerid, -1, "That player is not connected or logged in.");
			
		if(Player[id][Mask] == 1)
	    	id = -1;
	}
	else
	    id = CheckIfMasked(id);
 	if(id == -1)
 		return SendClientMessage(playerid, -1, "That player is too far away!");
 
	if(Groups[Player[playerid][Group]][CommandTypes] != 1)
		return SendClientMessage(playerid, WHITE, "You're not a law enforcement officer!");

	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, -1, "That player isn't connected!");

	if(GetDistanceBetweenPlayers(playerid, id) > 5)
		return SendClientMessage(playerid, -1, "That player is too far away!");

	if(Player[id][Tied] >= 1 || Player[id][Cuffed] >= 1)
		return SendClientMessage(playerid, -1, "That player is already incapacitated!");

	if(playerid == id)
		return SendClientMessage(playerid, -1, "You can't cuff yourself!");

	if(Player[playerid][Tied] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] == 1 || Player[playerid][AdminFrozen] == 1)
		return SendClientMessage(playerid, -1, "You can't do that right now, you're incapacitated!");

	if(Player[id][AdminDuty] > 0 && Player[playerid][AdminLevel] < 1)
		return SendClientMessage(playerid, WHITE, "You can't cuff an on-duty admin!");

	TogglePlayerControllable(id, false);
	GetPlayerHealth(id, Player[id][AdminFrozenHealth]);
	Player[id][Cuffed] = 1;
	Player[id][Tazed] = 0;
	format(string, sizeof(string), "* %s has cuffed %s.", GetNameEx(playerid), GetNameEx(id));
	NearByMessage(playerid, NICESKY, string);
	format(string, sizeof(string), "You have cuffed %s.", GetNameEx(id));
	SendClientMessage(playerid, WHITE, string);
	format(string, sizeof(string), "You have been cuffed by %s.", GetName(playerid));
	SendClientMessage(id, WHITE, string);
	TogglePlayerControllable(id, false);
	SetPlayerAttachedObject(id, 0, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
	SetPlayerSpecialAction(id, SPECIAL_ACTION_CUFFED);

	foreach(Player, i)
	{
		if(Player[i][BeingDraggedBy] == id)
		{
			format(string, sizeof(string), "* %s has stopped dragging %s.", GetNameEx(id), GetNameEx(i));
			NearByMessage(id, NICESKY, string);
			Player[i][BeingDraggedBy] = -1;
			
	//		stop Player[i][BeingDraggedTimer];
			break;
		}
	}

	return 1;
}

command(uncuff, playerid, params[])
{
	new id, string[128];

	sscanf(params, "d", id);
	if(id < MAX_PLAYERS)
	{
		if(sscanf(params, "u", id))
			return SendClientMessage(playerid, GREY, "SYNTAX: /uncuff [playerid]");

		if(!IsPlayerConnectedEx(id))
			return SendClientMessage(playerid, -1, "That player is not connected or logged in.");
			
		if(Player[id][Mask] == 1)
	    	id = -1;
	}
	else
	    id = CheckIfMasked(id);
	
	if(id == -1)
		return SendClientMessage(playerid, -1, "That player is too far away!");
		
	if(Groups[Player[playerid][Group]][CommandTypes] != 1)
		return SendClientMessage(playerid, WHITE, "You're not a law enforcement officer!");

	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, -1, "That player isn't connected!");

	if(GetDistanceBetweenPlayers(playerid, id) > 5)
		return SendClientMessage(playerid, -1, "That player is too far away!");

	if(Player[id][Cuffed] == 0)
		return SendClientMessage(playerid, -1, "That player isn't cuffed!");

	if(playerid == id)
		return SendClientMessage(playerid, -1, "You can't uncuff yourself!");

	if(Player[playerid][Tied] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] == 1 || Player[playerid][AdminFrozen] == 1)
		return SendClientMessage(playerid, -1, "You can't do that right now, you're incapacitated!");

	Player[id][Cuffed] = 0;
	format(string, sizeof(string), "You have been uncuffed by %s.", GetName(playerid));
	SendClientMessage(id, WHITE, string);
	format(string, sizeof(string), "* %s has uncuffed %s.", GetNameEx(playerid), GetNameEx(id));
	NearByMessage(playerid, NICESKY, string);
	format(string, sizeof(string), "You have uncuffed %s.", GetName(id));
	SendClientMessage(playerid, WHITE, string);
	TogglePlayerControllable(id, true);
	SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
	RemovePlayerAttachedObject(id, 0);
	ClearAnimations(id);

	return 1;
}

command(version, playerid, params[])
{
	new string[128];

	format(string, sizeof(string), "Current version is: %s", VERSION);
	SendClientMessage(playerid, WHITE, string);

	return 1;
}

CMD:setntag(playerid, params[])
{
	new end[512], rstring[50];

	if(Player[playerid][PlayingHours] < 2 )
		format(rstring, sizeof(rstring), "%s\n", OOCRanks[Rank1]);
	else if(Player[playerid][PlayingHours] < 75)
		format(rstring, sizeof(rstring), "%s\n", OOCRanks[Rank2]);
	else if(Player[playerid][PlayingHours] < 250)
		format(rstring, sizeof(rstring), "%s\n", OOCRanks[Rank3]);
	else if(Player[playerid][PlayingHours] < 750)
		format(rstring, sizeof(rstring), "%s\n", OOCRanks[Rank4]);
	else if(Player[playerid][PlayingHours] < 1250)
		format(rstring, sizeof(rstring), "%s\n", OOCRanks[Rank5]);
	else if(Player[playerid][PlayingHours] < 2000)
		format(rstring, sizeof(rstring), "%s\n", OOCRanks[Rank6]);
	else
		format(rstring, sizeof(rstring), "%s\n", OOCRanks[Rank7]);

	strcat(end, rstring);

	if(Player[playerid][VipRank] > 0)
	{
		format(rstring, sizeof(rstring), "VIP\n");
		strcat(end, rstring);
	}

	if(Player[playerid][Developer] == 1)
	{
		format(rstring, sizeof(rstring), "Developer\n");
		strcat(end, rstring);
	}

	if(Player[playerid][Tester] == 1)
	{
		format(rstring, sizeof(rstring), "Tester\n");
		strcat(end, rstring);
	}

	if(Player[playerid][AdminLevel] > 1)
	{
		format(rstring, sizeof(rstring), "Admin\n");
		strcat(end, rstring);
	}

	if(Player[playerid][AdminLevel] == 1)
	{
		format(rstring, sizeof(rstring), "Moderator\n");
		strcat(end, rstring);
	}

	if(Player[playerid][LoyaltyNTag] == 1)
	{
		format(rstring, sizeof(rstring), "The Loyal\n");
		strcat(end, rstring);
	}
	
	ShowPlayerDialog(playerid, NEWBIE_TAGS, DIALOG_STYLE_LIST, "Set Newbie Tag", end, "Set", "Close");
	return 1;
}

CMD:shortcmds(playerid, params[])
{
	if(GetPVarInt(playerid, "ShortCMDS") == 1)
		SetPVarInt(playerid, "ShortCMDS", 0);
	else if(GetPVarInt(playerid, "ShortCMDS") == 0)
		SetPVarInt(playerid, "ShortCMDS", 1);

	SendClientMessage(playerid, -1, (GetPVarInt(playerid, "ShortCMDS") == 1) ? ("Short Commands Disabled") : ("Short Commands Enabled"));
	return 1;
}

CMD:adddev(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 4)
		return 1;

	new id;
	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /adddev [id]");

	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, -1, "That player is not connected.");

	new string[128];

	Player[id][Developer] = (Player[id][Developer]) ? (0) : (1);

	format(string, sizeof(string), (Player[id][Developer]) ? ("%s has been added to the developers.") :("%s has been removed from the developers."), GetName(id));

	return SendClientMessage(playerid, -1, string);
}

CMD:addmapper(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 5)
		return 1;

	new id;
	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /addmapper [id]");

	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, -1, "That player is not connected.");

	new string[128];

	Player[id][Mapper] = (Player[id][Mapper]) ? (0) : (1);

	format(string, sizeof(string), (Player[id][Mapper]) ? ("%s has been added to the mappers.") : ("%s has been removed from the mappers."), GetName(id));

	return SendClientMessage(playerid, -1, string);
}

CMD:housemove(playerid, params[])
{
	if(Businesses[Player[playerid][InBusiness]][bType] != 24)
		return SendClientMessage(playerid, WHITE, "You must be inside the real estate business to purchase a house!");

	if(Player[playerid][VipRank] < 2)
		return SendClientMessage(playerid, WHITE, "You must be Silver VIP or higher to use this command!");

	new slot, houseid;
	if(sscanf(params, "dd", slot, houseid))
		return SendClientMessage(playerid, WHITE, "SYNTAX: /housemove [slot (1 or 2)] [House ID to move to]");

	if(houseid < 1 || houseid > MAX_HOUSES)
		return SendClientMessage(playerid, WHITE, "Invalid house ID.");

	if(strcmp(Houses[houseid][hOwner], "Nobody", true))
		return SendClientMessage(playerid, WHITE, "That house is owned by someone!");

	if(slot != 1 && slot != 2)
		return SendClientMessage(playerid, WHITE, "Valid slots are either 1 or 2.");

	if((slot == 1 && Player[playerid][House] < 1) || (slot == 2 && Player[playerid][House2] < 1))
		return SendClientMessage(playerid, WHITE, "You do not own a house in this slot.");

	new diff;

	if(slot == 1)
		diff = Houses[houseid][HousePrice] - Houses[Player[playerid][House]][HousePrice];
	else diff = Houses[houseid][HousePrice] - Houses[Player[playerid][House2]][HousePrice];

	if(diff < 0)
		diff = 0;

	SetPVarInt(playerid, "HOUSE_MOVE_SLOT", slot);
	SetPVarInt(playerid, "HOUSE_MOVE_HOUSEID", houseid);
	SetPVarInt(playerid, "HOUSE_MOVE_DIFF", diff);

	ShowPlayerDialog(playerid, DIALOG_HOUSE_MOVE_TOKENS, DIALOG_STYLE_INPUT, "House Move - Tokens", "How many VIP tokens do you wish to use towards the $50,000 OOC cost? \n\n1 token = $100", "Confirm", "Cancel");
	return 1;
}

CMD:buyhouse(playerid, params[])
{
	if(Businesses[Player[playerid][InBusiness]][bType] != 24)
		return SendClientMessage(playerid, WHITE, "You must be inside the real estate business to purchase a house!");

	if(Player[playerid][House] != 0 && Player[playerid][House2] != 0)
		return SendClientMessage(playerid, -1, "You cannot own any more houses! Use /abandonhouse to abandon your house.");

	new houseid;
	if(sscanf(params, "d", houseid))
		return SendClientMessage(playerid, WHITE, "SYNTAX: /buyhouse [house ID]");

	if(!Player[playerid][Identity] && strlen(Player[playerid][FakeIDString]) < 3)
		return SendClientMessage(playerid, WHITE, "You must have a valid identification to purchase a house through our agency.");

	if(strcmp(Houses[houseid][hOwner], "Nobody", true))
		return SendClientMessage(playerid, WHITE, "This property is not for sale.");

	new price;
	switch(Player[playerid][VipRank])
	{
		case 0, 1: price = Houses[houseid][HousePrice];
		case 2: price = (Houses[houseid][HousePrice] * 9) / 10;
		default: price = (Houses[houseid][HousePrice] * 8) / 10;
	}

	new string[255];
	if(price > Player[playerid][BankMoney])
	{
		format(string, sizeof(string), "You can't afford this house!  You need {AA3333}%s{FFFFFF} more dollars to buy this house!", PrettyMoney(price - Player[playerid][BankMoney]));
		return SendClientMessage(playerid, WHITE, string);
	}

	SetPVarInt(playerid, "BUY_HOUSE_PRICE", price);
	SetPVarInt(playerid, "BUY_HOUSE_HOUSEID", houseid);
	format(string, sizeof(string), "This house will cost you %s. Are you sure you wish to purchase it?\nPlease sign your name on the contract below if you wish to purchase this house.", PrettyMoney(price));
	ShowPlayerDialog(playerid, DIALOG_BUY_HOUSE_CONFIRM, DIALOG_STYLE_INPUT, "House Purchase - Signing the Papers", string, "Sign", "Cancel");
	return 1;
}

CMD:swaphouse(playerid, params[])
{
	if(Businesses[Player[playerid][InBusiness]][bType] != 24)
		return SendClientMessage(playerid, WHITE, "You must be inside the real estate business to swap houses with another player!");

	if(Player[playerid][House] == 0 && Player[playerid][House2] == 0)
		return SendClientMessage(playerid, WHITE, "You do not own a house.");

	new pid, slot;
	if(sscanf(params, "ud", pid, slot))
		return SendClientMessage(playerid, WHITE, "SYNTAX: /swaphouse [playerid] [slot to offer (1 or 2)]");

	if(pid == playerid)
		return SendClientMessage(playerid, WHITE, "You can't swap houses with yourself.");

	if(!IsPlayerConnected(pid))
		return SendClientMessage(playerid, WHITE, "That player isn't connected.");

	if((slot == 1 && Player[playerid][House] == 0) || (slot == 2 && Player[playerid][House2] == 0))
		return SendClientMessage(playerid, WHITE, "You don't have a house in that slot.");

	if(GetDistanceBetweenPlayers(pid, playerid) > 6)
		return SendClientMessage(playerid, WHITE, "You're too far away from that player.");

	if(Player[pid][House] == 0 && Player[pid][House2] == 0)
		return SendClientMessage(playerid, WHITE, "This player does not own a house. Use /sellhouse instead.");

	new string[255], fee, diff, houseid;
	if(GetPVarInt(pid, "HOUSE_SWAP_HOUSE") == 0)
	{
		houseid = (slot == 1) ? (Player[playerid][House]) : (Player[playerid][House2]);
		fee = (Houses[houseid][HousePrice] * 5) / 100;
		SetPVarInt(playerid, "HOUSE_SWAP_HOUSE", houseid);
		SetPVarInt(playerid, "HOUSE_SWAP_PLAYER", pid);
		format(string, sizeof(string), "%s is offering to swap house %d for a house you own. This would cost you a 5%% fee of %s. Use \'/swaphouse\' to offer a house ID back.", GetName(playerid), houseid, PrettyMoney(fee));
		SendClientMessage(pid, GREEN, string);
		format(string, sizeof(string), "You have offered to swap house %d with %s for a house they own. This would cost them a 5%% fee of %s.", houseid, GetName(pid), PrettyMoney(fee));
		SendClientMessage(playerid, WHITE, string);
	}
	else
	{
		new houseid2 = GetPVarInt(pid, "HOUSE_SWAP_HOUSE");
		houseid = (slot == 1) ? (Player[playerid][House]) : (Player[playerid][House2]);
		fee = (Houses[houseid][HousePrice] * 5) / 100;

		SetPVarInt(playerid, "HOUSE_SWAP_HOUSE", houseid);
		SetPVarInt(playerid, "HOUSE_SWAP_PLAYER", pid);

		if(Houses[houseid][HousePrice] > Houses[houseid2][HousePrice])
		{
			diff = Houses[houseid][HousePrice] - Houses[houseid2][HousePrice];
			SetPVarInt(pid, "HOUSE_SWAP_DIFF", diff);
			format(string, sizeof(string), "Please review the following and hit confirm if it is ALL CORRECT:\n\n%s will recieve house id %d, pay a 5%% fee of %s, and pay the difference of %s.\n%s will recieve house %d and pay a 5%% fee of %s.",
			GetName(pid), houseid, PrettyMoney(fee), PrettyMoney(diff), GetName(playerid), houseid2, PrettyMoney((Houses[houseid2][HousePrice] * 5) / 100));

		}
		else if(Houses[houseid][HousePrice] < Houses[houseid2][HousePrice])
		{
			diff = Houses[houseid2][HousePrice] - Houses[houseid][HousePrice];
			SetPVarInt(playerid, "HOUSE_SWAP_DIFF", diff);
			format(string, sizeof(string), "Please review the following and hit confirm if it is ALL CORRECT:\n\n%s will recieve house id %d, pay a 5%% fee of %s, and pay the difference of %s.\n%s will recieve house %d and pay a 5%% fee of %s.",
			GetName(playerid), houseid2, PrettyMoney((Houses[houseid2][HousePrice] * 5) / 100), PrettyMoney(diff), GetName(pid), houseid, PrettyMoney(fee));
		}
		else
		{
			format(string, sizeof(string), "Please review the following and hit confirm if it is ALL CORRECT:\n\n%s will recieve house %d and pay a 5% fee of %s.\n%s will recieve house %d and pay a 5%% fee of %s.",
			GetName(pid), houseid, PrettyMoney(fee), GetName(playerid), houseid2, PrettyMoney((Houses[houseid2][HousePrice] * 5) / 100));
		}
		ShowPlayerDialog(playerid, DIALOG_HOUSE_SWAP_CONFIRM, DIALOG_STYLE_MSGBOX, "House Swap - Confirm", string, "CONFIRM", "Cancel");
		ShowPlayerDialog(pid, DIALOG_HOUSE_SWAP_CONFIRM, DIALOG_STYLE_MSGBOX, "House Swap - Confirm", string, "CONFIRM", "Cancel");

		SetPVarInt(playerid, "HOUSE_SWAP_HOUSE", houseid);
		format(string, sizeof(string), "%s if offering to swap house %d for house %d.. This would cost you a 5%% fee of %s.", GetName(playerid), houseid, GetPVarInt(pid, "HOUSE_SWAP_HOUSE"), PrettyMoney(fee));
		SendClientMessage(pid, GREEN, string);
		format(string, sizeof(string), "You have offered to swap house %d with %s for a house they own. This would cost them a 5%% fee of %s.", houseid, GetName(pid), PrettyMoney(fee));
		SendClientMessage(playerid, WHITE, string);
	}
	return 1;
}

CMD:sellhouse(playerid, params[])
{
	if(Businesses[Player[playerid][InBusiness]][bType] != 24)
		return SendClientMessage(playerid, WHITE, "You must be inside the real estate business to sell your house to another player!");

	if(Player[playerid][House] < 1 && Player[playerid][House2] < 1)
		return SendClientMessage(playerid, -1, "You do not own a house!");

	new house, id, price;
	if(sscanf(params, "dud", house, id, price))
		return SendClientMessage(playerid, GREY, "SYNTAX: /sellhouse [house number (1-2)] [id] [price]");

	if(GetDistanceBetweenPlayers(id, playerid) > 6)
		return SendClientMessage(playerid, WHITE, "You're too far away from that player.");

	if(Player[id][House] > 0 && Player[id][House2] > 0)
		return SendClientMessage(playerid, -1, "That player already owns a house!");
		
	if(Player[playerid][Mask] == 1)
		return SendClientMessage(playerid, -1, "Remove your mask before using this command.");
		
	new fee = (price * 5) / 100;
	switch(house)
	{
		case 1:
		{
			if(price < Houses[Player[playerid][House]][HousePrice])
				return SendClientMessage(playerid, -1, "You cannot sell a house for cheaper than its worth!");

			if(price > 5 * Houses[Player[playerid][House]][HousePrice] / 4)
				return SendClientMessage(playerid, -1, "You cannot sell a house for more than 125 percent of its worth!");

			if(Player[id][BankMoney] < price + fee)
				return SendClientMessage(playerid, -1, "That player does not have that much money!");

			if(Player[id][PlayingHours] < 20)
				return SendClientMessage(playerid, -1, "You cannot sell a house to someone who has less than 20 playing hours.");

			new string[255];

			SetPVarInt(id, "SellHouse_PlayerID", playerid);
			SetPVarInt(id, "SellHouse_Price", price);
			SetPVarInt(id, "SellHouse_Timeout", gettime() + 15);
			SetPVarInt(id, "SellHouse_HouseID", Player[playerid][House]);

			format(string, sizeof(string), "%s is trying to sell you their house ((ID: %d))", GetNameEx(playerid), Player[playerid][House]);
			SendClientMessage(id, NICESKY, string);
			format(string, sizeof(string), "This would cost you %s plus a 5 percent fee of %s for a total of %s.", PrettyMoney(price), PrettyMoney(fee), PrettyMoney(fee + price));
			SendClientMessage(id, NICESKY, string);
			SendClientMessage(id, NICESKY, "Type  /accept [house/house2] to buy the house.");

			format(string, sizeof(string), "You have offered %s your house for $%s.", GetNameEx(id), IntToFormattedStr(price));

			return SendClientMessage(playerid, NICESKY, string);
		}
		case 2:
		{
			if(price < Houses[Player[playerid][House2]][HousePrice])
				return SendClientMessage(playerid, -1, "You cannot sell a house for cheaper than its worth!");

			if(price > 5 * Houses[Player[playerid][House2]][HousePrice] / 4)
				return SendClientMessage(playerid, -1, "You cannot sell a house for more than 125 percent of its worth!");

			if(Player[id][BankMoney] < price + fee)
				return SendClientMessage(playerid, -1, "That player does not have that much money!");

			if(Player[id][PlayingHours] < 20)
				return SendClientMessage(playerid, -1, "You cannot sell a house to someone who has less than 20 playing hours.");

			new string[255];

			SetPVarInt(id, "SellHouse_PlayerID", playerid);
			SetPVarInt(id, "SellHouse_Price", price);
			SetPVarInt(id, "SellHouse_Timeout", gettime() + 15);
			SetPVarInt(id, "SellHouse_HouseID", Player[playerid][House2]);

			format(string, sizeof(string), "%s is trying to sell you their house ((ID: %d))", GetNameEx(playerid), Player[playerid][House2]);
			SendClientMessage(id, NICESKY, string);
			format(string, sizeof(string), "This would cost you %s plus a 5%% fee of %s for a total of %s.", PrettyMoney(price), PrettyMoney(fee), PrettyMoney(fee + price));
			SendClientMessage(id, NICESKY, string);
			SendClientMessage(id, NICESKY, "Type  /accept [house/house2] to buy the house.");

			format(string, sizeof(string), "You have offered %s your house for $%s.", GetNameEx(id), IntToFormattedStr(price));

			return SendClientMessage(playerid, NICESKY, string);
		}
		default: return SendClientMessage(playerid, -1, "The house number must be 1 or 2. (This is not the house ID) ");
	}
	return 1;
}

CMD:sellbackhouse(playerid, params[])
{
	if(Businesses[Player[playerid][InBusiness]][bType] != 24)
		return SendClientMessage(playerid, WHITE, "You must be inside the real estate business to sell your house!");

	if(Player[playerid][House] < 1 && Player[playerid][House2] < 1)
		return SendClientMessage(playerid, -1, "You do not own a house!");

	if(Player[playerid][Mask] == 1)
		return SendClientMessage(playerid, -1, "Remove your mask before using this command.");
		
	new house, payment, string[128], houseid;
	if(sscanf(params, "d", house))
		return SendClientMessage(playerid, GREY, "SYNTAX: /sellbackhouse [house slot (1-2)]");	

	if(house == 1 && Player[playerid][House] > 0)
		houseid = Player[playerid][House];
	else if(house == 2 && Player[playerid][House2] > 0)
		houseid = Player[playerid][House2];
	else
		return SendClientMessage(playerid, -1, "You don't have a house in that slot.");
	
	payment = floatround((Houses[houseid][HousePrice] * 0.35), floatround_round);
	format(string, sizeof(string), "You will receive 35 percent of the base price of house %d: {21DD00}%s", houseid, PrettyMoney(payment));
	SetPVarInt(playerid, "SellBackHouseSlot", house);
	SetPVarInt(playerid, "SellBackHouseID", houseid);
	SetPVarInt(playerid, "SellBackHousePrice", payment);
	ShowPlayerDialog(playerid, DIALOG_SELLBACKHOUSE, DIALOG_STYLE_MSGBOX, "Confirm House Sale", string, "Sell", "Cancel");
	return 1;
}

CMD:viewhouse(playerid, params[])
{
	if(Businesses[Player[playerid][InBusiness]][bType] != 24)
		return SendClientMessage(playerid, WHITE, "You must be inside the real estate business to purchase a house!");

	new houseid;
	if(sscanf(params, "d", houseid))
		return SendClientMessage(playerid, WHITE, "SYNTAX: /viewhouse [house ID]");

	if(!Player[playerid][Identity] && strlen(Player[playerid][FakeIDString]) < 3)
		return SendClientMessage(playerid, WHITE, "You must have a valid identification to view a house through our agency.");
	
	if(houseid < 1 || houseid > MAX_HOUSES)
		return SendClientMessage(playerid, WHITE, "Invalid house ID!");
	
	if(strcmp(Houses[houseid][hOwner], "Nobody", true))
		return SendClientMessage(playerid, WHITE, "This property is not for sale.");
		
	SetPlayerCheckpoint(playerid, Houses[houseid][hExteriorX], Houses[houseid][hExteriorY], Houses[houseid][hExteriorZ], 5.0);
	Player[playerid][Checkpoint] = 1;
	SetPVarInt(playerid, "VIEWING_HOUSE", houseid);
	SendClientMessage(playerid, WHITE, "You are now able to view the house. A checkpoint has been set at it's entrance.");
	return 1;
}

timer ViewingHouseEject[1000 * 60 * 5](playerid)
{
	new houseid = GetPVarInt(playerid, "VIEWING_HOUSE");
	if(houseid != 0)
	{
		SetPlayerPos(playerid, Houses[houseid][hExteriorX], Houses[houseid][hExteriorY], Houses[houseid][hExteriorZ]);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
		SendClientMessage(playerid, WHITE, "Your time to view the house has run out!");
	}
}

CMD:removecontract(playerid, params[])
{
	new string[128], id;

	if(Groups[Player[playerid][Group]][CommandTypes] != 2)
		return 1;

	if(Player[playerid][GroupRank] < 6)
		return SendClientMessage(playerid, -1, "Your group rank has to be at least 6 to use this command.");

	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /removecontract [id]");

	if(Player[id][ContractPrice] < 1)
		return SendClientMessage(playerid, -1, "That player does not have a contract out on them.");

	if(Player[playerid][UnderCover] > 0 || Player[playerid][AdminDuty] > 0)
		format(string, sizeof(string), "%s has removed %s's contract '%s' ($%d).", Player[playerid][NormalName], GetName(id), Player[id][Contract], Player[id][ContractPrice]);
	else
		format(string, sizeof(string), "%s has removed %s's contract '%s' ($%d).", GetName(playerid), GetName(id), Player[id][Contract], Player[id][ContractPrice]);
	StatLog(string);

	format(string, sizeof(string), "WARNING: %s has removed the contract from %s for '%s' ($%d)", GetName(playerid), GetName(id), Player[id][Contract], Player[id][ContractPrice]);
	GroupMessage(playerid, ANNOUNCEMENT, string);

	Player[id][ContractPrice] = 0;
	format(Player[id][Contract], 255, "None");
	format(Player[id][Contract2], 255, "None");

	return SendClientMessage(playerid, -1, "The contract has been successfully removed.");
}

CMD:rand(playerid, params[])
{
	new rand, string[128];

	sscanf(params, "D(100)", rand);

	if(rand < 1 || rand > 100)
		return SendClientMessage(playerid, -1, "SYNTAX: /rand [1-100]");

	rand = rand + 1;

	format(string, sizeof(string), "((%s has randomly chosen the number %d of %d))", GetName(playerid), random(rand), rand);
	NearByMessage(playerid, NICESKY, string);
	return 1;
}

CMD:dice(playerid, params[])
{
	//if(Player[playerid][Dice] == 0)
	//	return SendClientMessage(playerid, -1, "You don't own any dice");

	if(isnull(params))
		return SendClientMessage(playerid, GREY, "SYNTAX: /dice <1/2>");

	if(Player[playerid][PrisonID] == 2 && Player[playerid][PrisonDice] < 1)
		return SendClientMessage(playerid, WHITE, "You don't have any dice, buy some from the guard for tickets.");
		
	new str[128];

	if(strval(params) == 1)
	{
		format(str, sizeof(str), "* %s throws a die landing on %d", GetNameEx(playerid), random(6) + 1);
		NearByMessage(playerid, NICESKY, str);
	}
	else if(strval(params) == 2)
	{
		format(str, sizeof(str), "* %s throws a pair of dice with them landing on %d and %d", GetNameEx(playerid), random(6) + 1, random(6) + 1);
		NearByMessage(playerid, NICESKY, str);
	}
	else
		SendClientMessage(playerid, -1, "You must use either 1 or 2 dice");

	return 1;
}

CMD:badge(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 1)
		return SendClientMessage(playerid, -1, "This command is only available for LSPD");

	if(Player[playerid][CopDuty] == 1)
	{
		Player[playerid][CopDuty] = 0;
	}
	else
		Player[playerid][CopDuty] = 1;

	//UpdatePlayerNameColour(playerid);
	SendClientMessage(playerid, -1 ,(Player[playerid][CopDuty] == 1) ? ("You're now on duty") : ("You're now off duty"));
	return 1;
}

CMD:duty(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 1)
		return SendClientMessage(playerid, -1, "You must be LSPD to use this command");

	if(!IsPlayerInRangeOfPoint(playerid, 5, LockerPosX, LockerPosY, LockerPosZ) && !IsPlayerInRangeOfPoint(playerid, 5, LockerPos2X, LockerPos2Y, LockerPos2Z) && !IsPlayerInRangeOfPoint(playerid, 5, LockerPos3X, LockerPos3Y, LockerPos3Z))
		return SendClientMessage(playerid, -1, "You're too far away from the locker");

	if(Player[playerid][CopDuty] == 1)
	{
		Player[playerid][CopDuty] = 0;
		SetPlayerArmour(playerid, 0);
		ResetPlayerWeaponsEx(playerid);
	}
	else
	{
		SetPlayerHealth(playerid, 100.0);
		SetPlayerArmour(playerid, 100.0);
		Player[playerid][LastArmour] = 100;
		Player[playerid][CopDuty] = 1;
		GivePlayerWeaponEx(playerid, WEAPON_DEAGLE);
		GivePlayerWeaponEx(playerid, WEAPON_NITESTICK);
		GivePlayerWeaponEx(playerid, WEAPON_SPRAYCAN);
		GivePlayerWeaponEx(playerid, WEAPON_SHOTGUN);
		GivePlayerWeaponEx(playerid, WEAPON_MP5);
	}
	//UpdatePlayerNameColour(playerid);
	SendClientMessage(playerid, -1 ,(Player[playerid][CopDuty] == 1) ? ("You're now on duty") : ("You're now off duty"));
	return 1;
}

CMD:hparm(playerid, params[])
{
	new id;
	if(isnull(params) || Player[playerid][AdminLevel] < 2)
		id = playerid;
	else if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /hparm ([playerid])");
		
	new str[128], Float:hp, Float:armour;
	GetPlayerHealth(id, hp);
	GetPlayerArmour(id, armour);
	if(id == playerid)
		format(str, sizeof(str), "You have {4DDF66}%.0f{FFFFFF} Health and {4DDF66}%.0f {FFFFFF}Armour", hp, armour);
	else
		format(str, sizeof(str), "%s has {4DDF66}%.0f{FFFFFF} Health and {4DDF66}%.0f {FFFFFF}Armour", GetName(id), hp, armour);
	SendClientMessage(playerid, -1, str);
	return 1;
}


stock InsertWarnIntoHistory(warnerid, pSQL, name[], reason[], pTempban)
{
	new query[384], Cache:cache, sql;
	mysql_format(MYSQL_MAIN, query, sizeof(query), "INSERT INTO WarnHistory (playerSQLID, pName, WarnReason, WarnedBy, TempbanLevel) VALUES ('%d', '%e', '%e', '%e', %d)", pSQL, name, reason, GetName(warnerid), pTempban);
	cache = mysql_query(MYSQL_MAIN, query);
	sql = cache_insert_id();
	cache_delete(cache);

	format(query, sizeof(query), "Warn #%d has been successfully recorded.", sql);
	SendClientMessage(warnerid, GREY, query);
	return 1;
}

stock WarnPlayer(playerid, id, reason[])
{
	new string[128], year, month, day, hour, minute, second;
	gettime(hour, minute, second);
	getdate(year, month, day);

	InsertWarnIntoHistory(playerid, Player[id][pSQL_ID], GetName(id), reason, Player[id][TempbanLevel]);

	if(strcmp(Player[id][Warning1], "None", true) == 0)
	{
		format(Player[id][Warning1], 255, "%s (from %s) (%s)", reason, Player[playerid][AdminName], GetDate());
		format(string, sizeof(string), "You have successfully warned %s for \"%s\". This is their first warning.", Player[id][NormalName], reason);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "[WARN] [%d-%02d-%02d %02d:%02d:%02d] [%s] %s", year, month, day, hour, minute, second, Player[playerid][AdminName], reason);
		SendClientMessage(id, RED, string);
		SendClientMessage(id, RED, "Take a screenshot of this warning to use in your appeals. This is your responsibility.");
		SendClientMessage(id, ADMINORANGE, "This is your first warning. You have two remaining before you are autobanned.");
		format(string, sizeof(string), "%s has warned %s for \"%s\". This is their first warning.", Player[playerid][AdminName], Player[id][NormalName], reason);
		AdminActionsLog(string);
		Player[playerid][AdminActions]++;
	}

	else if(strcmp(Player[id][Warning2], "None", true) == 0)
	{
		format(Player[id][Warning2], 255, "%s (from %s) (%s)", reason, Player[playerid][AdminName], GetDate());
		format(string, sizeof(string), "You have successfully warned %s for \"%s\". This is their second warning.", Player[id][NormalName], reason);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "[WARN] [%d-%02d-%02d %02d:%02d:%02d] [%s] %s", year, month, day, hour, minute, second, Player[playerid][AdminName], reason);
		SendClientMessage(id, RED, string);
		SendClientMessage(id, RED, "Take a screenshot of this warning to use in your appeals. This is your responsibility.");
		SendClientMessage(id, ADMINORANGE, "This is your second warning. You have one remaining before you are autobanned.");
		format(string, sizeof(string), "%s has warned %s for \"%s\". This is their second warning.", Player[playerid][AdminName], Player[id][NormalName], reason);
		AdminActionsLog(string);
		Player[playerid][AdminActions]++;
	}

	else if(strcmp(Player[id][Warning3], "None", true) == 0)
	{
		new IP[21];
		GetPlayerIp(id, IP, sizeof(IP));
		format(Player[id][Warning3], 255, "%s (from %s) (%s)", reason, Player[playerid][AdminName], GetDate());
		format(string, sizeof(string), "You have successfully warned %s for \"%s\". This is their third warning.", Player[id][NormalName], reason);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "[WARN] [%d-%02d-%02d %02d:%02d:%02d] [%s] %s", year, month, day, hour, minute, second, Player[playerid][AdminName], reason);
		SendClientMessage(id, RED, string);
		SendClientMessage(id, RED, "Take a screenshot of this warning to use in your appeals. This is your responsibility.");
		format(string, sizeof(string), "Ban: %s has been banned by %s. Defined reason: Third warning (\"%s\")", Player[id][NormalName], Player[playerid][AdminName], reason);
		SendToAdmins(LIGHTRED, string, 0);
		NearByMessage(id, LIGHTRED, string);
		LogLastBan(GetName(id), IP);

		Player[id][TempbanLevel]++;

		if(Player[id][TempbanLevel] < 3)
		{
			format(string, sizeof(string), "%s | %s | Third warning (\"%s\") (Tempban #%d) | %s", Player[id][NormalName], IP, reason, Player[id][TempbanLevel], Player[playerid][AdminName]);
			BanLog(string);
			format(string, sizeof(string), "%s has been tempbanned by %s. Defined reason: Third warning (\"%s\") (Tempban #%d)", Player[id][NormalName], Player[playerid][AdminName], reason, Player[id][TempbanLevel]);
			AdminActionsLog(string);
			//endClientMessage(id, ADMINORANGE, "You are now going to be tempbanned as this is your third warning.");
			//format(string, sizeof(string), "This is tempban #%d, you will be automatically unbanned after %d days.", Player[id][TempbanLevel], Player[id][TempbanLevel]*3);
			//SendClientMessage(id, ADMINORANGE, string);
			Player[id][Banned] = 3;
			new tmpint = 259200*Player[id][TempbanLevel]; // 259200 is 3 days in seconds
			Player[id][TempbanTime] = gettime() + tmpint;

			format(Player[id][BannedReason], 128, "Third warning (%s) (Tempban #%d)", reason, Player[id][TempbanLevel]);
			format(Player[id][BannedBy], 128, "%s", Player[playerid][AdminName]);
			TempBanMessage(id);
			KickEx(id);
			AdminActionsLog(string);
			Player[playerid][AdminActions]++;
		}
		else
		{
			format(string, sizeof(string), "%s | %s | Third warning (\"%s\") (Tempban #%d) | %s", Player[id][NormalName], IP, reason, Player[id][TempbanLevel], Player[playerid][AdminName]);
			BanLog(string);
			format(string, sizeof(string), "%s has been banned by %s. Defined reason: Third warning (\"%s\") (Tempban #%d)", Player[id][NormalName], Player[playerid][AdminName], reason, Player[id][TempbanLevel]);
			AdminActionsLog(string);
			//SendClientMessage(id, ADMINORANGE, "You are now going to be banned as this is your third tempban.");
			//SendClientMessage(id, ADMINORANGE, "If you wish to appeal your ban, please visit http://www.mt-gaming.com.");
			Player[id][Banned] = 1;
			format(Player[id][BannedReason], 128, "Third warning (%s) (Tempban #%d)", reason, Player[id][TempbanLevel]);
			format(Player[id][BannedBy], 128, "%s", Player[playerid][AdminName]);

			format(Player[id][Warning1], 255, "None");
			format(Player[id][Warning2], 255, "None");
			format(Player[id][Warning3], 255, "None");
			BanMessage(id);
			KickEx(id);
			AdminActionsLog(string);
			Player[playerid][AdminActions]++;
		}
	}

	return 1;
}

command(warn, playerid, params[])
{
	new id, reason[128];

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(sscanf(params, "us[128]", id, reason))
		return SendClientMessage(playerid, GREY, "SYNTAX: /warn [playerid] [reason]");

	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, -1, "That player isn't connected!");

	if(strlen(reason) > 50)
		return SendClientMessage(playerid, -1, "Reasons must be under 50 characters.");

	if(Player[playerid][AdminLevel] < Player[id][AdminLevel])
		return SendClientMessage(playerid, -1, "You can't do that to a higher level administrator.");

	else
		WarnPlayer(playerid, id, reason);

	return 1;
}

command(nmute, playerid, params[])
{
	new id, string[255];

	if(Player[playerid][AdminLevel] < 1)
		return 1;

	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /nmute [playerid]");

	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, WHITE, "That player isn't connected!");

	if(gettime() < Player[id][CanMute]+30)
		return SendClientMessage(playerid, WHITE, "That player was just recently muted!");

	if(Player[id][nMuted] == 1)
	{
		Player[id][nMuted] = 0;
		Player[id][nMutedTime] = 0;
		format(string, sizeof(string), "You have unmuted %s from newbie chat.", GetName(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "nMute: %s has unmuted %s from newbie chat.", Player[playerid][AdminName], GetName(id));
		AdminActionsLog(string);
		Player[id][nMutedLevel]--;
		format(string, sizeof(string), "%s has unmuted %s from newbie chat.", Player[playerid][AdminName], GetName(id), Player[id][nMutedLevel]);
		SendToAdmins(PINK, string, 0);
		return 1;
	}

	Player[id][nMuted] = 1;
	Player[id][nMutedLevel]++;
	Player[id][CanMute] = gettime();

	new tmpint = 3600 * Player[id][nMutedLevel];
	Player[id][nMutedTime] = gettime() + tmpint;

	format(string, sizeof(string), "You have muted %s from newbie chat for %d hours.", GetName(id), Player[id][nMutedLevel]);
	SendClientMessage(playerid, WHITE, string);

	format(string, sizeof(string), "%s has muted %s from newbie chat.", Player[playerid][AdminName], GetName(id), Player[id][nMutedLevel]);
	SendToAdmins(PINK, string, 0);

	Player[playerid][AdminActions]++;

	format(string, sizeof(string), "nMute: %s has muted %s from newbie chat.", Player[playerid][AdminName], GetName(id));
	AdminActionsLog(string);

	if(Player[id][nMutedLevel] == 5)
	{
		Player[id][nMutedLevel] = 0;
		format(string, sizeof(string), "Fifth /nmute");
		WarnPlayer(playerid, id, string);
	}

	return 1;
}

CMD:gcallcar(playerid, params[])
{
	new string[255], end[2100];

	if(Player[playerid][Group] == 0)
		return SendClientMessage(playerid, -1, "You must be in a group to use this command");

	new slot;

	for(new i; i < MAX_VEHICLES; i++)
	{
		if(slot >= MAX_GROUP_VEHICLES)
			break;

		new idx = GetVIndex(Veh[i][SQLID]);

		if(idx == -1)
			continue;

		if(Veh[idx][Group] != Player[playerid][Group])
			continue;

		if(Veh[idx][impounded] == 1)
			continue;

		if(Veh[idx][spawnState] == 0)
			continue;

		format(string, sizeof(string), "[ %s ] %s\n", vNames[Veh[idx][Model] - 400] ,Veh[idx][VName]);
		tGroupVID[playerid][slot] = Veh[idx][SQLID];
		slot++;
		strcat(end, string);
	}

	ShowPlayerDialog(playerid, G_CALL_CAR, DIALOG_STYLE_LIST, "Track Group Vehicle", end ,"Find", "Cancel");
	return 1;
}

CMD:gymshop(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 1.5, Businesses[Player[playerid][InBusiness]][bInteractX], Businesses[Player[playerid][InBusiness]][bInteractY], Businesses[Player[playerid][InBusiness]][bInteractZ]) && Player[playerid][InBusiness] != 0)
		return SendClientMessage(playerid, GREY, "You must stand near the interaction point to do this.");

	if(Businesses[Player[playerid][InBusiness]][bType] == 10)
		ShowPlayerDialog(playerid, 4591, DIALOG_STYLE_LIST, "[Gym] What do you want to buy?", "Fight Styles\nWalking Style", "Select", "Cancel");
	return 1;
}

stock SetPlayerNameEx(playerid, Name[])
{
	new result = SetPlayerName(playerid, Name);
	//UpdatePlayerLabel(playerid);

	return result;
}

stock IsValidSQL(sql)
{
	new Cache:cache, query[128];

	format(query, sizeof(query), "SELECT * FROM vehicles WHERE sqlid = '%d'", sql);
	cache = mysql_query(MYSQL_MAIN, query);

	if(cache_get_row_count() == 0)
	{
		cache_delete(cache);
		return 0;
	}
	cache_delete(cache);
	return 1;
}

stock GetEmptyVCell()
{
	for(new i; i < MAX_VEHICLES; i++)
	{
		if(Veh[i][SQLID] == 0)
		{
			return i;
		}
	}
	return -1;
}

stock ResetVCell(cell)
{
	if(cell == -1)
		return 1;

	Veh[cell][SQLID] = 0;

	Veh[cell][Model] = 0;

	Veh[cell][Color1] = 0;

	Veh[cell][Color2] = 0;

	Veh[cell][Group] = 0;

	Veh[cell][Job] = 0;

	Veh[cell][vX] = 0;

	Veh[cell][vY] = 0;

	Veh[cell][vZ] = 0;

	Veh[cell][vAngle] = 0;

	Veh[cell][vInt] = 0;

	Veh[cell][vVWorld] = 0;

	Veh[cell][Mod0] = 0;

	Veh[cell][Mod1] = 0;

	Veh[cell][Mod2] = 0;

	Veh[cell][Mod3] = 0;

	Veh[cell][Mod4] = 0;

	Veh[cell][Mod5] = 0;

	Veh[cell][Mod6] = 0;

	Veh[cell][Mod7] = 0;

	Veh[cell][Mod8] = 0;

	Veh[cell][Mod9] = 0;

	Veh[cell][Mod10] = 0;

	Veh[cell][Mod11] = 0;

	Veh[cell][Mod12] = 0;

	Veh[cell][Mod13] = 0;

	Veh[cell][Respawn] = 0;

	format(Veh[cell][Owner], 24, "");

	// Veh[cell][Weapons][0] = 0;

	// Veh[cell][Weapons][1] = 0;

	// Veh[cell][Weapons][2] = 0;

	Veh[cell][vHealth] = 0;

	Veh[cell][Fuel] = 0;

	format(Veh[cell][VName], 50, "");

	format(Veh[cell][Plate], 32, "");

	Veh[cell][Link] = 0;

	Veh[cell][damageState] = 0;

	Veh[cell][windowState] = 0;

	Veh[cell][lockState] = 0;

	Veh[cell][Hood] = 0;

	Veh[cell][Trunk] = 0;

	Veh[cell][radioState] = 0;

	format(Veh[cell][radioUrl], 100, "");

	Veh[cell][spawnState] = 0;

	Veh[cell][VIP] = 0;

	Veh[cell][impounded] = 0;

	Veh[cell][PaintJob] = 0;

	Veh[cell][RadioInstalled] = 0;

	Veh[cell][ImpoundCount] = 0;

	Veh[cell][TrunkContents] = 0;

	Veh[cell][GangLink] = 0;

	Veh[cell][IndicatorSpeed] = 500;

	//Veh[cell][Bomb] = -1;
	//printf("Vehicle reset with cell %d has bomb value of %d", cell, Veh[cell][Bomb]);
	return 1;
}

stock SaveVehicles()
{
	new count;
	for(new i; i < MAX_VEHICLES; i++)
	{
		if(Veh[i][SQLID] != 0)
		{
			SaveVehicle(Veh[i][SQLID]);
			count++;
		}
	}
	printf("%d vehicles saved.", count);
}

timer AdminPINLogin[20000](playerid)
{
	if(Player[playerid][PINAuth] < 1)
	{
		new string[128];
		format(string, sizeof(string), "WARNING: %s has been auto-kicked, defined reason: Admin PIN Timeout (20 seconds).", GetName(playerid));
		SendToAdmins(ADMINORANGE, string, 0);
		SendClientMessage(playerid, WHITE, "You didn't login within 20 seconds.");
		KickEx(playerid);
	}
	else stop Player[playerid][PINLoginTimer];
}

command(changeadminlevel, playerid, params[])
{
	new id, level, string[128];

	if(Player[playerid][AdminLevel] < 7)
		return 1;

	if(sscanf(params, "ud", id, level))
		return SendClientMessage(playerid, WHITE, "SYNTAX: /changeadminlevel [playerid] [level]");

	if(level >= Player[playerid][AdminLevel])
		return SendClientMessage(playerid, WHITE, "You can only promote someone to a lower level than yourself.");

	if(Player[id][AdminLevel] == 0)
	{
		UpdateInternalHotelRoomIDIcons(id);
		Player[id][AdminLevel] = level;
		SetPVarInt(id, "AdminLevel", Player[id][AdminLevel]);
		format(string, sizeof(string), "%s has been hired to admin level %d by %s.", GetName(id), level, GetName(playerid));
		SendToAdmins(ADMINORANGE, string, 0);
		StatLog(string);

		if(Player[id][AdminPIN] == 0)
		{
			SendClientMessage(id, WHITE, "You don't have an admin PIN set. Please now set one, it must be numeric only and 6 characters in length.");
			ShowPlayerDialog(id, 9843, DIALOG_STYLE_INPUT, "Authentication (Admin PIN)", "Please enter your desired PIN.", "Done", "Cancel");
		}

		else
		{
			Player[playerid][PINLoginTimer] = defer AdminPINLogin(playerid); 
			SendClientMessage(id, WHITE, "You have 20 seconds to login before you are auto-kicked.");
			ShowPlayerDialog(id, 9842, DIALOG_STYLE_PASSWORD, "Authentication (Admin PIN)", "Please enter your additional admin PIN to continue.", "Login", "Cancel");
		}
	}

	else if(level > Player[id][AdminLevel])
	{
		format(string, sizeof(string), "%s has been promoted to admin level %d by %s.", GetName(id), level, GetName(playerid));
		SendToAdmins(ADMINORANGE, string, 0);
		Player[id][AdminLevel] = level;
		SetPVarInt(id, "AdminLevel", Player[id][AdminLevel]);
		StatLog(string);
	}

	else if(level < Player[id][AdminLevel])
	{
		format(string, sizeof(string), "%s has been demoted to admin level %d by %s.", GetName(id), level, GetName(playerid));
		SendToAdmins(ADMINORANGE, string, 0);
		Player[id][AdminLevel] = level;
		SetPVarInt(id, "AdminLevel", Player[id][AdminLevel]);
		StatLog(string);
	}

	else if(level < 1)
	{
		DestroyInternalHotelRoomIDIcons(id);
		format(string, sizeof(string), "%s has been removed from the admin team by %s.", GetName(id), GetName(playerid));
		SendToAdmins(ADMINORANGE, string, 0);
		cmd_adminduty(id, "");
		Player[id][AdminLevel] = level;
		UpdatePlayerNameColour(id);
		TogglePlayerControllable(id, 0);
		SetPlayerSkin(id, Player[id][LastSkin]);
		TogglePlayerControllable(id, 1);
		SetPVarInt(id, "AdminLevel", Player[id][AdminLevel]);
		SetPlayerNameEx(id, Player[id][NormalName]);
		StatLog(string);
	}

	return 1;
}

command(vmute, playerid, params[])
{
	new id, string[255];

	if(Player[playerid][AdminLevel] < 1)
		return 1;

	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /vmute [playerid]");

	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, WHITE, "That player isn't connected!");

	if(gettime() < Player[id][CanMute]+30)
		return SendClientMessage(playerid, WHITE, "That player was just recently muted!");

	if(Player[id][VipRank] < 1)
	    return SendClientMessage(playerid, WHITE, "You can't do this to a player who isn't a VIP!");

	if(Player[id][vMuted] == 1)
	{
		Player[id][vMuted] = 0;
		Player[id][vMutedTime] = 0;
		format(string, sizeof(string), "You have unmuted %s from VIP chat.", GetName(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "vMute: %s has unmuted %s from VIP chat.", Player[playerid][AdminName], GetName(id));
		Player[id][vMutedLevel]--;
		AdminActionsLog(string);
		format(string, sizeof(string), "%s has unmuted %s from VIP chat.", Player[playerid][AdminName], GetName(id), Player[id][vMutedLevel]);
		SendToAdmins(PINK, string, 0);
		return 1;
	}

	Player[id][vMuted] = 1;
	Player[id][vMutedLevel]++;
	Player[id][CanMute] = gettime();

	new tmpint = 3600 * Player[id][vMutedLevel];
	Player[id][vMutedTime] = gettime() + tmpint;

	format(string, sizeof(string), "You have muted %s from VIP chat for %d hours.", GetName(id), Player[id][vMutedLevel]);
	SendClientMessage(playerid, WHITE, string);

	format(string, sizeof(string), "%s has muted %s from VIP chat.", Player[playerid][AdminName], GetName(id), Player[id][vMutedLevel]);
	SendToAdmins(PINK, string, 0);

	Player[playerid][AdminActions]++;

	format(string, sizeof(string), "vMute: %s has muted %s from VIP chat.", Player[playerid][AdminName], GetName(id));
	AdminActionsLog(string);

	if(Player[id][vMutedLevel] == 5)
	{
		Player[id][vMutedLevel] = 0;
		format(string, sizeof(string), "Fifth /vmute");
		WarnPlayer(playerid, id, string);
	}

	return 1;
}

stock GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
	new Float:a;
	GetPlayerPos(playerid, x, y, a);
	GetPlayerFacingAngle(playerid, a);
	if (GetPlayerVehicleID(playerid))
	{
	    GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
}

stock CreatePDObject(Float:x, Float:y, Float:z, Float:angle, objectid)
{
	for(new i; i < sizeof(pdObjects); i++)
	{
		if(pdObjects[i] == INVALID_OBJECT_ID || pdObjects[i] == 0)
		{
			pdObjects[i] = CreateDynamicObject(objectid, x, y, z, 0.000000, 0.000000, angle);
			activePDObjects++;
			break;
		}
	}
	return 1;
}

CMD:deploy(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 1)
		return SendClientMessage(playerid, -1, "You must be in the LSPD");

	if(Player[playerid][CopDuty] == 0)
		return SendClientMessage(playerid, -1, "You must be on cop duty");

	new id;
	if(sscanf(params, "d", id))
	{
		SendClientMessage(playerid, -1, "SYNTAX: /deploy [option]");
		return SendClientMessage(playerid, WHITE, "Options: 1 - Roadblock | 2 - Flare | 3 - Water Barrier | 4 - Spike Strips");
	}

	new Float:pPos[4];
	GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
	GetPlayerFacingAngle(playerid, pPos[3]);
	GetXYInFrontOfPlayer(playerid, pPos[0], pPos[1], 2);

	new objectid;
	switch(id)
	{
		case 1: objectid = 978;
		case 2: {objectid = 18728, pPos[2] = pPos[2] - 2.5;}
		case 3: {objectid = 1237, pPos[2] = pPos[2] - 1;}
		case 4:
		{
			new bool:breakingloop = false, newid = INVALID_OBJECT_ID, string[128];
			for(new i=0;i<MAX_SPIKES;i++)
			{
				if(!breakingloop)
				{
					if(SpikeStrips[i][sX] == 0 && SpikeStrips[i][sY] == 0 && SpikeStrips[i][sZ] == 0) // Checking for next available ID.
					{
						breakingloop = true;
						newid = i;
					}
				}
			}

			if(newid != INVALID_OBJECT_ID)
			{
				GetPlayerPos(playerid, SpikeStrips[newid][sX], SpikeStrips[newid][sY], SpikeStrips[newid][sZ]);
				GetPlayerFacingAngle(playerid, SpikeStrips[newid][sZRot]);
				SpikeStrips[newid][sObjectID] = CreateDynamicObject(2899, SpikeStrips[newid][sX], SpikeStrips[newid][sY], SpikeStrips[newid][sZ]-0.8, 0.0, 0.0, SpikeStrips[newid][sZRot]);
				format(string,sizeof(string),"Spike ID: %d successfully created.", newid);
				SendClientMessage(playerid, WHITE, string);
			}
			else
			{
				SendClientMessage(playerid, WHITE, "Unable to spawn more strips, limit is 5.");
			}
			return 1;
		}

	}

	if(activePDObjects >= sizeof(pdObjects))
		return SendClientMessage(playerid, -1, "The maximum amount of PD objects are spawned. (( Remove with /removeobject ))");

	CreatePDObject(pPos[0], pPos[1], pPos[2], pPos[3] + 180, objectid);
	SendClientMessage(playerid, -1, "Object created. (( Use /removeobject to remove the closest one ))");
	return 1;
}

CMD:removeobject(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 1)
		return SendClientMessage(playerid, -1, "You must be in the LSPD");

	if(Player[playerid][CopDuty] == 0)
		return SendClientMessage(playerid, -1, "You must be on cop duty");

	new removed;

	new Float:x, Float:y, Float:z;
	for(new i; i < sizeof(pdObjects); i++)
	{
		GetDynamicObjectPos(pdObjects[i], x, y, z);

		if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
		{
			DestroyDynamicObject(pdObjects[i]);
			pdObjects[i] = INVALID_OBJECT_ID;
			activePDObjects--;
			SendClientMessage(playerid, -1, "Object removed!");
			removed = 1;
			break;
		}
	}
	if(removed == 0)
	{
		for(new i; i < MAX_SPIKES; i++)
		{
			GetDynamicObjectPos(SpikeStrips[i][sObjectID], x, y, z);

			if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
			{
				DestroyDynamicObject(SpikeStrips[i][sObjectID]);
				SpikeStrips[i][sX] = 0; SpikeStrips[i][sY] = 0; SpikeStrips[i][sZ] = 0;
				SpikeStrips[i][sXRot] = 0; SpikeStrips[i][sYRot] = 0; SpikeStrips[i][sZRot] = 0;
				SpikeStrips[i][sObjectID] = INVALID_OBJECT_ID;
				SendClientMessage(playerid, -1, "Spike strip removed!");
				break;
			}
		}
	}
	return 1;
}

CMD:removeallpdobjects(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 1 && Player[playerid][AdminLevel] < 3)
		return 1;

	if(Groups[Player[playerid][Group]][CommandTypes] == 1 && Player[playerid][GroupRank] < 8 && Player[playerid][AdminLevel] < 3)
		return 1;

	for(new i; i < sizeof(pdObjects); i++)
	{
		DestroyDynamicObject(pdObjects[i]);
		pdObjects[i] = INVALID_OBJECT_ID;
		activePDObjects = 0;
	}

	for(new i; i < MAX_SPIKES; i++)
	{
		DestroyDynamicObject(SpikeStrips[i][sObjectID]);
		SpikeStrips[i][sX] = 0; SpikeStrips[i][sY] = 0; SpikeStrips[i][sZ] = 0;
		SpikeStrips[i][sXRot] = 0; SpikeStrips[i][sYRot] = 0; SpikeStrips[i][sZRot] = 0;
		SpikeStrips[i][sObjectID] = INVALID_OBJECT_ID;
	}

	SendClientMessage(playerid, -1, "All PD objects removed!");
	return 1;
}

command(deployspikes, playerid, params[])
{
	#pragma unused params
	if(Groups[Player[playerid][Group]][CommandTypes] == 1)
	{
		new bool:breakingloop = false, newid = INVALID_OBJECT_ID, string[128];

		for(new i=0;i<MAX_SPIKES;i++)
		{
			if(!breakingloop)
			{
				if(SpikeStrips[i][sX] == 0 && SpikeStrips[i][sY] == 0 && SpikeStrips[i][sZ] == 0) // Checking for next available ID.
				{
					breakingloop = true;
					newid = i;
				}
			}
		}

		if(newid != INVALID_OBJECT_ID)
		{
			GetPlayerPos(playerid, SpikeStrips[newid][sX], SpikeStrips[newid][sY], SpikeStrips[newid][sZ]);
			GetPlayerFacingAngle(playerid, SpikeStrips[newid][sZRot]);
			SpikeStrips[newid][sObjectID] = CreateDynamicObject(2899, SpikeStrips[newid][sX], SpikeStrips[newid][sY], SpikeStrips[newid][sZ]-0.8, 0.0, 0.0, SpikeStrips[newid][sZRot]);
			format(string,sizeof(string),"Spike ID: %d successfully created.", newid);
			SendClientMessage(playerid, WHITE, string);
		}
		else
		{
			SendClientMessage(playerid, WHITE, "Unable to spawn more strips, limit is 5.");
		}
	}
	return 1;
}

CMD:finetokens(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new id, amount, Reason[128], string[255];
	if(sscanf(params, "uds[128]", id, amount, Reason))
		return SendClientMessage(playerid, GREY, "SYNTAX: /finetokens [playerid] [amount] [reason]");

	if(id == INVALID_PLAYER_ID)
		return SendClientMessage(playerid, -1, "That player isn't connected.");

	if(Player[id][AdminLevel] < Player[playerid][AdminLevel] || playerid == id)
	{
		if(amount > 0 && amount < 99999999)
		{
			format(string, sizeof(string), "Fine: %s has been fined %d tokens by %s. Reason: \"%s\".", GetName(id), amount, Player[playerid][AdminName], Reason);
			SendToAdmins(LIGHTRED, string, 0);
			format(string, sizeof(string), "%s has fined %s %d tokens for %s.", Player[playerid][AdminName], GetName(id), amount, Reason);
			AdminActionsLog(string);
			Player[id][VipTokens] -= amount;

			if(Player[id][AdminLevel] < 1)
				Player[playerid][AdminActions]++;
		}
	}
	return 1;
}

CMD:awardtokens(playerid, params[])
{
	new id, amount, reason[128], string[255];

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(sscanf(params, "uds[128]", id, amount, reason))
		return SendClientMessage(playerid, GREY, "SYNTAX: /awardtokens [playerid] [amount] [reason]");

	if(!IsPlayerConnected(id))
		return SendClientMessage(playerid, WHITE, "That player isn't connected.");

	if(amount < 1)
		return SendClientMessage(playerid, WHITE, "Invalid amount!");

	else
	{
		format(string, sizeof(string), "Award: %s has been awarded %d tokens by %s. Reason: \"%s\".", GetName(id), amount, Player[playerid][AdminName], reason);
		SendClientMessageToAll(LIGHTRED, string);
		format(string, sizeof(string), "%s has rewarded %s %d tokens for %s.", Player[playerid][AdminName], GetName(id), amount, reason);
		AdminActionsLog(string);
		Player[id][VipTokens] += amount;
	}

	return 1;
}

CMD:inv(playerid, params[])
	return cmd_inventory(playerid, params);

CMD:inventory(playerid, params[])
{
	new str[128], id;

	if(isnull(params) || Player[playerid][AdminLevel] < 2)
		id = playerid;
	else if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /inv(entory) {[id])");

	if(!IsPlayerConnected(id))
		return SendClientMessage(playerid, -1, "That player is not connected");

    new totalfish = Player[id][TotalBass] + Player[id][TotalCod] + Player[id][TotalSalmon] + Player[id][TotalMackerel];
	totalfish += Player[id][TotalTuna] + Player[id][TotalCarp] + Player[id][TotalHerring] + Player[id][TotalMarlin];
	totalfish += Player[id][TotalMako] + Player[id][TotalCrab] + Player[id][TotalKraken];

	SendClientMessage(playerid, GREY, "----------------------------------------");
	if(id == playerid)
		SendClientMessage(playerid, GREY, "INVENTORY");
	else
	{
		format(str, sizeof(str), "INVENTORY (%s)", GetName(id));
		SendClientMessage(playerid, GREY, str);
	}

	format(str, sizeof(str), "Wallet ($%s)", IntToFormattedStr(Player[id][Money]));
	SendClientMessage(playerid, -1, str);

	if(Player[id][CheckBalance] > 0)
	{
		format(str, sizeof(str), "Check(s) ($%s)", IntToFormattedStr(Player[id][CheckBalance]));
		SendClientMessage(playerid, -1, str);
	}

	if(Player[id][Identity])
		SendClientMessage(playerid, -1, "Identification");

	new query[128];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM phones WHERE owner = '%e'", Player[id][NormalName]);
	new Cache:cache = mysql_query(MYSQL_MAIN, query), count = cache_get_row_count(), index;
	while(index < count)
	{
		new label[32];
		cache_get_field_content(index, "label", label);
		format(str, sizeof(str), "%s - #%d (%s)", label, cache_get_field_content_int(index, "number"), (cache_get_field_content_int(index, "status")) ? ("ON") : ("OFF"));
		SendClientMessage(playerid, -1, str);
		index ++;
	}
	cache_delete(cache);

	if(Player[id][WalkieTalkie])
	{
		format(str, sizeof(str), "Walkie-Talkie (#%d)", Player[id][WalkieFrequency]);
		SendClientMessage(playerid, -1, str);
	}

	if(totalfish > 0)
	{
		format(str, sizeof(str), "%d fish", totalfish);
		SendClientMessage(playerid, -1, str);
	}

	if(Player[id][Materials][0] > 0)
	{
		format(str, sizeof(str), "%d street grade material(s)", Player[id][Materials][0]);
		SendClientMessage(playerid, -1, str);
	}

	if(Player[id][Materials][1] > 0)
	{
		format(str, sizeof(str), "%d standard grade material(s)", Player[id][Materials][1]);
		SendClientMessage(playerid, -1, str);
	}

	if(Player[id][Materials][2] > 0)
	{
		format(str, sizeof(str), "%d military grade material(s)", Player[id][Materials][2]);
		SendClientMessage(playerid, -1, str);
	}

	if(Player[id][Pot] > 0)
	{
		format(str, sizeof(str), "%d gram(s) of pot", Player[id][Pot]);
		SendClientMessage(playerid, -1, str);
	}

	if(Player[id][Cocaine] > 0)
	{
		format(str, sizeof(str), "%d gram(s) of crack", Player[id][Cocaine]);
		SendClientMessage(playerid, -1, str);
	}


	if(Player[id][Speed] > 0)
	{
		format(str, sizeof(str), "%d pill(s) of speed", Player[id][Speed]);
		SendClientMessage(playerid, -1, str);
	}

	if(Player[id][Rope] > 0)
	{
		format(str, sizeof(str), "%d line(s) of rope", Player[id][Rope]);
		SendClientMessage(playerid, -1, str);
	}

	if(Player[id][Rags] > 0)
	{
		format(str, sizeof(str), "%d rag(s)", Player[id][Rags]);
		SendClientMessage(playerid, -1, str);
	}

	if(Player[id][HasSprayCans])
	{
		format(str, sizeof(str), "%d spray can(s)", Player[id][HasSprayCans]);
		SendClientMessage(playerid, -1, str);
	}

	if(Player[id][GasCans])
	{
	    format(str, sizeof(str), "Gas Can (%d%s)", Player[id][GasFull] * 4, "%%");
		SendClientMessage(playerid, -1, str);
	}

	if(Player[id][TempKey])
	{
		new idx = GetVIndex(Player[id][TempKey]);

		format(str, sizeof(str), "%s's %s key", titleStr(Veh[idx][Owner]), vNames[Veh[idx][Model] - 400]);
		SendClientMessage(playerid, -1, str);
	}

	if(Player[id][PersonalRadio])
		SendClientMessage(playerid, -1, "Personal Radio");

	if(Player[id][FishingRod])
		SendClientMessage(playerid, -1, "Fishing Rod");

	if(Player[id][FishingBait] > 0)
	{
	    format(str, sizeof(str), "Fish Bait (%d)", Player[id][FishingBait]);
	    SendClientMessage(playerid, -1, str);
	}

	if(Player[id][EngineParts] > 0)
	{
	    format(str, sizeof(str), "%d Engine Part(s)", Player[id][EngineParts]);
	    SendClientMessage(playerid, -1, str);
	}

	if(Player[id][NosBottle])
	    SendClientMessage(playerid, -1, "NOS Bottle");

	if(Player[id][HydroKit])
	    SendClientMessage(playerid, -1, "Hydraulics Kit");

	if(Player[id][Workbench])
	    SendClientMessage(playerid, -1, "Workbench");

	if(Player[id][Toolkit])
	    SendClientMessage(playerid, -1, "Toolkit");

	if(Player[id][Tickets] > 0)
	{
		format(str, sizeof(str), "Ticket(s) (%d)", Player[id][Tickets]);
		SendClientMessage(playerid, -1, str);
	}

	if(Player[id][Supplies] > 0)
	{
		format(str, sizeof(str), "%d Supplies (%s%s)", Player[id][Supplies], BusinessTypeName(Player[id][SupplyT]));
		SendClientMessage(playerid, -1, str);
	}

	if(Player[id][HouseKey] > 0)
	{
		format(str, sizeof(str), "House %d key", Player[id][HouseKey]);
		SendClientMessage(playerid, -1, str);
	}

	if(Player[id][CasinoChips] > 0)
	{
		format(str, sizeof(str), "%s casino chips", IntToFormattedStr(Player[id][CasinoChips]));
		SendClientMessage(playerid, -1, str);
	}

	if(Player[id][HotelRoomID] > 0)
	{
		format(str, sizeof(str), "Hotel Key (%s #%d)", Businesses[Hotels[Player[id][HotelRoomID]][hBizLink]][bName], Hotels[Player[id][HotelRoomID]][hBizIndex]);
		SendClientMessage(playerid, -1, str);
	}

	if(Player[id][VehicleRadio] > 0)
		SendClientMessage(playerid, -1, "Vehicle Radio");

	if(Player[id][BeerCases] > 0)
	{
		format(str, sizeof(str), "%s cases of beer", IntToFormattedStr(Player[id][BeerCases]));
		SendClientMessage(playerid, -1, str);
	}

	if(Player[id][PotSeeds] > 0)
	{
		format(str, sizeof(str), "%s pot seeds", IntToFormattedStr(Player[id][PotSeeds]));
		SendClientMessage(playerid, -1, str);
	}

	if(Player[id][GrowLight] > 0)
	{
		SendClientMessage(playerid, -1, "Fluorescent Grow Light");
	}

	if(Player[id][CarLicense])
	{
		format(str, sizeof(str), "Standard License %s", (Player[id][LicenseSuspended] > 0) ? ("(Suspended)") : (""));
		SendClientMessage(playerid, -1, str);
	}

	if(Player[id][TruckLicense])
		SendClientMessage(playerid, -1, "Trucker License");

	if(Player[id][VipRank] > 1)
		SendClientMessage(playerid, -1, "Pilot License");

	if(Player[id][HasBoombox])
		SendClientMessage(playerid, -1, "Boombox");

	if(Player[id][PizzaSlices])
	{
		format(str, sizeof(str), "%s pizza slices", IntToFormattedStr(Player[id][PizzaSlices]));
		SendClientMessage(playerid, -1, str);
	}

	if(Player[id][pFireworks])
	{
		format(str, sizeof(str), "%s firework(s)", IntToFormattedStr(Player[id][pFireworks]));
		SendClientMessage(playerid, -1, str);
	}
	
	if(Player[id][LottoTicket] > 0)
	{
		format(str, sizeof(str), "%s lottery ticket(s)", IntToFormattedStr(Player[id][LottoTicket]));
		SendClientMessage(playerid, -1, str);
	}
	
	if(Player[id][SirenKit] > 0)
	{
		format(str, sizeof(str), "%s kit", (Player[id][SirenKit] == 1) ? ("Lightbar") : ("Roof Siren"));
		SendClientMessage(playerid, -1, str);
	}
	
	if(Player[id][PrisonTickets] > 0)
	{
		format(str, sizeof(str), "%s prison ticket(s)", IntToFormattedStr(Player[id][PrisonTickets]));
		SendClientMessage(playerid, -1, str);
	}
	if(Player[id][PrisonScrewdriver] > 0)
	{
		SendClientMessage(playerid, -1, "Screwdriver");
	}
	if(Player[id][PrisonShank] > 0)
	{
		SendClientMessage(playerid, -1, "Shank");
	}
	if(Player[id][PrisonRazor] > 0)
	{
		SendClientMessage(playerid, -1, "Razor");
	}
	if(Player[id][Cigarettes] > 0)
	{
		format(str, sizeof(str), "%s cigarette(s)", IntToFormattedStr(Player[id][Cigarettes]));
		SendClientMessage(playerid, -1, str);
	}
	if(Player[id][PrisonDice] > 0)
	{
		SendClientMessage(playerid, -1, "Dice");
	}
	if(Player[id][PrisonLitter] > 0)
	{
		SendClientMessage(playerid, -1, "Piece of litter");
	}
	if(Player[id][PrisonLighter] > 0)
	{
		SendClientMessage(playerid, -1, "Lighter");
	}
	if(GetPVarInt(playerid, "prisonjob") == 1)
	{
		SendClientMessage(playerid, -1, "Trash disposer job slip");
	}
	else if(GetPVarInt(playerid, "prisonjob") == 2)
	{
		SendClientMessage(playerid, -1, "Litter cleaner job slip");
	}
	if(Player[id][Tent] > 0)
	{
		SendClientMessage(playerid, -1, "Tent");
	}

	if(Player[id][Notepad] > 0)
	{
		format(str, sizeof(str), "Notepad (%s pages left)", IntToFormattedStr(Player[id][Notepad]));
		SendClientMessage(playerid, -1, str);
	}
	new string[256];
	if(strlen(Player[id][Note1]) > 0)
	{
	    strmid(str, Player[id][Note1], 0, 15);
	    format(string, sizeof(string), "Note #1 (%s...)", str);
	    SendClientMessage(playerid, -1, string);
	}
	if(strlen(Player[id][Note2]) > 0)
	{
	    strmid(str, Player[id][Note2], 0, 15);
	    format(string, sizeof(string), "Note #2 (%s...)", str);
	    SendClientMessage(playerid, -1, string);
	}
 	if(strlen(Player[id][Note3]) > 0)
	{
 		strmid(str, Player[id][Note3], 0, 15);
	    format(string, sizeof(string), "Note #3 (%s...)", str);
	    SendClientMessage(playerid, -1, string);
	}
	if(strlen(Player[id][FakeIDString]) > 3)
	{
		SendClientMessage(playerid, -1, "Fake ID");
	}
	if(strlen(Player[id][FakeLicense]) > 3)
	{
		SendClientMessage(playerid, -1, "Fake Registration");
	}
	if(Player[id][HasArmour] > 0)
	{
		if(Player[id][HasArmour] == 100)
			SendClientMessage(playerid, -1, "Kevlar (Poor)");
		else if(Player[id][HasArmour] == 115)
			SendClientMessage(playerid, -1, "Kevlar (Standard)");
		else
			SendClientMessage(playerid, -1, "Kevlar (Military)");
	}
	if(Player[id][Ventillation] > 0)
	{
		if(Player[id][Ventillation] == 1)
			SendClientMessage(playerid, -1, "Ventillation Upgrade 1");
		else
			SendClientMessage(playerid, -1, "Ventillation Upgrade 2");
	}
	if(Player[id][Bomb] > 0)
		SendClientMessage(playerid, -1, "Bomb");
	
	if(Player[id][GunLicense] > 0)
		SendClientMessage(playerid, -1, "Gun License");
	return SendClientMessage(playerid, GREY, "----------------------------------------");
}

CMD:remoteinv(playerid, params[])
{
	new str[128], name[100];

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(sscanf(params, "s[50]", name))
		return SendClientMessage(playerid, GREY, "SYNTAX: /remoteinv [name]");

	if(!IsPlayerRegistered(name))
		return SendClientMessage(playerid, WHITE, "That player doesn't exist.");

	if(Player[playerid][AdminLevel] < GetRemoteAdminLevel(name))
		return SendClientMessage(playerid, -1, "You can't check a higher level admin.");

	SendClientMessage(playerid, GREY, "----------------------------------------");
	format(str, sizeof(str), "INVENTORY (%s)", name);
	SendClientMessage(playerid, GREY, str);

	format(str, sizeof(str), "Wallet ($%s)", IntToFormattedStr(GetRemoteIntValue(name, "Money")));
	SendClientMessage(playerid, -1, str);

	if(TempPlayer[playerid][CheckBalance] > 0)
	{
		format(str, sizeof(str), "Check(s) ($%s)", IntToFormattedStr(GetRemoteIntValue(name, "CheckBalance")));
		SendClientMessage(playerid, -1, str);
	}

	if(GetRemoteIntValue(name, "Identity") > 0)
		SendClientMessage(playerid, -1, "Identification");

	mysql_format(MYSQL_MAIN, str, sizeof(str), "SELECT * FROM phones WHERE owner = '%e'", name);
	new Cache:cache = mysql_query(MYSQL_MAIN, str), count = cache_get_row_count(), idx;
	while (idx < count)
	{
		format(str, sizeof(str), "Phone (#%d)", cache_get_field_content_int(idx, "number"));
		SendClientMessage(playerid, -1, str);
		idx ++;
	}
	cache_delete(cache);

	if(GetRemoteIntValue(name, "WalkieTalkie") > 0)
	{
		format(str, sizeof(str), "Walkie-Talkie (#%d)", GetRemoteIntValue(name, "WalkieTalkie") );
		SendClientMessage(playerid, -1, str);
	}

	if(GetRemoteIntValue(name, "VipTokens") > 0)
	{
		format(str, sizeof(str), "%d token(s)", GetRemoteIntValue(name, "VipTokens"));
		SendClientMessage(playerid, -1, str);
	}

	if(GetRemoteIntValue(name, "Materials") > 0)
	{
		format(str, sizeof(str), "%d street material(s)", GetRemoteIntValue(name, "Materials"));
		SendClientMessage(playerid, -1, str);
	}

	if(GetRemoteIntValue(name, "Materials1") > 0)
	{
		format(str, sizeof(str), "%d standard material(s)", GetRemoteIntValue(name, "Materials1"));
		SendClientMessage(playerid, -1, str);
	}

	if(GetRemoteIntValue(name, "Materials2") > 0)
	{
		format(str, sizeof(str), "%d military material(s)", GetRemoteIntValue(name, "Materials2"));
		SendClientMessage(playerid, -1, str);
	}

	if(GetRemoteIntValue(name, "Pot") > 0)
	{
		format(str, sizeof(str), "%d gram(s) of pot", GetRemoteIntValue(name, "Pot"));
		SendClientMessage(playerid, -1, str);
	}

	if(GetRemoteIntValue(name, "Cocaine") > 0)
	{
		format(str, sizeof(str), "%d gram(s) of crack", GetRemoteIntValue(name, "Cocaine"));
		SendClientMessage(playerid, -1, str);
	}

	if(GetRemoteIntValue(name, "Rope") > 0)
	{
		format(str, sizeof(str), "%d line(s) of rope", GetRemoteIntValue(name, "Rope"));
		SendClientMessage(playerid, -1, str);
	}

	if(GetRemoteIntValue(name, "Rags") > 0)
	{
		format(str, sizeof(str), "%d rag(s)", GetRemoteIntValue(name, "Rags"));
		SendClientMessage(playerid, -1, str);
	}

	if(GetRemoteIntValue(name, "HasSprayCans") > 0)
	{
		format(str, sizeof(str), "%d spray can(s)", GetRemoteIntValue(name, "HasSprayCans"));
		SendClientMessage(playerid, -1, str);
	}

	if(GetRemoteIntValue(name, "GasCans") > 0)
		SendClientMessage(playerid, -1, "Gas Can");

	if(GetRemoteIntValue(name, "Personal Radio"))
		SendClientMessage(playerid, -1, "Personal Radio");


	if(GetRemoteIntValue(name, "FishingRod"))
		SendClientMessage(playerid, -1, "Fishing Rod");

	if(GetRemoteIntValue(name, "FishingBait") > 0)
	{
	    format(str, sizeof(str), "Fish Bait (%d)", GetRemoteIntValue(name, "FishingBait"));
	    SendClientMessage(playerid, -1, str);
	}

	if(GetRemoteIntValue(name, "EngineParts") > 0)
	{
	    format(str, sizeof(str), "%d Engine Part(s)", GetRemoteIntValue(name, "EngineParts"));
	    SendClientMessage(playerid, -1, str);
	}

	if(GetRemoteIntValue(name, "NosBottle"))
	    SendClientMessage(playerid, -1, "NOS Bottle");

	if(GetRemoteIntValue(name, "HydroKit"))
	    SendClientMessage(playerid, -1, "Hydraulics Kit");

	if(GetRemoteIntValue(name, "HouseKey") > 0)
	{
	    format(str, sizeof(str), "%s's house key ((ID:%d))", Houses[GetRemoteIntValue(name, "HouseKey")][hOwner], GetRemoteIntValue(name, "HouseKey"));
	    SendClientMessage(playerid, -1, str);
	}

	if(GetRemoteIntValue(name, "CasinoChips") > 0)
	{
	    format(str, sizeof(str), "%s casino chips", IntToFormattedStr(GetRemoteIntValue(name, "CasinoChips")));
	    SendClientMessage(playerid, -1, str);
	}

	if(GetRemoteIntValue(name, "GrowLight") > 0)
	{
	    SendClientMessage(playerid, -1, "Fluorescent Grow Light");
	}

	if(GetRemoteIntValue(name, "PotSeeds") > 0)
	{
	    format(str, sizeof(str), "%s pot seeds", IntToFormattedStr(GetRemoteIntValue(name, "PotSeeds")));
	    SendClientMessage(playerid, -1, str);
	}

	return SendClientMessage(playerid, GREY, "----------------------------------------");
}

CMD:sk(playerid, params[])
	return cmd_skills(playerid, params);

CMD:skills(playerid, params[])
{
	new str[128], id;

	if(isnull(params) || Player[playerid][AdminLevel] < 2)
		id = playerid;
	else if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /sk(ills) {[id])");

	if(!IsPlayerConnected(id))
		return SendClientMessage(playerid, -1, "That player is not connected");

	SendClientMessage(playerid, GREY, "----------------------------------------");
	if(id == playerid)
		SendClientMessage(playerid, GREY, "SKILLS");
	else
	{
		format(str, sizeof(str), "SKILLS (%s)", GetName(id));
		SendClientMessage(playerid, GREY, str);
	}

	/* new level = Player[id][CollegeChem] / 50;

	if(level > 10)
		level = 10; */

	new level, xpLeft;
	switch(Player[id][ArmsDealerXP])
	{
		case 0 .. 249: {level = 0, xpLeft = 250 - Player[id][ArmsDealerXP];}
		case 250 .. 1749: {level = 1, xpLeft = 1750 - Player[id][ArmsDealerXP];}
		case 1750 .. 3749: {level = 2, xpLeft = 3750 - Player[id][ArmsDealerXP];}
		case 3750 .. 6249: {level = 3, xpLeft = 6250 - Player[id][ArmsDealerXP];}
		case 6250 .. 11249: {level = 4, xpLeft = 11250 - Player[id][ArmsDealerXP];}
		case 11250 .. 16249: {level = 5, xpLeft = 16250 - Player[id][ArmsDealerXP];}
		case 16250 .. 23749: {level = 6, xpLeft = 23750 - Player[id][ArmsDealerXP];}
		case 23750 .. 31249: {level = 7, xpLeft = 31250 - Player[id][ArmsDealerXP];}
		case 31250 .. 43749: {level = 8, xpLeft = 43750 - Player[id][ArmsDealerXP];}
		case 43750 .. 57499: {level = 9, xpLeft = 57500 - Player[id][ArmsDealerXP];}
		default: level = 10;
	}

	format(str, sizeof(str), "Gun Level: %d (%d XP; XP to next level: %d)", level, Player[id][ArmsDealerXP], xpLeft);
	SendClientMessage(playerid, -1, str);

	level = Player[id][TotalFished] / 100;

	if(level > 10)
		level = 10;

	format(str, sizeof(str), "Fishing Level: %d (%d xp)", level, Player[id][TotalFished]);
	SendClientMessage(playerid, -1, str);

	level = Player[id][Deliveries] / 50;

	if(level > 10)
		level = 10;

	format(str, sizeof(str), "Deliverer Level: %d (%d delivers)", level, Player[id][Deliveries]);
	SendClientMessage(playerid, -1, str);

	level = Player[id][PizzaDelivers] / 200;

	if(level > 3)
		level = 3;

	format(str, sizeof(str), "Pizza Boy Level: %d (%d delivers)", level, Player[id][PizzaDelivers]);
	SendClientMessage(playerid, -1, str);

	format(str, sizeof(str), "Car Jacker XP: %d", Player[id][CarJackerXP]);
	SendClientMessage(playerid, WHITE, str);

	format(str, sizeof(str), "Total Cars Dropped: %d", Player[id][TotalCarsDropped]);
	SendClientMessage(playerid, WHITE, str);

	return SendClientMessage(playerid, GREY, "----------------------------------------");
}

CMD:remotesk(playerid, params[])
	return cmd_remoteskills(playerid, params);

CMD:remoteskills(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new name[MAX_PLAYER_NAME];

	if(sscanf(params, "s[24]", name))
		return SendClientMessage(playerid, GREY, "/remotesk(ills) [player]");

	if(!IsPlayerRegistered(name))
		return SendClientMessage(playerid, WHITE, "That player doesn't exist.");

	new level, tmpint, string[128];

	SendClientMessage(playerid, GREY, "----------------------------------------");

	tmpint = GetRemoteIntValue(name, "ArmsDealerXP");
	new xpLeft;
	switch(tmpint)
	{
		case 0 .. 249: {level = 0, xpLeft = 250 - tmpint;}
		case 250 .. 1749: {level = 1, xpLeft = 1750 - tmpint;}
		case 1750 .. 3749: {level = 2, xpLeft = 3750 - tmpint;}
		case 3750 .. 6249: {level = 3, xpLeft = 6250 - tmpint;}
		case 6250 .. 11249: {level = 4, xpLeft = 11250 - tmpint;}
		case 11250 .. 16249: {level = 5, xpLeft = 16250 - tmpint;}
		case 16250 .. 23749: {level = 6, xpLeft = 23750 - tmpint;}
		case 23750 .. 31249: {level = 7, xpLeft = 31250 - tmpint;}
		case 31250 .. 43749: {level = 8, xpLeft = 43750 - tmpint;}
		case 43750 .. 57499: {level = 9, xpLeft = 57500 - tmpint;}
		default: level = 10;
	}

	format(string, sizeof(string), "Gun Level: %d (%d XP; XP to next level)", level, tmpint, xpLeft);
	SendClientMessage(playerid, WHITE, string);

	tmpint = GetRemoteIntValue(name, "TotalFished");
	level = tmpint / 100;
	if(level > 10)
		level = 10;
	format(string, sizeof(string), "Fishing Level: %d (%d xp)", level, tmpint);
	SendClientMessage(playerid, WHITE, string);

	tmpint = GetRemoteIntValue(name, "Deliveries");
	level = tmpint / 50;
	if(level > 10)
		level = 10;
	format(string, sizeof(string), "Deliverer Level: %d (%d deliveries)", level, tmpint);
	SendClientMessage(playerid, WHITE, string);

	tmpint = GetRemoteIntValue(name, "PizzaDelivers");
	level = tmpint / 200;
	if(level > 3)
		level = 3;
	format(string, sizeof(string), "Pizza Boy Level: %d (%d deliveries)", level, tmpint);
	SendClientMessage(playerid, WHITE, string);

	tmpint = GetRemoteIntValue(name, "CarJackerXP");
	format(string, sizeof(string), "Car Jacker XP: %d", tmpint);
	SendClientMessage(playerid, WHITE, string);

	tmpint = GetRemoteIntValue(name, "TotalCarsDropped");
	format(string, sizeof(string), "Total Cars Dropped: %d", tmpint);
	SendClientMessage(playerid, WHITE, string);

	SendClientMessage(playerid, GREY, "----------------------------------------");
	return 1;
}

//Helper Related /maccept, /mtrash, /mfinish, /mlist, /ask, /askcancel

stock mEmptyCell(array[][RequestID], size = sizeof(array))
{
	for(new i; i < size; i++)
	{
		if(array[i][RequestID] == 0)
			return i;
	}
	return 100;
}

stock GetOnlineMods()
{
	new mods;
	foreach(Player, i)
	{
		if(Player[i][AdminLevel] == 1 || Player[i][AdminLevel] == 2 || Player[i][ModStatus] == 1)
			mods++;
	}
	return mods;
}

stock GetOnlineAdmins(level = 2)
{
	new admins;
	foreach(Player, i)
	{
		if(Player[i][AdminLevel] > level)
			admins++;
	}
	return admins;
}

stock ResetRequest(idx)
{
	mRequest[idx][RequestID] = 0;
	mRequest[idx][Requester] = INVALID_PLAYER_ID;
	format(mRequest[idx][RequestQuestion], 128, "");
	mRequestCount--;
}

CMD:mfinish(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 1)
		return SendClientMessage(playerid, -1, "Admin only");

	if(GetPVarInt(playerid, "ActiveQuestion") == 0)
		return SendClientMessage(playerid, -1, "You're not assisting anyone!");

 	SetPVarInt(playerid, "OnAsk", 0);

	SetPlayerPos_Update(playerid, GetPVarFloat(playerid, "ModTargetX"), GetPVarFloat(playerid, "ModTargetY"), GetPVarFloat(playerid, "ModTargetZ"));
	SetPlayerInterior(playerid, GetPVarInt(playerid, "ModTargetInterior"));
	SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "ModTargetVW"));
	if(Player[playerid][AdminDuty] == 0)
		SetPlayerHealth(playerid, GetPVarFloat(playerid, "ModOldHP"));
	else
		SetPlayerHealth(playerid, 500000);
	SetPlayerArmour(playerid, GetPVarFloat(playerid, "ModOldArmour"));

	DeletePVar(playerid, "ModTargetX");
	DeletePVar(playerid, "ModTargetY");
	DeletePVar(playerid, "ModTargetZ");
	DeletePVar(playerid, "ModTargetInterior");
	DeletePVar(playerid, "ModTargetVW");
	DeletePVar(playerid, "ModOldHP");
	DeletePVar(playerid, "ModOldArmour");
	DeletePVar(playerid, "QuestionStarter");

	SendClientMessage(playerid, -1, "You've finished helping someone and been teleported to your old location!");
	SetPVarInt(playerid, "ActiveQuestion", 0);

	UpdatePlayerNameColour(playerid);
	return 1;
}

CMD:mtrash(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 1)
		return SendClientMessage(playerid, -1, "Admin only");

	new target;

	if(sscanf(params, "u", target))
		return SendClientMessage(playerid, GREY, "SYNTAX: /mtrash [user]");

	new idx = -1;
	for(new i; i < MAX_REQUESTS; i++)
	{
		if(mRequest[i][Requester] == target && mRequest[i][RequestID] != 0)
		{
			idx = i;
			break;
		}
	}
	if(idx == -1)
		return SendClientMessage(playerid, -1, "That player has not asked a question.");

	ResetRequest(idx);
	SetPVarInt(target, "ActiveAsk", 0);
	new string[128];

	format(string, sizeof(string), "[HELP] %s has trashed a question.", Player[playerid][AdminName]);
	foreach(Player, i)
	{
		if(Player[i][AdminLevel] == 1 || Player[i][AdminLevel] == 2 || Player[i][ModStatus] == 1)
			SendClientMessage(i, COLOR_CREAM, string);
	}

	format(string, sizeof(string), "[HELP] %s trashes /ask from %s: %s", Player[playerid][AdminName], GetName(target), mRequest[idx][RequestQuestion]);
	AdminActionsLog(string);

	SendClientMessage(playerid, -1, "You have closed the request.");
	return 1;
}

CMD:cancelask(playerid, params[])
{
	if(GetPVarInt(playerid, "ActiveAsk") != 1)
		return SendClientMessage(playerid, -1, "You have no active request");

	new idx = -1;

	for(new i; i < MAX_REQUESTS; i++)
	{
		if(mRequest[i][Requester] == playerid)
			idx = i;
	}
	if(idx == -1)
		SendClientMessage(playerid, -1, "You have no active request");

	new string[128];
	format(string, sizeof(string), "[HELP] %s has canceled their question.", GetName(playerid));

	foreach(Player, i)
	{
		if(Player[i][AdminLevel] == 1 || Player[i][AdminLevel] == 2 || Player[i][ModStatus] == 1)
			SendClientMessage(i, COLOR_CREAM, string);
	}

	SetPVarInt(playerid, "ActiveAsk", 0);
	ResetRequest(idx);
	SendClientMessage(playerid, YELLOW, "You have canceled your request for help!");
	return 1;
}

CMD:maccept(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 1)
		return SendClientMessage(playerid, -1, "Admin only");

	new target;
	if(sscanf(params, "u", target))
		return SendClientMessage(playerid, GREY, "SYNTAX: /maccept [user]");

	if(!IsPlayerConnectedEx(target))
		return SendClientMessage(playerid, -1, "That player is no longer connected");

	new idx = -1;
	for(new i; i < MAX_REQUESTS; i++)
	{
		if(mRequest[i][Requester] == target && mRequest[i][RequestID] != 0)
			idx = i;
	}
	if(idx == -1)
		return SendClientMessage(playerid, -1, "That question request is no longer active!");

	SetPVarInt(target, "ActiveAsk", 0);

 	SetPVarInt(playerid, "OnAsk", 1);

	if(Player[target][AdminLevel] == 0)
		Player[playerid][AdminActions]++;

	new string[128], Float:Pos[3], interior, virtualworld, Float:health, Float:armour;
	format(string, sizeof(string), "%s has accepted your help request!", Player[playerid][AdminName]);
    GameTextForPlayer(target, string, 5000, 6);
	format(string, sizeof(string), "You have accepted %s help request. Question: %s", GetName(target), mRequest[idx][RequestQuestion]);
	SendClientMessage(playerid, COLOR_CREAM, string);

	format(string, sizeof(string), "[HELP] %s has accepted a question by %s", Player[playerid][AdminName], GetName(target));
	foreach(Player, i)
	{
		if(Player[i][AdminLevel] == 1 || Player[i][AdminLevel] == 2 || Player[i][ModStatus] == 1)
			SendClientMessage(i, COLOR_CREAM, string);
	}

	format(string, sizeof(string), "[HELP] %s accepts /ask from %s: %s", Player[playerid][AdminName], GetName(target), mRequest[idx][RequestQuestion]);
	AdminActionsLog(string);

	ResetRequest(idx);

	SetPVarInt(playerid, "QuestionStarter", target + 1);

	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	interior = GetPlayerInterior(playerid);
	virtualworld = GetPlayerVirtualWorld(playerid);
	GetPlayerHealth(playerid, health);
	GetPlayerArmour(playerid, armour);

	SetPVarFloat(playerid, "ModTargetX", Pos[0]);
	SetPVarFloat(playerid, "ModTargetY", Pos[1]);
	SetPVarFloat(playerid, "ModTargetZ", Pos[2]);
	SetPVarInt(playerid, "ModTargetInterior", interior);
	SetPVarInt(playerid, "ModTargetVW", virtualworld);
	SetPVarFloat(playerid, "ModOldHP", health);
	SetPVarFloat(playerid, "ModOldArmour", armour);
	SetPVarInt(playerid, "ActiveQuestion", gettime() + 15);

	SetPlayerHealth(playerid, 50000);

	GetPlayerPos(target, Pos[0], Pos[1], Pos[2]);
	interior = GetPlayerInterior(target);
	virtualworld = GetPlayerVirtualWorld(target);

	SetPlayerPos_Update(playerid, Pos[0], Pos[1], Pos[2]);
	SetPlayerInterior(playerid, interior);
	SetPlayerVirtualWorld(playerid, virtualworld);

	SetPlayerColor(playerid, ADMIN_COLOR);
	return 1;
}

CMD:ask(playerid, params[])
{
	if(isnull(params))
		return SendClientMessage(playerid, GREY, "SYNTAX: /ask [Question]");

	if(strlen(params) < 5)
		return SendClientMessage(playerid, -1, "Your message must be over 5 characters");

	if(GetOnlineMods() == 0)
		return SendClientMessage(playerid, -1, "There are no moderators online, use /n");

	if(GetPVarInt(playerid, "ActiveAsk") == 1)
		return SendClientMessage(playerid, -1, "You have an active question! Type /cancelask");

	if(Player[playerid][askBan][0] > 0)
		return SendClientMessage(playerid, WHITE, "You have been banned from using /ask. Use /time to see when you can use it again");

	new string[128];

	if(GetPVarInt(playerid, "AskTimeout") > gettime())
	{
		format(string, sizeof(string), "You can't ask another question for %d more seconds!", GetPVarInt(playerid, "AskTimeout") - gettime());
		return SendClientMessage(playerid, -1, string);
	}

	if(mRequestCount >= MAX_REQUESTS)
		return SendClientMessage(playerid, -1, "Max active questions, please wait!");

	new idx = mEmptyCell(mRequest);

	if(idx == 100)
		return SendClientMessage(playerid, -1, "Error: ask#1:CELL");

	mRequest[idx][RequestID] = idx + 1;
	mRequest[idx][Requester] = playerid;
	format(mRequest[idx][RequestQuestion], 128, params);

	SetPVarInt(playerid, "ActiveAsk", 1);
	SetPVarInt(playerid, "AskTimeout", gettime() + 60);

	mRequestCount++;

	SendClientMessage(playerid, YELLOW, "You have requested help, stand by for assistance!");
	format(string, sizeof(string), "[HELP] %s (%d) asks: %s", GetName(playerid), playerid, params);
	foreach(Player, i)
	{
		if(Player[i][AdminLevel] == 1 || Player[i][AdminLevel] == 2 || Player[i][ModStatus] == 1)
			SendClientMessage(i, COLOR_CREAM, string);
	}
	OOCChatLog(string);
	return 1;
}

CMD:mlist(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 1)
		return SendClientMessage(playerid, -1, "Admin only");

	new string[128];
	SendClientMessage(playerid, GREY, "----------------------------------------");
	for(new i; i < MAX_REQUESTS; i++)
	{
		if(mRequest[i][RequestID] == 0)
			continue;

		if(!IsPlayerConnectedEx(mRequest[i][Requester]))
			continue;

		format(string, sizeof(string), "[Help Request] %s (%d): %s", GetName(mRequest[i][Requester]),mRequest[i][Requester], mRequest[i][RequestQuestion]);
		SendClientMessage(playerid, GREEN, string);
	}
	SendClientMessage(playerid, GREY, "----------------------------------------");
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
    if(Player[playerid][AdminLevel] > 0 && GetPVarInt(playerid, "ActiveQuestion") != 0)
	{
		if(GetPVarInt(playerid, "QuestionStarter") == 0)
			return 1;

		new target = GetPVarInt(playerid, "QuestionStarter") - 1;
		if(!IsPlayerConnected(target))
			return 1;


		SetPlayerCheckpoint(target, fX, fY, fZ, 10.0);
		Player[target][Checkpoint] = 1;
		Player[target][Map] = 1;
		SendClientMessage(target, YELLOW, "A moderator has added a checkpoint to your map, type /killcheckpoint to remove it!");
	}
	if(Player[playerid][AdminLevel] > 1 && Player[playerid][MapTP] > 0)
	{
		SendClientMessage(playerid, -1, "You have teleported to the checkpoint you placed on your map.");
		SetPlayerPos_Update(playerid, fX, fY, fZ);
		Player[playerid][MapTP] = 0;
		SendClientMessage(playerid, -1, "Map teleporting disabled.");
	}

	if(Player[playerid][PickingBillboard])
	{
		new billboard = GetClosestBillboard(fX, fY, fZ, 1);

		if(billboard == -1)
			return SendClientMessage(playerid, -1, "There are no available billboards for rent right now.");

		ShowDialog(playerid, BILLBOARD_CREATE);
		Player[playerid][PickingBillboard] = 0;
		SetPVarInt(playerid, "PickedBillboard", billboard+1);
		SetPVarInt(playerid, "BillboardCooldown", 0);
		DestroyBillboardIcons(playerid);
	}
	
	if(Player[playerid][PhoneGPS] == 1)
 	{
 		Player[playerid][PhoneGPS] = 0;
 		new string[128];
 		format(string, sizeof(string), "The coordinates for that location is %0.2f, %0.2f, %0.2f.", fX, fY, fZ);
 		SendClientMessage(playerid, WHITE, string);
 	}
    return 1;
}

CMD:ec(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 4)
		return 1;

	if(GetPVarInt(playerid, "ShortCMDS") == 0)
		return cmd_eventchat(playerid, params);
	else
	{
		SendClientMessage(playerid, -1, "ShortCMDS are disabled, you must use /eventchat");
		return 1;
	}
}

CMD:eventchat(playerid, params[])
{
	new string[255];

	if(Player[playerid][AdminLevel] < 4)
		return 1;

	if(isnull(params))
		return SendClientMessage(playerid, GREY, "SYNTAX; /eventchat (/ec) [message]");

	format(string, sizeof(string), "[E] %s: %s", Player[playerid][AdminName], params);

	foreach(Player, i)
	{
		if(Player[i][IsAtEvent] == 0)
			continue;

		SendClientMessage(i, E_COLOUR, string);
	}

	SendClientMessage(playerid, E_COLOUR, string);

	format(string, sizeof(string), "[E] %s: %s", Player[playerid][AdminName], params);
	OOCChatLog(string);

	return 1;
}

CMD:tp(playerid, params[])
	return cmd_goto(playerid, params);

CMD:tphere(playerid, params[])
	return cmd_get(playerid, params);

/*command(givearmour, playerid, params[])
{
	if(Player[playerid][Tied] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] == 1 || Player[playerid][AdminFrozen] == 1)
		return SendClientMessage(playerid, -1, "You can't do that right now, you're incapacitated!");

	if(Player[playerid][Materials] < 150)
		return SendClientMessage(playerid, WHITE, "You don't have enough materials!");

	if(Player[playerid][IsAtEvent] != 0)
		return SendClientMessage(playerid, -1, "You can't create weapons in an event");

	if(Player[playerid][CanMakeGun] == 0)
		return SendClientMessage(playerid, WHITE, "Please wait your job reload time.");

    if(Player[playerid][InHouse] == 0 || Houses[Player[playerid][InHouse]][Workbench] < 1)
        return SendClientMessage(playerid, -1, "You need to be in a house with a workbench to create this!");

	new id, string[128];

	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /givearmour [id]");

	if(id == playerid)
		return SendClientMessage(playerid, -1, "You cannot give your armour to yourself!");

	if(GetPVarInt(id, "GiveWeapon_Timeout") > gettime())
		return SendClientMessage(playerid, -1, "Wait until your current offer to this person has ended, before making another offer.");

	if(!IsPlayerConnectedEx(id))
		return 1;

	if(Player[id][PlayingHours] < 2)
		return SendClientMessage(playerid, -1, "You cannot sell weapons to someone who has less than 2 playing hours.");

	if(GetDistanceBetweenPlayers(id, playerid) > 6 || IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, WHITE, "You're too far away or in a vehicle.");

	//GetPlayerArmour(playerid, armour);
	SetPVarInt(id, "GiveWeapon_PlayerID", playerid);
	SetPVarInt(id, "GiveWeapon_Timeout", gettime() + 15);
	//SetPVarFloat(id, "GiveWeapon_Amount", armour);

	format(string, sizeof(string), "%s has offered you a kevlar vest. ((type /accept armour to receive the vest.))", GetNameEx(playerid));
	SendClientMessage(id, NICESKY, string);

	format(string, sizeof(string), "You have offered %s a kevlar vest.", GetNameEx(id));
	return SendClientMessage(playerid, NICESKY, string);
}*/

CMD:medialocker(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 5)
		return 1;

	if(IsPlayerInRangeOfPoint(playerid, 10, Groups[Player[playerid][Group]][SafeX], Groups[Player[playerid][Group]][SafeY], Groups[Player[playerid][Group]][SafeZ]))
	{
		new string[128];
		GivePlayerWeaponEx(playerid, 43);
		SendClientMessage(playerid, WHITE, "Have fun with your brand new camera!");
		format(string, sizeof(string), "%s has taken a %s (43) from the SAM locker.", GetName(playerid), GetWeaponNameEx(43));
		StatLog(string);
	}

	return 1;
}

command(checkmutes, playerid, params[])
{
	new id, string[128], ntime=0, vtime=0;

	if(isnull(params) || Player[playerid][AdminLevel] < 1)
		id = playerid;
	else if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /inv(entory) ([id])");

	if(!IsPlayerConnected(id))
		return SendClientMessage(playerid, -1, "That player is not connected");

	if(id == playerid)
		SendClientMessage(playerid, WHITE, "--------------------------------------------------");
	else
	{
		new str[128];
		format(str, sizeof(str), "------ %s's MUTES ------", GetName(id));
		SendClientMessage(playerid, WHITE, str);
	}

	if(Player[id][nMutedTime] > gettime())
		ntime = Player[id][nMutedTime] - gettime();
	if(Player[id][vMutedTime] > gettime())
		vtime = Player[id][vMutedTime] - gettime();
	format(string, sizeof(string), "nMutes: %d (%d sec)          vMutes: %d (%d sec)", Player[id][nMutedLevel], ntime, Player[id][vMutedLevel], vtime);
	SendClientMessage(playerid, WHITE, string);
	SendClientMessage(playerid, WHITE, "-------------------------------------");

	return 1;
}

command(buyboat, playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 1.5, Businesses[Player[playerid][InBusiness]][bInteractX], Businesses[Player[playerid][InBusiness]][bInteractY], Businesses[Player[playerid][InBusiness]][bInteractZ]) && Player[playerid][InBusiness] != 0)
		return SendClientMessage(playerid, GREY, "You must stand near the interaction point to do this.");

	if(Businesses[Player[playerid][InBusiness]][bType] == 13)
	{
		DeletePVar(playerid, "BuyingVIPCar");
		if(Player[playerid][VipRank] >= 1)
		{
			ShowPlayerDialog(playerid, 5541, DIALOG_STYLE_LIST, "Boat Dealership", "Boats\nVIP Boats", "Select", "Cancel");
		}
		else
		{
			ShowPlayerDialog(playerid, 5541, DIALOG_STYLE_LIST, "Boat Dealership", "Boats", "Select", "Cancel");
		}
	}
	return 1;
}
/*
command(bsdeposit, playerid, params[])
{
	
	new option[32], amount, string[128];
	if(Player[playerid][AdminLevel] < 8)
		return 1;
		
	if(sscanf(params, "s[32]D(0)", option, amount))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /bsdeposit [option] [amount]");
		return SendClientMessage(playerid, GREY, "OPTION: money, streetmats, standardmats, militarymats, cocaine, pot, speed, weapon, poorkevlar, standardkevlar, militarykevlar");
	}

	if(amount < 1)
		return SendClientMessage(playerid, WHITE, "Invalid amount!");

	if(Player[playerid][PlayingHours] < 2)
		return SendClientMessage(playerid, -1, "You need two playing hours before you can deposit into a business.");

	new bid = Player[playerid][InBusiness];
	if(bid == 0)
		return SendClientMessage(playerid, -1, "You are not inside any business.");

	if(Businesses[bid][bLinkedGroup] > 0)
	{
		if(!PlayerHasBusinessKey(playerid, bid))
		{
			if(Businesses[bid][bLinkedGroup] != Player[playerid][Group] && Player[playerid][InBusiness] != Player[playerid][Business])
				return SendClientMessage(playerid, -1, "You are not apart of this business group.");

			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Businesses[bid][bSafeX], Businesses[bid][bSafeY], Businesses[bid][bSafeZ]))
				return SendClientMessage(playerid, -1, "You are not close enough to the safe location.");
		}
	}
	else
	{
		if(!PlayerHasBusinessKey(playerid, bid) || bid == 0)
			return SendClientMessage(playerid, -1, "You must be in a business you have a key to to do this.");
	}

	if(!strcmp(option, "money", true))
	{
		if(amount > Player[playerid][Money])
			return SendClientMessage(playerid, -1, "You do not have that much money on you.");

		Businesses[bid][bVault] += amount;
		Player[playerid][Money] -= amount;

		format(string, sizeof(string), "You have deposited %s into the businesses vault.", PrettyMoney(amount));
		SendClientMessage(playerid, -1, string);

		format(string, sizeof(string), "* %s has deposited some money into the businesses vault.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);

		format(string, sizeof(string), "%s has deposited $%s ($%s) into their business vault ($%s)(%d).", GetName(playerid), IntToFormattedStr(amount), IntToFormattedStr(Player[playerid][Money] - amount), IntToFormattedStr(Businesses[bid][bVault] + amount), bid);
		MoneyLog(string);

		if(Player[playerid][PlayingHours] < 5 && Player[playerid][AdminLevel] < 1)
		{
			format(string, sizeof(string), "WARNING: %s may possibly be money-farming, they've deposited %s into business ID %d. (less than 5 playing hours)", GetName(playerid), PrettyMoney(amount), bid);
			SendToAdmins(ADMINORANGE, string, 0);
			WarningLog(string);
		}
	}
	else if(!strcmp(option, "streetmats", true))
	{
		if(amount > Player[playerid][Materials][0])
			return SendClientMessage(playerid, -1, "You do not have that much street grade materials on you.");

		Businesses[bid][bMaterials][0] += amount;
		Player[playerid][Materials][0] -= amount;

		format(string, sizeof(string), "You have deposited %s street grade materials into the businesses vault.", IntToFormattedStr(amount));
		SendClientMessage(playerid, -1, string);

		format(string, sizeof(string), "* %s has deposited some materials into the businesses vault.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);

		format(string, sizeof(string), "%s has deposited %s ($%s) street grade materials into their business vault ($%s)(%d).", GetName(playerid), IntToFormattedStr(amount), IntToFormattedStr(Player[playerid][Materials][0] - amount), IntToFormattedStr(Businesses[bid][bMaterials][0] + amount), bid);
		StatLog(string);
	}
	else if(!strcmp(option, "standardmats", true))
	{
		if(amount > Player[playerid][Materials][1])
			return SendClientMessage(playerid, -1, "You do not have that much standard grade materials on you.");

		Businesses[bid][bMaterials][1] += amount;
		Player[playerid][Materials][1] -= amount;

		format(string, sizeof(string), "You have deposited %s standard grade materials into the businesses vault.", IntToFormattedStr(amount));
		SendClientMessage(playerid, -1, string);

		format(string, sizeof(string), "* %s has deposited some materials into the businesses vault.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);

		format(string, sizeof(string), "%s has deposited %s ($%s) standard grade materials into their business vault ($%s)(%d).", GetName(playerid), IntToFormattedStr(amount), IntToFormattedStr(Player[playerid][Materials][1] - amount), IntToFormattedStr(Businesses[bid][bMaterials][1] + amount), bid);
		StatLog(string);
	}
	else if(!strcmp(option, "militarymats", true))
	{
		if(amount > Player[playerid][Materials][2])
			return SendClientMessage(playerid, -1, "You do not have that much military grade materials on you.");

		Businesses[bid][bMaterials][2] += amount;
		Player[playerid][Materials][2] -= amount;

		format(string, sizeof(string), "You have deposited %s military grade materials into the businesses vault.", IntToFormattedStr(amount));
		SendClientMessage(playerid, -1, string);

		format(string, sizeof(string), "* %s has deposited some materials into the businesses vault.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);

		format(string, sizeof(string), "%s has deposited %s ($%s) military grade materials into their business vault ($%s)(%d).", GetName(playerid), IntToFormattedStr(amount), IntToFormattedStr(Player[playerid][Materials][2] - amount), IntToFormattedStr(Businesses[bid][bMaterials][2] + amount), bid);
		StatLog(string);
	}
	else if(!strcmp(option, "cocaine", true))
	{
		if(amount > Player[playerid][Cocaine])
			return SendClientMessage(playerid, -1, "You do not have that much cocaine on you.");

		Businesses[bid][bCocaine] += amount;
		Player[playerid][Cocaine] -= amount;

		format(string, sizeof(string), "You have deposited %s cocaine into the businesses vault.", IntToFormattedStr(amount));
		SendClientMessage(playerid, -1, string);

		format(string, sizeof(string), "* %s has deposited some cocaine into the businesses vault.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);

		format(string, sizeof(string), "%s has deposited %s ($%s) cocaine into their business vault ($%s)(%d).", GetName(playerid), IntToFormattedStr(amount), IntToFormattedStr(Player[playerid][Cocaine] - amount), IntToFormattedStr(Businesses[bid][bCocaine] + amount), bid);
		StatLog(string);
	}
	else if(!strcmp(option, "pot", true))
	{
		if(amount > Player[playerid][Pot])
			return SendClientMessage(playerid, -1, "You do not have that much pot on you.");

		Businesses[bid][bPot] += amount;
		Player[playerid][Pot] -= amount;

		format(string, sizeof(string), "You have deposited %s pot into the businesses vault.", IntToFormattedStr(amount));
		SendClientMessage(playerid, -1, string);

		format(string, sizeof(string), "* %s has deposited some pot into the businesses vault.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);

		format(string, sizeof(string), "%s has deposited %s ($%s) pot into their business vault ($%s)(%d).", GetName(playerid), IntToFormattedStr(amount), IntToFormattedStr(Player[playerid][Pot] - amount), IntToFormattedStr(Businesses[bid][bPot] + amount), bid);
		StatLog(string);
	}
	else if(!strcmp(option, "speed", true))
	{
		if(amount > Player[playerid][Speed])
			return SendClientMessage(playerid, -1, "You do not have that much speed on you.");

		Businesses[bid][bSpeed] += amount;
		Player[playerid][Speed] -= amount;

		format(string, sizeof(string), "You have deposited %s speed into the businesses vault.", IntToFormattedStr(amount));
		SendClientMessage(playerid, -1, string);

		format(string, sizeof(string), "* %s has deposited some speed into the businesses vault.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);

		format(string, sizeof(string), "%s has deposited %s ($%s) Speed into their business vault ($%s)(%d).", GetName(playerid), IntToFormattedStr(amount), IntToFormattedStr(Player[playerid][Speed] - amount), IntToFormattedStr(Businesses[bid][bSpeed] + amount), bid);
		StatLog(string);
	}
	else if(!strcmp(option, "weapon", true))
	{
		new weapon = GetPlayerWeapon(playerid);

		if(weapon == 0)
			return 1;

		if(Businesses[bid][Weapons][0] == 0)
		{
			if(weapon == 46)
				return SendClientMessage(playerid, GREY, "You can't store that.");

			if(!PlayerHasWeapon(playerid, weapon))
				return 1;

			format(string, sizeof(string), "%s has stored a %s (%d) in their business safe (slot 1)(%d).", GetName(playerid), GetWeaponNameEx(weapon), weapon, bid);
			StatLog(string);

			format(string, sizeof(string), "* %s has deposited a weapon into the businesses vault.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);

			Businesses[bid][Weapons][0] = weapon;
			AdjustWeapon(playerid, weapon, 0);

			format(string, sizeof(string), "You have stored a %s in your business.", GetWeaponNameEx(weapon));
			SendClientMessage(playerid, WHITE, string);
		}
		else if(Businesses[bid][Weapons][1] == 0)
		{
			if(weapon == 46)
				return SendClientMessage(playerid, GREY, "You can't store that.");

			if(!PlayerHasWeapon(playerid, weapon))
				return 1;

			format(string, sizeof(string), "%s has stored a %s (%d) in their business safe (slot 2)(%d).", GetName(playerid), GetWeaponNameEx(weapon), weapon, bid);
			StatLog(string);

			format(string, sizeof(string), "* %s has deposited a weapon into the businesses vault.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);

			Businesses[bid][Weapons][1] = weapon;
			AdjustWeapon(playerid, weapon, 0);

			format(string, sizeof(string), "You have stored a %s in your business.", GetWeaponNameEx(weapon));
			SendClientMessage(playerid, WHITE, string);
		}
		else SendClientMessage(playerid, GREY, "You do not have room for another weapon!");
	}
	else if(!strcmp(option, "poorkevlar", true))
	{
		if(Player[playerid][HasArmour] != 100)
			return SendClientMessage(playerid, -1, "You do not have a poor kevlar vest.");
			
		if(Businesses[bid][bArmour][0] == 1)
			return SendClientMessage(playerid, -1, "There is already a poor kevlar vest in this business.");
			
		Businesses[bid][bArmour][0] = 1;
		Player[playerid][HasArmour] = 0;
		
		format(string, sizeof(string), "You have deposited a poor kevlar vest into the businesses vault.");
		SendClientMessage(playerid, -1, string);
		
		format(string, sizeof(string), "* %s has deposited a kevlar vest into the businesses vault.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);

		format(string, sizeof(string), "%s has deposited a poor kevlar vest into their business vault (%d).", GetName(playerid), bid);
		StatLog(string);
	}
	else if(!strcmp(option, "standardkevlar", true))
	{
		if(Player[playerid][HasArmour] != 115)
			return SendClientMessage(playerid, -1, "You do not have a standard kevlar vest.");

		if(Businesses[bid][bArmour][1] == 1)
			return SendClientMessage(playerid, -1, "There is already a standard kevlar vest in this business.");
				
		Businesses[bid][bArmour][1] = 1;
		Player[playerid][HasArmour] = 0;

		format(string, sizeof(string), "You have deposited a standard kevlar vest into the businesses vault.");
		SendClientMessage(playerid, -1, string);

		format(string, sizeof(string), "* %s has deposited a kevlar vest into the businesses vault.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);

		format(string, sizeof(string), "%s has deposited a standard kevlar vest into their business vault (%d).", GetName(playerid), bid);
		StatLog(string);
	}
	else if(!strcmp(option, "militarykevlar", true))
	{
		if(Player[playerid][HasArmour] != 130)
			return SendClientMessage(playerid, -1, "You do not have a military kevlar vest.");

		if(Businesses[bid][bArmour][2] == 1)
			return SendClientMessage(playerid, -1, "There is already a military kevlar vest in this business.");
				
		Businesses[bid][bArmour][2] = 1;
		Player[playerid][HasArmour] = 0;

		format(string, sizeof(string), "You have deposited a military kevlar vest into the businesses vault.");
		SendClientMessage(playerid, -1, string);

		format(string, sizeof(string), "* %s has deposited a kevlar vest into the businesses vault.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);

		format(string, sizeof(string), "%s has deposited a military kevlar vest into their business vault (%d).", GetName(playerid), bid);
		StatLog(string);
	}

	SaveBusiness(bid);
	return 1;
}
*/
/*
CMD:bswithdraw(playerid, params[])
{
	new option[32], amount, string[128];
	if(sscanf(params, "s[32]d", option, amount))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /bswithdraw [option] [amount]");
		return SendClientMessage(playerid, GREY, "OPTION: money, streetmats, standardmats, militarymats, cocaine, pot, speed, weapon, poorkevlar, standardkevlar, militarykevlar");
	}

	if(amount < 1)
		return SendClientMessage(playerid, WHITE, "Invalid amount!");

	new bid = Player[playerid][InBusiness];
	if(bid == 0)
		return SendClientMessage(playerid, -1, "You are not inside any business.");

	if(Businesses[bid][bLinkedGroup] > 0)
	{
		if(!PlayerHasBusinessKey(playerid, bid))
		{
			if(Businesses[bid][bLinkedGroup] != Player[playerid][Group] && Player[playerid][InBusiness] != Player[playerid][Business])
				return SendClientMessage(playerid, -1, "You are not apart of this business group.");

			if(Player[playerid][GroupRank] < 6)
				return SendClientMessage(playerid, -1, "You must be rank 6 or higher to use this.");

			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Businesses[bid][bSafeX], Businesses[bid][bSafeY], Businesses[bid][bSafeZ]))
				return SendClientMessage(playerid, -1, "You are not close enough to the safe location.");
		}
	}
	else
	{
		if(!PlayerHasBusinessKey(playerid, Player[playerid][InBusiness]) || Player[playerid][InBusiness] == 0)
			return SendClientMessage(playerid, -1, "You must be in a business you have a key to to do this.");
	}

	if(!strcmp(option, "money", true))
	{
		if(amount > Businesses[bid][bVault])
			return SendClientMessage(playerid, -1, "There is not that much money in the safe.");

		format(string, sizeof(string), "You have withdrawn %s from the businesses vault.", PrettyMoney(amount));
		SendClientMessage(playerid, -1, string);

		format(string, sizeof(string), "* %s has taken some money from the businesses vault.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);

		format(string, sizeof(string), "%s has withdrawn $%s ($%s) from their business vault ($%s)(%d).", GetName(playerid), IntToFormattedStr(amount), IntToFormattedStr(Player[playerid][Money] + amount), IntToFormattedStr(Businesses[bid][bVault] - amount), bid);
		MoneyLog(string);
		
		Businesses[bid][bVault] -= amount;
		Player[playerid][Money] += amount;
	}
	else if(!strcmp(option, "streetmats", true))
	{
		if(amount > Businesses[bid][bMaterials][0])
			return SendClientMessage(playerid, -1, "There is not that much street grade materials in the safe.");

		format(string, sizeof(string), "You have withdrawn %s street grade materials from the businesses vault.", IntToFormattedStr(amount));
		SendClientMessage(playerid, -1, string);

		format(string, sizeof(string), "* %s has taken some materials from the businesses vault.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);

		format(string, sizeof(string), "%s has withdrawn %s ($%s) street grade materials from their business vault ($%s)(%d).", GetName(playerid), IntToFormattedStr(amount), IntToFormattedStr(Player[playerid][Materials][0] + amount), IntToFormattedStr(Businesses[bid][bMaterials][0] - amount), bid);
		StatLog(string);
		
		Businesses[bid][bMaterials][0] -= amount;
		Player[playerid][Materials][0] += amount;
	}
	else if(!strcmp(option, "standardmats", true))
	{
		if(amount > Businesses[bid][bMaterials][1])
			return SendClientMessage(playerid, -1, "There is not that much standard grade materials in the safe.");

		format(string, sizeof(string), "You have withdrawn %s standard grade materials from the businesses vault.", IntToFormattedStr(amount));
		SendClientMessage(playerid, -1, string);

		format(string, sizeof(string), "* %s has taken some materials from the businesses vault.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);

		format(string, sizeof(string), "%s has withdrawn %s ($%s) standard grade materials from their business vault ($%s)(%d).", GetName(playerid), IntToFormattedStr(amount), IntToFormattedStr(Player[playerid][Materials][1] + amount), IntToFormattedStr(Businesses[bid][bMaterials][1] - amount), bid);
		StatLog(string);
		
		Businesses[bid][bMaterials][1] -= amount;
		Player[playerid][Materials][1] += amount;
	}
	else if(!strcmp(option, "militarymats", true))
	{
		if(amount > Businesses[bid][bMaterials][2])
			return SendClientMessage(playerid, -1, "There is not that much military grade materials in the safe.");

		format(string, sizeof(string), "You have withdrawn %s military grade materials from the businesses vault.", IntToFormattedStr(amount));
		SendClientMessage(playerid, -1, string);

		format(string, sizeof(string), "* %s has taken some materials from the businesses vault.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);

		format(string, sizeof(string), "%s has withdrawn %s ($%s) military grade materials from their business vault ($%s)(%d).", GetName(playerid), IntToFormattedStr(amount), IntToFormattedStr(Player[playerid][Materials][2] + amount), IntToFormattedStr(Businesses[bid][bMaterials][2] - amount), bid);
		StatLog(string);

		Businesses[bid][bMaterials][2] -= amount;
		Player[playerid][Materials][2] += amount;
	}
	else if(!strcmp(option, "cocaine", true))
	{
		if(amount > Businesses[bid][bCocaine])
			return SendClientMessage(playerid, -1, "There is not that much cocaine in the safe.");

		format(string, sizeof(string), "You have withdrawn %s cocaine from the businesses vault.", IntToFormattedStr(amount));
		SendClientMessage(playerid, -1, string);

		format(string, sizeof(string), "* %s has taken some cocaine from the businesses vault.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);

		format(string, sizeof(string), "%s has withdrawn %s ($%s) cocaine from their business vault ($%s)(%d).", GetName(playerid), IntToFormattedStr(amount), IntToFormattedStr(Player[playerid][Cocaine] + amount), IntToFormattedStr(Businesses[bid][bCocaine] - amount), bid);
		StatLog(string);
		
		Businesses[bid][bCocaine] -= amount;
		Player[playerid][Cocaine] += amount;
	}
	else if(!strcmp(option, "pot", true))
	{
		if(amount > Businesses[bid][bPot])
			return SendClientMessage(playerid, -1, "There is not that much pot in the safe.");

		format(string, sizeof(string), "You have withdrawn %s pot from the businesses vault.", IntToFormattedStr(amount));
		SendClientMessage(playerid, -1, string);

		format(string, sizeof(string), "* %s has taken some pot from the businesses vault.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);

		format(string, sizeof(string), "%s has withdrawn %s ($%s) pot from their business vault ($%s)(%d).", GetName(playerid), IntToFormattedStr(amount), IntToFormattedStr(Player[playerid][Pot] + amount), IntToFormattedStr(Businesses[bid][bPot] - amount), bid);
		StatLog(string);
		
		Businesses[bid][bPot] -= amount;
		Player[playerid][Pot] += amount;
	}
	else if(!strcmp(option, "speed", true))
	{
		if(amount > Businesses[bid][bSpeed])
			return SendClientMessage(playerid, -1, "There is not that much speed in the safe.");

		format(string, sizeof(string), "You have withdrawn %s speed from the businesses vault.", IntToFormattedStr(amount));
		SendClientMessage(playerid, -1, string);

		format(string, sizeof(string), "* %s has taken some speed from the businesses vault.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);

		format(string, sizeof(string), "%s has withdrawn %s ($%s) Speed from their business vault ($%s)(%d).", GetName(playerid), IntToFormattedStr(amount), IntToFormattedStr(Player[playerid][Speed] + amount), IntToFormattedStr(Businesses[bid][bSpeed] - amount), bid);
		StatLog(string);
		
		Businesses[bid][bSpeed] -= amount;
		Player[playerid][Speed] += amount;
	}
	else if(!strcmp(option, "weapon", true))
	{
		switch(amount)
		{
			case 1:
			{
				if(Businesses[bid][Weapons][0] == 0)
					return SendClientMessage(playerid, GREY, "You don't have a gun in that slot!");

				GivePlayerWeaponEx(playerid, Businesses[bid][Weapons][0]);
				format(string, sizeof(string), "You have taken a %s from your business.", GetWeaponNameEx(Businesses[bid][Weapons][0]));
				SendClientMessage(playerid, GREY, string);
				format(string, sizeof(string), "* %s has taken a weapon from the businesses vault.", GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, string);
				format(string, sizeof(string), "%s has taken a %s (%d) from their business. (slot 1)(%d)", GetName(playerid), GetWeaponNameEx(Businesses[bid][Weapons][0]), Businesses[bid][Weapons][0], bid);
				StatLog(string);
				Businesses[bid][Weapons][0] = 0;
			}
			case 2:
			{
				if(Businesses[bid][Weapons][1] == 0)
					return SendClientMessage(playerid, GREY, "You don't have a gun in that slot!");

				GivePlayerWeaponEx(playerid, Businesses[bid][Weapons][1]);
				format(string, sizeof(string), "You have taken a %s from your business.", GetWeaponNameEx(Businesses[bid][Weapons][1]));
				SendClientMessage(playerid, GREY, string);
				format(string, sizeof(string), "* %s has taken a weapon from the businesses vault.", GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, string);
				format(string, sizeof(string), "%s has taken a %s (%d) from their business. (slot 1)(%d)", GetName(playerid), GetWeaponNameEx(Businesses[bid][Weapons][1]), Businesses[bid][Weapons][1], bid);
				StatLog(string);
				Businesses[bid][Weapons][1] = 0;
			}
			default: SendClientMessage(playerid, GREY, "SYNTAX: /bswithdraw weapon [slot (1 - 2)]");
		}
	}
	else if(!strcmp(option, "poorkevlar", true))
	{
		if(Businesses[bid][bArmour][0] != 1)
			return SendClientMessage(playerid, -1, "There isn't a poor kevlar vest in this business.");

		if(Player[playerid][HasArmour] > 0)
			return SendClientMessage(playerid, -1, "You're already carrying a kevlar vest.");
			
		format(string, sizeof(string), "You have withdrawn a poor kevlar vest from the businesses vault.");
		SendClientMessage(playerid, -1, string);

		format(string, sizeof(string), "* %s has taken a kevlar vest from the businesses vault.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);

		format(string, sizeof(string), "%s has withdrawn a poor kevlar vest from their business vault (%d).", GetName(playerid), bid);
		StatLog(string);
		
		Businesses[bid][bArmour][0] = 0;
		Player[playerid][HasArmour] = 100;
	}
	else if(!strcmp(option, "standardkevlar", true))
	{
		if(Businesses[bid][bArmour][1] != 1)
			return SendClientMessage(playerid, -1, "There isn't a standard kevlar vest in this business.");

		if(Player[playerid][HasArmour] > 0)
			return SendClientMessage(playerid, -1, "You're already carrying a kevlar vest.");
			
		format(string, sizeof(string), "You have withdrawn a standard kevlar vest from the businesses vault.");
		SendClientMessage(playerid, -1, string);

		format(string, sizeof(string), "* %s has taken a kevlar vest from the businesses vault.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);

		format(string, sizeof(string), "%s has withdrawn a standard kevlar vest from their business vault (%d).", GetName(playerid), bid);
		StatLog(string);
		
		Businesses[bid][bArmour][1] = 0;
		Player[playerid][HasArmour] = 115;
	}
	else if(!strcmp(option, "militarykevlar", true))
	{
		if(Businesses[bid][bArmour][2] != 1)
			return SendClientMessage(playerid, -1, "There isn't a military kevlar vest in this business.");

		if(Player[playerid][HasArmour] > 0)
			return SendClientMessage(playerid, -1, "You're already carrying a kevlar vest.");
			
		format(string, sizeof(string), "You have withdrawn a military kevlar vest from the businesses vault.");
		SendClientMessage(playerid, -1, string);

		format(string, sizeof(string), "* %s has taken a kevlar vest from the businesses vault.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);

		format(string, sizeof(string), "%s has withdrawn a military kevlar vest from their business vault (%d).", GetName(playerid), bid);
		StatLog(string);
		
		Businesses[bid][bArmour][2] = 0;
		Player[playerid][HasArmour] = 130;
	}

	SaveBusiness(bid);
	return 1;
}
*/
command(pskill, playerid, params[])
{
	if(Player[playerid][AdminLevel] < 3)
		return 1;

	new id, skill, level;

	if(sscanf(params, "udd", id, skill, level))
	{
		if(Player[playerid][AdminLevel] > 2)
		{
			SendClientMessage(playerid, GREY, "SYNTAX: /pskill [playerid] [skill] [level]");
			SendClientMessage(playerid, GREY, "0 - 9mm, 1 - silenced pistol, 2 - Desert Eagle, 3 - shotgun, 4 - sawn-off shotgun");
			return SendClientMessage(playerid, GREY, "5 - SPAS-12, 6 - micro Uzi, 7 - MP5, 8 - AK47, 9 - M4, 10 - sniper rifle");
		}
	}

	if(skill < 0 || skill > 10)
		return SendClientMessage(playerid, WHITE, "Not a valid skill! (0 - 10)");

	if(level < 0 || level > 999)
		return SendClientMessage(playerid, WHITE, "Not a valid level! (0 - 999)");

	new string[128];

	switch(skill)
	{
		case 0:
			SetPlayerSkillLevel(id, WEAPONSKILL_PISTOL, level);
		case 1:
			SetPlayerSkillLevel(id, WEAPONSKILL_PISTOL_SILENCED, level);
		case 2:
			SetPlayerSkillLevel(id, WEAPONSKILL_DESERT_EAGLE, level);
		case 3:
			SetPlayerSkillLevel(id, WEAPONSKILL_SHOTGUN, level);
		case 4:
			SetPlayerSkillLevel(id, WEAPONSKILL_SAWNOFF_SHOTGUN, level);
		case 5:
			SetPlayerSkillLevel(id, WEAPONSKILL_SPAS12_SHOTGUN, level);
		case 6:
			SetPlayerSkillLevel(id, WEAPONSKILL_MICRO_UZI, level);
		case 7:
			SetPlayerSkillLevel(id, WEAPONSKILL_MP5, level);
		case 8:
			SetPlayerSkillLevel(id, WEAPONSKILL_AK47, level);
		case 9:
			SetPlayerSkillLevel(id, WEAPONSKILL_M4, level);
		case 10:
			SetPlayerSkillLevel(id, WEAPONSKILL_SNIPERRIFLE, level);
	}

	format(string, sizeof(string), "Skill %d set to %d for %s.", skill, level, GetName(id));
	SendClientMessage(playerid, WHITE, string);

	return 1;
}

CMD:installintercom(playerid, params[])
{
    if(Player[playerid][InterComSys] < 1)
		return SendClientMessage(playerid, WHITE, "You don't have an intercom system to install!");

	if(Player[playerid][InBusiness] == 0)
		return SendClientMessage(playerid, WHITE, "You need to be in a business to install an intercom system!");
		
	if(Player[playerid][InBusiness] > 0)
	{
		if(Player[playerid][InBusiness] != Player[playerid][Business])
			return SendClientMessage(playerid, WHITE, "The intercom system can only be installed by the owner of the business.");
		else
		{
			Player[playerid][InterComSys] = 0;
			Businesses[Player[playerid][InBusiness]][InterComInstalled] = 1;
			SendClientMessage(playerid, WHITE, "Intercom system has been installed in your business! Use /intercom to broadcast your messages immediately!");
		}
	}
	return 1;
}

CMD:intercom(playerid, params[])
{
	new message[128];
    if(sscanf(params, "s[128]", message))
		return SendClientMessage(playerid, GREY, "SYNTAX: /intercom [message]");

	new b = Player[playerid][Business], b2 = Player[playerid][BusinessKey];
	if(Player[playerid][InBusiness] != b && Player[playerid][InBusiness] != b2)
	    return SendClientMessage(playerid, WHITE, "You are not the owner or a key holder of this business!");
	    
	if(Businesses[Player[playerid][InBusiness]][InterComInstalled] != 1)
		return SendClientMessage(playerid, WHITE, "This business does not have an intercom system installed!");
	
	if(!IsPlayerInRangeOfPoint(playerid, 3, Businesses[Player[playerid][InBusiness]][bInteractX], Businesses[Player[playerid][InBusiness]][bInteractY], Businesses[Player[playerid][InBusiness]][bInteractZ]) && Player[playerid][InBusiness] != 0)
		return SendClientMessage(playerid, GREY, "You must stand near the interaction point to use the intercom!");
	
	format(message, sizeof(message), "[Intercom] %s says: %s", GetNameEx(playerid), message);
	SendBusinessMessage(0xCCFF33, message, Player[playerid][InBusiness]);
	ICChatLog(message);
	return 1;
}



command(installradio, playerid, params[])
{
	if(Player[playerid][PersonalRadio] < 1)
		return SendClientMessage(playerid, WHITE, "You don't have a personal radio to install!");

	if(Player[playerid][InHouse] == 0 && Player[playerid][InBusiness] == 0)
		return SendClientMessage(playerid, WHITE, "You need to be in a house or business to install a radio!");

	if(Player[playerid][InHouse] > 0)
	{
		if(Player[playerid][InHouse] != Player[playerid][House] && Player[playerid][InHouse] != Player[playerid][House2])
			return SendClientMessage(playerid, WHITE, "This isn't your house!");
		else
		{
			Player[playerid][PersonalRadio] = 0;
			Houses[Player[playerid][InHouse]][RadioInstalled] = 1;
			SaveHouse(Player[playerid][InHouse]);
			SendClientMessage(playerid, WHITE, "Personal radio has been installed in your house! Use /hradio to have fun!");
		}
	}

	if(Player[playerid][InBusiness] > 0)
	{
		if(Player[playerid][InBusiness] != Player[playerid][Business])
			return SendClientMessage(playerid, WHITE, "This isn't your business!");
		else
		{
			Player[playerid][PersonalRadio] = 0;
			Businesses[Player[playerid][InBusiness]][RadioInstalled] = 1;
			SaveBusiness(Player[playerid][InBusiness]);
			SendClientMessage(playerid, WHITE, "Personal radio has been installed in your business! Use /bradio to have fun!");
		}
	}

	return 1;
}

command(vippass, playerid, params[])
{
	if(Player[playerid][Business] == 0)
		return SendClientMessage(playerid, WHITE, "You don't own a business!");

	if(Player[playerid][InBusiness] != Player[playerid][Business])
		return SendClientMessage(playerid, WHITE, "This isn't your business!");

	new id, string[128];

	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /vippass [playerid]");

	if(GetDistanceBetweenPlayers(playerid, id) > 5)
		return SendClientMessage(playerid, -1, "That player is too far away!");

	if(Player[id][VIPPass] != Player[id][InBusiness])
	{
		Player[id][VIPPass] = Player[playerid][Business];
		Player[id][VIPPassTime] = gettime()+7200;
		format(string, sizeof(string), "[VIP] You've given a VIP pass to %s!", GetName(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "[VIP] %s has given you a VIP pass! It will expire in two hours.", GetName(playerid));
		return SendClientMessage(id, WHITE, string);
	}

	if(Player[id][VIPPass] == Player[id][InBusiness])
	{
		Player[id][VIPPass] = 0;
		Player[id][VIPPassTime] = 0;
		format(string, sizeof(string), "[VIP] You've revoked %s's VIP pass!", GetName(id));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "[VIP] %s has revoked your VIP pass!", GetName(playerid));
		SendClientMessage(id, WHITE, string);
	}

	return 1;
}

command(settax, playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 4)
		return 1;

	if(Player[playerid][GroupRank] < 9)
		return 1;

	new newtax;

	if(sscanf(params, "d", newtax))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /settax [percent]");
		return SendClientMessage(playerid, GREY, "Min: 5 percent / Max: 30 percent");
	}

	if(newtax < 5 || newtax > 30)
		return SendClientMessage(playerid, WHITE, "The minimum is 5 percent and the maximum is 30 percent!");

	if(TaxrateTimer > gettime())
	{
		new string[128], tmp;
		tmp = TaxrateTimer - gettime();
		SendClientMessage(playerid, WHITE, "The 24 hour period from the last tax change hasn't expired yet!");
		format(string, sizeof(string), "Tax rate changes are available again in %d hours.", tmp / 3600);
		return SendClientMessage(playerid, WHITE, string);
	}

	new string[128], timer;
	format(string, sizeof(string), "You have set the tax rate to %d percent (was %d percent).", newtax, Tax);
	SendClientMessage(playerid, WHITE, string);
	format(string, sizeof(string), "[MAYOR] %s has set the tax rate to %d percent (was %d percent).", GetName(playerid), newtax, Tax);
	StatLog(string);
	Tax = newtax;
	timer = gettime() + 86400;
	dini_IntSet("Assets.ini", "Taxrate", Tax);
	dini_IntSet("Assets.ini", "TaxrateTimer", timer);

	return 1;
}

command(cashtransfer, playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 4)
		return 1;

	if(Player[playerid][GroupRank] < 8)
	    return 1;

	new groupid, amount;

	if(sscanf(params, "dd", groupid, amount))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /cashtransfer [groupid] [amount]");
		SendClientMessage(playerid, GREY, "Valid groups: LSPD, LSMD, SAM / Maximum amount: $100,000");
		return SendClientMessage(playerid, GREY, "Cash transfers can only be done once every seven days.");
	}

	if(Groups[groupid][CommandTypes] != 1 && Groups[groupid][CommandTypes] != 3 && Groups[groupid][CommandTypes] != 5)
		return 1;

	if(amount < 0 || amount > 100000)
		return SendClientMessage(playerid, WHITE, "Amount must be between $0 and $100,000!");

	if(Groups[Player[playerid][Group]][SafeMoney] < amount)
		return SendClientMessage(playerid, WHITE, "There isn't that much money in the vault!");

	if(MayorTransfer > gettime())
	{
		new string[128], tmp;
		tmp = MayorTransfer - gettime();
		SendClientMessage(playerid, WHITE, "The seven day period from the last transfer hasn't expired yet!");
		format(string, sizeof(string), "Cash transfer is available again in %d days.", tmp / 86400);
		return SendClientMessage(playerid, WHITE, string);
	}

	if(Groups[groupid][CommandTypes] == 1)
	{
		new string[128];
		format(string, sizeof(string), "You have transferred %s to LSPD's vault.", IntToFormattedStr(amount));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "[MAYOR] %s has transferred %s (%s) to LSPD's vault (%s).", GetName(playerid), IntToFormattedStr(amount), IntToFormattedStr(Groups[TaxGroup][SafeMoney] - amount), IntToFormattedStr(Groups[groupid][SafeMoney] + amount));
		MoneyLog(string);
		Groups[groupid][SafeMoney] += amount;
		Groups[TaxGroup][SafeMoney] -= amount;
		MayorTransfer = gettime() + 604800;
		dini_IntSet("Assets.ini", "MayorTransfer", MayorTransfer);
	}
	else if(Groups[groupid][CommandTypes] == 3)
	{
		new string[128];
		format(string, sizeof(string), "You have transferred %s to LSMD's vault.", IntToFormattedStr(amount));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "[MAYOR] %s has transferred %s (%s) to LSMD's vault (%s).", GetName(playerid), IntToFormattedStr(amount), IntToFormattedStr(Groups[TaxGroup][SafeMoney] - amount), IntToFormattedStr(Groups[groupid][SafeMoney] + amount));
		MoneyLog(string);
		Groups[groupid][SafeMoney] += amount;
		Groups[TaxGroup][SafeMoney] -= amount;
		MayorTransfer = gettime() + 604800;
		dini_IntSet("Assets.ini", "MayorTransfer", MayorTransfer);
	}
	else if(Groups[groupid][CommandTypes] == 5)
	{
		new string[128];
		format(string, sizeof(string), "You have transferred %s to SAM's vault.", IntToFormattedStr(amount));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "[MAYOR] %s has transferred %s (%s) to SAM's vault (%s).", GetName(playerid), IntToFormattedStr(amount), IntToFormattedStr(Groups[TaxGroup][SafeMoney] - amount), IntToFormattedStr(Groups[groupid][SafeMoney] + amount));
		MoneyLog(string);
		Groups[groupid][SafeMoney] += amount;
		Groups[TaxGroup][SafeMoney] -= amount;
		MayorTransfer = gettime() + 604800;
		dini_IntSet("Assets.ini", "MayorTransfer", MayorTransfer);
	}

	return 1;
}

command(openvoting, playerid, params[])
{
	if(Player[playerid][AdminLevel] < 5)
		return 1;

	new name1[128], name2[128], name3[128];

	if(sscanf(params, "s[128]s[128]s[128]", name1, name2, name3))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /openvoting [name1] [name2] [name3]");
		return SendClientMessage(playerid, GREY, "If no name is available for name 3, use None.");
	}

	format(Candidate1, sizeof(Candidate1), name1);
	dini_Set("Assets.ini", "Candidate1", name1);
	Candidate1Votes = 0;
	dini_IntSet("Assets.ini", "Candidate1Votes", 0);
	format(Candidate2, sizeof(Candidate2), name2);
	dini_Set("Assets.ini", "Candidate2", name2);
	Candidate2Votes = 0;
	dini_IntSet("Assets.ini", "Candidate2Votes", 0);
	format(Candidate3, sizeof(Candidate3), name3);
	dini_Set("Assets.ini", "Candidate3", name3);
	Candidate3Votes = 0;
	dini_IntSet("Assets.ini", "Candidate3Votes", 0);
	VotingOpen = 1;
	dini_IntSet("Assets.ini", "VotingOpen", 1);

	new string[128];
	format(string, sizeof(string), "You have set the list of candidates to: 1.) %s 2.) %s 3.) %s", name1, name2, name3);
	SendClientMessage(playerid, WHITE, string);
	format(string, sizeof(string), "%s has set the list of candidates to: 1.) %s 2.) %s 3.) %s", Player[playerid][AdminName], name1, name2, name3);
	AdminActionsLog(string);
	SendClientMessageToAll(LIGHTRED, "The list of candidates has been selected! Visit City Hall and /castvote to choose one!");
	OOCChatLog(string);
	format(string, sizeof(string), "Candidate 1: %s | Candidate 2: %s | Candidate 3: %s", name1, name2, name3);
	SendClientMessageToAll(LIGHTRED, string);
	OOCChatLog(string);

	return 1;
}

command(closevoting, playerid, params[])
{
	if(Player[playerid][AdminLevel] < 5)
		return 1;

	new confirm[8];

	if(sscanf(params, "s[8]", confirm) || strcmp(confirm, "confirm", true))
		return SendClientMessage(playerid, GREY, "Please type /closevoting confirm to confirm this action.");

	if(VotingOpen == 0)
		return SendClientMessage(playerid, WHITE, "Voting is already closed!");

	VotingOpen = 0;
	foreach(Player, i)
		Player[i][HasVoted] = 0;
	dini_IntSet("Assets.ini", "VotingOpen", 0);
	new string[128];
	SendClientMessage(playerid, WHITE, "You have closed voting!");
	format(string, sizeof(string), "%s has closed voting!", Player[playerid][AdminName]);
	AdminActionsLog(string);
	format(string, sizeof(string), "%s has closed voting! Thank you to all who participated!", Player[playerid][AdminName]);
	SendClientMessageToAll(LIGHTRED, string);
	OOCChatLog(string);
	SendClientMessage(playerid, COLOR_PINK, "Don't forget to /countvotes and then /wipevotes!");

	return 1;
}

command(countvotes, playerid, params[])
{
	if(Player[playerid][AdminLevel] < 5)
		return 1;

	new string[128];
	format(string, sizeof(string), "Current votes: %s for %s | %s for %s | %s for %s", IntToFormattedStr(Candidate1Votes), Candidate1, IntToFormattedStr(Candidate2Votes), Candidate2, IntToFormattedStr(Candidate3Votes), Candidate3);
	SendClientMessage(playerid, WHITE, string);

	return 1;
}

command(wipevotes, playerid, params[])
{
	if(Player[playerid][AdminLevel] < 5)
		return 1;

	new confirm[8];

	if(sscanf(params, "s[8]", confirm) || strcmp(confirm, "confirm", true))
		return SendClientMessage(playerid, GREY, "Please type /wipevotes confirm to confirm this action.");

	format(Candidate1, sizeof(Candidate1), "None");
	dini_Set("Assets.ini", "Candidate1", "None");
	Candidate1Votes = 0;
	dini_IntSet("Assets.ini", "Candidate1Votes", 0);
	format(Candidate2, sizeof(Candidate2), "None");
	dini_Set("Assets.ini", "Candidate2", "None");
	Candidate2Votes = 0;
	dini_IntSet("Assets.ini", "Candidate2Votes", 0);
	format(Candidate3, sizeof(Candidate3), "None");
	dini_Set("Assets.ini", "Candidate3", "None");
	Candidate3Votes = 0;
	dini_IntSet("Assets.ini", "Candidate3Votes", 0);

	new string[128];
	SendClientMessage(playerid, WHITE, "You have wiped the votes!");
	format(string, sizeof(string), "%s has wiped the votes!", Player[playerid][AdminName]);
	AdminActionsLog(string);

	return 1;
}

command(castvote, playerid, params[])
{
	if(VotingOpen == 0)
		return SendClientMessage(playerid, WHITE, "Voting isn't open right now!");

	if(Player[playerid][PlayingHours] < 25)
		return SendClientMessage(playerid, WHITE, "Only players who have more than 25 playing hours can vote!");

	if(Player[playerid][HasVoted] == 1)
		return SendClientMessage(playerid, WHITE, "You've already voted!");

	if(Player[playerid][InGroupHQ] != TaxGroup)
		return SendClientMessage(playerid, WHITE, "You must be inside City Hall to vote!");

	new vote[255];
	if(sscanf(params, "s[255]", vote))
		return SendClientMessage(playerid, GREY, "SYNTAX: /castvote [player name]");

	if(strcmp(vote, Candidate1, true) == 0)
	{
		Candidate1Votes++;
		dini_IntSet("Assets.ini", "Candidate1Votes", Candidate1Votes);
	}
	else if(strcmp(vote, Candidate2, true) == 0)
	{
		Candidate2Votes++;
		dini_IntSet("Assets.ini", "Candidate2Votes", Candidate2Votes);
	}
	else if(strcmp(vote, Candidate3, true) == 0)
	{
		Candidate3Votes++;
		dini_IntSet("Assets.ini", "Candidate3Votes", Candidate3Votes);
	}
	else
	{
		return SendClientMessage(playerid, WHITE, "You did not select a valid candidate.");
	}

	Player[playerid][HasVoted] = 1;
	new string[128], ip[32];
	GetPlayerIp(playerid, ip, sizeof(ip));
	format(string, sizeof(string), "You have cast your vote for %s. Thank you for voting!", vote);
	SendClientMessage(playerid, WHITE, string);
	format(string, sizeof(string), "[VOTE] %s (%s) has voted for %s.", GetName(playerid), ip, vote);
	StatLog(string);

	return 1;
}

command(listcandidates, playerid, params[])
{
	new string[128];
	format(string, sizeof(string), "1: (%s) | 2: (%s) | 3: (%s)", Candidate1, Candidate2, Candidate3);
	SendClientMessage(playerid, WHITE, string);

	return 1;
}

CMD:contracts(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 2)
		return 1;

	if(Player[playerid][GroupRank] < 1) //Rank requirement may need to be changed
		return SendClientMessage(playerid, -1, "You are no high enough rank to use this command.");

	new string[128], Count, temp1[128], temp2[128];

	SendClientMessage(playerid, WHITE, "-------------------------------------------------------------------");

	foreach(Player, i)
	{
		if(Player[i][ContractPrice] >= 1 && Player[i][BeingAssasinated] == -1)
		{
			Count++;
			format(string, sizeof(string), "%d) TARGET: %s | PRICE: $%s.", Count, GetName(i), IntToFormattedStr(Player[i][ContractPrice]));
			SendClientMessage(playerid, GREY, string);

			for(new x = strlen(Player[i][Contract]); x > 0; x--)
			{
				if(Player[i][Contract][x] == '(')
				{
					strmid(temp1, Player[i][Contract], 0, x-1);
					strmid(temp2, Player[i][Contract], x+5, strlen(Player[i][Contract])-1);
					break;
				}
			}

			format(string, sizeof(string), "%d) REASON: %s.", Count, temp1);
			SendClientMessage(playerid, GREY, string);

			format(string, sizeof(string), "%d) ADDITIONAL: %s.", Count, Player[i][Contract2]);
			SendClientMessage(playerid, GREY, string);

			format(string, sizeof(string), "%d) CONTRACTED BY: %s.", Count, temp2);
			SendClientMessage(playerid, GREY, string);
		}
	}

	if(Count == 0)
	{
		SendClientMessage(playerid, GREY, "No contracts are currently available.");
	}

	return SendClientMessage(playerid, WHITE, "-------------------------------------------------------------------");
}

CMD:assigncontract(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 2)
		return 1;

	if(Player[playerid][GroupRank] < 2) //Rank requirement may need to be changed
		return SendClientMessage(playerid, -1, "You are no high enough rank to use this command.");

	new hitman, target;
	if(sscanf(params, "uu", hitman, target))
	{
		if(sscanf(params, "u", target))
			return SendClientMessage(playerid, GREY, "SYNTAX: /acceptcontract [hitman] [target]");

		hitman = playerid;
	}

	if(!IsPlayerConnected(hitman))
		return SendClientMessage(playerid, -1, "That player is not connected. (hitman)");

	if(!IsPlayerConnected(target))
		return SendClientMessage(playerid, -1, "That player is not connected. (target)");

	if(Player[hitman][Group] != Player[playerid][Group])
		return SendClientMessage(playerid, -1, "That player is not part of your group.");

	if(target == hitman)
		return SendClientMessage(playerid, -1, "You cannot assign someone to themselves.");

	if(Player[hitman][PlayerToAssasinate] != -1)
		return SendClientMessage(playerid, -1, "The hitman is still completing an assignment!");

	if(Player[target][ContractPrice] < 1 || Player[target][BeingAssasinated] != -1)
		return SendClientMessage(playerid, -1, "You are unable to assign a hit to this person.");

	Player[hitman][PlayerToAssasinate] = target;
	Player[target][BeingAssasinated] = hitman;

	new string[128];

	format(string, sizeof(string), "%s has been assigned to kill %s, by %s.", GetNameEx(hitman), GetNameEx(target), GetNameEx(playerid));
	GroupMessage(playerid, ANNOUNCEMENT, string);

	return 1;
}

CMD:revokecontract(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 2)
		return 1;

	if(Player[playerid][GroupRank] < 2) //Rank requirement may need to be changed
		return SendClientMessage(playerid, -1, "You are no high enough rank to use this command.");

	new hitman;

	if(sscanf(params, "u", hitman))
		return SendClientMessage(playerid, GREY, "SYNTAX: /revokecontract [hitman]");

	if(Player[hitman][Group] != Player[playerid][Group])
		return SendClientMessage(playerid, -1, "That player is not part of your group.");

	if(Player[hitman][PlayerToAssasinate] == -1)
		return SendClientMessage(playerid, -1, "The hitman is not completing an assignment!");

	Player[Player[hitman][PlayerToAssasinate]][BeingAssasinated] = -1;
	Player[hitman][PlayerToAssasinate] = -1;

	new string[128];

	format(string, sizeof(string), "%s had his assignment revoked by %s", GetNameEx(hitman), GetNameEx(playerid));
	GroupMessage(playerid, ANNOUNCEMENT, string);

	return 1;

}

command(enterhq, playerid, params[])
{
	#pragma unused params
	if(Groups[Player[playerid][Group]][CommandTypes] == 2) //Grouptype for The Agency
    {
		if(IsPlayerInRangeOfPoint(playerid, 2, AgencyDoorPosX, AgencyDoorPosY, AgencyDoorPosZ)) //Positions set with /movelocation
		{
			if(GetPlayerInterior(playerid) == AgencyDoorPosInt)
			{
				Player[playerid][InGroupHQ] = 4;
				Player[playerid][InBusiness] = 0;
				PlayerTextDrawHide(playerid, ExitTextdraw[playerid]);
				SetPlayerInterior(playerid, AgencyIntPosInt);
				SetPlayerVirtualWorld(playerid, 45004); //This SHOULD be the Agency's VW; it's important to have the correct VW so /safelocation and stuff will recognize the interior as The Agency's.
				SetPlayerPos_Update(playerid, AgencyIntPosX, AgencyIntPosY, AgencyIntPosZ);
			}
		}
	}

	return 1;
}

command(exithq, playerid, params[]) //Useable by anyone, no group restrictions. Otherwise players who you take it will get stuck and need to be TPed
{
	#pragma unused params
	if(IsPlayerInRangeOfPoint(playerid, 2, AgencyIntPosX, AgencyIntPosY, AgencyIntPosZ)) //Positions set with /movelocation
	{
		if(GetPlayerInterior(playerid) == AgencyIntPosInt)
		{
			Player[playerid][InGroupHQ] = 0;
			Player[playerid][InBusiness] = 38; //38 is the agency front cover business.
			SetPlayerPos_Update(playerid, AgencyDoorPosX, AgencyDoorPosY, AgencyDoorPosZ);
			SetPlayerInterior(playerid, AgencyDoorPosInt);
			SetPlayerVirtualWorld(playerid, 65038); //Virtual world = 65000 + businessid. (38 = agency front cover business)
		}
	}

	return 1;
}


//Random stocks
stock PrettyMoney(iValue) // Formats money like $1,000 .. $300,000
{
	new szCurEdit[75];

	if(iValue < 1000)
	{
		format(szCurEdit, sizeof(szCurEdit), "$%d", iValue);
	}
	else if(iValue >= 1000 && iValue < 10000)
	{
		format(szCurEdit, sizeof(szCurEdit), "$%d", iValue);
		strins(szCurEdit, ",", 2);
	}
	else if(iValue >= 10000 && iValue < 100000)
	{
		format(szCurEdit, sizeof(szCurEdit), "$%d", iValue);
		strins(szCurEdit, ",", 3);
	}
	else if(iValue >= 100000 && iValue < 1000000)
	{
		format(szCurEdit, sizeof(szCurEdit), "$%d", iValue);
		strins(szCurEdit, ",", 4);
	}
	else if(iValue >= 1000000 && iValue < 10000000)
	{
		format(szCurEdit, sizeof(szCurEdit), "$%d", iValue);
		strins(szCurEdit, ",", 2);
		strins(szCurEdit, ",", 6);
	}
	else if(iValue >= 10000000 && iValue < 100000000)
	{
		format(szCurEdit, sizeof(szCurEdit), "$%d", iValue);
		strins(szCurEdit, ",", 3);
		strins(szCurEdit, ",", 7);
	}
	else if(iValue >= 100000000 && iValue < 1000000000)
	{
		format(szCurEdit, sizeof(szCurEdit), "$%d", iValue);
		strins(szCurEdit, ",", 4);
		strins(szCurEdit, ",", 8);
	}
	return szCurEdit;
}

stock PutPlayerInVehInt(playerid, vehicle)
{
	new sql = GetVSQLID(vehicle), idx = GetVIndex(sql);
	if(sql == 0)
		return SendClientMessage(playerid, -1, "Can't put you inside the interior, report this issue.");

	switch(Veh[idx][attachedInteriorType])
	{
		case 0:
			printf("[script-error] PutPlayerInVehInt tried to put someone in vehInt 0");
		case 1:
		{
			Player[playerid][currentVehInteriorType] = 1;
			Player[playerid][currentVehInteriorVW] = sql;

			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, sql);
			SetPlayerPos_Update(playerid, 2303.8, 2441.2, -24.6);
			Veh[idx][intCap]++;
		}
	}
	return 1;
}

stock GetVehicleRelativePos(vehicleid, &Float:x, &Float:y, &Float:z, Float:xoff=0.0, Float:yoff=0.0, Float:zoff=0.0)
{
    new Float:rot;
    GetVehicleZAngle(vehicleid, rot);
    rot = 360 - rot;    // Making the vehicle rotation compatible with pawns sin/cos
    GetVehiclePos(vehicleid, x, y, z);
    x = floatsin(rot,degrees) * yoff + floatcos(rot,degrees) * xoff + x;
    y = floatcos(rot,degrees) * yoff - floatsin(rot,degrees) * xoff + y;
    z = zoff + z;
}

CMD:checkfuel(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "You must be in a vehicle to use this command.");

	new veh = GetPlayerVehicleID(playerid), sql = GetVSQLID(veh), idx = GetVIndex(sql);

	if(sql == 0)
		return SendClientMessage(playerid, -1, "This vehicle isn't saved.");

	if(IsABike(veh))
		return SendClientMessage(playerid, -1, "This vehicle doesn't use fuel.");

	new str[128];
	format(str, sizeof(str), "Fuel Status: [%d/100]", Veh[idx][Fuel]);
	SendClientMessage(playerid, -1, str);
	return 1;
}

CMD:remotechangerank(playerid, params[])
{
	new name[MAX_PLAYER_NAME], level;

	if(Player[playerid][Group] == 0)
		return SendClientMessage(playerid, -1, "You must be in a group to use this command.");

	if(GetPVarInt(playerid, "RCR_Delay") > gettime())
		return SendClientMessage(playerid, -1, "There is a delay to using this again.");

	SetPVarInt(playerid, "RCR_Delay", gettime() + 10);


	if(Groups[Player[playerid][Group]][CommandTypes] == 1 && Player[playerid][GroupRank] != 10)
		return SendClientMessage(playerid, -1, "You're not the required rank to use this command");

	if(sscanf(params, "s[24]d", name, level))
		return SendClientMessage(playerid, GREY, "SYNTAX: /remotechangerank [name] [rank]");

	if(level > 10 || level < 0)
		return SendClientMessage(playerid, -1, "Must be a valid rank!");

	if(!IsPlayerRegistered(name))
		return SendClientMessage(playerid, WHITE, "That player doesn't exist.");

	if(GetRemoteIntValue(name, "Group") != Player[playerid][Group])
		return SendClientMessage(playerid, -1, "You must be in the same group as the person.");

	new query[255];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE playeraccounts SET GroupRank = '%d' WHERE NormalName = '%e'", level, name);
	mysql_tquery(MYSQL_MAIN, query, "OnQueryFinish", "dddss", THREAD_REMOTE_CHANGE_FACTION_RANK, playerid, level, name, "");
	return 1;
}

/*CMD:useatm(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "You can't use an ATM when you're in a vehicle.");

	new idx = -1;
	for(new i; i < sizeof(ATMCords); i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, ATMCords[i][0], ATMCords[i][1], ATMCords[i][2]))
		{
			idx = i;
			break;
		}
	}

	if(idx == -1)
		return SendClientMessage(playerid, -1, "You're not in range of an ATM.");

	new string[128];
	format(string, sizeof(string), "* %s inserts their card into the machine", GetName(playerid));
	NearByMessage(playerid, NICESKY, string);

	if(Player[playerid][BankStatus] == 1)
	{
		format(string, sizeof string, "* %s takes their card from the machine", GetName(playerid));
		NearByMessage(playerid, NICESKY, string);
		SendClientMessage(playerid, YELLOW, "Your bank account is frozen!");
		return 1;
	}

	format(string, sizeof(string), "{FFFFFF}Balance: {00C711}%s{FFFFFF}\nDeposit\nWithdraw", PrettyMoney(Player[playerid][BankMoney]));
	ShowPlayerDialog(playerid, ATM_MAIN_DIALOG, DIALOG_STYLE_LIST, "Los Santos ATM", string, "Next", "Close");
	return 1;
}*/

CMD:lockenf(playerid, params[])
{
	new veh, sql, idx,
	string[128];
	if(Player[playerid][currentVehInteriorVW]  == 0 || GetPlayerVirtualWorld(playerid) == 0)
	{
		veh = NearestVehicle(playerid);
		sql = GetVSQLID(veh);
		idx = GetVIndex(sql);

		if(sql == 0)
			return SendClientMessage(playerid, -1, "No vehicles in range.");

		if(GetVehicleModel(veh) != 427)
			return SendClientMessage(playerid, -1, "No enforcer in range.");

		if(!IsVehicleFacingPlayer(veh, playerid, true))
			return SendClientMessage(playerid, -1, "You must be at the back of the vehicle.");

	}
	else
	{
		sql = Player[playerid][currentVehInteriorVW],
		idx = GetVIndex(sql),
		veh = Veh[idx][Link];

		if(Player[playerid][currentVehInteriorType] != 1)
			return SendClientMessage(playerid, -1, "You're in the wrong vehicle interior.");
	}

	if(Groups[Player[playerid][Group]][CommandTypes] != 1)
		return SendClientMessage(playerid, -1, "You don't have the keys to lock this vehicle.");

	if(Veh[idx][attachedInteriorLock] == 0)
	{
		format(string, sizeof(string), "* %s locks the enforcers doors", GetNameEx(playerid));
		Veh[idx][attachedInteriorLock] = 1;
	}
	else
	{
		format(string, sizeof(string), "* %s unlocks the enforcers doors", GetNameEx(playerid));
		Veh[idx][attachedInteriorLock] = 0;
	}
	NearByMessage(playerid, NICESKY, string);
	return 1;
}

CMD:enterenf(playerid, params[])
{
	new veh = NearestVehicle(playerid), Float:carPos[3];
	GetVehiclePos(veh, carPos[0], carPos[1], carPos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 7, carPos[0], carPos[1], carPos[2]))
		return SendClientMessage(playerid, -1, "No vehicles in range.");

	if(GetVehicleModel(veh) != 427)
		return SendClientMessage(playerid, -1, "No enforcers in range.");

	new sql = GetVSQLID(veh), idx = GetVIndex(sql);

	if(sql == 0)
		return SendClientMessage(playerid, -1, "The vehicle isn't saved in the database.");

	if(Veh[idx][attachedInteriorLock] == 1)
		return SendClientMessage(playerid, -1, "The enforcer is locked.");

	if(!IsVehicleFacingPlayer(veh, playerid, true))
		return SendClientMessage(playerid, -1, "You must be at the back of the vehicle.");

	Veh[idx][attachedInteriorType] = 1;

	if(Veh[idx][attachedInteriorType] == 0)
		return SendClientMessage(playerid, -1, "This vehicle has no inside.");

	if(Veh[idx][intCap] >= 6)
		return SendClientMessage(playerid, -1, "Its too crowded inside.");

	PutPlayerInVehInt(playerid, veh);
	new string[128];
	format(string, sizeof(string), "* %s opens the door and gets inside the van", GetNameEx(playerid));
	NearByMessage(playerid, NICESKY, string);
	return 1;
}

CMD:exitenf(playerid, params[])
{
	if(Player[playerid][currentVehInteriorVW] == 0 || GetPlayerVirtualWorld(playerid) == 0) //Equals the SQLID
		return SendClientMessage(playerid, -1, "You're currently not inside a vehicle interior.");

	new sql = Player[playerid][currentVehInteriorVW],
	idx = GetVIndex(sql),
	veh = Veh[idx][Link];

	if(Veh[idx][attachedInteriorLock] == 1)
		return SendClientMessage(playerid, -1, "You can't exit the vehicle, its locked.");

	if(Player[playerid][Tazed] == 1)
		return SendClientMessage(playerid, -1, "You can't do this right now."); // Add more things like this

	new Float:pos[3];
	GetVehicleRelativePos(veh, pos[0], pos[1], pos[2], 0.0, -4.0, 0.0);

	SetPlayerPos_Update(playerid, pos[0], pos[1], pos[2]);
	SetPlayerVirtualWorld(playerid, 0);
	Player[playerid][currentVehInteriorVW] = 0;
	Veh[idx][intCap]--;
	return 1;
}

CMD:back(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
	    return 1;

    SetPlayerInterior(playerid, GetPVarInt(playerid, "lastInt")-1);
	SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "lastVW")-1);
	SetPlayerPos_Update(playerid, GetPVarFloat(playerid, "lastX"), GetPVarFloat(playerid, "lastY"), GetPVarFloat(playerid, "lastZ"));
	//SetPlayerPosEx(playerid, GetPVarFloat(playerid, "lastX"), GetPVarFloat(playerid, "lastY"), GetPVarFloat(playerid, "lastZ"), GetPVarInt(playerid, "lastInt"), GetPVarInt(playerid, "lastVW"));
	SendClientMessage(playerid, -1, "You have been teleported back to your last saved position.");
	return 1;
}

CMD:sendback(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
	    return 1;

	new targetid;
	if(sscanf(params, "u", targetid))
	    return SendClientMessage(playerid, GREY, "SYNTAX: /sendback [playerid]");

	if(!IsPlayerConnectedEx(targetid))
	    return SendClientMessage(playerid, WHITE, "Player is not connected or is offline.");

	if(Player[targetid][AdminLevel] > Player[playerid][AdminLevel])
	    return SendClientMessage(playerid, WHITE, "You cannot do this to a higher level admin!");

    new str[128];
	format(str, sizeof(str), "You have sent %s back to their last saved position.", GetName(targetid));
	SendClientMessage(playerid, -1, str);
	//SetPlayerPosEx(targetid, GetPVarFloat(targetid, "lastX"), GetPVarFloat(targetid, "lastY"), GetPVarFloat(targetid, "lastZ"), GetPVarInt(targetid, "lastInt"), GetPVarInt(targetid, "lastVW"));
	SetPlayerInterior(targetid, GetPVarInt(targetid, "lastInt")-1);
	SetPlayerVirtualWorld(targetid, GetPVarInt(targetid, "lastVW")-1);
	SetPlayerPos_Update(targetid, GetPVarFloat(targetid, "lastX"), GetPVarFloat(targetid, "lastY"), GetPVarFloat(targetid, "lastZ"));
	return 1;
}


/*CMD:killby(playerid, params[])
{
	new target, player;
	if(sscanf(params, "uu", target, player))
		return SendClientMessage(playerid, 1 ,"SYNTAX: /killby target player");

	SetPlayerHealth(player, -1);
	SetPVarInt(playerid, "FUCKBALL", 1);
	OnPlayerDeath(player, target, 23);
	return 1;
}*/

/* LSMD System Commands */

CMD:mduty(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 3)
		return SendClientMessage(playerid, -1, "You're not a part of the LSMD.");

	if(Player[playerid][InGroupHQ] != Player[playerid][Group] && Businesses[Player[playerid][InBusiness]][bType] != 17)
		return SendClientMessage(playerid, -1, "You must be inside the LSMD HQ or a medical center to go on and off duty.");

	if(Player[playerid][MDuty] == 1)
		Player[playerid][MDuty] = 0;
	else
		Player[playerid][MDuty] = 1;

	SendClientMessage(playerid, LSFMD_PEACH, Player[playerid][MDuty] ? ("You're now on LSMD duty.") : ("You're now off LSMD duty."));
	return 1;
}

CMD:acceptems(playerid, params[])
{
	new target;

	if(Groups[Player[playerid][Group]][CommandTypes] != 3)
		return SendClientMessage(playerid, -1, "You're not in the LSMD.");

	if(Player[playerid][MDuty] == 0)
		return SendClientMessage(playerid, -1, "You're not on LSMD duty.");

	if(sscanf(params, "u", target))
		return SendClientMessage(playerid, -1, "SYNTAX: /acceptems [playerid]");

	if(!IsPlayerConnectedEx(target))
		return SendClientMessage(playerid, -1, "That player is offline.");

	if(Player[target][EMSCalled] != 1)
		return SendClientMessage(playerid, -1, "That person did not request the LSMD.");

	new Float:x, Float:y, Float:z, string[128];

	if(Player[target][InHouse] != 0)
	{
		new hId = Player[target][InHouse];
		x = Houses[hId][hExteriorX];
		y = Houses[hId][hExteriorY];
		z = Houses[hId][hExteriorZ];
	}
	else if(Player[target][InBusiness] != 0)
	{
		new bId = Player[target][InBusiness];
		x = Businesses[bId][bExteriorX];
		y = Businesses[bId][bExteriorY];
		z = Businesses[bId][bExteriorZ];
	}
	else if(Player[target][InGroupHQ] != 0)
	{
		new gId = Player[target][InGroupHQ];
		x = Groups[gId][HQExteriorX];
		y = Groups[gId][HQExteriorY];
		z = Groups[gId][HQExteriorZ];
	}
	else
		GetPlayerPos(target, x, y, z);
	Player[playerid][Checkpoint] = 6969;
	SetPlayerCheckpoint(playerid, x, y, z, 3);
	format(string, sizeof(string), "[LSMD] %s has accepted the call for %s", GetName(playerid), GetName(target));
	foreach(Player, p)
	{
		if(Groups[Player[p][Group]][CommandTypes] == 3 && Player[p][MDuty] == 1)
			SendClientMessage(p, LSFMD_PEACH, string);
	}

	Player[target][EMSCalled] = 2;
	Player[playerid][EMSAccepted] = target;
	Player[target][MyMedic] = playerid;
	SendClientMessage(playerid, -1, "You have accepted the call, a checkpoint has been set.");
	SendClientMessage(target, YELLOW, "A paramedic has accepted your call, please wait patiently.");

	//Increase the bleed out time
	//SetPVarInt(target, "BleedingOutTime", GetPVarInt(target, "BleedingOutTime") + 80);
	return 1;
}

CMD:loadpatient(playerid, params[])
{
	new target;

	if(Groups[Player[playerid][Group]][CommandTypes] != 3)
		return SendClientMessage(playerid, -1, "You must be in the LSMD.");

	if(Player[playerid][MDuty] == 0)
		return SendClientMessage(playerid, -1, "You must be on LSMD duty.");

	if(sscanf(params, "u", target))
		return SendClientMessage(playerid, -1, "SYNTAX: /loadpatient [Id/name]");

	if(!IsPlayerConnectedEx(target))
		return SendClientMessage(playerid, -1, "That player is offline.");

	if(GetPVarInt(target, "BleedingOutTime") == 0)
		return SendClientMessage(playerid, -1, "That player isn't bleeding out.");

	new veh = NearestVehicle(playerid),
	sql = GetVSQLID(veh), idx = GetVIndex(sql), Float:carPos[3];
	GetVehiclePos(veh, carPos[0], carPos[1], carPos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 7, carPos[0], carPos[1], carPos[2]))
		return SendClientMessage(playerid, -1, "You're not close enough to an ambulance.");

	if(Groups[Veh[idx][Group]][CommandTypes] != 3 || GetVehicleModel(veh) != 416)
		return SendClientMessage(playerid, -1, "You're not close enough to an ambulance.");

	if(!IsVehicleFacingPlayer(veh, playerid, true))
		return SendClientMessage(playerid, -1, "You must be at the back of the vehicle.");

	if(GetDistanceBetweenPlayers(playerid, target) > 5)
		return SendClientMessage(playerid, -1, "You're too far from the patient.");

	if(GetEmptyBackSeat(veh) == -1)
		return SendClientMessage(playerid, -1, "That vehicle has no empty seats.");

	new string[128];
	format(string, sizeof(string), "* %s loads %s into the back of the ambulance", GetName(playerid), GetName(target));
	NearByMessage(playerid, NICESKY, string);
	PutPlayerInVehicle(target, veh, GetEmptyBackSeat(veh));
	TogglePlayerControllable(target, false);
	SendClientMessage(playerid, YELLOW, "Now get that patient to the hospital! (/findhospital - /unloadpatient)"); //change name
	return 1;
}

/* CMD:unloadpatient(playerid, params[])
{
	new target;
	if(Groups[Player[playerid][Group]][CommandTypes] != 3)
		return SendClientMessage(playerid, -1, "You must be in the LSMD.");

	if(Player[playerid][MDuty] == 0)
		return SendClientMessage(playerid, -1, "You must be on LSMD duty.");

	if(sscanf(params, "u", target))
		return SendClientMessage(playerid, -1, "SYNTAX: /unloadpatient [Id/name]");

	if(!IsPlayerConnectedEx(target))
		return SendClientMessage(playerid, -1, "That player is offline.");

	new veh = NearestVehicle(playerid);

	new sql = GetVSQLID(veh), idx = GetVIndex(sql), Float:carPos[3];
	GetVehiclePos(veh, carPos[0], carPos[1], carPos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, 7, carPos[0], carPos[1], carPos[2]))
		return SendClientMessage(playerid, -1, "You're not close enough to an ambulance.");

	if(Groups[Veh[idx][Group]][CommandTypes] != 3 || GetVehicleModel(veh) != 416)
		return SendClientMessage(playerid, -1, "You're not close enough to an ambulance.");

	if(!IsVehicleFacingPlayer(veh, playerid, true))
		return SendClientMessage(playerid, -1, "You must be at the back of the vehicle.");

	if(GetDistanceBetweenPlayers(playerid, target) > 10)
		return SendClientMessage(playerid, -1, "You're too far from the patient.");

	if(!IsPlayerInVehicle(target, veh))
		return SendClientMessage(playerid, -1, "That player isn't in the ambulance.");

	if(GetPVarInt(target, "BleedingOutTime") == 0)
		return SendClientMessage(playerid, -1, "That player isn't bleeding out.");

	new point = -1;
	for(new x; x < sizeof(LSFMD_Dropoff); x++)
	{
		if(IsPlayerInRangeOfPoint(target, 12 ,LSFMD_Dropoff[x][0], LSFMD_Dropoff[x][1], LSFMD_Dropoff[x][2]))
		{
			point = x;
			break;
		}
	}

	if(point == -1)
		return SendClientMessage(playerid, -1, "You're not close enough to a drop off location.");

	TreatPatient(target, playerid, LSFMD_Dropoff[point][3], LSFMD_Dropoff[point][4], LSFMD_Dropoff[point][5]);
	if(Player[playerid][Checkpoint] == 500)
	{
		DisablePlayerCheckpoint(playerid);
		Player[playerid][Checkpoint] = 0;
	}
	return 1;
}

stock TreatPatient(playerid, medic, Float:x, Float:y, Float:z)
{
	new str[128];
	SendClientMessage(playerid, -1, "You have been treated at the hospital and have been released.");
	format(str, sizeof(str), "You were charged %s for the medical bill.", PrettyMoney(DeathMoneyLoss(playerid)));
	SendClientMessage(playerid, -1, str);
	Player[playerid][Money] -= DeathMoneyLoss(playerid);
	Groups[6][SafeMoney] += DeathMoneyLoss(playerid);
	SetPlayerPos_Update(playerid, x, y, z);
	SetCameraBehindPlayer(playerid);
	SetPlayerVirtualWorld(playerid, 0);
	DeletePVar(playerid, "BleedingOutTime");
	Player[playerid][EMSCalled] = 0;
	Player[medic][EMSAccepted] = -1;
	Player[playerid][MyMedic] = -1;
	TogglePlayerControllable(playerid, true);
}

CMD:findhospital(playerid, params[])
{
	if(isnull(params))
		return SendClientMessage(playerid, -1, "SYNTAX: /findhospital [saints/general]");

	if(!strcmp(params, "general", true))
	{
		SetPlayerCheckpoint(playerid, LSFMD_Dropoff[0][0], LSFMD_Dropoff[0][1], LSFMD_Dropoff[0][2], 3);
		SendClientMessage(playerid, -1, "A checkpoint to that hospital has been set.");
		Player[playerid][Checkpoint] = 500;
	}
	else if(!strcmp(params, "saints", true))
	{
		SetPlayerCheckpoint(playerid, LSFMD_Dropoff[1][0], LSFMD_Dropoff[1][1], LSFMD_Dropoff[1][2], 3);
		SendClientMessage(playerid, -1, "A checkpoint to that hospital has been set.");
		Player[playerid][Checkpoint] = 500;
	}
	else
		SendClientMessage(playerid, -1, "Invalid location.");

	return 1;
}

CMD:treat(playerid, params[])
{
	new target, drug[12];

	if(Groups[Player[playerid][Group]][CommandTypes] != 3 || Player[playerid][MDuty] != 1)
		return SendClientMessage(playerid, -1, "You must be on LSMD duty.");

	if(sscanf(params, "us[12]", target, drug))
	{
		SendClientMessage(playerid, -1, "SYNTAX: /treat [Player] [Option]");
		return SendClientMessage(playerid, -1, "Options: morphine, cpr");
	}

	if(!IsPlayerConnectedEx(target))
		return SendClientMessage(playerid, -1, "That player is offline.");

	if(GetDistanceBetweenPlayers(playerid, target) > 5)
		return SendClientMessage(playerid, -1, "That player is too far.");

	if(GetPVarInt(target, "BleedingOutTime") == 0)
		return SendClientMessage(playerid, -1, "That player is not bleeding out.");

	if(!strcmp(drug, "morphine", true))
	{
		if(GetPVarInt(playerid, "LSFMD_LastMorphine") + 120 > gettime())
			return SendClientMessage(playerid, -1, "You may only administer this drug every 2 minutes.");

		new string[128];
		format(string, sizeof(string), "* %s grabs %s's arms and injects them with morphine", GetName(playerid), GetName(target));
		NearByMessage(playerid, NICESKY, string);
		SetPVarInt(target, "LSFMD_Morphine", GetPVarInt(target, "LSFMD_Morphine") + 1);

		if(GetPVarInt(target, "LSFMD_Morphine") >= 4)
		{
			format(string, sizeof(string), "* %s has gone unconscious", GetName(target));
			NearByMessage(target, NICESKY, string);
			SetPVarInt(target, "BleedingOutTime", 3);
			DeletePVar(target, "LSFMD_Morphine");
		}
		else
			SetPVarInt(target, "BleedingOutTime", GetPVarInt(target, "BleedingOutTime") + 240);
		SetPVarInt(playerid, "LSFMD_LastMorphine", gettime());
		DeathClock(playerid, target, 1);
	}
	else if(!strcmp(drug, "cpr", true))
	{
		if(GetPVarInt(target, "LSFMD_Cprtime") > gettime())
			return SendClientMessage(playerid, -1, "You may only use this every 2 minutes.");

		if(IsPlayerInAnyVehicle(target))
			return SendClientMessage(playerid, -1, "That player needs to be out of a vehicle.");


		new Float:fX, Float:fY, Float:x, Float:y, Float:z;
		GetXYInFrontOfPlayer(target, fX, fY, 3);
		GetPlayerPos(target, x, y, z);

		if(GetDistanceBetweenPoints(x, y, z, fX, fY, z) > 3)
			return SendClientMessage(playerid, -1, "The player needs to be infront of you.");

		ApplyAnimation(playerid, "MEDIC", "CPR", 4.0, 0, 0, 0, 0, 0);
		new str[128];
		format(str, sizeof str, "* %s begins to apply cpr to %s", GetName(playerid), GetName(target));
		NearByMessage(playerid, NICESKY, str);
		SetPVarInt(target, "BleedingOutTime", GetPVarInt(target, "BleedingOutTime") + 45);
		SetPVarInt(target, "LSFMD_Cprtime", gettime() + 120);
		DeathClock(playerid, target, 1);
	}
	else
		return SendClientMessage(playerid, -1, "Invalid option.");

	return 1;
} */

stock GetEmptyBackSeat(veh)
{
	new seat1, seat2;
	foreach(Player, p)
	{
		if(!IsPlayerInAnyVehicle(p))
			continue;

		if(IsPlayerInVehicle(p, veh))
		{
			if(GetPlayerVehicleSeat(p) == 2)
				seat1++;
			else if(GetPlayerVehicleSeat(p) == 3)
				seat2++;
		}
	}
	if(seat1 == 0)
		return 2;
	else if(seat2 == 0)
		return 3;

	return -1;
}

stock GetIntZone(playerid)
{
	new Float:x, Float:y, Float:z, zone[MAX_ZONE_NAME];
	if(Player[playerid][InHouse] != 0)
	{
		new hId = Player[playerid][InHouse];
		x = Houses[hId][hExteriorX];
		y = Houses[hId][hExteriorY];
		z = Houses[hId][hExteriorZ];
	}
	else if(Player[playerid][InBusiness] != 0)
	{
		new bId = Player[playerid][InBusiness];
		x = Businesses[bId][bExteriorX];
		y = Businesses[bId][bExteriorY];
		z = Businesses[bId][bExteriorZ];
	}
	else if(Player[playerid][InGroupHQ] != 0)
	{
		new gId = Player[playerid][InGroupHQ];
		x = Groups[gId][HQExteriorX];
		y = Groups[gId][HQExteriorY];
		z = Groups[gId][HQExteriorZ];
	}
	else
		GetPlayerPos(playerid, x, y, z);

	Get2DPosZone(x, y, zone, MAX_ZONE_NAME);
	return zone;
}

stock DeathClock(playerid, pat, patdr) //0 patient - 1 dr
{
	new bot = GetPVarInt(pat, "BleedingOutTime"),
	string[128];

	if(bot > 0)
	{
		if(patdr == 1)
		{
			//Medic View shown
			format(string, sizeof(string), "~r~Patient time: ~w~%i", bot);
			GameTextForPlayer(playerid, string, 1000 ,3);
		}
		else
		{
			//Patient View shown
			format(string, sizeof(string), "~r~Time till death: ~w~%i", bot);
			GameTextForPlayer(playerid, string, 1000 ,3);
		}
		SetPVarInt(playerid, "DeathClockToggle", 1);
	}
	else
	{
		if(patdr == 1)
			GameTextForPlayer(playerid, "~r~Patient has died.", 1000 ,3);
		else
			GameTextForPlayer(playerid, "~r~You have died.", 1000 ,3);
		DeletePVar(playerid, "DeathClockToggle");
	}
	return 1;
}

stock UpdateNTags(playerid)
{
	if(Player[playerid][AdminLevel] == 1 && !strcmp(Player[playerid][nTag], "Admin"))
		format(Player[playerid][nTag], 32, "Moderator");

	if(Player[playerid][AdminLevel] < 1 && (!strcmp(Player[playerid][nTag], "Admin") || !strcmp(Player[playerid][nTag], "Moderator")))
		format(Player[playerid][nTag], 32, GetOOCRank(playerid));

	if(Player[playerid][Tester] == 0 && !strcmp(Player[playerid][nTag], "Tester"))
		format(Player[playerid][nTag], 32, GetOOCRank(playerid));

	if(Player[playerid][VipRank] == 0 && !strcmp(Player[playerid][nTag], "VIP"))
		format(Player[playerid][nTag], 32, GetOOCRank(playerid));
}

stock DeathMoneyLoss(playerid)
{
	new hours = Player[playerid][PlayingHours], endAmount;
	if(hours < 50)
		hours = 50;

	if(Player[playerid][HealthInsuranceTime] > 0)
		endAmount = floatround((((hours * 50) / 2) - ((hours * 50) / 2) * 0.75), floatround_ceil);
	else
		endAmount = ((hours * 50) / 2);
	return endAmount;
}

/*CMD:buyinsurance(playerid, params[])
{
	if(Player[playerid][InGroupHQ] != 6)
		return SendClientMessage(playerid, -1, "You must be in the LSMD HQ.");

	if(isnull(params))
	{
		SendClientMessage(playerid, -1, "SYNTAX: /buyinsurance [option]");
		return SendClientMessage(playerid, -1, "Options: saints, general");
	}

	if(Player[playerid][HealthInsuranceTime] > 0)
		return SendClientMessage(playerid, -1, "You already have health insurance.");

	if(Player[playerid][Money] < 50000)
		return SendClientMessage(playerid, -1, "You can't afford the health insurance, it cost 50k");

	if(!strcmp(params, "general", true))
	{
		Player[playerid][HealthInsurance] = 1;
		Player[playerid][HealthInsuranceTime] = gettime() + 604800;
		SendClientMessage(playerid, -1, "You have purchased health insurance, it will expire in 7 days.");
		Player[playerid][Money] -= 50000;
	}
	else if(!strcmp(params, "saints", true))
	{
		Player[playerid][HealthInsurance] = 2;
		Player[playerid][HealthInsuranceTime] = gettime() + 604800;
		SendClientMessage(playerid, -1, "You have purchased health insurance, it will expire in 7 days.");
		Player[playerid][Money] -= 50000;
	}
	else
		SendClientMessage(playerid, -1, "Invalid option");

	return 1;
}*/


CMD:rp(playerid, params[])
{
	new idstring[255], message[180], string[255];
	if(sscanf(params, "s[255]s[180]", idstring, message))
		return SendClientMessage(playerid, GREY, "SYNTAX: /rp [playerids (use commas to seperate ids/names EG:\"user_1,user_2,23,user_3\")] [message]");

	if(Player[playerid][PrisonID] == 1)
		return SendClientMessage(playerid, WHITE, "You may not use this channel right now.");

	new users[6][255], count;
	for(new i, j = strlen(idstring); i < j && i != j; i++)
	{
		if(idstring[i] != ',' && i != strlen(idstring) - 1)
			continue;

		if(count > 6)
			break;

		strcpy(users[count], idstring);

		if(i != strlen(users[count]) - 1)
			strdel(users[count], i, strlen(users[count]));
		strdel(idstring, 0, i + 1);

		i = -1;
		j = strlen(idstring);

		count++;
	}

	if(count == 0 || count > 6)
		return SendClientMessage(playerid, WHITE, "None of the given users are connected or you entered more than the limit (6).");

	new sent_to[6];
	for(new i; i < 6; i++)
	{
		sent_to[i] = -1;
	}

	new notconnected[128];
	for(new i; i < count; i++)
	{
		new id;
		if(sscanf(users[i], "u", id))
			continue;

		new skip;
		for(new x; x < 6 && skip != 1; x++)
		{
			if(id == sent_to[x] && sent_to[x] != -1)
			{
				skip = 1;
			}
		}

		if(skip)
			continue;

		if(!IsPlayerConnectedEx(id))
		{
			if(isnull(notconnected))
				format(notconnected, sizeof(notconnected), "These players are not connected: ");
			format(notconnected, sizeof(notconnected), "%s%s, ", notconnected, users[i]);
			continue;
		}

		if(Player[id][AdminDuty] > 0)
			continue;

		sent_to[i] = id;

		new splitpos = 110 - (20+strlen(GetName(playerid)));
		if(strlen(message) > splitpos)
		{
			new str1[86], str2[86];
			strsplit(message, str1, str2, splitpos);
			format(string, sizeof(string), "[RP to %s (%d)] * %s", GetNameEx(id), id, str1);
			SendClientMessage(playerid, LONGDISTANCERP, string);
			format(string, sizeof(string), "[RP to %s (%d)] * %s", GetNameEx(id), id, str2);
			SendClientMessage(playerid, LONGDISTANCERP, string);
			format(string, sizeof(string), "[RP from %s (%d)] * %s", GetNameEx(playerid), playerid, str1);
			SendClientMessage(id, LONGDISTANCERP, string);
			format(string, sizeof(string), "[RP from %s (%d)] * %s", GetNameEx(playerid), playerid, str2);
			SendClientMessage(id, LONGDISTANCERP, string);
		}

		else
		{
			format(string, sizeof(string), "[RP to %s (%d)] * %s", GetNameEx(id), id, message);
			SendClientMessage(playerid, LONGDISTANCERP, string);
			format(string, sizeof(string), "[RP from %s (%d)] * %s", GetNameEx(playerid), playerid, message);
			SendClientMessage(id, LONGDISTANCERP, string);
		}

		foreach(Player, x)
		{
			if(Spectator[x][SpecSpectatingPlayer] == id)
			{
				format(string, sizeof(string), "[RP %s to %s] %s", GetName(playerid), GetName(id), message);
				SendClientMessage(x, PURPLE, string);
			}
			if(Spectator[x][SpecSpectatingPlayer] == playerid)
			{
				format(string, sizeof(string), "[RP %s to %s] %s", GetName(playerid), GetName(id), message);
				SendClientMessage(x, PURPLE, string);
			}
		}

		format(string, sizeof(string), "[RP] %s (ID: %d) to %s (ID: %d): %s", GetNameEx(playerid), playerid, GetNameEx(id), id, message);
		ICChatLog(string);
	}

	if(!isnull(notconnected))
		SendClientMessage(playerid, WHITE, notconnected);
	return 1;
}

/*
stock VipLockerVehicles(group, group2)
{
	new string[768];
	if(group == 1)
		format(string, sizeof(string), "Feltzer ($40,000)\nSuper GT ($175,000)\nNRG-500 ($100,000)\nStafford ($80,000)\nWalton ($12,500)\nSparrow ($115,000)\n");
	else if(group == 2)
		format(string, sizeof(string), "Flash ($70,000)\nCheetah ($200,000)\nFaggio ($5,500)\nHermes ($25,000)\nOceanic ($40,000)\nMaverick ($350,000)\n");
    else if(group == 3)
		format(string, sizeof(string), "Jester ($85,000)\nTurismo ($250,000)\nQuad ($10,000)\nElegy ($85,000)\nGlendale ($20,000)\nSparrow ($115,000)\n");
    else if(group == 4)
		format(string, sizeof(string), "Stratum ($70,000)\nInfernus ($400,000)\nZR-350 ($100,000)\nMerit ($25,500)\nClub ($25,000)\nSparrow ($115,000)\n");
    else if(group == 5)
		format(string, sizeof(string), "Uranus ($70,000)\nEuros ($50,000)\nBF-400 ($8,000)\nAdmiral ($25,000)\nBroadway ($25,000)\nSparrow ($115,000)\n");
    else if(group == 6)
		format(string, sizeof(string), "Voodoo ($22,500)\nBullet ($400,000)\nSanchez ($12,500)\nWindsor ($100,000)\nTahoma ($25,000)\nMaverick ($350,000)\n");

	if(group2 == 1)
		format(string, sizeof(string), "%sFeltzer ($40,000)\nSuper GT ($175,000)\nNRG-500 ($100,000)\nStafford ($80,000)\nWalton ($12,500)\nSparrow ($115,000)\n", string);
	else if(group2 == 2)
		format(string, sizeof(string), "%sFlash ($70,000)\nCheetah ($200,000)\nFaggio ($5,500)\nHermes ($25,000)\nOceanic ($40,000)\nMaverick ($350,000)\n", string);
    else if(group2 == 3)
		format(string, sizeof(string), "%sJester ($85,000)\nTurismo ($250,000)\nQuad ($10,000)\nElegy ($85,000)\nGlendale ($20,000)\nSparrow ($115,000)\n", string);
    else if(group2 == 4)
		format(string, sizeof(string), "%sStratum ($70,000)\nInfernus ($400,000)\nZR-350 ($100,000)\nMerit ($25,500)\nClub ($25,000)\nSparrow ($115,000)\n", string);
    else if(group2 == 5)
		format(string, sizeof(string), "%sUranus ($70,000)\nEuros ($50,000)\nBF-400 ($8,000)\nAdmiral ($25,000)\nBroadway ($25,000)\nSparrow ($115,000)\n", string);
    else if(group2 == 6)
		format(string, sizeof(string), "%sVoodoo ($22,500)\nBullet ($400,000)\nSanchez ($12,500)\nWindsor ($100,000)\nTahoma ($25,000)\nMaverick ($350,000)\n", string);

	return string;
}
*/
/*
CMD:changevipvehicles(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 5)
	    return 1;

	new num, slot;
	if(sscanf(params, "dd", slot, num))
	    return SendClientMessage(playerid, GREY, "SYNTAX: /changevipvehicles [slot (1 or 2] [0 - 6]");

	if(slot != 1 && slot != 2)
		return SendClientMessage(playerid, WHITE, "Valid slots are either 1 or 2.");

	if(num < 0 || num > 6)
	    return SendClientMessage(playerid, WHITE, "Choose a number from 1 to 6, or put 0 to disable.");

	if(slot == 1)
	{
		VipVehicleGroup = num;
		dini_IntSet("Assets.ini", "VipVehicleGroup", VipVehicleGroup);
	}
	else
	{
		VipVehicleGroup2 = num;
		dini_IntSet("Assets.ini", "VipVehicleGroup2", VipVehicleGroup2);
	}
 	new str[128];
 	format(str, sizeof(str), "You have set the VIP vehicle group (slot %d) to group %d!", slot, num);
 	SendClientMessage(playerid, WHITE, str);
 	format(str, sizeof(str), "%s has set the VIP vehicle group (slot %d) to %d.", GetName(playerid), slot, num);
 	SendToAdmins(ADMINORANGE, str, 1);
 	return 1;
}
*/

CMD:gotolocation(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
	    return 1;

	new Location[128];
	if(sscanf(params, "s[128]", Location))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /gotolocation [usage]");
		SendClientMessage(playerid, GREY, "Prison, Jail, Spawn, LockerPos, Hospital, ArrestPos, BankInt, BankExt, OwnedCarSpawn, OwnedCarSpawn2, VipCarSpawn, BikeSpawn, VanSpawn, LockerPos3");
		//SendClientMessage(playerid, GREY, "LockerPos2, Harvest1, Harvest2, Harvest3, Harvest4, Harvest5, Matdrop1, Matdrop2, Matdrop3, Matdrop4, Matdrop5");
		SendClientMessage(playerid, GREY, "AgencyDoorPos, AgencyIntPos, AgencyGarageEntrance, AgencyGarageExit, AgencyHQGarageEntrance, AgencyHQGarageExit, ModShop, ModShopExit, LockerPos2");
		return 1;
	}

	if(strcmp(Location, "Prison", true) == 0)
	{
		SetPlayerPos_Update(playerid, Prison1X, Prison1Y, Prison1Z);
		SetPlayerInterior(playerid, Prison1Int);
		//SetPlayerVirtualWorld(playerid, Prison1World);

		SendClientMessage(playerid, WHITE, "You have teleported to the Prison location.");
	}
	else if(!strcmp(Location, "BikeSpawn", true))
	{
		SetPlayerPos_Update(playerid, BikeSpawn[0], BikeSpawn[1], BikeSpawn[2]);

		SendClientMessage(playerid, WHITE, "You have teleported to the Bike spawn.");
	}
	else if(strcmp(Location, "Harvest1", true) == 0)
	{
		SetPlayerPos_Update(playerid, Harvest1X, Harvest1Y, Harvest1Z);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

		SendClientMessage(playerid, WHITE, "You have teleported to the Harvest1 location.");
	}
	else if(strcmp(Location, "Harvest2", true) == 0)
	{
		SetPlayerPos_Update(playerid, Harvest2X, Harvest2Y, Harvest2Z);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

		SendClientMessage(playerid, WHITE, "You have teleported to the Harvest2 location.");
	}
	else if(strcmp(Location, "Harvest3", true) == 0)
	{
		SetPlayerPos_Update(playerid, Harvest3X, Harvest3Y, Harvest3Z);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

		SendClientMessage(playerid, WHITE, "You have teleported to the Harvest3 location.");
	}
	else if(strcmp(Location, "Harvest4", true) == 0)
	{
		SetPlayerPos_Update(playerid, Harvest4X, Harvest4Y, Harvest4Z);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

		SendClientMessage(playerid, WHITE, "You have teleported to the Harvest4 location.");
	}
	else if(strcmp(Location, "Harvest5", true) == 0)
	{
		GetPlayerPos(playerid, Harvest5X, Harvest5Y, Harvest5Z);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

		SendClientMessage(playerid, WHITE, "You have teleported to the Harvest5 location.");
	}
	else if(strcmp(Location, "OwnedCarSpawn", true) == 0)
	{
		SetPlayerPos_Update(playerid, OwnedCarSpawnX, OwnedCarSpawnY, OwnedCarSpawnZ);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

		SendClientMessage(playerid, WHITE, "You have teleported to the Owned Car Spawn location.");
	}
	else if(strcmp(Location, "OwnedCarSpawn2", true) == 0)
	{
		SetPlayerPos_Update(playerid, OwnedCarSpawn2X, OwnedCarSpawn2Y, OwnedCarSpawn2Z);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

		SendClientMessage(playerid, WHITE, "You have teleported to the Owned Car Spawn 2 location.");
	}
	else if(strcmp(Location, "OwnedBoatSpawn", true) == 0)
	{
		SetPlayerPos_Update(playerid, OwnedBoatSpawnX, OwnedBoatSpawnY, OwnedBoatSpawnZ);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

		SendClientMessage(playerid, WHITE, "You have teleported to the Owned Boat Spawn location.");
	}
	else if(strcmp(Location, "DropCar", true) == 0)
	{
		SetPlayerPos_Update(playerid, DropCarX, DropCarY, DropCarZ);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

		SendClientMessage(playerid, WHITE, "You have teleported to the DropCar location.");
	}
	else if(strcmp(Location, "ArrestPos", true) == 0)
	{
		SetPlayerPos_Update(playerid, ArrestPosX, ArrestPosY, ArrestPosZ);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

		SendClientMessage(playerid, WHITE, "You have teleported to the ArrestPos location.");
	}
	else if(strcmp(Location, "Jail", true) == 0)
	{
		SetPlayerPos_Update(playerid, Prison2X, Prison2Y, Prison2Z);
		SetPlayerInterior(playerid, Prison2Int);
		SetPlayerVirtualWorld(playerid, Prison2World);

		SendClientMessage(playerid, WHITE, "You have teleported to the Jail location.");
	}
	else if(strcmp(Location, "Hospital", true) == 0)
	{
		SetPlayerPos_Update(playerid, HospitalSpawnX, HospitalSpawnY, HospitalSpawnZ);
		SetPlayerInterior(playerid, HospitalInt);

		SendClientMessage(playerid, WHITE, "You have teleported to the Hospital location.");
	}
	else if(strcmp(Location, "LockerPos3", true) == 0)
	{
		SetPlayerPos_Update(playerid, LockerPos3X, LockerPos3Y, LockerPos3Z);
		SetPlayerInterior(playerid, LockerPos3Int);

		SendClientMessage(playerid, WHITE, "You have teleported to the LockerPos3 location.");
	}
	else if(strcmp(Location, "LockerPos2", true) == 0)
	{
		SetPlayerPos_Update(playerid, LockerPos2X, LockerPos2Y, LockerPos2Z);
		SetPlayerInterior(playerid, LockerPos2Int);

		SendClientMessage(playerid, WHITE, "You have teleported to the LockerPos2 location.");
	}
	else if(strcmp(Location, "LockerPos", true) == 0)
	{
		SetPlayerPos_Update(playerid, LockerPosX, LockerPosY, LockerPosZ);
		SetPlayerInterior(playerid, LockerPosInt);

		SendClientMessage(playerid, WHITE, "You have teleported to the LockerPos location.");
	}
	else if(strcmp(Location, "Spawn", true) == 0)
	{
		SetPlayerPos_Update(playerid, SpawnX, SpawnY, SpawnZ);
		SetPlayerInterior(playerid, SpawnInt);
		SetPlayerVirtualWorld(playerid, SpawnWorld);

		SendClientMessage(playerid, WHITE, "You have teleported to the Spawn location.");
	}
	else if(strcmp(Location, "AgencyDoorPos", true) == 0)
	{
		SetPlayerPos_Update(playerid, AgencyDoorPosX, AgencyDoorPosY, AgencyDoorPosZ);
		SetPlayerInterior(playerid, AgencyDoorPosInt);
		SetPlayerVirtualWorld(playerid, 65038);

		SendClientMessage(playerid, WHITE, "You have teleported to the AgencyDoorPos location.");
	}
	else if(strcmp(Location, "AgencyIntPos", true) == 0)
	{
		SetPlayerPos_Update(playerid, AgencyIntPosX, AgencyIntPosY, AgencyIntPosZ);
		SetPlayerInterior(playerid, AgencyIntPosInt);

		SendClientMessage(playerid, WHITE, "You have teleported to the AgencyIntPos location.");
	}
	else if(strcmp(Location, "AgencyGarageEntrance", true) == 0)
	{
		SetPlayerPos_Update(playerid, AgencyGarageEntranceX, AgencyGarageEntranceY, AgencyGarageEntranceZ);
		SetPlayerInterior(playerid, 0);

		SendClientMessage(playerid, WHITE, "You have teleported to the AgencyGarageEntrance location.");
	}
	else if(strcmp(Location, "AgencyGarageExit", true) == 0)
	{
		SetPlayerPos_Update(playerid, AgencyGarageExitX, AgencyGarageExitY, AgencyGarageExitZ);
		SetPlayerInterior(playerid, 0);

		SendClientMessage(playerid, WHITE, "You have teleported to the AgencyGarageExit location.");
	}
	else if(strcmp(Location, "AgencyHQGarageEntrance", true) == 0)
	{
		SetPlayerPos_Update(playerid, AgencyHQGarageEntranceX, AgencyHQGarageEntranceY, AgencyHQGarageEntranceZ);
		SetPlayerInterior(playerid, AgencyHQGarageEntranceInt);

		SendClientMessage(playerid, WHITE, "You have teleported to the AgencyHQGarageEntrance location.");
	}
	else if(strcmp(Location, "AgencyHQGarageExit", true) == 0)
	{
		SetPlayerPos_Update(playerid, AgencyHQGarageExitX, AgencyHQGarageExitY, AgencyHQGarageExitZ);
		SetPlayerInterior(playerid, 0);

		SendClientMessage(playerid, WHITE, "You have teleported to the AgencyHQGarageExit location.");
	}
	else if(!strcmp(Location, "matdrop1", true))
	{
	    SetPlayerPos_Update(playerid, MaterialDropX[0], MaterialDropY[0], MaterialDropZ[0]);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

	    SendClientMessage(playerid, WHITE, "You have teleported to the MaterialDrop1 location.");
	}
	else if(!strcmp(Location, "matdrop2", true))
	{
	    SetPlayerPos_Update(playerid, MaterialDropX[1], MaterialDropY[1], MaterialDropZ[1]);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

	    SendClientMessage(playerid, WHITE, "You have teleported to the MaterialDrop2 location.");
	}
	else if(!strcmp(Location, "matdrop3", true))
	{
	    SetPlayerPos_Update(playerid, MaterialDropX[2], MaterialDropY[2], MaterialDropZ[2]);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

	    SendClientMessage(playerid, WHITE, "You have teleported to the MaterialDrop3 location.");
	}
	else if(!strcmp(Location, "matdrop4", true))
	{
	    SetPlayerPos_Update(playerid, MaterialDropX[3], MaterialDropY[3], MaterialDropZ[3]);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

	    SendClientMessage(playerid, WHITE, "You have teleported to the MaterialDrop4 location.");
	}
	else if(!strcmp(Location, "matdrop5", true))
	{
	    SetPlayerPos_Update(playerid, MaterialDropX[4], MaterialDropY[4], MaterialDropZ[4]);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

	    SendClientMessage(playerid, WHITE, "You have teleported to the MaterialDrop5 location.");
	}
	else if(!strcmp(Location, "VipCarSpawn", true))
	{
	    SetPlayerPos_Update(playerid, VipCarSpawn[0], VipCarSpawn[1], VipCarSpawn[2]);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

	    SendClientMessage(playerid, WHITE, "You have teleported to the VipCarSpawn location.");
	}
	else if(!strcmp(Location, "UnimpoundPos", true))
	{
	    SetPlayerPos_Update(playerid, UnimpoundPos[0], UnimpoundPos[1], UnimpoundPos[2]);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

	    SendClientMessage(playerid, WHITE, "You have teleported to the UnimpoundPos location.");
	}
	else if(!strcmp(Location, "VipLoungeExt", true))
	{
	    SetPlayerPos_Update(playerid, VipLounge[0], VipLounge[1], VipLounge[2]);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

	    SendClientMessage(playerid, WHITE, "You have teleported to the VipLoungeExt location.");
	}
	else if(!strcmp(Location, "VipLoungeInt", true))
	{
	    SetPlayerPos_Update(playerid, VipLounge[3], VipLounge[4], VipLounge[5]);
		SetPlayerInterior(playerid, VipLoungeInterior);
		SetPlayerVirtualWorld(playerid, VipLoungeVW);

	    SendClientMessage(playerid, WHITE, "You have teleported to the VipLoungeInt location.");
	}
	else if(!strcmp(Location, "VipLoungeLocker", true))
	{
	    SetPlayerPos_Update(playerid, VipLounge[6], VipLounge[7], VipLounge[8]);
		SetPlayerInterior(playerid, VipLoungeInterior);
		SetPlayerVirtualWorld(playerid, VipLoungeVW);

		SendClientMessage(playerid, WHITE, "You have teleported to the VipLoungeLocker location.");
	}
	else if(!strcmp(Location, "FishDeadZone", true))
	{
	    SetPlayerPos_Update(playerid, FishDeadZone[0], FishDeadZone[1], FishDeadZone[2]);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

	    SendClientMessage(playerid, WHITE, "You have teleported to the FishDeadZone location.");
	}
	else if(!strcmp(Location, "TicketPos", true))
	{
		SetPlayerPos_Update(playerid, TicketPos[0], TicketPos[1], TicketPos[2]);
		SetPlayerInterior(playerid, TicketPosInt);
		SetPlayerVirtualWorld(playerid, TicketPosVW);

	    SendClientMessage(playerid, WHITE, "You have teleported to the TicketPos location.");
	}
	else if(!strcmp(Location, "SupplyPickup", true))
	{
		SetPlayerPos_Update(playerid, TruckerPickup[0], TruckerPickup[1], TruckerPickup[2]);
	    SendClientMessage(playerid, WHITE, "You have teleported to the SupplyPickup location.");
	}
	else if(!strcmp(Location, "GasPickup", true))
	{
		SetPlayerPos_Update(playerid, TruckerPickup[3], TruckerPickup[4], TruckerPickup[5]);
	    SendClientMessage(playerid, WHITE, "You have teleported to the GasPickup location.");
	}
	else if(!strcmp(Location, "VanSpawn", true))
	{
		SetPlayerPos_Update(playerid, VanSpawn[0], VanSpawn[1], VanSpawn[2]);
		SendClientMessage(playerid, WHITE, "You have telported to the VanSpawn location.");
	}
	else if(!strcmp(Location, "ModShop", true))
	{
		SetPlayerPos_Update(playerid, ModShopPos[0], ModShopPos[1], ModShopPos[2]);
		SendClientMessage(playerid, WHITE, "You have teleported to the mod shop entrance.");
	}
	else if(!strcmp(Location, "ModShopExit", true))
	{
		SetPlayerPos_Update(playerid, ModShopExitPos[0], ModShopExitPos[1], ModShopExitPos[2]);
		SendClientMessage(playerid, WHITE, "You have teleported to the mod shop exit.");
	}
	else
		SendClientMessage(playerid, WHITE, "Invalid location.");
	return 1;
}

CMD:installworkbench(playerid, params[])
{
	if(Player[playerid][InHouse] == 0 && Player[playerid][InBusiness] == 0)
		return SendClientMessage(playerid, -1, "You're not inside any house or business.");

	if(Player[playerid][InHouse] > 0)
	{
		if(Player[playerid][House] == 0 && Player[playerid][House2] == 0)
			return SendClientMessage(playerid, -1, "You don't have a house.");

		if(Player[playerid][InHouse] != Player[playerid][House] && Player[playerid][InHouse] != Player[playerid][House2])
			return SendClientMessage(playerid, -1, "You can only install a workbench in your own house!");

		if(Houses[Player[playerid][InHouse]][Workbench] > 0)
			return SendClientMessage(playerid, -1, "Your house already has a workbench.");
			
		if(Player[playerid][Workbench] == 0)
			return SendClientMessage(playerid, -1, "You need to have a workbench to do this!");
			
		Houses[Player[playerid][InHouse]][Workbench] = 1;
		Player[playerid][Workbench]--;
		SaveHouse(Player[playerid][InHouse]);
		SendClientMessage(playerid, -1, "You successfully installed a workbench in your house. Use /creategun to use it!");
	}
	else if(Player[playerid][InBusiness] > 0)
	{
		if(Player[playerid][Business] == 0)
			return SendClientMessage(playerid, -1, "You don't have a business.");

		if(Player[playerid][InBusiness] != Player[playerid][Business])
			return SendClientMessage(playerid, -1, "You can only install a workbench in your own business!");

		if(Businesses[Player[playerid][InBusiness]][bWorkbench] > 0)
			return SendClientMessage(playerid, -1, "Your business already has a workbench.");
			
		if(Player[playerid][Workbench] == 0)
			return SendClientMessage(playerid, -1, "You need to have a workbench to do this!");		
			
		Businesses[Player[playerid][InBusiness]][bWorkbench] = 1;
		Player[playerid][Workbench]--;
		SaveBusiness(Player[playerid][InBusiness]);
		SendClientMessage(playerid, -1, "You successfully installed a workbench in your business. Use /creategun to use it!");
	}
	SavePlayerData(playerid);
	return 1;
}

CMD:uninstallworkbench(playerid, params[])
{
	if(Player[playerid][InHouse] == 0 && Player[playerid][InBusiness] == 0)
		return SendClientMessage(playerid, -1, "You're not inside any house or business.");

	if(Player[playerid][InHouse] > 0)
	{
		if(Player[playerid][House] == 0 && Player[playerid][House2] == 0)
			return SendClientMessage(playerid, -1, "You don't have a house.");
		
		if(Player[playerid][InHouse] != Player[playerid][House] && Player[playerid][InHouse] != Player[playerid][House2])
			return SendClientMessage(playerid, -1, "You can only uninstall a workbench in your own house!");
		
		if(Houses[Player[playerid][InHouse]][Workbench] == 0)
			return SendClientMessage(playerid, -1, "Your house doesn't have a workbench.");
			
		Player[playerid][Workbench] = 1;
		Houses[Player[playerid][InHouse]][Workbench] = 0;
		SaveHouse(Player[playerid][InHouse]);
		SendClientMessage(playerid, -1, "You successfully uninstalled a workbench from your house.");
	}
	else if(Player[playerid][InBusiness] > 0)
	{
		if(Player[playerid][Business] == 0)
			return SendClientMessage(playerid, -1, "You don't have a business.");
		
		if(Player[playerid][InBusiness] != Player[playerid][Business])
			return SendClientMessage(playerid, -1, "You can only uninstall a workbench in your own business!");
		
		if(Businesses[Player[playerid][InBusiness]][bWorkbench] == 0)
			return SendClientMessage(playerid, -1, "Your business doesn't have a workbench.");
			
		Player[playerid][Workbench] = 1;
		Businesses[Player[playerid][InBusiness]][bWorkbench] = 0;
		SaveBusiness(Player[playerid][InBusiness]);
		SendClientMessage(playerid, -1, "You successfully uninstalled a workbench from your business.");
	}
	SavePlayerData(playerid);
	return 1;
}

CMD:resetdescription(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
	    return 1;

	new id;
	if(sscanf(params, "u", id))
	    return SendClientMessage(playerid, GREY, "SYNTAX: /resetdescription [playerid]");

	if(!IsPlayerConnectedEx(id))
	    return SendClientMessage(playerid, -1, "Player has not connected or is not online.");

	new string[128];
	format(Player[id][HeadDesc], 255, "");
	format(Player[id][BodyDesc], 255, "");
	format(Player[id][ClothingDesc], 255, "");
	format(Player[id][AccessoryDesc], 255, "");
	format(string, sizeof(string), "You have reset %s's descriptions.", GetName(id));
	SendClientMessage(playerid, -1, string);
	return 1;
}

stock EditDescString(playerid)
{
	new string[650];
	if(strlen(Player[playerid][HeadDesc]) < 10)
		format(string, sizeof(string), "{FFFD8C}Head description:\n{FFFFFF}Enter description here.\n");
	else
		format(string, sizeof(string), "{FFFD8C}Head description:\n{FFFFFF}%s\n", Player[playerid][HeadDesc]);

	if(strlen(Player[playerid][BodyDesc]) < 10)
		format(string, sizeof(string), "%s{FFFD8C}Body description:\n{FFFFFF}Enter description here.\n", string);
	else
		format(string, sizeof(string), "%s{FFFD8C}Body description:\n{FFFFFF}%s\n", string, Player[playerid][BodyDesc]);

	if(strlen(Player[playerid][ClothingDesc]) < 10)
		format(string, sizeof(string), "%s{FFFD8C}Clothing description:\n{FFFFFF}Enter description here.\n", string);
	else
		format(string, sizeof(string), "%s{FFFD8C}Clothing description:\n{FFFFFF}%s\n", string, Player[playerid][ClothingDesc]);

	if(strlen(Player[playerid][AccessoryDesc]) < 10)
		format(string, sizeof(string), "%s{FFFD8C}Accessories description:\n{FFFFFF}Enter description here.\n", string);
	else
		format(string, sizeof(string), "%s{FFFD8C}Accessories description:\n{FFFFFF}%s\n", string, Player[playerid][AccessoryDesc]);
	return string;
}

CMD:description(playerid, params[])
{
	return ShowPlayerDialog(playerid, DESC_EDIT, DIALOG_STYLE_LIST, "Edit description", EditDescString(playerid), "Edit", "Cancel");
}

CMD:describe(playerid, params[])
{
    new id;
	if(sscanf(params, "u", id))
	    return SendClientMessage(playerid, GREY, "SYNTAX: /describe [playerid]");

	if(!IsPlayerConnectedEx(id))
	    return SendClientMessage(playerid, -1, "Player has not connected or is not online.");

	new string[650], nstring[128];
	format(nstring, sizeof(nstring), "%s's description", GetName(id));

	if(strlen(Player[id][HeadDesc]) < 10 || Player[id][UnderCover] || Player[id][AdminDuty])
		format(string, sizeof(string), "{FFFD8C}Head description:\n{AA3333}No description.\n");
	else
		format(string, sizeof(string), "{FFFD8C}Head description:\n{FFFFFF}%s\n", Player[id][HeadDesc]);

	if(strlen(Player[id][BodyDesc]) < 10 || Player[id][UnderCover] || Player[id][AdminDuty])
		format(string, sizeof(string), "%s{FFFD8C}Body description:\n{AA3333}No description.\n", string);
	else
		format(string, sizeof(string), "%s{FFFD8C}Body description:\n{FFFFFF}%s\n", string, Player[id][BodyDesc]);

	if(strlen(Player[id][ClothingDesc]) < 10 || Player[id][UnderCover] || Player[id][AdminDuty])
		format(string, sizeof(string), "%s{FFFD8C}Clothing description:\n{AA3333}No description.\n", string);
	else
		format(string, sizeof(string), "%s{FFFD8C}Clothing description:\n{FFFFFF}%s\n", string, Player[id][ClothingDesc]);

	if(strlen(Player[id][AccessoryDesc]) < 10 || Player[id][UnderCover] || Player[id][AdminDuty])
		format(string, sizeof(string), "%s{FFFD8C}Accessories description:\n{AA3333}No description.\n", string);
	else
		format(string, sizeof(string), "%s{FFFD8C}Accessories description:\n{FFFFFF}%s\n", string, Player[id][AccessoryDesc]);

	return ShowPlayerDialog(playerid, DESCRIBE, DIALOG_STYLE_MSGBOX, nstring, string, "Close", "");
}

CMD:odescribe(playerid, params[])
{
    new name[25];
	if(sscanf(params, "s[25]", name))
	    return SendClientMessage(playerid, GREY, "SYNTAX: /odescribe [name] ~~ Get the description of a player which is offline.");

	new id;
	sscanf(name, "u", id);
	if(IsPlayerConnectedEx(id))
	{
		valstr(name, id);
	    return cmd_describe(playerid, name);
	}

	if(!IsPlayerRegistered(name))
		return SendClientMessage(playerid, WHITE, "That player doesn't exist.");


	new query[128];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM playeraccounts WHERE normalname = '%e'", name);
	new Cache:cache = mysql_query(MYSQL_MAIN, query);

	new head[128], body[128], clothing[128], accessory[128], string[650], nstring[128];
	format(nstring, sizeof(nstring), "%s's description", name);

	cache_get_field_content(0, "HeadDesc", head);
	cache_get_field_content(0, "BodyDesc", body);
	cache_get_field_content(0, "ClothingDesc", clothing);
	cache_get_field_content(0, "AccessoryDesc", accessory);
	cache_delete(cache);

	if(strlen(head) < 10)
		format(string, sizeof(string), "{FFFD8C}Head description:\n{AA3333}No description.\n");
	else
		format(string, sizeof(string), "{FFFD8C}Head description:\n{FFFFFF}%s\n", head);

	if(strlen(body) < 10)
		format(string, sizeof(string), "%s{FFFD8C}Body description:\n{AA3333}No description.\n", string);
	else
		format(string, sizeof(string), "%s{FFFD8C}Body description:\n{FFFFFF}%s\n", string, body);

	if(strlen(clothing) < 10)
		format(string, sizeof(string), "%s{FFFD8C}Clothing description:\n{AA3333}No description.\n", string);
	else
		format(string, sizeof(string), "%s{FFFD8C}Clothing description:\n{FFFFFF}%s\n", string, clothing);

	if(strlen(accessory) < 10)
		format(string, sizeof(string), "%s{FFFD8C}Accessories description:\n{AA3333}No description.\n", string);
	else
		format(string, sizeof(string), "%s{FFFD8C}Accessories description:\n{FFFFFF}%s\n", string, accessory);

	return ShowPlayerDialog(playerid, DESCRIBE, DIALOG_STYLE_MSGBOX, nstring, string, "Close", "");
}

CMD:resetpin(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 7)
	    return 1;

	new name[25];
	if(sscanf(params, "s[25]", name))
	    return SendClientMessage(playerid, GREY, "SYNTAX: /resetpin [name]");

	if(!IsPlayerRegistered(name))
		return SendClientMessage(playerid, WHITE, "That player doesn't exist.");


	new string[128];

	mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE playeraccounts SET AdminPin = '0' WHERE NormalName = '%e'", name);
	mysql_tquery(MYSQL_MAIN, string, "OnQueryFinish", "dddss", THREAD_RESET_PIN, playerid, 0, name, "");
	return 1;
}

CMD:editradio(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 6)
		return 1;

	new string[128], end[500];
	for(new x; x < MAX_RADIO_STATIONS; x++)
	{
		format(string, sizeof(string), "%d) %s\n", x+1, RadioSettings[x][StationName]);
		strcat(end, string);
	}
	ShowPlayerDialog(playerid, RADIO_MENU_A, DIALOG_STYLE_LIST, "Radio Options", end, "Select", "Cancel");
	return 1;
}

CMD:matsafe(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new string[128], option[7], value, oldvalue;
	if(isnull(params) || Player[playerid][AdminLevel] < 6)
	{
		format(string, sizeof(string), "Material packages - %s | Closed - %s", IntToFormattedStr(MatSafeMaterials), (MatSafeClosed == 0) ? ("No") : ("Yes"));
		return SendClientMessage(playerid, GREY, string);
	}
	else if(sscanf(params, "s[7]d", option, value))
		return SendClientMessage(playerid, GREY, "SYNTAX: /matsafe [mats/closed] [amount]");

	if(!strcmp(option, "closed", true))
	{
		oldvalue = MatSafeClosed;
		MatSafeClosed = value;
		format(string, sizeof(string), "You set the closed status of the material safe to %d.", value);
		SendClientMessage(playerid, -1, string);
		format(string, sizeof(string), "%s has set the close status of material safe to %d (was %d).", GetName(playerid), value, oldvalue);
		SendToAdmins(ADMINORANGE, string, 1);
		AdminActionsLog(string);
		dini_IntSet("Assets.ini", "MatSafeClosed", MatSafeClosed);
	}
	else if(!strcmp(option, "mats", true))
	{
		oldvalue = MatSafeMaterials;
		MatSafeMaterials = value;
		format(string, sizeof(string), "You set the mats in the material safe to %s.", IntToFormattedStr(value));
		SendClientMessage(playerid, -1, string);
		format(string, sizeof(string), "%s has set the mats in the material safe to %s. (was %d)", GetName(playerid), IntToFormattedStr(value), oldvalue);
		SendToAdmins(ADMINORANGE, string, 1);
		AdminActionsLog(string);
		dini_IntSet("Assets.ini", "MatSafeMaterials", MatSafeMaterials);
	}
	else
		SendClientMessage(playerid, -1, "Invalid option.");

	return 1;
}

CMD:setproductname(playerid, params[])
{
	if(Player[playerid][Business] == 0)
		return SendClientMessage(playerid, -1, "You don't have a business.");

	if(Player[playerid][InBusiness] == 0)
		return SendClientMessage(playerid, -1, "You are not in a business.");

	if(Player[playerid][Business] != Player[playerid][InBusiness])
		return SendClientMessage(playerid, -1, "You must be in your own business to use this.");

	if(Businesses[Player[playerid][Business]][bType] != 12 && Businesses[Player[playerid][Business]][bType] != 3)
		return SendClientMessage(playerid, -1, "You must own a restaurant/club/bar to use that command.");

	new option, name[32];
	if(sscanf(params, "ds[32]", option, name))
		return SendClientMessage(playerid, GREY, "SYNTAX: /setproductname [1/2/3/4] [name]");

	new string[128];
	switch(option)
	{
		case 1:
		{
			format(Businesses[Player[playerid][Business]][bFoodName1], 32, "%s", name);
			format(string, sizeof(string), "You have set the name of product item 1 to %s.", name);
			SendClientMessage(playerid, -1, string);
			SaveBusiness(Player[playerid][Business]);
		}
		case 2:
		{
			format(Businesses[Player[playerid][Business]][bFoodName2], 32, "%s", name);
			format(string, sizeof(string), "You have set the name of product item 2 to %s.", name);
			SendClientMessage(playerid, -1, string);
			SaveBusiness(Player[playerid][Business]);
		}
		case 3:
		{
			format(Businesses[Player[playerid][Business]][bFoodName3], 32, "%s", name);
			format(string, sizeof(string), "You have set the name of product item 3 to %s.", name);
			SendClientMessage(playerid, -1, string);
			SaveBusiness(Player[playerid][Business]);
		}
		case 4:
		{
			format(Businesses[Player[playerid][Business]][bFoodName4], 32, "%s", name);
			format(string, sizeof(string), "You have set the name of product item 4 to %s.", name);
			SendClientMessage(playerid, -1, string);
			SaveBusiness(Player[playerid][Business]);
		}
	}
	return 1;
}

CMD:aexplode(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 4)
		return 1;

	new id, etype, Float:eradius;

	if(sscanf(params, "udf", id, etype, eradius))
		return SendClientMessage(playerid, GREY, "SYNTAX: /aexplode [playerid] [explosion type] [explosion radius]");

	if(!IsPlayerConnected(id))
		return SendClientMessage(playerid, WHITE, "That player isn't connected.");

	if(Player[playerid][AdminLevel] < Player[id][AdminLevel])
		return SendClientMessage(playerid, -1, "You can't do that to a higher level admin!");

	new string[128], Float:idx, Float:idy, Float:idz;
	GetPlayerPos(id, idx, idy, idz);
	CreateExplosion(idx, idy, idz, etype, eradius);
	format(string, sizeof(string), "You have triggered explosion #%d with radius %f.", etype, eradius);
	SendClientMessage(playerid, WHITE, string);

	return 1;
}

stock IsPlayerNearPayphone(playerid)
{
	for(new a; a < MAX_PAYPHONES; a++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3, Payphones[a][0], Payphones[a][1], Payphones[a][2]))
			return 1;
	}
	return 0;
}

CMD:usephone(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "You can't use a payphone in a vehicle.");

	if(!IsPlayerNearPayphone(playerid))
		return SendClientMessage(playerid, -1, "You must be at a payphone to use that!");

	if(IsPlayerOnPhone(playerid))
		return SendClientMessage(playerid, -1, "You are already on a call!");

	if(CantUseRightNow(playerid))
		return SendClientMessage(playerid, -1, "You can't do that as you're cuffed, tazed or tied.");

	if(GetPVarInt(playerid, "CallCD") > gettime())
		return 1;

	if(Player[playerid][Gagged] == 1)
		return SendClientMessage(playerid, -1, "You can't do that, your mouth is covered!");

	new number;
	if(sscanf(params, "d", number))
		return SendClientMessage(playerid, GREY, "SYNTAX: /usephone [number]");

	if(Player[playerid][Money] < 5 && number != 911)
		return SendClientMessage(playerid, -1, "Pay phones cost $5 to use except emergencies are free.");

	if(number < 0)
	    return 1;

	new idx;
	for(new i; i < MAX_PAYPHONES; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, Payphones[i][0], Payphones[i][1], Payphones[i][2]))
		{
			idx = i;
			break;
		}
	}

	if(PayphoneNumbers[idx] == number)
		return SendClientMessage(playerid, -1, "You can't call that payphone.");

	foreach(Player, i)
	{
		if(Player[i][OnPayphone] == PayphoneNumbers[idx])
			return SendClientMessage(playerid, -1, "That payphone is already in use!");
	}

	PlayerPlaySound(playerid, 3600, 0, 0, 0);
	new string[128];
	for(new a; a < MAX_PAYPHONES; a++)
	{
		if(number == PayphoneNumbers[a])
		{
			foreach(Player, x)
			{
				if(Player[x][CallingPayphone] == PayphoneNumbers[a] || Player[x][OnPayphone] == PayphoneNumbers[a])
					return SendClientMessage(playerid, -1, "That payphone is in use!");

				for(new i; i < MAX_PAYPHONES; i++)
				{
					format(string, sizeof(string), "* A nearby payphone starts to ring.. ((/answer))");
					if(PayphoneNumbers[i] == PayphoneNumbers[a])
					{
						if(IsPlayerInRangeOfPoint(x, 10, Payphones[i][0], Payphones[i][1], Payphones[i][2]))
							SendClientMessage(x, NICESKY, string);
					}
				}
			}
			Player[playerid][CallConnecting] = 1;
			Player[playerid][CallingPayphone] = PayphoneNumbers[a];
			format(string, sizeof(string), "* %s picks up the phone and dials a number.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
			SetPlayerAttachedObject(playerid, 4, 330, 6);
			return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		}
	}

	if(number == 911)
	{
		if(GetPVarInt(playerid, "BleedingOutTime") == 0)
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			SetPlayerAttachedObject(playerid, 4, 330, 6);
		}
		//PlayNearbySound(playerid,3600);
		Player[playerid][OnPayphone] = PayphoneNumbers[idx];
		Player[playerid][CellphoneConsole] = 911;
		return SendClientMessage(playerid, WHITE, "You've called Emergency services, please select the department you desire (i.e: LSPD)");
	}

	/* if(number == 611)
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		SetPlayerAttachedObject(playerid, 4, 330, 6);

		Player[playerid][CallConnecting] = 1;
		Player[playerid][CallingTaxi] = 1;
		Player[playerid][OnPayphone] = PayphoneNumbers[idx];

		format(string, sizeof(string), "* %s picks up the phone and dials a number.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);

		foreach(Player, i)
		{
			if(Player[i][InGroupHQ] == 12) //PCC TAXI GROUP
			{
				SendClientMessage(i, NICESKY, "* The company's phone would start to ring..");
				if(Player[i][Group] == 12)
					SendClientMessage(i, -1, "Type /answer to answer the company phone.");

			}
			else if(Player[i][InBusiness] == 86) //PCC TAXI BUSINESS
			{
				SendClientMessage(i, NICESKY, "* The company's phone would start to ring..");
				if(Player[i][Group] == 12)
					SendClientMessage(i, -1, "Type /answer to answer the company phone.");

			}
			else
			{
				new sql = GetVSQLID(GetPlayerVehicleID(i)), vidx  = GetVIndex(sql);
				if(sql == 0)
					continue;

				if(Veh[vidx][Group] == 12)
				{
					SendClientMessage(i, NICESKY, "* The company's phone would start to ring..");
					if(Player[i][Group] == 12)
						SendClientMessage(i, -1, "Type /answer to answer the company phone.");
				}
			}
		}
	}*/

	if(!IsExistingPhoneNumber(number) || strval(GetPhoneInfo(number, "status")) == 0)
		return SendClientMessage(playerid, YELLOW, "The number you are trying to reach is currently unavailable.");

	new query[128];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM phones WHERE number = '%d'", number);
	new Cache:cache = mysql_query(MYSQL_MAIN, query);

	new name[25];
	cache_get_field_content(0, "owner", name);
	cache_delete(cache);

	new id = GetPlayerIDEx(name);
	if(!IsPlayerConnectedEx(id) || Player[id][PrisonDuration] > 0 || Player[id][PrisonID] > 0)
		return SendClientMessage(playerid, YELLOW, "The number you are trying to reach is currently unavailable.");

	if(IsPlayerOnPhone(id) || Player[id][BeingCalled] >= 0)
		return SendClientMessage(playerid, -1, "The line you're trying to call is busy.");

	if(IsNumberBlocked(number, PayphoneNumbers[idx]))
		return SendClientMessage(playerid, YELLOW, "The number you are trying to reach is currently unavailable.");


	SaveCall(Player[id][PhoneN], PayphoneNumbers[idx], 0);
	Player[playerid][CallConnecting] = 1;
	Player[playerid][Calling] = id;
	Player[id][BeingCalled] = playerid;
	SetPVarInt(playerid, "CallingNumber", number);
	format(string, sizeof(string), "* %s picks up the phone and dials a number.", GetNameEx(playerid));
	NearByMessage(playerid, NICESKY, string);
	if(strval(GetPhoneInfo(number, "vibrate")) == 1 && strval(GetPhoneInfo(number, "ringtone")) == 0)
	{
		format(string, sizeof(string), "* %s's phone starts to vibrate...", GetNameEx(id));
		NearByMessage(id, NICESKY, string);
	}
	else if(strval(GetPhoneInfo(number, "ringtone")) != 0)
	{
		format(string, sizeof(string), "* %s's phone starts to ring...", GetNameEx(id));
		NearByMessage(id, NICESKY, string);
	}

	SetPVarString(id, "OnPhoneTo", GetContactName(number, PayphoneNumbers[idx]));
	format(string, sizeof(string), "Incoming call on %s from %s...", GetPhoneInfo(number, "label"), GetContactName(number, PayphoneNumbers[idx]));

	SendClientMessage(id, WHITE, string);
	if(IsPlayerInAnyVehicle(id))
		TextDrawShowForPlayer(id, CellPhoneTextDrawInVehicle);
	else
		TextDrawShowForPlayer(id, CellPhoneTextDraw);

	Player[playerid][Money] -= 5;
	Player[playerid][OnPayphone] = PayphoneNumbers[idx];
	Player[id][CallConnectingTime] = 1;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
	SetPlayerAttachedObject(playerid, 4, 330, 6);
	//PlayNearbySound(playerid,3600);
	SetPVarInt(playerid, "CallCD", gettime() + 2);

	if(strval(GetPhoneInfo(number, "ringtone")) != 0)
		PlayerPlayNearbySoundEx(id, GetRingtoneSound(Player[id][PhoneN]), 6, true);

	return SendClientMessage(playerid, WHITE, "You can use the 'T' chat to proceed to talk.");
}

CMD:answer(playerid, params[])
{
	if(IsPlayerOnPhone(playerid))
		return SendClientMessage(playerid, -1, "You're already in a call.");

	if(Player[playerid][Group] == 12)
	{
		foreach(Player, i)
		{
			if(Player[i][CallingTaxi] == 1)
			{
				new sql = GetVSQLID(GetPlayerVehicleID(playerid)), idx = GetVIndex(sql);
				if((Player[playerid][InGroupHQ] == 12) || (Player[playerid][InBusiness] == 86) || (sql != 0 && Veh[idx][Group] == 12))
				{
					PlayerPlayNearbySoundEx(playerid, 1143, 6, true);
					TextDrawHideForPlayer(playerid, CellPhoneTextDraw);
					TextDrawHideForPlayer(playerid, CellPhoneTextDrawInVehicle);


					SendClientMessage(playerid, WHITE, "You have picked up the company phone.");
					SendClientMessage(i, WHITE, "Somebody has answered.");

					Player[playerid][CellphoneConsole] = i;
					Player[playerid][OnTaxiCall] = i;
					Player[i][CellphoneConsole] = playerid;
					Player[i][OnPhoneTime] = 1;
					Player[i][CallingTaxi] = 2;
					Player[i][CallConnectingTime] = -1;
					Player[i][Calling] = -1;
					Player[i][CallConnecting] = 0;

					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
					SetPlayerAttachedObject(playerid, 4, 330, 6);

					return 1;
				}
			}
		}
	}

	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "You can't answer a payphone in a vehicle.");

	if(!IsPlayerNearPayphone(playerid))
		return SendClientMessage(playerid, -1, "You're not near a payphone.");

	if(CantUseRightNow(playerid))
		return SendClientMessage(playerid, -1, "You can't do that right now.");

	new idx, string[128];
	for(new a; a < MAX_PAYPHONES; a++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, Payphones[a][0], Payphones[a][1], Payphones[a][2]))
		{
			idx = a;
			break;
		}
	}

	foreach(Player, i)
	{
		if(Player[i][OnPayphone] == PayphoneNumbers[idx])
			return SendClientMessage(playerid, -1, "That payphone is already in use!");
	}

	foreach(Player, i)
	{
		if(Player[i][CallingPayphone] == PayphoneNumbers[idx])
		{
			Player[playerid][CellphoneConsole] = i;
			Player[i][CellphoneConsole] = playerid;
			Player[playerid][OnPayphone] = PayphoneNumbers[idx];
			Player[i][CallConnecting] = 0;
			SendClientMessage(i, -1, "Somebody has answered the phone.");
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			SetPlayerAttachedObject(playerid, 4, 330, 6);
			format(string, sizeof(string), "* %s answers the payphone and raises it to their ear.", GetNameEx(playerid));
			return NearByMessage(playerid, NICESKY, string);
		}
	}
	return 1;
}

CMD:map(playerid, params[])
{
	return ShowPlayerDialog(playerid, MAP_MAIN, DIALOG_STYLE_LIST, "Choose an option", "Businesses\nJobs\nPublic Services\nVehicle Related\nVIP Lounge\nLoyalty Shop", "Select", "Cancel");
}

stock GetClosestBusiness(playerid, type)
{
	new businessid, Float: dist;
	for(new i; i < MAX_BUSINESSES; i++)
	{
		if(Businesses[i][bType] != type)
			continue;

		if(Businesses[i][bLockStatus] == 1 && Businesses[i][bType] != 16 && Businesses[i][bType] != 17)
			continue;

		if(businessid < 1 || dist > GetPlayerDistanceFromPoint(playerid, Businesses[i][bExteriorX], Businesses[i][bExteriorY], Businesses[i][bExteriorZ]))
		{
			businessid = i;
			dist = GetPlayerDistanceFromPoint(playerid, Businesses[i][bExteriorX], Businesses[i][bExteriorY], Businesses[i][bExteriorZ]);
		}
	}

	if(Businesses[businessid][bExteriorX] == 0.0 && Businesses[businessid][bExteriorY] == 0.0 && Businesses[businessid][bExteriorZ] == 0.0)
		return SendClientMessage(playerid, -1, "No business found.");

	return businessid;
}

stock GetClosestGroup(playerid, type)
{
	new groupid, Float: dist;
	for(new i; i < MAX_GROUPS; i++)
	{
		if(Groups[i][CommandTypes] != type)
			continue;

		if(groupid < 1 || dist > GetPlayerDistanceFromPoint(playerid, Groups[i][HQInteriorX], Groups[i][HQInteriorY], Groups[i][HQInteriorZ]))
		{
			groupid = i;
			dist = GetPlayerDistanceFromPoint(playerid, Groups[i][HQInteriorX], Groups[i][HQInteriorY], Groups[i][HQInteriorZ]);
		}
	}
	return groupid;
}

stock GetClosestJob(playerid, type, usage) //USAGE = 0 (JoinPos), 1 (MiscPosOne) & 2 (MiscPosTwo)
{
	new jobid, Float: dist;
	for(new i; i < MAX_JOBS; i++)
	{
		if(Jobs[i][JobType] != type)
			continue;

		switch(usage)
		{
			case 0: //
			{
				if(jobid < 1 || dist > GetPlayerDistanceFromPoint(playerid, Jobs[i][JobJoinPosX], Jobs[i][JobJoinPosY], Jobs[i][JobJoinPosZ]))
				{
					jobid = i;
					dist = GetPlayerDistanceFromPoint(playerid, Jobs[i][JobJoinPosX], Jobs[i][JobJoinPosY], Jobs[i][JobJoinPosZ]);
				}
			}
			case 1:
			{
				if(jobid < 1 || dist > GetPlayerDistanceFromPoint(playerid, Jobs[i][JobMiscLocationOneX], Jobs[i][JobMiscLocationOneY], Jobs[i][JobMiscLocationOneZ]))
				{
					jobid = i;
					dist = GetPlayerDistanceFromPoint(playerid, Jobs[i][JobMiscLocationOneX], Jobs[i][JobMiscLocationOneY], Jobs[i][JobMiscLocationOneZ]);
				}
			}
			case 2:
			{
				if(jobid < 1 || dist > GetPlayerDistanceFromPoint(playerid, Jobs[i][JobMiscLocationTwoX], Jobs[i][JobMiscLocationTwoY], Jobs[i][JobMiscLocationTwoZ]))
				{
					jobid = i;
					dist = GetPlayerDistanceFromPoint(playerid, Jobs[i][JobMiscLocationTwoX], Jobs[i][JobMiscLocationTwoY], Jobs[i][JobMiscLocationTwoZ]);
				}
			}
		}
	}
	return jobid;
}

stock GetClosestPNS(playerid)
{
	new pns, Float: dist;
	for(new i; i < sizeof(paynsprays); i++)
	{
		if(pns < 1 || dist > GetPlayerDistanceFromPoint(playerid, paynsprays[i][0], paynsprays[i][1], paynsprays[i][2]))
		{
			pns = i;
			dist = GetPlayerDistanceFromPoint(playerid, paynsprays[i][0], paynsprays[i][1], paynsprays[i][2]);
		}
	}
	return pns;
}

stock CutBeforeLine(string[])
{
    new str[255], res[128];
	format(str, sizeof(str), "%s", string);
	for(new i = 0; '\0' != str[i]; i++)
	{
        if('|' == str[i])
		{
            strmid(res, str, 0, i - 1);
            break;
        }
	}
    return res;
}

stock CutAfterLine(string[])
{
    new str[255], res[128];
	format(str, sizeof(str), "%s", string);
	for(new i = 0; '\0' != str[i]; i++)
	{
        if('|' == str[i])
		{
            strmid(res, str, i + 1, strlen(str));
            break;
        }
	}
    return res;
}

stock SendMessageToVip(colour, string[])
{
	foreach(Player, i)
	{
		if(Player[i][VipRank] > 0)
			SendClientMessage(i, colour, string);
	}
	return 1;
}

CMD:searchip(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new searchIP[20];

	if(sscanf(params, "s[20]", searchIP))
		return SendClientMessage(playerid, GREY, "SYNTAX: /searchip [ip address]");

	new playerIP[20], count, string[128];

	format(string, sizeof(string), "Searching for IP address: %s", searchIP);
	SendClientMessage(playerid, WHITE, string);

	foreach(Player, i)
	{
		GetPlayerIp(i, playerIP, sizeof(playerIP));
		/*if(!strcmp(searchIP, playerIP))
		{
			format(string, sizeof(string), "IP address %s found: %s", playerIP, GetNameEx(i));
			SendClientMessage(playerid, WHITE, string);
			count++;
		}*/
		if(strfind(playerIP, searchIP) != -1)
		{
			format(string, sizeof(string), "IP address %s found: %s", playerIP, GetNameEx(i));
			SendClientMessage(playerid, WHITE, string);
			count++;
		}
	}

	if(count == 0)
		SendClientMessage(playerid, WHITE, "No matches were found.");
	return 1;
}



CMD:checkip(playerid, params[])
{
	    if(Player[playerid][AdminLevel] < 2)
		     return 1;

	    new count, value[25], query[255],reason[50];
	    if(sscanf(params, "s[25]", value))
		      return SendClientMessage(playerid, GREY, "SYNTAX: /checkip [IP]");

		mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM ipbans WHERE IP LIKE '%e%%'", value);
		new Cache:data = mysql_query(MYSQL_MAIN, query);
        count = cache_get_row_count();

		SendClientMessage(playerid, WHITE, "------------------------------------------------------------");
		if(count == 0)
		{
		     format(query, sizeof(query), "{47D420}THIS IP IS NOT BANNED.", reason);
             SendClientMessage(playerid, WHITE, query);
		}
		if(count > 0)
        {
             cache_get_field_content(0, "Reason", reason);
             format(query, sizeof(query), "{D43820}THIS IP IS BANNED. REASON: %s.", reason);
             SendClientMessage(playerid, WHITE, query);
        }
		SendClientMessage(playerid, WHITE, "------------------------------------------------------------");
        cache_delete(data);
        return 1;
}






CMD:searchconnections(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new searchfor[5], value[25], query[128];
	if(sscanf(params, "s[5]s[25]", searchfor, value))
		return SendClientMessage(playerid, GREY, "SYNTAX: /searchconnections [name/ip] [name or ip]");

	if(!strcmp(searchfor, "name", true))
	{
		mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT ip, date FROM connections WHERE name = '%e'", value);
		mysql_tquery(MYSQL_MAIN, query, "OnConnectionsSearch", "dds", playerid, 0, value);
	}
	else if(!strcmp(searchfor, "ip", true))
	{
		mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM connections WHERE ip LIKE '%e%%'", value);
		mysql_tquery(MYSQL_MAIN, query, "OnConnectionsSearch", "dds", playerid, 1, value);
	}
	else
		return SendClientMessage(playerid, GREY, "SYNTAX: /searchconnections [name/ip] [name or ip]");
	return 1;
}

forward OnConnectionsSearch(playerid, search_type, value[]);
public OnConnectionsSearch(playerid, search_type, value[])
{
	new count, idx, string[128], field[32], field2[32];
	if(search_type == 0)
	{
		count = cache_get_row_count();

		SendClientMessage(playerid, -1, "------------------------------------------------------------");
		format(string, sizeof(string), "%s has connected on the following IP's:", value);
		SendClientMessage(playerid, -1, string);

		if(count == 0)
		{
			SendClientMessage(playerid, -1, "No IP's found.");
			SendClientMessage(playerid, -1, "------------------------------------------------------------");
			return 1;
		}

		while(idx < count)
		{
			cache_get_field_content(idx, "ip", field);
			cache_get_field_content(idx, "date", field2);
			format(string, sizeof(string), "IP: %s - Connected on this IP last: %s", field, field2);
			SendClientMessage(playerid, -1, string);
			idx ++;
		}

		SendClientMessage(playerid, -1, "------------------------------------------------------------");
	}
	else
	{
		count = cache_get_row_count();

		SendClientMessage(playerid, -1, "------------------------------------------------------------");
		format(string, sizeof(string), "The following names have connected on an IP starting with %s:", value);
		SendClientMessage(playerid, -1, string);

		if(count == 0)
		{
			SendClientMessage(playerid, -1, "Nobody found.");
			SendClientMessage(playerid, -1, "------------------------------------------------------------");
			return 1;
		}

		new field3[32];
		while(idx < count)
		{
			cache_get_field_content(idx, "name", field);
			cache_get_field_content(idx, "date", field2);
			cache_get_field_content(idx, "ip", field3);
			format(string, sizeof(string), "Name: %s - Connected on %s last: %s", field, field3, field2);
			SendClientMessage(playerid, -1, string);
			idx ++;
		}

		SendClientMessage(playerid, -1, "------------------------------------------------------------");
	}
	return 1;
}

CMD:checkwalkie(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new freq;

	if(sscanf(params, "d", freq))
		return SendClientMessage(playerid, GREY, "SYNTAX: /checkwalkie [freq]");

	new count, string[128];

	format(string, sizeof(string), "Searching for Walkie Frequency: %d", freq);
	SendClientMessage(playerid, WHITE, string);

	foreach(Player, i)
	{
		if(Player[i][WalkieFrequency] == freq)
		{
			format(string, sizeof(string), "Frequency %d found: %s", freq, GetNameEx(i));
			SendClientMessage(playerid, WHITE, string);
			count++;
		}
	}

	if(count == 0)
		SendClientMessage(playerid, WHITE, "No matches were found.");

	return 1;
}

CMD:setjobcrimelimit(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 5)
		return 1;

	new jobid, limit, string[128], tmp;
	if(sscanf(params, "dd", jobid, limit))
		return SendClientMessage(playerid, GREY, "SYNTAX: /setjobcrimelimit [jobid] [limit] (0 = no limit)");

	if(jobid < 1 || jobid > SpawnedJobs)
	{
		format(string, sizeof(string), "Invalid job ID! Valid jobs are 1 - %d", SpawnedJobs);
		return SendClientMessage(playerid, WHITE, string);
	}

	if(limit < 0)
		return SendClientMessage(playerid, -1, "You can't set a limit below 0! If you wish for no limit use 0.");

	tmp = Jobs[jobid][JobCrimeLimit];
	Jobs[jobid][JobCrimeLimit] = limit;
	format(string, sizeof(string), "You have set the crime limit for job ID %d (%s) to %d.", jobid, Jobs[jobid][JobName], limit);
	SendClientMessage(playerid, -1, string);
	format(string, sizeof(string), "%s has set the crime limit for job ID %d to %d. (was %d)", Player[playerid][AdminName], jobid, limit, tmp);
	AdminActionsLog(string);
	return 1;
}

CMD:setjobtext(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 5)
		return 1;

	new jobid, jobtext[20], text[255];

	if(sscanf(params, "ds[20]s[255]", jobid, jobtext, text))
		return SendClientMessage(playerid, GREY, "SYNTAX: /setjobtext [jobid] [jobtext] [text] TIP: Use ~n~ for a newline");

	new string[128];

	if(jobid < 1 || jobid > SpawnedJobs)
	{
		format(string, sizeof(string), "Invalid job ID! Valid jobs are 1 - %d", SpawnedJobs);
		return SendClientMessage(playerid, WHITE, string);
	}

	if(strfind("jobname jobloc1 jobloc2", jobtext, true) == -1)
		return SendClientMessage(playerid, WHITE, "Invalid jobtext! Valid jobtexts are: jobname jobloc1 jobloc2");

	if(!strcmp("jobname", jobtext))
	{
		format(Jobs[jobid][JobName], 255, "%s", text);
		dini_Set(string, text, Jobs[jobid][JobName]);
		format(string, sizeof(string), "CHANGED: Job %d: Name: %s", jobid, text);
		UpdateObjectLabel(jobid, LABEL_TYPE_JOB, 0);
		SendClientMessage(playerid, WHITE, string);
	}

	if(!strcmp("jobloc1", jobtext))
	{
		str_replace("\n", "~n~", text, Jobs[jobid][JobMiscLocationOneMessage], true, 255);
		//format(Jobs[jobid][JobMiscLocationOneMessage], 255, "%s", text);
		dini_Set(string, text, Jobs[jobid][JobMiscLocationOneMessage]);
		format(string, sizeof(string), "CHANGED: Job %d: Location1: %s", jobid, text);
		UpdateObjectLabel(jobid, LABEL_TYPE_JOB, 1);
		SendClientMessage(playerid, WHITE, string);
	}

	if(!strcmp("jobloc2", jobtext))
	{
		str_replace("\n", "~n~", text, Jobs[jobid][JobMiscLocationTwoMessage], true, 255);
		//format(Jobs[jobid][JobMiscLocationTwoMessage], 255, "%s", text);
		dini_Set(string, text, Jobs[jobid][JobMiscLocationTwoMessage]);
		format(string, sizeof(string), "CHANGED: Job %d: Location2: %s", jobid, text);
		UpdateObjectLabel(jobid, LABEL_TYPE_JOB, 2);
		SendClientMessage(playerid, WHITE, string);
	}

	return 1;
}

CMD:setjobtype(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 5)
		return 1;

	new jobid, newjobtype;

	if(sscanf(params, "dd", jobid, newjobtype))
		return SendClientMessage(playerid, GREY, "SYNTAX: /setjobtype [jobid] [jobtype]");

	new string[128];

	if(jobid < 1 || jobid > SpawnedJobs)
	{
		format(string, sizeof(string), "Invalid job ID! Valid job IDs are 1 - %d", SpawnedJobs);
		return SendClientMessage(playerid, WHITE, string);
	}

	if(newjobtype < 1 || newjobtype > 12)
		return SendClientMessage(playerid, WHITE, "Invalid jobtype! Valid jobtypes are 1 - 12");

	Jobs[jobid][JobType] = newjobtype;
	dini_IntSet(string, "JobType", Jobs[jobid][JobType]);
	format(string, sizeof(string), "CHANGED: Job %d: Type: %d", jobid, newjobtype);
	SendClientMessage(playerid, WHITE, string);

	return 1;
}

CMD:listjobtypes(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	SendClientMessage(playerid, WHITE, "------------------------------------------------------------");
	SendClientMessage(playerid, WHITE, "1 - Arms Dealer");
	SendClientMessage(playerid, WHITE, "2 - Mechanic");
	SendClientMessage(playerid, WHITE, "3 - Unused");
	SendClientMessage(playerid, WHITE, "4 - Unused");
	SendClientMessage(playerid, WHITE, "5 - Deliverer");
	SendClientMessage(playerid, WHITE, "6 - Drug Smuggler");
	SendClientMessage(playerid, WHITE, "7 - Unused");
	SendClientMessage(playerid, WHITE, "8 - Fisherman");
	SendClientMessage(playerid, WHITE, "9 - Carjacker");
	SendClientMessage(playerid, WHITE, "10 - Pizza Boy");
	SendClientMessage(playerid, WHITE, "11 - Trucker");
	SendClientMessage(playerid, WHITE, "12 - Garbage Man");
	SendClientMessage(playerid, WHITE, "------------------------------------------------------------");

	return 1;
}

stock SendAdvertisment(playerid, string[], mobile = 0)
{
	new string2[255], string3[128];
	if(mobile == 0)
	{
		format(string2, 128, "Ad placed by %s from Adviz #%d", Player[playerid][NormalName], Player[playerid][InBusiness]);
		format(string3, 128, "Ad placed at Adviz #%d", Player[playerid][InBusiness]);
	}
	else
	{
		format(string2, 128, "Ad placed by %s from phone #%d", Player[playerid][NormalName], Player[playerid][PhoneN]);
		format(string3, 128, "Ad placed by phone #%d", Player[playerid][PhoneN]);
	}
	foreach(Player, i)
	{
		if(Player[i][AdminDuty])
		{
			SendClientMessage(i, GREEN, string);
			SendClientMessage(i, GREY, string2);
			continue;
		}

		new query[128];
		mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM phones WHERE owner = '%e'", Player[i][NormalName]);
		new Cache:cache = mysql_query(MYSQL_MAIN, query), count = cache_get_row_count(), idx;

		if(count == 0)
			continue;

		new number, sent;
		while(idx < count && !sent)
		{
			cache_set_active(cache);
			number = cache_get_field_content_int(idx, "number");

			if(strval(GetPhoneInfo(number, "status")) > 0 || Player[i][PrisonDuration] > 0 || Player[i][PrisonID] > 0)
			{
				SendClientMessage(i, GREEN, string);
				sent = 1;
			}

			if(Player[i][AdminLevel] > 0 && strval(GetPhoneInfo(number, "status")) > 0)
			{
				SendClientMessage(i, GREY, string2);
				sent = 1;
			}
			
			if(Player[i][Group] == 1 && Player[i][GroupRank] >= 4 && strval(GetPhoneInfo(number, "status")) > 0)
			{
				SendClientMessage(i, GREY, string3);
				sent = 1;
			}
			idx ++;
		}

		cache_delete(cache);
		continue;
	}
	LogAdvertisement(string);
}

stock LogAdvertisement(ad[])
{
	for(new i; i < MAX_RECENT_ADS; i++)
	{
		if(!strcmp(RecentAds[i], "No advertisement listed.", true))
		{
			format(RecentAds[i], 255, ad);
			RecentAdTime[i] = gettime() + (30 * 60);
			return 1;
		}
	}


	format(RecentAds[0], 255, "%s", RecentAds[1]);
	RecentAdTime[0] = RecentAdTime[1];
	format(RecentAds[1], 255, "%s", RecentAds[2]);
	RecentAdTime[1] = RecentAdTime[2];
	format(RecentAds[2], 255, "%s", RecentAds[3]);
	RecentAdTime[2] = RecentAdTime[3];
	format(RecentAds[3], 255, "%s", RecentAds[4]);
	RecentAdTime[3] = RecentAdTime[4];
	format(RecentAds[4], 255, "%s", ad);
	RecentAdTime[4] = gettime() + (30 * 60);
	return 1;
}

CMD:advertise(playerid, params[])
return cmd_ad(playerid, params);

CMD:ad(playerid, params[])
{
	new adstring[255], string[128];

	if(sscanf(params, "s[255]", adstring))
		return SendClientMessage(playerid, GREY, "SYNTAX: /ad(vertise) [advertisement]");

	if(!IsPlayerInRangeOfPoint(playerid, 1.5, Businesses[Player[playerid][InBusiness]][bInteractX], Businesses[Player[playerid][InBusiness]][bInteractY], Businesses[Player[playerid][InBusiness]][bInteractZ]) && Player[playerid][InBusiness] != 0)
		return SendClientMessage(playerid, GREY, "You must stand near the interaction point to do this.");

	if(Businesses[Player[playerid][InBusiness]][bType] != 4)
		return SendClientMessage(playerid, WHITE, "You need to be inside an AdViz to place an ad!");

	if(ToggledAdvertisments == 1)
		return SendClientMessage(playerid, WHITE, "Advertisments are currently unavailable.");

	if(Player[playerid][Money] < AdVizPrice)
		return SendClientMessage(playerid, WHITE, "You don't have enough money to place an ad!");
	
	if(Player[playerid][Mask] == 1)
		return SendClientMessage(playerid, -1, "Remove your mask before using this command.");

	if(gettime() < AdCanBePlaced)
	{
		format(string, sizeof(string), "You cannot place an advertisement right now! Please wait %d seconds and try again.", AdCanBePlaced - gettime());
		return SendClientMessage(playerid, WHITE, string);
	}

	format(string, sizeof(string), "[AD] %s", adstring);
	SendAdvertisment(playerid, string);
	AdCanBePlaced = gettime() + 50;
	format(string, sizeof(string), "You have placed an advertisement and have been charged $%d.", AdVizPrice);
	SendClientMessage(playerid, WHITE, string);
	Player[playerid][Money] -= AdVizPrice;
//	Businesses[Player[playerid][InBusiness]][bVault] += AdVizPrice;
	AddToStorage(Player[playerid][InBusiness], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, AdVizPrice);
	format(string, sizeof(string), "[AD] %s: %s", GetNameEx(playerid), adstring);
	ICChatLog(string);
	return 1;
}

CMD:toggleadvertisements(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 6)
		return 1;

	new string[128];
	switch(ToggledAdvertisments)
	{
		case 0:
		{

			ToggledAdvertisments = 1;
			format(string, sizeof(string), "%s has turned global advertisments off.", Player[playerid][AdminName]);
			AdminActionsLog(string);
			SendToAdmins(ADMINORANGE, string, 1);
			SendClientMessage(playerid, -1, "You have toggled global advertisments off.");
		}
		case 1:
		{
			ToggledAdvertisments = 0;
			format(string, sizeof(string), "%s has turned global advertisments on.", Player[playerid][AdminName]);
			AdminActionsLog(string);
			SendToAdmins(ADMINORANGE, string, 1);
			SendClientMessage(playerid, -1, "You have toggled global advertisments on.");
		}
	}
	dini_IntSet("Assets.ini", "AdStatus", ToggledAdvertisments);
	return 1;
}

/*CMD:rentbillboard(playerid, params[])
{
	if(Businesses[Player[playerid][InBusiness]][bType] != 4 || Player[playerid][InBusiness] == 0)
		return SendClientMessage(playerid, -1, "You must be in AdViz to rent a billboard.");

	if(BillboardsDays < 1 || BillboardPrice < 1 || ToggledAdvertisments)
		return SendClientMessage(playerid, -1, "You can not currently rent billboards.");

	if(Player[playerid][VipRank] < 1)
		return SendClientMessage(playerid, YELLOW, "This is a VIP perk!");

	new available;
	for(new i; i < MAX_BILLBOARDS; i++)
	{
		if(!strcmp(Billboards[i][Creator], "Nobody", true))
		{
			available = 1;
			Billboards[i][Checkpoint][playerid] = CreateDynamicMapIcon(BillboardObjects[i][1], BillboardObjects[i][2], BillboardObjects[i][3], 0, GREEN, .playerid = playerid, .streamdistance = 5000.0);
		}
	}

	if(available != 1)
		return SendClientMessage(playerid, -1, "There are currently no billboards available to rent.");

	SendClientMessage(playerid, -1, "Press ESC and go to your map and right click closer to the billboard you would like.");
	Player[playerid][PickingBillboard] = 1;
	SetPVarInt(playerid, "BillboardCooldown", gettime() + 45);
	Streamer_Update(playerid);
	return 1;
}

CMD:checkbillboard(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 3)
		return 1;

	new id = strval(params);
	if(id < 0 || id > MAX_BILLBOARDS-1 || !IsNumeric(params) || isnull(params))
		return SendClientMessage(playerid, GREY, "SYNTAX: /checkbillboard [billboardid]");

	new string[128];
	format(string, sizeof(string), "Owner: %s | Time remaining: %d", Billboards[id][Creator], (gettime() < Billboards[id][TimeLeft]) ? (Billboards[id][TimeLeft] - gettime()) : (0));
	SendClientMessage(playerid, -1, string);
	format(string, sizeof(string), "Ad: %s", Billboards[id][AdText]);
	SendClientMessage(playerid, -1, string);
	return 1;
}

CMD:resetbillboard(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 3)
		return 1;

	new id = strval(params);
	if(id < 0 || id > MAX_BILLBOARDS-1 || !IsNumeric(params) || isnull(params))
		return SendClientMessage(playerid, GREY, "SYNTAX: /resetbillboard [billboardid]");

	new string[128];
	format(string, sizeof(string), "You have reset billboard %d, which was owned by %s.", id, Billboards[id][Creator]);
	SendClientMessage(playerid, -1, string);

	ResetBillboard(id);
	return 1;
}

CMD:gotobillboard(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 3)
		return 1;

	new id = strval(params);
	if(id < 0 || id > MAX_BILLBOARDS-1 || !IsNumeric(params) || isnull(params))
		return SendClientMessage(playerid, GREY, "SYNTAX: /gotobillboard [billboardid]");

	new string[128];
	format(string, sizeof(string), "You have teleported to billboard %d, which is owned by %s.", id, Billboards[id][Creator]);
	SendClientMessage(playerid, -1, string);

	SetPlayerPos_Update(playerid, BillboardObjects[id][1], BillboardObjects[id][2], BillboardObjects[id][3] + 5);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	return 1;
}

CMD:refreshbillboards(playerid)
{
	if(Player[playerid][AdminLevel] < 3)
		return 1;

	for(new i; i < MAX_BILLBOARDS; i++)
	{
		DestroyObject(Billboards[i][Object]);
		Billboards[i][Object] = CreateObject(floatround(BillboardObjects[i][0], floatround_round), BillboardObjects[i][1], BillboardObjects[i][2], BillboardObjects[i][3], BillboardObjects[i][4], BillboardObjects[i][5], BillboardObjects[i][6], 300.0);
		SetObjectMaterialText(Billboards[i][Object], BillboardSplit(Billboards[i][AdText]), 0, OBJECT_MATERIAL_SIZE_256x128, "Arial", 15, 1, Billboards[i][TextColour], Billboards[i][BackgroundColour], 1);
	}
	SendClientMessage(playerid, -1, "You have refreshed all the billboards.");
	return 1;
}

CMD:closestbillboard(playerid)
{
	if(Player[playerid][AdminLevel] < 3)
		return 1;

	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	new id = GetClosestBillboard(x, y, z), string[128];

	format(string, sizeof(string), "The closest billboard to you is ID %d.", id);
	SendClientMessage(playerid, -1, string);

	SetPlayerPos_Update(playerid, BillboardObjects[id][1], BillboardObjects[id][2], BillboardObjects[id][3] + 5);
	return 1;
}

CMD:listbillboards(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 3)
		return 1;
	new string[128];
	SendClientMessage(playerid, -1, "---------------------------------------------------------");
	for(new i; i < MAX_BILLBOARDS; i ++)
	{
		if(!strcmp(Billboards[i][Creator], "Nobody", true))
			continue;

		format(string, sizeof(string), "Billboard: %d | Owner: %s | Time remaining: %d", i, Billboards[i][Creator], (gettime() < Billboards[i][TimeLeft]) ? (Billboards[i][TimeLeft] - gettime()) : (0));
		SendClientMessage(playerid, -1, string);
	}
	SendClientMessage(playerid, -1, "---------------------------------------------------------");
	return 1;
} */

stock DestroyBillboardIcons(playerid)
{
	for(new i; i < MAX_BILLBOARDS; i++)
	{
		DestroyDynamicMapIcon(Billboards[i][Checkpoint][playerid]);
	}
	return 1;
}

stock GetClosestBillboard(Float:x, Float:y, Float:z, skip_owned = 0)
{
	new billboard = -1, Float: dist;
	for(new i; i < MAX_BILLBOARDS; i++)
	{
		if(billboard == -1 || dist > GetDistanceBetweenPoints(x, y, z, BillboardObjects[i][1], BillboardObjects[i][2], BillboardObjects[i][3]))
		{
			if(skip_owned && strcmp(Billboards[i][Creator], "Nobody", true))
				continue;

			billboard = i;
			dist = GetDistanceBetweenPoints(x, y, z, BillboardObjects[i][1], BillboardObjects[i][2], BillboardObjects[i][3]);
		}
	}
	return billboard;
}

stock LoadBillboards()
{
	new path[64], file[64], string[128];
	format(file, sizeof(file), "Misc/Billboards.djson");

	if(!fexist(file))
		CreateBillboards();

	new colours[11][] = { "red", "blue", "lightblue", "black", "white", "green", "darkgreen", "yellow", "orange", "purple", "pink" };
	new colourcodes[11] = { 0xFFE03434, 0xFF1900FF, 0xFF1EBBD4, 0xFF171717, 0xFFFFFFFF, 0xFF23D94D, 0xFF004D12, 0xFFD0D62B, 0xFFE67F12, 0xFF861BDE, 0xFFED11ED };
	new bgcol[10], textcol[10];

	for(new i; i < MAX_BILLBOARDS; i++)
	{
		format(path, sizeof(path), "Billboards/Billboard%d", i);

		format(string, sizeof(string), "%s/Creator", path);
		format(Billboards[i][Creator], 25, dj(file, string));

		format(string, sizeof(string), "%s/AdText", path);
		format(Billboards[i][AdText], 128, dj(file, string));

		format(string, sizeof(string), "%s/TimeLeft", path);
		Billboards[i][TimeLeft] = djInt(file, string);

		format(string, sizeof(string), "%s/BackgroundColour", path);
		format(bgcol, 128, dj(file, string));

		format(string, sizeof(string), "%s/TextColour", path);
		format(textcol, 128, dj(file, string));

		for(new c; c < sizeof(colours); c++)
		{
			if(!strcmp(bgcol, colours[c], true))
			{
				Billboards[i][BackgroundColour] = colourcodes[c];
				break;
			}
		}
		for(new c; c < sizeof(colours); c++)
		{
			if(!strcmp(textcol, colours[c], true))
			{
				Billboards[i][TextColour] = colourcodes[c];
				break;
			}
		}

		format(string, sizeof(string), BillboardSplit(Billboards[i][AdText]));
		Billboards[i][Object] = CreateObject(floatround(BillboardObjects[i][0], floatround_round), BillboardObjects[i][1], BillboardObjects[i][2], BillboardObjects[i][3], BillboardObjects[i][4], BillboardObjects[i][5], BillboardObjects[i][6], 300.0);
		SetObjectMaterialText(Billboards[i][Object], string, 0, OBJECT_MATERIAL_SIZE_256x128, "Arial", 15, 1, 0xFFFFFFFF, 0xFF000000, 1);
	}

	print("[system] Billboards loaded.");
	return 1;
}

stock CreateBillboards()
{
	new path[64], file[64], string[128];
	format(file, sizeof(file), "Misc/Billboards.djson");

	if(!fexist(file))
		dini_Create(file);

	for(new i; i < MAX_BILLBOARDS; i++)
	{
		format(path, sizeof(path), "Billboards/Billboard%d", i);

		djStyled(true);
		djAutocommit(false);

		format(string, sizeof(string), "%s/Creator", path);
		djSet(file, string, "Nobody");

		format(string, sizeof(string), "%s/AdText", path);
		djSet(file, string, "Want to advertise here? Contact your nearest advertisement agency!");

		format(string, sizeof(string), "%s/TimeLeft", path);
		djSetInt(file, string, 0);

		format(string, sizeof(string), "%s/BackgroundColour", path);
		djSetInt(file, string, 0xFF000000);

		format(string, sizeof(string), "%s/TextColour", path);
		djSetInt(file, string, 0xFFFFFFFF);

		djCommit(file);
		djAutocommit(true);
	}
	return 1;
}

stock SaveBillboard(idx)
{
	new path[64], file[64], string[128];
	format(file, sizeof(file), "Misc/Billboards.djson");
	format(path, sizeof(path), "Billboards/Billboard%d", idx);

	if(!fexist(file))
		dini_Create(file);

	djStyled(true);
	djAutocommit(false);

	new colours[11][] = { "red", "blue", "lightblue", "black", "white", "green", "darkgreen", "yellow", "orange", "purple", "pink" };
	new colourcodes[11] = { 0xFFE03434, 0xFF1900FF, 0xFF1EBBD4, 0xFF171717, 0xFFFFFFFF, 0xFF23D94D, 0xFF004D12, 0xFFD0D62B, 0xFFE67F12, 0xFF861BDE, 0xFFED11ED };

	new bgcol[10] = "black", textcol[10] = "white";
	for(new i; i < sizeof(colours); i++)
	{
		if(Billboards[idx][BackgroundColour] == colourcodes[i])
		{
			format(bgcol, 10, colours[i]);
			break;
		}
	}
	for(new i; i < sizeof(colours); i++)
	{
		if(Billboards[idx][TextColour] == colourcodes[i])
		{
			format(textcol, 10, colours[i]);
			break;
		}
	}

	format(string, sizeof(string), "%s/Creator", path);
	djSet(file, string, Billboards[idx][Creator]);

	format(string, sizeof(string), "%s/AdText", path);
	djSet(file, string, Billboards[idx][AdText]);

	format(string, sizeof(string), "%s/TimeLeft", path);
	djSetInt(file, string, Billboards[idx][TimeLeft]);

	format(string, sizeof(string), "%s/BackgroundColour", path);
	djSet(file, string, bgcol);

	format(string, sizeof(string), "%s/TextColour", path);
	djSet(file, string, textcol);

	djCommit(file);
	djAutocommit(true);

	printf("[system] Billboard %d saved.", idx);
	return 1;
}

stock SaveBillboards()
{
	for(new i; i < MAX_BILLBOARDS; i++)
		SaveBillboard(i);
	return 1;
}

stock ResetBillboard(idx)
{
	format(Billboards[idx][Creator], 25, "Nobody");
	format(Billboards[idx][AdText], 128, "Want to advertise here? Contact your nearest advertisement agency!");
	Billboards[idx][TimeLeft] = 0;
	Billboards[idx][BackgroundColour] = 0xFF000000;
	Billboards[idx][TextColour] = 0xFFFFFFFF;

	SetObjectMaterialText(Billboards[idx][Object], BillboardSplit(Billboards[idx][AdText]), 0, OBJECT_MATERIAL_SIZE_256x128, "Arial", 15, 1, Billboards[idx][TextColour], Billboards[idx][BackgroundColour], 1);

	SaveBillboard(idx);
	return 1;
}

stock BillboardSplit(text[])
{
	new string[128], newstart;
	format(string, sizeof(string), text);
	for(new x; x < 5; x++)
	{
		if(strlen(string) > 30 * (x + 1))
		{
			new tmp;
			for(new j = 30 * (x + 1); j > newstart; j--)
			{
				if(string[j] == ' ' && tmp == 0)
				{
					strins(string, "\n", j + 1);
					newstart = j + 1;
					tmp = 1;
				}
			}
		}
	}
	return string;
}

CMD:setadprice(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 5)
		return 1;

	new adprice, adtype[10];

	if(sscanf(params, "s[10]d", adtype, adprice))
		return SendClientMessage(playerid, GREY, "SYNTAX: /setadprice [type of ad] [price of ad]");

	if(strfind("adviz mobile billboard", adtype, true) == -1)
		return SendClientMessage(playerid, WHITE, "Invalid ad type! Valid ad types are \"adviz\", \"mobile\" and \"billboard\".");

	if(adprice < 0 || adprice > 10000)
		return SendClientMessage(playerid, WHITE, "Invalid ad price! Valid ad prices are 1 - 10,000.");

	new string[128];

	if(!strcmp("adviz", adtype))
	{
		format(string, sizeof(string), "You have set the AdViz advertising price to $%d.", adprice);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "[ADMIN] %s has set the AdViz advertising price to $%d (was $%d).", Player[playerid][AdminName], adprice, AdVizPrice);
		StatLog(string);
		AdVizPrice = adprice;
		dini_IntSet("Assets.ini", "AdVizPrice", adprice);
	}

	if(!strcmp("mobile", adtype))
	{
		format(string, sizeof(string), "You have set the mobile advertising price to $%d.", adprice);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "[ADMIN] %s has set the mobile advertising price to $%d (was $%d).", Player[playerid][AdminName], adprice, MobilePrice);
		StatLog(string);
		MobilePrice = adprice;
		dini_IntSet("Assets.ini", "MobilePrice", adprice);
	}

	if(!strcmp("billboard", adtype))
	{
		format(string, sizeof(string), "You have set the billboard advertising price to $%d.", adprice);
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "[ADMIN] %s has set the billboard advertising price to $%d (was $%d).", Player[playerid][AdminName], adprice, BillboardPrice);
		StatLog(string);
		BillboardPrice = adprice;
		dini_IntSet("Assets.ini", "BillboardPrice", adprice);
	}

	return 1;
}

CMD:setbillboardrentdays(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 5)
		return 1;

	if(isnull(params) || !IsNumeric(params))
		return SendClientMessage(playerid, GREY, "SYNTAX: /setbillboardrentdays [days]");

	new string[128];
	format(string, sizeof(string), "You have set the amount of days for billboard rent to %d (was %d).", strval(params), BillboardsDays);
	SendClientMessage(playerid, -1, string);

	format(string, sizeof(string), "[ADMIN] %s has set the billboard rent days to $d (was $d).", Player[playerid][AdminName], strval(params), BillboardsDays);
	StatLog(string);

	BillboardsDays = strval(params);
	dini_IntSet("Assets.ini", "BillboardsDays", BillboardsDays);
	return 1;
}

forward PartyBusColour(playerid, vehicleid);
public PartyBusColour(playerid, vehicleid)
{
	ChangeVehicleColor(vehicleid, random(255), random(255));
}

CMD:partybus(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 5)
		return 1;

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "You need to be in a vehicle to use this>");

	if(GetPlayerVehicleSeat(playerid) != 0)
		return SendClientMessage(playerid, -1, "You have to be the driver to use this.");

	new vehid = GetPlayerVehicleID(playerid);
	Player[playerid][PartyBusVehicle] = vehid;
	switch(Player[playerid][PartyBussin])
	{
		case 0:
		{
			Player[playerid][PartyBusTimer] = SetTimerEx("PartyBusColour", 100, true, "dd", playerid, vehid);
			SendClientMessage(playerid, -1, "You have enabled party bus.");
			Player[playerid][PartyBussin] = 1;
		}
		case 1:
		{
			KillTimer(Player[playerid][PartyBusTimer]);
			SendClientMessage(playerid, -1, "You have disabled party bus.");
			Player[playerid][PartyBussin] = 0;
		}
	}
	return 1;
}

CMD:whoisinrally(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(RallyInProgress < 1)
		return SendClientMessage(playerid, -1, "No rally in progress.");

	new string[128];
	SendClientMessage(playerid, GREY, "-----------------------------------");
	foreach(Player, i)
	{
		if(Player[i][InRally] > 0)
		{
			format(string, sizeof(string), "%s (%d)", GetName(i), Player[i][RallyCP]);
			SendClientMessage(playerid, -1, string);
		}
	}
	SendClientMessage(playerid, GREY, "-----------------------------------");
	return 1;
}

CMD:checkprices(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new biz;
	if(sscanf(params, "d", biz))
		return SendClientMessage(playerid, GREY, "SYNTAX: /checkprices [businessid]");

	if(biz < 1 || biz > MAX_BUSINESSES)
		return SendClientMessage(playerid, -1, "Invalid business ID.");

	SendClientMessage(playerid, GREY, "-----------------------------------------");
	new string[128];
	switch(Businesses[biz][bType])
	{
		case 1:
		{
			format(string, sizeof(string), "%s - Owner: %s", Businesses[biz][bName], Businesses[biz][bOwner]);
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Rope - %s", PrettyMoney(Businesses[biz][bProductPrice1]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Rags - %s", PrettyMoney(Businesses[biz][bProductPrice2]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Phone - %s", PrettyMoney(Businesses[biz][bProductPrice3]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Sprunk - %s", PrettyMoney(Businesses[biz][bProductPrice4]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Spraycan - %s", PrettyMoney(Businesses[biz][bProductPrice5]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Walkie Talkie - %s", PrettyMoney(Businesses[biz][bProductPrice6]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Personal Radio - %s", PrettyMoney(Businesses[biz][bProductPrice7]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Toolkit - %s", PrettyMoney(Businesses[biz][bProductPrice8]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Gas Can - %s", PrettyMoney(Businesses[biz][bProductPrice9]));
			SendClientMessage(playerid, -1, string);
		}
		case 2:
		{
			format(string, sizeof(string), "%s - Owner: %s", Businesses[biz][bName], Businesses[biz][bOwner]);
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "All skins - %s", PrettyMoney(Businesses[biz][bProductPrice1]));
			SendClientMessage(playerid, -1, string);
		}
		case 3:
		{
			format(string, sizeof(string), "%s - Owner: %s", Businesses[biz][bName], Businesses[biz][bOwner]);
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Wine - %s", PrettyMoney(Businesses[biz][bProductPrice1]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Beer - %s", PrettyMoney(Businesses[biz][bProductPrice2]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Sprunk - %s", PrettyMoney(Businesses[biz][bProductPrice3]));
			SendClientMessage(playerid, -1, string);
		}
		case 4:
		{
			format(string, sizeof(string), "%s - Owner: %s", Businesses[biz][bName], Businesses[biz][bOwner]);
			SendClientMessage(playerid, -1, string);
			SendClientMessage(playerid, -1, "This business does not control ad prices.");
		}
		case 5:
		{
			format(string, sizeof(string), "%s - Owner: %s", Businesses[biz][bName], Businesses[biz][bOwner]);
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Rope - %s", PrettyMoney(Businesses[biz][bProductPrice1]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Small white vibrator - %s", PrettyMoney(Businesses[biz][bProductPrice2]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Silver vibrator - %s", PrettyMoney(Businesses[biz][bProductPrice3]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Large white vibrator - %s", PrettyMoney(Businesses[biz][bProductPrice4]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Priest costume - %s", PrettyMoney(Businesses[biz][bProductPrice5]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Naughty police woman costume - %s", PrettyMoney(Businesses[biz][bProductPrice6]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Cat woman costume - %s", PrettyMoney(Businesses[biz][bProductPrice7]));
			SendClientMessage(playerid, -1, string);
		}
		case 7:
		{
			format(string, sizeof(string), "%s - Owner: %s", Businesses[biz][bName], Businesses[biz][bOwner]);
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Media Studies - %s", PrettyMoney(Businesses[biz][bProductPrice1]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Civil Law Degree - %s", PrettyMoney(Businesses[biz][bProductPrice2]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Intermediate English Degree - %s", PrettyMoney(Businesses[biz][bProductPrice3]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Intermediate Mathematics Degree - %s", PrettyMoney(Businesses[biz][bProductPrice4]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Intermediate Chemistry Degree - %s", PrettyMoney(Businesses[biz][bProductPrice5]));
			SendClientMessage(playerid, -1, string);
		}
		case 9:
		{
			format(string, sizeof(string), "%s - Owner: %s", Businesses[biz][bName], Businesses[biz][bOwner]);
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Marriage - %s", PrettyMoney(Businesses[biz][bProductPrice1]));
			SendClientMessage(playerid, -1, string);
		}
		case 10:
		{
			format(string, sizeof(string), "%s - Owner: %s", Businesses[biz][bName], Businesses[biz][bOwner]);
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Boxing - %s", PrettyMoney(Businesses[biz][bProductPrice1]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Kung Fu - %s", PrettyMoney(Businesses[biz][bProductPrice2]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Knee Head - %s", PrettyMoney(Businesses[biz][bProductPrice3]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Grab Kick - %s", PrettyMoney(Businesses[biz][bProductPrice4]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Elbow - %s", PrettyMoney(Businesses[biz][bProductPrice5]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Gang 1 - %s", PrettyMoney(Businesses[biz][bProductPrice6]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Drunk - %s", PrettyMoney(Businesses[biz][bProductPrice7]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Sexy - %s", PrettyMoney(Businesses[biz][bProductPrice8]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Fatty - %s", PrettyMoney(Businesses[biz][bProductPrice9]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Bad Back - %s", PrettyMoney(Businesses[biz][bProductPrice10]));
			SendClientMessage(playerid, -1, string);
		}
		case 11:
		{
			format(string, sizeof(string), "%s - Owner: %s", Businesses[biz][bName], Businesses[biz][bOwner]);
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "500G Pot - %s", PrettyMoney(Businesses[biz][bProductPrice1]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "1000G Pot - %s", PrettyMoney(Businesses[biz][bProductPrice2]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "1500G Pot - %s", PrettyMoney(Businesses[biz][bProductPrice3]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "5000G Pot - %s", PrettyMoney(Businesses[biz][bProductPrice4]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "500G Cocaine - %s", PrettyMoney(Businesses[biz][bProductPrice5]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "1000G Cocaine - %s", PrettyMoney(Businesses[biz][bProductPrice6]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "1500G Cocaine - %s", PrettyMoney(Businesses[biz][bProductPrice7]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "5000G Cocaine - %s", PrettyMoney(Businesses[biz][bProductPrice8]));
			SendClientMessage(playerid, -1, string);
		}
		case 12:
		{
			format(string, sizeof(string), "%s - Owner: %s", Businesses[biz][bName], Businesses[biz][bOwner]);
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Sprunk - %s", PrettyMoney(Businesses[biz][bProductPrice1]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "%s - %s", Businesses[biz][bFoodName1], PrettyMoney(Businesses[biz][bProductPrice2]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "%s - %s", Businesses[biz][bFoodName2], PrettyMoney(Businesses[biz][bProductPrice3]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "%s - %s", Businesses[biz][bFoodName3], PrettyMoney(Businesses[biz][bProductPrice4]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "%s - %s", Businesses[biz][bFoodName4], PrettyMoney(Businesses[biz][bProductPrice5]));
			SendClientMessage(playerid, -1, string);
		}
		case 13:
		{
			format(string, sizeof(string), "%s - Owner: %s", Businesses[biz][bName], Businesses[biz][bOwner]);
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Fishing Rod - %s", PrettyMoney(Businesses[biz][bProductPrice1]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Fish Bait - %s", PrettyMoney(Businesses[biz][bProductPrice2]));
			SendClientMessage(playerid, -1, string);
		}
		case 15:
		{
			format(string, sizeof(string), "%s - Owner: %s", Businesses[biz][bName], Businesses[biz][bOwner]);
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Engine parts - %s", PrettyMoney(Businesses[biz][bProductPrice1]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "NOS bottle - %s", PrettyMoney(Businesses[biz][bProductPrice2]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Hydraulics kit - %s", PrettyMoney(Businesses[biz][bProductPrice3]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Rope - %s", PrettyMoney(Businesses[biz][bProductPrice4]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Rags - %s", PrettyMoney(Businesses[biz][bProductPrice5]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Gas can - %s", PrettyMoney(Businesses[biz][bProductPrice6]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Workbench - %s", PrettyMoney(Businesses[biz][bProductPrice7]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Toolkit - %s", PrettyMoney(Businesses[biz][bProductPrice8]));
			SendClientMessage(playerid, -1, string);
		}
		case 16:
		{
			format(string, sizeof(string), "%s - Owner: %s", Businesses[biz][bName], Businesses[biz][bOwner]);
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Rope - %s", PrettyMoney(Businesses[biz][bProductPrice1]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Rags - %s", PrettyMoney(Businesses[biz][bProductPrice2]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Gas can - %s", PrettyMoney(Businesses[biz][bProductPrice3]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Sprunk - %s", PrettyMoney(Businesses[biz][bProductPrice4]));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Gas pump - %s", PrettyMoney(Businesses[biz][bProductPrice5]));
			SendClientMessage(playerid, -1, string);
		}
		default:
		{
			format(string, sizeof(string), "%s - Owner: %s", Businesses[biz][bName], Businesses[biz][bOwner]);
			SendClientMessage(playerid, -1, string);
			SendClientMessage(playerid, -1, "This business doesn't have custom prices.");
		}
	}
	SendClientMessage(playerid, GREY, "-----------------------------------------");
	return 1;
}

CMD:adrevenue(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new string[128];
	format(string, sizeof(string), "Current mobile ad revenue: $%d", TotalMobileMoney);
	SendClientMessage(playerid, WHITE, string);

	return 1;
}

CMD:deliverpizza(playerid, params[])
{
	if(Jobs[Player[playerid][Job]][JobType] != JOB_PIZZABOY && Jobs[Player[playerid][Job2]][JobType] != JOB_PIZZABOY)
		return SendClientMessage(playerid, -1, "You must be a Pizza Boy to do this.");

	if(Player[playerid][Checkpoint] > 0)
		return SendClientMessage(playerid, -1, "You already have a checkpoint marked. Type /killcheckpoint to kill it or go to it first.");

	if(Player[playerid][PizzaPay] > 0)
		return SendClientMessage(playerid, -1, "Collect your pay for your last delivery first!");

	new x = (Jobs[Player[playerid][Job]][JobType] == JOB_PIZZABOY) ? (Player[playerid][Job]) : (Player[playerid][Job2]);

	if(!IsPlayerInRangeOfPoint(playerid, 50, Jobs[x][JobMiscLocationOneX], Jobs[x][JobMiscLocationOneY], Jobs[x][JobMiscLocationOneZ]))
		return SendClientMessage(playerid, -1, "You need to return to the pizza boy job site to start a new delivery!");

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "You have to be on a pizza bike to do this.");

	new sql = GetVSQLID(GetPlayerVehicleID(playerid)), idx = GetVIndex(sql);

	if(sql == 0)
		return SendClientMessage(playerid, -1, "The vehicle must be a saved vehicle.");

	if(Veh[idx][Job] != Player[playerid][Job] && Veh[idx][Job] != Player[playerid][Job2])
		return SendClientMessage(playerid, -1, "You have to be on the pizza boy bike to deliver pizzas.");

	if(Player[playerid][PizzaRun] > 0)
		return SendClientMessage(playerid, -1, "You're already on a pizza delivery.");

	if(Player[playerid][PizzaCooldown] > gettime())
		return SendClientMessage(playerid, -1, "You can't do that right now.");

	new point = GetPizzaPoint(playerid), string[128], zone[MAX_ZONE_NAME];
	switch(Player[playerid][PizzaDelivers])
	{
		case 0 .. 199: Player[playerid][PizzaRun] = 1;
		case 200 .. 399: Player[playerid][PizzaRun] = 2;
		case 400 .. 599: Player[playerid][PizzaRun] = 3;
		default: Player[playerid][PizzaRun] = 4;
	}

	for(new i; i < MAX_HOUSES; i++)
	{
		if(PizzaOrder[i] > 0 && PizzaOrderTaken[i] == 0)
		{
			new Float:cp_pos[3];
			if(Houses[i][HouseType] == 1 && GetHouseApartmentComplex(i) > 0)
			{
				cp_pos[0] = Businesses[GetHouseApartmentComplex(i)][bExteriorX];
				cp_pos[1] = Businesses[GetHouseApartmentComplex(i)][bExteriorY];
				cp_pos[2] = Businesses[GetHouseApartmentComplex(i)][bExteriorZ];
			}
			else
			{
				cp_pos[0] = Houses[i][hExteriorX];
				cp_pos[1] = Houses[i][hExteriorY];
				cp_pos[2] = Houses[i][hExteriorZ];
			}

			SetPlayerCheckpoint(playerid, cp_pos[0], cp_pos[1], cp_pos[2], 5);
			format(string, sizeof(string), "You have %d %s to deliver.", Player[playerid][PizzaRun], (Player[playerid][PizzaRun] > 1) ? ("pizzas") : ("pizza"));
			SendClientMessage(playerid, -1, string);
			Get2DPosZone(cp_pos[0], cp_pos[1], zone, MAX_ZONE_NAME);
			format(string, sizeof(string), "Head to %s to deliver the pizza.", zone);
			SendClientMessage(playerid, YELLOW, string);

			PizzaOrderTaken[i] = playerid + 1;

			Player[playerid][PizzaTimeCheck] = gettime() + 15;
			Player[playerid][PizzaCooldown] = gettime() + 300;
			Player[playerid][Checkpoint] = 1;
			Player[playerid][PizzaDist] = GetPlayerDistanceFromPoint(playerid, cp_pos[0], cp_pos[1], cp_pos[2]);

			return 1;
		}
	}

	SetPlayerCheckpoint(playerid, pizzaDeliveries[point][0], pizzaDeliveries[point][1], pizzaDeliveries[point][2], 5);
	format(string, sizeof(string), "You have %d %s to deliver.", Player[playerid][PizzaRun], (Player[playerid][PizzaRun] > 1) ? ("pizzas") : ("pizza"));
	SendClientMessage(playerid, -1, string);
	Get2DPosZone(pizzaDeliveries[point][0], pizzaDeliveries[point][1], zone, MAX_ZONE_NAME);
	format(string, sizeof(string), "Head to %s to deliver the pizza.", zone);
	SendClientMessage(playerid, YELLOW, string);

	Player[playerid][PizzaTimeCheck] = gettime() + 15;
	Player[playerid][PizzaCooldown] = gettime() + 300;
	Player[playerid][PizzaCP] = point;
	Player[playerid][Checkpoint] = 1;
	Player[playerid][PizzaDist] = GetPlayerDistanceFromPoint(playerid, pizzaDeliveries[point][0], pizzaDeliveries[point][1], pizzaDeliveries[point][2]);
	return 1;
}

CMD:orderpizza(playerid, params[])
{
	new house = Player[playerid][InHouse];
	if((Player[playerid][House] != house && Player[playerid][House2] != house) || house == 0)
		return SendClientMessage(playerid, -1, "You must be in your house to order pizza.");
	new amount = strval(params);
	if(isnull(params) || !IsNumeric(params) || amount < 1)
		return SendClientMessage(playerid, GREY, "SYNTAX: /orderpizza [amount]");

	if(amount > 100)
		return SendClientMessage(playerid, -1, "You can't order more than 100 pizzas at once!");
		
	new price = amount * 20, string[128];
	if(Player[playerid][Money] < price)
	{
		format(string, sizeof(string), "You don't have enough money for that many pizza(s) (%s)! Each pizza is $20.", PrettyMoney(price));
		return SendClientMessage(playerid, -1, string);
	}

	PizzaOrderTaken[house] = 0;
	PizzaOrder[house] = amount;
	format(string, sizeof(string), "You have ordered %d pizza(s). They will arrive shortly.", amount);
	SendClientMessage(playerid, -1, string);
	return 1;
}

CMD:maptp(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new string[128];
	Player[playerid][MapTP] = (Player[playerid][MapTP]) ? (0) : (1);
	format(string, sizeof(string), "Map teleporting %s", (Player[playerid][MapTP]) ? ("enabled. (ESC > Map > right click)") : ("disabled."));
	SendClientMessage(playerid, -1, string);
	return 1;
}

/*CMD:lastrestart(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new string[128];
	format(string, sizeof(string), "Last restart was on %s", LastRestartTime);
	return SendClientMessage(playerid, WHITE, string);
}*/

stock UpdateRallyLeaderboard(playerid)
{
	if(Player[playerid][RallyCP] > RallyFirstCP)
	{
		if(RallyThirdID == playerid && RallySecondID != playerid)
			RallyThirdID = RallySecondID;
		if(RallyFirstID != playerid)
			RallySecondID = RallyFirstID;
		RallyFirstID = playerid;
		RallyFirstCP = Player[playerid][RallyCP];
	}
	else if(Player[playerid][RallyCP] > RallySecondCP)
	{
		if(RallySecondID != playerid)
			RallyThirdID = RallySecondID;
		RallySecondID = playerid;
		RallySecondCP = Player[playerid][RallyCP];
	}
	else if(Player[playerid][RallyCP] > RallyThirdCP)
	{
		RallyThirdID = playerid;
		RallyThirdCP = Player[playerid][RallyCP];
	}

	new string[128];
	format(string, sizeof(string), "~n~~r~- First -~n~~w~%s~n~~n~~r~- Second -~n~~w~%s~n~~n~~r~- Third -~n~~w~%s~n~", (RallyFirstID == INVALID_PLAYER_ID) ? ("Nobody") : (GetNameEx(RallyFirstID)), (RallySecondID == INVALID_PLAYER_ID) ? ("Nobody") : (GetNameEx(RallySecondID)), (RallyThirdID == INVALID_PLAYER_ID) ? ("Nobody") : (GetNameEx(RallyThirdID)));
	TextDrawSetString(RallyLB, string);
	foreach(Player, i)
	{
		if(Player[i][InRally] < 1)
			continue;

		TextDrawHideForPlayer(i, RallyLB);
		TextDrawShowForPlayer(i, RallyLB);
	}
}

CMD:phone(playerid, params[])
{
	if(Player[playerid][PhoneN] == -1)
		return SendClientMessage(playerid, -1, "You don't own a mobile phone!");

	if(strval(GetPhoneInfo(Player[playerid][PhoneN], "status")) == 0)
		return SendClientMessage(playerid, -1, "Your phone is off.");

	if(Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] == 1 || Player[playerid][Tied] >= 1)
		return SendClientMessage(playerid, -1, "You can't do that, you're incapacitated!");

	if(Player[playerid][PrisonDuration] > 0 || Player[playerid][PrisonID] > 0)
		return SendClientMessage(playerid, -1, "You can't do that while in prison!");

	if(Player[playerid][Gagged] == 1)
		return SendClientMessage(playerid, -1, "You can't do that, your mouth is covered!");

	new string[128];
	format(string, sizeof(string), "* %s takes out their phone and looks at it.", GetNameEx(playerid));
	NearByMessage(playerid, NICESKY, string);
	PlayerPlaySound(playerid, 3600, 0, 0, 0);
	return ShowPlayerDialog(playerid, PHONE_MAIN, DIALOG_STYLE_LIST, "Phone Menu", "Applications\nContacts\nInbox\nCall History\nEdit Phone\nRecent Advertisments", "Select", "Cancel");
}

CMD:remotefinetokens(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 3)
		return 1;

	new name[MAX_PLAYER_NAME], amount, reason[128];

	if(sscanf(params, "s[24]ds[128]", name, amount, reason))
		return SendClientMessage(playerid, GREY, "SYNTAX: /remotefinetokens [player] [tokens] [reason]");

	if(!IsPlayerRegistered(name))
		return SendClientMessage(playerid, WHITE, "That player doesn't exist.");

	new tokens;
	tokens = GetRemoteIntValue(name, "VipTokens");

	if(amount > tokens)
		return SendClientMessage(playerid, WHITE, "That player doesn't have that many tokens!");

	if(amount > 0 && amount < 100001)
	{
		new string[128];
		tokens -= amount;

		mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE playeraccounts SET VipTokens = '%d' WHERE NormalName = '%e'", tokens, name);
		mysql_tquery(MYSQL_MAIN, string, "OnQueryFinish", "dddss", THREAD_REMOTE_FINE_TOKENS, playerid, amount, name, reason);
	}
	else
		SendClientMessage(playerid, WHITE, "The amount must be between 1 and 100,000!");

	return 1;
}

CMD:remotefinebank(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new name[MAX_PLAYER_NAME], amount, reason[128];

	if(sscanf(params, "s[24]ds[128]", name, amount, reason))
		return SendClientMessage(playerid, GREY, "SYNTAX: /remotefinebank [player] [amount] [reason]");

	if(!IsPlayerRegistered(name))
		return SendClientMessage(playerid, WHITE, "That player doesn't exist.");

	if(amount < 0)
		SendClientMessage(playerid, -1, "You can't fine them negative amounts.");

	if(GetRemoteAdminLevel(name) > Player[playerid][AdminLevel])
		return SendClientMessage(playerid, -1, "Can't do that to a higher level admin.");

	new string[128], bank;
	bank = GetRemoteIntValue(name, "BankMoney") - amount;

	mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE playeraccounts SET BankMoney = '%d' WHERE NormalName = '%e'", bank, name);
	mysql_tquery(MYSQL_MAIN, string, "OnQueryFinish", "dddss", THREAD_REMOTE_FINE_BANK, playerid, amount, name, reason);
	return 1;
}

CMD:checksafe(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 4)
		return 1;

	if(Player[playerid][GroupRank] < 4)
		return SendClientMessage(playerid, -1, "You must be Mayor to use this.");

	new string[128];
	format(string, sizeof(string), "Total money in safe: %s", PrettyMoney(Groups[Player[playerid][Group]][SafeMoney]));
	return SendClientMessage(playerid, GREY, string);
}

CMD:givehousekey(playerid, params[])
{
	if(Player[playerid][House] == 0 && Player[playerid][House2] == 0)
		return SendClientMessage(playerid, -1, "You don't have a house!");

	new house, id;
	if(sscanf(params, "du", house, id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /givehousekey [house (1/2)] [playerid]");

	if(id == playerid)
		return SendClientMessage(playerid, -1, "You can't do that.");

	if(GetDistanceBetweenPlayers(playerid, id) > 6)
		return SendClientMessage(playerid, -1, "You are not in range of that player.");

	if(Player[playerid][Money] < 50)
		return SendClientMessage(playerid, -1, "You need $50 for the key to be created!");

	new string[128];
	if(Player[id][HouseKey] > 0)
	{
		format(string, sizeof(string), "%s is trying to give you a house key, but you already have one! (( /drophousekey ))", GetNameEx(playerid));
		SendClientMessage(id, YELLOW, string);
		return SendClientMessage(playerid, -1, "That player already has a set of house keys.");
	}

	new houseid;
	switch(house)
	{
		case 1:
		{
			if(Player[playerid][House] == 0)
				return SendClientMessage(playerid, -1, "You don't have a house in that slot.");
			houseid = Player[playerid][House];
		}
		case 2:
		{
			if(Player[playerid][House2] == 0)
				return SendClientMessage(playerid, -1, "You don't have a house in that slot.");
			houseid = Player[playerid][House2];
		}
		default: return SendClientMessage(playerid, -1, "House is either 1 or 2.");
	}

	if(Houses[houseid][HouseType] == 1)
		return SendClientMessage(playerid, -1, "You can't give house keys with an apartment.");

	if(!strcmp(Houses[houseid][KeyHolder1], "Nobody", true) || strlen(Houses[houseid][KeyHolder1]) < 1)
	{
		if(Player[playerid][AdminDuty] > 0)
			format(Houses[houseid][KeyHolder1], 24, Player[playerid][NormalName]);
		else
			format(Houses[houseid][KeyHolder1], 24, Player[id][NormalName]);
	}
	else if(!strcmp(Houses[houseid][KeyHolder2], "Nobody", true) || strlen(Houses[houseid][KeyHolder2]) < 1)
		if(Player[playerid][AdminDuty] > 0)
			format(Houses[houseid][KeyHolder2], 24, Player[playerid][NormalName]);
		else
			format(Houses[houseid][KeyHolder2], 24, Player[id][NormalName]);
	else
		return SendClientMessage(playerid, -1, "You don't have any spare house keys to give.");

	Player[id][HouseKey] = houseid;
	Player[playerid][Money] -= 50;
	format(string, sizeof(string), "You have been given a set of house keys from %s.", GetNameEx(playerid));
	SendClientMessage(id, -1, string);
	format(string, sizeof(string), "* %s has passed a set of house keys to %s.", GetNameEx(playerid), GetNameEx(id));
	NearByMessage(playerid, NICESKY, string);
	SaveHouse(houseid);
	return 1;
}

CMD:drophousekey(playerid, params[])
{
	if(Player[playerid][HouseKey] == 0)
		return SendClientMessage(playerid, -1, "You don't have a house key to drop.");

	new h = Player[playerid][HouseKey];
	if(Player[playerid][AdminDuty] > 0)
	{
		if(!strcmp(Houses[h][KeyHolder1], Player[playerid][NormalName], true))
			format(Houses[h][KeyHolder1], 24, "Nobody");
		else if(!strcmp(Houses[h][KeyHolder2], Player[playerid][NormalName], true))
			format(Houses[h][KeyHolder2], 24, "Nobody");
	}
	else
	{
		if(!strcmp(Houses[h][KeyHolder1], Player[playerid][NormalName], true))
			format(Houses[h][KeyHolder1], 24, "Nobody");
		else if(!strcmp(Houses[h][KeyHolder2], Player[playerid][NormalName], true))
			format(Houses[h][KeyHolder2], 24, "Nobody");
	}

	Player[playerid][HouseKey] = 0;
	new string[128];
	format(string, sizeof(string), "* %s has dropped a key.", GetNameEx(playerid));
	return NearByMessage(playerid, NICESKY, string);
}

CMD:buynewdoorlock(playerid, params[])
{
	if(Player[playerid][House] == 0 && Player[playerid][House2] == 0)
		return SendClientMessage(playerid, -1, "You need a house to do this.");

	new h = NearestHouse(playerid);

	if(Player[playerid][House] != h && Player[playerid][House2] != h)
		return SendClientMessage(playerid, -1, "You must be at your houses front door to do this.");

	if(!IsPlayerInRangeOfPoint(playerid, 5, Houses[h][hExteriorX], Houses[h][hExteriorY], Houses[h][hExteriorZ]))
		return SendClientMessage(playerid, -1, "You must be at your houses front door to do this.");

	if(Player[playerid][Money] < 1000)
		return SendClientMessage(playerid, -1, "You don't have enough money to do this.");

	RemovePlayerHouseKeys(h);
	Player[playerid][Money] -= 1000;
	format(Houses[h][KeyHolder1], 24, "Nobody");
	format(Houses[h][KeyHolder2], 24, "Nobody");
	return SendClientMessage(playerid, -1, "You have successfully bought a new door lock for $1,000!");
}

stock RemovePlayerHouseKeys(h)
{

	new id1 = GetPlayerID(Houses[h][KeyHolder1]);
	new id2 = GetPlayerID(Houses[h][KeyHolder2]);

	if(id1 != INVALID_PLAYER_ID)
	{
		Player[id1][HouseKey] = 0;
	}
	else
	{
		id1 = GetPlayerIDEx(Houses[h][KeyHolder1]);
		if(id1 != INVALID_PLAYER_ID)
		{
			Player[id1][HouseKey] = 0;
		}
		else
		{
			new string[128];
			mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE playeraccounts SET HouseKey = '0' WHERE NormalName = '%e'", Houses[h][KeyHolder1]);
			mysql_query(MYSQL_MAIN, string, false);
		}
	}

	if(id2 != INVALID_PLAYER_ID)
	{
		Player[id2][HouseKey] = 0;
	}
	else
	{
		id2 = GetPlayerIDEx(Houses[h][KeyHolder2]);
		if(id2 != INVALID_PLAYER_ID)
		{
			Player[id2][HouseKey] = 0;
		}
		else
		{
			new string[128];
			mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE playeraccounts SET HouseKey = '0' WHERE NormalName = '%e'", Houses[h][KeyHolder2]);
			mysql_query(MYSQL_MAIN, string, false);
		}
	}
	format(Houses[h][KeyHolder1], 24, "Nobody");
	format(Houses[h][KeyHolder2], 24, "Nobody");
	return 1;
}

CMD:tts(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(GetPVarInt(playerid, "TTS_AntiSpam") > gettime())
	{
		new string[128];
		format(string, sizeof(string), "Sorry, %d second cooldown.", GetPVarInt(playerid, "TTS_AntiSpam") - gettime());
		return SendClientMessage(playerid, -1, string);
	}

	new id, msg[255];
	if(sscanf(params, "us[255]", id, msg))
		return SendClientMessage(playerid, GREY, "SYNTAX: /tts [playerd] [message]");

	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, -1, "Player is not connected.");

	new url[255];
	format(url, sizeof(url), "http://translate.google.com/translate_tts?tl=en&q=%s", msg);

	StopAudioStreamForPlayer(id);
	PlayAudioStreamForPlayer(id, url);
	SetPVarInt(playerid, "TTS_AntiSpam", gettime() + 5);
	return 1;
}

CMD:ttsn(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(GetPVarInt(playerid, "TTS_AntiSpam") > gettime())
	{
		new string[128];
		format(string, sizeof(string), "Sorry, %d second cooldown.", GetPVarInt(playerid, "TTS_AntiSpam") - gettime());
		return SendClientMessage(playerid, -1, string);
	}

	if(isnull(params))
		return SendClientMessage(playerid, GREY, "SYNTAX: /ttsn [message]");

	new url[255];
	format(url, sizeof(url), "http://translate.google.com/translate_tts?tl=en&q=%s", params);

	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	foreach(Player, i)
	{
		if(!IsPlayerInRangeOfPoint(i, 7, x, y, z))
			continue;

		if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i) && GetPlayerInterior(playerid) == GetPlayerInterior(i))
		{
			StopAudioStreamForPlayer(i);
			PlayAudioStreamForPlayer(i, url);
		}
	}
	SetPVarInt(playerid, "TTS_AntiSpam", gettime() + 5);
	return 1;
}

CMD:placeslots(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 7 || Player[playerid][GroupRank] < 5)
		return SendClientMessage(playerid, -1, "You must be rank 5 of a casino group to do this.");

	if(Player[playerid][InGroupHQ] != Player[playerid][Group])
		return SendClientMessage(playerid, -1, "You must be inside your casino to place a slot machine.");

	new idx = -1, groupid = Player[playerid][Group];
	for(new i; i < MAX_SLOTS; i++)
	{
		if(Groups[groupid][slotsUsed][i])
			continue;

		idx = i;
		break;
	}

	if(idx == -1)
		return SendClientMessage(playerid, -1, "There are no free slots to be placed.");

	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	Groups[groupid][slotsUsed][idx] = 1;
	Groups[groupid][slotsX][idx] = pos[0];
	Groups[groupid][slotsY][idx] = pos[1];
	Groups[groupid][slotsZ][idx] = pos[2];
	Groups[groupid][slots3D][idx] = CreateDynamic3DTextLabel("Slot Machine\n/useslots", 0x038516FF, pos[0], pos[1], pos[2], 10);
	new res[128];
	format(res, sizeof(res), "%s has placed a slot machine (id %d)", GetName(playerid), idx);
	GroupMessageEx(playerid, ADMINORANGE, 4, res);
	SaveGroup(groupid);
	return 1;
}

CMD:removeslots(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 7 || Player[playerid][GroupRank] < 5)
		return SendClientMessage(playerid, -1, "You must be rank 5 of a casino group to do this.");

	new groupid = Player[playerid][Group], idx = -1;
	if(isnull(params))
	{
		for(new i; i < MAX_SLOTS; i++)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 2, Groups[groupid][slotsX][i], Groups[groupid][slotsY][i], Groups[groupid][slotsZ][i]))
				continue;

			if(!Groups[groupid][slotsUsed][i])
				continue;

			idx = i;
			break;
		}

		if(idx == -1)
			return SendClientMessage(playerid, -1, "You are not near a slot machine. (You can put slot machine ID as params)");

		Groups[groupid][slotsUsed][idx] = 0;
		Groups[groupid][slotsX][idx] = 0;
		Groups[groupid][slotsY][idx] = 0;
		Groups[groupid][slotsZ][idx] = 0;
		DestroyDynamic3DTextLabel(Groups[groupid][slots3D][idx]);
		new res[128];
		format(res, sizeof(res), "%s has removed a slot machine (id %d)", GetName(playerid), idx);
		GroupMessageEx(playerid, ADMINORANGE, 4, res);
		SaveGroup(groupid);
	}
	else
	{
		if(!IsNumeric(params))
			return SendClientMessage(playerid, GREY, "SYNTAX: /removeslots ([id])");

		idx = strval(params);

		if(!Groups[groupid][slotsUsed][idx])
			return SendClientMessage(playerid, -1, "That slots has not been created.");

		Groups[groupid][slotsUsed][idx] = 0;
		Groups[groupid][slotsX][idx] = 0;
		Groups[groupid][slotsY][idx] = 0;
		Groups[groupid][slotsZ][idx] = 0;
		DestroyDynamic3DTextLabel(Groups[groupid][slots3D][idx]);
		new res[128];
		format(res, sizeof(res), "%s has removed a slot machine (id %d)", GetName(playerid), idx);
		GroupMessageEx(playerid, ADMINORANGE, 4, res);
		SaveGroup(groupid);
	}
	return 1;
}

CMD:useslots(playerid, params[])
{
	if(Groups[Player[playerid][InGroupHQ]][CommandTypes] != 7)
		return SendClientMessage(playerid, -1, "You must be in a casino to do this.");

	if(Groups[Player[playerid][InGroupHQ]][Chips] == 0)
		return SendClientMessage(playerid, -1, "The games in this casino are unavailable at the time being."); 

	if(Player[playerid][PlayingHours] < 2 && Player[playerid][VipRank] < 1)
	{
		PlayerPlaySound(playerid, 5451, 0.0, 0.0, 0.0);
		return SendClientMessage(playerid, -1, "You must have over 2 hours to play on a slot machine.");
	}

	if(Player[playerid][PlayingSlots])
		return SendClientMessage(playerid, -1, "You are already using a slot machine.");

	if(Player[playerid][CasinoChips] < 1)
		return SendClientMessage(playerid, -1, "You have no casino chips!");

	if(Player[playerid][CasinoChips] > 500)
		return SendClientMessage(playerid, -1, "You have too many casino chips and can hold no more.");

	if(Groups[Player[playerid][InGroupHQ]][Chips] < 5000)
		return SendClientMessage(playerid, -1, "Slot machines are currently inoperable.");

	new groupid = Player[playerid][InGroupHQ], idx = -1;
	for(new i; i < MAX_SLOTS; i++)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 2, Groups[groupid][slotsX][i], Groups[groupid][slotsY][i], Groups[groupid][slotsZ][i]))
			continue;

		if(!Groups[groupid][slotsUsed][i])
			continue;

		idx = i;
		break;
	}

	if(idx == -1)
		return SendClientMessage(playerid, -1, "You're not near a slot machine.");

	SetPlayerCameraPos(playerid, 2212.8501, 1608.4500, 1018.4900);
	SetPlayerCameraLookAt(playerid, 2212.8401, 1609.4399, 1018.3200);
	TogglePlayerControllable(playerid, false);
	SendClientMessage(playerid, -1, "You are now playing slots. Type /leaveslots to leave.");
	Player[playerid][PlayingSlots] = 1;

	new res[128];
	format(res, sizeof(res), "~n~~n~~n~~l~Chips: %s~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~", IntToFormattedStr(Player[playerid][CasinoChips]));
	PlayerTextDrawSetString(playerid, SlotsTD[playerid], res);
	PlayerTextDrawShow(playerid, SlotsTD[playerid]);
	TextDrawShowForPlayer(playerid, SlotsPlay);
	TextDrawShowForPlayer(playerid, SlotsLeave);
	SelectTextDraw(playerid, YELLOW);

	return 1;
}

CMD:leaveslots(playerid, params[])
{
	if(!Player[playerid][PlayingSlots])
		return SendClientMessage(playerid, -1, "You are not using a slot machine.");

	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable(playerid, true);
	Player[playerid][PlayingSlots] = 0;
	CancelSelectTextDraw(playerid);
	TextDrawHideForPlayer(playerid, SlotsPlay);
	TextDrawHideForPlayer(playerid, SlotsLeave);
	PlayerTextDrawHide(playerid, SlotsTD[playerid]);
	PlayerPlaySound(playerid, 5454, 0.0, 0.0, 0.0);
	return 1;
}

CMD:movechipexchange(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 7 || Player[playerid][GroupRank] < 5)
		return SendClientMessage(playerid, -1, "You must be rank 5 of a casino group to do this.");

	if(Player[playerid][InGroupHQ] != Player[playerid][Group])
		return SendClientMessage(playerid, -1, "You must be in your casino to do this.");

	new Float:pos[3], groupid = Player[playerid][Group];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	DestroyDynamic3DTextLabel(Groups[groupid][ChipexLabel]);
	Groups[groupid][ChipPos][0] = pos[0];
	Groups[groupid][ChipPos][1] = pos[1];
	Groups[groupid][ChipPos][2] = pos[2];
	Groups[groupid][ChipsVW] = GetPlayerVirtualWorld(playerid);
	DestroyDynamicPickup(Groups[groupid][ChipsPickup]);
	Groups[groupid][ChipsPickup] = CreateDynamicPickup(1239, 23, Groups[groupid][ChipPos][0], Groups[groupid][ChipPos][1], Groups[groupid][ChipPos][2], Groups[groupid][ChipsVW], -1, -1, 150.0);

	Groups[groupid][ChipexLabel] = CreateDynamic3DTextLabel("/chipex", GREEN, pos[0], pos[1], pos[2], 10, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, Groups[groupid][ChipsVW], -1, -1, 100);

	new string[128];
	format(string, sizeof(string), "%s has moved the location of the chip exchange.", GetName(playerid));
	GroupMessageEx(playerid, ADMINORANGE, 4, string);
	SaveGroup(groupid);
	return 1;
}

CMD:chipexchange(playerid, params[])
{
	if(Groups[Player[playerid][InGroupHQ]][CommandTypes] != 7)
		return SendClientMessage(playerid, -1, "You must be in a casino to do this.");

	new groupid = Player[playerid][InGroupHQ];
	if(!IsPlayerInRangeOfPoint(playerid, 3, Groups[groupid][ChipPos][0], Groups[groupid][ChipPos][1], Groups[groupid][ChipPos][2]))
		return SendClientMessage(playerid, -1, "You need to be at a chip exchange to use this.");

	if(GetPlayerVirtualWorld(playerid) != Groups[groupid][ChipsVW])
		return 1;

	if(Groups[groupid][Chips] <= 0 || Groups[groupid][ChipShopLock])
		return SendClientMessage(playerid, -1, "The exchange is not open right now.");

	if(Player[playerid][PlayingHours] < 25 && Player[playerid][VipRank] < 1)
	{
		PlayerPlaySound(playerid, 5451, 0.0, 0.0, 0.0);
		return SendClientMessage(playerid, -1, "You need 25 hours or VIP to use this.");
	}

	new str[128], str2[128];
	format(str, sizeof(str), "%s chip exchange", Groups[groupid][GroupName]);
	format(str2, sizeof(str2), "In stock - %s\nBuy chips - $10\nSell chips - $10\n", IntToFormattedStr(Groups[groupid][Chips]));
	ShowPlayerDialog(playerid, CHIPSHOP_MAIN, DIALOG_STYLE_LIST, str, str2, "Select", "Cancel");
	return 1;
}
CMD:chipex(playerid, params[]) return cmd_chipexchange(playerid, params);

CMD:lockchipexchange(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 7 || Player[playerid][GroupRank] < 5)
		return SendClientMessage(playerid, -1, "You must be rank 5+ in a casino group to use this.");

	if(Player[playerid][InGroupHQ] != Player[playerid][Group])
		return SendClientMessage(playerid, -1, "You must be in your groups casino to use this.");

	new groupid = Player[playerid][InGroupHQ];
	if(!IsPlayerInRangeOfPoint(playerid, 3, Groups[groupid][ChipPos][0], Groups[groupid][ChipPos][1], Groups[groupid][ChipPos][2]))
		return SendClientMessage(playerid, -1, "You must be at the chip exchange to lock/unlock it.");

	Groups[groupid][ChipShopLock] = !Groups[groupid][ChipShopLock];
	SendClientMessage(playerid, -1, (Groups[groupid][ChipShopLock]) ? ("You have locked the chip exchange.") : ("You have unlocked the chip exchange."));
	return 1;
}

/*
	CreateObject(2325, 2212.82, 1609.17, 1018.32,   0.00, 0.00, 0.00);
	CreateObject(2347, 2212.73, 1609.16, 1018.33,   0.00, 0.00, 0.00);
	CreateObject(2348, 2212.84, 1609.16, 1018.33,   0.00, 0.00, 0.00);
	CreateObject(2349, 2212.95, 1609.16, 1018.33,   0.00, 0.00, 0.00);

	SetPlayerCameraPos(playerid, 2212.8501, 1608.4500, 1018.4900);
	SetPlayerCameraLookAt(playerid, 2212.8401, 1609.4399, 1018.3200);
*/

forward PreSpin(playerid);
public PreSpin(playerid)
{
	new Float:rxL, Float:ryL, Float:rzL;
	new Float:rxM, Float:ryM, Float:rzM;
	new Float:rxR, Float:ryR, Float:rzR;
	GetPlayerObjectRot(playerid, SlotSpinner[playerid][0], rxL, ryL, rzL);
	GetPlayerObjectRot(playerid, SlotSpinner[playerid][1], rxM, ryM, rzM);
	GetPlayerObjectRot(playerid, SlotSpinner[playerid][2], rxR, ryR, rzR);
    if(!SpinnerMoved)
	{
	    MovePlayerObject(playerid, SlotSpinner[playerid][0], 2212.73, 1609.16, 1018.33 + zOff,0.01,rxL + 120.0, 0.00, 0.0);
	    MovePlayerObject(playerid, SlotSpinner[playerid][1], 2212.84, 1609.16, 1018.33 + zOff,0.01,rxM + 120.0, 0.00, 0.0);
		MovePlayerObject(playerid, SlotSpinner[playerid][2], 2212.95, 1609.16, 1018.33 + zOff,0.01,rxR + 120.0, 0.00, 0.0);
		SpinnerMoved = true;
	}
	else
	{
	    MovePlayerObject(playerid, SlotSpinner[playerid][0], 2212.73, 1609.16, 1018.33 - zOff,0.01,rxL + 120.0, 0.00, 0.0);
	    MovePlayerObject(playerid, SlotSpinner[playerid][1], 2212.84, 1609.16, 1018.33 - zOff,0.01,rxM + 120.0, 0.00, 0.0);
		MovePlayerObject(playerid, SlotSpinner[playerid][2], 2212.95, 1609.16, 1018.33 - zOff,0.01,rxR + 120.0, 0.00, 0.0);
		SpinnerMoved = false;
	}
	return 1;
}

forward SpinSpinners(playerid);
public SpinSpinners(playerid)
{
	KillTimer(PreSpinTimer[playerid]);
	new RandSL = random(sizeof(Rotations));
	new RandSM = random(sizeof(Rotations));
	new RandSR = random(sizeof(Rotations));
	if(!SpinnerMoved)
	{
	    MovePlayerObject(playerid, SlotSpinner[playerid][0], 2212.73, 1609.16, 1018.33 + zOff,0.1, Rotations[RandSL] + 5.0, 0.00, 0.0);
	    MovePlayerObject(playerid, SlotSpinner[playerid][1], 2212.84, 1609.16, 1018.33 + zOff,0.1, Rotations[RandSM] + 5.0, 0.00, 0.0);
		MovePlayerObject(playerid, SlotSpinner[playerid][2], 2212.95, 1609.16, 1018.33 + zOff,0.1, Rotations[RandSR] + 5.0, 0.00, 0.0);
	}
	else
	{
	    MovePlayerObject(playerid, SlotSpinner[playerid][0], 2212.73, 1609.16, 1018.33 - zOff,0.1, Rotations[RandSL] + 5.0, 0.00, 0.0);
	    MovePlayerObject(playerid, SlotSpinner[playerid][1], 2212.84, 1609.16, 1018.33 - zOff,0.1, Rotations[RandSM] + 5.0, 0.00, 0.0);
		MovePlayerObject(playerid, SlotSpinner[playerid][2], 2212.95, 1609.16, 1018.33 - zOff,0.1, Rotations[RandSR] + 5.0, 0.00, 0.0);
	}
	SymbolL = LeftSpinnerResults[RandSL];
	SymbolM = MiddleSpinnerResults[RandSM];
	SymbolR = RightSpinnerResults[RandSR];
	SetPVarInt(playerid, "CantUseSlots", 0);
	GiveResult(playerid);
	return 1;
}

stock GiveResult(playerid)
{
	if(SymbolL == SymbolM&& SymbolM == SymbolR && SymbolL == SymbolR)
	{
		switch(SymbolL)
		{
                        case 1: // Single gold bar
			{
				if(Groups[Player[playerid][InGroupHQ]][Chips] < Groups[Player[playerid][InGroupHQ]][SlotPrizes][1])
					return SendClientMessage(playerid, -1, "No prize! There aren't enough chips in the casino. Try again later!");

				Player[playerid][CasinoChips] += Groups[Player[playerid][InGroupHQ]][SlotPrizes][1];
				Groups[Player[playerid][InGroupHQ]][Chips] -= Groups[Player[playerid][InGroupHQ]][SlotPrizes][1];
				new res[128];
				format(res, sizeof(res), "You rolled 3 single gold bars and won %d chips!", Groups[Player[playerid][InGroupHQ]][SlotPrizes][1]);
				SendClientMessage(playerid, -1, res);
				format(res, sizeof(res), "%s rolled 3 single gold bars and won %d chips. Group: %d", GetName(playerid),  Groups[Player[playerid][InGroupHQ]][SlotPrizes][1], Player[playerid][InGroupHQ]);
				StatLog(res);
				PlayerPlaySound(playerid, 5448, 0.0, 0.0, 0.0);
				format(res, sizeof(res), "~n~~n~~n~~l~Chips: %s~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~", IntToFormattedStr(Player[playerid][CasinoChips]));
				PlayerTextDrawSetString(playerid, SlotsTD[playerid], res);
				PlayerTextDrawShow(playerid, SlotsTD[playerid]);
				

			}
			case 2: //Double gold bar
			{
				if(Groups[Player[playerid][InGroupHQ]][Chips] < Groups[Player[playerid][InGroupHQ]][SlotPrizes][0])
					return SendClientMessage(playerid, -1, "No prize! There aren't enough chips in the casino. Try again later!");

				Player[playerid][CasinoChips] += Groups[Player[playerid][InGroupHQ]][SlotPrizes][0];
				Groups[Player[playerid][InGroupHQ]][Chips] -= Groups[Player[playerid][InGroupHQ]][SlotPrizes][0];
				new res[128];
				format(res, sizeof(res), "You rolled 3 double gold bars and won %d chips!", Groups[Player[playerid][InGroupHQ]][SlotPrizes][0]);
				SendClientMessage(playerid, -1, res);
				format(res, sizeof(res), "%s rolled 3 double gold bars and won %d chips. Group: %d", GetName(playerid),  Groups[Player[playerid][InGroupHQ]][SlotPrizes][0], Player[playerid][InGroupHQ]);
				StatLog(res);
				PlayerPlaySound(playerid, 5448, 0.0, 0.0, 0.0);
				format(res, sizeof(res), "~n~~n~~n~~l~Chips: %s~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~", IntToFormattedStr(Player[playerid][CasinoChips]));
				PlayerTextDrawSetString(playerid, SlotsTD[playerid], res);
				PlayerTextDrawShow(playerid, SlotsTD[playerid]);
				Mole("Jackpot! Don't spend it all at once.");
			}
			case 3: //Sixty nine
			{
				if(Groups[Player[playerid][InGroupHQ]][Chips] < Groups[Player[playerid][InGroupHQ]][SlotPrizes][2])
					return SendClientMessage(playerid, -1, "No prize! There aren't enough chips in the casino. Try again later!");

				Player[playerid][CasinoChips] += Groups[Player[playerid][InGroupHQ]][SlotPrizes][2];
				Groups[Player[playerid][InGroupHQ]][Chips] -= Groups[Player[playerid][InGroupHQ]][SlotPrizes][2];
				new res[128];
				format(res, sizeof(res), "You rolled 3 sixty-nines and won %d chips!", Groups[Player[playerid][InGroupHQ]][SlotPrizes][2]);
				SendClientMessage(playerid, -1, res);
				format(res, sizeof(res), "%s rolled 3 sixty-nines and won %d chips. Group: %d", GetName(playerid),  Groups[Player[playerid][InGroupHQ]][SlotPrizes][2], Player[playerid][InGroupHQ]);
				StatLog(res);
				PlayerPlaySound(playerid, 5448, 0.0, 0.0, 0.0);
				format(res, sizeof(res), "~n~~n~~n~~l~Chips: %s~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~", IntToFormattedStr(Player[playerid][CasinoChips]));
				PlayerTextDrawSetString(playerid, SlotsTD[playerid], res);
				PlayerTextDrawShow(playerid, SlotsTD[playerid]);
			}
			case 4: //Bell
			{
				if(Groups[Player[playerid][InGroupHQ]][Chips] < Groups[Player[playerid][InGroupHQ]][SlotPrizes][3])
					return SendClientMessage(playerid, -1, "No prize! There aren't enough chips in the casino. Try again later!");

				Player[playerid][CasinoChips] += Groups[Player[playerid][InGroupHQ]][SlotPrizes][3];
				Groups[Player[playerid][InGroupHQ]][Chips] -= Groups[Player[playerid][InGroupHQ]][SlotPrizes][3];
				new res[128];
				format(res, sizeof(res), "You rolled 3 bells and won %d chips!", Groups[Player[playerid][InGroupHQ]][SlotPrizes][3]);
				SendClientMessage(playerid, -1, res);
				format(res, sizeof(res), "%s rolled 3 bells and won %d chips. Group: %d", GetName(playerid),  Groups[Player[playerid][InGroupHQ]][SlotPrizes][3], Player[playerid][InGroupHQ]);
				StatLog(res);
				PlayerPlaySound(playerid, 5448, 0.0, 0.0, 0.0);
				format(res, sizeof(res), "~n~~n~~n~~l~Chips: %s~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~", IntToFormattedStr(Player[playerid][CasinoChips]));
				PlayerTextDrawSetString(playerid, SlotsTD[playerid], res);
				PlayerTextDrawShow(playerid, SlotsTD[playerid]);
			}
			case 5: //Grapes
			{
				if(Groups[Player[playerid][InGroupHQ]][Chips] < Groups[Player[playerid][InGroupHQ]][SlotPrizes][4])
					return SendClientMessage(playerid, -1, "No prize! There aren't enough chips in the casino. Try again later!");

				Player[playerid][CasinoChips] += Groups[Player[playerid][InGroupHQ]][SlotPrizes][4];
				Groups[Player[playerid][InGroupHQ]][Chips] -= Groups[Player[playerid][InGroupHQ]][SlotPrizes][4];
				new res[128];
				format(res, sizeof(res), "You rolled 3 grapes and won %d chips!", Groups[Player[playerid][InGroupHQ]][SlotPrizes][4]);
				SendClientMessage(playerid, -1, res);
				format(res, sizeof(res), "%s rolled 3 grapes and won %d chips. Group: %d", GetName(playerid),  Groups[Player[playerid][InGroupHQ]][SlotPrizes][4], Player[playerid][InGroupHQ]);
				StatLog(res);
				PlayerPlaySound(playerid, 5448, 0.0, 0.0, 0.0);
				format(res, sizeof(res), "~n~~n~~n~~l~Chips: %s~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~", IntToFormattedStr(Player[playerid][CasinoChips]));
				PlayerTextDrawSetString(playerid, SlotsTD[playerid], res);
				PlayerTextDrawShow(playerid, SlotsTD[playerid]);
			}
			case 6: //Cherry
			{
				if(Groups[Player[playerid][InGroupHQ]][Chips] < Groups[Player[playerid][InGroupHQ]][SlotPrizes][5])
					return SendClientMessage(playerid, -1, "No prize! There aren't enough chips in the casino. Try again later!");

				Player[playerid][CasinoChips] += Groups[Player[playerid][InGroupHQ]][SlotPrizes][5];
				Groups[Player[playerid][InGroupHQ]][Chips] -= Groups[Player[playerid][InGroupHQ]][SlotPrizes][5];
				new res[128];
				format(res, sizeof(res), "You rolled 3 cherries and won %d chips!", Groups[Player[playerid][InGroupHQ]][SlotPrizes][5]);
				SendClientMessage(playerid, -1, res);
				format(res, sizeof(res), "%s rolled 3 cherries and won %d chips. Group: %d", GetName(playerid),  Groups[Player[playerid][InGroupHQ]][SlotPrizes][5], Player[playerid][InGroupHQ]);
				StatLog(res);
				PlayerPlaySound(playerid, 5448, 0.0, 0.0, 0.0);
				format(res, sizeof(res), "~n~~n~~n~~l~Chips: %s~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~", IntToFormattedStr(Player[playerid][CasinoChips]));
				PlayerTextDrawSetString(playerid, SlotsTD[playerid], res);
				PlayerTextDrawShow(playerid, SlotsTD[playerid]);
			}
		}
	}
	//else
		//printf("[CASINO]: %s lost their spin in %d", playerid, Player[playerid][InGroupHQ]);
	return 1;
}

CMD:countchips(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 7)
		return 1;

	new id;
	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /countchips [playerid]");

	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, -1, "Player is not connected or is offline.");

	if(GetDistanceBetweenPlayers(playerid, id) > 6)
		return SendClientMessage(playerid, -1, "Player is too far away.");

	new res[128];
	format(res, sizeof(res), "%s wants to count your chips. Type \"/accept count\" to let them.", GetNameEx(playerid));
	SendClientMessage(id, PURPLE, res);
	SendClientMessage(playerid, -1, "You sent an offer to count their chips.");
	Player[id][ReqChipCount] = playerid;
	SetPVarInt(id, "ChipCountCD", gettime() + 10);
	return 1;
}

CMD:plow(playerid, params[])
{
	if(Player[playerid][PhoneN] < 0)
		return 1;

	if(Player[playerid][CellphoneConsole] == -1 || Player[playerid][CellphoneConsole] == 911)
		return SendClientMessage(playerid, -1, "You're not on the phone.");

	if(isnull(params))
		return SendClientMessage(playerid, GREY, "SYNTAX: /plow [message]");
	
	#if defined MTG_PLAGUE
	if(Player[playerid][VirusCount] >= PLAGUE_SPEECH_MIN)
		format(params, strlen(params) + 1, "%s", MixUpSentence(params, Player[playerid][VirusCount], strlen(params) + 1));
	#endif
	new id = Player[playerid][CellphoneConsole], string[128], talkingto[25];
	format(string, sizeof(string), "[Phone][%s %s accent] whispers: %s", accents[Player[playerid][Accent]], (Player[playerid][Gender] == 1) ? ("male") : ("female"), params);
	NearByMessageEx(playerid, GREY, string, 2.0);
	GetPVarString(id, "OnPhoneTo", talkingto, 25);
	if(!isnull(talkingto) && Player[playerid][OnPayphone] == 0)
	{
		format(string, sizeof(string), "[%s][%s %s accent] whispers: %s", talkingto, accents[Player[playerid][Accent]], (Player[playerid][Gender] == 1) ? ("male") : ("female"), params);
		SendClientMessage(id, GREY, string);
	}
	else
	{
		format(string, sizeof(string), "[%d][%s %s accent] whispers: %s", (Player[playerid][OnPayphone] > 0) ? (Player[playerid][OnPayphone]) : (Player[playerid][PhoneN]), accents[Player[playerid][Accent]], (Player[playerid][Gender] == 1) ? ("male") : ("female"), params);
		SendClientMessage(id, GREY, string);
	}

	if(Player[id][SpeakerPhone])
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(id, x, y, z);

		foreach(Player, i)
		{
			if(IsPlayerInRangeOfPoint(id, 2.0, x, y, z) && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(id))
			{
				format(string, sizeof(string), "[Speaker Phone][%s %s accent] %s", accents[Player[playerid][Accent]], (Player[playerid][Gender] == 1) ? ("male") : ("female"), params);
				SendClientMessage(i, GREY, string);
			}
		}
	}
	return 1;
}

CMD:pshout(playerid, params[])
{
	if(Player[playerid][PhoneN] < 0)
		return 1;

	if(Player[playerid][CellphoneConsole] == -1 || Player[playerid][CellphoneConsole] == 911)
		return SendClientMessage(playerid, -1, "You're not on the phone.");

	if(isnull(params))
		return SendClientMessage(playerid, GREY, "SYNTAX: /pshout [message]");

	#if defined MTG_PLAGUE
	if(Player[playerid][VirusCount] >= PLAGUE_SPEECH_MIN)
		format(params, strlen(params) + 1, "%s", MixUpSentence(params, Player[playerid][VirusCount], strlen(params) + 1));
	#endif
	new id = Player[playerid][CellphoneConsole], string[128], talkingto[25];
	format(string, sizeof(string), "[Phone][%s %s accent] shouts: %s", accents[Player[playerid][Accent]], (Player[playerid][Gender] == 1) ? ("male") : ("female"), params);
	NearByMessageEx(playerid, GREY, string, 25.0);
	GetPVarString(id, "OnPhoneTo", talkingto, 25);
	if(!isnull(talkingto) && Player[playerid][OnPayphone] == 0)
	{
		format(string, sizeof(string), "[%s][%s %s accent] shouts: %s", talkingto, accents[Player[playerid][Accent]], (Player[playerid][Gender] == 1) ? ("male") : ("female"), params);
		SendClientMessage(id, GREY, string);
	}
	else
	{
		format(string, sizeof(string), "[%d][%s %s accent] shouts: %s", (Player[playerid][OnPayphone] > 0) ? (Player[playerid][OnPayphone]) : (Player[playerid][PhoneN]), accents[Player[playerid][Accent]], (Player[playerid][Gender] == 1) ? ("male") : ("female"), params);
		SendClientMessage(id, GREY, string);
	}

	if(Player[id][SpeakerPhone])
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(id, x, y, z);

		foreach(Player, i)
		{
			if(IsPlayerInRangeOfPoint(id, 7.0, x, y, z) && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(id))
			{
				format(string, sizeof(string), "[Speaker Phone][%s %s accent] %s", accents[Player[playerid][Accent]], (Player[playerid][Gender] == 1) ? ("male") : ("female"), params);
				SendClientMessage(i, GREY, string);
			}
		}
	}
	return 1;
}

CMD:buychips(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 7 || Player[playerid][GroupRank] < 5)
		return SendClientMessage(playerid, -1, "You must be rank 5+ in a casino group to use this.");

	if(!IsNumeric(params) || isnull(params))
		return SendClientMessage(playerid, GREY, "SYNTAX: /buychips [cash amount]");

	new amount = strval(params);
	if(amount > Groups[Player[playerid][Group]][SafeMoney] || amount < 1)
		return SendClientMessage(playerid, -1, "Invalid amount.");

	if(amount % 10 != 0)
		return SendClientMessage(playerid, -1, "Choose an amount divisable by 10.");

	Groups[Player[playerid][Group]][Chips] += amount / 10;
	Groups[Player[playerid][Group]][SafeMoney] -= amount;
	new string[128];
	format(string, sizeof(string), "You have converted %s money into %s chips.", PrettyMoney(amount), IntToFormattedStr(amount/10));
	SendClientMessage(playerid, -1, string);
	format(string, sizeof(string), "%s has converted %s money into %s chips in %d.", GetName(playerid), PrettyMoney(amount), IntToFormattedStr(amount/10), Player[playerid][Group]);
	StatLog(string);
	return 1;
}

CMD:sellchips(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 7 || Player[playerid][GroupRank] < 5)
		return SendClientMessage(playerid, -1, "You must be rank 5+ in a casino group to use this.");

	if(!IsNumeric(params) || isnull(params))
		return SendClientMessage(playerid, GREY, "SYNTAX: /sellchips [chips]");

	new amount = strval(params);
	if(amount > Groups[Player[playerid][Group]][Chips] || amount < 1)
		return SendClientMessage(playerid, -1, "Invalid amount.");

	Groups[Player[playerid][Group]][Chips] -= amount;
	Groups[Player[playerid][Group]][SafeMoney] += amount * 10;
	new string[128];
	format(string, sizeof(string), "You have converted %s chips into %s money.", IntToFormattedStr(amount), PrettyMoney(amount * 10));
	SendClientMessage(playerid, -1, string);
	format(string, sizeof(string), "%s has converted %s chips into %s money in %d.", GetName(playerid), IntToFormattedStr(amount), PrettyMoney(amount * 10), Player[playerid][Group]);
	StatLog(string);
	return 1;
}

CMD:slotprize(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 7 || Player[playerid][GroupRank] < 5)
		return SendClientMessage(playerid, -1, "You must be rank 5+ in a casino group to use this.");

	new option[32], res[128], prize, gid = Player[playerid][Group];
	if(sscanf(params, "s[32]d", option, prize))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /slotprize [slot option] [prize]");
		return SendClientMessage(playerid, GREY, "Valid slot options: \"doublegoldbars\", \"goldbar\", \"sixtynine\", \"bells\", \"grapes\" or \"cherries\"");
	}

	if(prize < 0)
		return SendClientMessage(playerid, -1, "Prize must be greater than or equal to 0.");

	if(!strcmp(option, "doublegoldbars", true))
	{
		Groups[gid][SlotPrizes][0] = prize;
		format(res, sizeof(res), "%s has set prize of \"doublegoldbars\" to %s.", GetName(playerid), IntToFormattedStr(prize));
		GroupMessage(playerid, ADMINORANGE, res);
		format(res, sizeof(res), "%s has set prize of \"doublegoldbars\" to %s in %d.", GetName(playerid), IntToFormattedStr(prize), Player[playerid][Group]);
		StatLog(res);
		SaveGroup(gid);
	}
	else if(!strcmp(option, "goldbar", true))
	{
		Groups[gid][SlotPrizes][1] = prize;
		format(res, sizeof(res), "%s has set prize of \"goldbar\" to %s.", GetName(playerid), IntToFormattedStr(prize));
		GroupMessage(playerid, ADMINORANGE, res);
		format(res, sizeof(res), "%s has set prize of \"doublegoldbars\" to %s in %d.", GetName(playerid), IntToFormattedStr(prize), Player[playerid][Group]);
		StatLog(res);
		SaveGroup(gid);
	}
	else if(!strcmp(option, "sixtynine", true))
	{
		Groups[gid][SlotPrizes][2] = prize;
		format(res, sizeof(res), "%s has set prize of \"sixtynine\" to %s.", GetName(playerid), IntToFormattedStr(prize));
		GroupMessage(playerid, ADMINORANGE, res);
		format(res, sizeof(res), "%s has set prize of \"doublegoldbars\" to %s in %d.", GetName(playerid), IntToFormattedStr(prize), Player[playerid][Group]);
		StatLog(res);
		SaveGroup(gid);
	}
	else if(!strcmp(option, "bells", true))
	{
		Groups[gid][SlotPrizes][3] = prize;
		format(res, sizeof(res), "%s has set prize of \"bells\" to %s.", GetName(playerid), IntToFormattedStr(prize));
		GroupMessage(playerid, ADMINORANGE, res);
		format(res, sizeof(res), "%s has set prize of \"doublegoldbars\" to %s in %d.", GetName(playerid), IntToFormattedStr(prize), Player[playerid][Group]);
		StatLog(res);
		SaveGroup(gid);
	}
	else if(!strcmp(option, "grapes", true))
	{
		Groups[gid][SlotPrizes][4] = prize;
		format(res, sizeof(res), "%s has set prize of \"grapes\" to %s.", GetName(playerid), IntToFormattedStr(prize));
		GroupMessage(playerid, ADMINORANGE, res);
		format(res, sizeof(res), "%s has set prize of \"doublegoldbars\" to %s in %d.", GetName(playerid), IntToFormattedStr(prize), Player[playerid][Group]);
		StatLog(res);
		SaveGroup(gid);
	}
	else if(!strcmp(option, "cherries", true))
	{
		Groups[gid][SlotPrizes][5] = prize;
		format(res, sizeof(res), "%s has set prize of \"cherries\" to %s.", GetName(playerid), IntToFormattedStr(prize));
		GroupMessage(playerid, ADMINORANGE, res);
		format(res, sizeof(res), "%s has set prize of \"doublegoldbars\" to %s in %d.", GetName(playerid), IntToFormattedStr(prize), Player[playerid][Group]);
		StatLog(res);
		SaveGroup(gid);
	}
	else
		return SendClientMessage(playerid, -1, "Valid slot options: \"doublegoldbars\", \"goldbar\", \"sixtynine\", \"bells\", \"grapes\" or \"cherries\"");
	return 1;
}

CMD:setbusinessname(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 5)
		return 1;

	new name[255], string[255], bid;

	if(sscanf(params, "ds[255]", bid, name))
		return SendClientMessage(playerid, GREY, "SYNTAX: /setbusinessname [id] [name]");

	if(!DoesBusinessExist(bid))
		return SendClientMessage(playerid, WHITE, "Invalid business id!");

	if(strlen(name) > 20 || strlen(name) < 1)
		return SendClientMessage(playerid, WHITE, "Business names must be between 1 and 20 characters!");

	if(strfind(name, "~") > 0)
		return SendClientMessage(playerid, WHITE, "You can't use the ~ character in business names!");

	format(string, sizeof(string), "[BUSINESS] %s changed  name of business %d from %s to %s.", Player[playerid][AdminName], bid, Businesses[bid][bName], name);
	AdminActionsLog(string);
	Businesses[bid][bName] = name;
	format(string, sizeof(string), "You have changed the name of business %d to %s.", bid, name);
	SendClientMessage(playerid, WHITE, string);

	return 1;
}

/* Start of DMV driving test */
stock LoadDrivingTest()
{
	new loc[32] = "Misc/DrivingTest.txt";
	if(!fexist(loc))
	{
		dini_Create(loc);
	}

	new File:file = fopen(loc, io_read), string[128], tmp;
	while(fread(file, string))
	{
		sscanf(string, "fff", DrivingTest[tmp][0], DrivingTest[tmp][1], DrivingTest[tmp][2]);
		tmp++;
	}
	fclose(file);
	return 1;
}

stock SaveDrivingTest(playerid)
{
	new loc[32] = "Misc/DrivingTest.txt";
	if(fexist(loc))
	{
		fremove(loc);
	}

	new File:test = fopen(loc, io_write), string[128];
	for(new i; i < MAX_TEST_CHECKPOINTS; i++)
	{
		format(string, sizeof(string), "%f %f %f\n", EditDrivingTest[playerid][i][0], EditDrivingTest[playerid][i][1], EditDrivingTest[playerid][i][2]);
		fwrite(test, string);
	}
	fclose(test);
	return 1;
}

stock LoadTruckingTest()
{
	new loc2[32] = "Misc/TruckerTest.txt";
	if(!fexist(loc2))
	{
		dini_Create(loc2);
	}

	new File:file2 = fopen(loc2, io_read), string2[128], tmp2;
	while(fread(file2, string2))
	{
		sscanf(string2, "fff", TruckingTest[tmp2][0], TruckingTest[tmp2][1], TruckingTest[tmp2][2]);
		tmp2++;
	}
	fclose(file2);
	return 1;
}

stock SaveTruckingTest(playerid)
{
	new loc2[32] = "Misc/TruckerTest.txt";
	if(fexist(loc2))
	{
		fremove(loc2);
	}

	new File:test2 = fopen(loc2, io_write), string2[128];
	for(new i; i < MAX_TEST_CHECKPOINTS; i++)
	{
		format(string2, sizeof(string2), "%f %f %f\n", EditTruckingTest[playerid][i][0], EditTruckingTest[playerid][i][1], EditTruckingTest[playerid][i][2]);
		fwrite(test2, string2);
	}
	fclose(test2);
	return 1;
}

CMD:starttest(playerid, params[])
{
	new vehicleid;
	if(IsPlayerInAnyVehicle(playerid))
	{
		vehicleid = GetPlayerVehicleID(playerid);
	}
	new sql = GetVSQLID(vehicleid), idx = GetVIndex(sql);
	if(sql == 0 && IsPlayerInAnyVehicle(playerid))
		return 1;

	if(!Player[playerid][Identity])
		return SendClientMessage(playerid, -1, "You need ID to do yours tests!");

	if(idx == -1 && Player[playerid][InGroupHQ] == 0)
		return SendClientMessage(playerid, -1, "You must be in DMV business or in a test vehicle.");

	if(Groups[Player[playerid][InGroupHQ]][CommandTypes] != 8 && Groups[Veh[idx][Group]][CommandTypes] != 8)
		return SendClientMessage(playerid, -1, "You must be in DMV business to start a test.");

	new tmp[128];
	if(sscanf(params, "s[128]", tmp) && !IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, GREY, "SYNTAX: /starttest \"standard\" or \"trucker\"");

	if(!strcmp(tmp, "standard", true))
	{
		if(Player[playerid][Checkpoint] > 0)
			return SendClientMessage(playerid, -1, "You have an active checkpoint! Use /(k)ill(c)heckpoint to remove it.");

		if(Player[playerid][DoingDMVTest] > 0)
			return SendClientMessage(playerid, -1, "You are already on a driving test.");

		if(Player[playerid][DoingTruckerTest] > 0)
			return SendClientMessage(playerid, -1, "You are already on a trucking test.");

		if(Player[playerid][CarLicense])
			return SendClientMessage(playerid, -1, "You already have a car license.");

		if(Player[playerid][Money] < DrivingTestCost)
			return SendClientMessage(playerid, -1, "You do not have enough money to pay for the test.");

		Player[playerid][Money] -= DrivingTestCost;
		Groups[Player[playerid][InGroupHQ]][SafeMoney] += DrivingTestCost;
		SendClientMessage(playerid, -1, "Go outside and get into a driver's test vehicle.");
		Player[playerid][DoingDMVTest] = 1;
	}
	else if(!strcmp(tmp, "trucker", true))
	{
		if(Player[playerid][TruckerTestCooldown] > gettime())
		{
			new str[128], time_left = Player[playerid][TruckerTestCooldown] - gettime();
			format(str, sizeof(str), "You must wait %d hours and %d minutes before you can do the test again.", time_left / 3600, (time_left % 3600) / 60);
			return SendClientMessage(playerid, -1, str);
		}

		if(Player[playerid][LicenseSuspended] > 0)
			return SendClientMessage(playerid, -1, "You may not take your trucker test while your license is suspended!");

		if(Player[playerid][Checkpoint] > 0)
			return SendClientMessage(playerid, -1, "You have an active checkpoint! Use /(k)ill(c)heckpoint to remove it.");

		if(Player[playerid][PlayingHours] < 10 && Player[playerid][VipRank] < 1)
			return SendClientMessage(playerid, -1, "Sorry, you need 10+ playing hours to do this test.");

		if(!Player[playerid][CarLicense])
			return SendClientMessage(playerid, -1, "You need a standard license to do this test.");

		if(Player[playerid][DoingTruckerTest] > 0)
			return SendClientMessage(playerid, -1, "You are already on a trucking test.");

		if(Player[playerid][DoingDMVTest] > 0)
			return SendClientMessage(playerid, -1, "You are already on a driving test.");

		if(Player[playerid][TruckLicense])
			return SendClientMessage(playerid, -1, "You already have a trucker license.");

		if(Player[playerid][Money] < TruckerTestCost)
			return SendClientMessage(playerid, -1, "You do not have enough money to pay for the test.");

		Player[playerid][Money] -= TruckerTestCost;
		Groups[Player[playerid][InGroupHQ]][SafeMoney] += TruckerTestCost;
		SendClientMessage(playerid, -1, "Go outside and get into a truck test vehicle.");
		Player[playerid][DoingTruckerTest] = 1;
		Player[playerid][TruckerTestCooldown] = gettime() + 3600; // 6 hours
	}
	else
	{
		return SendClientMessage(playerid, GREY, "SYNTAX: /starttest \"standard\" or \"trucker\"");
	}

	return 1;
}

stock StartTest(playerid)
{
	if(GetPlayerVehicleSeat(playerid) != 0)
		return SendClientMessage(playerid, -1, "You must be in the driver seat to start the test."), RemovePlayerFromVehicle(playerid);

	if(Player[playerid][DoingDMVTest] > 0 && GetPVarInt(playerid, "DT_CompletedTime") == 0)
	{
		SendClientMessage(playerid, -1, "Drive to the checkpoints. Drive quickly but try not to damage your vehicle too much.");
		Player[playerid][DrivingTestCP] = 1;
		Player[playerid][Checkpoint] = 1;
		Player[playerid][DoingDMVTest] = 2;
		SetPVarInt(playerid, "DT_CompletedTime", gettime());
		new cp = Player[playerid][DrivingTestCP];
		SetPlayerRaceCheckpoint(playerid, 0, DrivingTest[cp][0], DrivingTest[cp][1], DrivingTest[cp][2], DrivingTest[cp + 1][0], DrivingTest[cp + 1][1], DrivingTest[cp + 1][2], 3.0);
	}
	else if(Player[playerid][DoingTruckerTest] > 0 && GetPVarInt(playerid, "TT_CompletedTime") == 0)
	{
		if(Player[playerid][Checkpoint] > 0)
		{
			RemovePlayerFromVehicle(playerid);
			return SendClientMessage(playerid, -1, "You already have a checkpoint! Use /(k)ill(c)heckpoint to kill it.");
		}

		SendClientMessage(playerid, -1, "Drive to the checkpoints. Drive quickly and do not damage your truck!");
		Player[playerid][TruckingTestCP] = 1;
		Player[playerid][Checkpoint] = 1;
		Player[playerid][DoingTruckerTest] = 2;
		SetPVarInt(playerid, "TT_CompletedTime", gettime());
		new cp = Player[playerid][TruckingTestCP];
		SetPlayerRaceCheckpoint(playerid, 0, DrivingTest[cp][0], DrivingTest[cp][1], DrivingTest[cp][2], DrivingTest[cp + 1][0], DrivingTest[cp + 1][1], DrivingTest[cp + 1][2], 3.0);
	}
	return 1;
}

CMD:endtest(playerid)
{
	if(Player[playerid][DoingDMVTest] == 0 && Player[playerid][DoingTruckerTest] == 0)
		return SendClientMessage(playerid, -1, "You are not doing a test.");

	if(IsPlayerInAnyVehicle(playerid) && Groups[Veh[GetVIndex(GetVSQLID(GetPlayerVehicleID(playerid)))][Group]][CommandTypes] == 8)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		new trailerid = GetVehicleTrailer(vehicleid);
		SetVehicleToRespawn(vehicleid);
		if(trailerid > 0)
			SetVehicleToRespawn(trailerid);
	}

	Player[playerid][DoingDMVTest] = 0;
	Player[playerid][DoingTruckerTest] = 0;
	Player[playerid][TruckingTestCP] = 0;
	Player[playerid][DrivingTestCP] = 0;
	Player[playerid][Checkpoint] = 0;
	SetPVarInt(playerid, "DT_CompletedTime", 0);
	SetPVarInt(playerid, "TT_CompletedTime", 0);
	DisablePlayerRaceCheckpoint(playerid);
	SendClientMessage(playerid, -1, "You have ended your driving/trucking test.");
	return 1;
}

CMD:gettestresults(playerid, params[])
{
	if(Groups[Player[playerid][InGroupHQ]][CommandTypes] != 8)
		return SendClientMessage(playerid, -1, "You must be inside the driving test business to do this.");

	if(Player[playerid][DoingDMVTest] == 3)
	{
		if(Player[playerid][CarLicense])
			return SendClientMessage(playerid, -1, "It seems the records for your test were lost.");

		new damage = 1000 - GetPVarInt(playerid, "DT_CarDamage"), time = GetPVarInt(playerid, "DT_CompletedTime");
		new damage_str[128], time_str[128], result_str[128];

		switch(damage)
		{
			case 000 .. 020: format(damage_str, sizeof(damage_str), "didn't damage");
			case 021 .. 050: format(damage_str, sizeof(damage_str), "slightly damaged");
			case 051 .. 200: format(damage_str, sizeof(damage_str), "damaged");
			case 201 .. 400: format(damage_str, sizeof(damage_str), "badly damaged");
			case 401 .. 600: format(damage_str, sizeof(damage_str), "majorly damaged");
			case 601 .. 800: format(damage_str, sizeof(damage_str), "extremely damaged");
			default: format(damage_str, sizeof(damage_str), "totalled");
		}

		if(time / 60 > 0)
			format(time_str, sizeof(time_str), "%d %s and %d %s", time / 60, (time / 60 > 1) ? ("minutes") : ("minute"), time % 60, (time % 60 > 1) ? ("seconds") : ("second"));
		else
			format(time_str, sizeof(time_str), "%d %s", time % 60, (time % 60 > 1) ? ("seconds") : ("second"));

		SendClientMessage(playerid, GREY, "----------------------------------------------------");
		if(damage > 50 || time > DrivingTestTime)
		{
			SendClientMessage(playerid, -1, "You have {D43820}failed{FFFFFF} your test. Your results are as follows:");
			format(result_str, sizeof(result_str), "{%s}[X]{FFFFFF} It took you {FFF194}%s{FFFFFF} to complete the test.", (time > DrivingTestTime) ? ("D43820") : ("47D420"), time_str);
			SendClientMessage(playerid, -1, result_str);
			format(result_str, sizeof(result_str), "{%s}[X]{FFFFFF} You {FFF194}%s{FFFFFF} the vehicle.", (damage > 50) ? ("D43820") : ("47D420"), damage_str);
			SendClientMessage(playerid, -1, result_str);
		}
		else
		{
			SendClientMessage(playerid, -1, "You have {47D420}passed{FFFFFF} your test. Your results are as follows:");
			format(result_str, sizeof(result_str), "{47D420}[X]{FFFFFF} It took you {FFF194}%s{FFFFFF} to complete the test.", time_str);
			SendClientMessage(playerid, -1, result_str);
			format(result_str, sizeof(result_str), "{47D420}[X]{FFFFFF} You {FFF194}%s{FFFFFF} the vehicle.", damage_str);
			SendClientMessage(playerid, -1, result_str);
			format(result_str, sizeof(result_str), "[DrivingTest] %s has passed their driving test.", GetName(playerid));
			StatLog(result_str);
			Player[playerid][CarLicense] = 1;
		}
		SendClientMessage(playerid, GREY, "----------------------------------------------------");

		if(Player[playerid][CarLicense])
		{
			new string[128];
			format(string, sizeof(string), "Congratulations %s, you have recieved your standard vehicle license.", GetFirstName(playerid));
			SendClientMessage(playerid, -1, string);
		}

		Player[playerid][DoingDMVTest] = 0;
		DeletePVar(playerid, "DT_CompletedTime");
		DeletePVar(playerid, "DT_CarDamage");
	}
	else if(Player[playerid][DoingTruckerTest] == 3)
	{
		if(Player[playerid][TruckLicense])
			return SendClientMessage(playerid, -1, "It seems the records for your test were lost.");

		new damage = 1000 - GetPVarInt(playerid, "TT_CarDamage"), time = GetPVarInt(playerid, "TT_CompletedTime");
		new damage_str[128], time_str[128], result_str[128];

		switch(damage)
		{
			case 000 .. 020: format(damage_str, sizeof(damage_str), "didn't damage");
			case 021 .. 050: format(damage_str, sizeof(damage_str), "slightly damaged");
			case 051 .. 200: format(damage_str, sizeof(damage_str), "damaged");
			case 201 .. 400: format(damage_str, sizeof(damage_str), "badly damaged");
			case 401 .. 600: format(damage_str, sizeof(damage_str), "majorly damaged");
			case 601 .. 800: format(damage_str, sizeof(damage_str), "extremely damaged");
			default: format(damage_str, sizeof(damage_str), "totalled");
		}

		if(time / 60 > 0)
			format(time_str, sizeof(time_str), "%d %s and %d %s", time / 60, (time / 60 > 1) ? ("minutes") : ("minute"), time % 60, (time % 60 > 1) ? ("seconds") : ("second"));
		else
			format(time_str, sizeof(time_str), "%d %s", time % 60, (time % 60 > 1) ? ("seconds") : ("second"));

		SendClientMessage(playerid, GREY, "----------------------------------------------------");
		if(damage > 20 || time > TruckerTestTime)
		{
			SendClientMessage(playerid, -1, "You have {D43820}failed{FFFFFF} your test. Your results are as follows:");
			format(result_str, sizeof(result_str), "{%s}[X]{FFFFFF} It took you {FFF194}%s{FFFFFF} to complete the test.", (time > TruckerTestTime) ? ("D43820") : ("47D420"), time_str);
			SendClientMessage(playerid, -1, result_str);
			format(result_str, sizeof(result_str), "{%s}[X]{FFFFFF} You {FFF194}%s{FFFFFF} the truck.", (damage > 20) ? ("D43820") : ("47D420"), damage_str);
			SendClientMessage(playerid, -1, result_str);
		}
		else
		{
			SendClientMessage(playerid, -1, "You have {47D420}passed{FFFFFF} your test. Your results are as follows:");
			format(result_str, sizeof(result_str), "{47D420}[X]{FFFFFF} It took you {FFF194}%s{FFFFFF} to complete the test.", time_str);
			SendClientMessage(playerid, -1, result_str);
			format(result_str, sizeof(result_str), "{47D420}[X]{FFFFFF} You {FFF194}%s{FFFFFF} the truck.", damage_str);
			SendClientMessage(playerid, -1, result_str);
			format(result_str, sizeof(result_str), "[TruckerTest] %s has passed their trucker test.", GetNameEx(playerid));
			StatLog(result_str);
			Player[playerid][TruckLicense] = 1;
		}
		SendClientMessage(playerid, GREY, "----------------------------------------------------");

		if(Player[playerid][TruckLicense])
		{
			new string[128];
			format(string, sizeof(string), "Congratulations %s, you have recieved your trucker vehicle license.", GetFirstName(playerid));
			SendClientMessage(playerid, -1, string);
		}

		Player[playerid][DoingTruckerTest] = 0;
		DeletePVar(playerid, "TT_CompletedTime");
		DeletePVar(playerid, "TT_CarDamage");
	}
	else SendClientMessage(playerid, -1, "You need to have recently done a test to get your results.");
	return 1;
}

CMD:editdrivingtest(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 6)
		return 1;

	new option[7], value;

	if(sscanf(params, "s[7]D(0)", option, value))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /editdrivingtest [option] ([value])");
		return SendClientMessage(playerid, GREY, "Option: \"course\", \"cost\" or \"time\"");
	}

	if(!strcmp(option, "course", true))
	{
		if(Player[playerid][EditDMVTest] >= 0)
			return SendClientMessage(playerid, -1, "You are already editing the driving test.");

		foreach(Player, i)
		{
			if(Player[i][EditDMVTest] >= 0)
				return SendClientMessage(playerid, -1, "Somebody is already doing this.");
		}

		Player[playerid][EditDMVTest] = 0;
		return SendClientMessage(playerid, -1, "You are now editting the DMV driving test. Press ~k~~TOGGLE_SUBMISSIONS~ to mark the checkpoint.");
	}
	else if(!strcmp(option, "time", true))
	{
		if(value == 0)
			return SendClientMessage(playerid, -1, "Enter a number.");

		if(value < 0)
			return SendClientMessage(playerid, -1, "That can't be a negative number.");

		new res[128], time_str[128];
		DrivingTestTime = value;
		dini_IntSet("Assets.ini", "DrivingTestTime", DrivingTestTime);
		if(value / 60 > 0)
		{
			if(value % 60 > 0)
				format(time_str, sizeof(time_str), "%d %s and %d %s", value / 60, (value / 60 > 1) ? ("minutes") : ("minute"), value % 60, (value % 60 > 1) ? ("minutes") : ("minute"));
			else
				format(time_str, sizeof(time_str), "%d %s", value / 60, (value / 60 > 1) ? ("minutes") : ("minute"));
		}
		else
		{
			format(time_str, sizeof(time_str), "%d %s", value % 60, (value % 60 > 1) ? ("seconds") : ("second"));
		}
		format(res, sizeof(res), "You have set the driving test time limit to %s.", time_str);
		return SendClientMessage(playerid, -1, res);
	}
	else if(!strcmp(option, "cost", true))
	{
		if(value == 0)
			return SendClientMessage(playerid, -1, "Enter a number.");

		if(value < 0)
			return SendClientMessage(playerid, -1, "That can't be a negative number.");

		new res[128];
		DrivingTestCost = value;
		dini_IntSet("Assets.ini", "DrivingTestCost", DrivingTestCost);
		format(res, sizeof(res), "You have set the driving test price to %s.", PrettyMoney(value));
		return SendClientMessage(playerid, -1, res);
	}
	else
		SendClientMessage(playerid, -1, "Invalid option. Valid options: \"course\", \"cost\" or \"time\"");
	return 1;
}

CMD:edittruckertest(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 6)
		return 1;

	new option[7], value;

	if(sscanf(params, "s[7]D(0)", option, value))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /edittruckertest [option] ([value])");
		return SendClientMessage(playerid, GREY, "Option: \"cost\" or \"time\"");
	}

	/*if(!strcmp(option, "course", true))
	{
		if(Player[playerid][EditTruckerTest] >= 0)
			return SendClientMessage(playerid, -1, "You are already editing the driving test.");

		foreach(Player, i)
		{
			if(Player[i][EditTruckerTest] >= 0)
				return SendClientMessage(playerid, -1, "Somebody is already doing this.");
		}

		Player[playerid][EditTruckerTest] = 0;
		return SendClientMessage(playerid, -1, "You are now editting the Trucker driving test. Press ~k~~TOGGLE_SUBMISSIONS~ to mark the checkpoint.");
	}
	else */
	if(!strcmp(option, "time", true))
	{
		if(value == 0)
			return SendClientMessage(playerid, -1, "Enter a number.");

		if(value < 0)
			return SendClientMessage(playerid, -1, "That can't be a negative number.");

		new res[128], time_str[128];
		TruckerTestTime = value;
		dini_IntSet("Assets.ini", "TruckerTestTime", TruckerTestTime);
		if(value / 60 > 0)
		{
			if(value % 60 > 0)
				format(time_str, sizeof(time_str), "%d %s and %d %s", value / 60, (value / 60 > 1) ? ("minutes") : ("minute"), value % 60, (value % 60 > 1) ? ("minutes") : ("minute"));
			else
				format(time_str, sizeof(time_str), "%d %s", value / 60, (value / 60 > 1) ? ("minutes") : ("minute"));
		}
		else
		{
			format(time_str, sizeof(time_str), "%d %s", value % 60, (value % 60 > 1) ? ("seconds") : ("second"));
		}
		format(res, sizeof(res), "You have set the trucker test time limit to %s.", time_str);
		return SendClientMessage(playerid, -1, res);
	}
	else if(!strcmp(option, "cost", true))
	{
		if(value == 0)
			return SendClientMessage(playerid, -1, "Enter a number.");

		if(value < 0)
			return SendClientMessage(playerid, -1, "That can't be a negative number.");

		new res[128];
		TruckerTestCost = value;
		dini_IntSet("Assets.ini", "TruckerTestCost", TruckerTestCost);
		format(res, sizeof(res), "You have set the trucker test price to %s.", PrettyMoney(value));
		return SendClientMessage(playerid, -1, res);
	}
	else
		SendClientMessage(playerid, -1, "Invalid option. Valid options: \"course\", \"cost\" or \"time\"");
	return 1;
}

CMD:finishtestedit(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 6)
		return 1;

	if(Player[playerid][EditDMVTest] >= 0)
	{
		SaveDrivingTest(playerid);
		LoadDrivingTest();
		Player[playerid][EditDMVTest] = -1;
		SendClientMessage(playerid, -1, "You have finished editting the driving test. (Go test it and make sure it's good)");
		for(new i; i < MAX_TEST_CHECKPOINTS; i++)
		{
			EditDrivingTest[playerid][i][0] = 0.00;
			EditDrivingTest[playerid][i][1] = 0.00;
			EditDrivingTest[playerid][i][2] = 0.00;
		}
	}
	else if(Player[playerid][EditTruckerTest] >= 0)
	{
		SaveTruckingTest(playerid);
		LoadTruckingTest();
		Player[playerid][EditTruckerTest] = -1;
		SendClientMessage(playerid, -1, "You have finished editting the trucking test. (Go test it and make sure it's good)");
		for(new i; i < MAX_TEST_CHECKPOINTS; i++)
		{
			EditTruckingTest[playerid][i][0] = 0.00;
			EditTruckingTest[playerid][i][1] = 0.00;
			EditTruckingTest[playerid][i][2] = 0.00;
		}
	}
	else SendClientMessage(playerid, -1, "Ay brah, you ain't even doing a test brah.");
	return 1;
}

CMD:vehregistrationcost(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 6 && Groups[Player[playerid][Group]][CommandTypes] != 8)
		return 1;

	if(isnull(params) || !IsNumeric(params))
		return SendClientMessage(playerid, GREY, "SYNTAX: /vehregistrationcost [cost]");

	RegistrationCost = strval(params);
	dini_IntSet("Assets.ini", "RegistrationCost", RegistrationCost);
	new res[128];
	format(res, sizeof(res), "You have set the price of vehicle registration to %s.", PrettyMoney(RegistrationCost));
	SendClientMessage(playerid, -1, res);
	return 1;
}

CMD:registervehicle(playerid, params[])
{
	if(Groups[Player[playerid][InGroupHQ]][CommandTypes] != 8)
		return SendClientMessage(playerid, -1, "You must be inside the driving test business to do this.");

	if(!Player[playerid][CarLicense])
		return SendClientMessage(playerid, -1, "You need a vehicle license to register your vehicle.");

	if(Player[playerid][LicenseSuspended] > 0)
			return SendClientMessage(playerid, -1, "You may not register your vehicle while your license is suspended!");

	new res[255], tmp = -1;
	for(new i; i < 5; i++)
	{
		if(Player[playerid][Cars][i] > 0)
		{
			tmp = i;
			new idx = GetVIndex(Player[playerid][Cars][i]);
			if(Veh[idx][Link] == 0 || Veh[idx][Link] == INVALID_VEHICLE_ID)
				format(res, sizeof(res), "%s{F55858}[ %s ] %s\n", res, vNames[Veh[idx][Model] - 400] ,Veh[idx][VName]);
			else
				format(res, sizeof(res), "%s{87E359}[ %s ] %s\n", res, vNames[Veh[idx][Model] - 400] ,Veh[idx][VName]);
		}
		else
		{
			format(res, sizeof(res), "%sEmpty\n", res);
		}
	}

	if(tmp == -1)
		return SendClientMessage(playerid, -1, "You don't have a vehicle that you can register.");

	ShowPlayerDialog(playerid, REGISTER_VEHICLE, DIALOG_STYLE_LIST, "Vehicle Registration", res, "Register", "Cancel");
	return 1;
}

CMD:registerfactionvehicle(playerid)
{
	if(Groups[Player[playerid][InGroupHQ]][CommandTypes] != 8)
		return SendClientMessage(playerid, -1, "You must be inside the driving test business to do this.");

	if(!Player[playerid][CarLicense])
		return SendClientMessage(playerid, -1, "You need a vehicle license to register your vehicle.");

	if(Player[playerid][LicenseSuspended] > 0)
		return SendClientMessage(playerid, -1, "You may not register your vehicle while your license is suspended!");

	if(Player[playerid][Group] == 0)
		return SendClientMessage(playerid, -1, "You are not in a faction.");
		
	for(new i; i < MAX_GROUP_VEHICLES; i++)
		tGroupVID[playerid][i] = 0;

	new string[1000], slot;
	for(new i; i < MAX_VEHICLES; i++)
	{
		if(slot >= MAX_GROUP_VEHICLES)
			break;

		new idx = GetVIndex(Veh[i][SQLID]);

		if(idx == -1)
			continue;

		if(Veh[idx][Group] != Player[playerid][Group])
			continue;

		if(Veh[idx][Registered])
			continue;

		format(string, sizeof(string), "%s[ %s ] %s\n", string, Veh[idx][Plate], vNames[Veh[idx][Model] - 400]);

		tGroupVID[playerid][slot] = Veh[idx][SQLID];
		slot++;
	}

	if(slot == 0)
		return SendClientMessage(playerid, WHITE, "There are no vehicles that need to be registered in your faction.");

	ShowPlayerDialog(playerid, FACTION_REGISTER_VEHICLE, DIALOG_STYLE_LIST, "Vehicle Registration", string, "Register", "Cancel");
	return 1;
}

CMD:registergangvehicle(playerid)
{
	if(Groups[Player[playerid][InGroupHQ]][CommandTypes] != 8)
		return SendClientMessage(playerid, -1, "You must be inside the driving test business to do this.");

	if(!Player[playerid][CarLicense])
		return SendClientMessage(playerid, -1, "You need a vehicle license to register your vehicle.");

	if(Player[playerid][LicenseSuspended] > 0)
		return SendClientMessage(playerid, -1, "You may not register your vehicle while your license is suspended!");

	if(Player[playerid][Gang] == 0)
		return SendClientMessage(playerid, -1, "You are not in a gang.");
		
	for(new i; i < MAX_GROUP_VEHICLES; i++)
		tGangVID[playerid][i] = 0;

	new string[1000], slot;
	for(new i; i < MAX_VEHICLES; i++)
	{
		if(slot >= MAX_GROUP_VEHICLES)
			break;

		new idx = GetVIndex(Veh[i][SQLID]);

		if(idx == -1)
			continue;

		if(Veh[idx][GangLink] != Player[playerid][Gang])
			continue;

		if(Veh[idx][Registered])
			continue;

		format(string, sizeof(string), "%s[ %s ] %s\n", string, Veh[idx][Plate], vNames[Veh[idx][Model] - 400]);

		tGangVID[playerid][slot] = Veh[idx][SQLID];
		slot++;
	}

	if(slot == 0)
		return SendClientMessage(playerid, WHITE, "There are no vehicles that need to be registered in your gang.");

	ShowPlayerDialog(playerid, GANG_REGISTER_VEHICLE, DIALOG_STYLE_LIST, "Vehicle Registration", string, "Register", "Cancel");
	return 1;
}

CMD:buyplate(playerid, params[])
{
	if(Groups[Player[playerid][InGroupHQ]][CommandTypes] != 8)
		return SendClientMessage(playerid, -1, "You must be inside the DMV to do this.");

	new option[7];
	if(sscanf(params, "s[7]", option)) return SendClientMessage(playerid, GREY, "SYNTAX: /buyplate [\"random\" / \"custom\"]");

	new val;
	if(!strcmp(option, "random", true))
	{
		SetPVarInt(playerid, "BuyPlateVal", 1);
		val = 1;
	}
	else if(!strcmp(option, "custom", true))
	{
		if(Player[playerid][VipRank] < 1) return SendClientMessage(playerid, -1, "You must be a VIP to get a custom license plate.");

		SetPVarInt(playerid, "BuyPlateVal", 2);
		val = 2;
	}
	else
		return SendClientMessage(playerid, -1, "Invalid option! \"random\" or \"custom\"");

	if(Player[playerid][Money] < 500 && val == 1) return SendClientMessage(playerid, -1, "A new plate costs $500.");

	if(val == 1)
	{
		new res[255], tmp = -1;
		for(new i; i < 5; i++)
		{
			if(Player[playerid][Cars][i] > 0)
			{
				tmp = i;
				new idx = GetVIndex(Player[playerid][Cars][i]);
				if(Veh[idx][Link] == 0 || Veh[idx][Link] == INVALID_VEHICLE_ID)
					format(res, sizeof(res), "%s{F55858}[ %s ] %s\n", res, vNames[Veh[idx][Model] - 400] ,Veh[idx][VName]);
				else
					format(res, sizeof(res), "%s{87E359}[ %s ] %s\n", res, vNames[Veh[idx][Model] - 400] ,Veh[idx][VName]);
			}
			else
			{
				format(res, sizeof(res), "%sEmpty\n", res);
			}
		}

		if(tmp == -1)
			return SendClientMessage(playerid, -1, "You don't have any vehicles.");

		ShowPlayerDialog(playerid, NEWPLATE_VEHICLE, DIALOG_STYLE_LIST, "New Vehicle License Plate", res, "Select", "Cancel");
	}
	else if(val == 2)
	{
		new string[128], price;
		switch(Player[playerid][VipRank])
		{
			case 0: return SendClientMessage(playerid, -1, "This is for VIP only.");
			default: price = 30;
		}
		format(string, sizeof(string), "{FFFFFF}Enter the custom license plate you would like below.\nIt will cost you {E0C91B}%d{FFFFFF} VIP tokens.", price);
		ShowPlayerDialog(playerid, VIP_LICENSE, DIALOG_STYLE_INPUT, "Custom License Plate", string, "Done", "Cancel");
	}
	return 1;
}

CMD:checkregistration(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 1)
		return 1;

	new sql = GetVSQLID(NearestVehicle(playerid)), idx = GetVIndex(sql);
	if(sql == 0)
		return SendClientMessage(playerid, -1, "You are not near a vehicle.");

	new Float:pos[3];
	GetVehiclePos(Veh[idx][Link], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 4.0, pos[0], pos[1], pos[2]))
		return SendClientMessage(playerid, -1, "There is no vehicle in range for you to check.");

	new reg_string[40], res_string[128];
	switch(Veh[idx][Registered])
	{
		case 0: format(reg_string, sizeof(reg_string), "%s | No registration", Veh[idx][Plate]);
		case 1: format(reg_string, sizeof(reg_string), "%s | Valid registration", Veh[idx][Plate]);
	}
	format(res_string, sizeof(res_string), "* %s checks for the vehicles registration sticker.", GetNameEx(playerid));
	NearByMessage(playerid, NICESKY, res_string);
	SendClientMessage(playerid, -1, reg_string);
	return 1;
}
CMD:checkreg(playerid, params[]) return cmd_checkregistration(playerid, params);

CMD:showreg(playerid, params[])
{
	if(!Player[playerid][CarLicense])
		return SendClientMessage(playerid, -1, "You don't have a car license.");

	new id;
	sscanf(params, "d", id);
	if(id < MAX_PLAYERS)
	{
		if(sscanf(params, "u", id))
			return SendClientMessage(playerid, GREY, "SYNTAX: /showreg(istration) [playerid]");

		if(!IsPlayerConnectedEx(id))
			return SendClientMessage(playerid, -1, "That player is not connected or logged in.");
			
		if(Player[id][Mask] == 1)
	    	id = -1;
	}
	else
	    id = CheckIfMasked(id);
 	if(id == -1)
 		return SendClientMessage(playerid, -1, "That player is too far away from you.");
 
	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, -1, "That player is not connected.");

	if(GetDistanceBetweenPlayers(playerid, id) > 6)
		return SendClientMessage(playerid, -1, "That player is too far away from you.");

	new string[128];

	SendClientMessage(id, GREY, "-------------------------------------------------------------------");

	format(string, sizeof(string), "-- {EDAA1A}%s's registration{FFFFFF} --", GetNormalNameEx(playerid));
	SendClientMessage(id, -1, string);

	new sql, idx, has_car;
	for(new i; i < 5; i++)
	{
		sql = Player[playerid][Cars][i], idx = GetVIndex(sql);
		if(sql > 0)
		{
			if(Veh[idx][Registered])
			{
				has_car = 1;
				format(string, sizeof(string), "%s | %s", vNames[Veh[idx][Model] - 400], Veh[idx][Plate]);
				SendClientMessage(id, GREY, string);
			}
		}
	}

	if(!has_car)
		SendClientMessage(id, GREY, "No registered vehicles");

	SendClientMessage(id, GREY, "-------------------------------------------------------------------");

	if(id == playerid)
		format(string, sizeof(string), "* %s has looked at their registration.", GetNameEx(playerid));
	else
		format(string, sizeof(string), "* %s has shown %s their registration.", GetNameEx(playerid), GetNameEx(id));

	NearByMessage(playerid, NICESKY, string);
	return 1;
}

CMD:showregistration(playerid, params[]) return cmd_showreg(playerid, params);

CMD:showid(playerid, params[])
{
	if(!Player[playerid][Identity])
		return SendClientMessage(playerid, -1, "You don't have any ID.");

	new id, string[128];
	sscanf(params, "d", id);
	if(id < MAX_PLAYERS)
	{
	    if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /showid [playerid]");

		if(!IsPlayerConnectedEx(id))
			return SendClientMessage(playerid, -1, "That player is not connected or logged in.");
			
		if(Player[id][Mask] == 1)
	    	id = -1;
	}
	else
	    id = CheckIfMasked(id);
 	if(id == -1)
 		return SendClientMessage(playerid, -1, "That player is too far away.");
 
	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, -1, "That player is not connected or logged in.");

	if(GetDistanceBetweenPlayers(playerid, id) > 6)
		return SendClientMessage(playerid, -1, "That player is too far away.");

	SendClientMessage(id, GREY, "---------------------------------------------------------");

	SendClientMessage(id, WHITE, "- Personal Identification, Registered Citizen of San Andreas. - ");
	if(Player[playerid][Mask] == 1)
	{
		new name[MAX_PLAYER_NAME], i;
		format(name, sizeof(name), "%s", Player[playerid][NormalName]);
		while ((i = strfind(name, "_", false, i)) != -1)
			name[i] = ' ';
		format(string, sizeof(string), "Name: %s", name);
	}
	else
		format(string, sizeof(string), "Name: %s", GetNameEx(playerid));
	SendClientMessage(id, WHITE, string);
	format(string, sizeof(string), "Age: %d", Player[playerid][Age]);
	SendClientMessage(id, GREY, string);

	if(Player[playerid][House] > 0)
	{
		new location[MAX_ZONE_NAME];
		Get2DPosZone(Houses[Player[playerid][House]][hExteriorX], Houses[Player[playerid][House]][hExteriorY], location, MAX_ZONE_NAME);
		format(string, sizeof(string), "Registered House Address: %d %s Road.", Player[playerid][House], location);
		SendClientMessage(id, GREY, string);
	}

	if(Player[playerid][House2] > 0)
	{
		new location[MAX_ZONE_NAME];
		Get2DPosZone(Houses[Player[playerid][House2]][hExteriorX], Houses[Player[playerid][House2]][hExteriorY], location, MAX_ZONE_NAME);
		format(string, sizeof(string), "Registered House Address: %d %s Road.", Player[playerid][House2], location);
		SendClientMessage(id, GREY, string);
	}

	if(Player[playerid][CarLicense])
	{
		format(string, sizeof(string), "Standard license");
		SendClientMessage(id, GREY, string);
	}

	if(Player[playerid][TruckLicense])
	{
		format(string, sizeof(string), "Trucker license");
		SendClientMessage(id, GREY, string);
	}

	if(Player[playerid][VipRank] > 1)
	{
		format(string, sizeof(string), "Pilots license");
		SendClientMessage(id, GREY, string);
	}

	SendClientMessage(id, GREY, "---------------------------------------------------------");

	format(string, sizeof(string), "You have shown %s your identification.", GetNameEx(id));
	SendClientMessage(playerid, WHITE, string);
	format(string, sizeof(string), "* %s has shown %s their ID.", GetNameEx(playerid), GetNameEx(id));
	NearByMessage(playerid, NICESKY, string);

	return 1;
}
/* End of DMV driving test */

stock RandomLicensePlate(license[])
{
	new Letters[26][] =
	{
		"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M",
		"N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"};

	new Numbers[10][] =
	{
		"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};

	format(license, 128, "%s%s%s - %s%s%s", Letters[random(sizeof(Letters))], Letters[random(sizeof(Letters))], Letters[random(sizeof(Letters))], Numbers[random(sizeof(Numbers))], Numbers[random(sizeof(Numbers))], Numbers[random(sizeof(Numbers))]);


	new query[128], Cache:cache, count;
	mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM vehicles WHERE plate = '%e'", license);
	cache = mysql_query(MYSQL_MAIN, query);
	count = cache_get_row_count();
	cache_delete(cache);

	if(count > 0)
		return RandomLicensePlate(license);
	else
		return license;
}

CMD:randomplate(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 4)
		return 1;

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "You must be in a vehicel to do this.");

	new sql = GetVSQLID(GetPlayerVehicleID(playerid)), idx = GetVIndex(sql);
	if(sql == 0)
		return SendClientMessage(playerid, -1, "This is not a saved vehicle.");

	new str_res[128];
	RandomLicensePlate(Veh[idx][Plate]);
	format(str_res, sizeof(str_res), "You have set the vehicle plates to \"%s\".", Veh[idx][Plate]);
	SendClientMessage(playerid, -1, str_res);
	return 1;
}

/* start rally related */
CMD:createrally(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 6)
		return 1;

	new startpos, rally_id;
	// if(isnull(params) || !IsNumeric(params))
	if(sscanf(params, "dD(-1)", startpos, rally_id))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /createrally [startpos] ([rallid])");
		return SendClientMessage(playerid, GREY, "Start positions: 0 - LS, 1 - SF, 2 - LV");
	}

	new start = strval(params);
	if(start < 0 || start > 2)
		return SendClientMessage(playerid, GREY, "Start positions: 0 - LS, 1 - SF, 2 - LV");

	if(rally_id < 0 || rally_id > MAX_RALLIES-1 && rally_id != -1)
		return SendClientMessage(playerid, GREY, "Invalid rally ID.");

	new rally_file[32];
	if(rally_id >= 0 && rally_id < MAX_RALLIES)
	{
		format(rally_file, sizeof(rally_file), "Rallies/Rally_%d.ini", rally_id);
		if(fexist(rally_file))
			return SendClientMessage(playerid, GREY, "Invalid rally ID! That rally already exists. (/deleterally)");
	}
	else
	{
		for(new i; i < MAX_RALLIES; i++)
		{
			if(!fexist(rally_file))
			{
				rally_id = i;
				break;
			}
		}
	}

	if(rally_id == -1)
		return SendClientMessage(playerid, -1, "No more rallies can be created.");

	Player[playerid][CreatingRally] = rally_id;
	Player[playerid][RallyEditCP] = 0;
	EditRallyCourse[playerid][StartPos] = start;
	SendClientMessage(playerid, -1, "You are now creating a rally. Press ~k~~TOGGLE_SUBMISSIONS~ or type \"/rallycp\" to place a checkpoint.");
	return 1;
}

CMD:deleterally(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 6)
		return 1;

	new rallyid, confirm[8];
	if(sscanf(params, "ds[8]", rallyid, confirm))
		return SendClientMessage(playerid, YELLOW, "Type \"/deleterally [rallyid] confirm\" to confirm deletion.");

	if(strcmp(confirm, "confirm", true))
		return SendClientMessage(playerid, YELLOW, "Type \"/deleterally [rallyid] confirm\" to confirm deletion.");

	if(rallyid < 1 || rallyid > MAX_RALLIES)
		return SendClientMessage(playerid, -1, "That rally does not exist!");

	new rally_file[32], res[128];
	format(rally_file, sizeof(rally_file), "Rallies/Rally_%d.ini", rallyid-1);
	if(!fexist(rally_file))
		return SendClientMessage(playerid, -1, "That rally does not exist!");

	fremove(rally_file);
	format(res, sizeof(res), "%s has deleted rally %d!", GetName(playerid), rallyid);
	SendToAdmins(ADMINORANGE, res, 1);
	format(res, sizeof(res), "You have deleted rally %d.", rallyid);
	SendClientMessage(playerid, -1, res);
	return 1;
}

CMD:rallycp(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 6)
		return 1;

	if(Player[playerid][CreatingRally] == -1)
		return SendClientMessage(playerid, -1, "You are not creating a rally.");

	new cp = Player[playerid][RallyEditCP], string[128];
	GetPlayerPos(playerid, EditRallyCourse[playerid][xPos][cp], EditRallyCourse[playerid][yPos][cp], EditRallyCourse[playerid][zPos][cp]);
	Player[playerid][RallyEditCP]++;
	format(string, sizeof(string), "Checkpoint %d has been placed. Mark your next checkpoint or type \"/completerally\" to finish.", cp+1);
	SendClientMessage(playerid, -1, string);
	return 1;
}

CMD:completerally(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 6)
		return 1;

	if(Player[playerid][CreatingRally] == -1)
		return SendClientMessage(playerid, -1, "You are not creating a rally.");

	if(Player[playerid][RallyEditCP] < 10)
		return SendClientMessage(playerid, RED, "PUT MORE CHECKPOINTS, YOU HAVE VERY LITTLE!!!");

	CreateRally(playerid, Player[playerid][CreatingRally]);
	Player[playerid][CreatingRally] = -1;
	Player[playerid][RallyEditCP] = 0;
	for(new i; i < MAX_RALLY_CHECKPOINTS; i++)
	{
		EditRallyCourse[playerid][xPos][i] = 0.00;
		EditRallyCourse[playerid][yPos][i] = 0.00;
		EditRallyCourse[playerid][zPos][i] = 0.00;
	}
	return 1;
}

stock CreateRally(playerid, courseid)
{
	new rally_file[32];
	format(rally_file, sizeof(rally_file), "Rallies/Rally_%d.ini", courseid);
	if(fexist(rally_file))
	{
		new string[128];
		format(string, sizeof(string), "Something went wrong: A rally with this id (%d) already exists!", courseid);
		return SendClientMessage(playerid, -1, string);
	}

	dini_Create(rally_file);
	new str1[128], str2[128];
	for(new i; i < MAX_RALLY_CHECKPOINTS; i++)
	{
		format(str1, sizeof(str1), "Checkpoint%d", i);
		format(str2, sizeof(str2), "%f %f %f", EditRallyCourse[playerid][xPos][i], EditRallyCourse[playerid][yPos][i], EditRallyCourse[playerid][zPos][i]);
		dini_Set(rally_file, str1, str2);
	}
	dini_IntSet(rally_file, "StartPos", EditRallyCourse[playerid][StartPos]);
	new res[128];
	format(res, sizeof(res), "You have successfully created a new rally (ID %d).", courseid);
	SendClientMessage(playerid, -1, res);
	return 1;
}

stock LoadRally(playerid, courseid)
{
	new rally_file[32];
	format(rally_file, sizeof(rally_file), "Rallies/Rally_%d.ini", courseid);
	if(!fexist(rally_file))
		return ShowPlayerDialog(playerid, RALLY_RACE, DIALOG_STYLE_INPUT, "Choose a rally race", "Choose the rally race you wish to use", "Select", "Cancel");

	new string1[128], string2[128], Float:pos[3];
	for(new i; i < MAX_RALLY_CHECKPOINTS; i++)
	{
		format(string1, sizeof(string1), "Checkpoint%d", i);
		format(string2, sizeof(string2), dini_Get(rally_file, string1));
		sscanf(string2, "fff", pos[0], pos[1], pos[2]);
		RallyCheckpoints[i][0] = pos[0];
		RallyCheckpoints[i][1] = pos[1];
		RallyCheckpoints[i][2] = pos[2];
	}
	RallyStartPos = dini_Int(rally_file, "StartPos");
	TotalRallyCheckpoints = -1;
	for(new i; i < MAX_RALLY_CHECKPOINTS; i++)
	{
		if(RallyCheckpoints[i][2] == 0.00)
			break;
		TotalRallyCheckpoints++;
	}

	EditRally[playerid][Course] = courseid;
	new string[150];
	format(string, sizeof(string), "Vehicle:		{33A10B}%s{FFFFFF}\nRace:		{33A10B}%d{FFFFFF}\nVIP:		%s{FFFFFF}\nNOS:		%s{FFFFFF}\nStart rally\n", vNames[EditRally[playerid][Vehicle]-400], EditRally[playerid][Course], (EditRally[playerid][Vip]) ? ("{33A10B}YES") : ("{FF0000}NO"), (EditRally[playerid][Nos]) ? ("{33A10B}YES") : ("{FF0000}NO"));
	ShowPlayerDialog(playerid, RALLY_MAIN, DIALOG_STYLE_LIST, "Rally settings", string, "Select", "Cancel");
	return 1;
}

stock EndRally()
{
	foreach(Player, i)
	{
		if(!Player[i][InRally])
			continue;

		Player[i][RallyCP] = 0;
		Player[i][InRally] = 0;
		Player[i][Checkpoint] = 0;
		Player[i][Muted] = 0;
		Player[i][Collisions] = 0;
		DisableRemoteVehicleCollisions(i, 0);
		DisablePlayerRaceCheckpoint(i);
		new MathsFlaw = floatround(Player[i][LastHealth], floatround_ceil);
		SetPlayerHealth(i, MathsFlaw);
		MathsFlaw = floatround(Player[i][LastArmour], floatround_ceil);
		SetPlayerArmour(i, MathsFlaw);
		SendPlayerToSavedPos(i);
		TogglePlayerControllable(i, true);
		GivePlayerSavedWeapons(i);
		UpdatePlayerNameColour(i);
		TextDrawHideForPlayer(i, RallyLB);
	}

	for(new i; i < MAX_RALLY_VEHICLES; i++)
		RallyPosition[i] = 0;

	RallyInProgress = 0;
	DestroyEventVehicles();
}
/* end rally related */

CMD:lockunownedhouses(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	for(new i = 1; i < MAX_HOUSES; i++)
	{
		if(!strcmp(Houses[i][hOwner], "Nobody", true))
		{
			Houses[i][LockStatus] = 1;
		}
	}
	SendClientMessage(playerid, -1, "All unowned houses have been locked.");
	return 1;
}

stock strsplit(source[], string1[], string2[], split_pos, maxlength = sizeof(source))
{
	new found_space;
	strmid(string1, source, 0, split_pos, maxlength);
	for(new i = strlen(string1); i > 0; i--)
	{
		if(string1[i] == ' ')
		{
			found_space = 1;
			string1[i] = '\0';
			split_pos = i+1; //split_pos is now at the position of the space (' ') where string1 was cut at.
			break;
		}
	}
	if(!found_space)
	{
		string1[90] = '\0';
		split_pos = 90;
	}
	strmid(string2, source, split_pos, strlen(source), maxlength);
	return 1;
}

CMD:remotecheckweapons(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(isnull(params))
		return SendClientMessage(playerid, GREY, "SYNTAX: /remotecheckweapons [player name]");

	if(!IsPlayerRegistered(params))
		return SendClientMessage(playerid, WHITE, "That player doesn't exist.");


	new weapon[32], string[128];
	SendClientMessage(playerid, -1, "------------------------------------------------------------------------------");
	format(string, sizeof(string), "%s's weapons", params);
	for(new i; i < 12; i++)
	{
		format(string, sizeof(string), "WepSlot%d", i);
		new wep = GetRemoteIntValue(params, string);
		if(wep > 0)
		{
			GetWeaponName(wep, weapon, sizeof(weapon));
			format(string, sizeof(string), "Slot %d - %s", i, weapon);
			SendClientMessage(playerid, GREY, string);
		}
	}
	SendClientMessage(playerid, -1, "------------------------------------------------------------------------------");
	return 1;
}

CMD:changekey(playerid, params[])
{
	if(isnull(params) || !IsNumeric(params))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /changekey [key]");
		return SendClientMessage(playerid, GREY, "Keys: 0 (~k~~PED_DUCK~), 1 (~k~~PED_SPRINT~), 2 (~k~~VEHICLE_ENTER_EXIT~) and 3 (~k~~PED_JUMPING~)");
	}

	if(strval(params) < 0 || strval(params) > 3)
		return SendClientMessage(playerid, -1, "Invalid key.");

	new string[128], key[32];
	switch(strval(params)) //~k~~PED_DUCK~ ~k~~PED_SPRINT~ ~k~~VEHICLE_ENTER_EXIT~ ~k~~PED_JUMPING~
	{
		case 0: Player[playerid][EnterKey] = 2, format(key, sizeof(key), "~k~~PED_DUCK~");
		case 1: Player[playerid][EnterKey] = 8, format(key, sizeof(key), "~k~~PED_SPRINT~");
		case 2: Player[playerid][EnterKey] = 16, format(key, sizeof(key), "~k~~VEHICLE_ENTER_EXIT~");
		case 3: Player[playerid][EnterKey] = 32, format(key, sizeof(key), "~k~~PED_JUMPING~");
		default: Player[playerid][EnterKey] = 2, format(key, sizeof(key), "~k~~PED_DUCK~");
	}
	format(string, sizeof(string), "You have set the key to enter and exit places to %s.", key);
	SendClientMessage(playerid, -1, string);
	new exit_string[128];
	format(exit_string, sizeof(exit_string), "Go to the door and press ~r~ %s ~w~ to exit the building.", key);
	PlayerTextDrawSetString(playerid, ExitTextdraw[playerid], exit_string);
	return 1;
}

CMD:stash(playerid, params[])
{
	if(Player[playerid][PlayingHours] < 2)
		return SendClientMessage(playerid, -1, "You can't do that.");

	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "You can't do that in a vehicle.");
		
	if(Player[playerid][PrisonID] == 2)
		return SendClientMessage(playerid, -1, "You can't use this in prison.");
	
	if(Player[playerid][GunTazer] == 1)
		return SendClientMessage(playerid, -1, "Put your tazer away first.");

	new option[32], value, code, useCase;
	if(sscanf(params, "ds[32]D(0)D(0)", code, option, value, useCase))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /stash [code] [option] ([value]) ([use briefcase ( 1 = yes, 0 = no)]) - put code as \'-1\' to use no code.");
		SendClientMessage(playerid, GREY, "Options: money, weapon, streetmats, standardmats, militarymats, pot, cocaine, phone, poorkevlar, standardkevlar, militarykevlar");
		return SendClientMessage(playerid, GREY, "Options: bomb");
	}

	if((code < 1000 && code != -1) || code > 99999)
		return SendClientMessage(playerid, -1, "The code must be 4 - 5 digits long.");

	new slot = -1;
	for(new i; i < MAX_STASH; i++)
	{
		if(GlobalStash[i][Object] == 0)
		{
			slot = i;
			break;
		}
	}

	if(slot == -1)
		return SendClientMessage(playerid, -1, "You can't stash anything right now.");

	new Float:pos[3], stashed[64], object[32];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

	if(!strcmp(option, "money", true)) // 1550
	{
		if(value < 1)
			return SendClientMessage(playerid, -1, "Value must be greater than 0.");

		if(Player[playerid][Money] < value)
			return SendClientMessage(playerid, -1, "You don't have that much money.");

		Player[playerid][Money] -= value;
		GlobalStash[slot][Object] = CreateDynamicObject(1550, pos[0], pos[1], pos[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		GlobalStash[slot][StoredItem] = STASH_MONEY;
		GlobalStash[slot][ItemAmount] = value;
		format(stashed, sizeof(stashed), "%s money", PrettyMoney(value));
		format(object, sizeof(object), "money bag");
	}
	else if(!strcmp(option, "weapon", true)) // 2919
	{
		new weapon = GetPlayerWeapon(playerid);

		if(weapon == 0)
			return 1;

		if(weapon == 46)
			return SendClientMessage(playerid, WHITE, "You can't stash that!");

		if(Player[playerid][AnticheatWarns] > 0)
			return 1;

		if(!PlayerHasWeapon(playerid, weapon))
			return 1;

		AdjustWeapon(playerid, weapon, 0);

		GlobalStash[slot][Object] = CreateDynamicObject(useCase ? 1210 : GetWeaponModelID(weapon), pos[0], pos[1], pos[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		GlobalStash[slot][StoredItem] = STASH_WEAPON;
		GlobalStash[slot][ItemAmount] = weapon;
		format(stashed, sizeof(stashed), "a %s", weapons[weapon]);
		format(object, sizeof(object), "%s", useCase ? ("bag") : (weapons[weapon]));
	}
	else if(!strcmp(option, "streetmats", true))
	{
		if(value < 1)
			return SendClientMessage(playerid, -1, "Value must be greater than 0.");

		if(Player[playerid][Materials][0] < value)
			return SendClientMessage(playerid, -1, "You don't have that many street grade materials.");

		Player[playerid][Materials][0] -= value;
		GlobalStash[slot][Object] = CreateDynamicObject(1210, pos[0], pos[1], pos[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		GlobalStash[slot][StoredItem] = STASH_MATSLOW;
		GlobalStash[slot][ItemAmount] = value;
		format(stashed, sizeof(stashed), "%s street grade materials", IntToFormattedStr(value));
		format(object, sizeof(object), "bag");
	}
	else if(!strcmp(option, "standardmats", true))
	{
		if(value < 1)
			return SendClientMessage(playerid, -1, "Value must be greater than 0.");

		if(Player[playerid][Materials][1] < value)
			return SendClientMessage(playerid, -1, "You don't have that many standard grade materials.");

		Player[playerid][Materials][1] -= value;
		GlobalStash[slot][Object] = CreateDynamicObject(1210, pos[0], pos[1], pos[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		GlobalStash[slot][StoredItem] = STASH_MATSMID;
		GlobalStash[slot][ItemAmount] = value;
		format(stashed, sizeof(stashed), "%s standard grade materials", IntToFormattedStr(value));
		format(object, sizeof(object), "bag");
	}
	else if(!strcmp(option, "militarymats", true))
	{
		if(value < 1)
			return SendClientMessage(playerid, -1, "Value must be greater than 0.");

		if(Player[playerid][Materials][2] < value)
			return SendClientMessage(playerid, -1, "You don't have that many military grade materials.");

		Player[playerid][Materials][2] -= value;
		GlobalStash[slot][Object] = CreateDynamicObject(1210, pos[0], pos[1], pos[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		GlobalStash[slot][StoredItem] = STASH_MATSHIGH;
		GlobalStash[slot][ItemAmount] = value;
		format(stashed, sizeof(stashed), "%s military grade materials", IntToFormattedStr(value));
		format(object, sizeof(object), "bag");
	}
	else if(!strcmp(option, "pot", true))
	{
		if(value < 1)
			return SendClientMessage(playerid, -1, "Value must be greater than 0.");

		if(Player[playerid][Pot] < value)
			return SendClientMessage(playerid, -1, "You don't have that much pot.");

		Player[playerid][Pot] -= value;
		GlobalStash[slot][Object] = CreateDynamicObject(useCase ? 1210 : 1575, pos[0], pos[1], pos[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		GlobalStash[slot][StoredItem] = STASH_POT;
		GlobalStash[slot][ItemAmount] = value;
		format(stashed, sizeof(stashed), "%s pot", IntToFormattedStr(value));
		format(object, sizeof(object), "%s", useCase ? ("bag") : ("package"));
	}
	else if(!strcmp(option, "cocaine", true))
	{
		if(value < 1)
			return SendClientMessage(playerid, -1, "Value must be greater than 0.");

		if(Player[playerid][Cocaine] < value)
			return SendClientMessage(playerid, -1, "You don't have that much cocaine.");

		Player[playerid][Cocaine] -= value;
		GlobalStash[slot][Object] = CreateDynamicObject(useCase ? 1210 : 1575, pos[0], pos[1], pos[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		GlobalStash[slot][StoredItem] = STASH_COCAINE;
		GlobalStash[slot][ItemAmount] = value;
		format(stashed, sizeof(stashed), "%s cocaine", IntToFormattedStr(value));
		format(object, sizeof(object), "%s", useCase ? ("bag") : ("package"));
	}
	else if(!strcmp(option, "speed", true))
	{
		if(value < 1)
			return SendClientMessage(playerid, -1, "Value must be greater than 0.");

		if(Player[playerid][Speed] < value)
			return SendClientMessage(playerid, -1, "You don't have that much speed.");

		Player[playerid][Speed] -= value;
		GlobalStash[slot][Object] = CreateDynamicObject(useCase ? 1210 : 1575, pos[0], pos[1], pos[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		GlobalStash[slot][StoredItem] = STASH_SPEED;
		GlobalStash[slot][ItemAmount] = value;
		format(stashed, sizeof(stashed), "%s speed", IntToFormattedStr(value));
		format(object, sizeof(object), "%s", useCase ? ("bag") : ("package"));
	}
	else if(!strcmp(option, "phone", true))
	{
		if(PlayerOwnsPhone(playerid) == 0)
			  return SendClientMessage(playerid, WHITE, "You don't have that!");

		new string[256];
        mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE phones SET owner = '%e' WHERE  number = '%d'",  "Stashed_Phone", Player[playerid][PhoneN]);
	   	mysql_query(MYSQL_MAIN, string, false);
	   	SendClientMessage(playerid, WHITE, "You have no active phone at the time being, /choosephone to select one.");
		GlobalStash[slot][Object] = CreateDynamicObject(1210, pos[0], pos[1], pos[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		GlobalStash[slot][StoredItem] = STASH_PHONE;
		GlobalStash[slot][ItemAmount] = Player[playerid][PhoneN];
		Player[playerid][PhoneN] = -1;
		format(stashed, sizeof(stashed), "%s phone", IntToFormattedStr(Player[playerid][PhoneN]));
		format(object, sizeof(object), "bag");
	}
	else if(!strcmp(option, "poorkevlar", true))
	{
		if(Player[playerid][HasArmour] != 100)
			return SendClientMessage(playerid, -1, "You don't have a poor kevlar vest.");

		Player[playerid][HasArmour] = 0;
		GlobalStash[slot][Object] = CreateDynamicObject(useCase ? 1210 : 1575, pos[0], pos[1], pos[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		GlobalStash[slot][StoredItem] = STASH_ARMOUR_POOR;
		GlobalStash[slot][ItemAmount] = 1;
		format(stashed, sizeof(stashed), "a poor kevlar vest");
		format(object, sizeof(object), "%s", useCase ? ("bag") : ("package"));
	}
	else if(!strcmp(option, "standardkevlar", true))
	{
		if(Player[playerid][HasArmour] != 115)
			return SendClientMessage(playerid, -1, "You don't have a standard kevlar vest.");

		Player[playerid][HasArmour] = 0;
		GlobalStash[slot][Object] = CreateDynamicObject(useCase ? 1210 : 1575, pos[0], pos[1], pos[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		GlobalStash[slot][StoredItem] = STASH_ARMOUR_STANDARD;
		GlobalStash[slot][ItemAmount] = 1;
		format(stashed, sizeof(stashed), "a standard kevlar vest");
		format(object, sizeof(object), "%s", useCase ? ("bag") : ("package"));
	}
	else if(!strcmp(option, "militarykevlar", true))
	{
		if(Player[playerid][HasArmour] != 130)
			return SendClientMessage(playerid, -1, "You don't have a poor kevlar vest.");

		Player[playerid][HasArmour] = 0;
		GlobalStash[slot][Object] = CreateDynamicObject(useCase ? 1210 : 1575, pos[0], pos[1], pos[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		GlobalStash[slot][StoredItem] = STASH_ARMOUR_MILITARY;
		GlobalStash[slot][ItemAmount] = 1;
		format(stashed, sizeof(stashed), "a military kevlar vest");
		format(object, sizeof(object), "%s", useCase ? ("bag") : ("package"));
	}
	else if(!strcmp(option, "bomb", true))
	{
		if(Player[playerid][Bomb] < 1)
			return SendClientMessage(playerid, -1, "You don't have a bomb.");

		Player[playerid][Bomb] = 0;
		GlobalStash[slot][Object] = CreateDynamicObject(useCase ? 1210 : 1575, pos[0], pos[1], pos[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		GlobalStash[slot][StoredItem] = STASH_BOMB;
		GlobalStash[slot][ItemAmount] = 1;
		format(stashed, sizeof(stashed), "a bomb");
		format(object, sizeof(object), "%s", useCase ? ("bag") : ("package"));
	}
	else
		return SendClientMessage(playerid, -1, "Invalid option.");

	GlobalStash[slot][StashX] = pos[0];
	GlobalStash[slot][StashY] = pos[1];
	GlobalStash[slot][StashZ] = pos[2];

	new string[128], autome[128];
	if(code == -1) code = 0;
	GlobalStash[slot][Code] = code;
	GlobalStash[slot][Timer] = gettime() + 1800;
	if(code != 0)
	{
		format(string, sizeof(string), "You have set the code on the bag to %d. After 30 minutes, the code will be removed.", code);
		SendClientMessage(playerid, -1, string);
	}
	else
	{
		format(string, sizeof(string), "You have not set a code on the stash. It will be automatically removed after 30 minutes.", code);
		SendClientMessage(playerid, -1, string);
	}
	Streamer_Update(playerid);
	EditDynamicObject(playerid, GlobalStash[slot][Object]);
	new Float:spos[3];
	GetPlayerPos(playerid, spos[0], spos[1], spos[2]);
	SetPVarFloat(playerid, "StashPos_X", spos[0]);
	SetPVarFloat(playerid, "StashPos_Y", spos[1]);
	SetPVarFloat(playerid, "StashPos_Z", spos[2]);
	format(GlobalStash[slot][PlacedBy], 25, "%s", Player[playerid][NormalName]);
	SetPVarInt(playerid, "MovingStash", GlobalStash[slot][Object]);
	SetPVarInt(playerid, "MovingStashSlot", slot);
	format(autome, sizeof(autome), "* %s has dropped a %s onto the ground.", GetNameEx(playerid), object);
	NearByMessage(playerid, NICESKY, autome);
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 3.1, 0, 0, 0, 0, 0, 1);

	if(Player[playerid][PlayingHours] < 5)
	{
		format(string, sizeof(string), "WARNING: %s (ID: %d) has just stashed a bag of %s and has under 5 playing hours.", GetName(playerid), playerid, stashed);
		SendToAdmins(ADMINORANGE, string, 0);
	}

	format(string, sizeof(string), "[STASH] %s (%s) has stashed %s somewhere.", GetName(playerid), GetPlayersIP(playerid), stashed);
	StatLog(string);
	return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(GetPVarInt(playerid, "MovingStash") == objectid && objectid != 0)
	{
		new Float:startpos[3];
		startpos[0] = GetPVarFloat(playerid, "StashPos_X");
		startpos[1] = GetPVarFloat(playerid, "StashPos_Y");
		startpos[2] = GetPVarFloat(playerid, "StashPos_Z");

		if(GetDistanceBetweenPoints(startpos[0], startpos[1], startpos[2], x, y, z) > 5 && startpos[0] != 0.0)
		{
			new stash = GetPVarInt(playerid, "MovingStashSlot");
			DeletePVar(playerid, "MovingStash");
			DeletePVar(playerid, "MovingStashSlot");
			SetPVarInt(playerid, "MovingStashTooFar", 1);

			switch(GlobalStash[stash][StoredItem])
			{
				case STASH_MONEY: Player[playerid][Money] += GlobalStash[stash][ItemAmount];
				case STASH_WEAPON: GivePlayerWeaponEx(playerid, GlobalStash[stash][ItemAmount]);
				case STASH_MATSLOW: Player[playerid][Materials][0] += GlobalStash[stash][ItemAmount];
				case STASH_MATSMID: Player[playerid][Materials][1] += GlobalStash[stash][ItemAmount];
				case STASH_MATSHIGH: Player[playerid][Materials][2] += GlobalStash[stash][ItemAmount];
				case STASH_POT: Player[playerid][Pot] += GlobalStash[stash][ItemAmount];
				case STASH_COCAINE: Player[playerid][Cocaine] += GlobalStash[stash][ItemAmount];
				case STASH_SPEED: Player[playerid][Speed] += GlobalStash[stash][ItemAmount];
				case STASH_PHONE:
				{
					Player[playerid][PhoneN] = GlobalStash[stash][ItemAmount];
					new string[256];
					mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE phones SET owner = '%e' WHERE  number = '%d'",  Player[playerid][NormalName], Player[playerid][PhoneN]);
					mysql_query(MYSQL_MAIN, string, false);
				}
				case STASH_ARMOUR_POOR: Player[playerid][HasArmour] = 100;
				case STASH_ARMOUR_STANDARD: Player[playerid][HasArmour] = 115;
				case STASH_ARMOUR_MILITARY: Player[playerid][HasArmour] = 130;
				case STASH_BOMB: Player[playerid][Bomb] = 1;
			}
			ResetStashBag(stash);

			SetPlayerPos(playerid, startpos[0], startpos[1], startpos[2]);
			return SendClientMessage(playerid, GREY, "You moved your stash too far and it the action has been cancelled.");
		}

		switch(response)
		{
			case EDIT_RESPONSE_FINAL:
			{
				new slot = GetPVarInt(playerid, "MovingStashSlot");
				GlobalStash[slot][StashX] = x;
				GlobalStash[slot][StashY] = y;
				GlobalStash[slot][StashZ] = z;
				SetDynamicObjectPos(objectid, x, y, z);
				SetDynamicObjectRot(objectid, rx, ry, rz);
				DeletePVar(playerid, "MovingStash");
				DeletePVar(playerid, "MovingStashSlot");
			}
			case EDIT_RESPONSE_CANCEL:
			{
				DeletePVar(playerid, "MovingStash");
				DeletePVar(playerid, "MovingStashSlot");
				SetDynamicObjectPos(objectid, startpos[0], startpos[1], startpos[2]);
				SetDynamicObjectRot(objectid, 0.0, 0.0, 0.0);
				return SendClientMessage(playerid, WHITE, "You cancelled editting the stashes position.");
			}
		}
	}
	else if(GetPVarInt(playerid, "DS_EDITING_OBJECT") == 1)
	{
		new id = GetPVarInt(playerid, "DS_OBJECT_ID"), slot = GetPVarInt(playerid, "DS_OBJECT_SLOT"), string[128];

		new Float:old[6];
		GetDynamicObjectPos(objectid, old[0], old[1], old[2]);
		GetDynamicObjectRot(objectid, old[3], old[4], old[5]);

		MoveDynamicObject(objectid, x, y, z, 2.0, rx, ry, rz);

		switch(response)
		{
			case EDIT_RESPONSE_CANCEL:
			{
				DestroyDynamicObject(id);
				return SendClientMessage(playerid, WHITE, "You canceled editting the supply positions.");
			}
			case EDIT_RESPONSE_FINAL:
			{
				DrugSupplyPositions[slot][dPos][0] = x;
				DrugSupplyPositions[slot][dPos][1] = y;
				DrugSupplyPositions[slot][dPos][2] = z;
				DrugSupplyPositions[slot][dRot][0] = rx;
				DrugSupplyPositions[slot][dRot][1] = ry;
				DrugSupplyPositions[slot][dRot][2] = rz;

				SaveDrugSupplyPositions();
				format(string, sizeof(string), "You have edited drug supply position %d.", slot);
				SendClientMessage(playerid, WHITE, string);
				format(string, sizeof(string), "[Drugs] %s has edited drug supply position %d.", Player[playerid][AdminName], slot);
				AdminActionsLog(string);
				DestroyDynamicObject(objectid);

				DeletePVar(playerid, "DS_OBJECT__ID");
				DeletePVar(playerid, "DS_OBJECT_SLOT");
				DeletePVar(playerid, "DS_EDITING_OBJECT");
			}
		}
	}
	else if(GetPVarInt(playerid, "EditingBug") == 1)
	{
		new string[128];
		
		switch(response)
		{
			case EDIT_RESPONSE_CANCEL:
			{
				new i = GetPVarInt(playerid, "EditingBugNumber");
				DeletePVar(playerid, "EditingBugNumber");
				Bugs[i][bx] = -1;
				Bugs[i][by] = -1;
				Bugs[i][bz] = -1;
				Bugs[i][Active] = 0;
				DestroyDynamicObject(Bugs[i][BugObject]);
				Bugs[i][BugObject] = -1;
				format(Bugs[i][PlacedBy], MAX_PLAYER_NAME, "N/A");
				DeletePVar(playerid, "EditingBug");
			}
			case EDIT_RESPONSE_FINAL:
			{
				new i = GetPVarInt(playerid, "EditingBugNumber");
				DeletePVar(playerid, "EditingBugNumber");
				Bugs[i][bx] = x;
				Bugs[i][by] = y;
				Bugs[i][bz] = z;
				SetDynamicObjectPos(objectid, x, y, z);
				SetDynamicObjectRot(objectid, rx, ry, rz);
				Bugs[i][Active] = 1;
				Bugs[i][BugVW] = GetPlayerVirtualWorld(playerid);
				format(Bugs[i][PlacedBy], MAX_PLAYER_NAME, "%s", Player[playerid][NormalName]);
				format(string, sizeof(string), "* %s carefully places a bug device down.", GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, string);	
				format(string, sizeof(string), "This is bug %d, type /tunein %d in the LSPD Burrito to listen in.", i+1, i+1);
				SendClientMessage(playerid, -1, string);
				DeletePVar(playerid, "EditingBug");
			}
		}
	}
	return 1;
}

stock GetClosestStash(playerid)
{
	new stashid = -1, Float:dist = 1000.0;
	for(new i; i < MAX_STASH; i++)
	{
		if(GlobalStash[i][Object] > 0)
		{
			if(stashid == -1 || dist > GetPlayerDistanceFromPoint(playerid, GlobalStash[i][StashX], GlobalStash[i][StashY], GlobalStash[i][StashZ]))
			{
				stashid = i;
				dist = GetPlayerDistanceFromPoint(playerid, GlobalStash[i][StashX], GlobalStash[i][StashY], GlobalStash[i][StashZ]);
			}
		}
	}
	return stashid;
}

stock ResetStashBag(stashid, delete_phone = 0)
{
	foreach(Player, i)
	{
		if(GetPVarInt(i, "MovingStash") == GlobalStash[stashid][Object])
		{
			if(GetPVarInt(i, "MovingStashTooFar") != 1)
				SendClientMessage(i, GREY, "Somebody picked up your stash while you were editing it!");
			DeletePVar(i, "MovingStash");
			DeletePVar(i, "MovingStashSlot");
			DeletePVar(i, "MovingStashTooFar");
			CancelEdit(i);
		}
	}

	if(delete_phone == 1 && GlobalStash[stashid][StoredItem] == STASH_PHONE)
	{
		new query[128];
		mysql_format(MYSQL_MAIN, query, sizeof(query), "DELETE FROM phones WHERE number = '%d' AND owner = 'Stashed_Phone'", GlobalStash[stashid][ItemAmount]);
		mysql_query(MYSQL_MAIN, query, false);
	}
	
	DestroyDynamicObject(GlobalStash[stashid][Object]);
	GlobalStash[stashid][Object] = 0;
	GlobalStash[stashid][Timer] = 0;
	GlobalStash[stashid][StoredItem] = 0;
	GlobalStash[stashid][ItemAmount] = 0;
	GlobalStash[stashid][Code] = 0;
	GlobalStash[stashid][PlacedBy] = 0;
	return 1;
}

CMD:pickupbag(playerid, params[])
{
	if(Player[playerid][PlayingHours] < 2)
		return SendClientMessage(playerid, -1, "You can't do that yet.");

	new stash = GetClosestStash(playerid);
	if(stash == -1)
		return SendClientMessage(playerid, -1, "There is no bags nearby that you can take.");

	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "You can't do that in a vehicle.");

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, GlobalStash[stash][StashX], GlobalStash[stash][StashY], GlobalStash[stash][StashZ]))
		return SendClientMessage(playerid, -1, "There is no bags nearby that you can take.");
	
	if(Player[playerid][PrisonID] == 2)
		return SendClientMessage(playerid, -1, "You can't do this while in prison.");

	if(strval(params) != GlobalStash[stash][Code] && GlobalStash[stash][Code] != 0)
		return SendClientMessage(playerid, -1, "Wrong code.");

	new string[128], warning[128], log[128];
	switch(GlobalStash[stash][StoredItem])
	{
		case STASH_MONEY:
		{
			Player[playerid][Money] += GlobalStash[stash][ItemAmount];
			format(string, sizeof(string), "You have picked up %s.", PrettyMoney(GlobalStash[stash][ItemAmount]));
			SendClientMessage(playerid, -1, string);
			format(warning, sizeof(warning), "WARNING: %s (ID: %d) has picked up %s money and has under 5 playing hours.", GetName(playerid), playerid, PrettyMoney(GlobalStash[stash][ItemAmount]));
			format(log, sizeof(log), "[STASH] %s (%s) has picked up a stash bag with %s money.", GetName(playerid), GetPlayersIP(playerid), PrettyMoney(GlobalStash[stash][ItemAmount]));
			StatLog(log);
			ResetStashBag(stash);
		}
		case STASH_WEAPON:
		{
			GivePlayerWeaponEx(playerid, GlobalStash[stash][ItemAmount]);
			format(string, sizeof(string), "You have picked up a %s.", weapons[GlobalStash[stash][ItemAmount]]);
			SendClientMessage(playerid, -1, string);
			format(warning, sizeof(warning), "WARNING: %s (ID: %d) has picked up a %s and has under 5 playing hours.", GetName(playerid), playerid, weapons[GlobalStash[stash][ItemAmount]]);
			format(log, sizeof(log), "[STASH] %s (%s) has picked up a stash bag with a %s.", GetName(playerid), GetPlayersIP(playerid), weapons[GlobalStash[stash][ItemAmount]]);
			StatLog(log);
			ResetStashBag(stash);
		}
		case STASH_MATSLOW:
		{
			Player[playerid][Materials][0] += GlobalStash[stash][ItemAmount];
			format(string, sizeof(string), "You have picked up %s street grade materials.", IntToFormattedStr(GlobalStash[stash][ItemAmount]));
			SendClientMessage(playerid, -1, string);
			format(warning, sizeof(warning), "WARNING: %s (ID: %d) has picked up %s street grade materials and has under 5 playing hours.", GetName(playerid), playerid, IntToFormattedStr(GlobalStash[stash][ItemAmount]));
			format(log, sizeof(log), "[STASH] %s (%s) has picked up a stash bag with %s street grade materials.", GetName(playerid), GetPlayersIP(playerid), IntToFormattedStr(GlobalStash[stash][ItemAmount]));
			StatLog(log);
			ResetStashBag(stash);
		}
		case STASH_MATSMID:
		{
			Player[playerid][Materials][1] += GlobalStash[stash][ItemAmount];
			format(string, sizeof(string), "You have picked up %s standard grade materials.", IntToFormattedStr(GlobalStash[stash][ItemAmount]));
			SendClientMessage(playerid, -1, string);
			format(warning, sizeof(warning), "WARNING: %s (ID: %d) has picked up %s standard grade materials and has under 5 playing hours.", GetName(playerid), playerid, IntToFormattedStr(GlobalStash[stash][ItemAmount]));
			format(log, sizeof(log), "[STASH] %s (%s) has picked up a stash bag with %s standard grade materials.", GetName(playerid), GetPlayersIP(playerid), IntToFormattedStr(GlobalStash[stash][ItemAmount]));
			StatLog(log);
			ResetStashBag(stash);
		}
		case STASH_MATSHIGH:
		{
			Player[playerid][Materials][2] += GlobalStash[stash][ItemAmount];
			format(string, sizeof(string), "You have picked up %s military grade materials.", IntToFormattedStr(GlobalStash[stash][ItemAmount]));
			SendClientMessage(playerid, -1, string);
			format(warning, sizeof(warning), "WARNING: %s (ID: %d) has picked up %s military grade materials and has under 5 playing hours.", GetName(playerid), playerid, IntToFormattedStr(GlobalStash[stash][ItemAmount]));
			format(log, sizeof(log), "[STASH] %s (%s) has picked up a stash bag with %s military grade materials.", GetName(playerid), GetPlayersIP(playerid), IntToFormattedStr(GlobalStash[stash][ItemAmount]));
			StatLog(log);
			ResetStashBag(stash);
		}
		case STASH_POT:
		{
			Player[playerid][Pot] += GlobalStash[stash][ItemAmount];
			format(string, sizeof(string), "You have picked up %s pot.", IntToFormattedStr(GlobalStash[stash][ItemAmount]));
			SendClientMessage(playerid, -1, string);
			format(warning, sizeof(warning), "WARNING: %s (ID: %d) has picked up %s pot and has under 5 playing hours.", GetName(playerid), playerid, IntToFormattedStr(GlobalStash[stash][ItemAmount]));
			format(log, sizeof(log), "[STASH] %s (%s) has picked up a stash bag with %s pot.", GetName(playerid), GetPlayersIP(playerid), IntToFormattedStr(GlobalStash[stash][ItemAmount]));
			StatLog(log);
			ResetStashBag(stash);
		}
		case STASH_COCAINE:
		{
			Player[playerid][Cocaine] += GlobalStash[stash][ItemAmount];
			format(string, sizeof(string), "You have picked up %s cocaine.", IntToFormattedStr(GlobalStash[stash][ItemAmount]));
			SendClientMessage(playerid, -1, string);
			format(warning, sizeof(warning), "WARNING: %s (ID: %d) has picked up %s cocaine and has under 5 playing hours.", GetName(playerid), playerid, IntToFormattedStr(GlobalStash[stash][ItemAmount]));
			format(log, sizeof(log), "[STASH] %s (%s) has picked up a stash bag with %s cocaine.", GetName(playerid), GetPlayersIP(playerid), IntToFormattedStr(GlobalStash[stash][ItemAmount]));
			StatLog(log);
			ResetStashBag(stash);
		}
		case STASH_SPEED:
		{
			Player[playerid][Speed] += GlobalStash[stash][ItemAmount];
			format(string, sizeof(string), "You have picked up %s speed.", IntToFormattedStr(GlobalStash[stash][ItemAmount]));
			SendClientMessage(playerid, -1, string);
			format(warning, sizeof(warning), "WARNING: %s (ID: %d) has picked up %s speed and has under 5 playing hours.", GetName(playerid), playerid, IntToFormattedStr(GlobalStash[stash][ItemAmount]));
			format(log, sizeof(log), "[STASH] %s (%s) has picked up a stash bag with %s speed.", GetName(playerid), GetPlayersIP(playerid), IntToFormattedStr(GlobalStash[stash][ItemAmount]));
			StatLog(log);
			ResetStashBag(stash);
		}
		case STASH_PHONE:
		{
	     	if(GetPlayerPhones(playerid) >= 5)
		          return SendClientMessage(playerid, -1, "You already have the max amount of phones.");
		          
	    	Player[playerid][PhoneN] = GlobalStash[stash][ItemAmount];
            mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE phones SET owner = '%e' WHERE  number = '%d'",  Player[playerid][NormalName], GlobalStash[stash][ItemAmount]);
	    	mysql_query(MYSQL_MAIN, string, false);
			format(string, sizeof(string), "You have picked up a phone (%d)", GlobalStash[stash][ItemAmount]);
			SendClientMessage(playerid, -1, string);
			format(warning, sizeof(warning), "WARNING: %s (ID: %d) has picked up a phone (%s) and has under 5 playing hours.", GetName(playerid), playerid, IntToFormattedStr(GlobalStash[stash][ItemAmount]));
			format(log, sizeof(log), "[STASH] %s (%s) has picked up a stash bag that contains a phone (%s).", GetName(playerid), GetPlayersIP(playerid), IntToFormattedStr(GlobalStash[stash][ItemAmount]));
			StatLog(log);
			ResetStashBag(stash);
		}
		case STASH_ARMOUR_POOR:
		{
			if(Player[playerid][HasArmour] > 0)
				return SendClientMessage(playerid, -1, "You are already carrying a kevlar vest.");
			Player[playerid][HasArmour] = 100;
			format(string, sizeof(string), "You have picked up a poor kevlar vest.");
			SendClientMessage(playerid, -1, string);
			format(warning, sizeof(warning), "WARNING: %s (ID: %d) has picked up a poor kevlar vest and has under 5 playing hours.", GetName(playerid), playerid);
			format(log, sizeof(log), "[STASH] %s (%s) has picked up a stash bag with poor kevlar vest.", GetName(playerid), GetPlayersIP(playerid));
			StatLog(log);
			ResetStashBag(stash);
		}
		case STASH_ARMOUR_STANDARD:
		{
			if(Player[playerid][HasArmour] > 0)
				return SendClientMessage(playerid, -1, "You are already carrying a kevlar vest.");
			Player[playerid][HasArmour] = 115;
			format(string, sizeof(string), "You have picked up a standard kevlar vest.");
			SendClientMessage(playerid, -1, string);
			format(warning, sizeof(warning), "WARNING: %s (ID: %d) has picked up a standard kevlar vest and has under 5 playing hours.", GetName(playerid), playerid);
			format(log, sizeof(log), "[STASH] %s (%s) has picked up a stash bag with poor kevlar vest.", GetName(playerid), GetPlayersIP(playerid));
			StatLog(log);
			ResetStashBag(stash);
		}
		case STASH_ARMOUR_MILITARY:
		{
			if(Player[playerid][HasArmour] > 0)
				return SendClientMessage(playerid, -1, "You are already carrying a kevlar vest.");
			Player[playerid][HasArmour] = 130;
			format(string, sizeof(string), "You have picked up a military kevlar vest.");
			SendClientMessage(playerid, -1, string);
			format(warning, sizeof(warning), "WARNING: %s (ID: %d) has picked up poor kevlar vest and has under 5 playing hours.", GetName(playerid), playerid);
			format(log, sizeof(log), "[STASH] %s (%s) has picked up a stash bag with poor kevlar vest.", GetName(playerid), GetPlayersIP(playerid));
			StatLog(log);
			ResetStashBag(stash);
		}
		case STASH_BOMB:
		{
			if(Player[playerid][Bomb] > 0)
				return SendClientMessage(playerid, -1, "You are already carrying a bomb.");
			Player[playerid][Bomb] = 1;
			format(string, sizeof(string), "You have picked up a bomb.");
			SendClientMessage(playerid, -1, string);
			format(warning, sizeof(warning), "WARNING: %s (ID: %d) has picked up a bomb and has under 5 playing hours.", GetName(playerid), playerid);
			format(log, sizeof(log), "[STASH] %s (%s) has picked up a stash bag with a bomb.", GetName(playerid), GetPlayersIP(playerid));
			StatLog(log);
			ResetStashBag(stash);
		}
	}

	Streamer_Update(playerid);
	if(Player[playerid][PlayingHours] < 5)
	{
		SendToAdmins(ADMINORANGE, warning, 0);
		WarningLog(warning);
	}

	format(string, sizeof(string), "* %s has picked up a stash from the ground.", GetNameEx(playerid));
	NearByMessage(playerid, NICESKY, string);
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 3.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:contract(playerid, params[])
{
	new string[800];
	if(Player[playerid][PendingPrice] < 5000 || Player[playerid][PendingPrice] > 10000000)
		Player[playerid][PendingPrice] = 5000;

	if(Player[playerid][PlayingHours] < 5)
		return SendClientMessage(playerid, -1, "You need 5 playing hours to contract a player.");

	format(string, sizeof(string), "{FFFD8C}Name of target: {FFFFFF}%s\n{FFFD8C}Hit amount: {FFFFFF}%s\n{FFFD8C}Hit reason: {FFFFFF}%s\n{FFFD8C}Notes: {FFFFFF}%s\n{FFFD8C}Contract\n", Player[playerid][PendingContract], PrettyMoney(Player[playerid][PendingPrice]), Player[playerid][PendingReason], Player[playerid][PendingReason2]);
	ShowPlayerDialog(playerid, CONTRACT_MAIN, DIALOG_STYLE_LIST, "Place a contract", string, "Select", "Cancel");
	return 1;
}

/*CMD:plantbomb(playerid)
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 2)
		return 1;

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "You must be in a vehicle to do this.");

	new vehicleid = GetPlayerVehicleID(playerid), sql = GetVSQLID(vehicleid);
	if(sql == 0)
		return SendClientMessage(playerid, -1, "This is not a saved vehicle.");

	if(IsVehicleArmed(sql))
		return SendClientMessage(playerid, -1, "This vehicle has a bomb in it already.");

	new idx = GetVIndex(sql);
	strcpy(Veh[idx][Bomb], GetName(playerid), 25);
	Veh[idx][BombExtra1] = playerid;
	Player[playerid][Bomb] = sql;
	SendClientMessage(playerid, -1, "You have successfully planted a bomb in the vehicle.");
	return 1;
}

CMD:disarmbomb(playerid)
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 2)
		return 1;

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "You must be in a vehicle to do this.");

	new vehicleid = GetPlayerVehicleID(playerid), sql = GetVSQLID(vehicleid);
	if(sql == 0)
		return SendClientMessage(playerid, -1, "This is not a saved vehicle.");

	if(!IsVehicleArmed(sql))
		return SendClientMessage(playerid, -1, "There are no bombs planted in this vehicle.");

	new idx = GFetVIndex(sql);
	Veh[idx][Bomb] = "None";
	Veh[idx][BombExtra1] = -1;
	SendClientMessage(playerid, -1, "You have successfully disarmed the bomb.");
	return 1;
}

CMD:detonatebomb(playerid)
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 2)
		return 1;

	if(Player[playerid][Bomb] == 0)
		return SendClientMessage(playerid, -1, "You have not placed a bomb.");

	new sql = Player[playerid][Bomb], idx = GetVIndex(sql);
	if(!IsSQLVehicleSpawned(sql))
		return SendClientMessage(playerid, -1, "The vehicle you plantd a bomb in is not currently spawned.");

	new Float:pos[3];
	GetVehiclePos(Veh[idx][Link], pos[0], pos[1], pos[2]);
	if(!IsPlayerInRangeOfPoint(playerid, 100.0, pos[0], pos[1], pos[2]))
		return SendClientMessage(playerid, -1, "You are too far away from the armed vehicle to detonate it.");

	Player[playerid][Bomb] = 0;
	foreach(Player, i)
	{
		if(!IsPlayerInRangeOfPoint(i, 25.0, pos[0], pos[1], pos[2]))
			continue;

		if(Player[playerid][PlayerToAssasinate] == i && Player[i][BeingAssasinated] == playerid)
		{
			SetPlayerHealth(i, -1);
			OnPlayerDeath(i, playerid, 51);
		}
	}
	CreateExplosion(pos[0], pos[1], pos[2], 7, 25.0);

	foreach(Player, i)
	{
		if(GetPlayerVehicleID(i) == Veh[idx][Link])
			SetPlayerHealth(i, -1);
	}
	SetTimerEx("SetVehicleToRespawnEx", 3000, false, "d", Veh[idx][Link]);
	SendClientMessage(playerid, -1, "You have successfully detonated the bomb.");
	return 1;
}*/

stock IsVehicleArmed(sqlid) //armed with bomb
{
	if(sqlid == 0)
		return 0;

	if(!IsSQLVehicleSpawned(sqlid))
		return 0;

	new idx = GetVIndex(sqlid);
	if(!strcmp(Veh[idx][Bomb, "None", true))
		return 0;

	return 1;
}

forward SetVehicleToRespawnEx(vehicleid);
public SetVehicleToRespawnEx(vehicleid) return SetVehicleToRespawn(vehicleid);

stock GetFirstName(playerid)
{
	new name[MAX_PLAYER_NAME];
	if(Player[playerid][Mask] == 1)
		format(name, sizeof(name), "%s", Player[playerid][NormalName]);
	else
		GetPlayerName(playerid, name, MAX_PLAYER_NAME);
	new underscore = strfind(name, "_");
	name[underscore] = '\0';
	return name;
}

/* new FishTypes[][] = { "Bass", "Cod", "Salmon", "Mackerel", "Tuna", "Carp", "Herring", "Marlin", "Mako Shark", "King Crab", "Kraken" };
new KrakenCatch[MAX_PLAYERS];

stock CatchRandomFish(playerid)
{
	new level = (Player[playerid][TotalFished] / 100 < 10) ? (Player[playerid][TotalFished] / 100) : (10);
	new rand = random(sizeof(FishTypes)), rodsnap_chance = random(level * 10 + 100);
	if(rodsnap_chance == 0 || rodsnap_chance == 1)
		return -1;
	if(rand > level)
		return CatchRandomFish(playerid);
	if(rand == 10 && KrakenCatch[playerid] < 2)
		return KrakenCatch[playerid]++, CatchRandomFish(playerid);
	return rand, KrakenCatch[playerid] = 0;
}

CMD:fishtest(playerid, params[])
{
	new fish = CatchRandomFish(playerid), string[128];
	if(fish >= 0)
	{
		format(string, sizeof(string), "You caught a %s!", FishTypes[fish]);
		SendClientMessage(playerid, -1, string);
		format(string, sizeof(string), "* %s has cast out their rod and reeled it back in, catching a %s.", GetNameEx(playerid), FishTypes[fish]);
		NearByMessage(playerid, NICESKY, string);
	}
	else
	{
		SendClientMessage(playerid, -1, "You broke your rod!");
		format(string, sizeof(string), "* %s has cast out their rod and it broke!", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);
	}

	if(!strcmp(FishTypes[fish], "Kraken", true))
	{
		new name[128];
		strcpy(name, GetFirstName(playerid), sizeof(name));
		switch(random(3))
		{
			case 0:
			{
				format(string, sizeof(string), "* The Kraken managed to break %s%s rod! ((%s))", GetFirstName(playerid), (name[strlen(name)] == 's') ? ("'") : ("'s"), GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, string);
				return Player[playerid][FishingRod]--;
			}
			case 1:
			{
				format(string, sizeof(string), "* The Kraken managed to attack %s and kill them! ((%s))", GetFirstName(playerid), GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, string);
				Player[playerid][FishingRod]--;
				return SetPlayerHealth(playerid, -1);
			}
		}
	}

	switch(fish)
	{
		case -1: Player[playerid][FishingRod]--;
		case 0: Player[playerid][TotalBass]++;
		case 1: Player[playerid][TotalCod]++;
		case 2: Player[playerid][TotalSalmon]++;
		case 3: Player[playerid][TotalMackerel]++;
		case 4: Player[playerid][TotalTuna]++;
		case 5: Player[playerid][TotalCarp]++;
		case 6: Player[playerid][TotalHerring]++;
		case 7: Player[playerid][TotalMarlin]++;
		case 8: Player[playerid][TotalMako]++;
		case 9: Player[playerid][TotalCrab]++;
		case 10: Player[playerid][TotalKraken]++;
	}
	return 1;
}*/

CMD:liststashes(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new string[1024], inside[64], value;
	for(new i; i < MAX_STASH; i++)
	{
		switch(GlobalStash[i][StoredItem])
		{
			case STASH_MONEY: inside = "Money", value = GlobalStash[i][ItemAmount];
			case STASH_WEAPON: inside = "Weapon", value = GlobalStash[i][ItemAmount];
			case STASH_MATSLOW: inside = "Street Mats", value = GlobalStash[i][ItemAmount];
			case STASH_MATSMID: inside = "Standard Mats", value = GlobalStash[i][ItemAmount];
			case STASH_MATSHIGH: inside = "Military Mats", value = GlobalStash[i][ItemAmount];
			case STASH_POT: inside = "Pot", value = GlobalStash[i][ItemAmount];
			case STASH_COCAINE: inside = "Cocaine", value = GlobalStash[i][ItemAmount];
			case STASH_SPEED: inside = "Speed", value = GlobalStash[i][ItemAmount];
			case STASH_PHONE: inside = "Phone", value = GlobalStash[i][ItemAmount];
			case STASH_ARMOUR_POOR: inside = "Poor Kevlar", value = 1;
			case STASH_ARMOUR_STANDARD: inside = "Standard Kevlar", value = 1;
			case STASH_ARMOUR_MILITARY: inside = "Military Kevlar", value = 1;
			case STASH_BOMB: inside = "Bomb", value = 1;
		}

		if(GlobalStash[i][Object] > 0)
			format(string, sizeof(string), "%s%d) %s (%s) - %s - %d\n", string, i, inside,
			(GlobalStash[i][StoredItem] != STASH_WEAPON) ? ((GlobalStash[i][StoredItem] == STASH_MONEY) ? (PrettyMoney(value)) : (IntToFormattedStr(value))) : (weapons[value]), GlobalStash[i][PlacedBy], GlobalStash[i][Code]);
	}
	if(strlen(string) < 1)
		return SendClientMessage(playerid, -1, "There are no active stashes to list.");

	ShowPlayerDialog(playerid, 5277, DIALOG_STYLE_LIST, "List of current stashes", string, "Go to", "Close");
	return 1;
}

CMD:checkstash(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new stashid;

	if(isnull(params) || !IsNumeric(params))
		stashid = GetClosestStash(playerid);
	else
		stashid = strval(params);

	if(stashid == -1)
		return SendClientMessage(playerid, GREY, "SYNTAX: /checkstash [stashid]");

	if(GlobalStash[stashid][Object] == 0)
		return SendClientMessage(playerid, -1, "There is no stash with that id.");

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, GlobalStash[stashid][StashX], GlobalStash[stashid][StashY], GlobalStash[stashid][StashZ]) && isnull(params))
		return SendClientMessage(playerid, -1, "You are not near an active stash.");

	new string[128], contains[128];
	switch(GlobalStash[stashid][StoredItem])
	{
		case STASH_MONEY: format(contains, sizeof(contains), "%s cash", PrettyMoney(GlobalStash[stashid][ItemAmount]));
		case STASH_WEAPON: format(contains, sizeof(contains), "a %s", weapons[GlobalStash[stashid][ItemAmount]]);
		case STASH_MATSLOW: format(contains, sizeof(contains), "%s street mats", IntToFormattedStr(GlobalStash[stashid][ItemAmount]));
		case STASH_MATSMID: format(contains, sizeof(contains), "%s standard mats", IntToFormattedStr(GlobalStash[stashid][ItemAmount]));
		case STASH_MATSHIGH: format(contains, sizeof(contains), "%s military mats", IntToFormattedStr(GlobalStash[stashid][ItemAmount]));
		case STASH_POT: format(contains, sizeof(contains), "%s pot", IntToFormattedStr(GlobalStash[stashid][ItemAmount]));
		case STASH_COCAINE: format(contains, sizeof(contains), "%s cocaine", IntToFormattedStr(GlobalStash[stashid][ItemAmount]));
		case STASH_SPEED: format(contains, sizeof(contains), "%s speed", IntToFormattedStr(GlobalStash[stashid][ItemAmount]));
		case STASH_PHONE: format(contains, sizeof(contains), "%s phone", IntToFormattedStr(GlobalStash[stashid][ItemAmount]));
		case STASH_ARMOUR_POOR: format(contains, sizeof(contains), "%s poor kevlar", IntToFormattedStr(GlobalStash[stashid][ItemAmount]));
		case STASH_ARMOUR_STANDARD: format(contains, sizeof(contains), "%s standard kevlar", IntToFormattedStr(GlobalStash[stashid][ItemAmount]));
		case STASH_ARMOUR_MILITARY: format(contains, sizeof(contains), "%s military kevlar", IntToFormattedStr(GlobalStash[stashid][ItemAmount]));
	}

	format(string, sizeof(string), "Stash %d was placed by %s and it contains %s. The code is %d.", stashid, GlobalStash[stashid][PlacedBy], contains, GlobalStash[stashid][Code]);
	return SendClientMessage(playerid, -1, string);
}

CMD:deletestash(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 3)
		return 1;

	new stash = strval(params);
	if(isnull(params) || !IsNumeric(params) || stash < 0 || stash > MAX_STASH)
		return SendClientMessage(playerid, GREY, "SYNTAX: /deletestash [stashid]");

	if(GlobalStash[stash][Object] == 0)
		return SendClientMessage(playerid, -1, "That stash is not active.");

	new string[128];
	format(string, sizeof(string), "%s has deleted stash %d!", GetName(playerid), stash);
	SendToAdmins(ADMINORANGE, string, 0);
	format(string, sizeof(string), "You have deleted stash %d which was placed by %s.", stash, GlobalStash[stash][PlacedBy]);
	SendClientMessage(playerid, -1, string);
	ResetStashBag(stash, .delete_phone = 1);
	return 1;
}

CMD:gotopayphone(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new id = strval(params);
	if(isnull(params) || !IsNumeric(params) || id < 0 || id > MAX_PAYPHONES-1)
		return SendClientMessage(playerid, GREY, "SYNTAX: /gotopayphone [payphone]");

	SetPlayerPos_Update(playerid, Payphones[id][0], Payphones[id][1], Payphones[id][2] + 5);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);

	new string[128];
	format(string, sizeof(string), "You have teleported to payphone %d.", id);
	SendClientMessage(playerid, -1, string);
	return 1;
}

CMD:remoteavoid(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new name[25], reason[128];
	if(sscanf(params, "s[25]s[128]", name, reason))
		return SendClientMessage(playerid, -1, "SYNTAX: /remoteavoid [player name] [reason]");

	if(GetPlayerID(name) != INVALID_PLAYER_ID)
		return cmd_avoid(playerid, params);

	new string[128];

	if(!IsPlayerRegistered(name))
		return SendClientMessage(playerid, WHITE, "That player doesn't exist.");

	if(GetRemoteAdminLevel(name) > Player[playerid][AdminLevel])
		return SendClientMessage(playerid, -1, "You can't do this to a higher level administrator.");

	format(string, sizeof(string), "%s 25 %s", name, reason);
	cmd_remoteprison(playerid, string);

	new fine_amount = (GetRemoteIntValue(name, "Money") + GetRemoteIntValue(name, "BankMoney") + GetRemoteIntValue(name, "CheckBalance")) / 10;
	if(fine_amount < 1000)
		fine_amount = 1000;
	format(string, sizeof(string), "%s %d %s", name, fine_amount, reason);
	cmd_remotefine(playerid, string);

	format(string, sizeof(string), "%s %s", name, reason);
	cmd_remotewarn(playerid, string);

	new query[384];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE playeraccounts SET Materials = '0', Materials1 = '0', Materials2 = '0', Cocaine = '0', Pot = '0', Speed = '0', Rope = '0', Rags = '0', EngineParts = '0', FishingBait = '0', FishingRod = '0', NosBottle = '0', HydroKit = '0', Workbench = '0', Toolkit = '0' WHERE NormalName = '%e'", name);
	mysql_tquery(MYSQL_MAIN, query, "OnQueryFinish", "dddss", THREAD_REMOTE_AVOID, playerid, 0, name, reason);
	return 1;
}

CMD:avoid(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new id, reason[128];
	if(sscanf(params, "us[128]", id, reason))
		return SendClientMessage(playerid, GREY, "SYNTAX: /avoid [playerid] [reason]");

	if(id == INVALID_PLAYER_ID)
		return SendClientMessage(playerid, -1, "That player is not connected.");

	if(Player[id][AdminLevel] > Player[playerid][AdminLevel])
		return SendClientMessage(playerid, -1, "You can't do this to a higher level administrator.");

	new string[128];

	format(string, sizeof(string), "%d 25 %s", id, reason);
	cmd_prison(playerid, string);

	new fine_amount = (Player[id][Money] + Player[id][BankMoney] + Player[id][CheckBalance]) / 10;
	if(fine_amount < 1000)
		fine_amount = 1000;
	format(string, sizeof(string), "%d %d %s", id, fine_amount, reason);
	cmd_fine(playerid, string);

	format(string, sizeof(string), "%d %s", id, reason);
	cmd_warn(playerid, string);

	Player[playerid][Materials][0] = 0;
	Player[playerid][Materials][1] = 0;
	Player[playerid][Materials][2] = 0;
	Player[playerid][Cocaine] = 0;
	Player[playerid][Pot] = 0;
	Player[playerid][Rope] = 0;
	Player[playerid][Rags] = 0;
	Player[playerid][EngineParts] = 0;
	Player[playerid][FishingBait] = 0;
	Player[playerid][FishingRod] = 0;
	Player[playerid][NosBottle] = 0;
	Player[playerid][HydroKit] = 0;
	Player[playerid][Workbench] = 0;
	Player[playerid][Toolkit] = 0;
	format(string, sizeof(string), "You have warned, fined and prisoned %s for \"%s\". Their inventory has had their essentials removed.", GetName(id), reason);
	SendClientMessage(playerid, -1, string);
	return 1;
}

CMD:removeplayer(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 1)
		return SendClientMessage(playerid, -1, "You must be in the LSPD to use this.");

	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "You can not do this when you're in a vehicle.");

	new Float:x, Float:y, Float:z;
	GetVehiclePos(Player[playerid][LastCarID], x, y, z);
	if(!IsPlayerInRangeOfPoint(playerid, 2, x, y, z))
		return SendClientMessage(playerid, -1, "You must be near the last vehicle your were in.");

	new seatid = strval(params);
	if(seatid < 1 || seatid > 3 || isnull(params) || !IsNumeric(params))
		return SendClientMessage(playerid, GREY, "SYNTAX: /removeplayer [seatid (1 - 3)]");

	foreach(Player, i)
	{
		if(IsPlayerInVehicle(i, Player[playerid][LastCarID]) && GetPlayerVehicleSeat(i) == seatid)
		{
			new string[128];
			RemovePlayerFromVehicle(i);
			format(string, sizeof(string), "* %s opens the vehicles door and pulls out %s.", GetNameEx(playerid), GetNameEx(i));
			NearByMessage(playerid, NICESKY, string);
			return 1;
		}
	}
	return 1;
}

CMD:lockserver(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 5)
		return 1;

	if(isnull(params) || strlen(params) > 127)
		return SendClientMessage(playerid, GREY, "SYNTAX: /lockserver [password]");

	new string[128];
	format(string, sizeof(string), "password %s", params);
	SendRconCommand(string);
	format(string, sizeof(string), "%s has locked the server.", GetName(playerid));
	SendToAdmins(ADMINORANGE, string, 0);
	return 1;
}

CMD:unlockserver(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 5)
		return 1;

	new string[128];
	SendRconCommand("password 0");
	format(string, sizeof(string), "%s has unlocked the server.", GetName(playerid));
	SendToAdmins(ADMINORANGE, string, 0);
	return 1;
}

forward SetPlayerPos_Update(playerid, Float:x, Float:y, Float:z);
public SetPlayerPos_Update(playerid, Float:x, Float:y, Float:z)
{
	new Float:lPos[3];
	GetPlayerPos(playerid, lPos[0], lPos[1], lPos[2]);
	Streamer_UpdateEx(playerid, x, y, z);
	GameTextForPlayer(playerid, "Loading objects...", 3000, 6);
	//FreezePlayer(playerid, 2000);
	SetPlayerPos(playerid, x, y, z);

	if(floatround(floatsqroot(((x - lPos[0]) * (x - lPos[0])) + ((y - lPos[1]) * (y - lPos[1])) + ((z - lPos[2]) * (z - lPos[2])))) > 50 && GetPlayerToggle(playerid, TOGGLE_INT_FREEZE) == false && !Player[playerid][AdminDuty])
	{
		FreezePlayer(playerid, 2000);
		GameTextForPlayer(playerid, "Loading objects...", 3000, 6);
	}

	UpdatePlayerToys(playerid);
	return 1;
}

CMD:unmuteall(playerid)
{
	if(Player[playerid][AdminLevel] < 5)
		return 1;

	foreach(Player, i)
	{
		Player[i][Muted] = 0;
	}
	SendClientMessage(playerid, -1, "You have unmuted all connected players.");
	return 1;
}

CMD:muteall(playerid)
{
	if(Player[playerid][AdminLevel] < 5)
		return 1;

	foreach(Player, i)
	{
		if(Player[i][AdminLevel] < 1)
			Player[i][Muted] = 1;
	}
	SendClientMessage(playerid, -1, "You have muted all connected players (excluding admins).");
	return 1;
}

stock IsPlayerInEvent(playerid)
{
	if(Player[playerid][IsAtEvent] > 0 || Player[playerid][InRally] > 0 || Player[playerid][InDerby] > 0) return 1;
	return 0;
}

CMD:specveh(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(isnull(params) || !IsNumeric(params))
		return SendClientMessage(playerid, GREY, "SYNTAX: /specveh [sqlid]");

	new sql = strval(params);
	if(!IsSQLVehicleSpawned(sql))
		return SendClientMessage(playerid, -1, "The vehicle with that SQLID is not spawned.");

	new idx = GetVIndex(sql), vehicleid = Veh[idx][Link];

	if(Spectator[playerid][SpecSpectatingPlayer] == -1 && Spectator[playerid][SpecSpectatingVehicle] == -1)
	{
		GetPlayerPos(playerid, Spectator[playerid][SpecPlayerX], Spectator[playerid][SpecPlayerY], Spectator[playerid][SpecPlayerZ]);
		GetPlayerFacingAngle(playerid, Spectator[playerid][SpecPlayerAngle]);
		Spectator[playerid][SpecPlayerWorld] = GetPlayerVirtualWorld(playerid);
		Spectator[playerid][SpecPlayerInterior] = GetPlayerInterior(playerid);
	}

	TogglePlayerSpectating(playerid, true);
	PlayerSpectateVehicle(playerid, vehicleid);
	Spectator[playerid][SpecSpectatingVehicle] = sql;
	SetPlayerToggle(playerid,  TOGGLE_WALKIE, true);

	new string[128];
	format(string, sizeof(string), "You are now spectating vehicle SQL %d.", sql);
	SendClientMessage(playerid, -1, string);

	format(string, sizeof(string), "%s has started spectating vehicle SQL %d.", Player[playerid][AdminName], sql);
	AdminActionsLog(string);
	return 1;
}

CMD:searchnumber(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(isnull(params) || !IsNumeric(params))
		return SendClientMessage(playerid, GREY, "SYNTAX: /searchnumber [number]");

	new number = strval(params), string[128];

	format(string, sizeof(string), "Searching for number \"%d\".", number);
	SendClientMessage(playerid, -1, string);

	mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT * FROM phones WHERE number = '%d'", number);
	new Cache:cache = mysql_query(MYSQL_MAIN, string), count = cache_get_row_count(), idx;

	new owner[25];
	while(idx < count)
	{
		cache_set_active(cache);
		cache_get_field_content(idx, "owner", owner);

		format(string, sizeof(string), "%s has that number (%s)", owner, (GetPlayerIDEx(owner) == INVALID_PLAYER_ID) ? ("offline") : ("online"));
		SendClientMessage(playerid, WHITE, string);

		idx++;
	}

	cache_delete(cache);

	if(count == 0)
		SendClientMessage(playerid, -1, "Nobody has that number.");
	return 1;
}

stock GetWeaponModelID(weaponid)
{
	switch(weaponid)
	{
		case 1: return 331;
		case 2 .. 8: return 331 + weaponid;
		case 9: return 341;
		case 10 .. 15: return 311 + weaponid;
		case 16 .. 18: return 326 + weaponid;
		case 22 .. 29: return 324 + weaponid;
		case 30: return 355;
		case 31: return 356;
		case 32: return 372;
		case 33 .. 45: return 324 + weaponid;
		case 46: return 371;
		default: return -1;
	}
	return -1;
}

stock GetEmptySlotAttachment(playerid)
{
	new slot = -1;
	for(new i; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
	{
		if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
		{
			slot = i;
			break;
		}
	}
	return slot;
}

stock OnPlayerChangeWeapon(playerid, oldweapon, newweapon)
{
	if(newweapon != 0)
		DetachWeaponFromPlayer(playerid, newweapon);

	new slot = GetWeaponType(oldweapon);
	switch(slot)
	{
		case 0: if(Player[playerid][WepSlot0] != oldweapon) return 1;
		case 1: if(Player[playerid][WepSlot1] != oldweapon) return 1;
		case 2: if(Player[playerid][WepSlot2] != oldweapon) return 1;
		case 3: if(Player[playerid][WepSlot3] != oldweapon) return 1;
		case 4: if(Player[playerid][WepSlot4] != oldweapon) return 1;
		case 5: if(Player[playerid][WepSlot5] != oldweapon) return 1;
		case 6: if(Player[playerid][WepSlot6] != oldweapon) return 1;
		case 7: if(Player[playerid][WepSlot7] != oldweapon) return 1;
		case 8: if(Player[playerid][WepSlot8] != oldweapon) return 1;
		case 9: if(Player[playerid][WepSlot9] != oldweapon) return 1;
		case 10: if(Player[playerid][WepSlot10] != oldweapon) return 1;
		case 11: if(Player[playerid][WepSlot11] != oldweapon) return 1;
	}

	AttachWeaponToPlayer(playerid, oldweapon);

	UpdatePlayerToys(playerid);
	return 1;
}

stock AttachWeaponToPlayer(playerid, weaponid)
{
	if(weaponid == 0) return 1;

	new wepslot = GetWeaponType(weaponid);
	new slot = GetEmptySlotAttachment(playerid);
	new object = GetWeaponModelID(weaponid);

	if(slot == -1) //This should give weapons priority over toys
	{
		for(new i; i < GetHighestToySlot(playerid) + 1; i++)
		{
			if(PlayerToys[playerid][ToyIndex][i] != -1)
			{
				slot = PlayerToys[playerid][ToyIndex][i];
				RemovePlayerAttachedObject(playerid, PlayerToys[playerid][ToyIndex][i]);
				PlayerToys[playerid][ToyIndex][i] = -1;
				break;
			}
		}
	}

	if(slot == -1)
		return 1;

	switch(wepslot)
	{
		case 0: if(Player[playerid][HolsteredWeapon][slot] > 0) DetachWeaponFromPlayer(playerid, Player[playerid][HolsteredWeapon][slot]);
		case 1: if(Player[playerid][HolsteredWeapon][slot] > 0) DetachWeaponFromPlayer(playerid, Player[playerid][HolsteredWeapon][slot]);
		case 2: if(Player[playerid][HolsteredWeapon][slot] > 0) DetachWeaponFromPlayer(playerid, Player[playerid][HolsteredWeapon][slot]);
		case 3: if(Player[playerid][HolsteredWeapon][slot] > 0) DetachWeaponFromPlayer(playerid, Player[playerid][HolsteredWeapon][slot]);
		case 4: if(Player[playerid][HolsteredWeapon][slot] > 0) DetachWeaponFromPlayer(playerid, Player[playerid][HolsteredWeapon][slot]);
		case 5: if(Player[playerid][HolsteredWeapon][slot] > 0) DetachWeaponFromPlayer(playerid, Player[playerid][HolsteredWeapon][slot]);
		case 6: if(Player[playerid][HolsteredWeapon][slot] > 0) DetachWeaponFromPlayer(playerid, Player[playerid][HolsteredWeapon][slot]);
		case 7: if(Player[playerid][HolsteredWeapon][slot] > 0) DetachWeaponFromPlayer(playerid, Player[playerid][HolsteredWeapon][slot]);
		case 8: if(Player[playerid][HolsteredWeapon][slot] > 0) DetachWeaponFromPlayer(playerid, Player[playerid][HolsteredWeapon][slot]);
		case 9: if(Player[playerid][HolsteredWeapon][slot] > 0) DetachWeaponFromPlayer(playerid, Player[playerid][HolsteredWeapon][slot]);
		case 10: if(Player[playerid][HolsteredWeapon][slot] > 0) DetachWeaponFromPlayer(playerid, Player[playerid][HolsteredWeapon][slot]);
		case 11: if(Player[playerid][HolsteredWeapon][slot] > 0) DetachWeaponFromPlayer(playerid, Player[playerid][HolsteredWeapon][slot]);
	}

	if(wepslot == 0)
	{
		Player[playerid][HolsteredWeapon][slot] = weaponid;
		SetPlayerAttachedObject(playerid, slot, object, 6);
	}
	else if(weaponid >= 5 && weaponid <= 8)
	{
		Player[playerid][HolsteredWeapon][slot] = weaponid;
		SetPlayerAttachedObject(playerid, slot, object, 1, 0.3, -0.18, 0.1, 0.00, 245, 90);
	}
	else if(wepslot == 1)
	{
		if(weaponid != 4 && weaponid != 9)
		{
			Player[playerid][HolsteredWeapon][slot] = weaponid;
			SetPlayerAttachedObject(playerid, slot, object, 8, (weaponid == 3) ? (0.01) : (0.00), 0.07, 0.13, 0.00, 90, -90);
		}
	}
	else if(wepslot == 2 && Player[playerid][HideWeapons] == 0)
	{
		Player[playerid][HolsteredWeapon][slot] = weaponid;
		SetPlayerAttachedObject(playerid, slot, object, 8, 0.00, -0.06, 0.12, -90, 0.00, -10.00);
	}
	else if(weaponid == 15 || weaponid == 18)
	{
		Player[playerid][HolsteredWeapon][slot] = weaponid;
		SetPlayerAttachedObject(playerid, slot, object, 8, 0.00, 0.07, 0.13, 0.00, 90, -90);
	}
	else if(wepslot == 3)
	{
		if(weaponid != 26  || (weaponid == 26 && Player[playerid][HideWeapons] == 0))
		{
			Player[playerid][HolsteredWeapon][slot] = weaponid;
			if(Player[playerid][EditedWeapon][0] == 1 && Groups[Player[playerid][Group]][CommandTypes] == 1)
				SetPlayerAttachedObject(playerid, slot, object, 1, Player[playerid][Wep3Pos][0], Player[playerid][Wep3Pos][1], Player[playerid][Wep3Pos][2], Player[playerid][Wep3Pos][3], Player[playerid][Wep3Pos][4], Player[playerid][Wep3Pos][5]);
			else
				SetPlayerAttachedObject(playerid, slot, object, 1, -0.12, -0.17, 0.00, 0.00, 43, 4.7);
		}
	}
	else if(wepslot == 4)
	{
		if(weaponid == 29)
		{
			Player[playerid][HolsteredWeapon][slot] = weaponid;
			SetPlayerAttachedObject(playerid, slot, object, 7, 0.00, -0.1, -0.07, -90, 0.00, 10.00);
		}
		else if(Player[playerid][HideWeapons] == 0)
		{
			Player[playerid][HolsteredWeapon][slot] = weaponid;
			SetPlayerAttachedObject(playerid, slot, object, 7, 0.00, -0.1, -0.07, -90, 0.00, 10.00);
		}
	}
	else if(wepslot == 5)
	{
		Player[playerid][HolsteredWeapon][slot] = weaponid;
		if(Player[playerid][EditedWeapon][1] == 1 && Groups[Player[playerid][Group]][CommandTypes] == 1)
			SetPlayerAttachedObject(playerid, slot, object, 1, Player[playerid][Wep5Pos][0], Player[playerid][Wep5Pos][1], Player[playerid][Wep5Pos][2], Player[playerid][Wep5Pos][3], Player[playerid][Wep5Pos][4], Player[playerid][Wep5Pos][5]);
		else
			SetPlayerAttachedObject(playerid, slot, object, 1, 0.00, -0.15, -0.14, 0.00, -29.9, 0.00);
	}
	else if(wepslot == 6)
	{
		Player[playerid][HolsteredWeapon][slot] = weaponid;
		if(Player[playerid][EditedWeapon][2] == 1 && Groups[Player[playerid][Group]][CommandTypes] == 1)
				SetPlayerAttachedObject(playerid, slot, object, 1, Player[playerid][Wep6Pos][0], Player[playerid][Wep6Pos][1], Player[playerid][Wep6Pos][2], Player[playerid][Wep6Pos][3], Player[playerid][Wep6Pos][4], Player[playerid][Wep6Pos][5]);
		else
			SetPlayerAttachedObject(playerid, slot, object, 1, 0.00, -0.15, 0.00, 0.00, 43, 2.3);
	}
	else if(weaponid == 46)
	{
		Player[playerid][HolsteredWeapon][slot] = weaponid;
		SetPlayerAttachedObject(playerid, slot, object, 1, 0.09, -0.14, 0.00, 0.00, 90, 0.00);
	}
	else if(weaponid == 41)
	{
		Player[playerid][HolsteredWeapon][slot] = weaponid;
		SetPlayerAttachedObject(playerid, slot, object, 8, 0.01, 00.15, -0.09, 0.00, -105, 0.00);
	}
	return 1;
}

stock DetachWeaponFromPlayer(playerid, weaponid)
{
	for(new i; i < 10; i++)
	{
		if(Player[playerid][HolsteredWeapon][i] == weaponid)
		{
			RemovePlayerAttachedObject(playerid, i);
			Player[playerid][HolsteredWeapon][i] = 0;
		}
	}
	return 1;
}

stock FreezePlayer(playerid, ms)
{
	TogglePlayerControllable(playerid, 0);
	SetTimerEx("FreezePlayerTimer", ms, false, "d", playerid);
	return 1;
}

forward FreezePlayerTimer(playerid);
public FreezePlayerTimer(playerid)
{
	return TogglePlayerControllable(playerid, 1);
}

CMD:remoteresetwarn(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 3)
		return 1;

	new name[25], slot;
	if(sscanf(params, "s[25]d", name, slot))
		return SendClientMessage(playerid, -1, "SYNTAX: /remoteresetwarn [name] [slot]");

	if(IsPlayerConnectedEx(GetPlayerIDEx(name))) return cmd_resetwarns(playerid, params);

	if(!IsPlayerRegistered(name))
		return SendClientMessage(playerid, WHITE, "That player doesn't exist.");

	new query[384];
	switch(slot)
	{
		case 1:
		{
			if(strcmp(GetRemoteStringValue(name, "Warning1"), "None", true))
			{
				mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE playeraccounts SET Warning1 = '%e', Warning2 = '%e', Warning3 = 'None' WHERE NormalName = '%e'", GetRemoteStringValue(name, "Warning2"), GetRemoteStringValue(name, "Warning3"), name);
				mysql_tquery(MYSQL_MAIN, query, "OnQueryFinish", "dddss", THREAD_REMOTE_RESET_WARN, playerid, slot, name, "");
			}
			else return SendClientMessage(playerid, -1, "That player doesn't have a warning in slot 1!");
		}
		case 2:
		{
			if(strcmp(GetRemoteStringValue(name, "Warning2"), "None", true))
			{
				mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE playeraccounts SET Warning2 = '%e', Warning3 = 'None' WHERE NormalName = '%e'", GetRemoteStringValue(name, "Warning3"), name);
				mysql_tquery(MYSQL_MAIN, query, "OnQueryFinish", "dddss", THREAD_REMOTE_RESET_WARN, playerid, slot, name, "");
			}
			else return SendClientMessage(playerid, -1, "That player doesn't have a warning in slot 2!");
		}
		default: return SendClientMessage(playerid, -1, "Invalid warn slot! (1-2)");
	}
	return 1;
}

CMD:remoteresetwarns(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 3)
		return 1;

	new name[25], string[255];
	if(sscanf(params, "s[25]", name)) return SendClientMessage(playerid, GREY, "SYNTAX: /remoteresetwarns [name]");

	if(IsPlayerConnectedEx(GetPlayerIDEx(name))) return cmd_resetwarns(playerid, params);

	if(!IsPlayerRegistered(name))
		return SendClientMessage(playerid, WHITE, "That player doesn't exist.");

	mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE playeraccounts SET Warning1 = 'None', Warning2 = 'None', Warning3 = 'None' WHERE NormalName = '%e'", name);
	mysql_tquery(MYSQL_MAIN, string, "OnQueryFinish", "dddss", THREAD_REMOTE_RESET_WARNS, playerid, 0, name, "");
	return 1;
}

CMD:edithouse(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 5)
		return 1;

	new hid, string[900];
	if(sscanf(params, "d", hid))
		return SendClientMessage(playerid, -1, "SYNTAX: /edithouse [id]");

	if(!DoesHouseExist(hid))
		return SendClientMessage(playerid, -1, "Invalid house ID");

	SetPVarInt(playerid, "hID", hid);
	format(string, sizeof(string), "{FFFFFF}House Owner:  %s\nHouse Price:  %d\nLockstatus:  %s\n{FFFFFF}Beers:  %s\nKeypad: {33A10B} %s{FFFFFF}\nRadio Installed:  %s{FFFFFF}\n", Houses[hid][hOwner], Houses[hid][HousePrice], (Houses[hid][LockStatus] == 0) ? ("{FF0000}Unlocked") : ("{33A10B}Locked"), IntToFormattedStr(Houses[hid][hBeers]),\
	(Houses[hid][Keypad] == 0) ? ("{FF0000}None") : (IntToFormattedStr(Houses[hid][Keypad])), (Houses[hid][RadioInstalled] == 0) ? ("{FF0000}No") : ("{33A10B}Yes"));
	format(string, sizeof(string), "%sWorkbench:  %s{FFFFFF}\nKey Holder 1:  %s\nKey Holder 2:  %s\nEdit House Storage\nStorage Size:	%d\nHouse Type: %s", string,  (Houses[hid][Workbench] == 0) ? ("{FF0000}No") : ("{33A10B}Yes"), Houses[hid][KeyHolder1], Houses[hid][KeyHolder2], Houses[hid][HouseStorageSize], (Houses[hid][HouseType] == 0) ? ("Normal") : ("Apartment"));
	ShowPlayerDialog(playerid, HOUSE_MAIN, DIALOG_STYLE_LIST, "Edit House", string, "Select", "Cancel");
	return 1;
}

stock SendMessageToSpectators(playerid, colour, message[])
{
	foreach(Player, i)
	{
		if(Spectator[i][SpecSpectatingPlayer] == playerid)
			SendClientMessage(i, colour, message);
	}
	return 1;
}

CMD:agententergarage(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 5, AgencyGarageEntranceX, AgencyGarageEntranceY, AgencyGarageEntranceZ))
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 2)
		{
 			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 			{
				SetVehiclePos(GetPlayerVehicleID(playerid), AgencyGarageExitX, AgencyGarageExitY, AgencyGarageExitZ);
				SetVehicleZAngle(GetPlayerVehicleID(playerid), 270.00);
			}
			else
			{
				SetPlayerPos_Update(playerid, AgencyGarageExitX, AgencyGarageExitY, AgencyGarageExitZ);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
			}
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5, AgencyHQGarageEntranceX, AgencyHQGarageEntranceY, AgencyHQGarageEntranceZ))
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 2)
		{
			if(GetPlayerInterior(playerid) == AgencyHQGarageEntranceInt)
			{
				Player[playerid][InGroupHQ] = 0;
				SetPlayerPos_Update(playerid, AgencyHQGarageExitX, AgencyHQGarageExitY, AgencyHQGarageExitZ);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
			}
		}
	}
	return 1;
}

CMD:agentexitgarage(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 5, AgencyGarageExitX, AgencyGarageExitY, AgencyGarageExitZ))
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 2)
		{
 			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 			{
				SetVehiclePos(GetPlayerVehicleID(playerid), AgencyGarageEntranceX, AgencyGarageEntranceY, AgencyGarageEntranceZ);
				SetVehicleZAngle(GetPlayerVehicleID(playerid), 270.00);
			}
			else
			{
				SetPlayerPos_Update(playerid, AgencyGarageEntranceX, AgencyGarageEntranceY, AgencyGarageEntranceZ);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
			}
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5, AgencyHQGarageExitX, AgencyHQGarageExitY, AgencyHQGarageExitZ))
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 2)
		{
			Player[playerid][InGroupHQ] = 4;
			SetPlayerPos_Update(playerid, AgencyHQGarageEntranceX, AgencyHQGarageEntranceY, AgencyHQGarageEntranceZ);
			SetPlayerInterior(playerid, AgencyHQGarageEntranceInt);
			SetPlayerVirtualWorld(playerid, 45004);
		}
	}
	return 1;
}

/*
CMD:entergarage(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 5, AgencyGarageEntranceX, AgencyGarageEntranceY, AgencyGarageEntranceZ))
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 2)
		{
 			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 			{
				SetVehiclePos(GetPlayerVehicleID(playerid), AgencyGarageExitX, AgencyGarageExitY, AgencyGarageExitZ);
				SetVehicleZAngle(GetPlayerVehicleID(playerid), 270.00);
			}
			else
			{
				SetPlayerPos_Update(playerid, AgencyGarageExitX, AgencyGarageExitY, AgencyGarageExitZ);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
			}
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5, AgencyHQGarageEntranceX, AgencyHQGarageEntranceY, AgencyHQGarageEntranceZ))
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 2)
		{
			if(GetPlayerInterior(playerid) == AgencyHQGarageEntranceInt)
			{
				Player[playerid][InGroupHQ] = 0;
				SetPlayerPos_Update(playerid, AgencyHQGarageExitX, AgencyHQGarageExitY, AgencyHQGarageExitZ);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
			}
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2813.6, 2000.1, 10.83))
	{
		if(B24GarageLock) return SendClientMessage(playerid, -1, "The garage door is closed and you cannot enter.");

		if(IsPlayerInAnyVehicle(playerid))
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			SetVehicleVirtualWorld(vehicleid, 65024);
			SetPlayerVirtualWorld(playerid, 65024);
			SetVehiclePos(vehicleid, 2797.7, 2011.2, -45.5);
			SetVehicleZAngle(vehicleid, 270.0);
			new sql = GetVSQLID(vehicleid), idx = GetVIndex(sql);
			if(sql > 0)
			{
				Veh[idx][vVWorld] = 65024;
			}
		}
		else
		{
			SetPlayerVirtualWorld(playerid, 65024);
			SetPlayerPos_Update(playerid, 2794.23, 2009.12, -45.64);
			SetPlayerFacingAngle(playerid, 270.0);
		}
		Player[playerid][InBusiness] = 24;
		SendClientMessage(playerid, -1, "Type /exitgarage to exit the garage.");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, -305.92, 1118.17, 19.75) && (PlayerHasHouseKey(playerid, 312) || (!isnull(params) && strval(params) == Houses[312][Keypad] && Houses[312][Keypad] > 0)))
	{
		if(IsPlayerInAnyVehicle(playerid)) //2525.0, -1673.881, 14.86 -
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			SetVehicleVirtualWorld(vehicleid, 55312);
			SetPlayerVirtualWorld(playerid, 55312);
			SetVehiclePos(vehicleid, 2525.0, -1673.881, 14.86);
			SetVehicleZAngle(vehicleid, 270.0);
			new sql = GetVSQLID(vehicleid), idx = GetVIndex(sql);
			if(sql > 0)
			{
				Veh[idx][vVWorld] = 55312;
			}
		}
		else
		{
			SetPlayerVirtualWorld(playerid, 55312);
			SetPlayerPos_Update(playerid, 2521.35, -1675.44, 14.84);
			SetPlayerFacingAngle(playerid, 270.0);
		}

		SendClientMessage(playerid, -1, "Type /exitgarage to exit the garage.");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 4.0, -25.96, 1117.58, 19.75) && (PlayerHasHouseKey(playerid, 119) || (!isnull(params) && strval(params) == Houses[119][Keypad] && Houses[119][Keypad] > 0)))
	{
		if(IsPlayerInAnyVehicle(playerid)) //2525.0, -1673.881, 14.86 -
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			SetVehicleVirtualWorld(vehicleid, 55119);
			SetPlayerVirtualWorld(playerid, 55119);
			SetVehiclePos(vehicleid, 2525.0, -1673.881, 14.86);
			SetVehicleZAngle(vehicleid, 270.0);
			new sql = GetVSQLID(vehicleid), idx = GetVIndex(sql);
			if(sql > 0)
			{
				Veh[idx][vVWorld] = 55119;
			}
		}
		else
		{
			SetPlayerVirtualWorld(playerid, 55119);
			SetPlayerPos_Update(playerid, 2521.35, -1675.44, 14.84);
			SetPlayerFacingAngle(playerid, 270.0);
		}

		SendClientMessage(playerid, -1, "Type /exitgarage to exit the garage.");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 4.0, 1847.3, 698.5, 11.1) && (PlayerHasHouseKey(playerid, 263) || (!isnull(params) && strval(params) == Houses[263][Keypad] && Houses[263][Keypad] > 0)))
	{
		if(IsPlayerInAnyVehicle(playerid)) //2525.0, -1673.881, 14.86 -
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			SetVehicleVirtualWorld(vehicleid, 55263);
			SetPlayerVirtualWorld(playerid, 55263);
			SetVehiclePos(vehicleid, 2525.0, -1673.881, 14.86);
			SetVehicleZAngle(vehicleid, 270.0);
			new sql = GetVSQLID(vehicleid), idx = GetVIndex(sql);
			if(sql > 0)
			{
				Veh[idx][vVWorld] = 55263;
			}
		}
		else
		{
			SetPlayerVirtualWorld(playerid, 55263);
			SetPlayerPos_Update(playerid, 2521.35, -1675.44, 14.84);
			SetPlayerFacingAngle(playerid, 270.0);
		}

		SendClientMessage(playerid, -1, "Type /exitgarage to exit the garage.");
	}
	return 1;
}

CMD:exitgarage(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 5, AgencyGarageExitX, AgencyGarageExitY, AgencyGarageExitZ))
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 2)
		{
 			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 			{
				SetVehiclePos(GetPlayerVehicleID(playerid), AgencyGarageEntranceX, AgencyGarageEntranceY, AgencyGarageEntranceZ);
				SetVehicleZAngle(GetPlayerVehicleID(playerid), 270.00);
			}
			else
			{
				SetPlayerPos_Update(playerid, AgencyGarageEntranceX, AgencyGarageEntranceY, AgencyGarageEntranceZ);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
			}
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5, AgencyHQGarageExitX, AgencyHQGarageExitY, AgencyHQGarageExitZ))
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 2)
		{
			Player[playerid][InGroupHQ] = 4;
			SetPlayerPos_Update(playerid, AgencyHQGarageEntranceX, AgencyHQGarageEntranceY, AgencyHQGarageEntranceZ);
			SetPlayerInterior(playerid, AgencyHQGarageEntranceInt);
			SetPlayerVirtualWorld(playerid, 45004);
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2797.7, 2011.2, -45.63))
	{
		if(B24GarageLock) return SendClientMessage(playerid, -1, "The garage door is closed and you cannot exit.");

		if(IsPlayerInAnyVehicle(playerid))
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			SetVehicleVirtualWorld(vehicleid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetVehiclePos(vehicleid, 2815.6, 2000.1, 11);
			SetVehicleZAngle(vehicleid, 90.0);
			new sql = GetVSQLID(vehicleid), idx = GetVIndex(sql);
			if(sql > 0)
			{
				Veh[idx][vVWorld] = 0;
			}
		}
		else
		{
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos_Update(playerid, 2813.6, 2000.1, 11);
			SetPlayerFacingAngle(playerid, 90.0);
		}
		Player[playerid][InBusiness] = 0;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 6.0, 2525.0, -1673.881, 14.86) && GetPlayerVirtualWorld(playerid) == 55312)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			SetVehicleVirtualWorld(vehicleid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetVehiclePos(vehicleid, -305.92, 1118.17, 19.75);
			SetVehicleZAngle(vehicleid, 0.00);
			new sql = GetVSQLID(vehicleid), idx = GetVIndex(sql);
			if(sql > 0)
			{
				Veh[idx][vVWorld] = 0;
			}
		}
		else
		{
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos_Update(playerid, -305.92, 1118.17, 19.75);
			SetPlayerFacingAngle(playerid, 0.00);
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 6.0, 2525.0, -1673.881, 14.86) && GetPlayerVirtualWorld(playerid) == 55119)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			SetVehicleVirtualWorld(vehicleid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetVehiclePos(vehicleid, -25.96, 1117.58, 19.75);
			SetVehicleZAngle(vehicleid, 0.00);
			new sql = GetVSQLID(vehicleid), idx = GetVIndex(sql);
			if(sql > 0)
			{
				Veh[idx][vVWorld] = 0;
			}
		}
		else
		{
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos_Update(playerid, -25.96, 1117.58, 19.75);
			SetPlayerFacingAngle(playerid, 0.00);
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 6.0, 2525.0, -1673.881, 14.86) && GetPlayerVirtualWorld(playerid) == 55263)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			SetVehicleVirtualWorld(vehicleid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetVehiclePos(vehicleid, 1847.3, 698.5, 11.1);
			SetVehicleZAngle(vehicleid, 0.00);
			new sql = GetVSQLID(vehicleid), idx = GetVIndex(sql);
			if(sql > 0)
			{
				Veh[idx][vVWorld] = 0;
			}
		}
		else
		{
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos_Update(playerid, 1847.3, 698.5, 11.1);
			SetPlayerFacingAngle(playerid, 0.00);
		}
	}
	return 1;
}

CMD:lockgarage(playerid)
{
	if(Player[playerid][Business] == 24 || Player[playerid][VIPPass] == 24 || Player[playerid][BusinessKey] == 24)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2813.6, 2000.1, 10.83) && !IsPlayerInRangeOfPoint(playerid, 3.0, 2797.7, 2011.2, -45.63))
			return SendClientMessage(playerid, -1, "You are not in range of the door to lock or unlock it.");

		B24GarageLock = (B24GarageLock) ? (0) : (1);

		new string[128];
		format(string, sizeof(string), "* %s has %s the garage door.", GetNameEx(playerid), (B24GarageLock) ? ("locked") : ("unlocked"));
		NearByMessage(playerid, NICESKY, string);

		format(string, sizeof(string), "{FFFD8C}Garage door:\n{FFFFFF}%s", (B24GarageLock) ? ("Locked") : ("Unlocked\n/entergarage"));
		DestroyDynamic3DTextLabel(B24LockText);
		B24LockText = CreateDynamic3DTextLabel(string, WHITE, 2811, 2000.1, 10.83, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0);
		foreach(Player, i)
		{
			if(IsPlayerInRangeOfPoint(i, 20.0, 2811, 2000.1, 10.83))
				Streamer_Update(i);
		}
	}
	return 1;
}
*/

CMD:setplayerweather(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 3)
		return 1;

	new weatherid, id;
	if(sscanf(params, "ud", id, weatherid))
		return SendClientMessage(playerid, GREY, "SYNTAX: /setplayerweather [playerid] [weatherid]");

	if(Player[playerid][AdminLevel] < Player[id][AdminLevel])
		return SendClientMessage(playerid, WHITE, "You can't do that to a higher level admin!");

	SetPlayerWeather(id, weatherid);
	new string[128];
	format(string, sizeof(string), "You have set %s's weather to %d.", GetName(id), weatherid);
	SendClientMessage(playerid, WHITE, string);

	return 1;
}

CMD:givebusinesskey(playerid, params[])
{
	if(Player[playerid][Business] == 0)
		return SendClientMessage(playerid, -1, "You don't own a business.");
	new id;
	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /givebusinesskey [playerid]");

	if(id == INVALID_PLAYER_ID)
		return SendClientMessage(playerid, -1, "That player is not connected.");

	if(id == playerid)
		return SendClientMessage(playerid, -1, "No.");

	if(GetDistanceBetweenPlayers(playerid, id) > 5)
		return SendClientMessage(playerid, -1, "That player is too far away from you.");

	new string[128];
	if(Player[id][BusinessKey] > 0)
	{
		format(string, sizeof(string), "%s is trying to give you a business key, but you already have one! (( /dropbusinesskey ))", GetNameEx(playerid));
		SendClientMessage(id, YELLOW, string);
		return SendClientMessage(playerid, -1, "That player already has a set of business keys.");
	}

	new biz = Player[playerid][Business];

	if(!strcmp(Businesses[biz][bKeyOwner1], "Nobody", true))
	{
		if(Player[id][AdminLevel] > 0)
			strcpy(Businesses[biz][bKeyOwner1], Player[id][NormalName], 25);
		else
			strcpy(Businesses[biz][bKeyOwner1], Player[id][NormalName], 25);
	}
	else if(!strcmp(Businesses[biz][bKeyOwner2], "Nobody", true))
	{
		if(Player[id][AdminLevel] > 0)
			strcpy(Businesses[biz][bKeyOwner2], Player[id][NormalName], 25);
		else
			strcpy(Businesses[biz][bKeyOwner2], Player[id][NormalName], 25);
	}
	else
		return SendClientMessage(playerid, -1, "You have no spare keys to give out.");

	Player[id][BusinessKey] = biz;
	mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE playeraccounts SET BusinessKey = '%d' WHERE  NormalName = '%e'", biz, Player[id][NormalName]);
	mysql_tquery(MYSQL_MAIN, string, "OnQueryFinish", "dddss", THREAD_EDIT_BUSINESS_KEY, playerid, id, "", "");
	return 1;
}

CMD:dropbusinesskey(playerid)
{
	if(Player[playerid][BusinessKey] == 0)
		return SendClientMessage(playerid, -1, "You don't have a business key.");

	new biz = Player[playerid][BusinessKey];
	Player[playerid][BusinessKey] = 0;
	if(Player[playerid][AdminDuty] > 0)
	{
		if(!strcmp(Businesses[biz][bKeyOwner1], Player[playerid][NormalName], true))
			strcpy(Businesses[biz][bKeyOwner1], "Nobody", 25);
		else if(!strcmp(Businesses[biz][bKeyOwner2], Player[playerid][NormalName], true))
			strcpy(Businesses[biz][bKeyOwner2], "Nobody", 25);
	}
	else
	{
		if(!strcmp(Businesses[biz][bKeyOwner1], GetName(playerid), true))
			strcpy(Businesses[biz][bKeyOwner1], "Nobody", 25);
		else if(!strcmp(Businesses[biz][bKeyOwner2], GetName(playerid), true))
			strcpy(Businesses[biz][bKeyOwner2], "Nobody", 25);
	}
	return 1;
}

CMD:buynewbusinesslock(playerid)
{
	if(Player[playerid][Business] == 0)
		return SendClientMessage(playerid, -1, "You don't have a business");

	if(Player[playerid][Money] < 1000)
		return SendClientMessage(playerid, -1, "Business locks cost $1,000.");

	new b = Player[playerid][Business];
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ]))
		return SendClientMessage(playerid, -1, "You must be at your business door to buy a new lock.");

	Player[playerid][Money] -= 1000;
	RemovePlayerBusinessKeys(b);
	SendClientMessage(playerid, -1, "You have successfully bought a new business lock for $1,000.");
	return 1;
}

stock RemovePlayerBusinessKeys(b)
{
	new id1 = GetPlayerID(Businesses[b][bKeyOwner1]);
	new id2 = GetPlayerID(Businesses[b][bKeyOwner2]);

	if(id1 != INVALID_PLAYER_ID)
	{
		Player[id1][BusinessKey] = 0;
	}
	else
	{
		id1 = GetPlayerIDEx(Businesses[b][bKeyOwner1]);
		if(id1 != INVALID_PLAYER_ID)
		{
			Player[id1][BusinessKey] = 0;
		}
		else
		{
			new string[128];
			mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE playeraccounts SET BusinessKey = '0' WHERE NormalName = '%e'", Businesses[b][bKeyOwner1]);
			mysql_query(MYSQL_MAIN, string, false);
		}
	}

	if(id2 != INVALID_PLAYER_ID)
	{
		Player[id2][BusinessKey] = 0;
	}
	else
	{
		id2 = GetPlayerIDEx(Businesses[b][bKeyOwner2]);
		if(id2 != INVALID_PLAYER_ID)
		{
			Player[id2][BusinessKey] = 0;
		}
		else
		{
			new string[128];
			mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE playeraccounts SET BusinessKey = '0' WHERE NormalName = '%e'", Businesses[b][bKeyOwner2]);
			mysql_query(MYSQL_MAIN, string, false);
		}
	}
	format(Businesses[b][bKeyOwner1], 25, "Nobody");
	format(Businesses[b][bKeyOwner2], 25, "Nobody");
	return 1;
}

stock ShowDialog(playerid, dialogid, text[]="")
{
	switch(dialogid)
	{
		case AGENCY_ARMOUR:
		{
			format(text, 128, "Enter the amount of armour you wish to get. (1 - 100)\n%s", text);
			ShowPlayerDialog(playerid, AGENCY_ARMOUR, DIALOG_STYLE_INPUT, "Armour", text, "Done", "Cancel");
		}
		case PHONE_RECENTADS:
		{
			new string[700];
			for(new i; i < MAX_RECENT_ADS; i++)
			{
				format(string, sizeof(string), "%s%s\n", string, RecentAds[i]);
			}
			if(strlen(string) == 0)
				return SendClientMessage(playerid, -1, "An error occured, there are no logged advertisements.");

			ShowPlayerDialog(playerid, PHONE_RECENTADS, DIALOG_STYLE_MSGBOX, "Phone - Recent Advertisements", string, "Okay", "");
		}
		case BILLBOARD_CREATE:
		{
			new string[255];
			format(string, sizeof(string), "{FFFFFF}Are you sure you wish to purchase this billboard?\nIt will cost {3AC946}%s{FFFFFF}.\n\nEnter your advertisement and press \"Okay\" or\npress \"Cancel\" to cancel.", PrettyMoney(BillboardPrice));
			ShowPlayerDialog(playerid, BILLBOARD_CREATE, DIALOG_STYLE_INPUT, "Rent billboard", string, "Okay", "Cancel");
		}
		case BILLBOARD_COLOUR:
		{
			new string[600];
			format(string, sizeof(string), "{FFFFFF}Your advertisement on the billboard will show:\n\"%s\"\n\nYou can now choose the colours for your advertisement!\n\nAvailable colours:\n{171717}BLACK\n{E03434}RED\n{1900FF}BLUE\n{1EBBD4}LIGHTBLUE\n{FFFFFF}WHITE\n{23D94D}GREEN\n", Billboards[GetPVarInt(playerid, "PickedBillboard") - 1][AdText]);
			format(string, sizeof(string), "%s{004D12}DARKGREEN\n{D0D62B}YELLOW\n{E67F12}ORANGE\n{861BDE}PURPLE\n{ED11ED}PINK\n\n{FFFFFF}Enter the colours below in this format - \"backgroundcolour textcolour\".\nExample: \"red blue\" will make red background and blue text.", string);
			ShowPlayerDialog(playerid, BILLBOARD_COLOUR, DIALOG_STYLE_INPUT, "Rent billboard", string, "Done", "Back");
		}
		case INPUT_AMOUNT:
		{
			ShowPlayerDialog(playerid, INPUT_AMOUNT, DIALOG_STYLE_INPUT, "Input Amount", text, "Done", "Cancel");
		}
		case PHONE_BLOCKLIST:
		{
			new Cache:cache, query[128], count, page, row;
			mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM blockednumbers WHERE phone = '%d'", Player[playerid][PhoneN]);
			cache = mysql_query(MYSQL_MAIN, query), count = cache_get_row_count();
			page = GetPVarInt(playerid, "BlockOffListPage"), row = page * 9;//8;

			SetPVarInt(playerid, "BlockOffListMorePages", 0);

			new string[128], breakloop, nextline;

			format(string, sizeof(string), "{FFFFFF}List of blocked numbers:\n\n");

			while(row < count && breakloop < 9)
			{
				new number = cache_get_field_content_int(row, "blocked");

				format(string, sizeof(string), "%s%d, ", string, number);

				if(nextline == 2)
					strins(string, "\n", strlen(string), sizeof(string));

				nextline++;
				if(nextline > 2)
					nextline = 0;

				row ++;
				breakloop++;
			}

			cache_delete(cache);

			strdel(string, strlen(string) - 1, strlen(string));

			if(count > row)
			{
				SetPVarInt(playerid, "BlockOffListMorePages", 1);
				return ShowPlayerDialog(playerid, PHONE_BLOCKLIST, DIALOG_STYLE_MSGBOX, "BlockOff - {FFFFFF}List of blocked numbers", string, "Next", "Back");
			}

			return ShowPlayerDialog(playerid, PHONE_BLOCKLIST, DIALOG_STYLE_MSGBOX, "BlockOff - {FFFFFF}List of blocked numbers", string, "Back", "");
		}
	}
	return 1;
}


CMD:uninstallvehicleradio(playerid)
{

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "You must be in a vehicle to un-install the radio.");

	new vehicleid = GetPlayerVehicleID(playerid), sql = GetVSQLID(vehicleid), idx = GetVIndex(sql);
	if(sql == 0)
		return 1;

    if(!HasVKey(playerid, sql))
	    return 1;

	if(Veh[idx][RadioInstalled] == 0)
		return SendClientMessage(playerid, -1, "There is no radio installed in this vehicle.");

	Veh[idx][RadioInstalled] = 0;
	Player[playerid][VehicleRadio] = 1;
	SaveVehicle(sql);

	new string[128];
	format(string, sizeof(string), "* %s has un-installed a radio from the vehicle.", GetNameEx(playerid));
	NearByMessage(playerid, NICESKY, string);
	return 1;
}



CMD:installvehicleradio(playerid)
{
	if(Player[playerid][VehicleRadio] < 1)
		return SendClientMessage(playerid, -1, "You don't have any vehicle radios on you.");

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "You must be in a vehicle to install the radio.");

	new vehicleid = GetPlayerVehicleID(playerid), sql = GetVSQLID(vehicleid), idx = GetVIndex(sql);

	if((GetVehicleModel(vehicleid) == 481) && (GetVehicleModel(vehicleid) == 509) && (GetVehicleModel(vehicleid) == 510)) //Bikes Models.
		 return SendClientMessage(playerid, -1, "You cannot install a radio into this vehicle type.");
		 
		 
	if(sql == 0)
		return 1;

	if(Veh[idx][RadioInstalled] == 1)
		return SendClientMessage(playerid, -1, "This vehicle already has a radio installed.");

	Veh[idx][RadioInstalled] = 1;
	Player[playerid][VehicleRadio] = 0;
	SaveVehicle(sql);

	new string[128];
	format(string, sizeof(string), "* %s has installed a radio into the vehicle.", GetNameEx(playerid));
	NearByMessage(playerid, NICESKY, string);
	return 1;
}

CMD:fridge(playerid, params[])
{
	if(Player[playerid][InHouse] == 0)
		return SendClientMessage(playerid, -1, "You must be inside a house to use this.");

	new option[32], option2[32], amount;
	if(sscanf(params, "s[32]S(donkey)[32]D(0)", option, option2, amount))
		return SendClientMessage(playerid, GREY, "SYNTAX: /fridge [store/take/check] ([beer/pizza]) ([amount])");

	new hid = Player[playerid][InHouse], string[128];
	if(!strcmp(option, "store", true))
	{
		if(!strcmp(option2, "beer", true))
		{
			if(amount < 1 || amount > Player[playerid][BeerCases])
				return SendClientMessage(playerid, GREY, "SYNTAX: /fridge [store/take/check] ([beer/pizza]) ([amount])");

			Houses[hid][hBeers] += amount * 6;
			Player[playerid][BeerCases] -= amount;

			format(string, sizeof(string), "You have stored %d beers into the fridge.", amount * 6);
			SendClientMessage(playerid, -1, string);

			format(string, sizeof(string), "* %s put %d beers in the fridge.", GetNameEx(playerid), amount * 6);
			NearByMessage(playerid, NICESKY, string);
		}
		else if(!strcmp(option2, "pizza", true))
		{
			if(amount < 1 || amount > Player[playerid][PizzaSlices])
				return SendClientMessage(playerid, GREY, "SYNTAX: /fridge [store/take/check] ([beer/pizza]) ([amount])");

			Houses[hid][hPizzas] += amount;
			Player[playerid][PizzaSlices] -= amount;

			format(string, sizeof(string), "You have stored %d pizza slices into the fridge.", amount);
			SendClientMessage(playerid, -1, string);

			format(string, sizeof(string), "* %s put %d pizza slices in the fridge.", GetNameEx(playerid), amount);
			NearByMessage(playerid, NICESKY, string);
		}
		else
			return SendClientMessage(playerid, GREY, "SYNTAX: /fridge [store/take/check] ([beer/pizza]) ([amount])");
	}
	else if(!strcmp(option, "take", true))
	{
		if(!strcmp(option2, "beer", true))
		{
			if(Houses[hid][hBeers] < 1)
				return SendClientMessage(playerid, -1, "There are no beers in the fridge.");

			Houses[hid][hBeers]--;
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
			if(Player[playerid][PlayingHours] < 25)
				SendClientMessage(playerid, YELLOW, "Use your ATTACK key to drink, and your SECONDARY ATTACK key to drop the drink.");

			format(string, sizeof(string), "* %s took a beer from the fridge.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
		else if(!strcmp(option2, "pizza", true))
		{
			if(Houses[hid][hPizzas] < 1)
				return SendClientMessage(playerid, -1, "There are no pizza in the fridge.");

			if(amount < 1 || amount > Houses[hid][hPizzas])
				return SendClientMessage(playerid, GREY, "Error, invalid amount.");

			Houses[hid][hPizzas] -= amount;
			AddHunger(playerid, 1 * amount);

			new Float:health;
			GetPlayerHealth(playerid, health);
			if(health > 20 && health < 100)
			{
				if(health + (5 * amount) > 100)
					SetPlayerHealth(playerid, 100);
				else
					SetPlayerHealth(playerid, health + (5 * amount));
			}

			format(string, sizeof(string), "* %s took a slice of pizza from the fridge and ate it.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
		else
			return SendClientMessage(playerid, GREY, "You can only take out beer or pizza.");
	}
	else if(!strcmp(option, "check", true))
	{
		if(Houses[hid][hBeers] > 0)
			format(string, sizeof(string), "There is %d beers in the fridge.", Houses[hid][hBeers]);
		else
			format(string, sizeof(string), "There is no beers in the fridge.");
		SendClientMessage(playerid, -1, string);

		if(Houses[hid][hPizzas] > 0)
			format(string, sizeof(string), "There is %d slices of pizza in the fridge.", Houses[hid][hPizzas]);
		else
			format(string, sizeof(string), "There is no pizza in the fridge.");
		SendClientMessage(playerid, -1, string);

		format(string, sizeof(string), "* %s has looked in the fridge.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);
	}
	else
		return SendClientMessage(playerid, -1, "Invalid option.");

	return 1;
}

stock LoadDynamicMapIcons()
{
	for(new i = 1; i < sizeof(paynsprays); i++)
	{
		CreateDynamicMapIcon(paynsprays[i][0], paynsprays[i][1], paynsprays[i][2], 63, 0, .streamdistance = 150);
	}

	CreateDynamicMapIcon(VipLounge[0], VipLounge[1], VipLounge[2], 60, 0, .streamdistance = 150); //VIP Lounge
	return 1;
}

CMD:settaxfaction(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 7)
		return 1;

	new id;

	if(sscanf(params, "d", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /settaxfaction [group id]");

	if(id > SpawnedGroups && id < 1)
		return SendClientMessage(playerid, WHITE, "Invalid group ID!");

	TaxGroup = id;
	dini_IntSet("Assets.ini", "TaxGroup", TaxGroup);
	new string[128];
	format(string, sizeof(string), "New tax group set to %d.", id);
	SendClientMessage(playerid, WHITE, string);

	return 1;

}

stock GetActiveReports()
{
	new amount;
	foreach(Player, i)
	{
		if(Player[i][ActiveReport] >= 1)
		{
			amount++;
		}
	}
	return amount;
}

CMD:modduty(playerid)
{
	if(Player[playerid][AdminLevel] < 3)
		return 1;

	switch(Player[playerid][ModStatus])
	{
		case 0:
		{
			/*foreach(Player, i)
			{
				if(Player[i][AdminLevel] == 1 || Player[i][AdminLevel] == 2)
					return SendClientMessage(playerid, -1, "There are already moderators online to deal with /ask's.");
			}*/

			Player[playerid][ModStatus] = 1;
			SetPVarInt(playerid, "ModStatus", 1);
			SendClientMessage(playerid, -1, "You are now on moderator duty.");
		}
		case 1:
		{
			Player[playerid][ModStatus] = 0;
			DeletePVar(playerid, "ModStatus");
			SendClientMessage(playerid, -1, "You are now off moderator duty.");
		}
	}
	return 1;
}

CMD:adminnote(playerid, params[])
{
	new id, note[128];

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(sscanf(params, "uS( )[128]", id, note))
		return SendClientMessage(playerid, -1, "SYNTAX: /adminnote [playerid] <note>");

	if(!IsPlayerConnected(id))
		return SendClientMessage(playerid, -1, "That player isn't connected!");

	if(strlen(note) < 1)
	{
		SendClientMessage(playerid, -1, "--------------- Notes from Admins ---------------");
		format(note, sizeof(note), "Note 1: %s", Player[id][AdminNote1]);
		SendClientMessage(playerid, -1, note);
		format(note, sizeof(note), "Note 2: %s", Player[id][AdminNote2]);
		SendClientMessage(playerid, -1, note);
		format(note, sizeof(note), "Note 3: %s", Player[id][AdminNote3]);
		SendClientMessage(playerid, -1, note);
		SendClientMessage(playerid, -1, "--------------- Notes from Admins ---------------");
	}
	else
	{
		if(!strcmp(Player[id][AdminNote1], "none", true))
			format(Player[id][AdminNote1], 128, note);
		else if(!strcmp(Player[id][AdminNote2], "none", true))
			format(Player[id][AdminNote2], 128, note);
		else if(!strcmp(Player[id][AdminNote3], "none", true))
			format(Player[id][AdminNote3], 128, note);
		else return SendClientMessage(playerid, -1, "That player has three notes already!");

		format(note, sizeof(note), "You have left an admin note for %s.", GetName(id));
		SendClientMessage(playerid, -1, note);
		format(note, sizeof(note), "%s has left an admin note for %s.", Player[playerid][AdminName], GetName(id));
		AdminActionsLog(note);
	}
	return 1;
}

CMD:oadminnote(playerid, params[])
{
	new name[25], note[255];

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(sscanf(params, "s[25]S( )[255]", name, note))
		return SendClientMessage(playerid, -1, "SYNTAX: /oadminnote [name] <note>");

	if(IsPlayerConnected(GetPlayerIDEx(name)))
	{
		SendClientMessage(playerid, -1, "That player is connected!");
		return cmd_adminnote(playerid, params);
	}

	new query[128];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM playeraccounts WHERE NormalName = '%e'", name);
	new Cache:data = mysql_query(MYSQL_MAIN, query);

	if(!cache_is_valid(data))
		return SendClientMessage(playerid, WHITE, "An error occured while remote checking that player.");

	new note1[255], note2[255], note3[255];
	cache_get_field_content(0, "AdminNote1", note1);
	cache_get_field_content(0, "AdminNote2", note2);
	cache_get_field_content(0, "AdminNote3", note3);

	cache_delete(data);

	if(strlen(note) < 1)
	{
		SendClientMessage(playerid, -1, "--------------- Notes from Admins ---------------");
		format(note, sizeof(note), "Note 1: %s", note1);
		SendClientMessage(playerid, -1, note);
		format(note, sizeof(note), "Note 2: %s", note2);
		SendClientMessage(playerid, -1, note);
		format(note, sizeof(note), "Note 3: %s", note3);
		SendClientMessage(playerid, -1, "--------------- Notes from Admins ---------------");
	}
	else
	{
		new string[128];
		if(!strcmp(note1, "none", true))
			mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE playeraccounts SET AdminNote1 = '%e' WHERE NormalName = '%e'", note, name);
		else if(!strcmp(note2, "none", true))
			mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE playeraccounts SET AdminNote2 = '%e' WHERE NormalName = '%e'", note, name);
		else if(!strcmp(note3, "none", true))
			mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE playeraccounts SET AdminNote3 = '%e' WHERE NormalName = '%e'", note, name);
		else return SendClientMessage(playerid, -1, "That player has three notes already!");

		if(!isnull(string))
			mysql_query(MYSQL_MAIN, string, false);

		format(note, sizeof(note), "You have left an admin note for %s.", name);
		SendClientMessage(playerid, -1, note);
		format(note, sizeof(note), "%s has left an admin note for %s.", Player[playerid][AdminName], name);
		AdminActionsLog(note);
	}
	return 1;
}

CMD:clearnote(playerid, params[])
{
	new id, slot, string[128];
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(sscanf(params, "ud", id, slot))
		return SendClientMessage(playerid, -1, "SYNTAX: /clearnote [playerid] [slot (1-3)]");

	if(!IsPlayerConnected(id))
		return SendClientMessage(playerid, -1, "That player isn't connected!");

	switch(slot)
	{
		case 1:
		{
			if(!strcmp(Player[id][AdminNote1], "None", true))
				return SendClientMessage(playerid, -1, "That player doesn't have a note in that slot!");

			format(Player[id][AdminNote1], 128, "None");
		}
		case 2:
		{
			if(!strcmp(Player[id][AdminNote2], "None", true))
				return SendClientMessage(playerid, -1, "That player doesn't have a note in that slot!");

			format(Player[id][AdminNote2], 128, "None");
		}
		case 3:
		{
			if(!strcmp(Player[id][AdminNote3], "None", true))
				return SendClientMessage(playerid, -1, "That player doesn't have a note in that slot!");

			format(Player[id][AdminNote3], 128, "None");
		}
		default: return SendClientMessage(playerid, -1, "Invalid slot! (1-3)");
	}

	format(string, sizeof(string), "You have cleared %s's note in slot %d.", GetName(id), slot);
	SendClientMessage(playerid, -1, string);
	format(string, sizeof(string), "%s has cleared %s's admin note in slot %d.", Player[playerid][AdminName], GetName(id), slot);
	AdminActionsLog(string);
	return 1;
}

CMD:oclearnote(playerid, params[])
{
	new name[25], slot, string[128];
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(sscanf(params, "s[25]d", name, slot))
		return SendClientMessage(playerid, -1, "SYNTAX: /clearnote [playerid] [slot (1-3)]");

	if(IsPlayerConnected(GetPlayerIDEx(name)))
	{
		SendClientMessage(playerid, WHITE, "That player is connected!");
		return cmd_clearnote(playerid, params);
	}

	new query[128];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM playeraccounts WHERE NormalName = '%e'", name);
	new Cache:data = mysql_query(MYSQL_MAIN, query);

	if(!cache_is_valid(data))
		return SendClientMessage(playerid, WHITE, "An error occured while remote checking that player.");

	new note1[255], note2[255], note3[255];
	cache_get_field_content(0, "AdminNote1", note1);
	cache_get_field_content(0, "AdminNote2", note2);
	cache_get_field_content(0, "AdminNote3", note3);

	cache_delete(data);

	switch(slot)
	{
		case 1:
		{
			if(!strcmp(note1, "None", true))
				return SendClientMessage(playerid, -1, "That player doesn't have a note in that slot!");

			mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE playeraccounts SET AdminNote1 = 'None' WHERE NormalName = '%e'", name);
		}
		case 2:
		{
			if(!strcmp(note2, "None", true))
				return SendClientMessage(playerid, -1, "That player doesn't have a note in that slot!");

			mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE playeraccounts SET AdminNote1 = 'None' WHERE NormalName = '%e'", name);
		}
		case 3:
		{
			if(!strcmp(note3, "None", true))
				return SendClientMessage(playerid, -1, "That player doesn't have a note in that slot!");

			mysql_format(MYSQL_MAIN, string, sizeof(string), "UPDATE playeraccounts SET AdminNote1 = 'None' WHERE NormalName = '%e'", name);
		}
		default: return SendClientMessage(playerid, -1, "Invalid slot! (1-3)");
	}

	if(!isnull(string))
		mysql_query(MYSQL_MAIN, string, false);

	format(string, sizeof(string), "You have cleared %s's note in slot %d.", name, slot);
	SendClientMessage(playerid, -1, string);
	format(string, sizeof(string), "%s has cleared %s's admin note in slot %d.", Player[playerid][AdminName], name, slot);
	AdminActionsLog(string);
	return 1;
}

stock Mole(message[])
{
	new string[128];
	format(string, sizeof(string), "%s", message);
	foreach(Player, i)
	{
		new query[128];
		mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM phones WHERE owner = '%e'", Player[i][NormalName]);
		new Cache:cache = mysql_query(MYSQL_MAIN, query), count = cache_get_row_count(), idx;

		while(idx < count)
		{
			new number = cache_get_field_content_int(idx, "number");
			if(strval(GetPhoneInfo(number, "status")) == 1)
			{
				new string2[128];
				SaveSMS(number, 555, 1, message);
				PlayerPlaySound(i, 21000, 0.00, 0.00, 0.00);
				if(strval(GetPhoneInfo(number, "vibrate")) == 1 && Spectator[i][SpecSpectatingPlayer] == -1 && Spectator[i][SpecSpectatingVehicle] == -1)
				{
					format(string2, sizeof(string2), "* %s's phone vibrates..",  GetNameEx(i));
					NearByMessage(i, NICESKY, string2);
				}
				format(string2, sizeof(string2), "You got a message on your phone \"%s\".", GetPhoneInfo(number, "label"));
				SendClientMessage(i, WHITE, string2);
			}
			idx ++;
		}
		cache_delete(cache);
	}
	return 1;
}

CMD:getincar(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 4)
		return 1;

	new id = strval(params);
	if(isnull(params) || !IsNumeric(params) || id < 1 || id > MAX_VEHICLES)
		return SendClientMessage(playerid, GREY, "SYNTAX: /getincar [vehicleid]");

	if(IsSeatOccupied(id, 0))
		return SendClientMessage(playerid, -1, "Somebody is already in that vehicle.");

	PutPlayerInVehicle(playerid, id, 0);
	return 1;
}

CMD:fishdeadzone(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 5)
		return 1;

	if(isnull(params) || !IsNumeric(params))
		return SendClientMessage(playerid, GREY, "SYNTAX: /fishdeadzone [range]");

	FishDeadZone[3] = strval(params);
	dini_IntSet("Assets.ini", "FishDeadZoneRange", floatround(FishDeadZone[3], floatround_ceil));

	new string[128];
	format(string, sizeof(string), "You have set the FishDeadZone range to %d.", strval(params));
	SendClientMessage(playerid, -1, string);
	return 1;
}

CMD:hideweapons(playerid)
{
	if(GetPVarInt(playerid, "HideWeaponCD") > gettime())
		return SendClientMessage(playerid, -1, "You must wait 60 seconds before you can do that again.");

	new string[128];
	switch(Player[playerid][HideWeapons])
	{
		case 0:
		{
			Player[playerid][HideWeapons] = 1;
			SendClientMessage(playerid, -1, "Concealable weapons will now be hidden.");
			if(PlayerHasWeapons(playerid))
				format(string, sizeof(string), "* %s has hidden their weapons.", GetNameEx(playerid));
		}
		case 1:
		{
			Player[playerid][HideWeapons] = 0;
			SendClientMessage(playerid, -1, "Concealable weapons will now be showing.");
			if(PlayerHasWeapons(playerid))
				format(string, sizeof(string), "* %s has exposed their weapons.", GetNameEx(playerid));
		}
	}
	if(strlen(string) > 1)
		NearByMessage(playerid, NICESKY, string);
	SetPVarInt(playerid, "HideWeaponCD", gettime() + 60);
	return 1;
}

stock PlayerHasWeapons(playerid)
{
	if(Player[playerid][WepSlot0] > 0) return 1;
	if(Player[playerid][WepSlot1] > 0) return 1;
	if(Player[playerid][WepSlot2] > 0) return 1;
	if(Player[playerid][WepSlot3] > 0) return 1;
	if(Player[playerid][WepSlot4] > 0) return 1;
	if(Player[playerid][WepSlot5] > 0) return 1;
	if(Player[playerid][WepSlot6] > 0) return 1;
	if(Player[playerid][WepSlot7] > 0) return 1;
	if(Player[playerid][WepSlot8] > 0) return 1;
	if(Player[playerid][WepSlot9] > 0) return 1;
	if(Player[playerid][WepSlot10] > 0) return 1;
	if(Player[playerid][WepSlot11] > 0) return 1;
	return 0;
}

CMD:searchloc(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new string[128];
	format(string, sizeof(string), "Searching for players from %s..", params);
	SendClientMessage(playerid, -1, string);
	SendClientMessage(playerid, -1, "-------------------------------------------------------");

	new count;
	foreach(Player, i)
	{
		if(!strcmp(params, GetPlayerCountryName(i), true))
		{
			count++;
			format(string, sizeof(string), "%s (ID %d) - IP: %s", GetName(i), i, GetPlayersIP(i));
			SendClientMessage(playerid, -1, string);
		}
	}

	if(count == 0)
		SendClientMessage(playerid, -1, "No players found.");

	SendClientMessage(playerid, -1, "-------------------------------------------------------");
	return 1;
}

CMD:usespeed(playerid, params[])
{
	if(Player[playerid][Speed] < 1)
		return SendClientMessage(playerid, -1, "You don't have any speed.");

	if(Player[playerid][SpeedTimer] > gettime())
		return SendClientMessage(playerid, -1, "You are already on speed.");

	new amount = strval(params);
	if(isnull(params) || !IsNumeric(params) || amount < 1 || amount > 10)
		return SendClientMessage(playerid, -1, "SYNTAX: /usespeed [amount (1 - 10)]");

	if(amount > Player[playerid][Speed])
		return SendClientMessage(playerid, -1, "You don't have that much speed on you.");

	Player[playerid][Speed] -= amount;
	ApplySpeedEffects(playerid, amount);

	new string[128];
	if(amount == 1)
		format(string, sizeof(string), "* %s has used a pill of speed.", GetNameEx(playerid));
	else if(amount > 1 && amount < 5)
		format(string, sizeof(string), "* %s has used a few pills of speed.", GetNameEx(playerid));
	else
		format(string, sizeof(string), "* %s has used several pills of speed.", GetNameEx(playerid));
	NearByMessage(playerid, NICESKY, string);
	return 1;
}

stock ApplySpeedEffects(playerid, minutes)
{
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 999);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 999);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 999);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 999);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 999);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 999);
	Player[playerid][SpeedTimer] = gettime() + (minutes * 60);
	return 1;
}

CMD:growpot(playerid, params[])
{
	if(Player[playerid][InHouse] == 0)
		return SendClientMessage(playerid, -1, "You are not in a house.");

	if(!PlayerHasHouseKey(playerid, Player[playerid][InHouse]))
		return SendClientMessage(playerid, -1, "You must have the key to the house you're in to use this.");

	if(Player[playerid][PotSeeds] == 0)
		return SendClientMessage(playerid, -1, "You have no seeds to plant.");

	new hid = Player[playerid][InHouse], string[128];

	if(!Houses[hid][GrowLightInstalled])
		return SendClientMessage(playerid, -1, "You need to install a light for the pot to grow.");

	if(Houses[hid][PotGrow][0] == 0)
	{
		Houses[hid][PotGrow][0] = 1;
		Houses[hid][PotTime][0] = gettime() + 3600;
		Player[playerid][PotSeeds]--;
		format(string, sizeof(string), "* %s has planted a pot seed.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);
	}
	else if(Houses[hid][PotGrow][1] == 0)
	{
		Houses[hid][PotGrow][1] = 1;
		Houses[hid][PotTime][1] = gettime() + 3600;
		Player[playerid][PotSeeds]--;
		format(string, sizeof(string), "* %s has planted a pot seed.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);
	}
	else
		return SendClientMessage(playerid, -1, "You can't place any more seeds in this house.");
	return 1;
}

CMD:harvestpot(playerid, params[])
{
	if(Player[playerid][InHouse] == 0)
		return SendClientMessage(playerid, -1, "You are not in a house.");

	if(!PlayerHasHouseKey(playerid, Player[playerid][InHouse]))
		return SendClientMessage(playerid, -1, "You must have the key to the house you're in to use this.");

	new pot = strval(params) - 1;
	if(isnull(params) || !IsNumeric(params) || pot < 0 || pot > 1)
		return SendClientMessage(playerid, GREY, "SYNTAX: /harvestpot [1/2]");

	new hid = Player[playerid][InHouse], string[128];

	if(Houses[hid][PotGrow][pot] > 0)
	{
		switch(Houses[hid][PotGrow][pot])
		{
			case 1:
			{
				new timeleft = Houses[hid][PotTime][pot] - gettime();
				if(timeleft / 60 > 0)
					format(string, sizeof(string), "That pot still has %d minutes left before it has grown.", timeleft / 60);
				else
					format(string, sizeof(string), "That pot still has less than a minute before it has grown.");
				SendClientMessage(playerid, -1, string);
			}
			case 2:
			{
				Houses[hid][PotGrow][pot] = 0;
				Houses[hid][PotTime][pot] = 0;

				Player[playerid][Pot]++;

				format(string, sizeof(string), "* %s has harvested some pot.", GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, string);
				SendClientMessage(playerid, -1, "You harvested the pot in time and gained 1 gram.");
			}
			case 3:
			{
				Houses[hid][PotGrow][pot] = 0;
				Houses[hid][PotTime][pot] = 0;

				format(string, sizeof(string), "* %s has harvested some pot and threw it away.", GetNameEx(playerid));
				NearByMessage(playerid, NICESKY, string);
				SendClientMessage(playerid, -1, "You didn't harvest the pot in time and it went bad.");
			}
		}
	}
	else
		return SendClientMessage(playerid, -1, "You have not planted a seed in that slot.");
	return 1;
}

CMD:installgrowlight(playerid)
{
	if(Player[playerid][InHouse] == 0)
		return SendClientMessage(playerid, -1, "You are not in a house.");

	if(!PlayerHasHouseKey(playerid, Player[playerid][InHouse]))
		return SendClientMessage(playerid, -1, "You must have the key to the house you're in to use this.");

	new hid = Player[playerid][InHouse], string[128];

	if(Houses[hid][GrowLightInstalled])
		return SendClientMessage(playerid, -1, "There is already a light installed in this house.");

	if(Player[playerid][GrowLight] == 0)
		return SendClientMessage(playerid, -1, "You don't have a light on you.");

	Houses[hid][GrowLightInstalled] = 1;
	Player[playerid][GrowLight] = 0;
	format(string, sizeof(string), "* %s has installed a fluorescent grow light.", GetNameEx(playerid));
	NearByMessage(playerid, NICESKY, string);
	SaveHouse(hid);
	return 1;
}

CMD:uninstallgrowlight(playerid, params[])
{
	if(Player[playerid][InHouse] == 0)
		return SendClientMessage(playerid, -1, "You are not in a house.");

	if(!PlayerHasHouseKey(playerid, Player[playerid][InHouse]))
		return SendClientMessage(playerid, -1, "You must have the key to the house you're in to use this.");

	new hid = Player[playerid][InHouse], string[128];

	if(Houses[hid][GrowLightInstalled] == 0)
		return SendClientMessage(playerid, -1, "This house does not have grow lights installed.");

	Houses[hid][GrowLightInstalled] = 0;
	Player[playerid][GrowLight] = 1;
	format(string, sizeof(string), "* %s has uninstalled a fluorescent grow light.", GetNameEx(playerid));
	NearByMessage(playerid, NICESKY, string);
	SaveHouse(hid);
	return 1;
}

CMD:installventillation(playerid)
{
	if(Player[playerid][InHouse] == 0)
		return SendClientMessage(playerid, -1, "You are not in a house.");

	if(!PlayerHasHouseKey(playerid, Player[playerid][InHouse]))
		return SendClientMessage(playerid, -1, "You must have the key to the house you're in to use this.");

	new hid = Player[playerid][InHouse], string[128];

	if(Player[playerid][Ventillation] == 0)
		return SendClientMessage(playerid, -1, "You don't have a ventillation upgrade on you.");
		
	if(Houses[hid][VentUpgrade] == 2)
		return SendClientMessage(playerid, -1, "There is already the maximum ventillation upgrade in this house.");	
	
	switch(Player[playerid][Ventillation])
	{
		case 1:
		{
			Houses[hid][VentUpgrade] = 1;
			SendClientMessage(playerid, -1, "You have installed the first ventillation upgrade.");
			SendClientMessage(playerid, -1, "This will reduce the chance of players smelling pot in your house.");
		}
		case 2:
		{
			if(Houses[hid][VentUpgrade] != 1)
				return SendClientMessage(playerid, -1, "You need to install the first ventillation upgrade!");
				
			Houses[hid][VentUpgrade] = 2;
			SendClientMessage(playerid, -1, "You have installed the second ventillation upgrade.");
			SendClientMessage(playerid, -1, "This will greatly reduce the chance of players smelling pot in your house.");			
		}
	}
	Player[playerid][Ventillation] = 0;
	format(string, sizeof(string), "* %s has installed a ventillation upgrade.", GetNameEx(playerid));
	NearByMessage(playerid, NICESKY, string);
	SaveHouse(hid);
	return 1;
}

CMD:setpizzapoint(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 5)
		return 1;

	new id = strval(params);
	if(isnull(params) || !IsNumeric(params) || id < 0 || id > MAX_PIZZA_POINTS - 1)
		return SendClientMessage(playerid, GREY, "SYNTAX: /setpizzapoint [id]");

	pizzaDeliveries[id][0] = GetPlayerX(playerid);
	pizzaDeliveries[id][1] = GetPlayerY(playerid);
	pizzaDeliveries[id][2] = GetPlayerZ(playerid);

	new string[128];
	format(string, sizeof(string), "You have set pizza delivery position %d to your current position.", id);
	SendClientMessage(playerid, -1, string);
	SavePizzaPos(id);
	return 1;
}

CMD:togglepizzapoints(playerid)
{
	if(Player[playerid][AdminLevel] < 5)
		return 1;

	if(GetPVarInt(playerid, "ShowPizzaPoints") == 1)
	{
		new string[32];
		for(new i; i < MAX_PIZZA_POINTS; i++)
		{
			if(pizzaDeliveries[i][0] != 0)
			{
				format(string, sizeof(string), "Pizza Point %d", i);
				Player[playerid][PizzaPointLabel][i] = CreateDynamic3DTextLabel(string, GREEN, pizzaDeliveries[i][0], pizzaDeliveries[i][1], pizzaDeliveries[i][2], 999, .playerid = playerid);
			}
		}
		SetPVarInt(playerid, "ShowPizzaPoints", 2);
	}
	else
	{
		for(new i; i < MAX_PIZZA_POINTS; i++)
		{

			if(IsValidDynamic3DTextLabel(Player[playerid][PizzaPointLabel][i]))
				DestroyDynamic3DTextLabel(Player[playerid][PizzaPointLabel][i]);
		}
		SetPVarInt(playerid, "ShowPizzaPoints", 1);
	}
	return 1;
}

CMD:gotopizzapoint(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 5)
		return 1;

	new id = strval(params);
	if(isnull(params) || !IsNumeric(params) || id < 0 || id > MAX_PIZZA_POINTS - 1)
		return SendClientMessage(playerid, -1, "SYNTAX: /gotopizzapoint [id]");

	SetPlayerPos_Update(playerid, pizzaDeliveries[id][0], pizzaDeliveries[id][1], pizzaDeliveries[id][2]);
	return 1;
}

stock SavePizzaPos(id)
{
	new file[64] = "Misc/PizzaPoints.ini";
	if(!fexist(file))
		dini_Create(file);

	new tmp[64];
	format(tmp, sizeof(tmp), "PizzaPoint%dX", id);
	dini_FloatSet(file, tmp, pizzaDeliveries[id][0]);
	format(tmp, sizeof(tmp), "PizzaPoint%dY", id);
	dini_FloatSet(file, tmp, pizzaDeliveries[id][1]);
	format(tmp, sizeof(tmp), "PizzaPoint%dZ", id);
	dini_FloatSet(file, tmp, pizzaDeliveries[id][2]);
	return 1;
}

stock LoadPizzaPos()
{
	new file[64] = "Misc/PizzaPoints.ini";
	if(!fexist(file))
		dini_Create(file);

	new tmp[64];
	for(new id; id < MAX_PIZZA_POINTS; id++)
	{
		format(tmp, sizeof(tmp), "PizzaPoint%dX", id);
		pizzaDeliveries[id][0] = dini_Float(file, tmp);
		format(tmp, sizeof(tmp), "PizzaPoint%dY", id);
		pizzaDeliveries[id][1] = dini_Float(file, tmp);
		format(tmp, sizeof(tmp), "PizzaPoint%dZ", id);
		pizzaDeliveries[id][2] = dini_Float(file, tmp);
	}
	return 1;
}

stock GetPizzaPoint(playerid, avoid = -1)
{
	new id = random(MAX_PIZZA_POINTS);
	if(id == avoid && avoid != -1)
		return GetPizzaPoint(playerid, avoid);

	if(IsPlayerInRangeOfPoint(playerid, 15.0, pizzaDeliveries[id][0], pizzaDeliveries[id][1], pizzaDeliveries[id][2]))
		return GetPizzaPoint(playerid, avoid);

	if(pizzaDeliveries[id][0] == 0.00 && pizzaDeliveries[id][1] == 0.00)
		return GetPizzaPoint(playerid, avoid);

	return id;
}

stock IsSkinValidForRace(playerid, skinid)
{
	switch(Player[playerid][Gender])
	{
		case 1:
		{
			switch(Player[playerid][Race])
			{
				case 0:
				{
					if(IsValidWhiteSkin(skinid) && !IsFemaleSkin(skinid))
						return 1;
				}
				case 1:
				{
					if(IsFemaleSkin(skinid))
						return 0;

					if(IsValidBlackSkin(skinid) && !IsFemaleSkin(skinid))
						return 1;
				}
				case 2:
				{
					if(IsValidAsianSkin(skinid) && !IsFemaleSkin(skinid))
						return 1;
				}
				case 3:
				{
					if(IsValidHispanicSkin(skinid) && !IsFemaleSkin(skinid))
						return 1;
				}
			}
		}
		default:
		{
			switch(Player[playerid][Race])
			{
				case 0:
				{
					if(IsValidWhiteSkin(skinid) && IsFemaleSkin(skinid))
						return 1;
				}
				case 1:
				{
					if(IsValidBlackSkin(skinid) && IsFemaleSkin(skinid))
						return 1;
				}
				case 2:
				{
					if(IsValidAsianSkin(skinid) && IsFemaleSkin(skinid))
						return 1;
				}
				case 3:
				{
					if(IsValidHispanicSkin(skinid) && IsFemaleSkin(skinid))
						return 1;
				}
			}
		}
	}
	return 0;
}

CMD:aradio(playerid)
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(Player[playerid][AdminDuty] == 0)
		return 1;

	new string[255];
	for(new i; i < MAX_RADIO_STATIONS; i++)
	{
		if(RadioSettings[i][Available] > 0)
		{
			format(string, sizeof(string), "%s%s\n", string, RadioSettings[i][StationName]);
		}
	}
	ShowPlayerDialog(playerid, ADMIN_RADIO, DIALOG_STYLE_LIST, "RADIO", string, "Select", "Cancel");
	return 1;
}

CMD:unsavedvehicles(playerid)
{
	if(Player[playerid][AdminLevel] < 4)
		return 1;

	new string[128];
	for(new i; i < MAX_VEHICLES; i++)
	{
		if(GetVSQLID(i) == 0 && GetVehicleModel(i) > 0)
			format(string, sizeof(string), "%s%d | %s\n", string, i, vNames[GetVehicleModel(i) - 400]);
	}

	if(strlen(string) == 0)
		return SendClientMessage(playerid, -1, "There are no unsaved vehicles.");

	ShowPlayerDialog(playerid, UNSAVED_VEHICLES, DIALOG_STYLE_LIST, "Unsaved vehicles", string, "Goto", "Close");
	return 1;
}

stock BanMessage(playerid)
{
	new string[128], year, month, day, hour, minute, second;
	gettime(hour, minute, second);
	getdate(year, month, day);

	SendClientMessage(playerid, BLACK, "------------------------------------------------------------------------------------------------");
	format(string, sizeof(string), "[BAN] [%d-%02d-%02d %02d:%02d:%02d] [%s] %s", year, month, day, hour, minute, second, Player[playerid][BannedBy], Player[playerid][BannedReason]);
	SendClientMessage(playerid, RED, string);
	SendClientMessage(playerid, RED, "NOTE: Take a screenshot of this ban to use in your appeals. This is your responsibility.");
	//format(string, sizeof(string), "You have been banned from the server by: %s", Player[playerid][BannedBy]);
	//SendClientMessage(playerid, ORANGE, string);
	//format(string, sizeof(string), "Reason: %s", Player[playerid][BannedReason]);
	//SendClientMessage(playerid, ORANGE, string);
	SendClientMessage(playerid, ORANGE, "You may appeal your ban at www.crearoleplay.com");
	SendClientMessage(playerid, RED, "DO NOT CREATE A NEW ACCOUNT TO PLAY OR YOU WILL BE IP BANNED!!");
	SendClientMessage(playerid, BLACK, "------------------------------------------------------------------------------------------------");
	return 1;
}

stock TempBanMessage(playerid)
{
	new string[128], year, month, day, hour, minute, second;
	gettime(hour, minute, second);
	getdate(year, month, day);

	SendClientMessage(playerid, BLACK, "------------------------------------------------------------------------------------------------");
	format(string, sizeof(string), "[TEMPBAN] [%d-%02d-%02d %02d:%02d:%02d] %s", year, month, day, hour, minute, second, Player[playerid][BannedReason]);
	SendClientMessage(playerid, RED, string);
	SendClientMessage(playerid, RED, "NOTE: Take a screenshot of this tempban to use in your appeals. This is your responsibility.");
	//format(string, sizeof(string), "You have been TEMP-banned from the server by: %s", Player[playerid][BannedBy]);
	//SendClientMessage(playerid, ORANGE, string);
	//format(string, sizeof(string), "Reason: %s", Player[playerid][BannedReason]);
	//SendClientMessage(playerid, ORANGE, string);
	new timeLeft = Player[playerid][TempbanTime] - gettime();
	format(string, sizeof(string), "Timeleft: %d days, %d hours, %d minutes.", timeLeft / 86400, (timeLeft % 86400) / 3600, (timeLeft % 3600) / 60);
	SendClientMessage(playerid, ORANGE, string);
	SendClientMessage(playerid, ORANGE, "You may appeal your ban at www.crearoleplay.com");
	SendClientMessage(playerid, RED, "DO NOT CREATE A NEW ACCOUNT TO PLAY OR YOU WILL BE IP BANNED!!");
	SendClientMessage(playerid, BLACK, "------------------------------------------------------------------------------------------------");
	return 1;
}

stock InitHouses()
{
	if(dini_Int("Assets.ini", "ConvertedToMysql") == 0)
	{
		new FileName[128];
		for(new i = 0; i < MAX_HOUSES; i++)
		{
			format(FileName, sizeof(FileName), "Houses/House_%d.ini", i);
			if(fexist(FileName))
			{
				INI_ParseFile(FileName, "LoadHouse", .bExtra = true, .extra = i, .bPassTag = true);

				if(Houses[i][PotTime][0] != 0)
					Houses[i][PotTime][0] += gettime();

				if(Houses[i][PotTime][1] != 0)
					Houses[i][PotTime][1] += gettime();


				if(strcmp(Houses[i][hOwner], "Nobody", true) == 0)
				{
					Houses[i][Keypad] = 0;
					Houses[i][LockStatus] = 1;
					Houses[i][HPickupID] = CreateDynamicPickup(1273, 23, Houses[i][hExteriorX], Houses[i][hExteriorY], Houses[i][hExteriorZ], Houses[i][hExteriorVW], Houses[i][hExteriorID], -1, 150.0);
				}
				else
				{
					Houses[i][HPickupID] = CreateDynamicPickup(1272, 23, Houses[i][hExteriorX], Houses[i][hExteriorY], Houses[i][hExteriorZ], Houses[i][hExteriorVW], Houses[i][hExteriorID], -1, 150.0);
				}

				if(Houses[i][VaultMoney] > 0)
					format(Houses[i][HouseStorage], 500, "%s%d Money|\n", Houses[i][HouseStorage], Houses[i][VaultMoney]);
				if(Houses[i][HouseCocaine] > 0)
					format(Houses[i][HouseStorage], 500, "%s%d Cocaine|\n", Houses[i][HouseStorage], Houses[i][HouseCocaine]);
				if(Houses[i][HousePot] > 0)
					format(Houses[i][HouseStorage], 500, "%s%d Pot|\n", Houses[i][HouseStorage], Houses[i][HousePot]);
				if(Houses[i][HouseSpeed] > 0)
					format(Houses[i][HouseStorage], 500, "%s%d Speed|\n", Houses[i][HouseStorage], Houses[i][HouseSpeed]);
				if(Houses[i][HouseMaterials][0] > 0)
					format(Houses[i][HouseStorage], 500, "%s%d Street Grade Materials|\n", Houses[i][HouseStorage], Houses[i][HouseMaterials][0]);
				if(Houses[i][HouseMaterials][1] > 0)
					format(Houses[i][HouseStorage], 500, "%s%d Standard Grade Materials|\n", Houses[i][HouseStorage], Houses[i][HouseMaterials][1]);
				if(Houses[i][HouseMaterials][2] > 0)
					format(Houses[i][HouseStorage], 500, "%s%d Military Grade Materials|\n", Houses[i][HouseStorage], Houses[i][HouseMaterials][2]);
				for(new x; x < 5; x++)
				{
					if(Houses[i][Weapons][x] != 0)
						format(Houses[i][HouseStorage], 500, "%s1 %s|\n", Houses[i][HouseStorage], weapons[Houses[i][Weapons][x]]);
				}
				new amount = floatround((Houses[i][HousePrice] / 100000), floatround_round);
				Houses[i][HouseStorageBase] = amount * 20;
				Houses[i][HouseStorageSize] = Houses[i][HouseStorageBase] + Houses[i][HouseStorageExtra];

				printf("[system] House %d spawned.", i);
				UpdateObjectLabel(i, LABEL_TYPE_HOUSE, .create = 1);
				SpawnedHouses++;
				LoadHouseFurni(i);

				Houses[i][ORM_ID] = orm_create("houses");
				orm_setkey(Houses[i][ORM_ID], "HouseSQL");
				SetupHouseORM(i);
				orm_insert(Houses[i][ORM_ID]);
			}
		}
	}
	else
		mysql_tquery(MYSQL_MAIN, "SELECT * FROM houses", "OnHousesLoad", "");

	return 1;
}

forward OnHousesLoad();
public OnHousesLoad()
{
	new total_rows = cache_num_rows(), Cache:cache = cache_save();
	for(new r; r < total_rows; r++)
	{
		Houses[r + 1][ORM_ID] = orm_create("houses");

		SetupHouseORM(r + 1);
		orm_setkey(Houses[r + 1][ORM_ID], "HouseSQL");
		orm_apply_cache(Houses[r + 1][ORM_ID], r);


		if(Houses[r + 1][PotTime][0] != 0)
			Houses[r + 1][PotTime][0] += gettime();

		if(Houses[r + 1][PotTime][1] != 0)
			Houses[r + 1][PotTime][1] += gettime();


		if(strcmp(Houses[r + 1][hOwner], "Nobody", true) == 0)
		{
			Houses[r + 1][Keypad] = 0;
			Houses[r + 1][LockStatus] = 1;
			Houses[r + 1][HPickupID] = CreateDynamicPickup(1273, 23, Houses[r + 1][hExteriorX], Houses[r + 1][hExteriorY], Houses[r + 1][hExteriorZ], Houses[r + 1][hExteriorVW], Houses[r + 1][hExteriorID], -1, 150.0);
		}
		else
		{
			Houses[r + 1][HPickupID] = CreateDynamicPickup(1272, 23, Houses[r + 1][hExteriorX], Houses[r + 1][hExteriorY], Houses[r + 1][hExteriorZ], Houses[r + 1][hExteriorVW], Houses[r + 1][hExteriorID], -1, 150.0);
		}

		if(dini_Int("Assets.ini", "ConvertedHouseStorage") == 0)
		{
			ConvertOldStorage(r + 1, CONTAINER_TYPE_HOUSE);
			Houses[r + 1][HouseStorage][0] = EOS;
			cache_set_active(cache);
		}

		printf("[system] House %d spawned.", r + 1);
		UpdateObjectLabel(r + 1, LABEL_TYPE_HOUSE, .create = 1);
		SpawnedHouses++;
	}

	if(dini_Int("Assets.ini", "ConvertedHouseStorage") == 0)
		dini_IntSet("Assets.ini", "ConvertedHouseStorage", 1);

	new amount;
	for(new i = 1; i < MAX_HOUSES; i++)
	{
		LoadHouseFurni(i);
		amount = floatround((Houses[i][HousePrice] / 100000), floatround_round);
		Houses[i][HouseStorageBase] = amount * 20;
		Houses[i][HouseStorageSize] = Houses[i][HouseStorageBase] + Houses[i][HouseStorageExtra];
	}
	return 1;
}

CMD:stoparadio(playerid)
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(Player[playerid][AdminRadio] == 0)
		return SendClientMessage(playerid, -1, "You are not listening to a radio.");

	Player[playerid][AdminRadio] = 0;
	StopAudioStreamForPlayer(playerid);
	SendClientMessage(playerid, -1, "You have stopped the radio.");
	return 1;
}

CMD:noobs(playerid, params[])
{
	new string[128];

	if(Player[playerid][AdminLevel] < 2)
		return 1;

	SendClientMessage(playerid, -1, "------------------------------------------------------");
	foreach(Player, i)
	{
		if(Player[i][PlayingHours] > 2)
			continue;

		format(string, sizeof(string), "%s (%d) - %d hours", GetName(i), i, Player[i][PlayingHours]);
		SendClientMessage(playerid, -1, string);
	}
	SendClientMessage(playerid, -1, "------------------------------------------------------");
	return 1;
}

stock GetRingtoneSound(number)
{
	switch(strval(GetPhoneInfo(number, "ringtone")))
	{
		case 1: return 1062;
		case 2:	return 1068;
		case 3:	return 1076;
		case 4:	return 1097;
		case 5:	return 1183;
		case 6: return 1185;
		case 7:	return 1187;
	}
	return 0;
}

CMD:sellbusiness(playerid, params[])
{
	if(Player[playerid][Business] == 0)
		return SendClientMessage(playerid, -1, "You don't have a business to sell.");

	new id, price;
	if(sscanf(params, "ud", id, price))
		return SendClientMessage(playerid, -1, "SYNTAX: /sellbusiness [playerid] [price]");

	new bid = Player[playerid][Business];

	if(Player[playerid][InBusiness] != bid && !IsPlayerInRangeOfPoint(playerid, 5.0, Businesses[bid][bExteriorX], Businesses[bid][bExteriorY], Businesses[bid][bExteriorZ]))
		return SendClientMessage(playerid, -1, "You must be in your business or standing by the front door to sell your business.");

	if(price < Businesses[bid][bPrice])
		return SendClientMessage(playerid, -1, "You cannot sell a business for cheaper than its worth!");

	if(price > 5 * Businesses[bid][bPrice] / 4)
		return SendClientMessage(playerid, -1, "You cannot sell a business for more than 125 percent of its worth!");

	if(Player[id][BankMoney] < price)
		return SendClientMessage(playerid, -1, "That player does not have that much money in their bank!");

	if(Player[id][PlayingHours] < 20)
		return SendClientMessage(playerid, -1, "You cannot sell a business to someone who has less than 20 playing hours.");

	SetPVarInt(id, "SellBusiness_PlayerID", playerid);
	SetPVarInt(id, "SellBusiness_Price", price);
	SetPVarInt(id, "SellBusiness_Timeout", gettime() + 15);
	SetPVarInt(id, "SellBusiness_BusinessID", bid);

	new string[128];
	format(string, sizeof(string), "%s is trying to sell you their business ((ID: %d)) for $%s. ((type \"/accept business\" to buy the business.))", GetNameEx(playerid), bid, IntToFormattedStr(price));
	SendClientMessage(id, NICESKY, string);

	format(string, sizeof(string), "You have offered %s your business for $%s.", GetNameEx(id), IntToFormattedStr(price));
	SendClientMessage(playerid, -1, string);
	return 1;
}

CMD:togspeaker(playerid)
{
	if(Player[playerid][CellphoneConsole] == -1)
		return SendClientMessage(playerid, -1, "You must be on the phone to do this.");

	if(Player[playerid][CellphoneConsole] == 911)
		return SendClientMessage(playerid, -1, "You can't do this while calling emergency.");

	Player[playerid][SpeakerPhone] = (Player[playerid][SpeakerPhone]) ? (0) : (1);
	SendClientMessage(playerid, -1, (Player[playerid][SpeakerPhone]) ? ("You have enabled the speaker phone.") : ("You have disabled the speaker phone."));
	return 1;
}

/*CMD:togglenewaccounts(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 6)
		return 1;

	if(isnull(params) || strcmp(params, "confirm", true))
		return SendClientMessage(playerid, RED, "Are you sure you want to toggle new account creation? Type  /togglenewaccounts confirm  if you are");

	if(!strcmp(params, "confirm", true))
	{
		new string[128];
		switch(PlayerCreationStatus)
		{
			case 0:
			{
				PlayerCreationStatus = 1;
				SendClientMessage(playerid, YELLOW, "You have turned off the ability to create new accounts.");
				format(string, sizeof(string), "%s has toggled new account creation to off.");
				AdminActionsLog(string);
			}
			case 1:
			{
				PlayerCreationStatus = 0;
				SendClientMessage(playerid, YELLOW, "You have turned on the ability to create new accounts.");
				format(string, sizeof(string), "%s has toggled new account creation to on.");
				AdminActionsLog(string);
			}
		}
	}
	return 1;
}*/

CMD:emtdoor(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 3)
		return 1;

	if(!IsPlayerInRangeOfPoint(playerid, 0.7, 1589.8569, 1771.5740, -34.8289) && !IsPlayerInRangeOfPoint(playerid, 0.7, 1587.6411, 1771.5760, -34.8841))
		return SendClientMessage(playerid, -1, "You aren't near the employee door.");

	new string[128];
	switch(LSMDDoorLock)
	{
		case 0:
		{
			format(string, sizeof(string), "* %s types a code into the keypad and unlocks the door.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
			LSMDDoorLock = 1;
		}
		case 1:
		{
			format(string, sizeof(string), "* %s types a code into the keypad and locks the door.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
			LSMDDoorLock = 0;
		}
	}
	return 1;
}

CMD:rotatelogs(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 4)
		return 1;

	RotateLogs();
	SendClientMessage(playerid, -1, "You have rotated the logs.");
	return 1;
}

//Not sure if new commands have a special file or not
CMD:searchweapon(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(isnull(params))
		return SendClientMessage(playerid, -1, "SYNTAX: /searchweapons [weaponid]");

	if(!IsNumeric(params))
		return SendClientMessage(playerid, -1, "Weapon ID must be a number.");

	new wId = strval(params),
		str[128];

	if(wId > 46 || wId < 1)
		return SendClientMessage(playerid, -1, "Invalid Weapon ID: Range 1 - 46");

	new weaps[13][2];
	foreach(Player, p)
	{
		for (new i = 0; i < 13; i++)
		{
		    GetPlayerWeaponData(p, i, weaps[i][0], weaps[i][1]);
		    if(weaps[i][0] == wId)
		    {
		    	format(str, sizeof(str), "(%d) %s has weapon ID %d", p, GetName(p), wId);
		    	SendClientMessage(playerid, -1, str);
		    	break;
		    }
		}
	}

	return 1;
}

enum last10bans_
{
	Name[MAX_PLAYER_NAME],
	Ip[32],
};

new Last10Bans[10][last10bans_];

stock LogLastBan(name[], ip[])
{
	for(new i = 9; i != -1; i--)
	{
		if(i != 0)
		{
			format(Last10Bans[i][Name], MAX_PLAYER_NAME, "%s", Last10Bans[i - 1][Name]);
			format(Last10Bans[i][Ip], 32, "%s", Last10Bans[i - 1][Ip]);
		}
		else
		{
			format(Last10Bans[i][Name], MAX_PLAYER_NAME, "%s", name);
			format(Last10Bans[i][Ip], 32, "%s", ip);
		}
	}
	return 1;
}

CMD:last10bans(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new string[128], count;

	SendClientMessage(playerid, -1, "------------------------------------ Last 10 Bans ------------------------------------");
	for(new i; i < 10; i++)
	{
		format(string, sizeof(string), "%s | %s", Last10Bans[i][Name], Last10Bans[i][Ip]);
		if(strlen(string) > 3)
		{
			SendClientMessage(playerid, GREY, string);
			count++;
		}
	}
	if(count < 1)
		SendClientMessage(playerid, -1, "No recent bans at this time.");
	SendClientMessage(playerid, -1, "------------------------------------ Last 10 Bans ------------------------------------");
	return 1;
}

CMD:unlockcreation(playerid)
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(PlayerCreationDisabled == 0)
		return SendClientMessage(playerid, WHITE, "Player creation isn't disabled at the moment!");

	PlayerCreationDisabled = 0;
	SendToAdmins(-1, "Player creation is now enabled!!", 0);
	CallRemoteFunction("IRC_Message", "s", "03Player creation is now enabled!");
	return 1;
}

CMD:lockcreation(playerid)
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(PlayerCreationDisabled == 1)
		return SendClientMessage(playerid, WHITE, "Player creation is already disabled!");

	PlayerCreationDisabled = 1;
	SendToAdmins(-1, "Player creation is now disabled!!", 0);
	CallRemoteFunction("IRC_Message", "s", "04Player creation is now disabled!");
	return 1;
}

CMD:characterkill(playerid, params[])
{
	if(isnull(params) || strcmp(params, "confirm", true))
		return SendClientMessage(playerid, RED, "Are you sure you would like to character kill? Type \"/characterkill confirm\" to confirm");

	if(Player[playerid][PlayingHours] < 20)
		return SendClientMessage(playerid, -1, "You need 20 playing hours to character kill.");

	ShowPlayerDialog(playerid, DIALOG_CHARACTER_KILL_1, DIALOG_STYLE_MSGBOX, "{FF0000}Character Kill", "{FFFFFF}Character Kill (CK) - The {FF0000}permanent{FFFFFF} death of a character\n\nA character kill will result in an un-appealable ban placed on the account.\n\nIt will also result in the following:\n-Loss of House\n-Loss of Business\n\nAre you still sure you would like to do this?", "Yes", "No");
	return 1;
}

CMD:hours(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 1)
		return 1;

	new string[128], id;
	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, -1, "SYNTAX: /hours [playerid]");

	if(!IsPlayerConnected(id))
		return SendClientMessage(playerid, -1, "That player isn't connected.");

	format(string, sizeof(string), "%s | %d hours", GetName(id), Player[id][PlayingHours]);
	SendClientMessage(playerid, -1, string);
	return 1;
}

CMD:remotehours(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new string[128], name[MAX_PLAYER_NAME];

	if(sscanf(params, "s[24]", name))
		return SendClientMessage(playerid, -1, "SYNTAX: /remotehours [name]");

	if(!IsPlayerRegistered(name))
		return SendClientMessage(playerid, WHITE, "That player doesn't exist.");

	format(string, sizeof(string), "%s | %d hours", name, GetRemoteIntValue(name, "PlayingHours"));
	SendClientMessage(playerid, -1, string);
	return 1;
}

CMD:playerstatus(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new string[128], name[MAX_PLAYER_NAME];

	if(sscanf(params, "s[24]", name))
		return SendClientMessage(playerid, -1, "SYNTAX: /playerstatus [name]");

	if(!IsPlayerRegistered(name))
		return SendClientMessage(playerid, WHITE, "That player doesn't exist.");

	new tmpint = GetRemoteIntValue(name, "Banned"), banstr[64];
	switch(tmpint)
	{
		case -1:
		format(banstr, sizeof(banstr), "Unbanned");
		case 0:
		format(banstr, sizeof(banstr), "Offline");
		case 1:
		format(banstr, sizeof(banstr), "Banned");
		case 2:
		format(banstr, sizeof(banstr), "Permabanned");
		case 3:
		format(banstr, sizeof(banstr), "Tempbanned");
	}

	if(tmpint == 1 || tmpint == 2)
	{
		format(string, sizeof(string), "%s | Banned | Ban reason: %s | Banned by: %s", name, GetRemoteStringValue(name, "BannedReason"), GetRemoteStringValue(name, "BannedBy"));
		SendClientMessage(playerid, -1, string);
	}
	else if(tmpint == 3)
	{
		new tmpbantime = GetRemoteIntValue(name, "TempbanTime") - gettime();
		new tmpbantime2, tmpbanstr[128];

		if(tmpbantime < 3600)
		{
			tmpbantime2 = tmpbantime / 60;
			format(tmpbanstr, sizeof(tmpbanstr), "%d M", tmpbantime2);
		}
		else if(tmpbantime < 86400)
		{
			tmpbantime2 = tmpbantime / 60;
			tmpbantime = tmpbantime2 / 60;
			format(tmpbanstr, sizeof(tmpbanstr), "%d H", tmpbantime);
		}
		else
		{
			tmpbantime2 = tmpbantime / 84600;
			format(tmpbanstr, sizeof(tmpbanstr), "%d D", tmpbantime2);
		}

		format(string, sizeof(string), "%s | Tempbanned | Tempban reason: %s | Tempbanned by: %s | Tempban Duration: %s | Tempban Level: %d", name, GetRemoteStringValue(name, "BannedReason"), GetRemoteStringValue(name, "BannedBy"), tmpbanstr, GetRemoteIntValue(name, "TempbanLevel"));
		SendClientMessage(playerid, -1, string);
	}
	else
	{
		format(string, sizeof(string), "%s | %s", name, banstr);
		SendClientMessage(playerid, -1, string);
	}
	return 1;
}

/////// RAFFle VIppp

CMD:editvipraffle(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 3) // Admin level?
		return 1;

	ShowPlayerDialog(playerid, DIALOG_EDITVIP_MAIN, DIALOG_STYLE_LIST, "VIP Raffle Setup", VipRaffleInformation(), "Edit", "Close");
	return 1;
}

stock VipRaffleInformation()
{
	new rAct = VipRaffleInfo[0][rActive],
		rFee = VipRaffleInfo[0][rEntryFee],
		rMon = VipRaffleInfo[0][rMoney],
		rMats1 = VipRaffleInfo[0][rMaterials1],
		rMats2 = VipRaffleInfo[0][rMaterials2],
		rMats3 = VipRaffleInfo[0][rMaterials3],
		rCoc = VipRaffleInfo[0][rCocaine],
		rPt = VipRaffleInfo[0][rPot],
		rSpd = VipRaffleInfo[0][rSpeed],
		rTkn = VipRaffleInfo[0][rTokens],
		rDraw = VipRaffleInfo[0][rDrawDate];
	new str[256];
	format(str, sizeof(str), "Token Fee: %d\n-Prizes-\nMoney: %d\nStreet Materials: %d\nStandard Materials: %d\nMilitary Materials: %d\nCocaine: %d\nPot: %d\nSpeed: %d\nTokens: %d\n--\n%s\nDraw Date: %d(seconds)", rFee, rMon, rMats1, rMats2, rMats3, rCoc, rPt, rSpd, rTkn, (rAct) ? ("Active") : ("Not Active"), rDraw);
	print(str);
	return str;
}

stock GetVIPRaffleEntriesCount(playerid) // Long ass stock names FTW
{
	new qStr[256];
	mysql_format(MYSQL_MAIN, qStr, sizeof(qStr), "SELECT NULL FROM VipRaffle WHERE name = '%e'", Player[playerid][NormalName]);
	new Cache:cache = mysql_query(MYSQL_MAIN, qStr);
	new cnt = cache_get_row_count();
	cache_delete(cache);
	return cnt;
}

stock LoadVIPRaffle() // Will probably make multi raffles later on, its basically setup for that.. 1 for now
{
	new qStr[512];
	format(qStr, sizeof(qStr), "CREATE TABLE IF NOT EXISTS VipRaffleStats (active INT, fee INT, money INT, mats INT, coc INT, pot INT, speed INT, tokens INT, draw INT)");
	mysql_query(MYSQL_MAIN, qStr);

	format(qStr, sizeof(qStr), "SELECT * FROM VipRaffleStats");
	new Cache:cache = mysql_query(MYSQL_MAIN, qStr), count = cache_get_row_count();

	if(count == 1)
	{
		VipRaffleInfo[0][rActive] = cache_get_field_content_int(0, "active");
		VipRaffleInfo[0][rEntryFee] = cache_get_field_content_int(0, "fee");
		VipRaffleInfo[0][rMoney] = cache_get_field_content_int(0, "money");
		VipRaffleInfo[0][rMaterials1] = cache_get_field_content_int(0, "mats1");
		VipRaffleInfo[0][rMaterials2] = cache_get_field_content_int(0, "mats2");
		VipRaffleInfo[0][rMaterials3] = cache_get_field_content_int(0, "mats3");
		VipRaffleInfo[0][rCocaine] = cache_get_field_content_int(0, "coc");
		VipRaffleInfo[0][rPot] = cache_get_field_content_int(0, "pot");
		VipRaffleInfo[0][rSpeed] = cache_get_field_content_int(0, "speed");
		VipRaffleInfo[0][rTokens] = cache_get_field_content_int(0, "tokens");
		VipRaffleInfo[0][rDrawDate] = cache_get_field_content_int(0, "draw");

		print("Loaded VIP Raffle.");
	}
	else
		print("No VIP Raffle to load.");

	cache_delete(cache);
	return 1;
}

stock SaveVIPRaffle()
{
	new rAct = VipRaffleInfo[0][rActive],
			rFee = VipRaffleInfo[0][rEntryFee],
			rMon = VipRaffleInfo[0][rMoney],
			rMats1 = VipRaffleInfo[0][rMaterials1],
			rMats2 = VipRaffleInfo[0][rMaterials2],
			rMats3 = VipRaffleInfo[0][rMaterials3],
			rCoc = VipRaffleInfo[0][rCocaine],
			rPt = VipRaffleInfo[0][rPot],
			rSpd = VipRaffleInfo[0][rSpeed],
			rTkn = VipRaffleInfo[0][rTokens],
			rDraw = VipRaffleInfo[0][rDrawDate];
	new qStr[512];
	new Cache:cache = mysql_query(MYSQL_MAIN, "SELECT * FROM VipRaffleStats");
	if(cache_get_row_count() == 0)
		mysql_format(MYSQL_MAIN, qStr, sizeof(qStr), "INSERT INTO VipRaffleStats (active, fee, money, mats1, mats2, mats3, coc, pot, speed, tokens, draw) VALUES ('%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d')", rAct, rFee, rMon, rMats1, rMats2, rMats3, rCoc, rPt, rSpd, rTkn, rDraw);
	else
		mysql_format(MYSQL_MAIN, qStr, sizeof(qStr), "UPDATE VipRaffleStats SET active = %d, fee = %d, money = %d, mats1 = %d, mats2 = %d, mats3 = %d, coc = %d, pot = %d, speed = %d, tokens = %d, draw = %d", rAct, rFee, rMon, rMats1, rMats2, rMats3, rCoc, rPt, rSpd, rTkn, rDraw);

	mysql_query(MYSQL_MAIN, qStr, false);
	cache_delete(cache);

	print("VIP Raffle Saved.");
	return 1;
}

stock AddVIPRaffleEntry(playerid)
{
	new qStr[512];
	format(qStr, sizeof(qStr), "CREATE TABLE IF NOT EXISTS VipRaffle (name VARCHAR, fee INTEGER)");
	mysql_query(MYSQL_MAIN, qStr, false);

	mysql_format(MYSQL_MAIN, qStr, sizeof(qStr), "INSERT INTO VipRaffle (name, fee) VALUES ('%e', '%d')", Player[playerid][NormalName], VipRaffleInfo[0][rEntryFee]);
	mysql_query(MYSQL_MAIN, qStr, false);
}

stock VIPRaffleWinner()
{
	new Cache:cache = mysql_query(MYSQL_MAIN, "SELECT * FROM VipRaffle"),
	count = cache_get_row_count(),
	winner = random(count),
	wName[24],
	query[384],
	string[128],
	rMon = VipRaffleInfo[0][rMoney],
	rMats1 = VipRaffleInfo[0][rMaterials1],
	rMats2 = VipRaffleInfo[0][rMaterials2],
	rMats3 = VipRaffleInfo[0][rMaterials3],
	rCoc = VipRaffleInfo[0][rCocaine],
	rPt = VipRaffleInfo[0][rPot],
	rSpd = VipRaffleInfo[0][rSpeed],
	rTkn = VipRaffleInfo[0][rTokens];

	if(count < 1)
	{
		print("no entries when ended.. "); // Should never happen?
		return 1;
	}

	cache_get_field_content(winner, "name", wName);
	cache_delete(cache);
	mysql_query(MYSQL_MAIN, "DELETE FROM VipRaffle", false);

	if(IsPlayerRegistered(wName)){

		format(string, sizeof(string), "Congratulations on winning the VIP Raffle! Your prize(s) have been added to your account.");
		new id = GetPlayerIDEx(wName);

		if(!IsPlayerConnectedEx(id))
		{
			rMon += GetRemoteIntValue(wName, "BankMoney");
			rMats1 += GetRemoteIntValue(wName, "Materials");
			rMats2 += GetRemoteIntValue(wName, "Materials1");
			rMats3 += GetRemoteIntValue(wName, "Materials2");
			rCoc += GetRemoteIntValue(wName, "Cocaine");
			rPt += GetRemoteIntValue(wName, "Pot");
			rSpd += GetRemoteIntValue(wName, "Speed");
			rTkn += GetRemoteIntValue(wName, "VipTokens");

			mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE playeraccounts SET BankMoney = '%d', Materials = '%d', Materials1 = '%d', Materials2 = '%d', Cocaine = '%d', Pot = '%d', Speed = '%d', VipTokens = '%d', Note = '%e' WHERE NormalName = '%e'", rMon, rMats1, rMats2, rMats3, rCoc, rPt, rSpd, rTkn, wName);
			mysql_query(MYSQL_MAIN, query, false);
		}
		else
		{
			if(rMon != 0)
			{
				Player[id][BankMoney] += rMon;
			}
			if(rMats1 != 0)
			{
				Player[id][Materials][0] += rMats1;
			}
			if(rMats2 != 0)
			{
				Player[id][Materials][1] += rMats2;
			}
			if(rMats3 != 0)
			{
				Player[id][Materials][2] += rMats3;
			}
			if(rCoc != 0)
			{
				Player[id][Cocaine] += rCoc;
			}
			if(rPt != 0)
			{
				Player[id][Pot] += rPt;
			}
			if(rSpd != 0)
			{
				Player[id][Speed] += rSpd;
			}
			if(rTkn != 0)
			{
				Player[id][VipTokens] += rTkn;
			}
			SendClientMessage(id, -1, "You've won the VIP Raffle.");
		}
	}
	mysql_format(MYSQL_MAIN, query, sizeof(query), "INSERT INTO VipRaffleWinners (name) VALUES ('%e')", wName);
	mysql_query(MYSQL_MAIN, query, false);

	format(string, sizeof(string), "%s has won the VIP Raffle!", wName, rafflePot);
	SendToAdmins(RED, string, 0);
	return 1;
}

stock VIPLockerDialog(playerid)
{
		return ShowPlayerDialog(playerid, 8081, DIALOG_STYLE_LIST, "VIP Locker", "Golf Club (40 tokens)\nSkills\nEnter Raffle\nCustom Number\nVIP Vehicles\n", "Select", "Cancel");
}

CMD:fixnormalname(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 3)
		return 1;

	new id;
	if(sscanf(params, "d", id))
		return SendClientMessage(playerid, -1, "SYNTAX: /fixnormalname [id]");

	if(!IsPlayerConnected(id))
		return SendClientMessage(playerid, -1, "That player isn't connected.");

	if(!strcmp(GetName(id), Player[id][NormalName], true))
		return SendClientMessage(playerid, -1, "That player's normal name is already the same as their name.");

	format(Player[id][NormalName], 255, "%s", GetName(id));
	new string[128];
	format(string, sizeof(string), "You have set %s's normal name to their name.", GetName(id));
	SendClientMessage(playerid, -1, string);
	format(string, sizeof(string), "%s has fixed %s's normal name.", Player[playerid][AdminName], GetName(id));
	AdminActionsLog(string);
	StatLog(string);
	return 1;
}

stock GetPlayerTotalWealth(playerid)
{
	new wealth;

	wealth += Player[playerid][Money] + Player[playerid][BankMoney] + Player[playerid][CheckBalance];

	if(Player[playerid][House] > 0)
		wealth += IsItemInStorage(Player[playerid][House], CONTAINER_TYPE_HOUSE, ITEM_TYPE_CASH, 0, 1);
	if(Player[playerid][House2] > 0)
		wealth += IsItemInStorage(Player[playerid][House2], CONTAINER_TYPE_HOUSE, ITEM_TYPE_CASH, 0, 1);

	if(Player[playerid][Business] > 0)
		wealth += IsItemInStorage(Player[playerid][Business], CONTAINER_TYPE_BIZ, ITEM_TYPE_CASH, 0, 1);

	return wealth;
}

CMD:listvip(playerid)
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new b, s, g, a;
	foreach(Player, i)
	{
		if(Player[i][VipRank] == 1)
			b++;
		if(Player[i][VipRank] == 2)
			s++;
		if(Player[i][VipRank] == 3 || Player[i][VipRank] == 4)
			g++;
		if(Player[i][VipRank] == 5)
			a++;
	}

	new t = b + s + g + a;

	new string[128];
	format(string, sizeof(string), "There is currently %d VIP's connected.", t);
	SendClientMessage(playerid, -1, string);
	format(string, sizeof(string), "%d bronze, %d silver, %d gold(+) & %d admins", b, s, g, a);
	SendClientMessage(playerid, -1, string);
	return 1;
}

CMD:entermodshop(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "You can't do this unless you're in a vehicle.");

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, ModShopPos[0], ModShopPos[1], ModShopPos[2]))
		return SendClientMessage(playerid, -1, "You are not near the Wheels Arch Angels mod shop.");

	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		return SendClientMessage(playerid, -1, "You must be the driver of the vehicle to use this command.");

	if(ModShop_Locked == 1)
		return SendClientMessage(playerid, WHITE, "The mod shop is currently closed.");

	new supported_cars[] =
	{
		558, 559, 560, 561, 562, 565
	};

	new supported = 0, veh = GetPlayerVehicleID(playerid), model = GetVehicleModel(veh);
	for(new i; i < sizeof(supported_cars); i++)
	{
		if(supported_cars[i] == model)
		{
			supported = 1;
			break;
		}
	}

	if(supported == 0)
		return SendClientMessage(playerid, WHITE, "Sorry, we don't mod that here.");

	new sql = GetVSQLID(veh);
	if(sql == 0)
		return 1;

	SetPVarInt(playerid, "InWheelArchAngels", 1);
	SetVehiclePos(veh, -2722.8525, 217.4588, 4.1910);
	SetVehicleZAngle(veh, 90.0);
	return 1;
}

CMD:enterpns(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "You can't do this unless you're in a vehicle.");

	new Float:vhealth, veh = GetPlayerVehicleID(playerid);
	GetVehicleHealth(veh, vhealth);
	if(vhealth < 600.0)
		return SendClientMessage(playerid, -1, "After a quick inspection, your vehicle is too damaged for us to repair and will require a mechanic.");

	new pns = GetClosestPNS(playerid);

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, paynsprays[pns][0], paynsprays[pns][1], paynsprays[pns][2]))
		return SendClientMessage(playerid, -1, "You are not near any Pay n Sprays.");

	if(PNS_InUse[pns] == 1)
		return SendClientMessage(playerid, -1, "That Pay 'n' Spray is not available right now! It may be in use or it may be closed, try again later.");

	if(GetCarJackerCarID() == veh)
		return SendClientMessage(playerid, WHITE, "That car is way to hot for us to fix, get it out of here!");

	if(IsAHelicopter(veh))
		return SendClientMessage(playerid, -1, "Sorry, we don't fix those.");

	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		return SendClientMessage(playerid, -1, "You must be the driver of the vehicle to use this command.");

	new sql = GetVSQLID(veh), idx = GetVIndex(sql);
	if(sql == 0)
		return 1;

	if(Jobs[Veh[idx][Job]][JobType] == JOB_GARBAGEMAN || Jobs[Veh[idx][Job]][JobType] == JOB_TRUCKER)
		return SendClientMessage(playerid, -1, "Sorry, we can't fix that vehicle here.");

	new cost, intHealth = floatround(vhealth);
	switch(intHealth)
	{
		case 850 .. 899: cost = 25;
		case 800 .. 849: cost = 50;
		case 750 .. 799: cost = 75;
		case 700 .. 749: cost = 100;
		case 650 .. 699: cost = 125;
		case 600 .. 649: cost = 150;
		default: cost = 0;
	}

	if(Player[playerid][PlayingHours] < 10 && !strcmp(Veh[idx][Owner], GetName(playerid), true))
		cost = 0;

	new string[128];
	if(Groups[Player[playerid][Group]][CommandTypes] == 1 && Groups[Veh[idx][Group]][CommandTypes] == 1)
	{
		if(Groups[Player[playerid][Group]][SafeMoney] < cost)
		{
			if(Player[playerid][Money] < cost)
				return SendClientMessage(playerid, -1, "The LSPD nor you can afford to fix this vehicle.");
		}
		format(string, sizeof(string), "Please wait while we fix up your vehicle. It will cost the LSPD %s.", PrettyMoney(cost));
	}
	else if(Player[playerid][Money] < cost)
	{
		return SendClientMessage(playerid, -1, "You do not have enough funds on you to pay.");
	}

	if(isnull(string))
		format(string, sizeof(string), "Please wait while we fix up your vehicle. It will cost you %s.", PrettyMoney(cost));

	SetVehiclePos(veh, paynsprays[pns][3], paynsprays[pns][4], paynsprays[pns][5]);
	SetVehicleZAngle(veh, paynsprays[pns][6]);

	SendClientMessage(playerid, -1, string);

	FreezePlayer(playerid, 5500);
	PNS_InUse[pns] = 1;
	
	defer PNS_Timer(playerid);
	
	SetPVarInt(playerid, "PNS_Cost", cost);
	SetPVarInt(playerid, "PNS_Using", pns + 1);
	UpdateDynamic3DTextLabelText(PayNSprayLabels[pns], GREEN, "This Pay n Spray is currently occupied.");
	return 1;
}

timer PNS_Timer[5000](playerid)
{
	new pns = GetPVarInt(playerid, "PNS_Using") - 1;

	if(IsPlayerInAnyVehicle(playerid))
	{
		new veh = GetPlayerVehicleID(playerid), sql = GetVSQLID(veh), idx = GetVIndex(sql), cost = GetPVarInt(playerid, "PNS_Cost");

		RepairVehicle(veh);
		Veh[idx][vHealth] = 1000;
		SetVehicleHealth(veh, Veh[idx][vHealth]);
		PlayerPlayNearbySound(playerid, 1133);

		if(Groups[Player[playerid][Group]][CommandTypes] == 1 && Groups[Veh[idx][Group]][CommandTypes] == 1)
		{
			if(Groups[Player[playerid][Group]][SafeMoney] >= cost)
				Groups[Player[playerid][Group]][SafeMoney] -= cost;
			else
				Player[playerid][Money] -= cost;
		}
		else
			Player[playerid][Money] -= cost;

		SendClientMessage(playerid, -1, "We're all done, let's hope you're not back here too soon.");

		if(paynsprays[pns][7] == 0.00 || paynsprays[pns][8] == 0.00)
		{
			SetVehiclePos(veh, paynsprays[pns][0], paynsprays[pns][1], paynsprays[pns][2] + 1.0);
			SetVehicleZAngle(veh, paynsprays[pns][6]);
		}
		else
		{
			SetVehiclePos(veh, paynsprays[pns][7], paynsprays[pns][8], paynsprays[pns][9] + 1.0);
			SetVehicleZAngle(veh, paynsprays[pns][10]);
		}

		PNS_InUse[pns] = 0;
		DeletePVar(playerid, "PNS_Cost");
		DeletePVar(playerid, "PNS_Using");
		DeletePVar(playerid, "PNS_Timer");
	}
	else
	{
		new cost = GetPVarInt(playerid, "PNS_Cost");

		SendClientMessage(playerid, WHITE, "You are no longer in a vehicle and have been teleported out of the Pay and Spray.");
		Player[playerid][Money] -= cost;

		if(paynsprays[pns][7] == 0.00 || paynsprays[pns][8] == 0.00)
			SetPlayerPos(playerid, paynsprays[pns][0], paynsprays[pns][1], paynsprays[pns][2] + 1.0);
		else
			SetPlayerPos(playerid, paynsprays[pns][7], paynsprays[pns][8], paynsprays[pns][9] + 1.0);

		PNS_InUse[pns] = 0;
		DeletePVar(playerid, "PNS_Cost");
		DeletePVar(playerid, "PNS_Using");
		DeletePVar(playerid, "PNS_Timer");
	}
	
	UpdateDynamic3DTextLabelText(PayNSprayLabels[pns], GREEN, "Use /enterpns\nto repair your vehicle.");
	return 1;
}

CMD:lockmodshop(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 5)
		return 1;

	ModShop_Locked = !ModShop_Locked;
	if(ModShop_Locked)
		SendClientMessage(playerid, WHITE, "You have locked the mod shop.");
	else SendClientMessage(playerid, WHITE, "You have unlocked the mod shop.");
	return 1;
}

CMD:lockpns(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 5)
		return 1;

	new pns = GetClosestPNS(playerid), string[128];
	PNS_InUse[pns] = !PNS_InUse[pns];
	if(PNS_InUse[pns])
		format(string, sizeof(string), "You have locked Pay n Spray %d, located in %s.", pns, pns_loc[pns]);
	else
		format(string, sizeof(string), "You have unlocked Pay n Spray %d, located in %s.", pns, pns_loc[pns]);
	return SendClientMessage(playerid, -1, string);
}

CMD:gotopns(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new pns;
	if(sscanf(params, "d", pns) || pns < 1 || pns > sizeof(paynsprays))
		return SendClientMessage(playerid, GREY, "SYNTAX: /gotopns [1 - 10]");

	SetPlayerPos(playerid, paynsprays[pns][0], paynsprays[pns][1], paynsprays[pns][2]);

	new string[128];
	format(string, sizeof(string), "You have teleported to Pay n Spray %d, located in %s", pns, pns_loc[pns]);
	SendClientMessage(playerid, -1, string);
	return 1;
}

/*
CMD:getspeed(playerid, params[])
{
	new string[128];
	format(string, sizeof(string), "You're going at %d speed.", GetName(playerid), GetPlayerSpeed(playerid, 0));
	SendClientMessage(playerid, -1, string);
	return 1;
}*/

#if defined MTG_FAIR

//Fair stuff
CMD:djradio(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new string[255];
	for(new i; i < MAX_RADIO_STATIONS; i++)
	{
		if(RadioSettings[i][Available] > 0)
		{
			format(string, sizeof(string), "%s%s\n", string, RadioSettings[i][StationName]);
		}
	}
	ShowPlayerDialog(playerid, DJ_RADIO, DIALOG_STYLE_LIST, "RADIO", string, "Select", "Cancel");
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	if(areaid == DJ_Radius)
	{
		PlayAudioStreamForPlayer(playerid, RadioSettings[DJ_RadioStation][URL]);
		if(GetPVarInt(playerid, "PlayingBoombox"))
			DeletePVar(playerid, "PlayingBoombox");
	}
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	if(areaid == DJ_Radius)
	{
		StopAudioStreamForPlayer(playerid);
	}
	return 1;
}

#endif

stock PlayerHasJob(playerid, type)
{
	if(Jobs[Player[playerid][Job]][JobType] == type)
		return Player[playerid][Job];

	if(Jobs[Player[playerid][Job2]][JobType] == type)
		return Player[playerid][Job2];

	return 0;
}

stock LoadPNSExits()
{
	new query[160];
	format(query, sizeof(query), "CREATE TABLE IF NOT EXISTS pns (pnsid INT, exitx FLOAT, exity FLOAT, exitz FLOAT, exitr FLOAT)");
	mysql_query(MYSQL_MAIN, query, false);

	new Cache:cache = mysql_query(MYSQL_MAIN, "SELECT * FROM pns"), count = cache_get_row_count(), i, row;
	while(row < count)
	{
		i = cache_get_field_content_int(row, "pnsid");

		if(i > 0 && i <= sizeof(paynsprays))
		{
			paynsprays[i][7] = cache_get_field_content_float(row, "exitx");
			paynsprays[i][8] = cache_get_field_content_float(row, "exity");
			paynsprays[i][9] = cache_get_field_content_float(row, "exitz");
			paynsprays[i][10] = cache_get_field_content_float(row, "exitr");
		}

		row++;
	}
	cache_delete(cache);
	print("[system] Pay 'n' Spray exit positions loaded.");
}

CMD:setpnsexit(playerid)
{
	if(Player[playerid][AdminLevel] < 5)
		return 1;

	new pns = GetClosestPNS(playerid);

	if(pns < 1 || pns > sizeof(paynsprays))
		return SendClientMessage(playerid, -1, "It seems you are not near a valid pay n spray!");


	new Float:x, Float:y, Float:z, Float:r, query[160];
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, r);

	if(paynsprays[pns][7] == 0.00 || paynsprays[pns][8] == 0.00)
	{
		mysql_format(MYSQL_MAIN, query, sizeof(query), "INSERT INTO pns (pnsid, exitx, exity, exitz, exitr) VALUES (%d, %f, %f, %f, %f)", pns, x, y, z, r);
		mysql_query(MYSQL_MAIN, query, false);
	}
	else
	{
		mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE pns SET exitx = '%f', exity = '%f', exitz = '%f', exitr = '%f' WHERE pnsid = '%d'", x, y, z, r, pns);
		mysql_query(MYSQL_MAIN, query, false);
	}

	paynsprays[pns][7] = x;
	paynsprays[pns][8] = y;
	paynsprays[pns][9] = z;
	paynsprays[pns][10] = r;

	new string[128];
	format(string, sizeof(string), "You have set the exit position of pay n spray %d (%s).", pns, pns_loc[pns]);
	SendClientMessage(playerid, -1, string);
	format(string, sizeof(string), "[PAYNSPRAY] %s has moved pay n spray %d's exit position.", Player[playerid][AdminName], pns);
	AdminActionsLog(string);

	return 1;
}

CMD:ame(playerid, params[])
{
	if(Player[playerid][PrisonID] == 1)
		return SendClientMessage(playerid, WHITE, "You're unable to do this right now!");

	if(isnull(params))
		return SendClientMessage(playerid, WHITE, "SYNTAX: /ame [action]");
	new string[128];
	format(string, sizeof(string), "> %s %s", GetNameEx(playerid), params);
	SendClientMessage(playerid, PLAYERACTIONS, string);
	format(string, sizeof(string), "* %s %s", GetNameEx(playerid), params);
	SetPlayerChatBubble(playerid, string, PLAYERACTIONS, 50, 8000);
	format(string, sizeof(string), "[AME] * %s %s", GetNameEx(playerid), params);
	ICChatLog(string);
	return 1;
}

stock GetHouseApartmentComplex(houseid)
{
	if(houseid < 1 || houseid > MAX_HOUSES || Houses[houseid][HouseType] != 1)
		return 0;

	return Houses[houseid][hExteriorVW] - 65000;
}

CMD:whatisdistance(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;
		
	new string[128], id;
	if(sscanf(params, "u", id))
		return 1;

	format(string, sizeof(string), "The distance between you and %s is %d.", GetName(id), GetDistanceBetweenPlayers(playerid, id));
	SendClientMessage(playerid, -1, string);
	return 1;
}

CMD:paycheckbonus(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 7)
		return 1;

	new bonus, time, timetype[16], hours;
	if(sscanf(params, "ds[16]dD(0)", bonus, timetype, time, hours))
		return SendClientMessage(playerid, WHITE, "SYNTAX: /paycheckbonus [percent] [minutes / hours / days] [value] ([hour limit])");

	if(bonus < 0 || time < 0 || isnull(timetype))
		return SendClientMessage(playerid, WHITE, "Invalid options.");

	new string[128];

	PaycheckBonus = bonus;
	PaycheckHours = hours;

	if(!strcmp(timetype, "minutes", true))
		PaycheckBonusTimeleft = gettime() + (time * 60);
	else if(!strcmp(timetype, "hours", true))
		PaycheckBonusTimeleft = gettime() + (time * 3600);
	else if(!strcmp(timetype, "days", true))
		PaycheckBonusTimeleft = gettime() + (time * 86400);
	else return SendClientMessage(playerid, WHITE, "Invalid time type.");

	dini_IntSet("Assets.ini", "PaycheckBonus", PaycheckBonus);
	dini_IntSet("Assets.ini", "PaycheckHours", PaycheckHours);
	dini_IntSet("Assets.ini", "PaycheckBonusTimeleft", PaycheckBonusTimeleft);

	format(string, sizeof(string), "You have set the paycheck bonus to %d percent and set it to last %d %s. (%d playing hour limit)", bonus, time, timetype, hours);
	SendClientMessage(playerid, WHITE, string);
	format(string, sizeof(string), "%s has set the paycheck bonus to %d percent and set it to last %d %s. (%d playing hour limit)", Player[playerid][AdminName], bonus, time, timetype, hours);
	AdminActionsLog(string);
	return 1;
}

// credits go to: RyDeR`
stock randomString(strDest[], strLen = 10)
{
    while(strLen--)
        strDest[strLen] = random(2) ? (random(26) + (random(2) ? 'a' : 'A')) : (random(10) + '0');
}

stock randomStringNoZero(strDest[], strLen = 10)
{
	while(strLen--)
		strDest[strLen] = random(2) ? (random(26) + (random(2) ? 'a' : 'A')) : ((random(9) + 1) + '0');
}

//MySQL Login Threads

forward OnPlayerLoadPassword(playerid);
public OnPlayerLoadPassword(playerid)
{	
	if(GetPVarInt(playerid, "VALID_ORM") == 0)
		return 1;
	
	switch(orm_errno(Player[playerid][pORM_ID]))
	{
		case ERROR_OK:
		{
			ShowPlayerDialog(playerid, 3894, DIALOG_STYLE_PASSWORD, "Authentication", "Welcome to crea\n\nYou have an account, please enter your password to authenticate.", "Login", "Exit");
			SendClientMessage(playerid, WHITE, "This name is registered. If you're the account owner, please login with your account credentials to proceed.");
		}
		case ERROR_NO_DATA: //This shouldnt happen!
		{
			SendClientMessage(playerid, RED, "Something very bad went wrong! Please contact a developer...");
			KickEx(playerid);
			
			/*if(IsPlayerRegistered(GetName(playerid)))
			{
				SendClientMessage(playerid, ORANGE, "An error occured while loading your player data. Please relog!!");
				KickEx(playerid);
				return 1;
			}
			
			if(PlayerCreationDisabled == 1)
			{
				SendClientMessage(playerid, -1, "Player creation is disabled at this time, try again later.");
				KickEx(playerid);
				return 1;
			}

			new playernamesplit[3][MAX_PLAYER_NAME], pname[MAX_PLAYER_NAME], underscore, illegalchar;
			strcpy(pname, GetName(playerid), 128);
			split(pname, playernamesplit, '_');

			new illegalchars[] =
			{
				'`', '~', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '=', '+',
				'[', '{', ']', '}', '\'', '\\', '|', '"', ';', ':', '?', '/', '.', '>', ',',
				'<', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')'
			}; //"
			
			for(new i; i < strlen(pname); i++)
			{
				if(pname[i] == '_') underscore++;
				for(new x; x < sizeof(illegalchars); x++)
				{
					if(pname[i] == illegalchars[x])
						illegalchar++;
				}
			}

			if(!strlen(playernamesplit[0]) || !strlen(playernamesplit[1]) || underscore >= 2 || illegalchar > 0)
			{
				new NameStr[MAX_PLAYER_NAME];
				format(NameStr, sizeof(NameStr), "NONRPNAME%d", playerid);
				SetPlayerNameEx(playerid, NameStr);
				printf("[system] %s has been forced to the name change menu.", Name);
				ShowPlayerDialog(playerid, 594, DIALOG_STYLE_INPUT, "Roleplay Name", "Please select a new, valid roleplaying name.", "Change", "Cancel");
				SendClientMessage(playerid, WHITE, "Your name is not valid, please pick a new one. Refrain from using tags and include one underscore.");
			}
			else
			{
				if(!IsAccountApproved(GetName(playerid)))
				{
					SendClientMessage(playerid, ORANGE, ACCOUNT_CREATION_STRING);
					SendClientMessage(playerid, ORANGE, ACCOUNT_CREATION_STRING);
					SendClientMessage(playerid, ORANGE, ACCOUNT_CREATION_STRING);
					KickEx(playerid);
					return 1;
				}
				else 
				{
					ShowPlayerDialog(playerid, DIALOG_CREATION_PIN, DIALOG_STYLE_INPUT, "Creation Pin", "Please enter the creation pin given to you by an admin.", "Enter", "Cancel");
				}
				
				//ShowPlayerDialog(playerid, 3895, DIALOG_STYLE_INPUT, "Registration", "Please enter your password to register your new account.", "Register", "Cancel");
				//SendClientMessage(playerid, WHITE, "This username is not registered. If you register, you'll automatically be logged in!");
			}*/
		}
	}
	return 1;
}

forward OnPlayerLoadData(playerid);
public OnPlayerLoadData(playerid)
{
	if(GetPVarInt(playerid, "VALID_ORM") == 0)
		return 1;
	
	new string[128];
	Player[playerid][Authenticated] = 1;

	LoadPlayerToggles(playerid);
	LoadPlayerToys(playerid);
	
	/*Player[playerid][JobCooldown] = (Player[playerid][JobCooldown] > 0) ? (Player[playerid][JobCooldown] + gettime()) : (0);
	Player[playerid][CantFish] = (Player[playerid][CantFish] > 0) ? (Player[playerid][CantFish] + gettime()) : (0);
	Player[playerid][GarbageCooldown] = (Player[playerid][GarbageCooldown] > 0) ? (Player[playerid][GarbageCooldown] + gettime()) : (0);
	Player[playerid][SkillCooldown] = (Player[playerid][SkillCooldown] > 0) ? (Player[playerid][SkillCooldown] + gettime()) : (0);
	Player[playerid][PizzaCooldown] = (Player[playerid][PizzaCooldown] > 0) ? (Player[playerid][PizzaCooldown] + gettime()) : (0);
	Player[playerid][TruckerTestCooldown] = (Player[playerid][TruckerTestCooldown] > 0) ? (Player[playerid][TruckerTestCooldown] + gettime()) : (0);
	Player[playerid][VipTime] = (Player[playerid][VipTime] > 0) ? (Player[playerid][VipTime] + gettime()) : (0);*/
	Player[playerid][JobCooldown] = (Player[playerid][JobCooldown] > gettime()) ? (Player[playerid][JobCooldown]) : (0); //If cooldown is greater than gettime() then don't do anything else set it to 0
	Player[playerid][CantFish] = (Player[playerid][CantFish] > gettime()) ? (Player[playerid][CantFish]) : (0);
	Player[playerid][GarbageCooldown] = (Player[playerid][GarbageCooldown] > gettime()) ? (Player[playerid][GarbageCooldown]) : (0);
	Player[playerid][SkillCooldown] = (Player[playerid][SkillCooldown] > gettime()) ? (Player[playerid][SkillCooldown]) : (0);
	Player[playerid][PizzaCooldown] = (Player[playerid][PizzaCooldown] > gettime()) ? (Player[playerid][PizzaCooldown]) : (0);
	Player[playerid][TruckerTestCooldown] = (Player[playerid][TruckerTestCooldown] > gettime()) ? (Player[playerid][TruckerTestCooldown]) : (0);
	Player[playerid][VipTime] = (Player[playerid][VipTime] > gettime()) ? (Player[playerid][VipTime]) : (0);

	SetPlayerFightingStyle(playerid, Player[playerid][FightStyle]);
	SetPVarInt(playerid, "AdminLevel", Player[playerid][AdminLevel]);
	SetPVarString(playerid, "AdminName", Player[playerid][AdminName]);

	Player[playerid][CriminalOffences] = GetPlayerNumCrimes(GetName(playerid), 0) + GetPlayerNumCrimes(GetName(playerid), 1);

	GetPlayerIp(playerid, Player[playerid][LastIP], 32);
	
	//Car Jacker Job
	if(Jobs[Player[playerid][Job]][JobType] == JOB_CARJACKER || Jobs[Player[playerid][Job2]][JobType] == JOB_CARJACKER)
		Iter_Add(CarJackers, playerid);
	
	//Weapon Config
	SetPlayerMaxHealth(playerid, 110);
	SetPlayerMaxArmour(playerid, 200);
	
	new exit_string[128];
	if(Player[playerid][EnterKey] == 2)
		format(exit_string, sizeof(exit_string), "Go to the door and press ~r~ ~k~~PED_DUCK~ ~w~ to exit the building.");
	else if(Player[playerid][EnterKey] == 8)
		format(exit_string, sizeof(exit_string), "Go to the door and press ~r~ ~k~~PED_SPRINT~ ~w~ to exit the building.");
	else if(Player[playerid][EnterKey] == 16)
		format(exit_string, sizeof(exit_string), "Go to the door and press ~r~ ~k~~VEHICLE_ENTER_EXIT~ ~w~ to exit the building.");
	else if(Player[playerid][EnterKey] == 32)
		format(exit_string, sizeof(exit_string), "Go to the door and press ~r~ ~k~~PED_JUMPING~ ~w~ to exit the building.");
	else
		format(exit_string, sizeof(exit_string), "Go to the door and press ~r~ ~k~~PED_DUCK~ ~w~ to exit the building.");
	PlayerTextDrawSetString(playerid, ExitTextdraw[playerid], exit_string);

	if(Groups[Player[playerid][Group]][CommandTypes] == 9)
	{
		new temp;
		for(new i = 1; i < MAX_BUSINESSES; i++)
		{
			if(Businesses[i][bLinkedGroup] != Player[playerid][Group])
				continue;

			temp++;
		}

		if(temp == 0)
		{
			Player[playerid][Group] = 0;
		}
	}
	
	UpdateNTags(playerid);

	if(Player[playerid][Banned] == 1 || Player[playerid][Banned] == 2)
	{
		new IP[21];
		GetPlayerIp(playerid, IP, sizeof(IP));
		format(string, sizeof(string), "%s | %s | CONNECTING ON A BANNED ACCOUNT | System", IP, GetName(playerid));
		BanLog(string);
		format(string, sizeof(string), "Ban: %s has attempted to login on a banned account.", GetName(playerid));
		BanMessage(playerid);
		KickEx(playerid);
		SendToAdmins(LIGHTRED, string, 0);
		return 1;
	}

	if(Player[playerid][Banned] == 3)
	{
		if(Player[playerid][TempbanTime] > gettime())
		{
			TempBanMessage(playerid);
			KickEx(playerid);
			return 1;
		}
		else
		{
			Player[playerid][TempbanTime] = 0;
			Player[playerid][Banned] = 0;
			format(Player[playerid][BannedReason], 255, "None");
			format(Player[playerid][BannedBy], 255, "None");
			format(Player[playerid][Warning1], 255, "None");
			format(Player[playerid][Warning2], 255, "None");
			format(Player[playerid][Warning3], 255, "None");
			SendClientMessage(playerid, ANNOUNCEMENT, "Tempban has expired. Please don't break the rules again.");
			format(string, sizeof(string), "%s | Player auto-untempbanned | System", GetName(playerid));
			UnbanLog(string);
			format(string, sizeof(string), "Unban: %s has been auto-untempbanned.", GetName(playerid));
			SendToAdmins(ADMINORANGE, string, 0);
		}
	}

	if(PlayerOwnsPhone(playerid) && Player[playerid][PhoneN] == -1)
	{
		mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT * FROM phones WHERE owner = '%s'", Player[playerid][NormalName]);
		new Cache:cache = mysql_query(MYSQL_MAIN, string);
		Player[playerid][PhoneN] = cache_get_field_content_int(0, "number");
		cache_delete(cache);
		SetPVarInt(playerid, "SMS_Alert", 4);
	}

	if(VotingOpen == 0)
		Player[playerid][HasVoted] = 0;

	if(Player[playerid][AdminDuty] == 1)
	{
		if(strlen(Player[playerid][AdminName]) >= 1 || strcmp(Player[playerid][AdminName], "Nothing", true) == 0)
		{
			SendClientMessage(playerid, WHITE, "You are now on admin duty. You will appear on the /admins list and you'll be able to view reports.");

			SetPVarFloat(playerid, "ADutyArmour", GetArmour(playerid));
			SetPVarInt(playerid, "AdminDuty", 1);
			if(Player[playerid][AdminLevel] >= 3)
			{
				SetPlayerHealth(playerid, 500000);
			}

			format(Player[playerid][NormalName], 255, "%s", GetName(playerid));

			SetPlayerNameEx(playerid, Player[playerid][AdminName]);
			SetPlayerSkin(playerid, Player[playerid][AdminSkin]);

			if(Player[playerid][HospitalTime] >= 1)
			{
				Player[playerid][HospitalTime] = 0;
				SetCameraBehindPlayer(playerid);
				SetPlayerPos_Update(playerid, SpawnX, SpawnY, SpawnZ);
				SetPlayerDrunkLevel(playerid, 0);
				SendClientMessage(playerid, WHITE, "You have been de-hospitalized.");
			}

			format(string, sizeof(string), "%s (%s) is now on Admin Duty (just authenticated, but logged on duty).", Player[playerid][AdminName], Player[playerid][NormalName]);
			SendToAdmins(ADMINORANGE, string, 0);

			UpdatePlayerNameColour(playerid);
		}
		else
		{
			SendClientMessage(playerid, WHITE, "You haven't set an administrators' name yet.");
		}
	}

	if(strlen(Player[playerid][AdminName]) < 1)
	{
		format(Player[playerid][AdminName], 128, "Nothing");
	}

	if(strlen(Player[playerid][NormalName]) < 1)
	{
		format(Player[playerid][NormalName], 255, "%s", GetName(playerid));
	}

	if(Player[playerid][EnterKey] != 2 && Player[playerid][EnterKey] != 8 && Player[playerid][EnterKey] != 16 && Player[playerid][EnterKey] != 32)
	{
		Player[playerid][EnterKey] = 2;
	}

	if(strlen(Player[playerid][Password]) < 1)
	{
		ShowPlayerDialog(playerid, 3666, DIALOG_STYLE_INPUT, "Password", "Please change your password.", "Login", "Cancel");
	}

	if(Player[playerid][GroupRank] >= 1 && Player[playerid][Group] < 1)
	{
		Player[playerid][GroupRank] = 0;
	}

	if(Player[playerid][AdminLevel] == -1)
	{
		SendClientMessage(playerid, WHITE, "You are no longer an administrator.");
		Player[playerid][AdminLevel] = 0;
	}

	if(Player[playerid][Banned] == -1)
	{
		SendClientMessage(playerid, WHITE, "Unban Successful.");
		Player[playerid][Banned] = 0;
	}

	if(Player[playerid][AdminLevel] >= 1)
	{
		format(string, sizeof(string), "%s has authenticated (authenticating using their character password).", GetName(playerid));
		SendToAdmins(ADMINORANGE, string, 0);

		UpdateInternalHotelRoomIDIcons(playerid);
	}

	if(Player[playerid][Group] >= 1)
	{
		format(string, sizeof(string), "%s from your group has logged in.", GetName(playerid));
		GroupMessage(playerid, ANNOUNCEMENT, string);

		format(string, sizeof(string), "Group MOTD: %s", Groups[Player[playerid][Group]][MOTD]);
		SendClientMessage(playerid, ANNOUNCEMENT, string);
	}

	if(Player[playerid][Gang] >= 1)
	{
		format(string, sizeof(string), "%s from your gang has logged in.", GetName(playerid));
		SendToGang(Player[playerid][Gang], ANNOUNCEMENT, string);

		format(string, sizeof(string), "Gang MOTD: %s", Gangs[Player[playerid][Gang]][MOTD]);
		SendClientMessage(playerid, ANNOUNCEMENT, string);
	}

	if(Player[playerid][PDBadge] > 0 && Groups[Player[playerid][Group]][CommandTypes] != 1 && Groups[Player[playerid][Group]][CommandTypes] != 3)
		Player[playerid][PDBadge] = 0;

	GivePlayerMoney(playerid, Player[playerid][Money]);

	if(Player[playerid][AdminLevel] >= 1)
	{
		format(string, sizeof(string), "03%s has connected to the SA:MP server.", Player[playerid][AdminName]);
		CallRemoteFunction("IRC_Message", "s", string);
		if(Player[playerid][AdminPIN] == 0)
		{
			TogglePlayerControllable(playerid, false);
			SendClientMessage(playerid, WHITE, "You don't have an admin PIN set. Please now set one, it must be numeric only and 6 characters in length.");
			ShowPlayerDialog(playerid, 9843, DIALOG_STYLE_INPUT, "Authentication (Admin PIN)", "Please enter your desired PIN.", "Done", "Cancel");
		}
		else
		{
			Player[playerid][PINLoginTimer] = defer AdminPINLogin(playerid); 
			SendClientMessage(playerid, WHITE, "You have 20 seconds to login before you are auto-kicked.");
			TogglePlayerControllable(playerid, false);
			ShowPlayerDialog(playerid, 9842, DIALOG_STYLE_PASSWORD, "Authentication (Admin PIN)", "Please enter your additional admin PIN to continue.", "Login", "Cancel");
		}
	}

	if(Player[playerid][HouseKey] > 0)
	{
		new hID = Player[playerid][HouseKey];
		if(Player[playerid][AdminDuty] > 0)
		{
			if(strcmp(Houses[hID][KeyHolder1], Player[playerid][NormalName], true) && strcmp(Houses[hID][KeyHolder2], Player[playerid][NormalName], true))
				Player[playerid][HouseKey] = 0;
		}
		else
		{
			if(strcmp(Houses[hID][KeyHolder1], GetName(playerid), true) && strcmp(Houses[hID][KeyHolder2], GetName(playerid), true))
				Player[playerid][HouseKey] = 0;
		}
	}

	if(Player[playerid][BusinessKey] > 0)
	{
		new biz = Player[playerid][BusinessKey];
		if(Player[playerid][AdminDuty] > 0)
		{
			if(strcmp(Businesses[biz][bKeyOwner1], Player[playerid][NormalName], true) && strcmp(Businesses[biz][bKeyOwner2], Player[playerid][NormalName], true))
				Player[playerid][BusinessKey] = 0;
		}
		else
		{
			if(strcmp(Businesses[biz][bKeyOwner1], GetName(playerid), true) && strcmp(Businesses[biz][bKeyOwner2], GetName(playerid), true))
				Player[playerid][BusinessKey] = 0;
		}
	}

	if(Groups[Player[playerid][Group]][CommandTypes] == 1)
	{
		if(Jobs[Player[playerid][Job]][JobType] != JOB_MECHANIC && Jobs[Player[playerid][Job]][JobType] != JOB_DETECTIVE)
		{
			Player[playerid][Job] = 0;
		}

		if(Jobs[Player[playerid][Job2]][JobType] != JOB_MECHANIC && Jobs[Player[playerid][Job2]][JobType] != JOB_DETECTIVE)
		{
			Player[playerid][Job2] = 0;
		}
	}

	if(Player[playerid][Tutorial] < 1)
	{
		SetSpawnInfo(playerid, 0, Player[playerid][LastSkin], Player[playerid][LastX], Player[playerid][LastY], Player[playerid][LastZ], 0, 0, 0, 0, 0, 0, 0);
		SpawnPlayer(playerid);

		Player[playerid][ResetTimer] = 1;

		SetPlayerInterior(playerid, Player[playerid][LastInterior]);
		SetPlayerVirtualWorld(playerid, Player[playerid][LastWorld]);

		new Flaw = floatround(Player[playerid][LastHealth], floatround_ceil);
		SetPlayerHealth(playerid, Flaw);

		Flaw = floatround(Player[playerid][LastArmour], floatround_ceil);
		SetPlayerArmour(playerid, Flaw);

	}
	else
	{
		PutPlayerInTutorial(playerid, 1);
	}
	new Minute, Hour, Day, Month, Year;
	gettime(Hour, Minute);
	getdate(Year, Month, Day);
	if(Day == Player[playerid][LastLoginDay] && Month == Player[playerid][LastLoginMonth] && Year == Player[playerid][LastLoginYear])
	{
		format(string, sizeof(string), "Welcome back, %s. You last logged in earlier today at %02d:%02d.", GetName(playerid), Player[playerid][LastLoginHour], Player[playerid][LastLoginMinute]);
		SendClientMessage(playerid, WHITE, string);
		if(Player[playerid][PlayingHours] <= 1)
		{
			SendClientMessage(playerid, PINK, "----------------------------------------------------------------------------------------");
			SendClientMessage(playerid, YELLOW, "Have you checked out our forums yet? Go to https://crearoleplay.com");
			SendClientMessage(playerid, YELLOW, "Also, join our Discord! You can find the link on the forums.");
			SendClientMessage(playerid, PINK, "----------------------------------------------------------------------------------------");
		}
	}
	else
	{
		format(string, sizeof(string), "Welcome back, %s. You last logged in on %d/%d/%d at %02d:%02d.", GetName(playerid), Player[playerid][LastLoginDay], Player[playerid][LastLoginMonth], Player[playerid][LastLoginYear], Player[playerid][LastLoginHour], Player[playerid][LastLoginMinute]);
		SendClientMessage(playerid, WHITE, string);
		if(Player[playerid][PlayingHours] <= 1)
		{
			SendClientMessage(playerid, PINK, "----------------------------------------------------------------------------------------");
			SendClientMessage(playerid, YELLOW, "Have you checked out our forums yet? Go to https://crearoleplay.com");
			SendClientMessage(playerid, YELLOW, "Also, join our Discord! You can find the link on the forums.");
			SendClientMessage(playerid, PINK, "----------------------------------------------------------------------------------------");
		}
	}

	if(AnnounceExist == 1)
	{
		if(LastAnnounceDay == Player[playerid][LastLoginDay] && LastAnnounceMonth == Player[playerid][LastLoginMonth] && LastAnnounceYear == Player[playerid][LastLoginYear] && LastAnnounceHour >= Player[playerid][LastLoginHour])
		{
			if((LastAnnounceHour == Player[playerid][LastLoginHour] && LastAnnounceMinute > Player[playerid][LastLoginMinute]) || LastAnnounceHour > Player[playerid][LastLoginHour])
			{
				if(Player[playerid][AdminLevel] < 1)
					ShowPlayerDialog(playerid, DIALOG_LATEST_ANNOUNCEMENT, DIALOG_STYLE_MSGBOX, "{FF4500}Latest Announcement", announcemsg, "Close", "");
				else
					SendClientMessage(playerid, -1, "There is a new announcement to be read! Type /viewannouncement");
			}
		}
		else if(LastAnnounceMonth > Player[playerid][LastLoginMonth] || LastAnnounceYear > Player[playerid][LastLoginYear])
		{
			if(Player[playerid][AdminLevel] < 1)
				ShowPlayerDialog(playerid, DIALOG_LATEST_ANNOUNCEMENT, DIALOG_STYLE_MSGBOX, "{FF4500}Latest Announcement", announcemsg, "Close", "");
			else
				SendClientMessage(playerid, -1, "There is a new announcement to be read! Type /viewannouncement");
		}
		else if(LastAnnounceMonth == Player[playerid][LastLoginMonth] && LastAnnounceDay > Player[playerid][LastLoginDay])
		{
			if(Player[playerid][AdminLevel] < 1)
				ShowPlayerDialog(playerid, DIALOG_LATEST_ANNOUNCEMENT, DIALOG_STYLE_MSGBOX, "{FF4500}Latest Announcement", announcemsg, "Close", "");
			else
				SendClientMessage(playerid, -1, "There is a new announcement to be read! Type /viewannouncement");
		}
	}
	Player[playerid][LastLoginMinute] = Minute;
	Player[playerid][LastLoginHour] = Hour;
	Player[playerid][LastLoginDay] = Day;
	Player[playerid][LastLoginMonth] = Month;
	Player[playerid][LastLoginYear] = Year;
	
	new date = getdate(); //Days since beginning of the year
	//Loyalty System Streak Check
	if(Player[playerid][LoyaltyDailyStreakDay] != date)
	{
		SendClientMessage(playerid, COLOR_LOYALTY, "[LOYALTY] The day has changed since your last login and your playing hour streak has been reset.");
		Player[playerid][LoyaltyDailyStreak] = 0;
	}
	if(Player[playerid][LastLoyaltyYear] == Year) //If last streak year is the current year
	{
		if(Player[playerid][LastLoyaltyDay] != (date - 1) && Player[playerid][LastLoyaltyDay] != date && Player[playerid][LoyaltyStreak] > 0)	//If their last date is not yesterday, reset
		{	
			format(string, sizeof(string), "%s has lost their loyalty streak of %d days.", GetName(playerid), Player[playerid][LoyaltyStreak]);
			LoyaltyLog(string);
			
			Player[playerid][LoyaltyStreak] = 0;	
			SendClientMessage(playerid, COLOR_LOYALTY, "[LOYALTY] You have lost your crea loyalty program streak!");
		}
	}
	else if(Player[playerid][LastLoyaltyYear] == (Year - 1)) //If last streak year was last year
	{
		if(date == 1 && Player[playerid][LastLoyaltyDay] < 365 && Player[playerid][LoyaltyStreak] > 0) //If current date is Jan 1 and last streak day isn't at least Dec 31 (Have to use less than because sometimes Dec 31 is 366th day)
		{
			format(string, sizeof(string), "%s has lost their loyalty streak of %d days.", GetName(playerid), Player[playerid][LoyaltyStreak]);
			LoyaltyLog(string);
			
			Player[playerid][LoyaltyStreak] = 0;	
			SendClientMessage(playerid, COLOR_LOYALTY, "[LOYALTY] You have lost your crea loyalty program streak!");
		}
	}
	else if(Player[playerid][LastLoyaltyYear] - Year > 1 && Player[playerid][LoyaltyStreak] > 0) //If last streak year is more than 1 year ago 
	{
		format(string, sizeof(string), "%s has lost their loyalty streak of %d days.", GetName(playerid), Player[playerid][LoyaltyStreak]);
		LoyaltyLog(string);
		
		Player[playerid][LoyaltyStreak] = 0;	
		SendClientMessage(playerid, COLOR_LOYALTY, "[LOYALTY] You have lost your crea loyalty program streak!");
	}
	
	if(strlen(Player[playerid][LoyaltyRewards]) > 4)
		SendClientMessage(playerid, COLOR_LOYALTY, "[LOYALTY] You have unclaimed rewards! Type /loyaltyredeem at the loyalty shop!");
	
	if(Player[playerid][LoyaltyStreak] >= 100 && Player[playerid][LoyaltyNTag] == 0)
	{
		SendClientMessage(playerid, COLOR_LOYALTY, "Congratulations on 100+ days of crea loyalty! You have unlocked the exclusive loyalty N-Tag.");
		Player[playerid][LoyaltyNTag] = 1;
	}
	
	SetPlayerSkin(playerid, Player[playerid][LastSkin]);
	SetPlayerScore(playerid, Player[playerid][LoyaltyStreak]);
	Player[playerid][AFKKicked] = 0;

	LoadPlayerVehicles(playerid);

	if(Player[playerid][AdminLevel] < 1)
	{
		if(strfind(Player[playerid][Note], "Nothing", false))
		{
			if(strlen(Player[playerid][Note]) == 0)
			{
				format(Player[playerid][Note], 128, "Nothing");
			}
			else
			{
				new temp[255];
				format(temp, sizeof(temp), "{F6970C}OFFLINE NOTE FROM AN ADMIN:\n{FFFFFF}%s\n", Player[playerid][Note]);
				if(strlen(Player[playerid][PrisonReason]) > 1 && Player[playerid][PrisonID] == 1)
					format(temp, sizeof(temp), "\n{FFFFFF}You are in prison for the reason:\n%s", Player[playerid][PrisonReason]);
				ShowPlayerDialog(playerid, 3934, DIALOG_STYLE_MSGBOX, "Note from an admin", temp, "Close", "");

				format(Player[playerid][Note], 128, "Nothing");
			}
		}
		else
		{
			format(Player[playerid][Note], 128, "Nothing");
		}
	}

	if(Player[playerid][RemoteWarn] == 1)
	{
		SendClientMessage(playerid, RED, "You received a warn while offline. Use /playerwarns to review it.");
		SendClientMessage(playerid, RED, "Take a screenshot of your new warn to use in your appeals. This is your responsibility.");
		Player[playerid][RemoteWarn] = 0;
	}

	new Cache:cache, count, name[25], isrepeat, query[150], row;
	mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT name FROM connections WHERE ip = '%e'", GetPlayersIP(playerid));
	cache = mysql_query(MYSQL_MAIN, query);
	count = cache_get_row_count();

	while(row < count)
	{
		cache_get_field_content(row, "name", name);
		if(!strcmp(Player[playerid][NormalName], name, true) && Player[playerid][AdminDuty])
		{
			isrepeat = 1;
			count = 0;
		}
		else if(!strcmp(GetName(playerid), name, true) && !Player[playerid][AdminDuty])
		{
			isrepeat = 1;
			count = 0;
		}
		row++;
	}
	cache_delete(cache);

	if(Player[playerid][AdminDuty])
		format(name, sizeof(name), "%s", Player[playerid][NormalName]);
	else format(name, sizeof(name), "%s", GetName(playerid));

	if(!isrepeat)
	{
		mysql_format(MYSQL_MAIN, query, sizeof(query), "INSERT INTO connections (name, ip, date) VALUES ('%e', '%e', '%e')", name, GetPlayersIP(playerid), GetDate());
		mysql_query(MYSQL_MAIN, query, false);
	}
	else
	{
		mysql_format(MYSQL_MAIN, query, sizeof(query), "UPDATE connections SET date = '%e' WHERE name = '%e' AND ip = '%e'", GetDate(), name, GetPlayersIP(playerid));
		mysql_query(MYSQL_MAIN, query, false);
	}

	return 1;
}

forward OnPlayerRegister(playerid);
public OnPlayerRegister(playerid)
{
	printf("[MySQL] %s has been registered with SQLID %d.", GetName(playerid), Player[playerid][pSQL_ID]);

	format(Player[playerid][CreationTime], 128, "%s", GetDate());
	
	new query[128];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "INSERT INTO account_directory (sqlid, name) VALUES (%d, '%e')", Player[playerid][pSQL_ID], GetName(playerid));
	mysql_query(MYSQL_MAIN, query, false);
	
	CreatePlayerToys(playerid);
	
	SavePlayerData(playerid);
	return 1;
}

CMD:vstore(playerid, params[])
{
	new weapon = GetPlayerWeapon(playerid), sql = GetNearestCarSQL(playerid), idx = GetVIndex(sql), engine, lights, alarm, doors, bonnet, boot, objective;

	if(sql == 0 || idx == -1)
		return 1;

	GetVehicleParamsEx(Veh[idx][Link], engine, lights, alarm, doors, bonnet, boot, objective);

	if(!IsPlayerInRangeOfCar(playerid, 5))
		return SendClientMessage(playerid, -1, "You're too far from any vehicle");

	if(GetPlayerVehicleID(playerid) != 0)
		return SendClientMessage(playerid, -1, "You cannot store a weapon while in a vehicle");

	if(!HasVehicleAccess(playerid, sql))
		return SendClientMessage(playerid, -1, "You don't have the keys to this vehicle");

	if(boot != 1)
		return SendClientMessage(playerid, -1, "The vehicles trunk must be open");

	new type[32], amount;
	if(sscanf(params, "s[32]D(0)", type, amount))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /vstore [type] ([amount])");
		SendClientMessage(playerid, GREY, "Types: weapon, gascan, streetmats, standardmats, militarymats, pot, cocaine, speed, money, poorkevlar, standardkevlar, militarykevlar");
		return SendClientMessage(playerid, GREY, "Types: bomb, engineparts, fishingrod");
	}

	if(GetPVarInt(playerid, "StoreTimer") > gettime())
		return 1;
	SetPVarInt(playerid, "StoreTimer", gettime() + 3);

	#define trunk_option(%0) !strcmp(type, %0, true)
	if(trunk_option("weapon"))
	{
		if(weapon == 0)
			return SendClientMessage(playerid, -1, "You're not holding any weapons!");

		if(weapon == 46)
			return SendClientMessage(playerid, -1, "You cannot store parachutes!");

		if(!PlayerHasWeapon(playerid, weapon))
			return 1;

		new weapon_name[32], weapon_found;
		format(weapon_name, 32, "%s", weapons[weapon]);
		weapon_found = strfind(Veh[idx][TrunkContents], weapon_name, true);

		if(GetStoredValue(Veh[idx][TrunkContents]) + wepsize[weapon] > GetVehicleStorageSize(GetVehicleModel(Veh[idx][Link])))
			return SendClientMessage(playerid, -1, "There is no more room to store that weapon.");

		if(weapon_found != -1)
		{
			new temp[255], temp2[255];
			strcpy(temp2, Veh[idx][TrunkContents], sizeof(temp2));

			for(new i = weapon_found; i > 0; i--)
			{
				if(temp2[i] == '|')
				{
					weapon_found = i + 1;
					break;
				}
			}

			if(Veh[idx][TrunkContents][weapon_found - 1] != '|')
				weapon_found = 0;

			for(new i = weapon_found; i < strlen(temp2); i++)
			{
				if(temp2[i] == '|')
				{
					strmid(temp, temp2, weapon_found, i);
					strdel(temp2, weapon_found, i + 1);
					break;
				}
			}

			format(temp2, 255, "%s%d %s|", temp2, GetStoredAmountOf(Veh[idx][TrunkContents], weapon_name) + 1, weapon_name);

			if(!isnull(temp2))
				format(Veh[idx][TrunkContents], 255, "%s", temp2);

			AdjustWeapon(playerid, weapon, 0);

			new string[128];
			format(string, sizeof(string), "* %s has put a weapon in the vehicles trunk.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
		else
		{
			format(Veh[idx][TrunkContents], 255, "%s1 %s|", Veh[idx][TrunkContents], weapon_name);
			AdjustWeapon(playerid, weapon, 0);
			new string[128];
			format(string, sizeof(string), "* %s has put a weapon in the vehicles trunk.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
	}
	else if(trunk_option("gascan"))
	{
		if(Player[playerid][GasCans] < 1)
			return SendClientMessage(playerid, WHITE, "You don't have a gas can.");

		if(strfind(Veh[idx][TrunkContents], "gas can", true) != -1)
			return SendClientMessage(playerid, WHITE, "You cannot store any more gas cans in this vehicle.");

		if(GetStoredValue(Veh[idx][TrunkContents]) + 1 > GetVehicleStorageSize(GetVehicleModel(Veh[idx][Link])))
			return SendClientMessage(playerid, -1, "There is no more room to store that gas can.");

		new amount_of_gas[32];
		if(Player[playerid][GasFull] * 4 == 0)
			format(amount_of_gas, sizeof(amount_of_gas), "Empty");
		else if(Player[playerid][GasFull] * 4 == 100)
			format(amount_of_gas, sizeof(amount_of_gas), "Full");
		else
			format(amount_of_gas, sizeof(amount_of_gas), "%d%s", Player[playerid][GasFull] * 4, "%");

		format(Veh[idx][TrunkContents], 255, "%s%s Gas Can|", Veh[idx][TrunkContents], amount_of_gas);
		Player[playerid][GasCans] = 0;
		Player[playerid][GasFull] = 0;

		new string[128];
		format(string, sizeof(string), "* %s has put a gas can in the vehicles trunk.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);
	}
	else if(trunk_option("streetmats"))
	{
		if(amount < 1 || amount > Player[playerid][Materials][0])
			return SendClientMessage(playerid, WHITE, "Invalid amount! You don't have that many street grade materials.");

		new total_amount = GetStoredAmountOf(Veh[idx][TrunkContents], "street grade Materials") + amount;
		new size = total_amount / 30;
		if(total_amount % 30 > 0)
			size++;

		new stored_size = GetStoredAmountOf(Veh[idx][TrunkContents], "street grade Materials") / 30;
		if(GetStoredAmountOf(Veh[idx][TrunkContents], "street grade Materials") % 30 > 0)
			stored_size++;

		if((GetStoredValue(Veh[idx][TrunkContents]) - stored_size) + size > GetVehicleStorageSize(GetVehicleModel(Veh[idx][Link])))
			return SendClientMessage(playerid, -1, "There is no more room to store those street grade materials.");

		new pos = strfind(Veh[idx][TrunkContents], "Street Grade Materials", true);
		if(pos != -1)
		{
			new temp[255], temp2[255];
			strcpy(temp2, Veh[idx][TrunkContents], sizeof(temp2));

			for(new i = pos; i > 0; i--)
			{
				if(temp2[i] == '|')
				{
					pos = i + 1;
					break;
				}
			}

			if(Veh[idx][TrunkContents][pos - 1] != '|')
				pos = 0;

			for(new i = pos; i < strlen(temp2); i++)
			{
				if(temp2[i] == '|')
				{
					strmid(temp, temp2, pos, i);
					strdel(temp2, pos, i + 1);
					break;
				}
			}

			format(temp2, 255, "%s%d Street Grade Materials|", temp2, GetStoredAmountOf(Veh[idx][TrunkContents], "street grade Materials") + amount);

			if(!isnull(temp2))
				format(Veh[idx][TrunkContents], 255, "%s", temp2);

			Player[playerid][Materials][0] -= amount;

			new string[128];
			format(string, sizeof(string), "* %s has put materials in the vehicles trunk.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
		else
		{
			Player[playerid][Materials][0] -= amount;
			format(Veh[idx][TrunkContents], 255, "%s%d Street Grade Materials|", Veh[idx][TrunkContents], amount);
			new string[128];
			format(string, sizeof(string), "* %s has put materials in the vehicles trunk.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
	}
	else if(trunk_option("standardmats"))
	{
		if(amount < 1 || amount > Player[playerid][Materials][1])
			return SendClientMessage(playerid, WHITE, "Invalid amount! You don't have that many standard grade materials.");

		new total_amount = GetStoredAmountOf(Veh[idx][TrunkContents], "standard grade materials") + amount;
		new size = total_amount / 30;
		if(total_amount % 30 > 0)
			size++;

		new stored_size = GetStoredAmountOf(Veh[idx][TrunkContents], "standard grade materials") / 30;
		if(GetStoredAmountOf(Veh[idx][TrunkContents], "standard grade materials") % 30 > 0)
			stored_size++;

		if((GetStoredValue(Veh[idx][TrunkContents]) - stored_size) + size > GetVehicleStorageSize(GetVehicleModel(Veh[idx][Link])))
			return SendClientMessage(playerid, -1, "There is no more room to store those middle tier materials.");

		new pos = strfind(Veh[idx][TrunkContents], "standard grade Materials", true);
		if(pos != -1)
		{
			new temp[255], temp2[255];
			strcpy(temp2, Veh[idx][TrunkContents], sizeof(temp2));

			for(new i = pos; i > 0; i--)
			{
				if(temp2[i] == '|')
				{
					pos = i + 1;
					break;
				}
			}

			if(Veh[idx][TrunkContents][pos - 1] != '|')
				pos = 0;

			for(new i = pos; i < strlen(temp2); i++)
			{
				if(temp2[i] == '|')
				{
					strmid(temp, temp2, pos, i);
					strdel(temp2, pos, i + 1);
					break;
				}
			}

			format(temp2, 255, "%s%d Standard Grade Materials|", temp2, GetStoredAmountOf(Veh[idx][TrunkContents], "standard grade materials") + amount);

			if(!isnull(temp2))
				format(Veh[idx][TrunkContents], 255, "%s", temp2);

			Player[playerid][Materials][1] -= amount;

			new string[128];
			format(string, sizeof(string), "* %s has put materials in the vehicles trunk.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
		else
		{
			Player[playerid][Materials][1] -= amount;
			format(Veh[idx][TrunkContents], 255, "%s%d Standard Grade Materials|", Veh[idx][TrunkContents], amount);
			new string[128];
			format(string, sizeof(string), "* %s has put materials in the vehicles trunk.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
	}
	else if(trunk_option("militarymats"))
	{
		if(amount < 1 || amount > Player[playerid][Materials][2])
			return SendClientMessage(playerid, WHITE, "Invalid amount! You don't have that many military grade materials.");

		new total_amount = GetStoredAmountOf(Veh[idx][TrunkContents], "military grade materials") + amount;
		new size = total_amount / 30;
		if(total_amount % 30 > 0)
			size++;

		new stored_size = GetStoredAmountOf(Veh[idx][TrunkContents], "military grade materials") / 30;
		if(GetStoredAmountOf(Veh[idx][TrunkContents], "military grade materials") % 30 > 0)
			stored_size++;

		if((GetStoredValue(Veh[idx][TrunkContents]) - stored_size) + size > GetVehicleStorageSize(GetVehicleModel(Veh[idx][Link])))
			return SendClientMessage(playerid, -1, "There is no more room to store those military grade materials.");

		new pos = strfind(Veh[idx][TrunkContents], "military grade Materials", true);
		if(pos != -1)
		{
			new temp[255], temp2[255];
			strcpy(temp2, Veh[idx][TrunkContents], sizeof(temp2));

			for(new i = pos; i > 0; i--)
			{
				if(temp2[i] == '|')
				{
					pos = i + 1;
					break;
				}
			}

			if(Veh[idx][TrunkContents][pos - 1] != '|')
				pos = 0;

			for(new i = pos; i < strlen(temp2); i++)
			{
				if(temp2[i] == '|')
				{
					strmid(temp, temp2, pos, i);
					strdel(temp2, pos, i + 1);
					break;
				}
			}

			format(temp2, 255, "%s%d Military Grade Materials|", temp2, GetStoredAmountOf(Veh[idx][TrunkContents], "military grade materials") + amount);

			if(!isnull(temp2))
				format(Veh[idx][TrunkContents], 255, "%s", temp2);

			Player[playerid][Materials][2] -= amount;

			new string[128];
			format(string, sizeof(string), "* %s has put materials in the vehicles trunk.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
		else
		{
			Player[playerid][Materials][2] -= amount;
			format(Veh[idx][TrunkContents], 255, "%s%d Military Grade Materials|", Veh[idx][TrunkContents], amount);
			new string[128];
			format(string, sizeof(string), "* %s has put materials in the vehicles trunk.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
	}
	else if(trunk_option("Pot"))
	{
		if(amount < 1 || amount > Player[playerid][Pot])
			return SendClientMessage(playerid, WHITE, "Invalid amount! You don't have that much pot.");

		new total_amount = GetStoredAmountOf(Veh[idx][TrunkContents], "pot") + amount;
		new size = total_amount / 30;
		if(total_amount % 30 > 0)
			size++;

		new stored_size = GetStoredAmountOf(Veh[idx][TrunkContents], "pot") / 30;
		if(GetStoredAmountOf(Veh[idx][TrunkContents], "pot") % 30 > 0)
			stored_size++;

		if((GetStoredValue(Veh[idx][TrunkContents]) - stored_size) + size > GetVehicleStorageSize(GetVehicleModel(Veh[idx][Link])))
			return SendClientMessage(playerid, -1, "There is no more room to store that pot.");

		new pos = strfind(Veh[idx][TrunkContents], "Pot", true);
		if(pos != -1)
		{
			new temp[255], temp2[255];
			strcpy(temp2, Veh[idx][TrunkContents], sizeof(temp2));

			for(new i = pos; i > 0; i--)
			{
				if(temp2[i] == '|')
				{
					pos = i + 1;
					break;
				}
			}

			if(Veh[idx][TrunkContents][pos - 1] != '|')
				pos = 0;

			for(new i = pos; i < strlen(temp2); i++)
			{
				if(temp2[i] == '|')
				{
					strmid(temp, temp2, pos, i);
					strdel(temp2, pos, i + 1);
					break;
				}
			}

			format(temp2, 255, "%s%d Pot|", temp2, GetStoredAmountOf(Veh[idx][TrunkContents], "pot") + amount);

			if(!isnull(temp2))
				format(Veh[idx][TrunkContents], 255, "%s", temp2);

			Player[playerid][Pot] -= amount;

			new string[128];
			format(string, sizeof(string), "* %s has put pot in the vehicles trunk.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
		else
		{
			Player[playerid][Pot] -= amount;
			format(Veh[idx][TrunkContents], 255, "%s%d Pot|", Veh[idx][TrunkContents], amount);
			new string[128];
			format(string, sizeof(string), "* %s has put pot in the vehicles trunk.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
	}
	else if(trunk_option("Cocaine"))
	{
		if(amount < 1 || amount > Player[playerid][Cocaine])
			return SendClientMessage(playerid, WHITE, "Invalid amount! You don't have that many cocaine.");

		new total_amount = GetStoredAmountOf(Veh[idx][TrunkContents], "cocaine") + amount;
		new size = total_amount / 30;
		if(total_amount % 30 > 0)
			size++;

		new stored_size = GetStoredAmountOf(Veh[idx][TrunkContents], "cocaine") / 30;
		if(GetStoredAmountOf(Veh[idx][TrunkContents], "cocaine") % 30 > 0)
			stored_size++;

		if((GetStoredValue(Veh[idx][TrunkContents]) - stored_size) + size > GetVehicleStorageSize(GetVehicleModel(Veh[idx][Link])))
			return SendClientMessage(playerid, -1, "There is no more room to store that cocaine.");

		new pos = strfind(Veh[idx][TrunkContents], "Cocaine", true);
		if(pos != -1)
		{
			new temp[255], temp2[255];
			strcpy(temp2, Veh[idx][TrunkContents], sizeof(temp2));

			for(new i = pos; i > 0; i--)
			{
				if(temp2[i] == '|')
				{
					pos = i + 1;
					break;
				}
			}

			if(Veh[idx][TrunkContents][pos - 1] != '|')
				pos = 0;

			for(new i = pos; i < strlen(temp2); i++)
			{
				if(temp2[i] == '|')
				{
					strmid(temp, temp2, pos, i);
					strdel(temp2, pos, i + 1);
					break;
				}
			}

			format(temp2, 255, "%s%d Cocaine|", temp2, GetStoredAmountOf(Veh[idx][TrunkContents], "cocaine") + amount);

			if(!isnull(temp2))
				format(Veh[idx][TrunkContents], 255, "%s", temp2);

			Player[playerid][Cocaine] -= amount;

			new string[128];
			format(string, sizeof(string), "* %s has put cocaine in the vehicles trunk.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
		else
		{
			Player[playerid][Cocaine] -= amount;
			format(Veh[idx][TrunkContents], 255, "%s%d Cocaine|", Veh[idx][TrunkContents], amount);
			new string[128];
			format(string, sizeof(string), "* %s has put cocaine in the vehicles trunk.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
	}
	else if(trunk_option("Speed"))
	{
		if(amount < 1 || amount > Player[playerid][Speed])
			return SendClientMessage(playerid, WHITE, "Invalid amount! You don't have that many speed.");

		new total_amount = GetStoredAmountOf(Veh[idx][TrunkContents], "speed") + amount;
		new size = total_amount / 30;
		if(total_amount % 30 > 0)
			size++;

		new stored_size = GetStoredAmountOf(Veh[idx][TrunkContents], "speed") / 30;
		if(GetStoredAmountOf(Veh[idx][TrunkContents], "speed") % 30 > 0)
			stored_size++;

		if((GetStoredValue(Veh[idx][TrunkContents]) - stored_size) + size > GetVehicleStorageSize(GetVehicleModel(Veh[idx][Link])))
			return SendClientMessage(playerid, -1, "There is no more room to store that speed.");

		new pos = strfind(Veh[idx][TrunkContents], "Speed", true);
		if(pos != -1)
		{
			new temp[255], temp2[255];
			strcpy(temp2, Veh[idx][TrunkContents], sizeof(temp2));

			for(new i = pos; i > 0; i--)
			{
				if(temp2[i] == '|')
				{
					pos = i + 1;
					break;
				}
			}

			if(Veh[idx][TrunkContents][pos - 1] != '|')
				pos = 0;

			for(new i = pos; i < strlen(temp2); i++)
			{
				if(temp2[i] == '|')
				{
					strmid(temp, temp2, pos, i);
					strdel(temp2, pos, i + 1);
					break;
				}
			}

			format(temp2, 255, "%s%d Speed|", temp2, GetStoredAmountOf(Veh[idx][TrunkContents], "speed") + amount);

			if(!isnull(temp2))
				format(Veh[idx][TrunkContents], 255, "%s", temp2);

			Player[playerid][Speed] -= amount;

			new string[128];
			format(string, sizeof(string), "* %s has put speed in the vehicles trunk.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
		else
		{
			Player[playerid][Speed] -= amount;
			format(Veh[idx][TrunkContents], 255, "%s%d Speed|", Veh[idx][TrunkContents], amount);
			new string[128];
			format(string, sizeof(string), "* %s has put speed in the vehicles trunk.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
	}
	else if(trunk_option("Money"))
	{
		if(amount < 1 || amount > Player[playerid][Money])
			return SendClientMessage(playerid, WHITE, "Invalid amount! You don't have that much money.");

		if(Player[playerid][PlayingHours] < 2)
			return SendClientMessage(playerid, WHITE, "You need 2 playing hours before you can store money in a vehicle.");

		new total_amount = GetStoredAmountOf(Veh[idx][TrunkContents], "Money") + amount;
		new size = total_amount / 20000;
		if(total_amount % 20000 > 0)
			size++;

		new stored_size = GetStoredAmountOf(Veh[idx][TrunkContents], "Money") / 20000;
		if(GetStoredAmountOf(Veh[idx][TrunkContents], "Money") % 20000 > 0)
			stored_size++;

		if((GetStoredValue(Veh[idx][TrunkContents]) - stored_size) + size > GetVehicleStorageSize(GetVehicleModel(Veh[idx][Link])))
			return SendClientMessage(playerid, -1, "There is no more room to store that.");

		if(Player[playerid][PlayingHours] < 5)
		{
			new string[128];
			format(string, sizeof(string), "WARNING: %s may possibly be money-farming, they've stored %s in vehicle %d.", GetName(playerid), PrettyMoney(amount), sql);
			SendToAdmins(ADMINORANGE, string, 0);
			LastFarm = playerid;
			WarningLog(string);
		}

		new pos = strfind(Veh[idx][TrunkContents], "Money", true);
		if(pos != -1)
		{
			new temp[255], temp2[255];
			strcpy(temp2, Veh[idx][TrunkContents], sizeof(temp2));

			for(new i = pos; i > 0; i--)
			{
				if(temp2[i] == '|')
				{
					pos = i + 1;
					break;
				}
			}

			if(Veh[idx][TrunkContents][pos - 1] != '|')
				pos = 0;

			for(new i = pos; i < strlen(temp2); i++)
			{
				if(temp2[i] == '|')
				{
					strmid(temp, temp2, pos, i);
					strdel(temp2, pos, i + 1);
					break;
				}
			}

			format(temp2, 255, "%s%d Money|", temp2, GetStoredAmountOf(Veh[idx][TrunkContents], "Money") + amount);

			if(!isnull(temp2))
				format(Veh[idx][TrunkContents], 255, "%s", temp2);

			Player[playerid][Money] -= amount;

			new string[128];
			format(string, sizeof(string), "* %s has put money in the vehicles trunk.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
		else
		{
			Player[playerid][Money] -= amount;
			format(Veh[idx][TrunkContents], 255, "%s%d Money|", Veh[idx][TrunkContents], amount);
			new string[128];
			format(string, sizeof(string), "* %s has put money in the vehicles trunk.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
	}
	else if(trunk_option("poorkevlar"))
	{
		if(Player[playerid][HasArmour] != 100)
			return SendClientMessage(playerid, WHITE, "You don't have a poor kevlar vest to store.");

		if(GetStoredValue(Veh[idx][TrunkContents]) + 1 > GetVehicleStorageSize(GetVehicleModel(Veh[idx][Link])))
			return SendClientMessage(playerid, -1, "There is no more room to store that.");
		
		amount = 1;
		new pos = strfind(Veh[idx][TrunkContents], "Poor Kevlar", true);
		if(pos != -1)
		{
			new temp[255], temp2[255];
			strcpy(temp2, Veh[idx][TrunkContents], sizeof(temp2));

			for(new i = pos; i > 0; i--)
			{
				if(temp2[i] == '|')
				{
					pos = i + 1;
					break;
				}
			}

			if(Veh[idx][TrunkContents][pos - 1] != '|')
				pos = 0;

			for(new i = pos; i < strlen(temp2); i++)
			{
				if(temp2[i] == '|')
				{
					strmid(temp, temp2, pos, i);
					strdel(temp2, pos, i + 1);
					break;
				}
			}

			format(temp2, 255, "%s%d Poor Kevlar|", temp2, GetStoredAmountOf(Veh[idx][TrunkContents], "poor kevlar") + amount);

			if(!isnull(temp2))
				format(Veh[idx][TrunkContents], 255, "%s", temp2);

			new string[128];
			format(string, sizeof(string), "* %s has put a kevlar vest in the vehicles trunk.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
		else
		{
			Player[playerid][HasArmour] = 0;
			format(Veh[idx][TrunkContents], 255, "%s%d Poor Kevlar|", Veh[idx][TrunkContents], amount);
			new string[128];
			format(string, sizeof(string), "* %s has put a kevlar vest in the vehicles trunk.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
		Player[playerid][HasArmour] = 0;
	}
	else if(trunk_option("standardkevlar"))
	{
		if(Player[playerid][HasArmour] != 115)
			return SendClientMessage(playerid, WHITE, "You don't have a standard kevlar vest to store.");

		if(GetStoredValue(Veh[idx][TrunkContents]) + 1 > GetVehicleStorageSize(GetVehicleModel(Veh[idx][Link])))
			return SendClientMessage(playerid, -1, "There is no more room to store that.");

		amount = 1;
		new pos = strfind(Veh[idx][TrunkContents], "Standard Kevlar", true);
		if(pos != -1)
		{
			new temp[255], temp2[255];
			strcpy(temp2, Veh[idx][TrunkContents], sizeof(temp2));

			for(new i = pos; i > 0; i--)
			{
				if(temp2[i] == '|')
				{
					pos = i + 1;
					break;
				}
			}

			if(Veh[idx][TrunkContents][pos - 1] != '|')
				pos = 0;

			for(new i = pos; i < strlen(temp2); i++)
			{
				if(temp2[i] == '|')
				{
					strmid(temp, temp2, pos, i);
					strdel(temp2, pos, i + 1);
					break;
				}
			}

			format(temp2, 255, "%s%d Standard Kevlar|", temp2, GetStoredAmountOf(Veh[idx][TrunkContents], "standard kevlar") + amount);

			if(!isnull(temp2))
				format(Veh[idx][TrunkContents], 255, "%s", temp2);

			new string[128];
			format(string, sizeof(string), "* %s has put a kevlar vest in the vehicles trunk.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
		else
		{
			format(Veh[idx][TrunkContents], 255, "%s%d Standard Kevlar|", Veh[idx][TrunkContents], amount);
			new string[128];
			format(string, sizeof(string), "* %s has put a kevlar vest in the vehicles trunk.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
		Player[playerid][HasArmour] = 0;
	}
	else if(trunk_option("militarykevlar"))
	{
		if(Player[playerid][HasArmour] != 130)
			return SendClientMessage(playerid, WHITE, "You don't have a military kevlar vest to store.");

		if(GetStoredValue(Veh[idx][TrunkContents]) + 1 > GetVehicleStorageSize(GetVehicleModel(Veh[idx][Link])))
			return SendClientMessage(playerid, -1, "There is no more room to store that.");

		amount = 1;
		new pos = strfind(Veh[idx][TrunkContents], "Military Kevlar", true);
		if(pos != -1)
		{
			new temp[255], temp2[255];
			strcpy(temp2, Veh[idx][TrunkContents], sizeof(temp2));

			for(new i = pos; i > 0; i--)
			{
				if(temp2[i] == '|')
				{
					pos = i + 1;
					break;
				}
			}

			if(Veh[idx][TrunkContents][pos - 1] != '|')
				pos = 0;

			for(new i = pos; i < strlen(temp2); i++)
			{
				if(temp2[i] == '|')
				{
					strmid(temp, temp2, pos, i);
					strdel(temp2, pos, i + 1);
					break;
				}
			}

			format(temp2, 255, "%s%d Military Kevlar|", temp2, GetStoredAmountOf(Veh[idx][TrunkContents], "military kevlar") + amount);

			if(!isnull(temp2))
				format(Veh[idx][TrunkContents], 255, "%s", temp2);

			new string[128];
			format(string, sizeof(string), "* %s has put a kevlar vest in the vehicles trunk.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
		else
		{
			format(Veh[idx][TrunkContents], 255, "%s%d Military Kevlar|", Veh[idx][TrunkContents], amount);
			new string[128];
			format(string, sizeof(string), "* %s has put a kevlar vest in the vehicles trunk.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
		Player[playerid][HasArmour] = 0;
	}
	else if(trunk_option("bomb"))
	{
		if(Player[playerid][Bomb] < 1)
			return SendClientMessage(playerid, WHITE, "You don't have a bomb to store.");

		if(GetStoredValue(Veh[idx][TrunkContents]) + 3 > GetVehicleStorageSize(GetVehicleModel(Veh[idx][Link])))
			return SendClientMessage(playerid, -1, "There is no more room to store that.");

		amount = 1;
		new pos = strfind(Veh[idx][TrunkContents], "bomb", true);
		if(pos != -1)
		{
			new temp[255], temp2[255];
			strcpy(temp2, Veh[idx][TrunkContents], sizeof(temp2));

			for(new i = pos; i > 0; i--)
			{
				if(temp2[i] == '|')
				{
					pos = i + 1;
					break;
				}
			}

			if(Veh[idx][TrunkContents][pos - 1] != '|')
				pos = 0;

			for(new i = pos; i < strlen(temp2); i++)
			{
				if(temp2[i] == '|')
				{
					strmid(temp, temp2, pos, i);
					strdel(temp2, pos, i + 1);
					break;
				}
			}

			format(temp2, 255, "%s%d Bomb|", temp2, GetStoredAmountOf(Veh[idx][TrunkContents], "bomb") + amount);

			if(!isnull(temp2))
				format(Veh[idx][TrunkContents], 255, "%s", temp2);

			new string[128];
			format(string, sizeof(string), "* %s has put a bomb in the vehicles trunk.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
		else
		{
			format(Veh[idx][TrunkContents], 255, "%s%d Bomb|", Veh[idx][TrunkContents], amount);
			new string[128];
			format(string, sizeof(string), "* %s has put a bomb in the vehicles trunk.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
		Player[playerid][Bomb] = 0;
	}
	else if(trunk_option("engineparts"))
	{
		if(amount < 1 || amount > Player[playerid][EngineParts])
			return SendClientMessage(playerid, WHITE, "Invalid amount! You don't have that many engine parts.");

		if((GetStoredValue(Veh[idx][TrunkContents])) + amount > GetVehicleStorageSize(GetVehicleModel(Veh[idx][Link])))
			return SendClientMessage(playerid, -1, "There is no more room to store that.");

		new pos = strfind(Veh[idx][TrunkContents], "Engine Parts", true);
		if(pos != -1)
		{
			new temp[255], temp2[255];
			strcpy(temp2, Veh[idx][TrunkContents], sizeof(temp2));

			for(new i = pos; i > 0; i--)
			{
				if(temp2[i] == '|')
				{
					pos = i + 1;
					break;
				}
			}

			if(Veh[idx][TrunkContents][pos - 1] != '|')
				pos = 0;

			for(new i = pos; i < strlen(temp2); i++)
			{
				if(temp2[i] == '|')
				{
					strmid(temp, temp2, pos, i);
					strdel(temp2, pos, i + 1);
					break;
				}
			}

			format(temp2, 255, "%s%d Engine Parts|", temp2, GetStoredAmountOf(Veh[idx][TrunkContents], "Engine Parts") + amount);

			if(!isnull(temp2))
				format(Veh[idx][TrunkContents], 255, "%s", temp2);

			Player[playerid][EngineParts] -= amount;

			new string[128];
			format(string, sizeof(string), "* %s has put engine parts in the vehicles trunk.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
		else
		{
			Player[playerid][EngineParts] -= amount;
			format(Veh[idx][TrunkContents], 255, "%s%d Engine Parts|", Veh[idx][TrunkContents], amount);
			new string[128];
			format(string, sizeof(string), "* %s has put engine parts in the vehicles trunk.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
	}
	else if(trunk_option("fishingrod"))
	{
		if(Player[playerid][FishingRod] < 1)
			return SendClientMessage(playerid, WHITE, "You don't have a fishing rod.");

		amount = 1;
		if((GetStoredValue(Veh[idx][TrunkContents])) + amount > GetVehicleStorageSize(GetVehicleModel(Veh[idx][Link])))
			return SendClientMessage(playerid, -1, "There is no more room to store that.");

		new pos = strfind(Veh[idx][TrunkContents], "Fishing Rod", true);
		if(pos != -1)
		{
			new temp[255], temp2[255];
			strcpy(temp2, Veh[idx][TrunkContents], sizeof(temp2));

			for(new i = pos; i > 0; i--)
			{
				if(temp2[i] == '|')
				{
					pos = i + 1;
					break;
				}
			}

			if(Veh[idx][TrunkContents][pos - 1] != '|')
				pos = 0;

			for(new i = pos; i < strlen(temp2); i++)
			{
				if(temp2[i] == '|')
				{
					strmid(temp, temp2, pos, i);
					strdel(temp2, pos, i + 1);
					break;
				}
			}

			format(temp2, 255, "%s%d Fishing Rod|", temp2, GetStoredAmountOf(Veh[idx][TrunkContents], "Fishing Rod") + amount);

			if(!isnull(temp2))
				format(Veh[idx][TrunkContents], 255, "%s", temp2);

			Player[playerid][FishingRod] = 0;

			new string[128];
			format(string, sizeof(string), "* %s has put a fishing rod in the vehicles trunk.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
		else
		{
			Player[playerid][FishingRod] = 0;
			format(Veh[idx][TrunkContents], 255, "%s%d Fishing Rod|", Veh[idx][TrunkContents], amount);
			new string[128];
			format(string, sizeof(string), "* %s has put a fishing rod in the vehicles trunk.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
		}
	}
	else
		return SendClientMessage(playerid, -1, "Invalid option.");

	new string[128];
	if(weapon > 0)
		format(string, sizeof(string), "[CAR] %s has stored a %s (%d) in vehicle id %d.", GetName(playerid), GetWeaponNameEx(weapon), weapon, sql);
	else
		format(string, sizeof(string), "[CAR] %s has stored %s (%d) in vehicle id %d.", GetName(playerid), type, amount, sql);
	StatLog(string);
	SaveVehicle(sql);
	return 1;
}

CMD:vtake(playerid)
{
	new idx, sql = GetNearestCarSQL(playerid), engine, lights, alarm, doors, bonnet, boot, objective, string[256];

	if(!IsPlayerInRangeOfCar(playerid, 5))
		return SendClientMessage(playerid, -1, "You're too far from any vehicle");

	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "You must be out of the vehicle");

	if(Player[playerid][PlayingHours] < 2)
		return SendClientMessage(playerid, WHITE, "You can't take anything from a car with less than two playing hours.");

	idx = GetVIndex(sql);

	if(!HasVehicleAccess(playerid, sql) && Player[playerid][CopDuty] != 1)
		return SendClientMessage(playerid, -1, "You don't have the keys to this vehicle");

	GetVehicleParamsEx(Veh[idx][Link], engine, lights, alarm, doors, bonnet, boot, objective);

	if(boot != 1)
		return SendClientMessage(playerid, -1, "The vehicles trunk must be open");

	if(!IsVehicleFacingPlayer(Veh[idx][Link], playerid, true))
		return SendClientMessage(playerid, -1, "You must be at the back of the vehicle to open the trunk.");

	new contents[255], temp[64];
	strcpy(contents, Veh[idx][TrunkContents], 255);

	while(!isnull(contents))
	{
		for(new i; i < strlen(contents); i++)
		{
			if(contents[i] == '|')
			{
				strmid(temp, contents, 0, i);
				strdel(contents, 0, (i + 1 > strlen(contents)) ? (i) : (i + 1));

				format(string, sizeof(string), "%s%s\n", string, temp);
				break;
			}

		}
	}

	if(isnull(string))
		return SendClientMessage(playerid, WHITE, "There is nothing in the trunk of this vehicle.");

	new title[32];
	format(title, sizeof(title), "Vehicle trunk (%d/%d)", GetStoredValue(Veh[idx][TrunkContents]), GetVehicleStorageSize(GetVehicleModel(Veh[idx][Link])));

	ShowPlayerDialog(playerid, TRUNK_TAKE, DIALOG_STYLE_LIST, title, string, "Take", "Close");
	return 1;
}

CMD:vlook(playerid, params[])
{
	new idx, sql = GetNearestCarSQL(playerid), engine, lights, alarm, doors, bonnet, boot, objective, string[256];

	if(!IsPlayerInRangeOfCar(playerid, 5))
		return SendClientMessage(playerid, -1, "You're too far from any vehicle");

	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "You must be out of the vehicle");

	if(Player[playerid][PlayingHours] < 2)
		return SendClientMessage(playerid, WHITE, "You can't take anything from a car with less than two playing hours.");

	idx = GetVIndex(sql);

	GetVehicleParamsEx(Veh[idx][Link], engine, lights, alarm, doors, bonnet, boot, objective);

	if(boot != 1)
		return SendClientMessage(playerid, -1, "The vehicles trunk must be open");

	if(!IsVehicleFacingPlayer(Veh[idx][Link], playerid, true))
		return SendClientMessage(playerid, -1, "You must be at the back of the vehicle to open the trunk.");

	new contents[255], temp[64];
	strcpy(contents, Veh[idx][TrunkContents], 255);

	while(!isnull(contents))
	{
		for(new i; i < strlen(contents); i++)
		{
			if(contents[i] == '|')
			{
				strmid(temp, contents, 0, i);
				strdel(contents, 0, (i + 1 > strlen(contents)) ? (i) : (i + 1));

				format(string, sizeof(string), "%s%s\n", string, temp);\
				break;
			}

		}
	}

	if(isnull(string))
		return SendClientMessage(playerid, WHITE, "There is nothing in the trunk of this vehicle.");

	ShowPlayerDialog(playerid, TRUNK_TAKE + 1, DIALOG_STYLE_LIST, "Vehicle Trunk", string, "Close", "");
	return 1;
}

stock GetVehicleStorageSize(modelid)
{
	switch(modelid)
	{
		case 400: return 8;
		case 401: return 4;
		case 402: return 3;
		case 404: return 8;
		case 405: return 4;
		case 409: return 5;
		case 410: return 4;
		case 411: return 2;
		case 412: return 4;
		case 413: return 10;
		case 414: return 25;
		case 415: return 2;
		case 418: return 8;
		case 419: return 4;
		case 420: return 4;
		case 421: return 5;
		case 422: return 6;
		case 426: return 6;
		case 427: return 20;
		case 429: return 2;
		case 430: return 3;
		case 434: return 2;
		case 436: return 5;
		case 438: return 6;
		case 439: return 4;
		case 440: return 13;
		case 442: return 6;
		case 445: return 5;
		case 446: return 3;
		case 451: return 2;
		case 452: return 3;
		case 453: return 6;
		case 454: return 8;
		case 456: return 30;
		case 458: return 6;
		case 459: return 11;
		case 461: return 1;
		case 462: return 1;
		case 463: return 1;
		case 466: return 5;
		case 467: return 5;
		case 468: return 1;
		case 469: return 3;
		case 470: return 9;
		case 471: return 1;
		case 473: return 2;
		case 474: return 5;
		case 475: return 5;
		case 477: return 2;
		case 478: return 7;
		case 479: return 6;
		case 480: return 3;
		case 481: return 0;
		case 482: return 12;
		case 483: return 10;
		case 484: return 15;
		case 487: return 4;
		case 489: return 9;
		case 490: return 9;
		case 491: return 5;
		case 492: return 5;
		case 493: return 3;
		case 494: return 4;
		case 495: return 8;
		case 496: return 5;
		case 497: return 4;
		case 498: return 20;
		case 499: return 15;
		case 500: return 6;
		case 502: return 4;
		case 503: return 4;
		case 504: return 3;
		case 505: return 9;
		case 506: return 2;
		case 507: return 5;
		case 508: return 15;
		case 509: return 0;
		case 510: return 0;
		case 516: return 5;
		case 517: return 5;
		case 518: return 5;
		case 521: return 1;
		case 522: return 1;
		case 523: return 1;
		case 525: return 4;
		case 526: return 4;
		case 527: return 4;
		case 528: return 10;
		case 529: return 5;
		case 533: return 4;
		case 534: return 5;
		case 535: return 6;
		case 536: return 4;
		case 540: return 5;
		case 541: return 2;
		case 542: return 4;
		case 543: return 6;
		case 545: return 3;
		case 546: return 5;
		case 547: return 5;
		case 549: return 4;
		case 550: return 4;
		case 551: return 4;
		case 554: return 7;
		case 555: return 3;
		case 558: return 4;
		case 559: return 2;
		case 560: return 5;
		case 561: return 6;
		case 562: return 3;
		case 565: return 5;
		case 566: return 5;
		case 567: return 4;
		case 571: return 1;
		case 575: return 4;
		case 576: return 4;
		case 579: return 10;
		case 580: return 6;
		case 581: return 1;
		case 585: return 4;
		case 586: return 1;
		case 587: return 2;
		case 589: return 5;
		case 596: return 6;
		case 598: return 6;
		case 599: return 8;
		case 600: return 5;
		case 601: return 8;
		case 602: return 3;
		case 603: return 2;
		case 609: return 20;
		default: return 4;
	}
	return 4;
}

stock GetStoredAmountOf(storage[], type[])
{
	if(isnull(storage))
		return 0;

	new findpos = strfind(storage, type, true);
	if(findpos == -1)
		return 0;

	new temp_pos;
	for(new i; i < strlen(storage); i++)
	{
		if(storage[i] == '|')
		{
			temp_pos = i + 1;
			break;
		}
	}

	if(findpos < temp_pos)
		findpos = 0;

	for(new i = findpos; i > 0; i--)
	{
		if(storage[i] == '|')
		{
			findpos = i + 1;
			break;
		}
	}

	new temp[500];
	format(temp, sizeof(temp), "%s", storage);
	if(findpos > 0)
	{
		strdel(temp, 0, findpos);
	}

	for(new i; i < strlen(temp); i++)
	{
		if(temp[i] == '|')
		{
			strdel(temp, i, strlen(temp));
		}
	}

	return strval(temp);
}

stock GetStoredValue(storage[])
{
	new stored_[32], contents_[500], result;
	strcpy(contents_, storage, 500);
	for(new i; i < strlen(contents_); i++)
	{
		new space;
		for(new x; x < strlen(contents_); x++)
		{
			if(contents_[x] == ' ')
			{
				space = x + 1;
				break;
			}
		}

		if(contents_[i] == '|')
		{
			strmid(stored_, contents_, space, i);

			#define stored(%0) !strcmp(stored_, %0, true)
			if(stored("gas can"))
			{
				result += 1;
			}
			else if(stored("street grade materials"))
			{
				result += GetStoredAmountOf(storage, "street grade materials") / 30;
				if(GetStoredAmountOf(storage, "street grade materials") % 30 > 0)
				result++;
			}
			else if(stored("standard grade materials"))
			{
				result += GetStoredAmountOf(storage, "standard grade materials") / 30;
				if(GetStoredAmountOf(storage, "standard grade materials") % 30 > 0)
				result++;
			}
			else if(stored("military grade materials"))
			{
				result += GetStoredAmountOf(storage, "military grade materials") / 30;
				if(GetStoredAmountOf(storage, "military grade materials") % 30 > 0)
				result++;
			}
			else if(stored("pot"))
			{
				result += GetStoredAmountOf(storage, "pot") / 30;
				if(GetStoredAmountOf(storage, "pot") % 30 > 0)
				result++;
			}
			else if(stored("cocaine"))
			{
				result += GetStoredAmountOf(storage, "cocaine") / 30;
				if(GetStoredAmountOf(storage, "cocaine") % 30 > 0)
				result++;
			}
			else if(stored("speed"))
			{
				result += GetStoredAmountOf(storage, "speed") / 30;
				if(GetStoredAmountOf(storage, "speed") % 30 > 0)
				result++;
			}
			else if(stored("money"))
			{
				result += GetStoredAmountOf(storage, "money") / 20000;
				if(GetStoredAmountOf(storage, "money") % 20000 > 0)
				result++;
			}
			else if(stored("poor kevlar"))
			{
				result += GetStoredAmountOf(storage, "poor kevlar");
			}
			else if(stored("standard kevlar"))
			{
				result += GetStoredAmountOf(storage, "standard kevlar");
			}
			else if(stored("military kevlar"))
			{
				result += GetStoredAmountOf(storage, "military kevlar");				
			}
			else if(stored("bomb"))
			{
				result += GetStoredAmountOf(storage, "bomb") * 3;				
			}
			else if(stored("engine parts"))
			{
				result += GetStoredAmountOf(storage, "engine parts");				
			}
			else if(stored("fishing rod"))
			{
				result += GetStoredAmountOf(storage, "fishing rod");				
			}
			else
			{
				for(new w; w < sizeof(weapons); w++)
				{
					if(stored(weapons[w]))
					{
						result += GetStoredAmountOf(storage, weapons[w]) * wepsize[w];
					}
				}
			}

			strdel(contents_, 0, (i + 1 > strlen(contents_)) ? (i) : (i + 1));
			i = 0;
		}
	}
	return result;
}

CMD:drawcreate(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 7)
		return 1;

	new who[4], unix, title[64];
	if(sscanf(params, "s[4]ds[64]", who, unix, title))
		return SendClientMessage(playerid, GREY, "SYNTAX: /drawcreate [all/vip] [unixtimestamp] [title] Go to http://bit.ly/UnixTimestamp for timestamp help.");

	if(unix < gettime())
		return SendClientMessage(playerid, WHITE, "That unix timestamp is less than the current timestamp. Use http://bit.ly/UnixTimestamp for help.");

	new string[128];

	mysql_query(MYSQL_MAIN, "CREATE TABLE IF NOT EXISTS draw (name VARCHAR(255))", false);

	if(!strcmp(who, "all", true))
	{
		DrawVipOnly = 0;

		format(string, sizeof(string), "You have created a new draw for everybody to enter, which is drawn at %d.", unix);
		SendClientMessage(playerid, YELLOW, string);
		format(string, sizeof(string), "[DRAWCREATE] %s has created a new draw for all; Drawn %d", Player[playerid][AdminName], unix);
		AdminActionsLog(string);
	}
	else if(!strcmp(who, "vip", true))
	{
		DrawVipOnly = 1;

		format(string, sizeof(string), "You have created a new draw for VIP only to enter, which is drawn at %d.", unix);
		SendClientMessage(playerid, YELLOW, string);
		format(string, sizeof(string), "[DRAWCREATE] %s has created a new draw for VIP only; Drawn %d", Player[playerid][AdminName], unix);
		AdminActionsLog(string);
	}
	else
		return SendClientMessage(playerid, GREY, "SYNTAX: /drawcreate [all/vip] [unixtimestamp] [title] Go to http://bit.ly/UnixTimestamp for timestamp help.");

	DrawUnix = unix;
	strcpy(DrawTitle, title, sizeof(title));
	SaveDraw();
	return 1;
}

CMD:drawclose(playerid)
{
	if(Player[playerid][AdminLevel] < 7)
		return 1;

	if(DrawUnix < gettime())
		return SendClientMessage(playerid, WHITE, "There isn't a draw running.");

	new string[128];
	format(string, sizeof(string), "You have closed the current draw.");
	SendClientMessage(playerid, YELLOW, string);
	format(string, sizeof(string), "[DRAWCREATE] %s has closed the draw.", Player[playerid][AdminName]);
	AdminActionsLog(string);

	mysql_query(MYSQL_MAIN, "DELETE FROM draw", false);

	DrawTitle[0] = 0;
	DrawVipOnly = 0;
	DrawUnix = 0;
	SaveDraw();
	return 1;
}

CMD:drawlist(playerid)
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	if(isnull(DrawTitle))
		return SendClientMessage(playerid, WHITE, "There isn't a draw running.");

	new Cache:cache, count, name[25];

	cache = mysql_query(MYSQL_MAIN, "SELECT * FROM draw", false);
	count = cache_get_row_count();

	SendClientMessage(playerid, GREY, "--------------------------------------------------------");

	if(count == 0)
		SendClientMessage(playerid, -1, "No entries.");

	new row;
	while(row < count)
	{
		cache_get_field_content(row, "name", name);
		SendClientMessage(playerid, WHITE, name);
		row++;
	}
	cache_delete(cache);
	SendClientMessage(playerid, GREY, "--------------------------------------------------------");
	return 1;
}

CMD:drawenter(playerid)
{
	if(Player[playerid][PlayingHours] < 50)
		return SendClientMessage(playerid, WHITE, "You cannot enter the draw until you have 50 + playing hours!");

	if(isnull(DrawTitle))
		return SendClientMessage(playerid, WHITE, "You cannot enter the draw as there is no draw currently running.");

	if(Player[playerid][VipRank] == 0 && DrawVipOnly > 0)
		return SendClientMessage(playerid, GREY, "You cannot enter this draw as it is VIP only.");

	if(DrawUnix < gettime())
		return SendClientMessage(playerid, WHITE, "You cannot enter this draw at this time.");

	new Cache:cache, count, query[128];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM draw WHERE name = '%e'", GetName(playerid));
	cache = mysql_query(MYSQL_MAIN, query);
	count = cache_get_row_count();
	cache_delete(cache);

	if(count > 0)
		return SendClientMessage(playerid, -1, "You have already entered the draw.");

	mysql_format(MYSQL_MAIN, query, sizeof(query), "INSERT INTO draw (name) VALUES ('%e')", GetName(playerid));
	mysql_query(MYSQL_MAIN, query, false);

	format(query, sizeof(query), "You have entered the \"%s\" draw.", DrawTitle);
	SendClientMessage(playerid, YELLOW, query);
	return 1;
}

CMD:drawwinner(playerid)
{
	if(Player[playerid][AdminLevel] < 7)
		return 1;

	if(isnull(DrawTitle))
		return SendClientMessage(playerid, -1, "There is no draw currently happening.");

	new Cache:cache, count, name[25], winner;
	cache = mysql_query(MYSQL_MAIN, "SELECT * FROM draw");
	count = cache_get_row_count(), winner = random(count);

	if(count < 1)
	{
		DrawTitle[0] = 0;
		DrawVipOnly = 0;
		DrawUnix = 0;
		SaveDraw();
		cache_delete(cache);
		return SendClientMessage(playerid, WHITE, "Nobody entered the draw therefore nobody wins!");
	}

	cache_get_field_content(winner, "name", name);
	mysql_query(MYSQL_MAIN, "DELETE FROM draw", false);
	cache_delete(cache);

	new string[128];
	format(string, sizeof(string), "Congratulations to %s!!!! They have won the \"%s\" draw!", name, DrawTitle);
	SendClientMessageToAll(YELLOW, string);

	DrawTitle[0] = 0;
	DrawVipOnly = 0;
	DrawUnix = 0;
	SaveDraw();
	return 1;
}

CMD:drawinfo(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new Cache:cache = mysql_query(MYSQL_MAIN, "SELECT * FROM draw", false);
	new count = cache_get_row_count();
	cache_delete(cache);

	SendClientMessage(playerid, GREY, "------------------------------------------------------");
	new string[128];

	format(string, sizeof(string), "Title: %s", DrawTitle);
	SendClientMessage(playerid, WHITE, string);
	format(string, sizeof(string), "Vip Only: %s", (DrawVipOnly) ? ("Yes") : ("No"));
	SendClientMessage(playerid, WHITE, string);
	format(string, sizeof(string), "Entries close: %d", DrawUnix);
	SendClientMessage(playerid, WHITE, string);
	format(string, sizeof(string), "Total entries: %s", IntToFormattedStr(count));
	SendClientMessage(playerid, WHITE, string);

	SendClientMessage(playerid, GREY, "------------------------------------------------------");
	return 1;
}

stock SaveDraw()
{
	dini_IntSet("Assets.ini", "DrawVipOnly", DrawVipOnly);
	dini_IntSet("Assets.ini", "DrawUnix", DrawUnix);
	dini_Set("Assets.ini", "DrawTitle", DrawTitle);
	return 1;
}

CMD:impoundcar(playerid)
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 1 || !Player[playerid][CopDuty])
		return SendClientMessage(playerid, WHITE, "You are not a cop or on cop duty.");

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, WHITE, "You are not in a vehicle.");

	new vehicleid = GetPlayerVehicleID(playerid), sql = GetVSQLID(vehicleid), idx = GetVIndex(sql);

	if(sql == 0)
		return SendClientMessage(playerid, WHITE, "This vehicle is not a saved vehicle.");

	if(GetVehicleModel(vehicleid) != 525 || Groups[Veh[idx][Group]][CommandTypes] != 1)
		return SendClientMessage(playerid, -1, "You must be in a LSPD Tow Truck to impound a vehicle.");

	if(!IsTrailerAttachedToVehicle(vehicleid))
		return SendClientMessage(playerid, -1, "You are not towing a vehicle to impound!");

	new towedid = GetVehicleTrailer(vehicleid);

	if(!IsPlayerInDynamicArea(playerid, ImpoundPos))
		return SendClientMessage(playerid, -1, "You're too far away from the impound location.");

	new tsql = GetVSQLID(towedid), tidx = GetVIndex(tsql);

	if(Groups[Veh[tidx][Group]][CommandTypes] == 1)
		return SendClientMessage(playerid, -1, "You can't impound LSPD vehicles");

	if(Veh[tidx][impounded])
		return SendClientMessage(playerid, WHITE, "This vehicle is already impounded.");

	if(Veh[tidx][Job] != 0)
		return SendClientMessage(playerid, -1, "You can't impound Job vehicles");

	if(Veh[tidx][Group] == 0 && Veh[tidx][GangLink] == 0 && !strcmp(Veh[tidx][Owner], "unowned", false))
		return SendClientMessage(playerid, -1, "You can't impound unowned vehicles");

	new Float:tpos[4];

	GetVehiclePos(towedid, tpos[0], tpos[1], tpos[2]);
	GetVehicleZAngle(towedid, tpos[3]);

	Veh[tidx][vX] = tpos[0];
	Veh[tidx][vY] = tpos[1];
	Veh[tidx][vZ] = tpos[2];
	Veh[tidx][vAngle] = tpos[3];
	Veh[tidx][vInt] = 0;
	Veh[tidx][vVWorld] = 0;
	SetVehiclePos(towedid, tpos[0], tpos[1], tpos[2]);
	SetVehicleZAngle(towedid, tpos[3]);

	SendClientMessage(playerid, WHITE, "You have impounded the vehicle!");
	Veh[tidx][impounded] = 1;

	new hour, minute, second, year, month, day;
	gettime(hour, minute, second);
	getdate(year, month, day);
	format(Veh[tidx][ImpoundTime], 64, "%02d/%02d/%d at %02d:%02d:%02d", year, month, day, hour, minute, second);

	Veh[tidx][ImpoundCount]++;
	SaveVehicle(tsql);

	new string[128];
	format(string, sizeof(string), "[IMPOUND] %s has impounded vehicle SQLID %d (Total Impounds: %d)", Player[playerid][NormalName], tsql, Veh[tidx][ImpoundCount]);
	StatLog(string);
	return 1;
}

CMD:impoundlist(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, TicketPos[0], TicketPos[1], TicketPos[2]) || GetPlayerInterior(playerid) != TicketPosInt || GetPlayerVirtualWorld(playerid) != TicketPosVW)
		return SendClientMessage(playerid, WHITE, "You must go to the LSPD front desk to get your vehicle from the impound.");

	new string[255], end[255];

	if(GetPlayerNumCrimes(Player[playerid][NormalName], 1) > 0)
	{
		format(string, sizeof(string), "Wanted suspect %s has attempted to unimpound one of their vehicles!", GetNormalNameEx(playerid));
		foreach(Player, i)
		{
			if(Groups[Player[i][Group]][CommandTypes] != 1)
				continue;
			
			GroupMessage(i, ANNOUNCEMENT, string, 1);
			break;
		}

		SendClientMessage(playerid, -1, "You cannot retrieve your vehicle while you are wanted.");
		return 1;
	}
	
	for(new i; i < 5; i++)
	{
		if(Player[playerid][Cars][i] > 0)
		{
			new idx = GetVIndex(Player[playerid][Cars][i]);
			if(Veh[idx][impounded] == 1)
			{
				new cost = GetVehicleBasePrice(Veh[idx][Model]) / 10;
				if(Veh[idx][ImpoundCount] < 3)
					format(string, sizeof(string), "{F55858}[ %s ] %s  (Pay %s)\n", vNames[Veh[idx][Model] - 400] ,Veh[idx][VName], PrettyMoney(cost + (cost * Veh[idx][ImpoundCount])));
				else
					format(string, sizeof(string), "{F55858}[ %s ] %s  (No longer available)\n", vNames[Veh[idx][Model] - 400] ,Veh[idx][VName]);
			}
			else
				format(string, sizeof(string), "Vehicle not impounded\n");
		}
		else
		format(string, sizeof(string), "Empty\n");
		strcat(end, string);
	}

	if(isnull(end))
		format(end, sizeof(end), "No cars currently impounded.");

	ShowPlayerDialog(playerid, IMPOUND_LIST, DIALOG_STYLE_LIST, "Impounded Vehicles", end, "Pay", "Exit");
	return 1;
}

CMD:gimpoundlist(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, TicketPos[0], TicketPos[1], TicketPos[2]) || GetPlayerInterior(playerid) != TicketPosInt || GetPlayerVirtualWorld(playerid) != TicketPosVW)
		return SendClientMessage(playerid, WHITE, "You must go to the LSPD front desk to get your vehicle from the impound.");

	new string[255], end[1000];

	if(Player[playerid][Gang] == 0)
		return SendClientMessage(playerid, -1, "You must be in a gang to use this command");

	if(!DoesPlayerHavePerms(playerid, PERM_GANGIMPLIST))
		return SendClientMessage(playerid, WHITE, "You don't have permissions to do this.");
	
	if(GetPlayerNumCrimes(Player[playerid][NormalName], 1) > 0)
	{
		format(string, sizeof(string), "Wanted suspect %s has attempted to unimpound one of their vehicles!", GetNormalNameEx(playerid));
		foreach(Player, i)
		{
			if(Groups[Player[i][Group]][CommandTypes] != 1)
				continue;
			
			GroupMessage(i, ANNOUNCEMENT, string, 1);
			break;
		}

		SendClientMessage(playerid, -1, "You cannot retrieve your vehicle while you are wanted.");
		return 1;
	}

	new slot;
	for(new i; i < MAX_VEHICLES; i++)
	{
		if(slot >= MAX_GROUP_VEHICLES)
			break;

		new idx = GetVIndex(Veh[i][SQLID]);

		if(idx == -1)
			continue;

		if(Veh[idx][GangLink] != Player[playerid][Gang])
			continue;

		if(Veh[idx][impounded] == 0)
			continue;

		new cost = GetVehicleBasePrice(Veh[idx][Model]) / 10;
		if(Veh[idx][ImpoundCount] < 3)
			format(string, sizeof(string), "[ %s ] %s  (Pay %s)\n", Veh[idx][Plate], vNames[Veh[idx][Model] - 400], PrettyMoney(cost + (cost * Veh[idx][ImpoundCount])));
		else
			format(string, sizeof(string), "[ %s ] %s  (No longer available)\n", Veh[idx][Plate], vNames[Veh[idx][Model] - 400]);

		tGangVID[playerid][slot] = Veh[idx][SQLID];
		slot++;
		strcat(end, string);
	}

	if(isnull(end))
		return SendClientMessage(playerid, -1, "There are no impounded vehicles in your gang.");

	ShowPlayerDialog(playerid, G_IMPOUND_LIST, DIALOG_STYLE_LIST, "Gang Impounded Vehicles", end ,"Pay", "Exit");
	return 1;
}

CMD:fimpoundlist(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, TicketPos[0], TicketPos[1], TicketPos[2]) || GetPlayerInterior(playerid) != TicketPosInt || GetPlayerVirtualWorld(playerid) != TicketPosVW)
		return SendClientMessage(playerid, WHITE, "You must go to the LSPD front desk to get your vehicle from the impound.");

	new string[255], end[1000];

	if(Player[playerid][Group] == 0)
		return SendClientMessage(playerid, -1, "You must be in a faction to use this command");

	if(Groups[Player[playerid][Group]][CommandTypes] != 4)
	{
		if(Player[playerid][GroupRank] < 5)
			return SendClientMessage(playerid, -1, "You must be rank 5 or above to use this command!");
	}
	else
	{
	    if(Player[playerid][GroupRank] < 4)
			return SendClientMessage(playerid, -1, "You must be rank 4 or above to use this command!");
	}

	if(GetPlayerNumCrimes(Player[playerid][NormalName], 1) > 0)
	{
		format(string, sizeof(string), "Wanted suspect %s has attempted to unimpound one of their vehicles!", GetNormalNameEx(playerid));
		foreach(Player, i)
		{
			if(Groups[Player[i][Group]][CommandTypes] != 1)
				continue;
			
			GroupMessage(i, ANNOUNCEMENT, string, 1);
			break;
		}

		SendClientMessage(playerid, -1, "You cannot retrieve your vehicle while you are wanted.");
		return 1;
	}
	
	new slot;

	for(new i; i < MAX_VEHICLES; i++)
	{
		if(slot >= MAX_GROUP_VEHICLES)
			break;

		new idx = GetVIndex(Veh[i][SQLID]);

		if(idx == -1)
			continue;

		if(Veh[idx][Group] != Player[playerid][Group])
			continue;

		if(Veh[idx][impounded] == 0)
			continue;

		new cost = GetVehicleBasePrice(Veh[idx][Model]) / 10;
		if(Veh[idx][ImpoundCount] < 3)
			format(string, sizeof(string), "[ %s ] %s  (Pay %s)\n", Veh[idx][Plate], vNames[Veh[idx][Model] - 400], PrettyMoney(cost + (cost * Veh[idx][ImpoundCount])));
		else
			format(string, sizeof(string), "[ %s ] %s  (No longer available)\n", Veh[idx][Plate], vNames[Veh[idx][Model] - 400]);

		tGroupVID[playerid][slot] = Veh[idx][SQLID];
		slot++;
		strcat(end, string);
	}

	if(isnull(end))
		return SendClientMessage(playerid, -1, "There are no impounded vehicles in your faction.");

	ShowPlayerDialog(playerid, F_IMPOUND_LIST, DIALOG_STYLE_LIST, "Faction Impounded Vehicles", end ,"Pay", "Exit");
	return 1;
}

public OnPlayerWeaponShot( playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ )
{
	//Anti-FakeShot
	new string[128], detected;
	if(weaponid == 0)
	{
		format(string, sizeof(string), "[AC] %s may be using fake-shot hacks.", GetName(playerid));
		SendToAdmins(ADMINORANGE, string, 1);
		return 0;
	}
	else if(weaponid != 38)
	{
		new time = gettime();
		
		if(time == Player[playerid][LastShotTime])
		{
			Player[playerid][FakeShotDetected] ++;
			
			if(Player[playerid][FakeShotDetected] >= 9)
			{
				format(string, sizeof(string), "[AC] %s may be using fake-shot hacks.", GetName(playerid));
				SendToAdmins(ADMINORANGE, string, 1);
				detected = 1;
			}
		}
		else
		{
			Player[playerid][FakeShotDetected] = 0;
		}
		Player[playerid][LastShotTime] = time;
	}
	if(detected)
		return 0;
		
	//Anti-Shooting non streamed players
	if(hittype == BULLET_HIT_TYPE_PLAYER)
	{
		if(!IsPlayerStreamedIn(hitid, playerid))
		{
			format(string, sizeof(string), "[AC] %s maybe shooting a player they cannot see. (%d)", GetName(playerid), hitid);
			SendToAdmins(ADMINORANGE, string, 1);
		}
	}
	
	if(Groups[Player[playerid][Group]][CommandTypes] == 1 && Player[playerid][GunTazer] == 1 && GetPlayerWeapon(playerid) == 23)
	{
		ApplyAnimation(playerid, "SILENCED", "Silence_reload", 4.1, 0, 1, 1, 0, 0, 1);
		PlayerPlayNearbySound(playerid, 6003);
		
		if(Player[playerid][CanTaze] > gettime())
		{
			SendClientMessage(playerid, -1, "Your taser is on cooldown.");
			return 0;
		}	
		if(hittype == BULLET_HIT_TYPE_PLAYER)
		{
			if(GetDistanceBetweenPlayers(hitid, playerid) < 10 && Player[hitid][AdminDuty] < 1)
			{
				if(Player[hitid][Tazed] == 1)
					return 0;

				if(IsPlayerInAnyVehicle(hitid))
				{
					new v = GetPlayerVehicleID(hitid);
					if(GetVehicleModel(v) == 448 || GetVehicleModel(v) == 461 || GetVehicleModel(v) == 462 || GetVehicleModel(v) == 463 || GetVehicleModel(v) == 468 || GetVehicleModel(v) == 471 || GetVehicleModel(v) == 481)
					{
						RemovePlayerFromVehicle(hitid);
						ClearAnimations(hitid);
					}
					else if(GetVehicleModel(v) == 509 || GetVehicleModel(v) == 510 || GetVehicleModel(v) == 521 || GetVehicleModel(v) == 522 || GetVehicleModel(v) == 523 || GetVehicleModel(v) == 581 || GetVehicleModel(v) == 586)
					{
						RemovePlayerFromVehicle(hitid);
						ClearAnimations(hitid);
					}
				}

				TogglePlayerControllable(hitid, false);
				ApplyAnimation(hitid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
				SetPVarInt(hitid, "TasedBro", gettime() + 12);
				Player[hitid][Tazed] = 1;
				format(string, sizeof(string), "* %s gets tased and falls to the floor.", GetNameEx(hitid));
				NearByMessage(hitid, NICESKY, string);
				SendClientMessage(hitid, WHITE, "You have been tased. The effect will last for 12 seconds.");
				Player[playerid][CanTaze] = gettime() + 5;
			}
			return 0;
		}
		else if(hittype == BULLET_HIT_TYPE_VEHICLE)
			return 0;
	}
	return 1;
}

CMD:testradius(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	new size, string[51];
	if(sscanf(params, "d", size))
		return SendClientMessage(playerid, GREY, "SYNTAX: /testradius [size]");

	if(size > 500 || size < 5)
		return SendClientMessage(playerid, WHITE, "The checkpoint size needs to be between 5 and 500!");

	format(string, sizeof(string), "Creating checkpoint with radius of %d.", size);
	SendClientMessage(playerid, WHITE, string);
	new Float:px, Float:py, Float:pz;
	GetPlayerPos(playerid, px, py, pz);
	SetPlayerCheckpoint(playerid, px, py, pz, size);
	Player[playerid][Checkpoint] = 1;

	return 1;
}

CMD:buypizza(playerid, params[])
{
	if(Player[playerid][InBusiness] == 0)
		return SendClientMessage(playerid, WHITE, "You ain't in a business.");

	if(!IsPlayerInRangeOfPoint(playerid, 1.5, Businesses[Player[playerid][InBusiness]][bInteractX], Businesses[Player[playerid][InBusiness]][bInteractY], Businesses[Player[playerid][InBusiness]][bInteractZ]) && Player[playerid][InBusiness] != 0)
		return SendClientMessage(playerid, GREY, "You must stand near the interaction point to do this.");

	new b = Player[playerid][InBusiness];

	if(Businesses[b][bType] != 23)
		return SendClientMessage(playerid, WHITE, "You need to be inside a pizza business to buy pizza.");

	if(isnull(params) || !IsNumeric(params) || strval(params) < 1 || strval(params) > 10)
		return SendClientMessage(playerid, GREY, "SYNTAX: /buypizza [1 - 10]");

	if(Player[playerid][Money] < Businesses[b][bProductPrice1] * strval(params))
		return SendClientMessage(playerid, WHITE, "You don't have enough money for a pizza!");
	
	Player[playerid][Money] -= Businesses[b][bProductPrice1] * strval(params);
	Player[playerid][PizzaSlices] += 8 * strval(params);
	SaveBusiness(b);
	SendClientMessage(playerid, WHITE, "You have bought pizza!");
	return 1;
}

CMD:interactpoint(playerid)
{
	if(Player[playerid][Business] == 0 || Player[playerid][InBusiness] == 0 || Player[playerid][Business] != Player[playerid][InBusiness])
		return SendClientMessage(playerid, WHITE, "You can't do this unless you're in your business.");

	new biz = Player[playerid][Business];

	if(IsPlayerInRangeOfPoint(playerid, 1.5, Businesses[biz][bInteriorX], Businesses[biz][bInteriorY], Businesses[biz][bInteriorZ]))
		return SendClientMessage(playerid, WHITE, "You can't place that there, you're too close to the door.");

	Businesses[biz][bInteractX] = GetPlayerX(playerid);
	Businesses[biz][bInteractY] = GetPlayerY(playerid);
	Businesses[biz][bInteractZ] = GetPlayerZ(playerid) - 0.5;
	if(IsValidDynamicPickup(Businesses[biz][bInteractCP]))
		DestroyDynamicPickup(Businesses[biz][bInteractCP]);
	Businesses[biz][bInteractCP] = CreateDynamicPickup(1318, 1, Businesses[biz][bInteractX], Businesses[biz][bInteractY], Businesses[biz][bInteractZ], 65000 + biz, Businesses[biz][bInteriorID]);
	SaveBusiness(biz);

	SendClientMessage(playerid, WHITE, "You have set the interaction point inside your business.");
	return 1;
}

stock IsNumberBlocked(number, blocked)
{
	new Cache:cache, string[128], count;
	mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT * FROM blockednumbers WHERE phone = '%d' AND blocked = '%d'", number, blocked);
	cache = mysql_query(MYSQL_MAIN, string);
	count = cache_get_row_count();
	cache_delete(cache);

	if(count > 0)
		return 1;

	return 0;
}

forward IRC_SearchIP(params[]);
public IRC_SearchIP(params[])
{
	new query[128], Cache:cache, count, idx, field[32], field2[32];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM connections WHERE ip LIKE '%e%%'", params);
	cache = mysql_query(MYSQL_MAIN, query);
	count = cache_get_row_count();

	if(count == 0)
	{

		CallRemoteFunction("IRC_Message", "s", "Nobody found.");
		cache_delete(cache);
		return 1;
	}

	new field3[32];
	while(idx < count)
	{
		cache_get_field_content(idx, "name", field);
		cache_get_field_content(idx, "date", field2);
		cache_get_field_content(idx, "ip", field3);
		format(query, sizeof(query), "Name: %s - Connected on %s last: %s", field, field3, field2);
		CallRemoteFunction("IRC_Message", "s", query);
		idx ++;
	}
	cache_delete(cache);
	return 1;
}

CMD:passjoint(playerid, params[])
{
	if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_SMOKE_CIGGY)
		return SendClientMessage(playerid, WHITE, "You can't do that, you don't have a joint.");

	new id;
	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /passjoint [playerid]");

	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, WHITE, "That player is not connected.");

	if(playerid == id)
		return SendClientMessage(playerid, WHITE, "You can't pass yourself a joint.");

	if(GetDistanceBetweenPlayers(playerid, id) > 6)
		return SendClientMessage(playerid, WHITE, "That player is too far away.");

	new string[128];
	format(string, sizeof(string), "You have offered %s your joint.", GetNameEx(id));
	SendClientMessage(playerid, WHITE, string);
	format(string, sizeof(string), "%s has offered you a joint. (/takejoint)", GetNameEx(playerid));
	SendClientMessage(id, WHITE, string);

	SetPVarInt(id, "PassJoint_Time", gettime() + 10);
	SetPVarInt(id, "PassJoint_ID", playerid + 1);
	return 1;
}

CMD:takejoint(playerid)
{
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_SMOKE_CIGGY)
		return SendClientMessage(playerid, WHITE, "You can't take that, you already have a joint.");

	new id = GetPVarInt(playerid, "PassJoint_ID") - 1;
	DeletePVar(playerid, "PassJoint_ID");
	DeletePVar(playerid, "PassJoint_Time");

	if(id == -1)
		return SendClientMessage(playerid, WHITE, "Nobody offered you a joint.");

	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, WHITE, "That player is not connected.");

	if(GetDistanceBetweenPlayers(playerid, id) > 6)
		return SendClientMessage(playerid, WHITE, "That player is too far away.");

	if(GetPlayerSpecialAction(id) != SPECIAL_ACTION_SMOKE_CIGGY || Player[id][PotTimer] < gettime())
		return SendClientMessage(playerid, -1, "That player no longer has a joint.");

	new string[128];
	format(string, sizeof(string), "* %s has passed a joint to %s.", GetNameEx(id), GetNameEx(playerid));
	NearByMessage(playerid, NICESKY, string);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
	Player[playerid][PotTimer] = Player[id][PotTimer];
	SetPlayerDrunkLevel(playerid, 10000);
	SetPlayerWeather(playerid, 32);
	SetPlayerSpecialAction(id, 0);

	return 1;
}

CMD:passdrink(playerid, params[])
{
	if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DRINK_BEER && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DRINK_WINE && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DRINK_SPRUNK)
		return SendClientMessage(playerid, WHITE, "You can't do that, you don't have a drink.");

	new id;
	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /passdrink [playerid]");

	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, WHITE, "That player is not connected.");

	if(playerid == id)
		return SendClientMessage(playerid, WHITE, "You can't pass yourself a drink.");

	if(GetDistanceBetweenPlayers(playerid, id) > 6)
		return SendClientMessage(playerid, WHITE, "That player is too far away.");

	new string[128];
	format(string, sizeof(string), "You have offered %s your drink.", GetNameEx(id));
	SendClientMessage(playerid, WHITE, string);
	format(string, sizeof(string), "%s has offered you a drink. (/takedrink)", GetNameEx(playerid));
	SendClientMessage(id, WHITE, string);

	SetPVarInt(id, "PassDrink_Time", gettime() + 10);
	SetPVarInt(id, "PassDrink_ID", playerid + 1);
	SetPVarInt(id, "PassDrink_Type", GetPlayerSpecialAction(playerid));
	return 1;
}

CMD:takedrink(playerid)
{
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_BEER || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_WINE || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_SPRUNK)
		return SendClientMessage(playerid, WHITE, "You can't take that, you already have a drink.");

	new id = GetPVarInt(playerid, "PassDrink_ID") - 1, action = GetPVarInt(playerid, "PassDrink_Type");
	DeletePVar(playerid, "PassDrink_ID");
	DeletePVar(playerid, "PassDrink_Time");
	DeletePVar(playerid, "PassDrink_Type");

	if(id == -1)
		return SendClientMessage(playerid, WHITE, "Nobody offered you a drink.");

	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, WHITE, "That player is not connected.");

	if(GetDistanceBetweenPlayers(playerid, id) > 6)
		return SendClientMessage(playerid, WHITE, "That player is too far away.");

	if(GetPlayerSpecialAction(id) != action)
		return SendClientMessage(playerid, -1, "That player no longer has a drink.");

	new string[128];
	format(string, sizeof(string), "* %s has passed a drink to %s.", GetNameEx(id), GetNameEx(playerid));
	NearByMessage(playerid, NICESKY, string);
	SetPlayerSpecialAction(playerid, action);
	SetPlayerSpecialAction(id, 0);

	return 1;
}

stock GetIPCountry(playerid, ip[])
{
	new url[255];
	strcat(url, "spelsajten.net/geoip.php?ip=" );
	strcat(url, ip);
	HTTP(playerid, HTTP_GET, url, "", "OnIpCountryResponse");
}

forward OnIpCountryResponse(playerid, response, const data[]);
public  OnIpCountryResponse(playerid, response, const data[])
{
	new CountryIndex = strval(data), country[64];

	if ( !( 0 <= CountryIndex <= 240 ) )
		CountryIndex = 0;

	strunpack( country, g_aszCountryInfo[ CountryIndex ][ e_szCountryName ] );
	SetPVarString(playerid, "IP_COUNTRY_LOOKUP_RESULT", country);

}

forward IRC_SearchName(params[]);
public IRC_SearchName(params[])
{
	new query[128], Cache:cache, count, idx, field2[32];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM connections WHERE name = '%e'", params);
	cache = mysql_query(MYSQL_MAIN, query);
	count = cache_get_row_count();

	if(count == 0)
	{

		CallRemoteFunction("IRC_Message", "s", "Nobody found.");
		cache_delete(cache);
		return 1;
	}

	new field3[32];
	while(idx < count)
	{
		cache_get_field_content(idx, "date", field2);
		cache_get_field_content(idx, "ip", field3);
		format(query, sizeof(query), "%s - Connected last: %s", field3, field2);
		CallRemoteFunction("IRC_Message", "s", query);
		idx ++;
	}
	cache_delete(cache);
	return 1;
}

stock UpdateObjectLabel(obj_id, LABEL_TYPE, extra = 0, create = 0)
{
	new string[128], Text3D:label_id;
	switch(LABEL_TYPE)
	{
		case LABEL_TYPE_HOUSE:
		{
			if(!strcmp(Houses[obj_id][hOwner], "Nobody", true))
				format(string, sizeof(string), "House %d\nAvailable for %s", obj_id, PrettyMoney(Houses[obj_id][HousePrice]));
			else format(string, sizeof(string), "House %d", obj_id);

			if(create)
			{
				if(IsValidDynamic3DTextLabel(Houses[obj_id][hLabel]))
					DestroyDynamic3DTextLabel(Houses[obj_id][hLabel]);
				Houses[obj_id][hLabel] = CreateDynamic3DTextLabel(string, LABEL_COLOR, Houses[obj_id][hExteriorX], Houses[obj_id][hExteriorY], Houses[obj_id][hExteriorZ] + 0.75, 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, Houses[obj_id][hExteriorVW], Houses[obj_id][hExteriorID], -1,  50);
				label_id = Houses[obj_id][hLabel];
			}
			else UpdateDynamic3DTextLabelText(Houses[obj_id][hLabel], LABEL_COLOR, string);
		}
		case LABEL_TYPE_BIZ:
		{
			if(!strcmp(Businesses[obj_id][bOwner], "Nobody", true))
				format(string, sizeof(string), "Business %d\n%s\nAvailable for %s", obj_id, Businesses[obj_id][bName], PrettyMoney(Businesses[obj_id][bPrice]));
			else format(string, sizeof(string), "Business %d\n%s", obj_id, Businesses[obj_id][bName]);

			if(create)
			{
				if(IsValidDynamic3DTextLabel(Businesses[obj_id][bLabel]))
					DestroyDynamic3DTextLabel(Businesses[obj_id][bLabel]);
				Businesses[obj_id][bLabel] = CreateDynamic3DTextLabel(string, LABEL_COLOR, Businesses[obj_id][bExteriorX], Businesses[obj_id][bExteriorY], Businesses[obj_id][bExteriorZ] + 0.75, 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, Businesses[obj_id][bExteriorID], -1,  50);
				label_id = Businesses[obj_id][bLabel];
			}
			else UpdateDynamic3DTextLabelText(Businesses[obj_id][bLabel], LABEL_COLOR, string);
		}
		case LABEL_TYPE_FACTION:
		{
			format(string, sizeof(string), "Faction %d\n%s", obj_id, Groups[obj_id][GroupName]);

			if(create)
			{
				if(IsValidDynamic3DTextLabel(Groups[obj_id][fLabel]))
					DestroyDynamic3DTextLabel(Groups[obj_id][fLabel]);
				if(IsValidDynamic3DTextLabel(Groups[obj_id][fLabel2]))
					DestroyDynamic3DTextLabel(Groups[obj_id][fLabel2]);

				Groups[obj_id][fLabel] = CreateDynamic3DTextLabel(string, LABEL_COLOR, Groups[obj_id][HQExteriorX], Groups[obj_id][HQExteriorY], Groups[obj_id][HQExteriorZ] + 0.75, 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, Groups[obj_id][HQExteriorID], -1,  50);
				Groups[obj_id][fLabel2] = CreateDynamic3DTextLabel(string, LABEL_COLOR, Groups[obj_id][HQExterior2][0], Groups[obj_id][HQExterior2][1], Groups[obj_id][HQExterior2][2] + 0.75, 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, Groups[obj_id][HQExteriorVW2], Groups[obj_id][HQExteriorID], -1,  50);
				label_id = Groups[obj_id][fLabel];
			}
			else
			{
				UpdateDynamic3DTextLabelText(Groups[obj_id][fLabel], LABEL_COLOR, string);
				UpdateDynamic3DTextLabelText(Groups[obj_id][fLabel2], LABEL_COLOR, string);
			}
		}
		case LABEL_TYPE_JOB:
		{
			switch(extra)
			{
				case 0: //Join Pos
				{
					format(string, sizeof(string), "%s\n/joinjob [VIP: /joinjob2]", Jobs[obj_id][JobName]);

					if(create)
					{
						if(IsValidDynamic3DTextLabel(Jobs[obj_id][jLabel]))
							DestroyDynamic3DTextLabel(Jobs[obj_id][jLabel]);

						Jobs[obj_id][jLabel] = CreateDynamic3DTextLabel(string, LABEL_COLOR, Jobs[obj_id][JobJoinPosX], Jobs[obj_id][JobJoinPosY], Jobs[obj_id][JobJoinPosZ] + 0.75, 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, Jobs[obj_id][JobJoinPosWorld], Jobs[obj_id][JobJoinPosInterior], -1,  50);
						label_id = Jobs[obj_id][jLabel];
					}
					else UpdateDynamic3DTextLabelText(Jobs[obj_id][jLabel], LABEL_COLOR, string);
				}
				case 1: //Misc 1
				{
					format(string, sizeof(string), "%s", Jobs[obj_id][JobMiscLocationOneMessage]);
					if(create)
					{
						if(IsValidDynamic3DTextLabel(Jobs[obj_id][Loc1Label]))
							DestroyDynamic3DTextLabel(Jobs[obj_id][Loc1Label]);

						Jobs[obj_id][Loc1Label] = CreateDynamic3DTextLabel(string, LABEL_COLOR, Jobs[obj_id][JobMiscLocationOneX], Jobs[obj_id][JobMiscLocationOneY], Jobs[obj_id][JobMiscLocationOneZ] + 0.75, 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, Jobs[obj_id][JobMiscLocationOneWorld], Jobs[obj_id][JobMiscLocationOneInterior], -1,  50);
						label_id = Jobs[obj_id][Loc1Label];
					}
					else UpdateDynamic3DTextLabelText(Jobs[obj_id][Loc1Label], LABEL_COLOR, string);
				}
				case 2: //Misc 2
				{
					format(string, sizeof(string), "%s", Jobs[obj_id][JobMiscLocationTwoMessage]);
					if(create)
					{
						if(IsValidDynamic3DTextLabel(Jobs[obj_id][Loc2Label]))
							DestroyDynamic3DTextLabel(Jobs[obj_id][Loc2Label]);

						Jobs[obj_id][Loc2Label] = CreateDynamic3DTextLabel(string, LABEL_COLOR, Jobs[obj_id][JobMiscLocationTwoX], Jobs[obj_id][JobMiscLocationTwoY], Jobs[obj_id][JobMiscLocationTwoZ] + 0.75, 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, Jobs[obj_id][JobMiscLocationTwoWorld], Jobs[obj_id][JobMiscLocationTwoInterior], -1,  50);
						label_id = Jobs[obj_id][Loc2Label];
					}
					else UpdateDynamic3DTextLabelText(Jobs[obj_id][Loc2Label], LABEL_COLOR, string);
				}
			}
		}
	}

	if(create)
	{
		foreach(Player, i)
		{
			if(GetPlayerToggle(i, TOGGLE_3D_LABELS) == true)
			{
				Streamer_RemoveArrayData(STREAMER_TYPE_3D_TEXT_LABEL, label_id, E_STREAMER_PLAYER_ID, i);
				if(LABEL_TYPE == LABEL_TYPE_FACTION)
					Streamer_RemoveArrayData(STREAMER_TYPE_3D_TEXT_LABEL, Groups[obj_id][fLabel2], E_STREAMER_PLAYER_ID, i);
			}
		}
	}
	return 1;
}

stock UpdateStreamerItemLocation(type, {Text3D,_}:id, Float:x, Float:y, Float:z, vw = -1, interior = -1)
{
	Streamer_SetFloatData(type, id, E_STREAMER_X, x);
	Streamer_SetFloatData(type, id, E_STREAMER_Y, y);
	Streamer_SetFloatData(type, id, E_STREAMER_Z, z);
	Streamer_SetIntData(type, id, E_STREAMER_INTERIOR_ID, interior);
	Streamer_SetIntData(type, id, E_STREAMER_WORLD_ID, vw);
	return 1;
}

stock IsExistingPhoneNumber(number)
{
	new query[128];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM phones WHERE number = '%d'", number);
	new Cache:cache = mysql_query(MYSQL_MAIN, query), count = cache_get_row_count();
	cache_delete(cache);

	if(count > 0)
		return 1;

	return 0;
}

stock GetPhoneInfo(number, info[])
{
	new query[128];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM phones WHERE number = '%d'", number);
	new Cache:cache = mysql_query(MYSQL_MAIN, query);
	new result[32];

	if(!cache_get_row_count())
	{
		cache_delete(cache);
		return result;
	}
	
	cache_get_field_content(0, info, result);
	cache_delete(cache);
	return result;
}

stock PlayerOwnsPhone(playerid)
{
	new query[128];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM phones WHERE owner = '%e'", Player[playerid][NormalName]);
	new Cache:cache = mysql_query(MYSQL_MAIN, query), count = cache_get_row_count();
	cache_delete(cache);
	return count;
}

stock GetContactName(number, contactnumber)
{
	new query[128];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM phonecontacts WHERE number = '%d' AND contactnumber = '%d'", number, contactnumber);
	new Cache:cache = mysql_query(MYSQL_MAIN, query), count = cache_get_row_count();

	new result[32];
	if(count == 0)
		format(result, sizeof(result), "%d", contactnumber);
	else
		cache_get_field_content(0, "contactname", result);

	cache_delete(cache);

	return result;
}

stock GetContactNumber(number, contactname[])
{
	new query[128];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM phonecontacts WHERE number = '%d' AND contactname LIKE '%e%%'", number, contactname);
	new Cache:cache = mysql_query(MYSQL_MAIN, query), count = cache_get_row_count();

	new result;
	if(count == 0)
		result = -1;
	else
		result = cache_get_field_content_int(0, "contactnumber");

	cache_delete(cache);

	return result;
}

stock SaveSMS(phone, otherphone, received, message[])
{
	new string[512];
	mysql_format(MYSQL_MAIN, string, sizeof(string), "INSERT INTO phonesmshistory (phone, otherphone, received, message, seen) VALUES ('%d', '%d', '%d', '%e', '%d')", phone, otherphone, received, message, (received) ? (0) : (1));
	mysql_query(MYSQL_MAIN, string, false);
	return 1;
}

stock SaveCall(phone, otherphone, called)
{
	new string[128];
	mysql_format(MYSQL_MAIN, string, sizeof(string), "INSERT INTO phonecallhistory (phone, otherphone, called) VALUES ('%d', '%d', '%d')", phone, otherphone, called);
	mysql_query(MYSQL_MAIN, string, false);
	return 1;
}

stock GetCallHistory(phone, page)
{
	new string[255];
	mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT * FROM phonecallhistory WHERE phone = '%d' AND deleted = '0' ORDER BY id DESC", phone);
	new Cache:cache = mysql_query(MYSQL_MAIN, string), count = cache_get_row_count(), idx = page * 8;

	new result[600], end, number, called;
	while(idx < count && end < 8)
	{
		cache_set_active(cache);
		called = cache_get_field_content_int(idx, "called");
		number = cache_get_field_content_int(idx, "otherphone");
		format(result, sizeof(result), "%s%s %s\n", result, (called == 1) ? ("Called") : ("Called by"), GetContactName(phone, number));

		end++;
		idx++;
	}

	cache_delete(cache);

	if(idx < count)
		strcat(result, "Next\n");

	if(page > 0)
		strcat(result, "Back\n");

	if(isnull(result))
		strcat(result, "You have no call history.");
	else
		strcat(result, "Clear History\n");
	return result;
}

stock GetSMSHistory(playerid, phone, page) //sentreceive = 1 for sent, 0 for receive
{
	new string[255];
	mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT max(id) AS \"recent\" FROM phonesmshistory WHERE phone = '%d' AND deleted = '0' GROUP BY otherphone ORDER BY max(id) DESC", phone);
	mysql_tquery(MYSQL_MAIN, string, "OnSmsLoad", "ddd", playerid, phone, page);
	return ShowPlayerDialog(playerid, PHONE_LOADING, DIALOG_STYLE_MSGBOX, "Phone - Inbox", "Loading message history...", "Please wait...", "");
	/*new Cache:cache = mysql_query(MYSQL_MAIN, string), count = cache_get_row_count(), idx = page * 8;

	new message[255], result[1500], end, seen, number, id;
	while(idx < count && end < 8)
	{
		cache_set_active(cache);

		id = cache_get_field_content_int(idx, "recent");
		mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT * FROM phonesmshistory WHERE id = '%d'", id);
		new Cache:temp = mysql_query(MYSQL_MAIN, string);

		cache_set_active(temp);
		seen = cache_get_field_content_int(0, "seen");
		number = cache_get_field_content_int(0, "otherphone");
		cache_get_field_content(0, "message", message);
		if(strlen(message) > 30)
		{
			message[29] = EOS;
			strins(message, "...", 29);
		}
		format(result, sizeof(result), "%s%s%s: %s\n", result, (seen == 0) ? (BLUETEXT) : ("{FFFFFF}"), GetContactName(phone, number), message);

		cache_delete(temp);

		end++;
		idx++;
	}

	cache_delete(cache);

	if(idx < count)
		strcat(result, "Next\n");

	if(page > 0)
		strcat(result, "Back\n");

	if(isnull(result))
		strcat(result, "You have no message history.");
	else
		strcat(result, "Clear History\n");
	return result;*/
}
forward OnSmsLoad(playerid, phone, page);
public OnSmsLoad(playerid, phone, page)
{
	new Cache:cache = cache_save(), count = cache_get_row_count(), idx = page * 8, string[128];

	new message[255], result[1500], end, seen, number, id;
	while(idx < count && end < 8)
	{
		cache_set_active(cache);

		id = cache_get_field_content_int(idx, "recent");
		mysql_format(MYSQL_MAIN, string, sizeof(string), "SELECT * FROM phonesmshistory WHERE id = '%d'", id);
		new Cache:temp = mysql_query(MYSQL_MAIN, string);

		cache_set_active(temp);
		seen = cache_get_field_content_int(0, "seen");
		number = cache_get_field_content_int(0, "otherphone");
		cache_get_field_content(0, "message", message);
		if(strlen(message) > 30)
		{
			message[29] = EOS;
			strins(message, "...", 29);
		}
		format(result, sizeof(result), "%s%s%s: %s\n", result, (seen == 0) ? (BLUETEXT) : ("{FFFFFF}"), GetContactName(phone, number), message);

		cache_delete(temp);

		end++;
		idx++;
	}

	cache_delete(cache);

	if(idx < count)
		strcat(result, "Next\n");

	if(page > 0)
		strcat(result, "Back\n");

	if(isnull(result))
		strcat(result, "You have no message history.");
	else
		strcat(result, "Clear History\n");
		
	return ShowPlayerDialog(playerid, PHONE_INBOX, DIALOG_STYLE_LIST, "Phone Menu - Inbox", result, "Select", "Close");
}

CMD:choosephone(playerid)
{
	if(PlayerOwnsPhone(playerid) == 0)
		return SendClientMessage(playerid, GREY, "You don't have any phones.");

	if(IsPlayerOnPhone(playerid))
		return SendClientMessage(playerid, WHITE, "You are on the phone and cannot do this right now.");

	new query[128];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM phones WHERE owner = '%e'", Player[playerid][NormalName]);
	new Cache:cache = mysql_query(MYSQL_MAIN, query), count = cache_get_row_count(), idx;

	new label[32], string[500];
	while(idx < count)
	{
		cache_set_active(cache);

		cache_get_field_content(idx, "label", label);
		format(string, sizeof(string), "%s%s%s (%d)\n", string, (cache_get_field_content_int(idx, "number") == Player[playerid][PhoneN]) ? ("{1BB516}") : ("{FFFFFF}"), label, cache_get_field_content_int(idx, "number"));

		idx ++;
	}
	cache_delete(cache);

	ShowPlayerDialog(playerid, PHONE_CHOOSE, DIALOG_STYLE_LIST, "Choose a phone", string, "Select", "Close");
	return 1;
}

//Streamer stuff

CMD:streamerdebug(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 1)
		return 1;

	new string[128];
	format(string, sizeof(string), "You currently streaming %d (%d) objects out of a max %d.", Streamer_CountVisibleItems(playerid, STREAMER_TYPE_OBJECT), Streamer_CountVisibleItems(playerid, STREAMER_TYPE_OBJECT, 1), Streamer_GetMaxItems(STREAMER_TYPE_OBJECT));
	SendClientMessage(playerid, WHITE, string);

	return 1;
}

CMD:streamerupdate(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;

	SendClientMessage(playerid, WHITE, "Streamer updated.");
	Streamer_Update(playerid);
	return 1;
}

//Party System

stock SendToPlayerParty(partyid, color, message[])
{
	foreach(Player, i)
	{
		if(Player[i][InPlayerParty] == partyid)
			SendClientMessage(i, color, message);
	}
	return 1;
}

CMD:partycreate(playerid, params[])
{
	if(Player[playerid][PlayerParty] != 0)
		return SendClientMessage(playerid, WHITE, "You already have a party created.");

	if(Player[playerid][InPlayerParty] != INVALID_PLAYER_ID)
	{
		new string[128];
		format(string, sizeof(string), "[P] %s has left the party. (Joined another party)", GetName(playerid));
		SendToPlayerParty(Player[playerid][InPlayerParty], GREEN, string);
	}

	Player[playerid][PlayerParty] = 1;
	Player[playerid][PlayerPartyType] = PARTY_TYPE_INVITE;
	Player[playerid][InPlayerParty] = playerid;
	SendClientMessage(playerid, GREEN, "You have created a party. You may now use /partyinvite to invite other players.");
	return 1;
}

CMD:partytype(playerid, params[])
{
	if(Player[playerid][InPlayerParty] != playerid)
		return SendClientMessage(playerid, WHITE, "You aren't the leader of a party.");

	new type;
	if(sscanf(params, "d", type))
		return SendClientMessage(playerid, WHITE, "SYNTAX: /partytype [0 - Open | 1 - Invite Only | 2 - Leader Invite Only]");

	if(type < 0 || type > 2)
		return SendClientMessage(playerid, WHITE, "Invalid party type.");

	new string[128];
	Player[playerid][PlayerPartyType] = type;
	format(string, sizeof(string), "[P] %s has changed the party type to %s.", GetName(playerid), (type == 0) ? ("open") : ((type == 1) ? ("invite only") : ("leader invite only")));
	SendToPlayerParty(Player[playerid][InPlayerParty], GREEN, string);
	return 1;
}

CMD:partyinvite(playerid, params[])
{
	if(Player[playerid][InPlayerParty] == INVALID_PLAYER_ID)
		return SendClientMessage(playerid, WHITE, "You are not in a party.");

	new partyid = Player[playerid][InPlayerParty];
	if(partyid != playerid && Player[partyid][PlayerPartyType] == PARTY_TYPE_CLOSED)
		return SendClientMessage(playerid, WHITE, "Only the party owner may invite players to this party.");

	if(Player[partyid][PartyTotalMemberCount] >= MAX_PLAYERS_IN_PARTY)
		return SendClientMessage(playerid, WHITE, "Your party already has the max amount of party members.");

	new inviteid;
	if(sscanf(params, "u", inviteid))
		return SendClientMessage(playerid, WHITE, "SYNTAX: /partyinvite [playerid]");
	
	if(inviteid == playerid)
		return SendClientMessage(playerid, WHITE, "You can't invite yourself to a party.");
	
	if(!IsPlayerConnected(inviteid))
		return SendClientMessage(playerid, WHITE, "That player isn't connected.");

	new string[128];
	Player[inviteid][PartyPendingInvite] = partyid;
	if(partyid != playerid)
		format(string, sizeof(string), "%s has invited you to join %s's party. Use \"/accept partyinvite\" to join.", GetName(playerid), GetName(partyid));
	else format(string, sizeof(string), "%s has invited you to join their party. Use \"/accept partyinvite\" to join.", GetName(playerid));
	SendClientMessage(inviteid, GREEN, string);
	format(string, sizeof(string), "You have invited %s to your party.", GetName(inviteid));
	SendClientMessage(playerid, WHITE, string);
	return 1;
}

CMD:partyjoin(playerid, params[])
{
	new partyid;
	if(sscanf(params, "u", partyid))
		return SendClientMessage(playerid, WHITE, "SYNTAX: /partyjoin [playerid]");

	if(Player[partyid][PlayerParty] == 0)
		return SendClientMessage(playerid, WHITE, "That player doesn't have an active party.");

	if(Player[partyid][PartyTotalMemberCount] >= MAX_PLAYERS_IN_PARTY)
		return SendClientMessage(playerid, WHITE, "That player's party is full.");

	if(Player[partyid][PlayerPartyType] != PARTY_TYPE_OPEN)
		return SendClientMessage(playerid, WHITE, "You need an invitation to join this party.");

	new string[128];
	if(Player[playerid][InPlayerParty] != INVALID_PLAYER_ID)
	{
		format(string, sizeof(string), "[P] %s has left the party. (Joined another party)", GetName(playerid));
		SendToPlayerParty(Player[playerid][InPlayerParty], GREEN, string);
	}

	format(string, sizeof(string), "[P] %s has joined the party. (Joined)", GetName(playerid));
	SendToPlayerParty(partyid, GREEN, string);
	format(string, sizeof(string), "You have joined %s's party.", GetName(partyid));
	SendClientMessage(playerid, WHITE, string);
	Player[playerid][InPlayerParty] = partyid;
	Player[partyid][PartyTotalMemberCount] ++;
	return 1;
}

CMD:partyleave(playerid, params[])
{
	new partyid = Player[playerid][InPlayerParty];
	if(partyid == INVALID_PLAYER_ID)
		return SendClientMessage(playerid, WHITE, "You are not in a party.");

	new string[128];
	Player[playerid][PlayerParty] = 0;
	Player[playerid][InPlayerParty] = INVALID_PLAYER_ID;
	format(string, sizeof(string), "[P] %s has left the party. (Left)", GetName(playerid));
	SendToPlayerParty(partyid, GREEN, string);
	SendClientMessage(playerid, WHITE, "You have left the party.");
	Player[partyid][PartyTotalMemberCount] --;

	new newLeader = INVALID_PLAYER_ID;
	foreach(Player, i)
	{
		if(Player[i][InPlayerParty] == partyid)
		{
			if(newLeader == INVALID_PLAYER_ID)
			{
				newLeader = i;
				Player[i][PartyTotalMemberCount] = Player[partyid][PartyTotalMemberCount];
				Player[i][PlayerParty] = 1;
				SendClientMessage(i, GREEN, "You are the new party leader.");
			}
			
			Player[i][InPlayerParty] = newLeader;
		}
	}
	if(newLeader != INVALID_PLAYER_ID)
	{
		format(string, sizeof(string), "[P] %s has been made the new party leader.", GetName(newLeader));
		SendToPlayerParty(newLeader, GREEN, string);
	}
	return 1;
}

CMD:partykick(playerid, params[])
{
	new partyid = Player[playerid][InPlayerParty];
	if(partyid != playerid)
		return SendClientMessage(playerid, WHITE, "Only the party leader can kick players.");
	new id;
	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, WHITE, "SYNTAX: /partykick [playerid]");

	if(id == playerid)
		return 1;

	if(!IsPlayerConnected(id))
		return SendClientMessage(playerid, WHITE, "That player isn't connected.");

	if(Player[id][InPlayerParty] != partyid)
		return SendClientMessage(playerid, WHITE, "That player isn't in your party.");

	new string[128];
	Player[partyid][PartyTotalMemberCount] --;
	Player[id][InPlayerParty] = INVALID_PLAYER_ID;
	format(string, sizeof(string), "[P] %s has left the party. (Kicked)", GetName(id));
	SendToPlayerParty(partyid, GREEN, string);
	format(string, sizeof(string), "%s has kicked you from the party.", GetName(playerid));
	SendClientMessage(id, WHITE, string);
	return 1;
}

CMD:partydisband(playerid, params[])
{
	new partyid = Player[playerid][InPlayerParty];
	if(partyid != playerid)
		return SendClientMessage(playerid, WHITE, "Only the party leader can disband the party.");

	new string[128];
	format(string, sizeof(string), "[P] %s has disbanded the party.", GetName(playerid));
	SendToPlayerParty(partyid, GREEN, string);
	SendClientMessage(playerid, WHITE, "You have disbanded your party.");
	Player[playerid][PlayerParty] = 0;
	Player[partyid][PartyTotalMemberCount] = 0;
	foreach(Player, i)
	{
		if(Player[i][InPlayerParty] == partyid)
			Player[i][InPlayerParty] = INVALID_PLAYER_ID;
	}
	return 1;
}

CMD:partylist(playerid, params[])
{
	new partyid = Player[playerid][InPlayerParty];
	if(partyid == INVALID_PLAYER_ID)
		return SendClientMessage(playerid, WHITE, "You are not in a party.");

	new string[128];
	SendClientMessage(playerid, WHITE, "----------------------------------------------------------------");
	foreach(Player, i)
	{
		if(Player[i][InPlayerParty] == partyid && i != partyid)
		{
			SendClientMessage(playerid, GREY, GetName(i));
		}
		else if(Player[i][InPlayerParty] == partyid && i == partyid)
		{
			format(string, sizeof(string), "%s - Party Leader", GetName(i));
			SendClientMessage(playerid, GREY, string);
		}
	}
	SendClientMessage(playerid, WHITE, "----------------------------------------------------------------");
	return 1;
}

CMD:hsleep(playerid)
{
	if(Player[playerid][InHouse] == 0)
		return SendClientMessage(playerid, GREY, "Error, you must be in your house to do this.");

	if(Player[playerid][House] != Player[playerid][InHouse] && Player[playerid][House2] != Player[playerid][InHouse])
		return SendClientMessage(playerid, GREY, "Error, you must be in your house to do this.");

	if(CantUseRightNow(playerid) || IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, GREY, "Error, you can't do this right now.");

	Player[playerid][IsSleeping] = 1;
	ApplyAnimationEx(playerid, "crack", "crckdeth4", 4.1, 0, 1, 1, 1, 1, 1);
	SetPlayerCameraLookAt(playerid, -830.8118, -1360.3612, 87.0289);
	TogglePlayerControllable(playerid, false);
	defer SleepTimer(playerid);
	
	new string[128];
	format(string, sizeof(string), "* %s falls asleep..", GetNameEx(playerid));
	NearByMessage(playerid, NICESKY, string);
	return 1;
}

timer SleepTimer[30 * 1000](playerid)
{
	ClearAnimations(playerid, 1);
	SetPlayerHealth(playerid, 110);
	SetCameraBehindPlayer(playerid);
	Player[playerid][SleepCooldown] = gettime() * (12 * 60);

	new string[128];
	format(string, sizeof(string), "* %s awakens..", GetNameEx(playerid));
	NearByMessage(playerid, NICESKY, string);
	TogglePlayerControllable(playerid, true);
	Player[playerid][IsSleeping] = 0;
	SavePlayerData(playerid);
	return 1;
}

forward PlayerCreationStatus();
public PlayerCreationStatus() return PlayerCreationDisabled;

forward TogglePlayerCreation(lock);
public TogglePlayerCreation(lock) return PlayerCreationDisabled = lock;

CMD:testpvar(playerid)
{
	if(Player[playerid][AdminLevel] < 1)
		return 1;

	new aname[25], string[128];
	GetPVarString(playerid, "AdminName", aname, 25);
	format(string, sizeof(string), "ID: %d | AdminLevel: %d | AdminName: %s", playerid, GetPVarInt(playerid, "AdminLevel"), aname);
	SendClientMessage(playerid, WHITE, string);

	return 1;
}

CMD:togglecollisions(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 3)
		return 1;

	new id;
	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /togglecollisions [playerid] ~ Toggles vehicle collisions for player");

	Player[id][Collisions] = !Player[id][Collisions];
	DisableRemoteVehicleCollisions(id, Player[id][Collisions]);

	new string[128];
	format(string, sizeof(string), "Admin %s has %s vehicle collisions on you.", Player[playerid][AdminName], (Player[id][Collisions]) ? ("disabled") : ("enabled"));
	SendClientMessage(id, YELLOW, string);
	format(string, sizeof(string), "You have %s vehicle collisions on %s.", (Player[id][Collisions]) ? ("disabled") : ("enabled"), GetName(id));
	SendClientMessage(playerid, YELLOW, string);
	return 1;
}

public OnVehicleSirenStateChange(playerid, vehicleid, newstate)
{
	
	new engine, lights, alarm, doors, bonnet, boot, panels, tires, objective;
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	
	new sql = GetVSQLID(vehicleid), idx = GetVIndex(sql), string[128];
	if(idx == -1)
		return 1;
		
	switch(newstate)
	{
		case 0:
		{			
			if(Groups[Veh[idx][Group]][CommandTypes] != 1)
				return 1;

			if(Veh[idx][AutoIndicatorsDisabled] == 1)
				return 1;
				
			stop Veh[idx][IndicatorTimer];
			Veh[idx][IndicatorType] = INDICATOR_TYPE_OFF;
			GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
			UpdateVehicleDamageStatus(vehicleid, panels, doors, encode_lights(0, 0, 0, 0), tires);
			
			switch(Veh[idx][SirenType])
			{
				case POLICE_LIGHT_TYPE_LIGHTBAR:
				{
					if(IsValidDynamicObject(Veh[idx][SirenObjectID][1]))
						DestroyDynamicObject(Veh[idx][SirenObjectID][1]);
					AttachSirensToVehicle(Veh[idx][Link], POLICE_LIGHT_TYPE_LIGHTBAR);	
				}
				case POLICE_LIGHT_TYPE_ROOF:
				{
					if(IsValidDynamicObject(Veh[idx][SirenObjectID][0]))
						DestroyDynamicObject(Veh[idx][SirenObjectID][0]);
					if(IsValidDynamicObject(Veh[idx][SirenObjectID][1]))
						DestroyDynamicObject(Veh[idx][SirenObjectID][1]);

					format(string, sizeof(string), "* %s removes the light from the roof of the vehicle.", GetNameEx(playerid));
					SetPlayerChatBubble(playerid, string, PLAYERACTIONS, 15, 4000);
				}
			
			}
		}
		case 1:
		{
			if(Groups[Veh[idx][Group]][CommandTypes] != 1)
				return 1;

			if(Veh[idx][AutoIndicatorsDisabled] == 1)
				return 1;

			if(Veh[idx][IndicatorType] == INDICATOR_TYPE_OFF)
			{
				if(lights == 0)
					SetVehicleParamsEx(vehicleid, engine, 1, alarm, doors, bonnet, boot, objective);

				if(Veh[idx][IndicatorSpeed] == 0)
					Veh[idx][IndicatorSpeed] = 250;

				stop Veh[idx][IndicatorTimer];
				GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
				UpdateVehicleDamageStatus(vehicleid, panels, doors, encode_lights(1, 0, 0, 0), tires);
				Veh[idx][IndicatorStep] = 1;
				Veh[idx][IndicatorType] = INDICATOR_TYPE_SIRENS;
				Veh[idx][IndicatorTimer] = repeat Veh_IndicatorLights[Veh[idx][IndicatorSpeed]](vehicleid);
			}
			
			switch(Veh[idx][SirenType])
			{
				case POLICE_LIGHT_TYPE_LIGHTBAR:
				{
					AttachSirensToVehicle(Veh[idx][Link], POLICE_LIGHT_TYPE_LIGHTBAR, 0, 1);
					AttachSirensToVehicle(Veh[idx][Link], POLICE_LIGHT_TYPE_WINDSHIELD, 1);
				}
				case POLICE_LIGHT_TYPE_ROOF:
				{
					AttachSirensToVehicle(Veh[idx][Link], POLICE_LIGHT_TYPE_ROOF, 0);
					AttachSirensToVehicle(Veh[idx][Link], POLICE_LIGHT_TYPE_WINDSHIELD, 1);
					format(string, sizeof(string), "* %s places the light on to the roof of the vehicle.", GetNameEx(playerid));
					SetPlayerChatBubble(playerid, string, PLAYERACTIONS, 15, 4000);
				}
			}
		}
	}
	return 1;
}

CMD:createannouncement(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 7)
		return 1;
		
	ShowPlayerDialog(playerid, DIALOG_ANNOUNCEMENT_1, DIALOG_STYLE_INPUT, "Announcement Creator - Summary", "Enter a brief summary of your announcement below:", "Enter", "Cancel");
	return 1;
}
CMD:removeannouncement(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 7)
		return 1;

	if(AnnounceExist != 1)
		return SendClientMessage(playerid, -1, "There is no existing announcement.");
		
	new str[128];
	format(str, sizeof(str), "Announcement removed. (%s)", announcesummary);
	SendClientMessage(playerid, -1, str);
	AnnounceExist = 0;
	dini_IntSet("Assets.ini", "AnnounceExist", AnnounceExist);
	return 1;
}
CMD:viewannouncement(playerid, params[])
{
	if(AnnounceExist != 1)
		return SendClientMessage(playerid, -1, "There is no announcement to view.");
	
	ShowPlayerDialog(playerid, DIALOG_LATEST_ANNOUNCEMENT, DIALOG_STYLE_MSGBOX, "{FF4500}Latest Announcement", announcemsg, "Close", "");
	return 1;
}

CMD:bugreport(playerid, params[])
{
	if(gettime() < GetPVarInt(playerid, "BugReportCooldown"))
		return SendClientMessage(playerid, -1, "You must wait the 5 minute cooldown before using this command again.");
		
	new str1[255], str2[255];
	format(str1, sizeof(str1), "bugreports/BR%s%d.txt", GetName(playerid), bugnumber);
	dini_Create(str1);
	
	dini_Set(str1, "CreationTime", Player[playerid][CreationTime]);
	dini_IntSet(str1, "Admin Level", Player[playerid][AdminLevel]);
	dini_IntSet(str1, "HasVoted", Player[playerid][HasVoted]);
	dini_FloatSet(str1, "LastX", Player[playerid][LastX]);
	dini_FloatSet(str1, "LastY", Player[playerid][LastY]);
	dini_FloatSet(str1, "LastZ", Player[playerid][LastZ]);
	dini_IntSet(str1, "LastWorld", Player[playerid][LastWorld]);
	dini_IntSet(str1, "LastInterior", Player[playerid][LastInterior]);
	dini_IntSet(str1, "LastSkin", Player[playerid][LastSkin]);
	dini_FloatSet(str1, "LastHealth", Player[playerid][LastHealth]);
	dini_FloatSet(str1, "LastArmour", Player[playerid][LastArmour]);
	dini_IntSet(str1, "LastLoginMinute", Player[playerid][LastLoginMinute]);
	dini_IntSet(str1, "LastLoginHour", Player[playerid][LastLoginHour]);
	dini_IntSet(str1, "LastLoginDay", Player[playerid][LastLoginDay]);
	dini_IntSet(str1, "LastLoginMonth", Player[playerid][LastLoginMonth]);
	dini_IntSet(str1, "LastLoginYear", Player[playerid][LastLoginYear]);
	dini_Set(str1, "LastIP", Player[playerid][LastIP]);
	dini_IntSet(str1, "Group", Player[playerid][Group]);
	dini_IntSet(str1, "GroupRank", Player[playerid][GroupRank]);
	dini_IntSet(str1, "Gang", Player[playerid][Gang]);
	dini_IntSet(str1, "GangRank", Player[playerid][GangRank]);
	dini_IntSet(str1, "House", Player[playerid][House]);
	dini_IntSet(str1, "House2", Player[playerid][House2]);
	dini_IntSet(str1, "Banned", Player[playerid][Banned]);
	dini_IntSet(str1, "Muted", Player[playerid][Muted]);
	dini_IntSet(str1, "Money", Player[playerid][Money]);
	dini_IntSet(str1, "WepSlot0", Player[playerid][WepSlot0]);
	dini_IntSet(str1, "WepSlot1", Player[playerid][WepSlot1]);
	dini_IntSet(str1, "WepSlot2", Player[playerid][WepSlot2]);
	dini_IntSet(str1, "WepSlot3", Player[playerid][WepSlot3]);
	dini_IntSet(str1, "WepSlot4", Player[playerid][WepSlot4]);
	dini_IntSet(str1, "WepSlot5", Player[playerid][WepSlot5]);
	dini_IntSet(str1, "WepSlot6", Player[playerid][WepSlot6]);
	dini_IntSet(str1, "WepSlot7", Player[playerid][WepSlot7]);
	dini_IntSet(str1, "WepSlot8", Player[playerid][WepSlot8]);
	dini_IntSet(str1, "WepSlot9", Player[playerid][WepSlot9]);
	dini_IntSet(str1, "WepSlot10", Player[playerid][WepSlot10]);
	dini_IntSet(str1, "WepSlot11", Player[playerid][WepSlot11]);
	dini_Set(str1, "Warning1", Player[playerid][Warning1]);
	dini_Set(str1, "Warning2", Player[playerid][Warning2]);
	dini_Set(str1, "Warning3", Player[playerid][Warning3]);
	dini_IntSet(str1, "Identity", Player[playerid][Identity]);
	dini_IntSet(str1, "Age", Player[playerid][Age]);
	dini_IntSet(str1, "ContractPrice", Player[playerid][ContractPrice]);
	dini_Set(str1, "Contract", Player[playerid][Contract]);
	dini_Set(str1, "Contract2", Player[playerid][Contract2]);
	dini_IntSet(str1, "PrisonDuration", Player[playerid][PrisonDuration]);
	dini_IntSet(str1, "PrisonID", Player[playerid][PrisonID]);
	dini_IntSet(str1, "Tutorial", Player[playerid][Tutorial]);
	dini_IntSet(str1, "Hospitalized", Player[playerid][Hospitalized]);
	dini_IntSet(str1, "Gender", Player[playerid][Gender]);
	dini_IntSet(str1, "Job", Player[playerid][Job]);
	dini_IntSet(str1, "Job2", Player[playerid][Job2]);
	dini_IntSet(str1, "Materials", Player[playerid][Materials][0]);
	dini_IntSet(str1, "Materials1", Player[playerid][Materials][1]);
	dini_IntSet(str1, "Materials2", Player[playerid][Materials][2]);
	dini_IntSet(str1, "AdminActions", Player[playerid][AdminActions]);
	dini_IntSet(str1, "SecondsLoggedIn", Player[playerid][SecondsLoggedIn]);
	dini_IntSet(str1, "BankMoney", Player[playerid][BankMoney]);
	dini_IntSet(str1, "Cocaine", Player[playerid][Cocaine]);
	dini_IntSet(str1, "Pot", Player[playerid][Pot]);
	dini_IntSet(str1, "nMuted", Player[playerid][nMuted]);
	dini_IntSet(str1, "nMutedLevel", Player[playerid][nMutedLevel]);
	dini_IntSet(str1, "nMutedTime", Player[playerid][nMutedTime]);
	dini_IntSet(str1, "vMuted", Player[playerid][vMuted]);
	dini_IntSet(str1, "vMutedLevel", Player[playerid][vMutedLevel]);
	dini_IntSet(str1, "vMutedTime", Player[playerid][vMutedTime]);
	dini_IntSet(str1, "Business", Player[playerid][Business]);
	dini_IntSet(str1, "PhoneN", Player[playerid][PhoneN]);
	dini_IntSet(str1, "PlayingHours", Player[playerid][PlayingHours]);
	dini_IntSet(str1, "InabilityToMatrun", Player[playerid][InabilityToMatrun]);
	dini_IntSet(str1, "InabilityToDropCar", Player[playerid][InabilityToDropCar]);
	dini_IntSet(str1, "FishAttempts", Player[playerid][FishAttempts]);
	dini_IntSet(str1, "CollectedFish", Player[playerid][CollectedFish]);
	dini_IntSet(str1, "Rope", Player[playerid][Rope]);
	dini_IntSet(str1, "Rags", Player[playerid][Rags]);
	dini_IntSet(str1, "FailedHits", Player[playerid][FailedHits]);
	dini_IntSet(str1, "SuccessfulHits", Player[playerid][SuccessfulHits]);
	dini_IntSet(str1, "PersonalRadio", Player[playerid][PersonalRadio]);
	dini_IntSet(str1, "ArmsDealerXP", Player[playerid][ArmsDealerXP]);
	dini_Set(str1, "MarriedTo", Player[playerid][MarriedTo]);
	dini_IntSet(str1, "FightBox", Player[playerid][FightBox]);
	dini_IntSet(str1, "FightKungfu", Player[playerid][FightKungfu]);
	dini_IntSet(str1, "FightGrabkick", Player[playerid][FightGrabkick]);
	dini_IntSet(str1, "FightKneehead", Player[playerid][FightKneehead]);
	dini_IntSet(str1, "FightElbow", Player[playerid][FightElbow]);
	dini_IntSet(str1, "VipRank", Player[playerid][VipRank]);
	dini_IntSet(str1, "VipTime", Player[playerid][VipTime]);
	dini_IntSet(str1, "VipRenew", Player[playerid][VipRenew]);
	dini_IntSet(str1, "WalkieTalkie", Player[playerid][WalkieTalkie]);
	dini_IntSet(str1, "BankStatus", Player[playerid][BankStatus]);
	dini_IntSet(str1, "PlayerSkinSlot1", Player[playerid][PlayerSkinSlot1]);
	dini_IntSet(str1, "PlayerSkinSlot2", Player[playerid][PlayerSkinSlot2]);
	dini_IntSet(str1, "PlayerSkinSlot3", Player[playerid][PlayerSkinSlot3]);
	dini_IntSet(str1, "AdminName", Player[playerid][AdminName]);
	dini_IntSet(str1, "NormalName", Player[playerid][NormalName]);
	dini_IntSet(str1, "Accent", Player[playerid][Accent]);
	dini_IntSet(str1, "WalkieFrequency", Player[playerid][WalkieFrequency]);
	dini_Set(str1, "Note", Player[playerid][Note]);
	dini_IntSet(str1, "VipTokens", Player[playerid][VipTokens]);
	dini_IntSet(str1, "Tester", Player[playerid][Tester]);
	dini_IntSet(str1, "CheckBalance", Player[playerid][CheckBalance]);
	dini_IntSet(str1, "ReportBanTime", Player[playerid][reportBan][0]);
	dini_IntSet(str1, "ReportBanLevel", Player[playerid][reportBan][1]);
	dini_IntSet(str1, "AskBanTime", Player[playerid][askBan][0]);
	dini_IntSet(str1, "AskBanLevel", Player[playerid][askBan][1]);
	dini_IntSet(str1, "AdminDuty", Player[playerid][AdminDuty]);
	dini_IntSet(str1, "CurrentFightStyle", Player[playerid][CurrentFightStyle]);
	dini_IntSet(str1, "PDBadge", Player[playerid][PDBadge]);
	dini_Set(str1, "BannedBy", Player[playerid][BannedBy]);
	dini_Set(str1, "BannedReason", Player[playerid][BannedReason]);
	dini_IntSet(str1, "TempbanTime", Player[playerid][TempbanTime]);
	dini_IntSet(str1, "TempbanLevel", Player[playerid][TempbanLevel]);
	dini_IntSet(str1, "DeliverTime", Player[playerid][DeliverTime]);
	dini_IntSet(str1, "GasCans", Player[playerid][GasCans]);
	dini_Set(str1, "nTag", Player[playerid][nTag]);
	dini_IntSet(str1, "Developer", Player[playerid][Developer]);
	dini_IntSet(str1, "Mapper", Player[playerid][Mapper]);
	dini_Set(str1, "Walk", Player[playerid][Walk]);
	dini_IntSet(str1, "InHouse", Player[playerid][InHouse]);
	dini_IntSet(str1, "JobCooldown", Player[playerid][JobCooldown]);
	dini_IntSet(str1, "CanMakeGun", Player[playerid][CanMakeGun]);
	dini_IntSet(str1, "Deliveries", Player[playerid][Deliveries]);
	dini_IntSet(str1, "GasFull", Player[playerid][GasFull]);
	dini_IntSet(str1, "CantFish", Player[playerid][CantFish]);
	dini_IntSet(str1, "FishAgainAntiSpam", Player[playerid][FishAgainAntiSpam]);
	dini_IntSet(str1, "Workbench", Player[playerid][Workbench]);
	dini_IntSet(str1, "Toolkit", Player[playerid][Toolkit]);
	dini_IntSet(str1, "SkillCooldown", Player[playerid][SkillCooldown]);
	dini_IntSet(str1, "NosBottle", Player[playerid][NosBottle]);
	dini_IntSet(str1, "HydroKit", Player[playerid][HydroKit]);
	dini_IntSet(str1, "EngineParts", Player[playerid][EngineParts]);
	dini_Set(str1, "HeadDesc", Player[playerid][HeadDesc]);
	dini_Set(str1, "BodyDesc", Player[playerid][BodyDesc]);
	dini_Set(str1, "ClothingDesc", Player[playerid][ClothingDesc]);
	dini_Set(str1, "AccessoryDesc", Player[playerid][AccessoryDesc]);
	dini_IntSet(str1, "TotalFished", Player[playerid][TotalFished]);
	dini_IntSet(str1, "TruckerTestCooldown", Player[playerid][TruckerTestCooldown]);
	dini_IntSet(str1, "SystemAfkKicks", Player[playerid][SystemAfkKicks]);
	dini_IntSet(str1, "AdminAfkKicks", Player[playerid][AdminAfkKicks]);
	dini_IntSet(str1, "BeerCases", Player[playerid][BeerCases]);
	dini_IntSet(str1, "BusinessKey", Player[playerid][BusinessKey]);
	dini_IntSet(str1, "VehicleRadio", Player[playerid][VehicleRadio]);
	dini_IntSet(str1, "GarbageCooldown", Player[playerid][GarbageCooldown]);
	dini_IntSet(str1, "PotTimer", Player[playerid][PotTimer]);
	dini_IntSet(str1, "CocaineTimer", Player[playerid][CocaineTimer]);
	dini_Set(str1, "PrisonReason", Player[playerid][PrisonReason]);
	dini_Set(str1, "AdminNote1", Player[playerid][AdminNote1]);
	dini_Set(str1, "AdminNote2", Player[playerid][AdminNote2]);
	dini_Set(str1, "AdminNote3", Player[playerid][AdminNote3]);
	dini_IntSet(str1, "FishingRod", Player[playerid][FishingRod]);
	dini_IntSet(str1, "FishingBait", Player[playerid][FishingBait]);
	dini_IntSet(str1, "TotalBass", Player[playerid][TotalBass]);
	dini_IntSet(str1, "TotalCod", Player[playerid][TotalCod]);
	dini_IntSet(str1, "TotalSalmon", Player[playerid][TotalSalmon]);
	dini_IntSet(str1, "TotalMackerel", Player[playerid][TotalMackerel]);
	dini_IntSet(str1, "TotalTuna", Player[playerid][TotalTuna]);
	dini_IntSet(str1, "TotalCarp", Player[playerid][TotalCarp]);
	dini_IntSet(str1, "TotalHerring", Player[playerid][TotalHerring]);
	dini_IntSet(str1, "TotalMarlin", Player[playerid][TotalMarlin]);
	dini_IntSet(str1, "TotalMako", Player[playerid][TotalMako]);
	dini_IntSet(str1, "TotalCrab", Player[playerid][TotalCrab]);
	dini_IntSet(str1, "TotalKraken", Player[playerid][TotalKraken]);
	dini_IntSet(str1, "Tickets", Player[playerid][Tickets]);
	dini_IntSet(str1, "Race", Player[playerid][Race]);
	dini_IntSet(str1, "AFKKicked", Player[playerid][AFKKicked]);
	dini_IntSet(str1, "PizzaDelivers", Player[playerid][PizzaDelivers]);
	dini_IntSet(str1, "PizzaCooldown", Player[playerid][PizzaCooldown]);
	dini_IntSet(str1, "CantDeliverPizza", Player[playerid][CantDeliverPizza]);
	dini_IntSet(str1, "HouseKey", Player[playerid][HouseKey]);
	dini_IntSet(str1, "CasinoChips", Player[playerid][CasinoChips]);
	dini_IntSet(str1, "FavoriteStationSet", Player[playerid][FavoriteStationSet]);
	dini_Set(str1, "FavoriteStation", Player[playerid][FavoriteStation]);
	dini_IntSet(str1, "HotelRoomID", Player[playerid][HotelRoomID]);
	dini_IntSet(str1, "HotelRoomWarning", Player[playerid][HotelRoomWarning]);
	dini_IntSet(str1, "CarLicense", Player[playerid][CarLicense]);
	dini_IntSet(str1, "TruckLicense", Player[playerid][TruckLicense]);
	dini_IntSet(str1, "EnterKey", Player[playerid][EnterKey]);
	dini_IntSet(str1, "LicenseSuspended", Player[playerid][LicenseSuspended]);
	dini_IntSet(str1, "Speed", Player[playerid][Speed]);
	dini_IntSet(str1, "SpeedTimer", Player[playerid][SpeedTimer]);
	dini_IntSet(str1, "PotSeeds", Player[playerid][PotSeeds]);
	dini_IntSet(str1, "GrowLight", Player[playerid][GrowLight]);
	dini_IntSet(str1, "ToyBanned", Player[playerid][ToyBanned]);
	dini_IntSet(str1, "TotalSSDeposits", Player[playerid][TotalSSDeposits]);
	dini_IntSet(str1, "LastDepositHours", Player[playerid][LastDepositHours]);
	dini_IntSet(str1, "LastRedeemHours", Player[playerid][LastRedeemHours]);
	dini_IntSet(str1, "EggsCollected", Player[playerid][EggsCollected]);
	dini_IntSet(str1, "HungerLevel", Player[playerid][HungerLevel]);
	dini_IntSet(str1, "HungerEnabled", Player[playerid][HungerEnabled]);
	dini_IntSet(str1, "HungerEffect", Player[playerid][HungerEffect]);
	dini_IntSet(str1, "HasBoombox", Player[playerid][HasBoombox]);
	dini_IntSet(str1, "InGarage", Player[playerid][InGarage]);
	dini_IntSet(str1, "AdminSkin", Player[playerid][AdminSkin]);
	dini_IntSet(str1, "HasSprayCans", Player[playerid][HasSprayCans]);
	dini_IntSet(str1, "RemoteWarn", Player[playerid][RemoteWarn]);
	dini_IntSet(str1, "TotalGunsMade", Player[playerid][TotalGunsMade]);
	dini_IntSet(str1, "TotalCarsDropped", Player[playerid][TotalCarsDropped]);
	dini_IntSet(str1, "TotalGarbageRuns", Player[playerid][TotalGarbageRuns]);
	dini_IntSet(str1, "TotalTruckRuns", Player[playerid][TotalTruckRuns]);
	dini_IntSet(str1, "TotalFishingRodsBroken", Player[playerid][TotalFishingRodsBroken]);
	dini_IntSet(str1, "TotalDeaths", Player[playerid][TotalDeaths]);
	dini_IntSet(str1, "TotalKrakensCaught", Player[playerid][TotalKrakensCaught]);
	dini_IntSet(str1, "TotalToolkitsBroken", Player[playerid][TotalToolkitsBroken]);
	dini_IntSet(str1, "TotalCarsFixed", Player[playerid][TotalCarsFixed]);
	dini_IntSet(str1, "TotalMatRuns", Player[playerid][TotalMatRuns]);
	dini_IntSet(str1, "FightStyle", Player[playerid][FightStyle]);
	dini_IntSet(str1, "KilledByJason", Player[playerid][KilledByJason]);
	dini_IntSet(str1, "GainedHalloweenPrize", Player[playerid][GainedHalloweenPrize]);
	dini_IntSet(str1, "PizzaSlices", Player[playerid][PizzaSlices]);
	dini_IntSet(str1, "CarJackerXP", Player[playerid][CarJackerXP]);
	dini_IntSet(str1, "GokartLapsDone", Player[playerid][GokartLapsDone]);
	dini_IntSet(str1, "GokartPrizeReceived", Player[playerid][GokartPrizeReceived]);
	dini_IntSet(str1, "pFireworks", Player[playerid][pFireworks]);
	
	
	format(str2, sizeof(str2), "Bug statistics submitted. Your report number is %d, include this in your bug report on the forums.", bugnumber);
	SendClientMessage(playerid, -1, str2);
	bugnumber++;
	dini_IntSet("bugreports/BugReportNumber.ini", "bugnumber", bugnumber);
	SetPVarInt(playerid, "BugReportCooldown", gettime() + 300);
	return 1;
}

CMD:autoparkcar(playerid, params[])
{
	if(Player[playerid][AutoParkCar] == 0)
	{
		Player[playerid][AutoParkCar] = 1;
		SendClientMessage(playerid, -1, "Auto car parking enabled. When you log off in your vehicle it will be automatically /parkcar'd.");
	}
	else
	{
		Player[playerid][AutoParkCar] = 0;
		SendClientMessage(playerid, -1, "Auto car parking disabled. When you log off in your vehicle it will no longer be automatically /parkcar'd.");
	}
}

CMD:rappel(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 1)
		return 1;
	
	new vehicleid = GetPlayerVehicleID(playerid);
	
	if(GetVehicleModel(vehicleid) !=  497)
        return SendClientMessage(playerid, -1, "You need to be in an LSPD maverick to rappel.");
	
	if(GetPVarInt(playerid, "Rappelling") == 1)
		return SendClientMessage(playerid, -1, "You're already rappelling!");
		
	new seat = GetPlayerVehicleSeat(playerid);
	
	if(seat == 0)
		return SendClientMessage(playerid, -1, "You can't rappel when flying the chopper.");
	
	if(GetPlayerSpeed(playerid, 0) > 5)
		return SendClientMessage(playerid, -1, "The chopper is moving too fast!");
		
	SetPVarInt(playerid, "Rappelling", 1);
	
	Player[playerid][ropes][0] = CreateDynamicObject(19089, 0, 0, 0, 0.0, 0.0, 0);
	Player[playerid][ropes][1] = CreateDynamicObject(19089, 0, 0, 0, 0.0, 0.0, 0);
	Player[playerid][ropes][2] = CreateDynamicObject(19089, 0, 0, 0, 0.0, 0.0, 0);
	Player[playerid][ropes][3] = CreateDynamicObject(19089, 0, 0, 0, 0.0, 0.0, 0);
	
	switch(seat)
	 {
		case 1:
		{
			AttachDynamicObjectToVehicle(Player[playerid][ropes][0], vehicleid, 1.125, 1.35, -1, 0, 0, 0);
			AttachDynamicObjectToVehicle(Player[playerid][ropes][1], vehicleid, 1.125, 1.35, -6, 0, 0, 0);
			AttachDynamicObjectToVehicle(Player[playerid][ropes][2], vehicleid, 1.125, 1.35, -11, 0, 0, 0);
			AttachDynamicObjectToVehicle(Player[playerid][ropes][3], vehicleid, 1.125, 1.35, -16, 0, 0, 0);
		}
		case 2:
		{
			AttachDynamicObjectToVehicle(Player[playerid][ropes][0], vehicleid, -1.125, 0, -1, 0, 0, 0);
			AttachDynamicObjectToVehicle(Player[playerid][ropes][1], vehicleid, -1.125, 0, -6, 0, 0, 0);
			AttachDynamicObjectToVehicle(Player[playerid][ropes][2], vehicleid, -1.125, 0, -11, 0, 0, 0);
			AttachDynamicObjectToVehicle(Player[playerid][ropes][3], vehicleid, -1.125, 0, -16, 0, 0, 0);
		}
		case 3:
		{
			AttachDynamicObjectToVehicle(Player[playerid][ropes][0], vehicleid, 1.125, 0, -1, 0, 0, 0);
			AttachDynamicObjectToVehicle(Player[playerid][ropes][1], vehicleid, 1.125, 0, -6, 0, 0, 0);
			AttachDynamicObjectToVehicle(Player[playerid][ropes][2], vehicleid, 1.125, 0, -11, 0, 0, 0);
			AttachDynamicObjectToVehicle(Player[playerid][ropes][3], vehicleid,  1.125, 0, -16, 0, 0, 0);
		}
	 }
	
	switch(random(7))
	{
		case 0: SetPlayerFacingAngle(playerid, 0);
		case 1: SetPlayerFacingAngle(playerid, 60);
		case 2: SetPlayerFacingAngle(playerid, 120);
		case 3: SetPlayerFacingAngle(playerid, 180);
		case 4: SetPlayerFacingAngle(playerid, 240);
		case 5: SetPlayerFacingAngle(playerid, 300);
		case 6: SetPlayerFacingAngle(playerid, 360);
	}
	
	RemovePlayerFromVehicle(playerid);
	TogglePlayerControllable(playerid, 0);
    ApplyAnimation(playerid, "PED", "abseil", 4.1, 0, 1, 1, 1, 0, 1);
	SetPlayerVelocity(playerid, 0.0, 0.0, -0.2);
	TogglePlayerControllable(playerid, 1);
	
	new string[128];
	format(string, sizeof(string), "* %s deploys their rope, rappelling down.", GetNameEx(playerid));
	NearByMessage(playerid, NICESKY, string);
	defer RemoveRappelRopes(playerid);
	return 1;
}

timer RemoveRappelRopes[7000](playerid)
{
	DestroyDynamicObject(Player[playerid][ropes][0]);
	DestroyDynamicObject(Player[playerid][ropes][1]);
	DestroyDynamicObject(Player[playerid][ropes][2]);
	DestroyDynamicObject(Player[playerid][ropes][3]);
	DeletePVar(playerid, "Rappelling");
}

CMD:writenote(playerid, params[])
{
	new string[256];
    if(sscanf(params, "s[256]", string))
		return SendClientMessage(playerid, -1, "Syntax: /writenote [text]");

	if(Player[playerid][Notepad] < 1)
		return SendClientMessage(playerid, -1, "You don't have a notepad.");
	
	if(strlen(Player[playerid][Note1]) < 1)
	    format(Player[playerid][Note1], 256, string);
	else if(strlen(Player[playerid][Note2]) < 1)
	    format(Player[playerid][Note2], 256, string);
	else if(strlen(Player[playerid][Note3]) < 1)
	    format(Player[playerid][Note3], 256, string);
	else
		return SendClientMessage(playerid, -1, "You can only hold three notes at a time in your inventory.");	
	
	SendClientMessage(playerid, -1, "Your note has been added to your inventory.");
	format(string, sizeof(string), "* %s writes on a piece of paper and tears it from a notepad.", GetNameEx(playerid));
	NearByMessage(playerid, NICESKY, string);
	Player[playerid][Notepad]--;
	return 1;
}

CMD:readnote(playerid, params[])
{
	new number, string[256];
	if(sscanf(params, "d", number))
		return SendClientMessage(playerid, GREY, "Syntax: /readnote [1-3]");
		
	if(number > 3 || number  < 1)
	    return SendClientMessage(playerid, GREY, "Choose a number 1, 2 or 3"); 
		
	switch(number)
	{
	    case 1:
		{
		    if(strlen(Player[playerid][Note1]) < 1)
				return SendClientMessage(playerid, -1, "You don't have a note in this slot.");
			SendClientMessage(playerid, GREY, "-------------------------");
			SendClientMessage(playerid, -1, "The note reads:");
			SendClientMessage(playerid, -1, Player[playerid][Note1]);
			SendClientMessage(playerid, GREY, "-------------------------");
		}
		case 2:
		{
		    if(strlen(Player[playerid][Note2]) < 1)
				return SendClientMessage(playerid, -1, "You don't have a note in this slot.");
			SendClientMessage(playerid, GREY, "-------------------------");
            SendClientMessage(playerid, -1, "The note reads:");
			SendClientMessage(playerid, -1, Player[playerid][Note2]);
			SendClientMessage(playerid, GREY, "-------------------------");
		}
		case 3:
		{
		    if(strlen(Player[playerid][Note3]) < 1)
				return SendClientMessage(playerid, -1, "You don't have a note in this slot.");
			SendClientMessage(playerid, GREY, "-------------------------");
            SendClientMessage(playerid, -1, "The note reads:");
			SendClientMessage(playerid, -1, Player[playerid][Note3]);
			SendClientMessage(playerid, GREY, "-------------------------");
		}
	}
	
	format(string, sizeof(string), "* %s reads a note from a piece of paper.", GetNameEx(playerid));
	NearByMessage(playerid, NICESKY, string);
	return 1;
}

CMD:createid(playerid, params[])
{
	if(!DoesGangExist(Player[playerid][Gang]))
		return SendClientMessage(playerid, GREY, "Only official gang members can create fake ID cards.");
		
	if(Houses[Player[playerid][InHouse]][Workbench] == 0 && Businesses[Player[playerid][InBusiness]][bWorkbench] == 0)
		return SendClientMessage(playerid, GREY, "You need a workbench to create a fake ID!");
		
	if(strlen(Player[playerid][FakeIDString]) > 3)
		return SendClientMessage(playerid, -1, "You already have a fake ID.");
	
	if(!DoesPlayerHavePerms(playerid, PERM_CREATEFAKEDOCS))
		return SendClientMessage(playerid, RED, "Permission denied.");
	
	ShowPlayerDialog(playerid, DIALOG_FAKEID, DIALOG_STYLE_INPUT, "Fake ID", "Enter your fake name (e.g. John_Smith):", "Next", "Cancel");
	return 1;
}
CMD:createreg(playerid, params[])
{
	if(!DoesGangExist(Player[playerid][Gang]))
		return SendClientMessage(playerid, GREY, "Only official gang members can create fake registrations.");
		
	if(Houses[Player[playerid][InHouse]][Workbench] == 0)
		return SendClientMessage(playerid, GREY, "You need a workbench to create a fake registrations!");
		
	if(strlen(Player[playerid][FakeLicense]) > 3)
		return SendClientMessage(playerid, -1, "You already have a fake registration.");
	
	if(!DoesPlayerHavePerms(playerid, PERM_CREATEFAKEDOCS))
		return SendClientMessage(playerid, RED, "Permission denied.");
	
	ShowPlayerDialog(playerid, DIALOG_FAKELICENSE, DIALOG_STYLE_INPUT, "Fake Registration", "Enter your fake name (e.g. John_Smith):", "Next", "Cancel");
	return 1;
}
CMD:showfakeid(playerid, params[])
{
	if(strlen(Player[playerid][FakeIDString]) < 3)
		return SendClientMessage(playerid, -1, "You don't have a fake ID.");
	
	new id, string[128];
	sscanf(params, "d", id);
	if(id < MAX_PLAYERS)
	{
		if(sscanf(params, "u", id))
			return SendClientMessage(playerid, GREY, "SYNTAX: /showfakeid [playerid]");

		if(!IsPlayerConnectedEx(id))
			return SendClientMessage(playerid, -1, "That player is not connected or logged in.");
			
		if(Player[id][Mask] == 1)
	    	id = -1;
	}
	else
	    id = CheckIfMasked(id);
 	if(id == -1)
 		return SendClientMessage(playerid, -1, "That player is too far away.");
 
	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, -1, "That player is not connected or logged in.");

	if(GetDistanceBetweenPlayers(playerid, id) > 6)
		return SendClientMessage(playerid, -1, "That player is too far away.");

	SendClientMessage(id, GREY, "---------------------------------------------------------");
	SendClientMessage(id, WHITE, "- Personal Identification, Registered Citizen of San Andreas. - ");
	new start, finish, name[50], age[10], address[128];
	format(name, sizeof(name), "%s", CutBeforeLine(Player[playerid][FakeIDString]));
	SendClientMessage(id, WHITE, name);
	start = strfind(Player[playerid][FakeIDString], "Age", true);
	strmid(age, Player[playerid][FakeIDString], start, start+7);
	SendClientMessage(id, GREY, age);
	start = strfind(Player[playerid][FakeIDString], "Registered", true);
	finish = strfind(Player[playerid][FakeIDString], "/", true);
	strmid(address, Player[playerid][FakeIDString], start, finish);
	if(start != -1)
		SendClientMessage(id, GREY, address);
	if(strfind(Player[playerid][FakeIDString], "Standard", true) != -1)
		SendClientMessage(id, GREY, "Standard license");
	if(strfind(Player[playerid][FakeIDString], "Truck", true) != -1)
	    SendClientMessage(id, GREY, "Trucker license");
	SendClientMessage(id, GREY, "---------------------------------------------------------");

	format(string, sizeof(string), "You have shown %s your fake identification.", GetNameEx(id));
	SendClientMessage(playerid, WHITE, string);
	format(string, sizeof(string), "* %s has shown %s their ID.", GetNameEx(playerid), GetNameEx(id));
	NearByMessage(playerid, NICESKY, string);
	return 1;
}
CMD:showfakereg(playerid, params[])
{
	if(strlen(Player[playerid][FakeLicense]) < 3)
		return SendClientMessage(playerid, -1, "You don't have a fake license.");
	
	new id, string[128];
	sscanf(params, "d", id);
	if(id < MAX_PLAYERS)
	{
		if(sscanf(params, "u", id))
			return SendClientMessage(playerid, GREY, "SYNTAX: /showfakereg [playerid]");

		if(!IsPlayerConnectedEx(id))
			return SendClientMessage(playerid, -1, "That player is not connected or logged in.");
			
		if(Player[id][Mask] == 1)
	    	id = -1;
	}
	else
	    id = CheckIfMasked(id);
 	if(id == -1)
 		return SendClientMessage(playerid, -1, "That player is too far away.");
 
	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, -1, "That player is not connected or logged in.");

	if(GetDistanceBetweenPlayers(playerid, id) > 6)
		return SendClientMessage(playerid, -1, "That player is too far away.");	
		
	new name[30], start, finish, car[30];
	format(name, sizeof(name), "%s", CutBeforeLine(Player[playerid][FakeLicense]));
	SendClientMessage(id, GREY, "-------------------------------------------------------------------");
	format(string, sizeof(string), "-- {EDAA1A}%s's registration{FFFFFF} --", name);
	SendClientMessage(id, -1, string);
	start = strfind(Player[playerid][FakeLicense], "Car1", true);
	if(start == -1)
		SendClientMessage(id, GREY, "No registered vehicles");
	else
	{
		finish = strfind(Player[playerid][FakeLicense], ">", true);
		strmid(car, Player[playerid][FakeLicense], start+5, finish);
		SendClientMessage(id, GREY, car);
		start = strfind(Player[playerid][FakeLicense], "Car2", true);
		finish = strfind(Player[playerid][FakeLicense], "<", true);
		strmid(car, Player[playerid][FakeLicense], start+5, finish);
		if(start != -1)
			SendClientMessage(id, GREY, car);
		start = strfind(Player[playerid][FakeLicense], "Car3", true);
		finish = strfind(Player[playerid][FakeLicense], "/", true);
		strmid(car, Player[playerid][FakeLicense], start+5, finish);
		if(start != -1)
			SendClientMessage(id, GREY, car);
		start = strfind(Player[playerid][FakeLicense], "Car4", true);
		finish = strfind(Player[playerid][FakeLicense], "'", true);
		strmid(car, Player[playerid][FakeLicense], start+5, finish);
		if(start != -1)
			SendClientMessage(id, GREY, car);
		start = strfind(Player[playerid][FakeLicense], "Car5", true);
		finish = strfind(Player[playerid][FakeLicense], "@", true);
		strmid(car, Player[playerid][FakeLicense], start+5, finish);
		if(start != -1)
			SendClientMessage(id, GREY, car);
	}
	SendClientMessage(id, GREY, "-------------------------------------------------------------------");
	if(id == playerid)
		format(string, sizeof(string), "* %s has looked at their registration.", GetNameEx(playerid));
	else
		format(string, sizeof(string), "* %s has shown %s their registration.", GetNameEx(playerid), GetNameEx(id));

	NearByMessage(playerid, NICESKY, string);
	return 1;
}

CMD:enterpd(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 10, 1588.4226, -1634.2216, 13.3828))
		return SendClientMessage(playerid, -1, "You are not close enough to the PD garage entrance.");
		
	if(Groups[Player[playerid][Group]][CommandTypes] != 1)
		return SendClientMessage(playerid, -1, "You don't have access to this garage.");
	
	if(IsPlayerInAnyVehicle(playerid))
	{
		if(IsAHelicopter(GetPlayerVehicleID(playerid)))
			return 1;
		
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			return 1;
		
		new v = GetPlayerVehicleID(playerid);	
		SetVehiclePos(v, 2316.4890,2446.0989,3.2734);
		SetVehicleVirtualWorld(v, 0);
		SetVehicleZAngle(v, 90);
		foreach(Player, i)
		{
			if(GetPlayerVehicleID(i) == v || GetPlayerSurfingVehicleID(i) == v)
			{
				SetPlayerVirtualWorld(i, 0);
			}
		}
	}
	else
	{
		SetPlayerPos_Update(playerid, 2316.4890,2446.0989,3.2734);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerFacingAngle(playerid, 90);
	}
	return 1;
}

CMD:exitpd(playerid, params[]) 
{
	if(!IsPlayerInRangeOfPoint(playerid, 10, 2316.4890,2446.0989,3.2734))
		return SendClientMessage(playerid, -1, "You are not close enough to the PD garage exit.");
		
	if(Groups[Player[playerid][Group]][CommandTypes] != 1)
		return SendClientMessage(playerid, -1, "You don't have access to this garage.");
	
	if(IsPlayerInAnyVehicle(playerid))
	{
		if(IsAHelicopter(GetPlayerVehicleID(playerid)))
			return 1;
		
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			return 1;
		
		new v = GetPlayerVehicleID(playerid);	
		SetVehiclePos(v, 1588.4226, -1634.2216, 13.3828);
		SetVehicleVirtualWorld(v, 0);
		SetVehicleZAngle(v, 0);
		foreach(Player, i)
		{
			if(GetPlayerVehicleID(i) == v || GetPlayerSurfingVehicleID(i) == v)
			{
				SetPlayerVirtualWorld(i, 0);
			}
		}
	}
	else
	{
		SetPlayerPos_Update(playerid, 1588.4226, -1634.2216, 13.3828);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerFacingAngle(playerid, 0);
	}		
	return 1;
}


public OnInvalidWeaponDamage(playerid, damagedid, Float:amount, weaponid, bodypart, error, bool:given)
{
	new string[128];
	
	switch(error)
	{
		case WC_NO_ERROR: format(string, sizeof(string), "[AC] %s has done invalid damage (%f) to %d with a %s (%d). (Error: No error)", GetName(playerid), GetName(damagedid), amount, GetWeaponNameEx(weaponid), weaponid);
		case WC_NO_ISSUER: format(string, sizeof(string), "[AC] %s has done invalid damage (%f) to %d with a %s (%d). (Error: Issuer doesn't exist)", GetName(playerid), GetName(damagedid), amount, GetWeaponNameEx(weaponid), weaponid);
		case WC_NO_DAMAGED: format(string, sizeof(string), "[AC] %s has done invalid damage (%f) to %d with a %s (%d). (Error: Damaged player doesn't exist)", GetName(playerid), GetName(damagedid), amount, GetWeaponNameEx(weaponid), weaponid);
		case WC_INVALID_DAMAGE: format(string, sizeof(string), "[AC] %s has done invalid damage (%f) to %d with a %s (%d). (Error: Damage amount is invalid)", GetName(playerid), GetName(damagedid), amount, GetWeaponNameEx(weaponid), weaponid);
		case WC_INVALID_DISTANCE: format(string, sizeof(string), "[AC] %s has done invalid damage (%f) to %d with a %s (%d). (Error: Distance is invalid)", GetName(playerid), GetName(damagedid), amount, GetWeaponNameEx(weaponid), weaponid);
	}
	SendToAdmins(ADMINORANGE, string, 1);
	WarningLog(string);
	return 1;
}

/*public OnRejectedHit(playerid, hit[E_REJECTED_HIT])
{
	new string[128], reason = hit[e_Reason];
	
	if(reason == HIT_DYING_PLAYER)
		return 1;
	
	format(string, sizeof(string), "[AC] A hit by %s was rejected. Reason: %s", GetName(playerid), g_HitRejectReasons[reason]);
	SendToAdmins(ADMINORANGE, string, 1);
	WarningLog(string);
	return 1;
}*/

public  OnPlayerUseVendingMachine(playerid, &Float:health_given)
{
	health_given = 0;
	return 1;
}

CMD:plantbug(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 1)
		return 1;
	
	if(Player[playerid][GroupRank] < 2)
		return SendClientMessage(playerid, -1, "You're not a high enough rank to do this.");
		
	if(Bugs[0][Active] == 1 && Bugs[1][Active] == 1 && Bugs[2][Active] == 1 && Bugs[3][Active] == 1 && Bugs[4][Active] == 1)
		return SendClientMessage(playerid, -1, "All bugs have already been placed.");
	
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	
	for(new i; i < MAX_BUGS; i++)
	{
		if(Bugs[i][Active] == 0)
		{
			Bugs[i][BugObject] = CreateDynamicObject(19942, x + 0.2, y + 0.2, z, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
			EditDynamicObject(playerid, Bugs[i][BugObject]);
			SetPVarInt(playerid, "EditingBug", 1);
			SetPVarInt(playerid, "EditingBugNumber", i);
			break;
		}
	}
	return 1;
}

CMD:removebug(playerid, params[])
{
	new string[128];
	if(GetPVarInt(playerid, "BugReload") > gettime())
	{
		format(string, sizeof(string), "You must wait %d seconds before you can do this again.", GetPVarInt(playerid, "BugReload") - gettime());
		return SendClientMessage(playerid, -1, string);
	}
	for(new i; i < MAX_BUGS; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2, Bugs[i][bx], Bugs[i][by], Bugs[i][bz]))
		{
			if(Groups[Player[playerid][Group]][CommandTypes] == 1)
				format(string, sizeof(string), "* %s disconnects and picks up a bug device.", GetNameEx(playerid));
			else
				format(string, sizeof(string), "* %s crushes an electronic device.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
			
			if(Groups[Player[playerid][Group]][CommandTypes] == 1)
			{
				format(string, sizeof(string), "You have removed bug %d.", i+1);
				SendClientMessage(playerid, -1, string);
			}
			
			Bugs[i][bx] = -1;
			Bugs[i][by] = -1;
			Bugs[i][bz] = -1;
			Bugs[i][Active] = 0;
			DestroyDynamicObject(Bugs[i][BugObject]);
			Bugs[i][BugObject] = -1;
			format(Bugs[i][PlacedBy], MAX_PLAYER_NAME, "N/A");
			break;
		}
	}
	SetPVarInt(playerid, "BugReload", gettime() + 60);
	return 1;
}


CMD:headphones(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 1)
		return 1;
		
	new vehicleid = GetPlayerVehicleID(playerid);
	new string[128];
	if(GetVehicleModel(vehicleid) != 482 || Groups[Veh[vehicleid][Group]][CommandTypes] != 1)
		return SendClientMessage(playerid, -1, "You can only use headphones in the Burrito.");
	
	if(GetPlayerVehicleSeat(playerid) != 2 && GetPlayerVehicleSeat(playerid) != 3) 
		return SendClientMessage(playerid, -1, "You need to be in the back of the Burrito to put on headphones!");
	
	if(Player[playerid][Headphones] < 1)
	{
		format(string, sizeof(string), "* %s puts a pair of headphones on.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);
		SendClientMessage(playerid, -1, "Type /tunein [1-5] to listen in on a bug device.");
		Player[playerid][Headphones] = 6;
	}
	else
	{
		format(string, sizeof(string), "* %s removes their headphones.", GetNameEx(playerid));
		NearByMessage(playerid, NICESKY, string);
		Player[playerid][Headphones] = 0;
	}
	return 1;
}

CMD:tunein(playerid, params[])
{
	if(Player[playerid][Headphones] < 1)
		return SendClientMessage(playerid, -1, "You need to be wearing headphones to tune into a bug device.");
	
	new number, string[128];
	if(sscanf(params, "i", number))
		return SendClientMessage(playerid, -1, "Syntax error: /tunein [1-5]");
	
	if(number < 1 || number > 5)
		return SendClientMessage(playerid, -1, "Value must be between 1 and 5.");
	
	Player[playerid][Headphones] = number;
	format(string, sizeof(string), "* %s tunes their surveillance equipment.", GetNameEx(playerid));
	NearByMessage(playerid, NICESKY, string);
	
	format(string, sizeof(string), "You have tuned into bug %d.", number);
	SendClientMessage(playerid, -1, string);
	return 1;
}

CMD:removeallbugs(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 1)
		return 1;
	
	if(Player[playerid][GroupRank] < 7)
		return SendClientMessage(playerid, -1, "You're not a high enough rank to do this.");
	
	for(new i; i < MAX_BUGS; i++)
	{
		Bugs[i][bx] = -1;
		Bugs[i][by] = -1;
		Bugs[i][bz] = -1;
		Bugs[i][Active] = 0;
		DestroyDynamicObject(Bugs[i][BugObject]);
		Bugs[i][BugObject] = -1;
	}
	
	SendClientMessage(playerid, -1, "All bugs removed.");
	return 1;
}

CMD:listbugs(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 1)
		return 1;
	
	if(Player[playerid][GroupRank] < 7)
		return SendClientMessage(playerid, -1, "You're not a high enough rank to do this.");
	
	SendClientMessage(playerid, -1, "-----------------------");
	new string[128];
	for(new i; i < MAX_BUGS; i++)
	{
		if(Bugs[i][Active] == 1)
			format(string, sizeof(string), "Bug %d | Active | Placed by: %s", i+1, Bugs[i][PlacedBy]);
		else
			format(string, sizeof(string), "Bug %d | Inactive", i+1);
		SendClientMessage(playerid, GREY, string);
	}
	SendClientMessage(playerid, -1, "-----------------------");
	return 1;
}

stock IsExistingMaskID(number)
{
	foreach(Player, i)
	{
		if(Player[i][MaskID] == number)
			return 1;
	}
	return 0;
}

CMD:mask(playerid, params[])
{
	if(Player[playerid][PlayingHours] < 10 && Player[playerid][VipRank] < 1)
		return SendClientMessage(playerid, -1, "You need at least 10 playing hours to use this command.");
		
	if(Player[playerid][MaskBan] == 1)
		return SendClientMessage(playerid, -1, "You are banned from using /mask.");
		
	if(Player[playerid][PrisonID] > 0)
		return SendClientMessage(playerid, -1, "You can't use /mask in prison or admin jail.");
	
	if(Player[playerid][AdminDuty] > 0)
		return SendClientMessage(playerid, -1, "You can't use this command on admin duty.");
	
	if(IsPlayerInEvent(playerid))
		return SendClientMessage(playerid, -1, "You cannot use this while in an event.");
	
	if(GetPVarInt(playerid, "MaskReload") > gettime())
	{
		new string[128];
		format(string, sizeof(string), "You must wait %d seconds before you can do this again.", GetPVarInt(playerid, "MaskReload") - gettime());
		return SendClientMessage(playerid, -1, string);
	}
		
	new string[128];
	switch(Player[playerid][Mask])
	{
		case 0:
		{
			new number, temp;
			if(Player[playerid][MaskID] < 1)
			{
				while(number == 0)
				{
					temp = 1000+random(998);
					if(!IsExistingMaskID(temp))
						number = temp;
				}
				Player[playerid][MaskID] = number;
			}
	
			foreach(Player, i)
			{
				if(Player[i][AdminDuty] < 1)
					ShowPlayerNameTagForPlayer(i, playerid, 0);
			}
			Player[playerid][Mask] = 1;
			format(string, sizeof(string), "Your nametag is now hidden. Mask ID: %d", Player[playerid][MaskID]);
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "[MASK] %s (%d) has masked themselves. (Mask ID: %d)", Player[playerid][NormalName], playerid, Player[playerid][MaskID]);
			CommandsLog(string);
		}
		case 1:
		{
			foreach(Player, i)
			{
				ShowPlayerNameTagForPlayer(i, playerid, 1);
			}
			for(new i; i < 10; i++)
			{
				Player[playerid][MaskShowTag][i] = -1;
			}
			SendClientMessage(playerid, -1, "Your nametag is no longer hidden.");
			format(string, sizeof(string), "[MASK] %s (%d) has unmasked themselves. (Mask ID was: %d)", Player[playerid][NormalName], playerid, Player[playerid][MaskID]);
			CommandsLog(string);
			Player[playerid][Mask] = 0;
		}
	}
	SetPVarInt(playerid, "MaskReload", gettime() + 10);
	return 1;
}

CMD:maskban(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;
	
	new id;
	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, -1, "SYNTAX: /maskban [playerid]");
		
	new string[128];
	switch(Player[id][MaskBan])
	{
		case 0:
		{
			format(string, sizeof(string), "You have banned %s from using /mask.", GetName(id));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "%s has banned %s from /mask.", GetName(playerid), GetName(id));
			AdminActionsLog(string);
			Player[id][MaskBan] = 1;
		}
		case 1:
		{
			format(string, sizeof(string), "You have unbanned %s from using /mask.", GetName(id));
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "%s has unbanned %s from /mask.", GetName(playerid), GetName(id));
			AdminActionsLog(string);
			Player[id][MaskBan] = 0;
		}
	}
	return 1;
}

CMD:listmasks(playerid, params[])
{
	if(Player[playerid][AdminLevel] < 2)
		return 1;
	
	new string[128];
	SendClientMessage(playerid, -1, "---------------------------------");
	foreach(Player, i)
	{
		if(Player[i][Mask] == 1)
		{
			format(string, sizeof(string), "%s | Mask ID: %d", GetName(i), Player[i][MaskID]);
			SendClientMessage(playerid, GREY, string);
		}
	}
	SendClientMessage(playerid, -1, "---------------------------------");
	return 1;
}

CMD:scm(playerid, params[])
	return cmd_showclosemasks(playerid, params);
	
CMD:showclosemasks(playerid, params[])
{
	new string[128], Float:hp, Float:armour;
	foreach(Player, i)
	{
		if(Player[i][Mask] == 1 && GetDistanceBetweenPlayers(playerid, i) < 15 && playerid != i)
		{
			GetPlayerHealth(i, hp);
			GetPlayerArmour(i, armour);
			format(string, sizeof(string), "ID: %d | Health: %.0f | Armour: %.0f", Player[i][MaskID], hp, armour);
			SetPlayerChatBubble(i, string, PLAYERACTIONS, 10, 5000);
		}
	}
	return 1;
}

CMD:bloan(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 1.5, Businesses[Player[playerid][InBusiness]][bInteractX], Businesses[Player[playerid][InBusiness]][bInteractY], Businesses[Player[playerid][InBusiness]][bInteractZ]) && Player[playerid][InBusiness] != 0)
		return SendClientMessage(playerid, GREY, "You must stand near the interaction point to do this.");
	
	if(Businesses[Player[playerid][InBusiness]][bType] != 18)
		return SendClientMessage(playerid, GREY, "You must go to a bank to take out a loan.");
		
	if(Player[playerid][PlayingHours] < 20 && Player[playerid][VipRank] < 1)
		return SendClientMessage(playerid, GREY, "You need at least 20 playing hours to take out a loan. For now, visit https://crearoleplay.com to learn how you can purchase In-Game currency.");
	
	if(Player[playerid][BankStatus] == 1)
		return SendClientMessage(playerid, WHITE, "Your bank account has been suspended by the authorities!");
	
	new string[128], days = (Player[playerid][CannotLoanTime] - gettime()) / 86400, hours = ((Player[playerid][CannotLoanTime] - gettime()) % 86400) / 3600;
	if(Player[playerid][CannotLoanTime] > gettime())
	{
		SendClientMessage(playerid, YELLOW, "The bank is not willing to give you a loan right now.");
		SendClientMessage(playerid, ORANGE, "Visit https://crearoleplay.com to learn how you can purchase additional In-Game currency.");
		if(days < 1)
			format(string, sizeof(string), "You should try again in %d hours.", hours); 
		else
			format(string, sizeof(string), "You should try again in %d days.", days);
		return SendClientMessage(playerid, GREY, string);
	}
	
	if(Player[playerid][Loan] > 0)
		return SendClientMessage(playerid, GREY, "You already have a loan from the bank. For now, visit https://crearoleplay.com to learn how you can purchase In-Game currency.");
		
	format(string, sizeof(string), "{F97804}Maximum loan: {21DD00}%s\nEnter amount you wish to loan:", PrettyMoney(MAX_LOAN));
	ShowPlayerDialog(playerid, DIALOG_LOAN, DIALOG_STYLE_INPUT, "Bank Loan System", string, "Loan", "Cancel");
	return 1;
}

CMD:bpayloan(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 1.5, Businesses[Player[playerid][InBusiness]][bInteractX], Businesses[Player[playerid][InBusiness]][bInteractY], Businesses[Player[playerid][InBusiness]][bInteractZ]) && Player[playerid][InBusiness] != 0)
		return SendClientMessage(playerid, GREY, "You must stand near the interaction point to do this.");
	
	if(Businesses[Player[playerid][InBusiness]][bType] != 18)
		return SendClientMessage(playerid, GREY, "You must go to a bank to pay back a loan.");
	
	if(Player[playerid][Loan] < 1)
		return SendClientMessage(playerid, GREY, "You don't have a loan from the bank.");
		
	new string[128], days = (Player[playerid][LoanTime] - gettime()) / 86400, hours = ((Player[playerid][LoanTime] - gettime()) % 86400) / 3600;
	if(days < 0 && hours < 0)
		format(string, sizeof(string), "{F97804}Amount owed remaining: {21DD00}%s {F97804}\nTime left: {AA3333}EXPIRED{F97804}\n\nEnter amount you wish to pay back:", PrettyMoney(Player[playerid][Loan]));
	else
		format(string, sizeof(string), "{F97804}Amount owed remaining: {21DD00}%s {F97804}\nTime left: %d days, %d hours\n\nEnter amount you wish to pay back:", PrettyMoney(Player[playerid][Loan]), days, hours);
	ShowPlayerDialog(playerid, DIALOG_LOAN_PAYBACK, DIALOG_STYLE_INPUT, "Bank Loan System", string, "Pay", "Cancel");
	return 1;
}

command(ptazer, playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 1)
		return 1;
	
	if(Player[playerid][HandTazer] == 1)
		return SendClientMessage(playerid, -1, "You're already holding a tazer.");
		
	new string[128];
	switch(Player[playerid][GunTazer])
	{
		case 0:
		{
			if(Player[playerid][Tied] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] == 1 || Player[playerid][AdminFrozen] == 1)
				return SendClientMessage(playerid, -1, "You can't do that right now, you're incapacitated!");

			Player[playerid][GunTazer] = 1;
			format(string, sizeof(string), "* %s unholsters their tazer.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);
			SetPVarInt(playerid, "Old_Gun", Player[playerid][WepSlot2]);
			GivePlayerWeaponEx(playerid, 23);
		}
		case 1:
		{
			Player[playerid][GunTazer] = 0;
			format(string, sizeof(string), "* %s holsters their tazer.", GetNameEx(playerid));
			NearByMessage(playerid, NICESKY, string);

			if(GetPVarInt(playerid, "Old_Gun") > 0)
				GivePlayerWeaponEx(playerid, GetPVarInt(playerid, "Old_Gun"));
			else
				AdjustWeapon(playerid, Player[playerid][WepSlot2], 0);
			DeletePVar(playerid, "Old_Gun");
		}
	}
	
	if(IsPlayerInAnyVehicle(playerid))
		SetPlayerArmedWeapon(playerid, 0);
	return 1;
}

CMD:gunstore(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 1)
		return 1;
		
	new veh = GetPlayerVehicleID(playerid);
	new sql = GetVSQLID(veh), idx = GetVIndex(sql);
	
	if(Groups[Veh[idx][Group]][CommandTypes] != 1 || GetVehicleModel(veh) == 468 || GetVehicleModel(veh) == 523)
		return SendClientMessage(playerid, -1, "There is no gun rack in this vehicle!");
	
	new seat = GetPlayerVehicleSeat(playerid);
	if(seat > 1)
		return SendClientMessage(playerid, -1, "You can't reach the gun rack from the back seats.");
	
	new name[20], gunid;
	if(sscanf(params, "s[20]", name))
		return SendClientMessage(playerid, GREY, "SYNTAX: /gunstore [shotgun, mp5, combat, m4, sniper]");
		
	if(Veh[idx][GunRack][0] > 0 && Veh[idx][GunRack][1] > 0)
		return SendClientMessage(playerid, -1, "There is already two weapons in this gun rack.");
	
	if(!strcmp(name, "shotgun", true))
		gunid = 25;
	else if(!strcmp(name, "mp5", true))
		gunid = 29;
	else if(!strcmp(name, "combat", true))
		gunid = 27;
	else if(!strcmp(name, "m4", true))
		gunid = 31;
	else if(!strcmp(name, "sniper", true))
		gunid = 34;
	else
		return SendClientMessage(playerid, GREY, "SYNTAX: /gunstore [shotgun, mp5, combat, m4, sniper]");
	
	if(!PlayerHasWeapon(playerid, gunid))
		return SendClientMessage(playerid, -1, "You don't have this weapon.");
		
	GetWeaponName(gunid, name, sizeof(name));
		
	if(Veh[idx][GunRack][0] < 1)
		Veh[idx][GunRack][0] = gunid;
	else
		Veh[idx][GunRack][1] = gunid;
	
	new string[128];
	format(string, sizeof(string), "* %s has stored a %s in their gun rack.", GetNameEx(playerid), name);
	NearByMessage(playerid, NICESKY, string);
	
	AdjustWeapon(playerid, gunid, 0);
	SetPlayerArmedWeapon(playerid, 0);
	new query[128];
	format(query, sizeof(query), "UPDATE vehicles SET GunRack0 = '%d', GunRack1 = '%d' WHERE sqlid = '%d'", Veh[idx][GunRack][0], Veh[idx][GunRack][1], sql);
	mysql_query(MYSQL_MAIN, query);
	return 1;
}

CMD:guntake(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 1)
		return 1;
		
	new veh = GetPlayerVehicleID(playerid);
	new sql = GetVSQLID(veh), idx = GetVIndex(sql);
	
	if(Groups[Veh[idx][Group]][CommandTypes] != 1 || GetVehicleModel(veh) == 468 || GetVehicleModel(veh) == 523)
		return SendClientMessage(playerid, -1, "There is no gun rack in this vehicle!");
	
	new seat = GetPlayerVehicleSeat(playerid);
	if(seat > 1)
		return SendClientMessage(playerid, -1, "You can't reach the gun rack from the back seats.");
		
	new slot = -1;
	if(sscanf(params, "D(0)", slot))
		return SendClientMessage(playerid, GREY, "SYNTAX: /guntake (Optional: 1/2)");
	
	if(Veh[idx][GunRack][0] < 1 && Veh[idx][GunRack][1] < 1)
		return SendClientMessage(playerid, -1, "There are no weapons in this gun rack.");
	
	if(slot < 1 || slot > 2)
		slot = -1;
		
	new gun1[20], gun2[20], string[128];
	if(slot == -1)
	{
		if(Veh[idx][GunRack][0] == 0)
			format(gun1, sizeof(gun1), "Empty");
		else
			GetWeaponName(Veh[idx][GunRack][0], gun1, sizeof(gun1));
		
		if(Veh[idx][GunRack][1] == 0)
			format(gun2, sizeof(gun2), "Empty");
		else
			GetWeaponName(Veh[idx][GunRack][1], gun2, sizeof(gun2));
		
		SetPVarInt(playerid, "GunRack_sql", sql);
		SetPVarInt(playerid, "GunRack_idx", idx);
		format(string, sizeof(string), "%s\n%s", gun1, gun2);
		ShowPlayerDialog(playerid, DIALOG_GUNRACK, DIALOG_STYLE_LIST, "Gun rack", string, "Take", "Cancel");
	}
	else
	{
		slot--;
		if(Veh[idx][GunRack][slot] < 1)
				return 1;
			
		GivePlayerWeaponEx(playerid, Veh[idx][GunRack][slot]);
			
		if(Veh[idx][GunRack][slot] == 27)
			SetPlayerArmedWeapon(playerid, 0);
		else
			SetPlayerArmedWeapon(playerid, Veh[idx][GunRack][slot]);
			
		GetWeaponName(Veh[idx][GunRack][slot], gun1 ,sizeof(gun1));
		Veh[idx][GunRack][slot] = 0;
			
		format(string, sizeof(string), "* %s has taken a %s from their gun rack.", GetNameEx(playerid), gun1);
		NearByMessage(playerid, NICESKY, string);
		
		new query[128];
		format(query, sizeof(query), "UPDATE vehicles SET GunRack0 = '%d', GunRack1 = '%d' WHERE sqlid = '%d'", Veh[idx][GunRack][0], Veh[idx][GunRack][1], sql);
		mysql_query(MYSQL_MAIN, query);
	}
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if(response && GetPVarInt(playerid, "WepEditSlot") > 0)
	{
		if(fScaleX != 1 || fScaleY != 1 || fScaleZ != 1)
		{
		    SetPlayerArmedWeapon(playerid, Player[playerid][HolsteredWeapon][GetPVarInt(playerid, "WepIndex")]);
			DeletePVar(playerid, "WepIndex");
			DeletePVar(playerid, "WepEditSlot");
		    return SendClientMessage(playerid, -1, "You cannot edit the size of the weapon.");
		}
		switch(GetPVarInt(playerid, "WepEditSlot"))
		{
			case 1:
		    {
		        Player[playerid][Wep3Pos][0] = fOffsetX;
		        Player[playerid][Wep3Pos][1] = fOffsetY;
		        Player[playerid][Wep3Pos][2] = fOffsetZ;
		        Player[playerid][Wep3Pos][3] = fRotX;
		        Player[playerid][Wep3Pos][4] = fRotY;
		        Player[playerid][Wep3Pos][5] = fRotZ;
		        Player[playerid][EditedWeapon][0] = 1;
		    }
		    case 2:
		    {
  				Player[playerid][Wep5Pos][0] = fOffsetX;
		        Player[playerid][Wep5Pos][1] = fOffsetY;
		        Player[playerid][Wep5Pos][2] = fOffsetZ;
		        Player[playerid][Wep5Pos][3] = fRotX;
		        Player[playerid][Wep5Pos][4] = fRotY;
		        Player[playerid][Wep5Pos][5] = fRotZ;
		        Player[playerid][EditedWeapon][1] = 1;
		    }
		    case 3:
		    {
   		 		Player[playerid][Wep6Pos][0] = fOffsetX;
		        Player[playerid][Wep6Pos][1] = fOffsetY;
		        Player[playerid][Wep6Pos][2] = fOffsetZ;
		        Player[playerid][Wep6Pos][3] = fRotX;
		        Player[playerid][Wep6Pos][4] = fRotY;
		        Player[playerid][Wep6Pos][5] = fRotZ;
		        Player[playerid][EditedWeapon][2] = 1;
		    }
		}		
		DeletePVar(playerid, "WepEditSlot");
		DeletePVar(playerid, "WepIndex");
		SendClientMessage(playerid, -1, "Weapon position saved.");
	}
	return 1;
}

CMD:editwep(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 1)
		return 1;
	
	new id, index = -1;
	if(sscanf(params, "d", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /editwep [1-3] (1 = Shotgun, 2 = Assault Rifle, 3 = Sniper Rifle)");
	
	if(id < 1 || id > 3)
		return SendClientMessage(playerid, GREY, "SYNTAX: /editwep [1-3] (1 = Shotgun, 2 = Assault Rifle, 3 = Sniper Rifle)");
		
	switch(id)
	{
	    case 1:
	    {
			if(!PlayerHasWeaponInSlot(playerid, 3))
				return SendClientMessage(playerid, -1, "You don't have a shotgun.");
				
			for(new i; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
			{
				if(Player[playerid][HolsteredWeapon][i] == 25 || Player[playerid][HolsteredWeapon][i] == 26 || Player[playerid][HolsteredWeapon][i] == 27)
				{
					index = i;
					break;
				}
			}
			if(index == -1)
				return SendClientMessage(playerid, -1, "The weapon you want to edit needs to be holstered first.");
	    }
	    case 2:
	    {
			if(!PlayerHasWeaponInSlot(playerid, 5))
				return SendClientMessage(playerid, -1, "You don't have an assault rifle.");
				
 			for(new i; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
			{
				if(Player[playerid][HolsteredWeapon][i] == 30 || Player[playerid][HolsteredWeapon][i] == 31)
				{
					index = i;
					break;
				}
			}
			if(index == -1)
				return SendClientMessage(playerid, -1, "The weapon you want to edit needs to be holstered first.");			
	    }
	    case 3:
	    {
			if(!PlayerHasWeaponInSlot(playerid, 6))
				return SendClientMessage(playerid, -1, "You don't have a rifle.");
				
			for(new i; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
			{
				if(Player[playerid][HolsteredWeapon][i] == 33 || Player[playerid][HolsteredWeapon][i] == 34)
				{
					index = i;
					break;
				}
			}
			if(index == -1)
				return SendClientMessage(playerid, -1, "The weapon you want to edit needs to be holstered first.");
	    }
	}
	
	SetPVarInt(playerid, "WepIndex", index);
	SetPVarInt(playerid, "WepEditSlot", id);
	EditAttachedObject(playerid, index);
	return 1;
}

stock AddToOwnerHistory(playerid, houseid)
{
	new query[128];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "INSERT INTO HouseOwnerHistory (HouseID, Owner, BuyTimestamp) VALUES ('%d', '%e', '%e')", houseid, GetNormalNameEx(playerid), GetDate());
	mysql_query(MYSQL_MAIN, query, false);
	return 1;
}

CMD:houseinfo(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 1)
		return 1;
		
	if(Businesses[Player[playerid][InBusiness]][bType] != 24)
		return SendClientMessage(playerid, WHITE, "You must be inside the real estate business to look up a house's information.");
	
	new hid;
	if(sscanf(params, "d", hid))
		return SendClientMessage(playerid, GREY, "SYNTAX: /houseinfo [house id]");
	
	if(Houses[hid][hFakeOwner] > 0)
		return SendClientMessage(playerid, -1, "No records for this house.");
		
	new name[MAX_PLAYER_NAME], i;
	format(name, sizeof(name), "%s", Houses[hid][hOwner]);
	while ((i = strfind(name, "_", false, i)) != -1)
		name[i] = ' ';
	new string[300], location[MAX_ZONE_NAME];
	Get2DPosZone(Houses[hid][hExteriorX], Houses[hid][hExteriorY], location, MAX_ZONE_NAME);
	format(string, sizeof(string), "--[House %d information]--\nLocation: %s\nCurrent Owner: %s", hid, location, name);
	
	new query[128];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM HouseOwnerHistory WHERE HouseID = '%d' ORDER BY BuyTimestamp DESC LIMIT 5", hid);
	new Cache:cache = mysql_query(MYSQL_MAIN, query), idx, owner[MAX_PLAYER_NAME], timestamp[30];
	new count = cache_get_row_count();
	if(count == 0)
		return ShowPlayerDialog(playerid, DIALOG_HOUSE_INFO, DIALOG_STYLE_MSGBOX, "House Information", string, "Close", "");
	
	format(string, sizeof(string), "%s\n--[Previous owner history]--", string);
	while(idx < count)
	{
		cache_set_active(cache);
		cache_get_field_content(idx, "Owner", owner);
		cache_get_field_content(idx, "BuyTimeStamp", timestamp);
		format(string, sizeof(string), "%s\n%s - Purchased: %s", string, owner, timestamp);
		idx++;
	}	
	ShowPlayerDialog(playerid, DIALOG_HOUSE_INFO, DIALOG_STYLE_MSGBOX, "House Information", string, "Close", "");
	return 1;
}

CMD:housebaseprice(playerid, params[])
{
	if(Player[playerid][House] < 1 && Player[playerid][House2] < 1)
		return SendClientMessage(playerid, -1, "You don't own a house.");
	
	new string[128];
	if(Player[playerid][House] > 0)
	{
		format(string, sizeof(string), "Base price of house %d: %s", Player[playerid][House], PrettyMoney(Houses[Player[playerid][House]][HousePrice]));
		SendClientMessage(playerid, -1, string);
	}
	if(Player[playerid][House2] > 0)
	{
		format(string, sizeof(string), "Base price of house %d: %s", Player[playerid][House2], PrettyMoney(Houses[Player[playerid][House2]][HousePrice]));
		SendClientMessage(playerid, -1, string);
	}	
	return 1;
}

stock GetVehicleBasePrice(model)
{
	new base;
	switch(model)
	{
		case 400: base = 25000;
		case 401: base = 4000;
		case 402: base = 50000;
		case 404: base = 17500;
		case 405: base = 40000;
		case 409: base = 80000;
		case 410: base = 4000;
		case 411: base = 400000;
		case 412: base = 22500;
		case 413: base = 65000;
		case 414: base = 90000;
		case 415: base = 200000;
		case 418: base = 22500;
		case 419: base = 15500;
		case 420: base = 45000;
		case 421: base = 30000;
		case 422: base = 12000;
		case 426: base = 24000;
		case 429: base = 120000;
		case 436: base = 4000;
		case 438: base = 60000;
		case 439: base = 15000;
		case 440: base = 70000;
		case 445: base = 25000;
		case 451: base = 250000;
		case 458: base = 25000;
		case 461: base = 20000;
		case 462: base = 5500;
		case 463: base = 25000;
		case 466: base = 20000;
		case 467: base = 40000;
		case 468: base = 12500;
		case 469: base = 115000;
		case 470: base = 10000;
		case 471: base = 10000;
		case 474: base = 25000;
		case 475: base = 45000;
		case 477: base = 100000;
		case 478: base = 12500;
		case 479: base = 20000;
		case 480: base = 60000;
		case 481: base = 2000;
		case 482: base = 55000;
		case 483: base = 40000;
		case 487: base = 350000;
		case 489: base = 30000;
		case 491: base = 12500;
		case 492: base = 25000;
		case 495: base = 70000;
		case 496: base = 25000;
		case 499: base = 65000;
		case 500: base = 20000;
		case 505: base = 30000;
		case 506: base = 175000;
		case 507: base = 22500;
		case 508: base = 80000;
		case 509: base = 2000;
		case 510: base = 2000;
		case 516: base = 22500;
		case 517: base = 5000;
		case 518: base = 20000;
		case 521: base = 20000;
		case 522: base = 100000;
		case 526: base = 12500;
		case 527: base = 4000;
		case 529: base = 22500;
		case 533: base = 40000;
		case 534: base = 30000;
		case 535: base = 12500;
		case 536: base = 17000;
		case 540: base = 27250;
		case 541: base = 400000;
		case 542: base = 5000;
		case 543: base = 18000;
		case 545: base = 150000;
		case 546: base = 22500;
		case 547: base = 22500;
		case 549: base = 4500;
		case 550: base = 24000;
		case 551: base = 25500;
		case 554: base = 15000;
		case 555: base = 100000;
		case 558: base = 70000;
		case 559: base = 85000;
		case 560: base = 100000;
		case 561: base = 70000;
		case 562: base = 85000;
		case 565: base = 70000;
		case 566: base = 25000;
		case 567: base = 20000;
		case 575: base = 25000;
		case 576: base = 15000;
		case 579: base = 45000;
		case 580: base = 80000;
		case 581: base = 8000;
		case 585: base = 22500;
		case 586: base = 10000;
		case 587: base = 50000;
		case 589: base = 25000;
		case 600: base = 21000;
		case 602: base = 50000;
		case 603: base = 40000;
		default: base = 4000;
	}
	return base;
}

stock CheckIfMasked(id)
{
	if(id > MAX_PLAYERS)
 	{
 		foreach(Player, i)
 		{
			if(Player[i][MaskID] == id && Player[i][Mask] == 1)
			{
				id = i;
			    break;
			}
		}
	}

	if(id > MAX_PLAYERS)
	    id = -1;
	return id;
}

CMD:unmask(playerid, params[])
 {
	if(Player[playerid][AdminLevel] < 2)
		return 1;
	
	new id, string[128];
	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /unmask [id]");
	
	if(Player[id][Mask] == 0)
		return SendClientMessage(playerid, -1, "This player isn't masked.");
	
	format(string, sizeof(string), "You have unmasked %s. Their mask ID was: %d", GetName(id), Player[id][MaskID]);
	SendClientMessage(playerid, -1, string);
 	SendClientMessage(id, YELLOW, "You have been forcefully unmasked by an admin.");
	foreach(Player, i)
	{
		ShowPlayerNameTagForPlayer(i, id, 1);
	}
	for(new i; i < 10; i++)
	{
		Player[id][MaskShowTag][i] = -1;
	}
	Player[id][Mask] = 0;
	return 1;
}

CMD:shownametag(playerid, params[])
{
	if(Player[playerid][Mask] != 1)
		return SendClientMessage(playerid, -1, "You're not masked.");
 	
 	new id, string[128];
 	if(sscanf(params, "u", id))
 		return SendClientMessage(playerid, GREY, "SYNTAX: /shownametag [id]");
 	
	new count = 0;
	for(new i; i < 10; i++)
	{
		if(Player[playerid][MaskShowTag][i] > -1)
			count++;
	}
	if(count > 9)
		return SendClientMessage(playerid, GREY, "You have already shown your nametag to 10 players.");
	
	for(new i; i < 10; i++)
	{
		if(Player[playerid][MaskShowTag][i] < 0)
		{
			Player[playerid][MaskShowTag][i] = id;
			break;
		}
	}
 	ShowPlayerNameTagForPlayer(id, playerid, 1);
 	format(string, sizeof(string), "Your nametag is now visible to %s. You can show your nametag to %d more players.", GetNameEx(id), 9 - count);
 	SendClientMessage(playerid, -1, string);
 	return 1;
}

CMD:buystorage(playerid, params[])
{
	if(Player[playerid][House] == 0 && Player[playerid][House2] == 0)
		return SendClientMessage(playerid, -1, "You don't have a house.");

	if(Player[playerid][InHouse] == 0)
		return SendClientMessage(playerid, -1, "You are not in a house.");

	if(Player[playerid][InHouse] != Player[playerid][House] && Player[playerid][InHouse] != Player[playerid][House2])
		return SendClientMessage(playerid, -1, "You must be in your own house to buy additional storage.");
		
	new string[128], hid = Player[playerid][InHouse];
	
	if(Houses[hid][HouseStorageSize] >= (Houses[hid][HouseStorageBase] * 2))
		return SendClientMessage(playerid, -1, "You cannot purchase any more storage slots.");
	
	format(string, sizeof(string), "Current slots: %d | Maximum slots: %d | $2000 per slot\nEnter amount of slots you wish to buy:", Houses[hid][HouseStorageSize], (Houses[hid][HouseStorageBase] * 2));
	ShowPlayerDialog(playerid, DIALOG_HOUSE_BUYSTORAGE, DIALOG_STYLE_INPUT, "Buy Additional Storage Slots", string, "Next", "Cancel");
	SetPVarInt(playerid, "BuySlotHouse", hid);
	return 1;
}

CMD:bstore(playerid, params[])
{
	new bid = Player[playerid][InBusiness];
	if(bid == 0)
		return SendClientMessage(playerid, -1, "You are not inside any business.");

	if(Businesses[bid][bLinkedGroup] > 0)
	{
		if(!PlayerHasBusinessKey(playerid, bid))
		{
			if(Businesses[bid][bLinkedGroup] != Player[playerid][Group] && Player[playerid][InBusiness] != Player[playerid][Business])
				return SendClientMessage(playerid, -1, "You are not apart of this business group.");

			if(!IsPlayerInRangeOfPoint(playerid, 5.0, Businesses[bid][bSafeX], Businesses[bid][bSafeY], Businesses[bid][bSafeZ]))
				return SendClientMessage(playerid, -1, "You are not close enough to the safe location.");
		}
	}
	else
	{
		if(!PlayerHasBusinessKey(playerid, bid) || bid == 0)
			return SendClientMessage(playerid, -1, "You must be in a business you have a key to to do this.");
	}

	if(Player[playerid][PlayingHours] < 2)
		return SendClientMessage(playerid, -1, "You need 2 playing hours before you can deposit into businesses.");

	if(GetPVarInt(playerid, "StoreTimer") > gettime())
		return 1;

	new item_name[32], item_amount, item_type, PlayerItemAmount;
	if(sscanf(params, "s[32]d", item_name, item_amount))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /bstore [item] [amount]");
		SendClientMessage(playerid, GREY, "Types: money, speed, cocaine, pot, weapon, streetmats, standardmats, militarymats, potseeds, poorkevlar, standardkevlar, militarykevlar");
		return SendClientMessage(playerid, GREY, "Types: bomb");
	}

	item_type = GetItemTypeFromName(item_name);
		
	if(item_type == ITEM_TYPE_ARMOUR_POOR || item_type == ITEM_TYPE_ARMOUR_STANDARD || item_type == ITEM_TYPE_ARMOUR_MILITARY)
		item_amount = 1;
		
	if(item_amount < 1)
		return SendClientMessage(playerid, WHITE, "Invalid item amount.");

	if(item_type == ITEM_TYPE_NONE)
	{
		return SendClientMessage(playerid, WHITE, "Invalid item name.");
	}

	if(item_type != ITEM_TYPE_WEAPON && item_type != ITEM_TYPE_ARMOUR_POOR && item_type != ITEM_TYPE_ARMOUR_STANDARD && item_type != ITEM_TYPE_ARMOUR_MILITARY)
	{
	    PlayerItemAmount = GetPlayerItemAmount(playerid, item_type);
	    if( PlayerItemAmount < item_amount)
		    return SendClientMessage(playerid, WHITE, "You don't have that amount on you.");
    }

	SetPVarInt(playerid, "StoreTimer", gettime() + 3);
	if(item_type == ITEM_TYPE_WEAPON)
	{
		item_amount = GetPlayerWeapon(playerid);
		if(!PlayerHasWeapon(playerid, item_amount))
			return 1;
		if(item_amount == 0 || item_amount == 46)
			return SendClientMessage(playerid, WHITE, "You can't store that weapon.");
	}
	
	if(item_type == ITEM_TYPE_ARMOUR_POOR)
	{
		if(Player[playerid][HasArmour] != 100)
			return SendClientMessage(playerid, -1, "You don't have a poor kevlar vest to store.");
	}
	if(item_type == ITEM_TYPE_ARMOUR_STANDARD)
	{
		if(Player[playerid][HasArmour] != 115)
			return SendClientMessage(playerid, -1, "You don't have a standard kevlar vest to store.");		
	}
	if(item_type == ITEM_TYPE_ARMOUR_MILITARY)
	{
		if(Player[playerid][HasArmour] != 130)
			return SendClientMessage(playerid, -1, "You don't have a military kevlar vest to store.");		
	}
	if(item_type == ITEM_TYPE_BOMB)
	{
		if(Player[playerid][Bomb] < 1)
			return SendClientMessage(playerid, -1, "You don't have a bomb to store.");
	}
	if(item_type == ITEM_TYPE_TENT)
	{
		if(Player[playerid][Tent] < 1)
			return SendClientMessage(playerid, -1, "You don't have a tent to store.");
	}

	if((CalculateContainerWeight(bid, CONTAINER_TYPE_BIZ) + GetItemWeight(item_type, item_amount)) > Businesses[bid][bStorage])
		return SendClientMessage(playerid, -1, "There isn't enough room in this business to store that.");

	AddToStorage(bid, CONTAINER_TYPE_BIZ, item_type, item_amount);
	RemoveItemFromPlayer(playerid, item_type, item_amount);

	new string[128];
	if(item_type == ITEM_TYPE_WEAPON)
		format(string, sizeof(string), "* %s has stored a weapon in the business.", GetNameEx(playerid));
	else if(item_type == ITEM_TYPE_ARMOUR_POOR || item_type == ITEM_TYPE_ARMOUR_STANDARD || item_type == ITEM_TYPE_ARMOUR_MILITARY)
		format(string, sizeof(string), "* %s has stored a kevlar vest in the business.", GetNameEx(playerid));
	else format(string, sizeof(string), "* %s has stored some %s in the business.", GetNameEx(playerid), strtolower(GetItemName(item_type)));
	NearByMessage(playerid, NICESKY, string);

	if(item_type == ITEM_TYPE_WEAPON)
		format(string, sizeof(string), "You have stored a %s in the business.", GetWeaponNameEx(item_amount));
	else if(item_type == ITEM_TYPE_ARMOUR_POOR || item_type == ITEM_TYPE_ARMOUR_STANDARD || item_type == ITEM_TYPE_ARMOUR_MILITARY)
		format(string, sizeof(string), "You have stored a kevlar vest in the business.");
	else format(string, sizeof(string), "You have stored %d %s in the business.", item_amount, strtolower(GetItemName(item_type)));
	SendClientMessage(playerid, WHITE, string);

	if(item_type == ITEM_TYPE_WEAPON)
		format(string, sizeof(string), "[BUSINESS] %s has stored a %s (%d) in business id %d.", GetName(playerid), GetWeaponNameEx(item_amount), item_amount, bid);
	else format(string, sizeof(string), "[BUSINESS] %s has stored %s (%d) in business id %d. (New Inv Amount: %d)", GetName(playerid), GetItemName(item_type), item_amount, bid, GetPlayerItemAmount(playerid, item_type));
	StatLog(string);
	StorageLog(string);
	return 1;
}

CMD:btake(playerid, params[])
{
	new bid = Player[playerid][InBusiness];
	if(bid == 0)
		return SendClientMessage(playerid, -1, "You are not inside any business.");

	if((Player[playerid][CopDuty] != 1 && Player[playerid][GroupRank] < 5) && Player[playerid][AdminDuty] < 1)
	{
		if(Businesses[bid][bLinkedGroup] > 0)
		{
			if(!PlayerHasBusinessKey(playerid, bid))
			{
				if(Businesses[bid][bLinkedGroup] != Player[playerid][Group] && Player[playerid][InBusiness] != Player[playerid][Business])
					return SendClientMessage(playerid, -1, "You are not apart of this business group.");

				if(!IsPlayerInRangeOfPoint(playerid, 5.0, Businesses[bid][bSafeX], Businesses[bid][bSafeY], Businesses[bid][bSafeZ]))
					return SendClientMessage(playerid, -1, "You are not close enough to the safe location.");
			}
		}
		else
		{
			if(!PlayerHasBusinessKey(playerid, bid) || bid == 0)
				return SendClientMessage(playerid, -1, "You must be in a business you have a key to to do this.");
		}
	}

	new string[64];
	format(string, sizeof(string), "Business Storage (%d/%d)", CalculateContainerWeight(bid, CONTAINER_TYPE_BIZ), Businesses[bid][bStorage]);
	ShowPlayerDialog(playerid, BUSINESS_TAKE, DIALOG_STYLE_LIST, string, GetStorageString(bid, CONTAINER_TYPE_BIZ), "Take", "Exit");
	return 1;
}

CMD:buycure(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 1.5, Businesses[Player[playerid][InBusiness]][bInteractX], Businesses[Player[playerid][InBusiness]][bInteractY], Businesses[Player[playerid][InBusiness]][bInteractZ]) && Player[playerid][InBusiness] != 0)
		return SendClientMessage(playerid, GREY, "You must stand near the interaction point to do this.");
		
	new id = Player[playerid][InBusiness];
	if(Businesses[id][bType] != 17)
		return SendClientMessage(playerid, -1, "You must be in a hospital to buy a vaccination pill.");
		
	if(Player[playerid][Money] < 100)
		return SendClientMessage(playerid, -1, "You need $100 to purchase a vaccination pill!");
	
	if(Player[playerid][Infected] == 0)
		return SendClientMessage(playerid, -1, "You're not infected!");
		
	new string[128];
	format(string, sizeof(string), "* %s swallows a small pink and white pill.", GetNameEx(playerid));
	NearByMessage(playerid, NICESKY, string);
	Player[playerid][Money] -= 100;
	Player[playerid][Infected] = 0;
	Player[playerid][VirusCount] = 0;
	SendClientMessage(playerid, LSFMD_PEACH, "You instantly feel rejuvenated and your temperature goes down.");
	return 1;
}

CMD:givegunlicense(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 1)
		return 1;
	
	if(Player[playerid][GroupRank] < 7)
		return 1;
	
	new id, pistol, shotgun, rifle, string[128];
	if(sscanf(params, "uddd", id, pistol, shotgun, rifle))
		return SendClientMessage(playerid, GREY, "SYNTAX: /givegunlicense [playerid] [pistol? yes = 1, no = 0] [shotgun?] [rifle?]");
		
	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, -1, "That player is not connected or logged in.");
	
	if(GetDistanceBetweenPlayers(playerid, id) > 5.0)
		return SendClientMessage(playerid, -1, "That player is too far away!");
		
	if(Player[id][GunLicense] > 0)
		return SendClientMessage(playerid, -1, "This player already has a gun license.");
	
	if(pistol == 1 && shotgun == 0 && rifle == 0)
		Player[id][GunLicense] = 1;
	else if(pistol == 1 && shotgun == 1 && rifle == 0)
		Player[id][GunLicense] = 2;
	else if(pistol == 1 && shotgun == 1 && rifle == 1)
		Player[id][GunLicense] = 3;
	else if(pistol == 0 && shotgun == 1 && rifle == 0)
		Player[id][GunLicense] = 4;
	else if(pistol == 0 && shotgun == 1 && rifle == 1)
		Player[id][GunLicense] = 5;
	else if(pistol == 0 && shotgun == 0 && rifle == 1)
		Player[id][GunLicense] = 6;
	else if(pistol == 1 && shotgun == 0 && rifle == 1)
		Player[id][GunLicense] = 7;
	else
		return SendClientMessage(playerid, -1, "An error has occured, contact a developer.");
	
	format(string, sizeof(string), "* %s has handed %s a gun license.", GetNameEx(playerid), GetNameEx(id));
	NearByMessage(playerid, NICESKY, string);
	ShowGunLicense(id, id);
	return 1;
}

CMD:showgunlicense(playerid, params[])
{
	if(Player[playerid][GunLicense] < 1)
		return SendClientMessage(playerid, -1, "You don't have a gun license.");
	
	new id, string[128];
	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /showgunlicense [playerid]");
	
	if(GetDistanceBetweenPlayers(playerid, id) > 5.0)
		return SendClientMessage(playerid, -1, "That player is too far away!");
	
	format(string, sizeof(string), "* %s has shown %s their gun license.", GetNameEx(playerid), GetNameEx(id));
	NearByMessage(playerid, NICESKY, string);
	ShowGunLicense(playerid, id);
	return 1;
}
stock ShowGunLicense(playerid, id)
{
	new string[128];
	SendClientMessage(id, WHITE, "-------------------------------------------------------------------");
	SendClientMessage(id, -1, "-- State of San Andreas Firearms License --");
	format(string, sizeof(string), "Name: %s | Age: %d", GetNameEx(playerid), Player[playerid][Age]);
	SendClientMessage(id, -1, string);
	
	new x = Player[playerid][GunLicense];
	if(x == 1 || x == 2 || x == 3 || x == 7)
		SendClientMessage(id, GREY, "Concealed carry pistol permit");
	if(x == 2 || x == 3 || x == 4 || x == 5)
		SendClientMessage(id, GREY, "Home defense shotgun permit");
	if(x == 3 || x == 5 || x == 6 || x == 7)
		SendClientMessage(id, GREY, "Home defense rifle permit");
	
	SendClientMessage(id, WHITE, "-------------------------------------------------------------------");
	return 1;
}

CMD:ticketdetails(playerid, params[])
{
	new amount = GetPlayerOwedTicketsAmount(GetName(playerid));

	if(amount < 1)
		return SendClientMessage(playerid, -1, "You don't have any tickets to pay.");
	
	if(GetPVarInt(playerid, "TicketReload") > gettime())
	{
		new string[128];
		format(string, sizeof(string), "You must wait %d seconds before you can do this again.", GetPVarInt(playerid, "TicketReload") - gettime());
		return SendClientMessage(playerid, -1, string);
	}
	new query[128], offense[128], officer[MAX_PLAYER_NAME], timegiven[64], strikes, string[128];
	mysql_format(MYSQL_MAIN, query, sizeof(query), "SELECT * FROM PoliceTickets WHERE offenderName = '%s' AND Active = '1'", GetName(playerid));
	new Cache:cache = mysql_query(MYSQL_MAIN, query), idx;
	new count = cache_get_row_count();
	new name1[MAX_PLAYER_NAME], i;
	while(idx < count)
	{
		cache_set_active(cache);
		cache_get_field_content(idx, "Offense", offense);
		cache_get_field_content(idx, "officerName", officer);
		cache_get_field_content_int(idx, "ticketAmount", amount);
		cache_get_field_content(idx, "timeGiven", timegiven);
		strikes = cache_get_field_content_int(idx, "strikesIssued");
		format(name1, sizeof(name1), "%s", officer);
		while ((i = strfind(name1, "_", false, i)) != -1)
			name1[i] = ' ';
		SendClientMessage(playerid, GREY, "--------------------------------------------------");
		format(string, sizeof(string), "Name: %s | Ticket reason: %s | Amount: %s", GetNormalNameEx(playerid), offense, PrettyMoney(amount));
		SendClientMessage(playerid, WHITE, string);
		format(string, sizeof(string), "Strikes issued: %d | Date issued: %s", strikes, timegiven);
		SendClientMessage(playerid, -1, string);
		format(string, sizeof(string), "Issued by: %s", name1);
		SendClientMessage(playerid, -1, string);
		SendClientMessage(playerid, GREY, "--------------------------------------------------");	
		idx++;
	}
	SetPVarInt(playerid, "TicketReload", gettime() + 60);
	return 1;
}

CMD:editbstorage(playerid, params[])
{ 
	if(Player[playerid][AdminLevel] < 4)
		return 1;
	
	new id, string[128], amount;
	if(sscanf(params, "dd", id, amount))
		return SendClientMessage(playerid, GREY, "SYNTAX: /editbstorage [business id] [storage size]");
	
	if(id < 0 || id > MAX_BUSINESSES)
		return SendClientMessage(playerid, WHITE, "Invalid business ID.");
	
	if(amount < 0)
		return SendClientMessage(playerid, -1, "Size cannot be less than zero.");
		
	format(string, sizeof(string), "You have set business %d's storage to %d (was %d)", id, amount, Businesses[id][bStorage]);
	SendClientMessage(playerid, -1, string);
	Businesses[id][bStorage] = amount;
	SaveBusiness(id);
	return 1;
}

CMD:utrack(playerid, params[])
{
	if(Player[playerid][PhoneN] == -1)
		return SendClientMessage(playerid, -1, "You don't own a mobile phone!");

	if(strval(GetPhoneInfo(Player[playerid][PhoneN], "status")) == 0)
		return SendClientMessage(playerid, -1, "Your phone is off.");

	if(Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] == 1 || Player[playerid][Tied] >= 1)
		return SendClientMessage(playerid, -1, "You can't do that, you're incapacitated!");

	if(Player[playerid][PrisonDuration] > 0 || Player[playerid][PrisonID] > 0)
		return SendClientMessage(playerid, -1, "You can't do that while in prison!");

	if(Player[playerid][Gagged] == 1)
		return SendClientMessage(playerid, -1, "You can't do that, your mouth is covered!");

	if(strval(GetPhoneInfo(Player[playerid][PhoneN], "trackapp")) >= 1)
		ShowPlayerDialog(playerid, PHONE_TRACK, DIALOG_STYLE_INPUT, "uTrack", "Welcome to the uTrack phone number tracking app.\nPlease note each track costs $150!\n\nPlease enter the phone number you wish to track!", "Track!", "Cancel");
	else
		SendClientMessage(playerid, -1, "You don't have that app!");
		
	return 1;
}

CMD:rlow(playerid, params[])
{
	new Message[128], Name1[MAX_PLAYER_NAME], string[128], string2[128];
	if(sscanf(params, "s[128]", Message))
	{
		SendClientMessage(playerid, GREY, "SYNTAX: /rlow [message]");
	}
	else
	{
		if(strlen(Message) < 1 || !IsPlayerConnectedEx(playerid))
			return 1;
			
		if(GetPlayerToggle(playerid, TOGGLE_RADIO) == true)
			return SendClientMessage(playerid, WHITE, "Your radio is off.");
		else
		{
			if(Groups[Player[playerid][Group]][CommandTypes] == 6 || Groups[Player[playerid][Group]][CommandTypes] == 11 || Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 3 || Groups[Player[playerid][Group]][CommandTypes] == 5)
			{
				#if defined MTG_PLAGUE
				if(Player[playerid][VirusCount] >= PLAGUE_SPEECH_MIN)
					format(Message, strlen(Message) + 1, "%s", MixUpSentence(Message, Player[playerid][VirusCount], strlen(Message) + 1));
				#endif
				format(Name1, sizeof(Name1), GetNormalNameEx(playerid));

				if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 3)
				{
					new splitpos = 110 - (40+strlen(Player[playerid][NormalName]));
					if(strlen(Message) > splitpos)
					{
						new str1[128], str2[128];
						strsplit(Message, str1, str2, splitpos);

						switch(Player[playerid][GroupRank])
						{
							case 0:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName0], Name1, Player[playerid][PDBadge], str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName0], Name1, Player[playerid][PDBadge], str2);
							}
							case 1:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName1], Name1, Player[playerid][PDBadge], str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName1], Name1, Player[playerid][PDBadge], str2);
							}
							case 2:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName2], Name1, Player[playerid][PDBadge], str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName2], Name1, Player[playerid][PDBadge], str2);
							}
							case 3:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName3], Name1, Player[playerid][PDBadge], str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName3], Name1, Player[playerid][PDBadge], str2);
							}
							case 4:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName4], Name1, Player[playerid][PDBadge], str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName4], Name1, Player[playerid][PDBadge], str2);
							}
							case 5:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName5], Name1, Player[playerid][PDBadge], str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName5], Name1, Player[playerid][PDBadge], str2);
							}
							case 6:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName6], Name1, Player[playerid][PDBadge], str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName6], Name1, Player[playerid][PDBadge], str2);
							}
							case 7:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName7], Name1, Player[playerid][PDBadge], str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName7], Name1, Player[playerid][PDBadge], str2);
							}
							case 8:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName8], Name1, Player[playerid][PDBadge], str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName8], Name1, Player[playerid][PDBadge], str2);
							}
							case 9:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName9], Name1, Player[playerid][PDBadge], str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName9], Name1, Player[playerid][PDBadge], str2);
							}
							case 10:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName10], Name1, Player[playerid][PDBadge], str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName10], Name1, Player[playerid][PDBadge], str2);
							}
							default:
							{
								format(string, sizeof(string), "[Radio Chat] Undefined %s whispers: %s", Name1, str1);
								format(string2, sizeof(string2), "[Radio Chat] Undefined %s whispers: %s", Name1, str2);
							}
						}
					}
					else
					{
						switch(Player[playerid][GroupRank])
						{
							case 0:	format(string, sizeof(string), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName0], Name1, Player[playerid][PDBadge], Message);
							case 1:	format(string, sizeof(string), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName1], Name1, Player[playerid][PDBadge], Message);
							case 2:	format(string, sizeof(string), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName2], Name1, Player[playerid][PDBadge], Message);
							case 3:	format(string, sizeof(string), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName3], Name1, Player[playerid][PDBadge], Message);
							case 4:	format(string, sizeof(string), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName4], Name1, Player[playerid][PDBadge], Message);
							case 5:	format(string, sizeof(string), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName5], Name1, Player[playerid][PDBadge], Message);
							case 6:	format(string, sizeof(string), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName6], Name1, Player[playerid][PDBadge], Message);
							case 7:	format(string, sizeof(string), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName7], Name1, Player[playerid][PDBadge], Message);
							case 8:	format(string, sizeof(string), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName8], Name1, Player[playerid][PDBadge], Message);
							case 9:	format(string, sizeof(string), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName9], Name1, Player[playerid][PDBadge], Message);
							case 10: format(string, sizeof(string), "[Radio Chat] %s %s #%d whispers: %s", Groups[Player[playerid][Group]][RankName10], Name1, Player[playerid][PDBadge], Message);
							default: format(string, sizeof(string), "[Radio Chat] Undefined %s whispers: %s", Name1, Message);
						}
					}
				}
				else
				{
					new splitpos = 110 - (36+strlen(GetName(playerid)));
					if(strlen(Message) > splitpos)
					{
						new str1[128], str2[128];
						strsplit(Message, str1, str2, splitpos);

						switch(Player[playerid][GroupRank])
						{
							case 0:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName0], Name1, str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName0], Name1, str2);
							}
							case 1:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName1], Name1, str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName1], Name1, str2);
							}
							case 2:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName2], Name1, str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName2], Name1, str2);
							}
							case 3:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName3], Name1, str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName3], Name1, str2);
							}
							case 4:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName4], Name1, str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName4], Name1, str2);
							}
							case 5:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName5], Name1, str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName5], Name1, str2);
							}
							case 6:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName6], Name1, str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName6], Name1, str2);
							}
							case 7:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName7], Name1, str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName7], Name1, str2);
							}
							case 8:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName8], Name1, str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName8], Name1, str2);
							}
							case 9:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName9], Name1, str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName9], Name1, str2);
							}
							case 10:
							{
								format(string, sizeof(string), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName10], Name1, str1);
								format(string2, sizeof(string2), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName10], Name1, str2);
							}
							default:
							{
								format(string, sizeof(string), "[Radio Chat] Undefined %s whispers: %s", Name1, str1);
								format(string2, sizeof(string2), "[Radio Chat] Undefined %s whispers: %s", Name1, str2);
							}
						}
					}
					else
					{
						switch(Player[playerid][GroupRank])
						{
							case 0:	format(string, sizeof(string), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName0], Name1, Message);
							case 1:	format(string, sizeof(string), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName1], Name1, Message);
							case 2:	format(string, sizeof(string), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName2], Name1, Message);
							case 3:	format(string, sizeof(string), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName3], Name1, Message);
							case 4:	format(string, sizeof(string), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName4], Name1, Message);
							case 5:	format(string, sizeof(string), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName5], Name1, Message);
							case 6:	format(string, sizeof(string), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName6], Name1, Message);
							case 7:	format(string, sizeof(string), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName7], Name1, Message);
							case 8:	format(string, sizeof(string), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName8], Name1, Message);
							case 9:	format(string, sizeof(string), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName9], Name1, Message);
							case 10: format(string, sizeof(string), "[Radio Chat] %s %s whispers: %s", Groups[Player[playerid][Group]][RankName10], Name1, Message);
							default: format(string, sizeof(string), "[Radio Chat] Undefined %s whispers: %s", Name1, Message);
						}
					}
				}

				foreach(Player, i)
				{
					if(Player[playerid][Group] == Player[i][Group] && GetPlayerToggle(i, TOGGLE_RADIO) == false)
					{
						SendClientMessage(i, R_COLOUR, string);
						if(strlen(string2) > 0)
							SendClientMessage(i, R_COLOUR, string2);
					}
				}

				new splitpos = 110 - (15+strlen(Player[playerid][NormalName])), nearby1[128], nearby2[128];
				if(strlen(Message) > splitpos)
				{
					new str1[128], str2[128];
					strsplit(Message, str1, str2, splitpos);
					format(nearby1, sizeof(nearby1), "[Radio] %s says: %s", Name1, str1);
					format(nearby2, sizeof(nearby2), "[Radio] %s says: %s", Name1, str2);
				}
				else
					format(nearby1, sizeof(nearby1), "[Radio] %s says: %s", Name1, Message);

				new Float:pos[3], SeenMessage[MAX_PLAYERS];
				foreach(Player, i)
				{
					if(Groups[Player[i][Group]][CommandTypes] == 1 && GetPlayerToggle(i, TOGGLE_RADIO) == false)
					{
						GetPlayerPos(i, pos[0], pos[1], pos[2]);
						foreach(Player, j)
						{
							if(i == j)
								continue;
							if(SeenMessage[j] == 1)
								continue;
								
							if(IsPlayerInRangeOfPoint(j, 2, pos[0], pos[1], pos[2]) && GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(j))
							{
								if(Groups[Player[j][Group]][CommandTypes] != 1 || Groups[Player[j][Group]][CommandTypes] == 1 && GetPlayerToggle(j, TOGGLE_RADIO) == true)
								{
									SendClientMessage(j, GREY, nearby1);
									if(strlen(nearby2) > 0)
										SendClientMessage(j, GREY, nearby2);
									SeenMessage[j] = 1;
								}
							}
						}
					}
				}
				
				format(string, sizeof(string), "[Radio] %s whispers: %s", Name1, Message);
				GroupChatLog(string);
			}
			else
			{
				SendClientMessage(playerid, WHITE, "Your faction does not have a radio.");
			}
		}
	}
	return 1;
}

CMD:showpressid(playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] != 5)
		return SendClientMessage(playerid, -1, "You are not a member of LSNN.");
		
	new id, string[128];
	if(sscanf(params, "u", id))
		return SendClientMessage(playerid, GREY, "SYNTAX: /showpressid [id/name]");

	if(!IsPlayerConnectedEx(id))
		return SendClientMessage(playerid, -1, "That player is offline");

	if(GetDistanceBetweenPlayers(playerid, id) > 5.0)
		return SendClientMessage(playerid, -1, "That player is too far away");
		
	switch(Player[playerid][GroupRank])
	{
		case 0: format(string, sizeof(string), "%s %s", Groups[Player[playerid][Group]][RankName0], GetNormalNameEx(playerid));
		case 1: format(string, sizeof(string), "%s %s", Groups[Player[playerid][Group]][RankName1], GetNormalNameEx(playerid));
		case 2: format(string, sizeof(string), "%s %s", Groups[Player[playerid][Group]][RankName2], GetNormalNameEx(playerid));
		case 3: format(string, sizeof(string), "%s %s", Groups[Player[playerid][Group]][RankName3], GetNormalNameEx(playerid));
		case 4: format(string, sizeof(string), "%s %s", Groups[Player[playerid][Group]][RankName4], GetNormalNameEx(playerid));
		case 5: format(string, sizeof(string), "%s %s", Groups[Player[playerid][Group]][RankName5], GetNormalNameEx(playerid));
		case 6: format(string, sizeof(string), "%s %s", Groups[Player[playerid][Group]][RankName6], GetNormalNameEx(playerid));
		case 7: format(string, sizeof(string), "%s %s", Groups[Player[playerid][Group]][RankName7], GetNormalNameEx(playerid));
		case 8: format(string, sizeof(string), "%s %s", Groups[Player[playerid][Group]][RankName8], GetNormalNameEx(playerid));
		case 9: format(string, sizeof(string), "%s %s", Groups[Player[playerid][Group]][RankName9], GetNormalNameEx(playerid));
		case 10: format(string, sizeof(string), "%s %s", Groups[Player[playerid][Group]][RankName10], GetNormalNameEx(playerid));
	}

	SendClientMessage(id, GREY, "-----------------------");
	SendClientMessage(id, -1, "Los Santos News Network");
	SendClientMessage(id, -1, string);
	SendClientMessage(id, GREY, "-----------------------");
	
	format(string, sizeof(string), "%s has shown %s their press ID card.", GetNameEx(playerid), GetNameEx(id));
	NearByMessage(playerid, NICESKY, string);
	return 1;
}

CMD:checkcrimes(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3, 1556.278930, -1688.036865, -91.781410))
		return SendClientMessage(playerid, -1, "You are too far away.");
		
	if(Player[playerid][Identity] < 1)
		return SendClientMessage(playerid, -1, "You need a valid ID card to put into the machine.");
	
	new string[128], name[MAX_PLAYER_NAME];
	format(name, sizeof(name), "%s", Player[playerid][NormalName]);
	format(string, sizeof(string), "* %s inserts their ID card into the machine.", GetNameEx(playerid));
	NearByMessage(playerid, NICESKY, string);
	
	SetPVarString(playerid, "checkName", name);
	format(string, sizeof(string), "Tickets: %d\nActive Tickets: %s%d\nCrimes: %d", GetPlayerNumTickets(name, 0), (GetPlayerNumTickets(name, 1) > 0 ? ("{FF0000}") : ("{FFFFFF}")), GetPlayerNumTickets(name, 1), GetPlayerNumCrimes(name, 0));
	ShowPlayerDialog(playerid, LSPD_RECORD_CHECK, DIALOG_STYLE_LIST, "Record Check", string, "View", "Cancel");
	return 1;
}
